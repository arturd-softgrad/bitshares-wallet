/******/ (function(modules) { // webpackBootstrap
/******/ 	var hotApplyOnUpdate = true;
/******/ 	var hotCurrentHash = "105d1b0d9377e770572a"; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentParents = []; // eslint-disable-line no-unused-vars
/******/ 	
/******/ 	function hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var me = installedModules[moduleId];
/******/ 		if(!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if(me.hot.active) {
/******/ 				if(installedModules[request]) {
/******/ 					if(installedModules[request].parents.indexOf(moduleId) < 0)
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					if(me.children.indexOf(request) < 0)
/******/ 						me.children.push(request);
/******/ 				} else hotCurrentParents = [moduleId];
/******/ 			} else {
/******/ 				console.warn("[HMR] unexpected require(" + request + ") from disposed module " + moduleId);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		for(var name in __webpack_require__) {
/******/ 			if(Object.prototype.hasOwnProperty.call(__webpack_require__, name)) {
/******/ 				fn[name] = __webpack_require__[name];
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId, callback) {
/******/ 			if(hotStatus === "ready")
/******/ 				hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			__webpack_require__.e(chunkId, function() {
/******/ 				try {
/******/ 					callback.call(null, fn);
/******/ 				} finally {
/******/ 					finishChunkLoading();
/******/ 				}
/******/ 	
/******/ 				function finishChunkLoading() {
/******/ 					hotChunksLoading--;
/******/ 					if(hotStatus === "prepare") {
/******/ 						if(!hotWaitingFilesMap[chunkId]) {
/******/ 							hotEnsureUpdateChunk(chunkId);
/******/ 						}
/******/ 						if(hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 							hotUpdateDownloaded();
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/ 	
/******/ 	function hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 	
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfAccepted = true;
/******/ 				else if(typeof dep === "function")
/******/ 					hot._selfAccepted = dep;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback;
/******/ 				else
/******/ 					hot._acceptedDependencies[dep] = callback;
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfDeclined = true;
/******/ 				else if(typeof dep === "number")
/******/ 					hot._declinedDependencies[dep] = true;
/******/ 				else
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if(idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if(!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if(idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		return hot;
/******/ 	}
/******/ 	
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/ 	
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for(var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/ 	
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailibleFilesMap = {};
/******/ 	var hotCallback;
/******/ 	
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/ 	
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = (+id) + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/ 	
/******/ 	function hotCheck(apply, callback) {
/******/ 		if(hotStatus !== "idle") throw new Error("check() is only allowed in idle status");
/******/ 		if(typeof apply === "function") {
/******/ 			hotApplyOnUpdate = false;
/******/ 			callback = apply;
/******/ 		} else {
/******/ 			hotApplyOnUpdate = apply;
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		}
/******/ 		hotSetStatus("check");
/******/ 		hotDownloadManifest(function(err, update) {
/******/ 			if(err) return callback(err);
/******/ 			if(!update) {
/******/ 				hotSetStatus("idle");
/******/ 				callback(null, null);
/******/ 				return;
/******/ 			}
/******/ 	
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotAvailibleFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			for(var i = 0; i < update.c.length; i++)
/******/ 				hotAvailibleFilesMap[update.c[i]] = true;
/******/ 			hotUpdateNewHash = update.h;
/******/ 	
/******/ 			hotSetStatus("prepare");
/******/ 			hotCallback = callback;
/******/ 			hotUpdate = {};
/******/ 			var chunkId = 0;
/******/ 			{ // eslint-disable-line no-lone-blocks
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if(hotStatus === "prepare" && hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 		});
/******/ 	}
/******/ 	
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		if(!hotAvailibleFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for(var moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if(!hotAvailibleFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var callback = hotCallback;
/******/ 		hotCallback = null;
/******/ 		if(!callback) return;
/******/ 		if(hotApplyOnUpdate) {
/******/ 			hotApply(hotApplyOnUpdate, callback);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for(var id in hotUpdate) {
/******/ 				if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			callback(null, outdatedModules);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotApply(options, callback) {
/******/ 		if(hotStatus !== "ready") throw new Error("apply() is only allowed in ready status");
/******/ 		if(typeof options === "function") {
/******/ 			callback = options;
/******/ 			options = {};
/******/ 		} else if(options && typeof options === "object") {
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		} else {
/******/ 			options = {};
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		}
/******/ 	
/******/ 		function getAffectedStuff(module) {
/******/ 			var outdatedModules = [module];
/******/ 			var outdatedDependencies = {};
/******/ 	
/******/ 			var queue = outdatedModules.slice();
/******/ 			while(queue.length > 0) {
/******/ 				var moduleId = queue.pop();
/******/ 				var module = installedModules[moduleId];
/******/ 				if(!module || module.hot._selfAccepted)
/******/ 					continue;
/******/ 				if(module.hot._selfDeclined) {
/******/ 					return new Error("Aborted because of self decline: " + moduleId);
/******/ 				}
/******/ 				if(moduleId === 0) {
/******/ 					return;
/******/ 				}
/******/ 				for(var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if(parent.hot._declinedDependencies[moduleId]) {
/******/ 						return new Error("Aborted because of declined dependency: " + moduleId + " in " + parentId);
/******/ 					}
/******/ 					if(outdatedModules.indexOf(parentId) >= 0) continue;
/******/ 					if(parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if(!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push(parentId);
/******/ 				}
/******/ 			}
/******/ 	
/******/ 			return [outdatedModules, outdatedDependencies];
/******/ 		}
/******/ 	
/******/ 		function addAllToSet(a, b) {
/******/ 			for(var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if(a.indexOf(item) < 0)
/******/ 					a.push(item);
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/ 		for(var id in hotUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				var moduleId = toModuleId(id);
/******/ 				var result = getAffectedStuff(moduleId);
/******/ 				if(!result) {
/******/ 					if(options.ignoreUnaccepted)
/******/ 						continue;
/******/ 					hotSetStatus("abort");
/******/ 					return callback(new Error("Aborted because " + moduleId + " is not accepted"));
/******/ 				}
/******/ 				if(result instanceof Error) {
/******/ 					hotSetStatus("abort");
/******/ 					return callback(result);
/******/ 				}
/******/ 				appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 				addAllToSet(outdatedModules, result[0]);
/******/ 				for(var moduleId in result[1]) {
/******/ 					if(Object.prototype.hasOwnProperty.call(result[1], moduleId)) {
/******/ 						if(!outdatedDependencies[moduleId])
/******/ 							outdatedDependencies[moduleId] = [];
/******/ 						addAllToSet(outdatedDependencies[moduleId], result[1][moduleId]);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for(var i = 0; i < outdatedModules.length; i++) {
/******/ 			var moduleId = outdatedModules[i];
/******/ 			if(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/ 	
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		var queue = outdatedModules.slice();
/******/ 		while(queue.length > 0) {
/******/ 			var moduleId = queue.pop();
/******/ 			var module = installedModules[moduleId];
/******/ 			if(!module) continue;
/******/ 	
/******/ 			var data = {};
/******/ 	
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for(var j = 0; j < disposeHandlers.length; j++) {
/******/ 				var cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/ 	
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/ 	
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/ 	
/******/ 			// remove "parents" references from all children
/******/ 			for(var j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if(!child) continue;
/******/ 				var idx = child.parents.indexOf(moduleId);
/******/ 				if(idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// remove outdated dependency from module children
/******/ 		for(var moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				var module = installedModules[moduleId];
/******/ 				var moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				for(var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 					var dependency = moduleOutdatedDependencies[j];
/******/ 					var idx = module.children.indexOf(dependency);
/******/ 					if(idx >= 0) module.children.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/ 	
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/ 	
/******/ 		// insert new code
/******/ 		for(var moduleId in appliedUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for(var moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				var module = installedModules[moduleId];
/******/ 				var moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				var callbacks = [];
/******/ 				for(var i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 					var dependency = moduleOutdatedDependencies[i];
/******/ 					var cb = module.hot._acceptedDependencies[dependency];
/******/ 					if(callbacks.indexOf(cb) >= 0) continue;
/******/ 					callbacks.push(cb);
/******/ 				}
/******/ 				for(var i = 0; i < callbacks.length; i++) {
/******/ 					var cb = callbacks[i];
/******/ 					try {
/******/ 						cb(outdatedDependencies);
/******/ 					} catch(err) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Load self accepted modules
/******/ 		for(var i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			var moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch(err) {
/******/ 				if(typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch(err) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				} else if(!error)
/******/ 					error = err;
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if(error) {
/******/ 			hotSetStatus("fail");
/******/ 			return callback(error);
/******/ 		}
/******/ 	
/******/ 		hotSetStatus("idle");
/******/ 		callback(null, outdatedModules);
/******/ 	}

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: hotCurrentParents,
/******/ 			children: []
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };

/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire(0)(0);
/******/ })
/************************************************************************/
/******/ ((function(modules) {
	// Check all modules for deduplicated modules
	for(var i in modules) {
		if(Object.prototype.hasOwnProperty.call(modules, i)) {
			switch(typeof modules[i]) {
			case "function": break;
			case "object":
				// Module can be created from a template
				modules[i] = (function(_m) {
					var args = _m.slice(1), fn = modules[_m[0]];
					return function (a,b,c) {
						fn.apply(this, [a,b,c].concat(args));
					};
				}(modules[i]));
				break;
			default:
				// Module is a copy of another module
				modules[i] = modules[modules[i]];
				break;
			}
		}
	}
	return modules;
}([
/* 0 */
/*!****************************************************************************************************!*\
  !*** ./~/babel-loader?{"compact":false,"cacheDirectory":true}!./app/workers/AddressIndexWorker.js ***!
  \****************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var key = __webpack_require__(/*! common/key_utils */ 1);
	var chain_config = __webpack_require__(/*! chain/config */ 38);

	onmessage = function (event) {
	    try {
	        console.log("AddressIndexWorker start");
	        var _event$data = event.data;
	        var pubkeys = _event$data.pubkeys;
	        var address_prefix = _event$data.address_prefix;

	        var results = [];
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	            for (var _iterator = pubkeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var pubkey = _step.value;
	                results.push(key.addresses(pubkey, address_prefix));
	            }
	        } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion && _iterator['return']) {
	                    _iterator['return']();
	                }
	            } finally {
	                if (_didIteratorError) {
	                    throw _iteratorError;
	                }
	            }
	        }

	        postMessage(results);
	        console.log("AddressIndexWorker done");
	    } catch (e) {
	        console.error("AddressIndexWorker", e);
	    }
		};

/***/ },
/* 1 */
/*!********************************************!*\
  !*** ./app/dl/src/common/key_utils.coffee ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Address, Aes, HASH_POWER_MILLS, PrivateKey, PublicKey, config, dictionary, hash, key, secureRandom;

	PrivateKey = __webpack_require__(/*! ../ecc/key_private */ 6);

	PublicKey = __webpack_require__(/*! ../ecc/key_public */ 37);

	Address = __webpack_require__(/*! ../ecc/address */ 76);

	Aes = __webpack_require__(/*! ../ecc/aes */ 39);

	hash = __webpack_require__(/*! ./hash */ 21);

	dictionary = __webpack_require__(/*! ./dictionary_en */ 77);

	secureRandom = __webpack_require__(/*! ./secureRandom */ 78);

	config = __webpack_require__(/*! chain/config */ 38);

	HASH_POWER_MILLS = 250;

	module.exports = key = {

	  /** Uses 1 second of hashing power to create a key/password checksum.  An
	  implementation can re-call this method with the same password to re-match
	  the strength of the CPU (either after moving from a desktop to a mobile,
	  mobile to desktop, or N years from now when CPUs are presumably stronger).
	  
	  A salt is used for all the normal reasons...
	  
	  @return object {
	      aes_private: Aes, 
	      checksum: "{hash_iteration_count},{salt},{checksum}"
	  }
	   */
	  aes_checksum: function(password) {
	    var checksum, checksum_string, iterations, salt, secret, start_t;
	    if (typeof password !== "string") {
	      throw new "password string required";
	    }
	    salt = secureRandom.randomBuffer(4).toString('hex');
	    iterations = 0;
	    secret = salt + password;
	    start_t = Date.now();
	    while (Date.now() - start_t < HASH_POWER_MILLS) {
	      secret = hash.sha256(secret);
	      iterations += 1;
	    }
	    checksum = hash.sha256(secret);
	    checksum_string = [iterations, salt.toString('hex'), checksum.slice(0, 4).toString('hex')].join(',');
	    return {
	      aes_private: Aes.fromSeed(secret),
	      checksum: checksum_string
	    };
	  },

	  /** Provide a matching password and key_checksum.  A "wrong password"
	  error is thrown if the password does not match.  If this method takes
	  much more or less than 1 second to return, one should consider updating
	  all encyrpted fields using a new key.key_checksum.
	   */
	  aes_private: function(password, key_checksum) {
	    var checksum, i, iterations, j, new_checksum, ref, ref1, salt, secret;
	    ref = key_checksum.split(','), iterations = ref[0], salt = ref[1], checksum = ref[2];
	    secret = salt + password;
	    for (i = j = 0, ref1 = iterations; j < ref1; i = j += 1) {
	      secret = hash.sha256(secret);
	    }
	    new_checksum = hash.sha256(secret);
	    if (new_checksum.slice(0, 4).toString('hex') !== checksum) {
	      throw new Error("wrong password");
	    }
	    return Aes.fromSeed(secret);
	  },

	  /** @param1 string entropy of at least 32 bytes */
	  random32ByteBuffer: function(entropy) {
	    var hash_array, iterations, start_t;
	    if (entropy == null) {
	      entropy = this.browserEntropy();
	    }
	    if (typeof entropy !== 'string') {
	      throw new Error("string required for entropy");
	    }
	    if (entropy.length < 32) {
	      throw new Error("expecting at least 32 bytes of entropy");
	    }
	    iterations = 0;
	    start_t = Date.now();
	    while (Date.now() - start_t < HASH_POWER_MILLS) {
	      entropy = hash.sha256(entropy);
	      iterations += 1;
	    }
	    hash_array = [];
	    hash_array.push(new Buffer("" + iterations));
	    hash_array.push(hash.sha256(entropy));

	    /* Secure Random */
	    hash_array.push(secureRandom.randomBuffer(32));
	    return hash.sha256(Buffer.concat(hash_array));
	  },

	  /** @param1 string entropy of at least 32 bytes */
	  suggest_brain_key: function(entropy) {
	    var brainkey, dictionary_lines, i, num, randomBuffer, rndMultiplier, wordIndex, word_count;
	    if (entropy == null) {
	      entropy = this.browserEntropy();
	    }
	    randomBuffer = this.random32ByteBuffer(entropy);
	    word_count = 16;
	    dictionary_lines = dictionary.split(',');
	    if (dictionary_lines.length !== 49744) {
	      throw new Error("expecting " + 49744. + " but got " + dictionary_lines.length + " dictionary words");
	    }
	    brainkey = (function() {
	      var j, ref, results;
	      results = [];
	      for (i = j = 0, ref = word_count * 2; j < ref; i = j += 2) {
	        num = (randomBuffer[i] << 8) + randomBuffer[i + 1];
	        rndMultiplier = num / Math.pow(2, 16);
	        wordIndex = Math.round(dictionary_lines.length * rndMultiplier);
	        results.push(dictionary_lines[wordIndex]);
	      }
	      return results;
	    })();
	    return key.normalize_brain_key(brainkey.join(' '));
	  },
	  get_random_key: function(entropy) {
	    return PrivateKey.fromBuffer(this.random32ByteBuffer(entropy));
	  },
	  get_brainkey_private: function(brain_key, sequence) {
	    if (sequence == null) {
	      sequence = 0;
	    }
	    if (sequence < 0) {
	      throw new Error("invalid sequence");
	    }
	    brain_key = key.normalize_brain_key(brain_key);
	    return PrivateKey.fromBuffer(hash.sha256(hash.sha512(brain_key + " " + sequence)));
	  },
	  normalize_brain_key: function(brain_key) {
	    if (typeof brain_key !== 'string') {
	      throw new Error("string required for brain_key");
	    }
	    brain_key = brain_key.trim();
	    return brain_key.split(/[\t\n\v\f\r ]+/).join(' ');
	  },
	  browserEntropy: function() {
	    var b, entropyStr, j, len, mimeType, ref, req;
	    req = function(variable, name) {
	      if (!variable) {
	        throw new Error("missing " + name);
	      }
	    };
	    req(window, "window");
	    req(navigator, "navigator");
	    req(window.screen, "window.screen");
	    req(window.location, "window.location");
	    req(window.history, "window.history");
	    req(navigator.language, "navigator.language");
	    req(navigator.mimeTypes, "navigator.mimeTypes");
	    entropyStr = (new Date()).toString() + " " + +window.screen.height + " " + window.screen.width + " ";
	    +window.screen.colorDepth + " " + " " + window.screen.availHeight;
	    +" " + window.screen.availWidth + " " + window.screen.pixelDepth;
	    +navigator.language + " " + +window.location + " " + +window.history.length;
	    ref = navigator.mimeTypes;
	    for (j = 0, len = ref.length; j < len; j++) {
	      mimeType = ref[j];
	      entropyStr += mimeType.description + " " + mimeType.type + " " + mimeType.suffixes + " ";
	    }
	    b = new Buffer(entropyStr);
	    entropyStr += b.toString('binary') + " " + (new Date()).toString();
	    return entropyStr;
	  },
	  addresses: function(pubkey, address_prefix) {
	    var address_string, public_key;
	    if (address_prefix == null) {
	      address_prefix = config.address_prefix;
	    }
	    public_key = PublicKey.fromPublicKeyString(pubkey, address_prefix);
	    address_string = [Address.fromPublic(public_key, false, 0).toString(address_prefix), Address.fromPublic(public_key, true, 0).toString(address_prefix), Address.fromPublic(public_key, false, 56).toString(address_prefix), Address.fromPublic(public_key, true, 56).toString(address_prefix), public_key.toAddressString(address_prefix)];
	    return address_string;
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/buffer/index.js */ 2).Buffer))

/***/ },
/* 2 */
/*!*******************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/buffer/index.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	var base64 = __webpack_require__(/*! base64-js */ 3)
	var ieee754 = __webpack_require__(/*! ieee754 */ 4)
	var isArray = __webpack_require__(/*! is-array */ 5)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
	 *     on objects.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	function typedArraySupport () {
	  function Bar () {}
	  try {
	    var arr = new Uint8Array(1)
	    arr.foo = function () { return 42 }
	    arr.constructor = Bar
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Bar && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  this.length = 0
	  this.parent = undefined

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined') {
	    if (object.buffer instanceof ArrayBuffer) {
	      return fromTypedArray(that, object)
	    }
	    if (object instanceof ArrayBuffer) {
	      return fromArrayBuffer(that, object)
	    }
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    array.byteLength
	    that = Buffer._augment(new Uint8Array(array))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromTypedArray(that, new Uint8Array(array))
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	// pre-set for values that may exist in the future
	Buffer.prototype.length = undefined
	Buffer.prototype.parent = undefined

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` is deprecated
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` is deprecated
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; i--) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/buffer/index.js */ 2).Buffer, (function() { return this; }())))

/***/ },
/* 3 */
/*!*********************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/buffer/~/base64-js/lib/b64.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ },
/* 4 */
/*!*****************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/buffer/~/ieee754/index.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 5 */
/*!******************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/buffer/~/is-array/index.js ***!
  \******************************************************************/
/***/ function(module, exports) {

	
	/**
	 * isArray
	 */

	var isArray = Array.isArray;

	/**
	 * toString
	 */

	var str = Object.prototype.toString;

	/**
	 * Whether or not the given `val`
	 * is an array.
	 *
	 * example:
	 *
	 *        isArray([]);
	 *        // > true
	 *        isArray(arguments);
	 *        // > false
	 *        isArray('');
	 *        // > false
	 *
	 * @param {mixed} val
	 * @return {bool}
	 */

	module.exports = isArray || function (val) {
	  return !! val && '[object Array]' == str.call(val);
	};


/***/ },
/* 6 */
/*!*******************************************!*\
  !*** ./app/dl/src/ecc/key_private.coffee ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Aes, BigInteger, Point, PrivateKey, PublicKey, assert, base58, ecurve, hash, secp256k1;

	ecurve = __webpack_require__(/*! ecurve */ 7);

	Point = ecurve.Point;

	secp256k1 = ecurve.getCurveByName('secp256k1');

	BigInteger = __webpack_require__(/*! bigi */ 14);

	base58 = __webpack_require__(/*! bs58 */ 20);

	assert = __webpack_require__(/*! assert */ 9);

	hash = __webpack_require__(/*! ../common/hash */ 21);

	PublicKey = __webpack_require__(/*! ./key_public */ 37);

	Aes = __webpack_require__(/*! ./aes */ 39);

	PrivateKey = (function() {

	  /**
	  @param {BigInteger}
	   */
	  function PrivateKey(d) {
	    this.d = d;
	  }

	  PrivateKey.fromBuffer = function(buf) {
	    if (!Buffer.isBuffer(buf)) {
	      throw new Error("Expecting paramter to be a Buffer type");
	    }
	    if (32 !== buf.length) {
	      console.log("WARN: Expecting 32 bytes, instead got " + buf.length + ", stack trace:", new Error().stack);
	    }
	    if (buf.length === 0) {
	      throw new Error("Empty buffer");
	    }
	    return new PrivateKey(BigInteger.fromBuffer(buf));
	  };

	  PrivateKey.fromSeed = function(seed) {
	    if (typeof seed !== 'string') {
	      throw new Error('seed must be of type string');
	    }
	    return PrivateKey.fromBuffer(hash.sha256(seed));
	  };

	  PrivateKey.fromWif = function(_private_wif) {
	    var checksum, new_checksum, private_key, private_wif, version;
	    private_wif = new Buffer(base58.decode(_private_wif));
	    version = private_wif.readUInt8(0);
	    assert.equal(0x80, version, "Expected version " + 0x80 + ", instead got " + version);
	    private_key = private_wif.slice(0, -4);
	    checksum = private_wif.slice(-4);
	    new_checksum = hash.sha256(private_key);
	    new_checksum = hash.sha256(new_checksum);
	    new_checksum = new_checksum.slice(0, 4);
	    assert.deepEqual(checksum, new_checksum);
	    private_key = private_key.slice(1);
	    return PrivateKey.fromBuffer(private_key);
	  };

	  PrivateKey.prototype.toWif = function() {
	    var checksum, private_key, private_wif;
	    private_key = this.toBuffer();
	    private_key = Buffer.concat([new Buffer([0x80]), private_key]);
	    checksum = hash.sha256(private_key);
	    checksum = hash.sha256(checksum);
	    checksum = checksum.slice(0, 4);
	    private_wif = Buffer.concat([private_key, checksum]);
	    return base58.encode(private_wif);
	  };


	  /**
	  @return {Point}
	   */

	  PrivateKey.prototype.toPublicKeyPoint = function() {
	    var Q;
	    return Q = secp256k1.G.multiply(this.d);
	  };

	  PrivateKey.prototype.toPublicKey = function() {
	    if (this.public_key) {
	      return this.public_key;
	    }
	    return this.public_key = PublicKey.fromPoint(this.toPublicKeyPoint());
	  };

	  PrivateKey.prototype.toBuffer = function() {
	    return this.d.toBuffer(32);
	  };


	  /** ECIES */

	  PrivateKey.prototype.get_shared_secret = function(public_key) {
	    var KB, KBP, P, S, r, x, y;
	    KB = public_key.toUncompressed().toBuffer();
	    KBP = Point.fromAffine(secp256k1, x = BigInteger.fromBuffer(KB.slice(1, 33)), y = BigInteger.fromBuffer(KB.slice(33, 65)));
	    r = this.toBuffer();
	    P = KBP.multiply(BigInteger.fromBuffer(r));
	    S = P.affineX.toBuffer({
	      size: 32
	    });
	    return hash.sha512(S);
	  };


	  /* <helper_functions> */

	  PrivateKey.prototype.toByteBuffer = function() {
	    var b;
	    b = new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY, ByteBuffer.LITTLE_ENDIAN);
	    this.appendByteBuffer(b);
	    return b.copy(0, b.offset);
	  };

	  PrivateKey.fromHex = function(hex) {
	    return PrivateKey.fromBuffer(new Buffer(hex, 'hex'));
	  };

	  PrivateKey.prototype.toHex = function() {
	    return this.toBuffer().toString('hex');
	  };


	  /* </helper_functions> */

	  return PrivateKey;

	})();

	module.exports = PrivateKey;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/buffer/index.js */ 2).Buffer))

/***/ },
/* 7 */
/*!**************************************!*\
  !*** ./app/dl/~/ecurve/lib/index.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	var Point = __webpack_require__(/*! ./point */ 8)
	var Curve = __webpack_require__(/*! ./curve */ 17)

	var getCurveByName = __webpack_require__(/*! ./names */ 18)

	module.exports = {
	  Curve: Curve,
	  Point: Point,
	  getCurveByName: getCurveByName
	}


/***/ },
/* 8 */
/*!**************************************!*\
  !*** ./app/dl/~/ecurve/lib/point.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var assert = __webpack_require__(/*! assert */ 9)
	var BigInteger = __webpack_require__(/*! bigi */ 14)

	var THREE = BigInteger.valueOf(3)

	function Point(curve, x, y, z) {
	  assert.notStrictEqual(z, undefined, 'Missing Z coordinate')

	  this.curve = curve
	  this.x = x
	  this.y = y
	  this.z = z
	  this._zInv = null

	  this.compressed = true
	}

	Object.defineProperty(Point.prototype, 'zInv', {
	  get: function() {
	    if (this._zInv === null) {
	      this._zInv = this.z.modInverse(this.curve.p)
	    }

	    return this._zInv
	  }
	})

	Object.defineProperty(Point.prototype, 'affineX', {
	  get: function() {
	    return this.x.multiply(this.zInv).mod(this.curve.p)
	  }
	})

	Object.defineProperty(Point.prototype, 'affineY', {
	  get: function() {
	    return this.y.multiply(this.zInv).mod(this.curve.p)
	  }
	})

	Point.fromAffine = function(curve, x, y) {
	  return new Point(curve, x, y, BigInteger.ONE)
	}

	Point.prototype.equals = function(other) {
	  if (other === this) return true
	  if (this.curve.isInfinity(this)) return this.curve.isInfinity(other)
	  if (this.curve.isInfinity(other)) return this.curve.isInfinity(this)

	  // u = Y2 * Z1 - Y1 * Z2
	  var u = other.y.multiply(this.z).subtract(this.y.multiply(other.z)).mod(this.curve.p)

	  if (u.signum() !== 0) return false

	  // v = X2 * Z1 - X1 * Z2
	  var v = other.x.multiply(this.z).subtract(this.x.multiply(other.z)).mod(this.curve.p)

	  return v.signum() === 0
	}

	Point.prototype.negate = function() {
	  var y = this.curve.p.subtract(this.y)

	  return new Point(this.curve, this.x, y, this.z)
	}

	Point.prototype.add = function(b) {
	  if (this.curve.isInfinity(this)) return b
	  if (this.curve.isInfinity(b)) return this

	  var x1 = this.x
	  var y1 = this.y
	  var x2 = b.x
	  var y2 = b.y

	  // u = Y2 * Z1 - Y1 * Z2
	  var u = y2.multiply(this.z).subtract(y1.multiply(b.z)).mod(this.curve.p)
	  // v = X2 * Z1 - X1 * Z2
	  var v = x2.multiply(this.z).subtract(x1.multiply(b.z)).mod(this.curve.p)

	  if (v.signum() === 0) {
	    if (u.signum() === 0) {
	      return this.twice() // this == b, so double
	    }

	    return this.curve.infinity // this = -b, so infinity
	  }

	  var v2 = v.square()
	  var v3 = v2.multiply(v)
	  var x1v2 = x1.multiply(v2)
	  var zu2 = u.square().multiply(this.z)

	  // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)
	  var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.p)
	  // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3
	  var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.p)
	  // z3 = v^3 * z1 * z2
	  var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.p)

	  return new Point(this.curve, x3, y3, z3)
	}

	Point.prototype.twice = function() {
	  if (this.curve.isInfinity(this)) return this
	  if (this.y.signum() === 0) return this.curve.infinity

	  var x1 = this.x
	  var y1 = this.y

	  var y1z1 = y1.multiply(this.z)
	  var y1sqz1 = y1z1.multiply(y1).mod(this.curve.p)
	  var a = this.curve.a

	  // w = 3 * x1^2 + a * z1^2
	  var w = x1.square().multiply(THREE)

	  if (a.signum() !== 0) {
	    w = w.add(this.z.square().multiply(a))
	  }

	  w = w.mod(this.curve.p)
	  // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)
	  var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.p)
	  // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3
	  var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.pow(3)).mod(this.curve.p)
	  // z3 = 8 * (y1 * z1)^3
	  var z3 = y1z1.pow(3).shiftLeft(3).mod(this.curve.p)

	  return new Point(this.curve, x3, y3, z3)
	}

	// Simple NAF (Non-Adjacent Form) multiplication algorithm
	// TODO: modularize the multiplication algorithm
	Point.prototype.multiply = function(k) {
	  if (this.curve.isInfinity(this)) return this
	  if (k.signum() === 0) return this.curve.infinity

	  var e = k
	  var h = e.multiply(THREE)

	  var neg = this.negate()
	  var R = this

	  for (var i = h.bitLength() - 2; i > 0; --i) {
	    R = R.twice()

	    var hBit = h.testBit(i)
	    var eBit = e.testBit(i)

	    if (hBit != eBit) {
	      R = R.add(hBit ? this : neg)
	    }
	  }

	  return R
	}

	// Compute this*j + x*k (simultaneous multiplication)
	Point.prototype.multiplyTwo = function(j, x, k) {
	  var i

	  if (j.bitLength() > k.bitLength())
	    i = j.bitLength() - 1
	  else
	    i = k.bitLength() - 1

	  var R = this.curve.infinity
	  var both = this.add(x)

	  while (i >= 0) {
	    R = R.twice()

	    var jBit = j.testBit(i)
	    var kBit = k.testBit(i)

	    if (jBit) {
	      if (kBit) {
	        R = R.add(both)

	      } else {
	        R = R.add(this)
	      }

	    } else {
	      if (kBit) {
	        R = R.add(x)
	      }
	    }
	    --i
	  }

	  return R
	}

	Point.prototype.getEncoded = function(compressed) {
	  if (compressed == undefined) compressed = this.compressed
	  if (this.curve.isInfinity(this)) return new Buffer('00', 'hex') // Infinity point encoded is simply '00'

	  var x = this.affineX
	  var y = this.affineY

	  var buffer

	  // Determine size of q in bytes
	  var byteLength = Math.floor((this.curve.p.bitLength() + 7) / 8)

	  // 0x02/0x03 | X
	  if (compressed) {
	    buffer = new Buffer(1 + byteLength)
	    buffer.writeUInt8(y.isEven() ? 0x02 : 0x03, 0)

	  // 0x04 | X | Y
	  } else {
	    buffer = new Buffer(1 + byteLength + byteLength)
	    buffer.writeUInt8(0x04, 0)

	    y.toBuffer(byteLength).copy(buffer, 1 + byteLength)
	  }

	  x.toBuffer(byteLength).copy(buffer, 1)

	  return buffer
	}

	Point.decodeFrom = function(curve, buffer) {
	  var type = buffer.readUInt8(0)
	  var compressed = (type !== 4)

	  var x = BigInteger.fromBuffer(buffer.slice(1, 33))
	  var byteLength = Math.floor((curve.p.bitLength() + 7) / 8)

	  var Q
	  if (compressed) {
	    assert.equal(buffer.length, byteLength + 1, 'Invalid sequence length')
	    assert(type === 0x02 || type === 0x03, 'Invalid sequence tag')

	    var isOdd = (type === 0x03)
	    Q = curve.pointFromX(isOdd, x)

	  } else {
	    assert.equal(buffer.length, 1 + byteLength + byteLength, 'Invalid sequence length')

	    var y = BigInteger.fromBuffer(buffer.slice(1 + byteLength))
	    Q = Point.fromAffine(curve, x, y)
	  }

	  Q.compressed = compressed
	  return Q
	}

	Point.prototype.toString = function () {
	  if (this.curve.isInfinity(this)) return '(INFINITY)'

	  return '(' + this.affineX.toString() + ',' + this.affineY.toString() + ')'
	}

	module.exports = Point

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/buffer/index.js */ 2).Buffer))

/***/ },
/* 9 */
/*!********************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/assert/assert.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	// when used in node, this will actually load the util module we depend on
	// versus loading the builtin util module as happens otherwise
	// this is a bug in node module loading as far as I am concerned
	var util = __webpack_require__(/*! util/ */ 10);

	var pSlice = Array.prototype.slice;
	var hasOwn = Object.prototype.hasOwnProperty;

	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = module.exports = ok;

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;

	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  }
	  else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = stackStartFunction.name;
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	};

	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);

	function replacer(key, value) {
	  if (util.isUndefined(value)) {
	    return '' + value;
	  }
	  if (util.isNumber(value) && !isFinite(value)) {
	    return value.toString();
	  }
	  if (util.isFunction(value) || util.isRegExp(value)) {
	    return value.toString();
	  }
	  return value;
	}

	function truncate(s, n) {
	  if (util.isString(s)) {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}

	function getMessage(self) {
	  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(JSON.stringify(self.expected, replacer), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);

	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);

	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);

	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};

	function _deepEqual(actual, expected) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;

	  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
	    if (actual.length != expected.length) return false;

	    for (var i = 0; i < actual.length; i++) {
	      if (actual[i] !== expected[i]) return false;
	    }

	    return true;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!util.isObject(actual) && !util.isObject(expected)) {
	    return actual == expected;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b) {
	  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b)) {
	    return a === b;
	  }
	  var aIsArgs = isArguments(a),
	      bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b);
	  }
	  var ka = objectKeys(a),
	      kb = objectKeys(b),
	      key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key])) return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);

	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};

	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  } else if (actual instanceof expected) {
	    return true;
	  } else if (expected.call({}, actual) === true) {
	    return true;
	  }

	  return false;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (util.isString(expected)) {
	    message = expected;
	    expected = null;
	  }

	  try {
	    block();
	  } catch (e) {
	    actual = e;
	  }

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  if (!shouldThrow && expectedException(actual, expected)) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);

	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws.apply(this, [true].concat(pSlice.call(arguments)));
	};

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/message) {
	  _throws.apply(this, [false].concat(pSlice.call(arguments)));
	};

	assert.ifError = function(err) { if (err) {throw err;}};

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};


/***/ },
/* 10 */
/*!****************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/util/util.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = ({"NODE_ENV":"development"}).NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ 12);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(/*! inherits */ 13);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 11)))

/***/ },
/* 11 */
/*!**********************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/process/browser.js ***!
  \**********************************************************/
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 12 */
/*!***********************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/util/support/isBufferBrowser.js ***!
  \***********************************************************************/
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 13 */
/*!***************************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/util/~/inherits/inherits_browser.js ***!
  \***************************************************************************/
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 14 */
/*!************************************!*\
  !*** ./app/dl/~/bigi/lib/index.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var BigInteger = __webpack_require__(/*! ./bigi */ 15)

	//addons
	__webpack_require__(/*! ./convert */ 16)

	module.exports = BigInteger

/***/ },
/* 15 */
/*!***********************************!*\
  !*** ./app/dl/~/bigi/lib/bigi.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(/*! assert */ 9)

	module.exports = BigInteger

	// JavaScript engine analysis
	var canary = 0xdeadbeefcafe;
	var j_lm = ((canary&0xffffff)==0xefcafe);

	// (public) Constructor
	function BigInteger(a,b,c) {
	  if (!(this instanceof BigInteger)) {
	    return new BigInteger(a, b, c);
	  }

	  if(a != null) {
	    if("number" == typeof a) this.fromNumber(a,b,c);
	    else if(b == null && "string" != typeof a) this.fromString(a,256);
	    else this.fromString(a,b);
	  }
	}

	var proto = BigInteger.prototype;

	// return new, unset BigInteger
	function nbi() { return new BigInteger(null); }

	// Bits per digit
	var dbits;

	// am: Compute w_j += (x*this_i), propagate carries,
	// c is initial carry, returns final carry.
	// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
	// We need to select the fastest one that works in this environment.

	// am1: use a single mult and divide to get the high bits,
	// max digit bits should be 26 because
	// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
	function am1(i,x,w,j,c,n) {
	  while(--n >= 0) {
	    var v = x*this[i++]+w[j]+c;
	    c = Math.floor(v/0x4000000);
	    w[j++] = v&0x3ffffff;
	  }
	  return c;
	}
	// am2 avoids a big mult-and-extract completely.
	// Max digit bits should be <= 30 because we do bitwise ops
	// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
	function am2(i,x,w,j,c,n) {
	  var xl = x&0x7fff, xh = x>>15;
	  while(--n >= 0) {
	    var l = this[i]&0x7fff;
	    var h = this[i++]>>15;
	    var m = xh*l+h*xl;
	    l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
	    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
	    w[j++] = l&0x3fffffff;
	  }
	  return c;
	}
	// Alternately, set max digit bits to 28 since some
	// browsers slow down when dealing with 32-bit numbers.
	function am3(i,x,w,j,c,n) {
	  var xl = x&0x3fff, xh = x>>14;
	  while(--n >= 0) {
	    var l = this[i]&0x3fff;
	    var h = this[i++]>>14;
	    var m = xh*l+h*xl;
	    l = xl*l+((m&0x3fff)<<14)+w[j]+c;
	    c = (l>>28)+(m>>14)+xh*h;
	    w[j++] = l&0xfffffff;
	  }
	  return c;
	}

	// wtf?
	BigInteger.prototype.am = am1;
	dbits = 26;

	/*
	if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
	  BigInteger.prototype.am = am2;
	  dbits = 30;
	}
	else if(j_lm && (navigator.appName != "Netscape")) {
	  BigInteger.prototype.am = am1;
	  dbits = 26;
	}
	else { // Mozilla/Netscape seems to prefer am3
	  BigInteger.prototype.am = am3;
	  dbits = 28;
	}
	*/

	BigInteger.prototype.DB = dbits;
	BigInteger.prototype.DM = ((1<<dbits)-1);
	var DV = BigInteger.prototype.DV = (1<<dbits);

	var BI_FP = 52;
	BigInteger.prototype.FV = Math.pow(2,BI_FP);
	BigInteger.prototype.F1 = BI_FP-dbits;
	BigInteger.prototype.F2 = 2*dbits-BI_FP;

	// Digit conversions
	var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
	var BI_RC = new Array();
	var rr,vv;
	rr = "0".charCodeAt(0);
	for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
	rr = "a".charCodeAt(0);
	for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
	rr = "A".charCodeAt(0);
	for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

	function int2char(n) { return BI_RM.charAt(n); }
	function intAt(s,i) {
	  var c = BI_RC[s.charCodeAt(i)];
	  return (c==null)?-1:c;
	}

	// (protected) copy this to r
	function bnpCopyTo(r) {
	  for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
	  r.t = this.t;
	  r.s = this.s;
	}

	// (protected) set from integer value x, -DV <= x < DV
	function bnpFromInt(x) {
	  this.t = 1;
	  this.s = (x<0)?-1:0;
	  if(x > 0) this[0] = x;
	  else if(x < -1) this[0] = x+DV;
	  else this.t = 0;
	}

	// return bigint initialized to value
	function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

	// (protected) set from string and radix
	function bnpFromString(s,b) {
	  var self = this;

	  var k;
	  if(b == 16) k = 4;
	  else if(b == 8) k = 3;
	  else if(b == 256) k = 8; // byte array
	  else if(b == 2) k = 1;
	  else if(b == 32) k = 5;
	  else if(b == 4) k = 2;
	  else { self.fromRadix(s,b); return; }
	  self.t = 0;
	  self.s = 0;
	  var i = s.length, mi = false, sh = 0;
	  while(--i >= 0) {
	    var x = (k==8)?s[i]&0xff:intAt(s,i);
	    if(x < 0) {
	      if(s.charAt(i) == "-") mi = true;
	      continue;
	    }
	    mi = false;
	    if(sh == 0)
	      self[self.t++] = x;
	    else if(sh+k > self.DB) {
	      self[self.t-1] |= (x&((1<<(self.DB-sh))-1))<<sh;
	      self[self.t++] = (x>>(self.DB-sh));
	    }
	    else
	      self[self.t-1] |= x<<sh;
	    sh += k;
	    if(sh >= self.DB) sh -= self.DB;
	  }
	  if(k == 8 && (s[0]&0x80) != 0) {
	    self.s = -1;
	    if(sh > 0) self[self.t-1] |= ((1<<(self.DB-sh))-1)<<sh;
	  }
	  self.clamp();
	  if(mi) BigInteger.ZERO.subTo(self,self);
	}

	// (protected) clamp off excess high words
	function bnpClamp() {
	  var c = this.s&this.DM;
	  while(this.t > 0 && this[this.t-1] == c) --this.t;
	}

	// (public) return string representation in given radix
	function bnToString(b) {
	  var self = this;
	  if(self.s < 0) return "-"+self.negate().toString(b);
	  var k;
	  if(b == 16) k = 4;
	  else if(b == 8) k = 3;
	  else if(b == 2) k = 1;
	  else if(b == 32) k = 5;
	  else if(b == 4) k = 2;
	  else return self.toRadix(b);
	  var km = (1<<k)-1, d, m = false, r = "", i = self.t;
	  var p = self.DB-(i*self.DB)%k;
	  if(i-- > 0) {
	    if(p < self.DB && (d = self[i]>>p) > 0) { m = true; r = int2char(d); }
	    while(i >= 0) {
	      if(p < k) {
	        d = (self[i]&((1<<p)-1))<<(k-p);
	        d |= self[--i]>>(p+=self.DB-k);
	      }
	      else {
	        d = (self[i]>>(p-=k))&km;
	        if(p <= 0) { p += self.DB; --i; }
	      }
	      if(d > 0) m = true;
	      if(m) r += int2char(d);
	    }
	  }
	  return m?r:"0";
	}

	// (public) -this
	function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

	// (public) |this|
	function bnAbs() { return (this.s<0)?this.negate():this; }

	// (public) return + if this > a, - if this < a, 0 if equal
	function bnCompareTo(a) {
	  var r = this.s-a.s;
	  if(r != 0) return r;
	  var i = this.t;
	  r = i-a.t;
	  if(r != 0) return (this.s<0)?-r:r;
	  while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
	  return 0;
	}

	// returns bit length of the integer x
	function nbits(x) {
	  var r = 1, t;
	  if((t=x>>>16) != 0) { x = t; r += 16; }
	  if((t=x>>8) != 0) { x = t; r += 8; }
	  if((t=x>>4) != 0) { x = t; r += 4; }
	  if((t=x>>2) != 0) { x = t; r += 2; }
	  if((t=x>>1) != 0) { x = t; r += 1; }
	  return r;
	}

	// (public) return the number of bits in "this"
	function bnBitLength() {
	  if(this.t <= 0) return 0;
	  return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
	}

	// (protected) r = this << n*DB
	function bnpDLShiftTo(n,r) {
	  var i;
	  for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
	  for(i = n-1; i >= 0; --i) r[i] = 0;
	  r.t = this.t+n;
	  r.s = this.s;
	}

	// (protected) r = this >> n*DB
	function bnpDRShiftTo(n,r) {
	  for(var i = n; i < this.t; ++i) r[i-n] = this[i];
	  r.t = Math.max(this.t-n,0);
	  r.s = this.s;
	}

	// (protected) r = this << n
	function bnpLShiftTo(n,r) {
	  var self = this;
	  var bs = n%self.DB;
	  var cbs = self.DB-bs;
	  var bm = (1<<cbs)-1;
	  var ds = Math.floor(n/self.DB), c = (self.s<<bs)&self.DM, i;
	  for(i = self.t-1; i >= 0; --i) {
	    r[i+ds+1] = (self[i]>>cbs)|c;
	    c = (self[i]&bm)<<bs;
	  }
	  for(i = ds-1; i >= 0; --i) r[i] = 0;
	  r[ds] = c;
	  r.t = self.t+ds+1;
	  r.s = self.s;
	  r.clamp();
	}

	// (protected) r = this >> n
	function bnpRShiftTo(n,r) {
	  var self = this;
	  r.s = self.s;
	  var ds = Math.floor(n/self.DB);
	  if(ds >= self.t) { r.t = 0; return; }
	  var bs = n%self.DB;
	  var cbs = self.DB-bs;
	  var bm = (1<<bs)-1;
	  r[0] = self[ds]>>bs;
	  for(var i = ds+1; i < self.t; ++i) {
	    r[i-ds-1] |= (self[i]&bm)<<cbs;
	    r[i-ds] = self[i]>>bs;
	  }
	  if(bs > 0) r[self.t-ds-1] |= (self.s&bm)<<cbs;
	  r.t = self.t-ds;
	  r.clamp();
	}

	// (protected) r = this - a
	function bnpSubTo(a,r) {
	  var self = this;
	  var i = 0, c = 0, m = Math.min(a.t,self.t);
	  while(i < m) {
	    c += self[i]-a[i];
	    r[i++] = c&self.DM;
	    c >>= self.DB;
	  }
	  if(a.t < self.t) {
	    c -= a.s;
	    while(i < self.t) {
	      c += self[i];
	      r[i++] = c&self.DM;
	      c >>= self.DB;
	    }
	    c += self.s;
	  }
	  else {
	    c += self.s;
	    while(i < a.t) {
	      c -= a[i];
	      r[i++] = c&self.DM;
	      c >>= self.DB;
	    }
	    c -= a.s;
	  }
	  r.s = (c<0)?-1:0;
	  if(c < -1) r[i++] = self.DV+c;
	  else if(c > 0) r[i++] = c;
	  r.t = i;
	  r.clamp();
	}

	// (protected) r = this * a, r != this,a (HAC 14.12)
	// "this" should be the larger one if appropriate.
	function bnpMultiplyTo(a,r) {
	  var x = this.abs(), y = a.abs();
	  var i = x.t;
	  r.t = i+y.t;
	  while(--i >= 0) r[i] = 0;
	  for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
	  r.s = 0;
	  r.clamp();
	  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
	}

	// (protected) r = this^2, r != this (HAC 14.16)
	function bnpSquareTo(r) {
	  var x = this.abs();
	  var i = r.t = 2*x.t;
	  while(--i >= 0) r[i] = 0;
	  for(i = 0; i < x.t-1; ++i) {
	    var c = x.am(i,x[i],r,2*i,0,1);
	    if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
	      r[i+x.t] -= x.DV;
	      r[i+x.t+1] = 1;
	    }
	  }
	  if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
	  r.s = 0;
	  r.clamp();
	}

	// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
	// r != q, this != m.  q or r may be null.
	function bnpDivRemTo(m,q,r) {
	  var self = this;
	  var pm = m.abs();
	  if(pm.t <= 0) return;
	  var pt = self.abs();
	  if(pt.t < pm.t) {
	    if(q != null) q.fromInt(0);
	    if(r != null) self.copyTo(r);
	    return;
	  }
	  if(r == null) r = nbi();
	  var y = nbi(), ts = self.s, ms = m.s;
	  var nsh = self.DB-nbits(pm[pm.t-1]);  // normalize modulus
	  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
	  else { pm.copyTo(y); pt.copyTo(r); }
	  var ys = y.t;
	  var y0 = y[ys-1];
	  if(y0 == 0) return;
	  var yt = y0*(1<<self.F1)+((ys>1)?y[ys-2]>>self.F2:0);
	  var d1 = self.FV/yt, d2 = (1<<self.F1)/yt, e = 1<<self.F2;
	  var i = r.t, j = i-ys, t = (q==null)?nbi():q;
	  y.dlShiftTo(j,t);
	  if(r.compareTo(t) >= 0) {
	    r[r.t++] = 1;
	    r.subTo(t,r);
	  }
	  BigInteger.ONE.dlShiftTo(ys,t);
	  t.subTo(y,y); // "negative" y so we can replace sub with am later
	  while(y.t < ys) y[y.t++] = 0;
	  while(--j >= 0) {
	    // Estimate quotient digit
	    var qd = (r[--i]==y0)?self.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
	    if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {  // Try it out
	      y.dlShiftTo(j,t);
	      r.subTo(t,r);
	      while(r[i] < --qd) r.subTo(t,r);
	    }
	  }
	  if(q != null) {
	    r.drShiftTo(ys,q);
	    if(ts != ms) BigInteger.ZERO.subTo(q,q);
	  }
	  r.t = ys;
	  r.clamp();
	  if(nsh > 0) r.rShiftTo(nsh,r);    // Denormalize remainder
	  if(ts < 0) BigInteger.ZERO.subTo(r,r);
	}

	// (public) this mod a
	function bnMod(a) {
	  var r = nbi();
	  this.abs().divRemTo(a,null,r);
	  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
	  return r;
	}

	// Modular reduction using "classic" algorithm
	function Classic(m) { this.m = m; }
	function cConvert(x) {
	  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
	  else return x;
	}
	function cRevert(x) { return x; }
	function cReduce(x) { x.divRemTo(this.m,null,x); }
	function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
	function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	Classic.prototype.convert = cConvert;
	Classic.prototype.revert = cRevert;
	Classic.prototype.reduce = cReduce;
	Classic.prototype.mulTo = cMulTo;
	Classic.prototype.sqrTo = cSqrTo;

	// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
	// justification:
	//         xy == 1 (mod m)
	//         xy =  1+km
	//   xy(2-xy) = (1+km)(1-km)
	// x[y(2-xy)] = 1-k^2m^2
	// x[y(2-xy)] == 1 (mod m^2)
	// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
	// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
	// JS multiply "overflows" differently from C/C++, so care is needed here.
	function bnpInvDigit() {
	  if(this.t < 1) return 0;
	  var x = this[0];
	  if((x&1) == 0) return 0;
	  var y = x&3;      // y == 1/x mod 2^2
	  y = (y*(2-(x&0xf)*y))&0xf;    // y == 1/x mod 2^4
	  y = (y*(2-(x&0xff)*y))&0xff;  // y == 1/x mod 2^8
	  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;   // y == 1/x mod 2^16
	  // last step - calculate inverse mod DV directly;
	  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
	  y = (y*(2-x*y%this.DV))%this.DV;      // y == 1/x mod 2^dbits
	  // we really want the negative inverse, and -DV < y < DV
	  return (y>0)?this.DV-y:-y;
	}

	// Montgomery reduction
	function Montgomery(m) {
	  this.m = m;
	  this.mp = m.invDigit();
	  this.mpl = this.mp&0x7fff;
	  this.mph = this.mp>>15;
	  this.um = (1<<(m.DB-15))-1;
	  this.mt2 = 2*m.t;
	}

	// xR mod m
	function montConvert(x) {
	  var r = nbi();
	  x.abs().dlShiftTo(this.m.t,r);
	  r.divRemTo(this.m,null,r);
	  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
	  return r;
	}

	// x/R mod m
	function montRevert(x) {
	  var r = nbi();
	  x.copyTo(r);
	  this.reduce(r);
	  return r;
	}

	// x = x/R mod m (HAC 14.32)
	function montReduce(x) {
	  while(x.t <= this.mt2)    // pad x so am has enough room later
	    x[x.t++] = 0;
	  for(var i = 0; i < this.m.t; ++i) {
	    // faster way of calculating u0 = x[i]*mp mod DV
	    var j = x[i]&0x7fff;
	    var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
	    // use am to combine the multiply-shift-add into one call
	    j = i+this.m.t;
	    x[j] += this.m.am(0,u0,x,i,0,this.m.t);
	    // propagate carry
	    while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
	  }
	  x.clamp();
	  x.drShiftTo(this.m.t,x);
	  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
	}

	// r = "x^2/R mod m"; x != r
	function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	// r = "xy/R mod m"; x,y != r
	function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

	Montgomery.prototype.convert = montConvert;
	Montgomery.prototype.revert = montRevert;
	Montgomery.prototype.reduce = montReduce;
	Montgomery.prototype.mulTo = montMulTo;
	Montgomery.prototype.sqrTo = montSqrTo;

	// (protected) true iff this is even
	function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

	// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
	function bnpExp(e,z) {
	  if(e > 0xffffffff || e < 1) return BigInteger.ONE;
	  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
	  g.copyTo(r);
	  while(--i >= 0) {
	    z.sqrTo(r,r2);
	    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
	    else { var t = r; r = r2; r2 = t; }
	  }
	  return z.revert(r);
	}

	// (public) this^e % m, 0 <= e < 2^32
	function bnModPowInt(e,m) {
	  var z;
	  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
	  return this.exp(e,z);
	}

	// protected
	proto.copyTo = bnpCopyTo;
	proto.fromInt = bnpFromInt;
	proto.fromString = bnpFromString;
	proto.clamp = bnpClamp;
	proto.dlShiftTo = bnpDLShiftTo;
	proto.drShiftTo = bnpDRShiftTo;
	proto.lShiftTo = bnpLShiftTo;
	proto.rShiftTo = bnpRShiftTo;
	proto.subTo = bnpSubTo;
	proto.multiplyTo = bnpMultiplyTo;
	proto.squareTo = bnpSquareTo;
	proto.divRemTo = bnpDivRemTo;
	proto.invDigit = bnpInvDigit;
	proto.isEven = bnpIsEven;
	proto.exp = bnpExp;

	// public
	proto.toString = bnToString;
	proto.negate = bnNegate;
	proto.abs = bnAbs;
	proto.compareTo = bnCompareTo;
	proto.bitLength = bnBitLength;
	proto.mod = bnMod;
	proto.modPowInt = bnModPowInt;

	//// jsbn2

	function nbi() { return new BigInteger(null); }

	// (public)
	function bnClone() { var r = nbi(); this.copyTo(r); return r; }

	// (public) return value as integer
	function bnIntValue() {
	  if(this.s < 0) {
	    if(this.t == 1) return this[0]-this.DV;
	    else if(this.t == 0) return -1;
	  }
	  else if(this.t == 1) return this[0];
	  else if(this.t == 0) return 0;
	  // assumes 16 < DB < 32
	  return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
	}

	// (public) return value as byte
	function bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }

	// (public) return value as short (assumes DB>=16)
	function bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }

	// (protected) return x s.t. r^x < DV
	function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

	// (public) 0 if this == 0, 1 if this > 0
	function bnSigNum() {
	  if(this.s < 0) return -1;
	  else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
	  else return 1;
	}

	// (protected) convert to radix string
	function bnpToRadix(b) {
	  if(b == null) b = 10;
	  if(this.signum() == 0 || b < 2 || b > 36) return "0";
	  var cs = this.chunkSize(b);
	  var a = Math.pow(b,cs);
	  var d = nbv(a), y = nbi(), z = nbi(), r = "";
	  this.divRemTo(d,y,z);
	  while(y.signum() > 0) {
	    r = (a+z.intValue()).toString(b).substr(1) + r;
	    y.divRemTo(d,y,z);
	  }
	  return z.intValue().toString(b) + r;
	}

	// (protected) convert from radix string
	function bnpFromRadix(s,b) {
	  var self = this;
	  self.fromInt(0);
	  if(b == null) b = 10;
	  var cs = self.chunkSize(b);
	  var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
	  for(var i = 0; i < s.length; ++i) {
	    var x = intAt(s,i);
	    if(x < 0) {
	      if(s.charAt(i) == "-" && self.signum() == 0) mi = true;
	      continue;
	    }
	    w = b*w+x;
	    if(++j >= cs) {
	      self.dMultiply(d);
	      self.dAddOffset(w,0);
	      j = 0;
	      w = 0;
	    }
	  }
	  if(j > 0) {
	    self.dMultiply(Math.pow(b,j));
	    self.dAddOffset(w,0);
	  }
	  if(mi) BigInteger.ZERO.subTo(self,self);
	}

	// (protected) alternate constructor
	function bnpFromNumber(a,b,c) {
	  var self = this;
	  if("number" == typeof b) {
	    // new BigInteger(int,int,RNG)
	    if(a < 2) self.fromInt(1);
	    else {
	      self.fromNumber(a,c);
	      if(!self.testBit(a-1))    // force MSB set
	        self.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,self);
	      if(self.isEven()) self.dAddOffset(1,0); // force odd
	      while(!self.isProbablePrime(b)) {
	        self.dAddOffset(2,0);
	        if(self.bitLength() > a) self.subTo(BigInteger.ONE.shiftLeft(a-1),self);
	      }
	    }
	  }
	  else {
	    // new BigInteger(int,RNG)
	    var x = new Array(), t = a&7;
	    x.length = (a>>3)+1;
	    b.nextBytes(x);
	    if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;
	    self.fromString(x,256);
	  }
	}

	// (public) convert to bigendian byte array
	function bnToByteArray() {
	  var self = this;
	  var i = self.t, r = new Array();
	  r[0] = self.s;
	  var p = self.DB-(i*self.DB)%8, d, k = 0;
	  if(i-- > 0) {
	    if(p < self.DB && (d = self[i]>>p) != (self.s&self.DM)>>p)
	      r[k++] = d|(self.s<<(self.DB-p));
	    while(i >= 0) {
	      if(p < 8) {
	        d = (self[i]&((1<<p)-1))<<(8-p);
	        d |= self[--i]>>(p+=self.DB-8);
	      }
	      else {
	        d = (self[i]>>(p-=8))&0xff;
	        if(p <= 0) { p += self.DB; --i; }
	      }
	      if((d&0x80) != 0) d |= -256;
	      if(k === 0 && (self.s&0x80) != (d&0x80)) ++k;
	      if(k > 0 || d != self.s) r[k++] = d;
	    }
	  }
	  return r;
	}

	function bnEquals(a) { return(this.compareTo(a)==0); }
	function bnMin(a) { return(this.compareTo(a)<0)?this:a; }
	function bnMax(a) { return(this.compareTo(a)>0)?this:a; }

	// (protected) r = this op a (bitwise)
	function bnpBitwiseTo(a,op,r) {
	  var self = this;
	  var i, f, m = Math.min(a.t,self.t);
	  for(i = 0; i < m; ++i) r[i] = op(self[i],a[i]);
	  if(a.t < self.t) {
	    f = a.s&self.DM;
	    for(i = m; i < self.t; ++i) r[i] = op(self[i],f);
	    r.t = self.t;
	  }
	  else {
	    f = self.s&self.DM;
	    for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);
	    r.t = a.t;
	  }
	  r.s = op(self.s,a.s);
	  r.clamp();
	}

	// (public) this & a
	function op_and(x,y) { return x&y; }
	function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }

	// (public) this | a
	function op_or(x,y) { return x|y; }
	function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }

	// (public) this ^ a
	function op_xor(x,y) { return x^y; }
	function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }

	// (public) this & ~a
	function op_andnot(x,y) { return x&~y; }
	function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }

	// (public) ~this
	function bnNot() {
	  var r = nbi();
	  for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];
	  r.t = this.t;
	  r.s = ~this.s;
	  return r;
	}

	// (public) this << n
	function bnShiftLeft(n) {
	  var r = nbi();
	  if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);
	  return r;
	}

	// (public) this >> n
	function bnShiftRight(n) {
	  var r = nbi();
	  if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);
	  return r;
	}

	// return index of lowest 1-bit in x, x < 2^31
	function lbit(x) {
	  if(x == 0) return -1;
	  var r = 0;
	  if((x&0xffff) == 0) { x >>= 16; r += 16; }
	  if((x&0xff) == 0) { x >>= 8; r += 8; }
	  if((x&0xf) == 0) { x >>= 4; r += 4; }
	  if((x&3) == 0) { x >>= 2; r += 2; }
	  if((x&1) == 0) ++r;
	  return r;
	}

	// (public) returns index of lowest 1-bit (or -1 if none)
	function bnGetLowestSetBit() {
	  for(var i = 0; i < this.t; ++i)
	    if(this[i] != 0) return i*this.DB+lbit(this[i]);
	  if(this.s < 0) return this.t*this.DB;
	  return -1;
	}

	// return number of 1 bits in x
	function cbit(x) {
	  var r = 0;
	  while(x != 0) { x &= x-1; ++r; }
	  return r;
	}

	// (public) return number of set bits
	function bnBitCount() {
	  var r = 0, x = this.s&this.DM;
	  for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);
	  return r;
	}

	// (public) true iff nth bit is set
	function bnTestBit(n) {
	  var j = Math.floor(n/this.DB);
	  if(j >= this.t) return(this.s!=0);
	  return((this[j]&(1<<(n%this.DB)))!=0);
	}

	// (protected) this op (1<<n)
	function bnpChangeBit(n,op) {
	  var r = BigInteger.ONE.shiftLeft(n);
	  this.bitwiseTo(r,op,r);
	  return r;
	}

	// (public) this | (1<<n)
	function bnSetBit(n) { return this.changeBit(n,op_or); }

	// (public) this & ~(1<<n)
	function bnClearBit(n) { return this.changeBit(n,op_andnot); }

	// (public) this ^ (1<<n)
	function bnFlipBit(n) { return this.changeBit(n,op_xor); }

	// (protected) r = this + a
	function bnpAddTo(a,r) {
	  var self = this;

	  var i = 0, c = 0, m = Math.min(a.t,self.t);
	  while(i < m) {
	    c += self[i]+a[i];
	    r[i++] = c&self.DM;
	    c >>= self.DB;
	  }
	  if(a.t < self.t) {
	    c += a.s;
	    while(i < self.t) {
	      c += self[i];
	      r[i++] = c&self.DM;
	      c >>= self.DB;
	    }
	    c += self.s;
	  }
	  else {
	    c += self.s;
	    while(i < a.t) {
	      c += a[i];
	      r[i++] = c&self.DM;
	      c >>= self.DB;
	    }
	    c += a.s;
	  }
	  r.s = (c<0)?-1:0;
	  if(c > 0) r[i++] = c;
	  else if(c < -1) r[i++] = self.DV+c;
	  r.t = i;
	  r.clamp();
	}

	// (public) this + a
	function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }

	// (public) this - a
	function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }

	// (public) this * a
	function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }

	// (public) this^2
	function bnSquare() { var r = nbi(); this.squareTo(r); return r; }

	// (public) this / a
	function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }

	// (public) this % a
	function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }

	// (public) [this/a,this%a]
	function bnDivideAndRemainder(a) {
	  var q = nbi(), r = nbi();
	  this.divRemTo(a,q,r);
	  return new Array(q,r);
	}

	// (protected) this *= n, this >= 0, 1 < n < DV
	function bnpDMultiply(n) {
	  this[this.t] = this.am(0,n-1,this,0,0,this.t);
	  ++this.t;
	  this.clamp();
	}

	// (protected) this += n << w words, this >= 0
	function bnpDAddOffset(n,w) {
	  if(n == 0) return;
	  while(this.t <= w) this[this.t++] = 0;
	  this[w] += n;
	  while(this[w] >= this.DV) {
	    this[w] -= this.DV;
	    if(++w >= this.t) this[this.t++] = 0;
	    ++this[w];
	  }
	}

	// A "null" reducer
	function NullExp() {}
	function nNop(x) { return x; }
	function nMulTo(x,y,r) { x.multiplyTo(y,r); }
	function nSqrTo(x,r) { x.squareTo(r); }

	NullExp.prototype.convert = nNop;
	NullExp.prototype.revert = nNop;
	NullExp.prototype.mulTo = nMulTo;
	NullExp.prototype.sqrTo = nSqrTo;

	// (public) this^e
	function bnPow(e) { return this.exp(e,new NullExp()); }

	// (protected) r = lower n words of "this * a", a.t <= n
	// "this" should be the larger one if appropriate.
	function bnpMultiplyLowerTo(a,n,r) {
	  var i = Math.min(this.t+a.t,n);
	  r.s = 0; // assumes a,this >= 0
	  r.t = i;
	  while(i > 0) r[--i] = 0;
	  var j;
	  for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);
	  for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);
	  r.clamp();
	}

	// (protected) r = "this * a" without lower n words, n > 0
	// "this" should be the larger one if appropriate.
	function bnpMultiplyUpperTo(a,n,r) {
	  --n;
	  var i = r.t = this.t+a.t-n;
	  r.s = 0; // assumes a,this >= 0
	  while(--i >= 0) r[i] = 0;
	  for(i = Math.max(n-this.t,0); i < a.t; ++i)
	    r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);
	  r.clamp();
	  r.drShiftTo(1,r);
	}

	// Barrett modular reduction
	function Barrett(m) {
	  // setup Barrett
	  this.r2 = nbi();
	  this.q3 = nbi();
	  BigInteger.ONE.dlShiftTo(2*m.t,this.r2);
	  this.mu = this.r2.divide(m);
	  this.m = m;
	}

	function barrettConvert(x) {
	  if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);
	  else if(x.compareTo(this.m) < 0) return x;
	  else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }
	}

	function barrettRevert(x) { return x; }

	// x = x mod m (HAC 14.42)
	function barrettReduce(x) {
	  var self = this;
	  x.drShiftTo(self.m.t-1,self.r2);
	  if(x.t > self.m.t+1) { x.t = self.m.t+1; x.clamp(); }
	  self.mu.multiplyUpperTo(self.r2,self.m.t+1,self.q3);
	  self.m.multiplyLowerTo(self.q3,self.m.t+1,self.r2);
	  while(x.compareTo(self.r2) < 0) x.dAddOffset(1,self.m.t+1);
	  x.subTo(self.r2,x);
	  while(x.compareTo(self.m) >= 0) x.subTo(self.m,x);
	}

	// r = x^2 mod m; x != r
	function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	// r = x*y mod m; x,y != r
	function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

	Barrett.prototype.convert = barrettConvert;
	Barrett.prototype.revert = barrettRevert;
	Barrett.prototype.reduce = barrettReduce;
	Barrett.prototype.mulTo = barrettMulTo;
	Barrett.prototype.sqrTo = barrettSqrTo;

	// (public) this^e % m (HAC 14.85)
	function bnModPow(e,m) {
	  var i = e.bitLength(), k, r = nbv(1), z;
	  if(i <= 0) return r;
	  else if(i < 18) k = 1;
	  else if(i < 48) k = 3;
	  else if(i < 144) k = 4;
	  else if(i < 768) k = 5;
	  else k = 6;
	  if(i < 8)
	    z = new Classic(m);
	  else if(m.isEven())
	    z = new Barrett(m);
	  else
	    z = new Montgomery(m);

	  // precomputation
	  var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;
	  g[1] = z.convert(this);
	  if(k > 1) {
	    var g2 = nbi();
	    z.sqrTo(g[1],g2);
	    while(n <= km) {
	      g[n] = nbi();
	      z.mulTo(g2,g[n-2],g[n]);
	      n += 2;
	    }
	  }

	  var j = e.t-1, w, is1 = true, r2 = nbi(), t;
	  i = nbits(e[j])-1;
	  while(j >= 0) {
	    if(i >= k1) w = (e[j]>>(i-k1))&km;
	    else {
	      w = (e[j]&((1<<(i+1))-1))<<(k1-i);
	      if(j > 0) w |= e[j-1]>>(this.DB+i-k1);
	    }

	    n = k;
	    while((w&1) == 0) { w >>= 1; --n; }
	    if((i -= n) < 0) { i += this.DB; --j; }
	    if(is1) {   // ret == 1, don't bother squaring or multiplying it
	      g[w].copyTo(r);
	      is1 = false;
	    }
	    else {
	      while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }
	      if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }
	      z.mulTo(r2,g[w],r);
	    }

	    while(j >= 0 && (e[j]&(1<<i)) == 0) {
	      z.sqrTo(r,r2); t = r; r = r2; r2 = t;
	      if(--i < 0) { i = this.DB-1; --j; }
	    }
	  }
	  return z.revert(r);
	}

	// (public) gcd(this,a) (HAC 14.54)
	function bnGCD(a) {
	  var x = (this.s<0)?this.negate():this.clone();
	  var y = (a.s<0)?a.negate():a.clone();
	  if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }
	  var i = x.getLowestSetBit(), g = y.getLowestSetBit();
	  if(g < 0) return x;
	  if(i < g) g = i;
	  if(g > 0) {
	    x.rShiftTo(g,x);
	    y.rShiftTo(g,y);
	  }
	  while(x.signum() > 0) {
	    if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);
	    if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);
	    if(x.compareTo(y) >= 0) {
	      x.subTo(y,x);
	      x.rShiftTo(1,x);
	    }
	    else {
	      y.subTo(x,y);
	      y.rShiftTo(1,y);
	    }
	  }
	  if(g > 0) y.lShiftTo(g,y);
	  return y;
	}

	// (protected) this % n, n < 2^26
	function bnpModInt(n) {
	  if(n <= 0) return 0;
	  var d = this.DV%n, r = (this.s<0)?n-1:0;
	  if(this.t > 0)
	    if(d == 0) r = this[0]%n;
	    else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;
	  return r;
	}

	// (public) 1/this % m (HAC 14.61)
	function bnModInverse(m) {
	  var ac = m.isEven();
	  if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;
	  var u = m.clone(), v = this.clone();
	  var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
	  while(u.signum() != 0) {
	    while(u.isEven()) {
	      u.rShiftTo(1,u);
	      if(ac) {
	        if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }
	        a.rShiftTo(1,a);
	      }
	      else if(!b.isEven()) b.subTo(m,b);
	      b.rShiftTo(1,b);
	    }
	    while(v.isEven()) {
	      v.rShiftTo(1,v);
	      if(ac) {
	        if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }
	        c.rShiftTo(1,c);
	      }
	      else if(!d.isEven()) d.subTo(m,d);
	      d.rShiftTo(1,d);
	    }
	    if(u.compareTo(v) >= 0) {
	      u.subTo(v,u);
	      if(ac) a.subTo(c,a);
	      b.subTo(d,b);
	    }
	    else {
	      v.subTo(u,v);
	      if(ac) c.subTo(a,c);
	      d.subTo(b,d);
	    }
	  }
	  if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
	  if(d.compareTo(m) >= 0) return d.subtract(m);
	  if(d.signum() < 0) d.addTo(m,d); else return d;
	  if(d.signum() < 0) return d.add(m); else return d;
	}

	// protected
	proto.chunkSize = bnpChunkSize;
	proto.toRadix = bnpToRadix;
	proto.fromRadix = bnpFromRadix;
	proto.fromNumber = bnpFromNumber;
	proto.bitwiseTo = bnpBitwiseTo;
	proto.changeBit = bnpChangeBit;
	proto.addTo = bnpAddTo;
	proto.dMultiply = bnpDMultiply;
	proto.dAddOffset = bnpDAddOffset;
	proto.multiplyLowerTo = bnpMultiplyLowerTo;
	proto.multiplyUpperTo = bnpMultiplyUpperTo;
	proto.modInt = bnpModInt;

	// public
	proto.clone = bnClone;
	proto.intValue = bnIntValue;
	proto.byteValue = bnByteValue;
	proto.shortValue = bnShortValue;
	proto.signum = bnSigNum;
	proto.toByteArray = bnToByteArray;
	proto.equals = bnEquals;
	proto.min = bnMin;
	proto.max = bnMax;
	proto.and = bnAnd;
	proto.or = bnOr;
	proto.xor = bnXor;
	proto.andNot = bnAndNot;
	proto.not = bnNot;
	proto.shiftLeft = bnShiftLeft;
	proto.shiftRight = bnShiftRight;
	proto.getLowestSetBit = bnGetLowestSetBit;
	proto.bitCount = bnBitCount;
	proto.testBit = bnTestBit;
	proto.setBit = bnSetBit;
	proto.clearBit = bnClearBit;
	proto.flipBit = bnFlipBit;
	proto.add = bnAdd;
	proto.subtract = bnSubtract;
	proto.multiply = bnMultiply;
	proto.divide = bnDivide;
	proto.remainder = bnRemainder;
	proto.divideAndRemainder = bnDivideAndRemainder;
	proto.modPow = bnModPow;
	proto.modInverse = bnModInverse;
	proto.pow = bnPow;
	proto.gcd = bnGCD;

	// JSBN-specific extension
	proto.square = bnSquare;

	// BigInteger interfaces not implemented in jsbn:

	// BigInteger(int signum, byte[] magnitude)
	// double doubleValue()
	// float floatValue()
	// int hashCode()
	// long longValue()
	// static BigInteger valueOf(long val)

	// "constants"
	BigInteger.ZERO = nbv(0);
	BigInteger.ONE = nbv(1);
	BigInteger.valueOf = nbv;


/***/ },
/* 16 */
/*!**************************************!*\
  !*** ./app/dl/~/bigi/lib/convert.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// FIXME: Kind of a weird way to throw exceptions, consider removing
	var assert = __webpack_require__(/*! assert */ 9)
	var BigInteger = __webpack_require__(/*! ./bigi */ 15)

	/**
	 * Turns a byte array into a big integer.
	 *
	 * This function will interpret a byte array as a big integer in big
	 * endian notation.
	 */
	BigInteger.fromByteArrayUnsigned = function(byteArray) {
	  // BigInteger expects a DER integer conformant byte array
	  if (byteArray[0] & 0x80) {
	    return new BigInteger([0].concat(byteArray))
	  }

	  return new BigInteger(byteArray)
	}

	/**
	 * Returns a byte array representation of the big integer.
	 *
	 * This returns the absolute of the contained value in big endian
	 * form. A value of zero results in an empty array.
	 */
	BigInteger.prototype.toByteArrayUnsigned = function() {
	  var byteArray = this.toByteArray()
	  return byteArray[0] === 0 ? byteArray.slice(1) : byteArray
	}

	BigInteger.fromDERInteger = function(byteArray) {
	  return new BigInteger(byteArray)
	}

	/*
	 * Converts BigInteger to a DER integer representation.
	 *
	 * The format for this value uses the most significant bit as a sign
	 * bit.  If the most significant bit is already set and the integer is
	 * positive, a 0x00 is prepended.
	 *
	 * Examples:
	 *
	 *      0 =>     0x00
	 *      1 =>     0x01
	 *     -1 =>     0x81
	 *    127 =>     0x7f
	 *   -127 =>     0xff
	 *    128 =>   0x0080
	 *   -128 =>     0x80
	 *    255 =>   0x00ff
	 *   -255 =>     0xff
	 *  16300 =>   0x3fac
	 * -16300 =>   0xbfac
	 *  62300 => 0x00f35c
	 * -62300 =>   0xf35c
	*/
	BigInteger.prototype.toDERInteger = BigInteger.prototype.toByteArray

	BigInteger.fromBuffer = function(buffer) {
	  // BigInteger expects a DER integer conformant byte array
	  if (buffer[0] & 0x80) {
	    var byteArray = Array.prototype.slice.call(buffer)

	    return new BigInteger([0].concat(byteArray))
	  }

	  return new BigInteger(buffer)
	}

	BigInteger.fromHex = function(hex) {
	  if (hex === '') return BigInteger.ZERO

	  assert.equal(hex, hex.match(/^[A-Fa-f0-9]+/), 'Invalid hex string')
	  assert.equal(hex.length % 2, 0, 'Incomplete hex')
	  return new BigInteger(hex, 16)
	}

	BigInteger.prototype.toBuffer = function(size) {
	  var byteArray = this.toByteArrayUnsigned()
	  var zeros = []

	  var padding = size - byteArray.length
	  while (zeros.length < padding) zeros.push(0)

	  return new Buffer(zeros.concat(byteArray))
	}

	BigInteger.prototype.toHex = function(size) {
	  return this.toBuffer(size).toString('hex')
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/buffer/index.js */ 2).Buffer))

/***/ },
/* 17 */
/*!**************************************!*\
  !*** ./app/dl/~/ecurve/lib/curve.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(/*! assert */ 9)
	var BigInteger = __webpack_require__(/*! bigi */ 14)

	var Point = __webpack_require__(/*! ./point */ 8)

	function Curve(p, a, b, Gx, Gy, n, h) {
	  this.p = p
	  this.a = a
	  this.b = b
	  this.G = Point.fromAffine(this, Gx, Gy)
	  this.n = n
	  this.h = h

	  this.infinity = new Point(this, null, null, BigInteger.ZERO)

	  // result caching
	  this.pOverFour = p.add(BigInteger.ONE).shiftRight(2)
	}

	Curve.prototype.pointFromX = function(isOdd, x) {
	  var alpha = x.pow(3).add(this.a.multiply(x)).add(this.b).mod(this.p)
	  var beta = alpha.modPow(this.pOverFour, this.p)

	  var y = beta
	  if (beta.isEven() ^ !isOdd) {
	    y = this.p.subtract(y) // -y % p
	  }

	  return Point.fromAffine(this, x, y)
	}

	Curve.prototype.isInfinity = function(Q) {
	  if (Q === this.infinity) return true

	  return Q.z.signum() === 0 && Q.y.signum() !== 0
	}

	Curve.prototype.isOnCurve = function(Q) {
	  if (this.isInfinity(Q)) return true

	  var x = Q.affineX
	  var y = Q.affineY
	  var a = this.a
	  var b = this.b
	  var p = this.p

	  // Check that xQ and yQ are integers in the interval [0, p - 1]
	  if (x.signum() < 0 || x.compareTo(p) >= 0) return false
	  if (y.signum() < 0 || y.compareTo(p) >= 0) return false

	  // and check that y^2 = x^3 + ax + b (mod p)
	  var lhs = y.square().mod(p)
	  var rhs = x.pow(3).add(a.multiply(x)).add(b).mod(p)
	  return lhs.equals(rhs)
	}

	/**
	 * Validate an elliptic curve point.
	 *
	 * See SEC 1, section 3.2.2.1: Elliptic Curve Public Key Validation Primitive
	 */
	Curve.prototype.validate = function(Q) {
	  // Check Q != O
	  assert(!this.isInfinity(Q), 'Point is at infinity')
	  assert(this.isOnCurve(Q), 'Point is not on the curve')

	  // Check nQ = O (where Q is a scalar multiple of G)
	  var nQ = Q.multiply(this.n)
	  assert(this.isInfinity(nQ), 'Point is not a scalar multiple of G')

	  return true
	}

	module.exports = Curve


/***/ },
/* 18 */
/*!**************************************!*\
  !*** ./app/dl/~/ecurve/lib/names.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	var BigInteger = __webpack_require__(/*! bigi */ 14)

	var curves = __webpack_require__(/*! ./curves */ 19)
	var Curve = __webpack_require__(/*! ./curve */ 17)

	function getCurveByName(name) {
	  var curve = curves[name]
	  if (!curve) return null

	  var p = new BigInteger(curve.p, 16)
	  var a = new BigInteger(curve.a, 16)
	  var b = new BigInteger(curve.b, 16)
	  var n = new BigInteger(curve.n, 16)
	  var h = new BigInteger(curve.h, 16)
	  var Gx = new BigInteger(curve.Gx, 16)
	  var Gy = new BigInteger(curve.Gy, 16)

	  return new Curve(p, a, b, Gx, Gy, n, h)
	}

	module.exports = getCurveByName


/***/ },
/* 19 */
/*!*****************************************!*\
  !*** ./app/dl/~/ecurve/lib/curves.json ***!
  \*****************************************/
/***/ function(module, exports) {

	module.exports = {
		"secp128r1": {
			"p": "fffffffdffffffffffffffffffffffff",
			"a": "fffffffdfffffffffffffffffffffffc",
			"b": "e87579c11079f43dd824993c2cee5ed3",
			"n": "fffffffe0000000075a30d1b9038a115",
			"h": "01",
			"Gx": "161ff7528b899b2d0c28607ca52c5b86",
			"Gy": "cf5ac8395bafeb13c02da292dded7a83"
		},
		"secp160k1": {
			"p": "fffffffffffffffffffffffffffffffeffffac73",
			"a": "00",
			"b": "07",
			"n": "0100000000000000000001b8fa16dfab9aca16b6b3",
			"h": "01",
			"Gx": "3b4c382ce37aa192a4019e763036f4f5dd4d7ebb",
			"Gy": "938cf935318fdced6bc28286531733c3f03c4fee"
		},
		"secp160r1": {
			"p": "ffffffffffffffffffffffffffffffff7fffffff",
			"a": "ffffffffffffffffffffffffffffffff7ffffffc",
			"b": "1c97befc54bd7a8b65acf89f81d4d4adc565fa45",
			"n": "0100000000000000000001f4c8f927aed3ca752257",
			"h": "01",
			"Gx": "4a96b5688ef573284664698968c38bb913cbfc82",
			"Gy": "23a628553168947d59dcc912042351377ac5fb32"
		},
		"secp192k1": {
			"p": "fffffffffffffffffffffffffffffffffffffffeffffee37",
			"a": "00",
			"b": "03",
			"n": "fffffffffffffffffffffffe26f2fc170f69466a74defd8d",
			"h": "01",
			"Gx": "db4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d",
			"Gy": "9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d"
		},
		"secp192r1": {
			"p": "fffffffffffffffffffffffffffffffeffffffffffffffff",
			"a": "fffffffffffffffffffffffffffffffefffffffffffffffc",
			"b": "64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1",
			"n": "ffffffffffffffffffffffff99def836146bc9b1b4d22831",
			"h": "01",
			"Gx": "188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012",
			"Gy": "07192b95ffc8da78631011ed6b24cdd573f977a11e794811"
		},
		"secp256k1": {
			"p": "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",
			"a": "00",
			"b": "07",
			"n": "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",
			"h": "01",
			"Gx": "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
			"Gy": "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
		},
		"secp256r1": {
			"p": "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff",
			"a": "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc",
			"b": "5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b",
			"n": "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551",
			"h": "01",
			"Gx": "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296",
			"Gy": "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"
		}
	};

/***/ },
/* 20 */
/*!***********************************!*\
  !*** ./app/dl/~/bs58/lib/bs58.js ***!
  \***********************************/
/***/ function(module, exports) {

	// Base58 encoding/decoding
	// Originally written by Mike Hearn for BitcoinJ
	// Copyright (c) 2011 Google Inc
	// Ported to JavaScript by Stefan Thomas
	// Merged Buffer refactorings from base58-native by Stephen Pair
	// Copyright (c) 2013 BitPay Inc

	var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
	var ALPHABET_MAP = {}
	for(var i = 0; i < ALPHABET.length; i++) {
	  ALPHABET_MAP[ALPHABET.charAt(i)] = i
	}
	var BASE = 58

	function encode(buffer) {
	  if (buffer.length === 0) return ''

	  var i, j, digits = [0]
	  for (i = 0; i < buffer.length; i++) {
	    for (j = 0; j < digits.length; j++) digits[j] <<= 8

	    digits[0] += buffer[i]

	    var carry = 0
	    for (j = 0; j < digits.length; ++j) {
	      digits[j] += carry

	      carry = (digits[j] / BASE) | 0
	      digits[j] %= BASE
	    }

	    while (carry) {
	      digits.push(carry % BASE)

	      carry = (carry / BASE) | 0
	    }
	  }

	  // deal with leading zeros
	  for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) digits.push(0)

	  return digits.reverse().map(function(digit) { return ALPHABET[digit] }).join('')
	}

	function decode(string) {
	  if (string.length === 0) return []

	  var i, j, bytes = [0]
	  for (i = 0; i < string.length; i++) {
	    var c = string[i]
	    if (!(c in ALPHABET_MAP)) throw new Error('Non-base58 character')

	    for (j = 0; j < bytes.length; j++) bytes[j] *= BASE
	    bytes[0] += ALPHABET_MAP[c]

	    var carry = 0
	    for (j = 0; j < bytes.length; ++j) {
	      bytes[j] += carry

	      carry = bytes[j] >> 8
	      bytes[j] &= 0xff
	    }

	    while (carry) {
	      bytes.push(carry & 0xff)

	      carry >>= 8
	    }
	  }

	  // deal with leading zeros
	  for (i = 0; string[i] === '1' && i < string.length - 1; i++) bytes.push(0)

	  return bytes.reverse()
	}

	module.exports = {
	  encode: encode,
	  decode: decode
	}


/***/ },
/* 21 */
/*!***********************************!*\
  !*** ./app/dl/src/common/hash.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var crypto = __webpack_require__(/*! crypto */ 22); // derived from https://github.com/bitcoinjs/bitcoinjs-lib

	function hash160(buffer) {
	  return ripemd160(sha256(buffer));
	}

	function hash256(buffer) {
	  return sha256(sha256(buffer));
	}

	function ripemd160(buffer) {
	  return crypto.createHash('rmd160').update(buffer).digest();
	}

	function sha1(buffer) {
	  return crypto.createHash('sha1').update(buffer).digest();
	}

	function sha256(buffer) {
	  return crypto.createHash('sha256').update(buffer).digest();
	}

	function sha512(buffer) {
	  return crypto.createHash('sha512').update(buffer).digest();
	}

	// FIXME: Name not consistent with others
	function HmacSHA256(buffer, secret) {
	  return crypto.createHmac('sha256', secret).update(buffer).digest();
	}

	function HmacSHA512(buffer, secret) {
	  return crypto.createHmac('sha512', secret).update(buffer).digest();
	}

	module.exports = {
	  ripemd160: ripemd160,
	  sha1: sha1,
	  sha256: sha256,
	  sha512: sha512,
	  hash160: hash160,
	  hash256: hash256,
	  HmacSHA256: HmacSHA256,
	  HmacSHA512: HmacSHA512
	};

/***/ },
/* 22 */
/*!******************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/crypto-browserify/index.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(/*! ./rng */ 23)

	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}

	exports.createHash = __webpack_require__(/*! ./create-hash */ 25)

	exports.createHmac = __webpack_require__(/*! ./create-hmac */ 34)

	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}

	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}

	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}

	var p = __webpack_require__(/*! ./pbkdf2 */ 35)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync


	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createCipher'
	, 'createCipheriv'
	, 'createDecipher'
	, 'createDecipheriv'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/buffer/index.js */ 2).Buffer))

/***/ },
/* 23 */
/*!****************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/crypto-browserify/rng.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(/*! crypto */ 24)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(/*! (webpack)/~/node-libs-browser/~/buffer/index.js */ 2).Buffer))

/***/ },
/* 24 */
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 25 */
/*!************************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/crypto-browserify/create-hash.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(/*! sha.js */ 26)

	var md5 = toConstructor(__webpack_require__(/*! ./md5 */ 31))
	var rmd160 = toConstructor(__webpack_require__(/*! ripemd160 */ 33))

	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}

	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/buffer/index.js */ 2).Buffer))

/***/ },
/* 26 */
/*!***************************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/crypto-browserify/~/sha.js/index.js ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}

	var Buffer = __webpack_require__(/*! buffer */ 2).Buffer
	var Hash   = __webpack_require__(/*! ./hash */ 27)(Buffer)

	exports.sha1 = __webpack_require__(/*! ./sha1 */ 28)(Buffer, Hash)
	exports.sha256 = __webpack_require__(/*! ./sha256 */ 29)(Buffer, Hash)
	exports.sha512 = __webpack_require__(/*! ./sha512 */ 30)(Buffer, Hash)


/***/ },
/* 27 */
/*!**************************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/crypto-browserify/~/sha.js/hash.js ***!
  \**************************************************************************/
/***/ function(module, exports) {

	module.exports = function (Buffer) {

	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }

	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }

	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }

	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block

	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)

	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }

	      s += ch
	      f += ch

	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s

	    return this
	  }

	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8

	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80

	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)

	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }

	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)

	    var hash = this._update(this._block) || this._hash()

	    return enc ? hash.toString(enc) : hash
	  }

	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }

	  return Hash
	}


/***/ },
/* 28 */
/*!**************************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/crypto-browserify/~/sha.js/sha1.js ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits = __webpack_require__(/*! util */ 10).inherits

	module.exports = function (Buffer, Hash) {

	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0

	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

	  var POOL = []

	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()

	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)

	    this._h = null
	    this.init()
	  }

	  inherits(Sha1, Hash)

	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0

	    Hash.prototype.init.call(this)
	    return this
	  }

	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {

	    var a, b, c, d, e, _a, _b, _c, _d, _e

	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e

	    var w = this._w

	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )

	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }

	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }

	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }

	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }

	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }

	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }

	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }

	  return Sha1
	}


/***/ },
/* 29 */
/*!****************************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/crypto-browserify/~/sha.js/sha256.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(/*! util */ 10).inherits

	module.exports = function (Buffer, Hash) {

	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]

	  var W = new Array(64)

	  function Sha256() {
	    this.init()

	    this._w = W //new Array(64)

	    Hash.call(this, 16*4, 14*4)
	  }

	  inherits(Sha256, Hash)

	  Sha256.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }

	  function R (X, n) {
	    return (X >>> n);
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }

	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }

	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }

	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }

	  Sha256.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }

	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0

	  };

	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)

	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)

	    return H
	  }

	  return Sha256

	}


/***/ },
/* 30 */
/*!****************************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/crypto-browserify/~/sha.js/sha512.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(/*! util */ 10).inherits

	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]

	  var W = new Array(160)

	  function Sha512() {
	    this.init()
	    this._w = W

	    Hash.call(this, 128, 112)
	  }

	  inherits(Sha512, Hash)

	  Sha512.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  Sha512.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0

	    for (var i = 0; i < 80; i++) {
	      var j = i * 2

	      var Wi, Wil

	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]

	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]

	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

	        W[j] = Wi
	        W[j + 1] = Wil
	      }

	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)

	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]

	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)

	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }

	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0

	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }

	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)

	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }

	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)

	    return H
	  }

	  return Sha512

	}


/***/ },
/* 31 */
/*!****************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/crypto-browserify/md5.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */

	var helpers = __webpack_require__(/*! ./helpers */ 32);

	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;

	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;

	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;

	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);

	}

	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ },
/* 32 */
/*!********************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/crypto-browserify/helpers.js ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;

	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }

	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}

	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}

	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}

	module.exports = { hash: hash };

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/buffer/index.js */ 2).Buffer))

/***/ },
/* 33 */
/*!**************************************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/crypto-browserify/~/ripemd160/lib/ripemd160.js ***!
  \**************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160



	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};

	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};

	var processBlock = function (H, M, offset) {

	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];

	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }

	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;

	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;

	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};

	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}

	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}

	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}

	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}

	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}

	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}

	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');

	  var m = bytesToWords(message);

	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;

	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );

	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }

	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];

	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }

	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}



	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/buffer/index.js */ 2).Buffer))

/***/ },
/* 34 */
/*!************************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/crypto-browserify/create-hmac.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(/*! ./create-hash */ 25)

	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)

	module.exports = Hmac

	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg

	  var blocksize = (alg === 'sha512') ? 128 : 64

	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }

	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)

	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }

	  this._hash = createHash(alg).update(ipad)
	}

	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}

	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/buffer/index.js */ 2).Buffer))

/***/ },
/* 35 */
/*!*******************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/crypto-browserify/pbkdf2.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(/*! pbkdf2-compat/pbkdf2 */ 36)

	module.exports = function (crypto, exports) {
	  exports = exports || {}

	  var exported = pbkdf2Export(crypto)

	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync

	  return exports
	}


/***/ },
/* 36 */
/*!***********************************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/crypto-browserify/~/pbkdf2-compat/pbkdf2.js ***!
  \***********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }

	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')

	    setTimeout(function() {
	      var result

	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }

	      callback(undefined, result)
	    })
	  }

	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')

	    if (iterations < 0)
	      throw new TypeError('Bad iterations')

	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')

	    if (keylen < 0)
	      throw new TypeError('Bad key length')

	    digest = digest || 'sha1'

	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)

	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)

	      var U = crypto.createHmac(digest, password).update(block1).digest()

	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen

	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }

	      U.copy(T, 0, 0, hLen)

	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()

	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }

	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }

	    return DK
	  }

	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/buffer/index.js */ 2).Buffer))

/***/ },
/* 37 */
/*!******************************************!*\
  !*** ./app/dl/src/ecc/key_public.coffee ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var BigInteger, PublicKey, assert, base58, config, ecurve, hash, secp256k1;

	BigInteger = __webpack_require__(/*! bigi */ 14);

	ecurve = __webpack_require__(/*! ecurve */ 7);

	secp256k1 = ecurve.getCurveByName('secp256k1');

	BigInteger = __webpack_require__(/*! bigi */ 14);

	base58 = __webpack_require__(/*! bs58 */ 20);

	hash = __webpack_require__(/*! ../common/hash */ 21);

	config = __webpack_require__(/*! ../chain/config */ 38);

	assert = __webpack_require__(/*! assert */ 9);

	PublicKey = (function() {

	  /** @param {ecurve.Point} public key */
	  function PublicKey(Q) {
	    this.Q = Q;
	  }

	  PublicKey.fromBinary = function(bin) {
	    return PublicKey.fromBuffer(new Buffer(bin, 'binary'));
	  };

	  PublicKey.fromBuffer = function(buffer) {
	    return new PublicKey(ecurve.Point.decodeFrom(secp256k1, buffer));
	  };

	  PublicKey.prototype.toBuffer = function(compressed) {
	    if (compressed == null) {
	      compressed = this.Q.compressed;
	    }
	    return this.Q.getEncoded(compressed);
	  };

	  PublicKey.fromPoint = function(point) {
	    return new PublicKey(point);
	  };

	  PublicKey.prototype.toUncompressed = function() {
	    var buf, point;
	    buf = this.Q.getEncoded(false);
	    point = ecurve.Point.decodeFrom(secp256k1, buf);
	    return PublicKey.fromPoint(point);
	  };


	  /** bts::blockchain::address (unique but not a full public key) */

	  PublicKey.prototype.toBlockchainAddress = function() {
	    var pub_buf, pub_sha;
	    pub_buf = this.toBuffer();
	    pub_sha = hash.sha512(pub_buf);
	    return hash.ripemd160(pub_sha);
	  };


	  /**
	  Full public key 
	  {return} string
	   */

	  PublicKey.prototype.toPublicKeyString = function(address_prefix) {
	    var addy, checksum, pub_buf;
	    if (address_prefix == null) {
	      address_prefix = config.address_prefix;
	    }
	    pub_buf = this.toBuffer();
	    checksum = hash.ripemd160(pub_buf);
	    addy = Buffer.concat([pub_buf, checksum.slice(0, 4)]);
	    return address_prefix + base58.encode(addy);
	  };


	  /**
	  {param1} public_key string
	  {return} PublicKey
	   */

	  PublicKey.fromPublicKeyString = function(public_key, address_prefix) {
	    var checksum, e, error, new_checksum, prefix;
	    if (address_prefix == null) {
	      address_prefix = config.address_prefix;
	    }
	    try {
	      prefix = public_key.slice(0, address_prefix.length);
	      assert.equal(address_prefix, prefix, "Expecting key to begin with " + address_prefix + ", instead got " + prefix);
	      public_key = public_key.slice(address_prefix.length);
	      public_key = new Buffer(base58.decode(public_key), 'binary');
	      checksum = public_key.slice(-4);
	      public_key = public_key.slice(0, -4);
	      new_checksum = hash.ripemd160(public_key);
	      new_checksum = new_checksum.slice(0, 4);
	      assert.deepEqual(checksum, new_checksum, 'Checksum did not match');
	      return PublicKey.fromBuffer(public_key);
	    } catch (error) {
	      e = error;
	      console.error('PublicKey.fromPublicKeyString', e);
	      return null;
	    }
	  };

	  PublicKey.prototype.toAddressString = function(address_prefix) {
	    var addy, checksum, pub_buf, pub_sha;
	    if (address_prefix == null) {
	      address_prefix = config.address_prefix;
	    }
	    pub_buf = this.toBuffer();
	    pub_sha = hash.sha512(pub_buf);
	    addy = hash.ripemd160(pub_sha);
	    checksum = hash.ripemd160(addy);
	    addy = Buffer.concat([addy, checksum.slice(0, 4)]);
	    return address_prefix + base58.encode(addy);
	  };

	  PublicKey.prototype.toPtsAddy = function() {
	    var addy, checksum, pub_buf, pub_sha;
	    pub_buf = this.toBuffer();
	    pub_sha = hash.sha256(pub_buf);
	    addy = hash.ripemd160(pub_sha);
	    addy = Buffer.concat([new Buffer([0x38]), addy]);
	    checksum = hash.sha256(addy);
	    checksum = hash.sha256(checksum);
	    addy = Buffer.concat([addy, checksum.slice(0, 4)]);
	    return base58.encode(addy);
	  };


	  /* <HEX> */

	  PublicKey.prototype.toByteBuffer = function() {
	    var b;
	    b = new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY, ByteBuffer.LITTLE_ENDIAN);
	    this.appendByteBuffer(b);
	    return b.copy(0, b.offset);
	  };

	  PublicKey.fromHex = function(hex) {
	    return PublicKey.fromBuffer(new Buffer(hex, 'hex'));
	  };

	  PublicKey.prototype.toHex = function() {
	    return this.toBuffer().toString('hex');
	  };

	  PublicKey.fromPublicKeyStringHex = function(hex) {
	    return PublicKey.fromPublicKeyString(new Buffer(hex, 'hex'));
	  };


	  /* </HEX> */

	  return PublicKey;

	})();

	module.exports = PublicKey;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/buffer/index.js */ 2).Buffer))

/***/ },
/* 38 */
/*!****************************************!*\
  !*** ./app/dl/src/chain/config.coffee ***!
  \****************************************/
/***/ function(module, exports) {

	var _this;

	module.exports = _this = {
	  core_asset: "CORE",
	  address_prefix: "GPH",
	  expire_in_secs: 15,
	  expire_in_secs_proposal: 24 * 60 * 60,
	  networks: {
	    BitShares: {
	      core_asset: "BTS",
	      address_prefix: "BTS",
	      chain_id: "4018d7844c78f6a6c41c6a552b898022310fc5dec06da467ee7905a8dad512c8"
	    },
	    Muse: {
	      core_asset: "MUSE",
	      address_prefix: "MUSE",
	      chain_id: "45ad2d3f9ef92a49b55c2227eb06123f613bb35dd08bd876f2aea21925a67a67"
	    }
	  },
	  setChainId: function(chain_id) {
	    var i, len, network, network_name, ref;
	    ref = Object.keys(_this.networks);
	    for (i = 0, len = ref.length; i < len; i++) {
	      network_name = ref[i];
	      network = _this.networks[network_name];
	      if (network.chain_id === chain_id) {
	        _this.network_name = network_name;
	        if (network.address_prefix) {
	          _this.address_prefix = network.address_prefix;
	        }
	        console.log("Configured for", network_name, network);
	        break;
	      }
	    }
	    if (!_this.network_name) {
	      console.log("Unknown chain id", chain_id);
	    }
	  }
	};


/***/ },
/* 39 */
/*!***********************************!*\
  !*** ./app/dl/src/ecc/aes.coffee ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Aes, ByteBuffer, CryptoJS, Long, assert, hash;

	CryptoJS = __webpack_require__(/*! crypto-js */ 40);

	assert = __webpack_require__(/*! assert */ 9);

	ByteBuffer = __webpack_require__(/*! ../common/bytebuffer */ 74);

	Long = ByteBuffer.Long;

	hash = __webpack_require__(/*! ../common/hash */ 21);

	Aes = (function() {
	  function Aes(iv1, key1) {
	    this.iv = iv1;
	    this.key = key1;
	  }

	  Aes.prototype.clear = function() {
	    return this.iv = this.key = void 0;
	  };

	  Aes.fromSha512 = function(hash) {
	    var iv, key;
	    assert.equal(hash.length, 128, "A Sha512 in HEX should be 128 characters long, instead got " + hash.length);
	    iv = CryptoJS.enc.Hex.parse(hash.substring(64, 96));
	    key = CryptoJS.enc.Hex.parse(hash.substring(0, 64));
	    return new Aes(iv, key);
	  };

	  Aes.fromSeed = function(seed) {
	    var _hash;
	    if (seed === void 0) {
	      throw new Error("seed is required");
	    }
	    _hash = hash.sha512(seed);
	    _hash = _hash.toString('hex');
	    return Aes.fromSha512(_hash);
	  };

	  Aes.decrypt_with_checksum = function(private_key, public_key, nonce, message) {
	    var S, aes, checksum, new_checksum, plaintext, planebuffer;
	    if (nonce == null) {
	      nonce = "";
	    }
	    if (!Buffer.isBuffer(message)) {
	      message = new Buffer(message, 'hex');
	    }
	    S = private_key.get_shared_secret(public_key);
	    aes = Aes.fromSeed(Buffer.concat([new Buffer("" + nonce), new Buffer(S.toString('hex'))]));
	    planebuffer = aes.decrypt(message);
	    if (!(planebuffer.length >= 4)) {
	      throw new Error("Invalid key, could not decrypt message(1)");
	    }
	    checksum = planebuffer.slice(0, 4);
	    plaintext = planebuffer.slice(4);
	    new_checksum = hash.sha256(plaintext);
	    new_checksum = new_checksum.slice(0, 4);
	    new_checksum = new_checksum.toString('hex');
	    if (checksum.toString('hex') !== new_checksum) {
	      throw new Error("Invalid key, could not decrypt message(2)");
	    }
	    return plaintext;
	  };

	  Aes.encrypt_with_checksum = function(private_key, public_key, nonce, message) {
	    var S, aes, checksum, payload;
	    if (nonce == null) {
	      nonce = "";
	    }
	    if (!Buffer.isBuffer(message)) {
	      message = new Buffer(message, 'binary');
	    }
	    S = private_key.get_shared_secret(public_key);
	    aes = Aes.fromSeed(Buffer.concat([new Buffer("" + nonce), new Buffer(S.toString('hex'))]));
	    checksum = hash.sha256(message).slice(0, 4);
	    payload = Buffer.concat([checksum, message]);
	    return aes.encrypt(payload);
	  };

	  Aes.prototype._decrypt_word_array = function(cipher) {
	    return CryptoJS.AES.decrypt({
	      ciphertext: cipher,
	      salt: null
	    }, this.key, {
	      iv: this.iv
	    });
	  };

	  Aes.prototype._encrypt_word_array = function(plaintext) {
	    var cipher;
	    cipher = CryptoJS.AES.encrypt(plaintext, this.key, {
	      iv: this.iv
	    });
	    return CryptoJS.enc.Base64.parse(cipher.toString());
	  };

	  Aes.prototype.decrypt = function(cipher_buffer) {
	    var hex;
	    if (typeof cipher_buffer === "string") {
	      cipher_buffer = new Buffer(cipher_buffer, 'binary');
	    }
	    if (!Buffer.isBuffer(cipher_buffer)) {
	      throw new Error("buffer required");
	    }
	    assert(cipher_buffer, "Missing cipher text");
	    hex = this.decryptHex(cipher_buffer.toString('hex'));
	    return new Buffer(hex, 'hex');
	  };

	  Aes.prototype.encrypt = function(plaintext) {
	    var hex;
	    if (typeof plaintext === "string") {
	      plaintext = new Buffer(plaintext, 'binary');
	    }
	    if (!Buffer.isBuffer(plaintext)) {
	      throw new Error("buffer required");
	    }
	    hex = this.encryptHex(plaintext.toString('hex'));
	    return new Buffer(hex, 'hex');
	  };

	  Aes.prototype.encryptToHex = function(plaintext) {
	    if (typeof plaintext === "string") {
	      plaintext = new Buffer(plaintext, 'binary');
	    }
	    if (!Buffer.isBuffer(plaintext)) {
	      throw new Error("buffer required");
	    }
	    return this.encryptHex(plaintext.toString('hex'));
	  };

	  Aes.prototype.decryptHex = function(cipher) {
	    var cipher_array, plainwords;
	    assert(cipher, "Missing cipher text");
	    cipher_array = CryptoJS.enc.Hex.parse(cipher);
	    plainwords = this._decrypt_word_array(cipher_array);
	    return CryptoJS.enc.Hex.stringify(plainwords);
	  };

	  Aes.prototype.decryptHexToBuffer = function(cipher) {
	    var cipher_array, plainhex, plainwords;
	    assert(cipher, "Missing cipher text");
	    cipher_array = CryptoJS.enc.Hex.parse(cipher);
	    plainwords = this._decrypt_word_array(cipher_array);
	    plainhex = CryptoJS.enc.Hex.stringify(plainwords);
	    return new Buffer(plainhex, 'hex');
	  };

	  Aes.prototype.decryptHexToText = function(cipher) {
	    return this.decryptHexToBuffer(cipher).toString('binary');
	  };

	  Aes.prototype.encryptHex = function(plainhex) {
	    var cipher_array, plain_array;
	    plain_array = CryptoJS.enc.Hex.parse(plainhex);
	    cipher_array = this._encrypt_word_array(plain_array);
	    return CryptoJS.enc.Hex.stringify(cipher_array);
	  };

	  return Aes;

	})();

	module.exports = Aes;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/buffer/index.js */ 2).Buffer))

/***/ },
/* 40 */
/*!*************************************!*\
  !*** ./app/dl/~/crypto-js/index.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./x64-core */ 42), __webpack_require__(/*! ./lib-typedarrays */ 43), __webpack_require__(/*! ./enc-utf16 */ 44), __webpack_require__(/*! ./enc-base64 */ 45), __webpack_require__(/*! ./md5 */ 46), __webpack_require__(/*! ./sha1 */ 47), __webpack_require__(/*! ./sha256 */ 48), __webpack_require__(/*! ./sha224 */ 49), __webpack_require__(/*! ./sha512 */ 50), __webpack_require__(/*! ./sha384 */ 51), __webpack_require__(/*! ./sha3 */ 52), __webpack_require__(/*! ./ripemd160 */ 53), __webpack_require__(/*! ./hmac */ 54), __webpack_require__(/*! ./pbkdf2 */ 55), __webpack_require__(/*! ./evpkdf */ 56), __webpack_require__(/*! ./cipher-core */ 57), __webpack_require__(/*! ./mode-cfb */ 58), __webpack_require__(/*! ./mode-ctr */ 59), __webpack_require__(/*! ./mode-ctr-gladman */ 60), __webpack_require__(/*! ./mode-ofb */ 61), __webpack_require__(/*! ./mode-ecb */ 62), __webpack_require__(/*! ./pad-ansix923 */ 63), __webpack_require__(/*! ./pad-iso10126 */ 64), __webpack_require__(/*! ./pad-iso97971 */ 65), __webpack_require__(/*! ./pad-zeropadding */ 66), __webpack_require__(/*! ./pad-nopadding */ 67), __webpack_require__(/*! ./format-hex */ 68), __webpack_require__(/*! ./aes */ 69), __webpack_require__(/*! ./tripledes */ 70), __webpack_require__(/*! ./rc4 */ 71), __webpack_require__(/*! ./rabbit */ 72), __webpack_require__(/*! ./rabbit-legacy */ 73));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		return CryptoJS;

	}));

/***/ },
/* 41 */
/*!************************************!*\
  !*** ./app/dl/~/crypto-js/core.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory();
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define([], factory);
		}
		else {
			// Global (browser)
			root.CryptoJS = factory();
		}
	}(this, function () {

		/**
		 * CryptoJS core components.
		 */
		var CryptoJS = CryptoJS || (function (Math, undefined) {
		    /**
		     * CryptoJS namespace.
		     */
		    var C = {};

		    /**
		     * Library namespace.
		     */
		    var C_lib = C.lib = {};

		    /**
		     * Base object for prototypal inheritance.
		     */
		    var Base = C_lib.Base = (function () {
		        function F() {}

		        return {
		            /**
		             * Creates a new object that inherits from this object.
		             *
		             * @param {Object} overrides Properties to copy into the new object.
		             *
		             * @return {Object} The new object.
		             *
		             * @static
		             *
		             * @example
		             *
		             *     var MyType = CryptoJS.lib.Base.extend({
		             *         field: 'value',
		             *
		             *         method: function () {
		             *         }
		             *     });
		             */
		            extend: function (overrides) {
		                // Spawn
		                F.prototype = this;
		                var subtype = new F();

		                // Augment
		                if (overrides) {
		                    subtype.mixIn(overrides);
		                }

		                // Create default initializer
		                if (!subtype.hasOwnProperty('init')) {
		                    subtype.init = function () {
		                        subtype.$super.init.apply(this, arguments);
		                    };
		                }

		                // Initializer's prototype is the subtype object
		                subtype.init.prototype = subtype;

		                // Reference supertype
		                subtype.$super = this;

		                return subtype;
		            },

		            /**
		             * Extends this object and runs the init method.
		             * Arguments to create() will be passed to init().
		             *
		             * @return {Object} The new object.
		             *
		             * @static
		             *
		             * @example
		             *
		             *     var instance = MyType.create();
		             */
		            create: function () {
		                var instance = this.extend();
		                instance.init.apply(instance, arguments);

		                return instance;
		            },

		            /**
		             * Initializes a newly created object.
		             * Override this method to add some logic when your objects are created.
		             *
		             * @example
		             *
		             *     var MyType = CryptoJS.lib.Base.extend({
		             *         init: function () {
		             *             // ...
		             *         }
		             *     });
		             */
		            init: function () {
		            },

		            /**
		             * Copies properties into this object.
		             *
		             * @param {Object} properties The properties to mix in.
		             *
		             * @example
		             *
		             *     MyType.mixIn({
		             *         field: 'value'
		             *     });
		             */
		            mixIn: function (properties) {
		                for (var propertyName in properties) {
		                    if (properties.hasOwnProperty(propertyName)) {
		                        this[propertyName] = properties[propertyName];
		                    }
		                }

		                // IE won't copy toString using the loop above
		                if (properties.hasOwnProperty('toString')) {
		                    this.toString = properties.toString;
		                }
		            },

		            /**
		             * Creates a copy of this object.
		             *
		             * @return {Object} The clone.
		             *
		             * @example
		             *
		             *     var clone = instance.clone();
		             */
		            clone: function () {
		                return this.init.prototype.extend(this);
		            }
		        };
		    }());

		    /**
		     * An array of 32-bit words.
		     *
		     * @property {Array} words The array of 32-bit words.
		     * @property {number} sigBytes The number of significant bytes in this word array.
		     */
		    var WordArray = C_lib.WordArray = Base.extend({
		        /**
		         * Initializes a newly created word array.
		         *
		         * @param {Array} words (Optional) An array of 32-bit words.
		         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.lib.WordArray.create();
		         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
		         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
		         */
		        init: function (words, sigBytes) {
		            words = this.words = words || [];

		            if (sigBytes != undefined) {
		                this.sigBytes = sigBytes;
		            } else {
		                this.sigBytes = words.length * 4;
		            }
		        },

		        /**
		         * Converts this word array to a string.
		         *
		         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
		         *
		         * @return {string} The stringified word array.
		         *
		         * @example
		         *
		         *     var string = wordArray + '';
		         *     var string = wordArray.toString();
		         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
		         */
		        toString: function (encoder) {
		            return (encoder || Hex).stringify(this);
		        },

		        /**
		         * Concatenates a word array to this word array.
		         *
		         * @param {WordArray} wordArray The word array to append.
		         *
		         * @return {WordArray} This word array.
		         *
		         * @example
		         *
		         *     wordArray1.concat(wordArray2);
		         */
		        concat: function (wordArray) {
		            // Shortcuts
		            var thisWords = this.words;
		            var thatWords = wordArray.words;
		            var thisSigBytes = this.sigBytes;
		            var thatSigBytes = wordArray.sigBytes;

		            // Clamp excess bits
		            this.clamp();

		            // Concat
		            if (thisSigBytes % 4) {
		                // Copy one byte at a time
		                for (var i = 0; i < thatSigBytes; i++) {
		                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
		                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
		                }
		            } else if (thatWords.length > 0xffff) {
		                // Copy one word at a time
		                for (var i = 0; i < thatSigBytes; i += 4) {
		                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
		                }
		            } else {
		                // Copy all words at once
		                thisWords.push.apply(thisWords, thatWords);
		            }
		            this.sigBytes += thatSigBytes;

		            // Chainable
		            return this;
		        },

		        /**
		         * Removes insignificant bits.
		         *
		         * @example
		         *
		         *     wordArray.clamp();
		         */
		        clamp: function () {
		            // Shortcuts
		            var words = this.words;
		            var sigBytes = this.sigBytes;

		            // Clamp
		            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
		            words.length = Math.ceil(sigBytes / 4);
		        },

		        /**
		         * Creates a copy of this word array.
		         *
		         * @return {WordArray} The clone.
		         *
		         * @example
		         *
		         *     var clone = wordArray.clone();
		         */
		        clone: function () {
		            var clone = Base.clone.call(this);
		            clone.words = this.words.slice(0);

		            return clone;
		        },

		        /**
		         * Creates a word array filled with random bytes.
		         *
		         * @param {number} nBytes The number of random bytes to generate.
		         *
		         * @return {WordArray} The random word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.lib.WordArray.random(16);
		         */
		        random: function (nBytes) {
		            var words = [];
		            for (var i = 0; i < nBytes; i += 4) {
		                words.push((Math.random() * 0x100000000) | 0);
		            }

		            return new WordArray.init(words, nBytes);
		        }
		    });

		    /**
		     * Encoder namespace.
		     */
		    var C_enc = C.enc = {};

		    /**
		     * Hex encoding strategy.
		     */
		    var Hex = C_enc.Hex = {
		        /**
		         * Converts a word array to a hex string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The hex string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var hexChars = [];
		            for (var i = 0; i < sigBytes; i++) {
		                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
		                hexChars.push((bite >>> 4).toString(16));
		                hexChars.push((bite & 0x0f).toString(16));
		            }

		            return hexChars.join('');
		        },

		        /**
		         * Converts a hex string to a word array.
		         *
		         * @param {string} hexStr The hex string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
		         */
		        parse: function (hexStr) {
		            // Shortcut
		            var hexStrLength = hexStr.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < hexStrLength; i += 2) {
		                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
		            }

		            return new WordArray.init(words, hexStrLength / 2);
		        }
		    };

		    /**
		     * Latin1 encoding strategy.
		     */
		    var Latin1 = C_enc.Latin1 = {
		        /**
		         * Converts a word array to a Latin1 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The Latin1 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var latin1Chars = [];
		            for (var i = 0; i < sigBytes; i++) {
		                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
		                latin1Chars.push(String.fromCharCode(bite));
		            }

		            return latin1Chars.join('');
		        },

		        /**
		         * Converts a Latin1 string to a word array.
		         *
		         * @param {string} latin1Str The Latin1 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
		         */
		        parse: function (latin1Str) {
		            // Shortcut
		            var latin1StrLength = latin1Str.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < latin1StrLength; i++) {
		                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
		            }

		            return new WordArray.init(words, latin1StrLength);
		        }
		    };

		    /**
		     * UTF-8 encoding strategy.
		     */
		    var Utf8 = C_enc.Utf8 = {
		        /**
		         * Converts a word array to a UTF-8 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The UTF-8 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            try {
		                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
		            } catch (e) {
		                throw new Error('Malformed UTF-8 data');
		            }
		        },

		        /**
		         * Converts a UTF-8 string to a word array.
		         *
		         * @param {string} utf8Str The UTF-8 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
		         */
		        parse: function (utf8Str) {
		            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
		        }
		    };

		    /**
		     * Abstract buffered block algorithm template.
		     *
		     * The property blockSize must be implemented in a concrete subtype.
		     *
		     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
		     */
		    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
		        /**
		         * Resets this block algorithm's data buffer to its initial state.
		         *
		         * @example
		         *
		         *     bufferedBlockAlgorithm.reset();
		         */
		        reset: function () {
		            // Initial values
		            this._data = new WordArray.init();
		            this._nDataBytes = 0;
		        },

		        /**
		         * Adds new data to this block algorithm's buffer.
		         *
		         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
		         *
		         * @example
		         *
		         *     bufferedBlockAlgorithm._append('data');
		         *     bufferedBlockAlgorithm._append(wordArray);
		         */
		        _append: function (data) {
		            // Convert string to WordArray, else assume WordArray already
		            if (typeof data == 'string') {
		                data = Utf8.parse(data);
		            }

		            // Append
		            this._data.concat(data);
		            this._nDataBytes += data.sigBytes;
		        },

		        /**
		         * Processes available data blocks.
		         *
		         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
		         *
		         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
		         *
		         * @return {WordArray} The processed data.
		         *
		         * @example
		         *
		         *     var processedData = bufferedBlockAlgorithm._process();
		         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
		         */
		        _process: function (doFlush) {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;
		            var dataSigBytes = data.sigBytes;
		            var blockSize = this.blockSize;
		            var blockSizeBytes = blockSize * 4;

		            // Count blocks ready
		            var nBlocksReady = dataSigBytes / blockSizeBytes;
		            if (doFlush) {
		                // Round up to include partial blocks
		                nBlocksReady = Math.ceil(nBlocksReady);
		            } else {
		                // Round down to include only full blocks,
		                // less the number of blocks that must remain in the buffer
		                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
		            }

		            // Count words ready
		            var nWordsReady = nBlocksReady * blockSize;

		            // Count bytes ready
		            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

		            // Process blocks
		            if (nWordsReady) {
		                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
		                    // Perform concrete-algorithm logic
		                    this._doProcessBlock(dataWords, offset);
		                }

		                // Remove processed words
		                var processedWords = dataWords.splice(0, nWordsReady);
		                data.sigBytes -= nBytesReady;
		            }

		            // Return processed words
		            return new WordArray.init(processedWords, nBytesReady);
		        },

		        /**
		         * Creates a copy of this object.
		         *
		         * @return {Object} The clone.
		         *
		         * @example
		         *
		         *     var clone = bufferedBlockAlgorithm.clone();
		         */
		        clone: function () {
		            var clone = Base.clone.call(this);
		            clone._data = this._data.clone();

		            return clone;
		        },

		        _minBufferSize: 0
		    });

		    /**
		     * Abstract hasher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
		     */
		    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
		        /**
		         * Configuration options.
		         */
		        cfg: Base.extend(),

		        /**
		         * Initializes a newly created hasher.
		         *
		         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
		         *
		         * @example
		         *
		         *     var hasher = CryptoJS.algo.SHA256.create();
		         */
		        init: function (cfg) {
		            // Apply config defaults
		            this.cfg = this.cfg.extend(cfg);

		            // Set initial values
		            this.reset();
		        },

		        /**
		         * Resets this hasher to its initial state.
		         *
		         * @example
		         *
		         *     hasher.reset();
		         */
		        reset: function () {
		            // Reset data buffer
		            BufferedBlockAlgorithm.reset.call(this);

		            // Perform concrete-hasher logic
		            this._doReset();
		        },

		        /**
		         * Updates this hasher with a message.
		         *
		         * @param {WordArray|string} messageUpdate The message to append.
		         *
		         * @return {Hasher} This hasher.
		         *
		         * @example
		         *
		         *     hasher.update('message');
		         *     hasher.update(wordArray);
		         */
		        update: function (messageUpdate) {
		            // Append
		            this._append(messageUpdate);

		            // Update the hash
		            this._process();

		            // Chainable
		            return this;
		        },

		        /**
		         * Finalizes the hash computation.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} messageUpdate (Optional) A final message update.
		         *
		         * @return {WordArray} The hash.
		         *
		         * @example
		         *
		         *     var hash = hasher.finalize();
		         *     var hash = hasher.finalize('message');
		         *     var hash = hasher.finalize(wordArray);
		         */
		        finalize: function (messageUpdate) {
		            // Final message update
		            if (messageUpdate) {
		                this._append(messageUpdate);
		            }

		            // Perform concrete-hasher logic
		            var hash = this._doFinalize();

		            return hash;
		        },

		        blockSize: 512/32,

		        /**
		         * Creates a shortcut function to a hasher's object interface.
		         *
		         * @param {Hasher} hasher The hasher to create a helper for.
		         *
		         * @return {Function} The shortcut function.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
		         */
		        _createHelper: function (hasher) {
		            return function (message, cfg) {
		                return new hasher.init(cfg).finalize(message);
		            };
		        },

		        /**
		         * Creates a shortcut function to the HMAC's object interface.
		         *
		         * @param {Hasher} hasher The hasher to use in this HMAC helper.
		         *
		         * @return {Function} The shortcut function.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
		         */
		        _createHmacHelper: function (hasher) {
		            return function (message, key) {
		                return new C_algo.HMAC.init(hasher, key).finalize(message);
		            };
		        }
		    });

		    /**
		     * Algorithm namespace.
		     */
		    var C_algo = C.algo = {};

		    return C;
		}(Math));


		return CryptoJS;

	}));

/***/ },
/* 42 */
/*!****************************************!*\
  !*** ./app/dl/~/crypto-js/x64-core.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function (undefined) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var X32WordArray = C_lib.WordArray;

		    /**
		     * x64 namespace.
		     */
		    var C_x64 = C.x64 = {};

		    /**
		     * A 64-bit word.
		     */
		    var X64Word = C_x64.Word = Base.extend({
		        /**
		         * Initializes a newly created 64-bit word.
		         *
		         * @param {number} high The high 32 bits.
		         * @param {number} low The low 32 bits.
		         *
		         * @example
		         *
		         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
		         */
		        init: function (high, low) {
		            this.high = high;
		            this.low = low;
		        }

		        /**
		         * Bitwise NOTs this word.
		         *
		         * @return {X64Word} A new x64-Word object after negating.
		         *
		         * @example
		         *
		         *     var negated = x64Word.not();
		         */
		        // not: function () {
		            // var high = ~this.high;
		            // var low = ~this.low;

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Bitwise ANDs this word with the passed word.
		         *
		         * @param {X64Word} word The x64-Word to AND with this word.
		         *
		         * @return {X64Word} A new x64-Word object after ANDing.
		         *
		         * @example
		         *
		         *     var anded = x64Word.and(anotherX64Word);
		         */
		        // and: function (word) {
		            // var high = this.high & word.high;
		            // var low = this.low & word.low;

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Bitwise ORs this word with the passed word.
		         *
		         * @param {X64Word} word The x64-Word to OR with this word.
		         *
		         * @return {X64Word} A new x64-Word object after ORing.
		         *
		         * @example
		         *
		         *     var ored = x64Word.or(anotherX64Word);
		         */
		        // or: function (word) {
		            // var high = this.high | word.high;
		            // var low = this.low | word.low;

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Bitwise XORs this word with the passed word.
		         *
		         * @param {X64Word} word The x64-Word to XOR with this word.
		         *
		         * @return {X64Word} A new x64-Word object after XORing.
		         *
		         * @example
		         *
		         *     var xored = x64Word.xor(anotherX64Word);
		         */
		        // xor: function (word) {
		            // var high = this.high ^ word.high;
		            // var low = this.low ^ word.low;

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Shifts this word n bits to the left.
		         *
		         * @param {number} n The number of bits to shift.
		         *
		         * @return {X64Word} A new x64-Word object after shifting.
		         *
		         * @example
		         *
		         *     var shifted = x64Word.shiftL(25);
		         */
		        // shiftL: function (n) {
		            // if (n < 32) {
		                // var high = (this.high << n) | (this.low >>> (32 - n));
		                // var low = this.low << n;
		            // } else {
		                // var high = this.low << (n - 32);
		                // var low = 0;
		            // }

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Shifts this word n bits to the right.
		         *
		         * @param {number} n The number of bits to shift.
		         *
		         * @return {X64Word} A new x64-Word object after shifting.
		         *
		         * @example
		         *
		         *     var shifted = x64Word.shiftR(7);
		         */
		        // shiftR: function (n) {
		            // if (n < 32) {
		                // var low = (this.low >>> n) | (this.high << (32 - n));
		                // var high = this.high >>> n;
		            // } else {
		                // var low = this.high >>> (n - 32);
		                // var high = 0;
		            // }

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Rotates this word n bits to the left.
		         *
		         * @param {number} n The number of bits to rotate.
		         *
		         * @return {X64Word} A new x64-Word object after rotating.
		         *
		         * @example
		         *
		         *     var rotated = x64Word.rotL(25);
		         */
		        // rotL: function (n) {
		            // return this.shiftL(n).or(this.shiftR(64 - n));
		        // },

		        /**
		         * Rotates this word n bits to the right.
		         *
		         * @param {number} n The number of bits to rotate.
		         *
		         * @return {X64Word} A new x64-Word object after rotating.
		         *
		         * @example
		         *
		         *     var rotated = x64Word.rotR(7);
		         */
		        // rotR: function (n) {
		            // return this.shiftR(n).or(this.shiftL(64 - n));
		        // },

		        /**
		         * Adds this word with the passed word.
		         *
		         * @param {X64Word} word The x64-Word to add with this word.
		         *
		         * @return {X64Word} A new x64-Word object after adding.
		         *
		         * @example
		         *
		         *     var added = x64Word.add(anotherX64Word);
		         */
		        // add: function (word) {
		            // var low = (this.low + word.low) | 0;
		            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
		            // var high = (this.high + word.high + carry) | 0;

		            // return X64Word.create(high, low);
		        // }
		    });

		    /**
		     * An array of 64-bit words.
		     *
		     * @property {Array} words The array of CryptoJS.x64.Word objects.
		     * @property {number} sigBytes The number of significant bytes in this word array.
		     */
		    var X64WordArray = C_x64.WordArray = Base.extend({
		        /**
		         * Initializes a newly created word array.
		         *
		         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
		         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.x64.WordArray.create();
		         *
		         *     var wordArray = CryptoJS.x64.WordArray.create([
		         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
		         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
		         *     ]);
		         *
		         *     var wordArray = CryptoJS.x64.WordArray.create([
		         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
		         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
		         *     ], 10);
		         */
		        init: function (words, sigBytes) {
		            words = this.words = words || [];

		            if (sigBytes != undefined) {
		                this.sigBytes = sigBytes;
		            } else {
		                this.sigBytes = words.length * 8;
		            }
		        },

		        /**
		         * Converts this 64-bit word array to a 32-bit word array.
		         *
		         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
		         *
		         * @example
		         *
		         *     var x32WordArray = x64WordArray.toX32();
		         */
		        toX32: function () {
		            // Shortcuts
		            var x64Words = this.words;
		            var x64WordsLength = x64Words.length;

		            // Convert
		            var x32Words = [];
		            for (var i = 0; i < x64WordsLength; i++) {
		                var x64Word = x64Words[i];
		                x32Words.push(x64Word.high);
		                x32Words.push(x64Word.low);
		            }

		            return X32WordArray.create(x32Words, this.sigBytes);
		        },

		        /**
		         * Creates a copy of this word array.
		         *
		         * @return {X64WordArray} The clone.
		         *
		         * @example
		         *
		         *     var clone = x64WordArray.clone();
		         */
		        clone: function () {
		            var clone = Base.clone.call(this);

		            // Clone "words" array
		            var words = clone.words = this.words.slice(0);

		            // Clone each X64Word object
		            var wordsLength = words.length;
		            for (var i = 0; i < wordsLength; i++) {
		                words[i] = words[i].clone();
		            }

		            return clone;
		        }
		    });
		}());


		return CryptoJS;

	}));

/***/ },
/* 43 */
/*!***********************************************!*\
  !*** ./app/dl/~/crypto-js/lib-typedarrays.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Check if typed arrays are supported
		    if (typeof ArrayBuffer != 'function') {
		        return;
		    }

		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;

		    // Reference original init
		    var superInit = WordArray.init;

		    // Augment WordArray.init to handle typed arrays
		    var subInit = WordArray.init = function (typedArray) {
		        // Convert buffers to uint8
		        if (typedArray instanceof ArrayBuffer) {
		            typedArray = new Uint8Array(typedArray);
		        }

		        // Convert other array views to uint8
		        if (
		            typedArray instanceof Int8Array ||
		            typedArray instanceof Uint8ClampedArray ||
		            typedArray instanceof Int16Array ||
		            typedArray instanceof Uint16Array ||
		            typedArray instanceof Int32Array ||
		            typedArray instanceof Uint32Array ||
		            typedArray instanceof Float32Array ||
		            typedArray instanceof Float64Array
		        ) {
		            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
		        }

		        // Handle Uint8Array
		        if (typedArray instanceof Uint8Array) {
		            // Shortcut
		            var typedArrayByteLength = typedArray.byteLength;

		            // Extract bytes
		            var words = [];
		            for (var i = 0; i < typedArrayByteLength; i++) {
		                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
		            }

		            // Initialize this word array
		            superInit.call(this, words, typedArrayByteLength);
		        } else {
		            // Else call normal init
		            superInit.apply(this, arguments);
		        }
		    };

		    subInit.prototype = WordArray;
		}());


		return CryptoJS.lib.WordArray;

	}));

/***/ },
/* 44 */
/*!*****************************************!*\
  !*** ./app/dl/~/crypto-js/enc-utf16.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var C_enc = C.enc;

		    /**
		     * UTF-16 BE encoding strategy.
		     */
		    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
		        /**
		         * Converts a word array to a UTF-16 BE string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The UTF-16 BE string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var utf16Chars = [];
		            for (var i = 0; i < sigBytes; i += 2) {
		                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
		                utf16Chars.push(String.fromCharCode(codePoint));
		            }

		            return utf16Chars.join('');
		        },

		        /**
		         * Converts a UTF-16 BE string to a word array.
		         *
		         * @param {string} utf16Str The UTF-16 BE string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
		         */
		        parse: function (utf16Str) {
		            // Shortcut
		            var utf16StrLength = utf16Str.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < utf16StrLength; i++) {
		                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
		            }

		            return WordArray.create(words, utf16StrLength * 2);
		        }
		    };

		    /**
		     * UTF-16 LE encoding strategy.
		     */
		    C_enc.Utf16LE = {
		        /**
		         * Converts a word array to a UTF-16 LE string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The UTF-16 LE string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var utf16Chars = [];
		            for (var i = 0; i < sigBytes; i += 2) {
		                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
		                utf16Chars.push(String.fromCharCode(codePoint));
		            }

		            return utf16Chars.join('');
		        },

		        /**
		         * Converts a UTF-16 LE string to a word array.
		         *
		         * @param {string} utf16Str The UTF-16 LE string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
		         */
		        parse: function (utf16Str) {
		            // Shortcut
		            var utf16StrLength = utf16Str.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < utf16StrLength; i++) {
		                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
		            }

		            return WordArray.create(words, utf16StrLength * 2);
		        }
		    };

		    function swapEndian(word) {
		        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
		    }
		}());


		return CryptoJS.enc.Utf16;

	}));

/***/ },
/* 45 */
/*!******************************************!*\
  !*** ./app/dl/~/crypto-js/enc-base64.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var C_enc = C.enc;

		    /**
		     * Base64 encoding strategy.
		     */
		    var Base64 = C_enc.Base64 = {
		        /**
		         * Converts a word array to a Base64 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The Base64 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;
		            var map = this._map;

		            // Clamp excess bits
		            wordArray.clamp();

		            // Convert
		            var base64Chars = [];
		            for (var i = 0; i < sigBytes; i += 3) {
		                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
		                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
		                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

		                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

		                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
		                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
		                }
		            }

		            // Add padding
		            var paddingChar = map.charAt(64);
		            if (paddingChar) {
		                while (base64Chars.length % 4) {
		                    base64Chars.push(paddingChar);
		                }
		            }

		            return base64Chars.join('');
		        },

		        /**
		         * Converts a Base64 string to a word array.
		         *
		         * @param {string} base64Str The Base64 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
		         */
		        parse: function (base64Str) {
		            // Shortcuts
		            var base64StrLength = base64Str.length;
		            var map = this._map;

		            // Ignore padding
		            var paddingChar = map.charAt(64);
		            if (paddingChar) {
		                var paddingIndex = base64Str.indexOf(paddingChar);
		                if (paddingIndex != -1) {
		                    base64StrLength = paddingIndex;
		                }
		            }

		            // Convert
		            var words = [];
		            var nBytes = 0;
		            for (var i = 0; i < base64StrLength; i++) {
		                if (i % 4) {
		                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);
		                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);
		                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);
		                    nBytes++;
		                }
		            }

		            return WordArray.create(words, nBytes);
		        },

		        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
		    };
		}());


		return CryptoJS.enc.Base64;

	}));

/***/ },
/* 46 */
/*!***********************************!*\
  !*** ./app/dl/~/crypto-js/md5.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Constants table
		    var T = [];

		    // Compute constants
		    (function () {
		        for (var i = 0; i < 64; i++) {
		            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
		        }
		    }());

		    /**
		     * MD5 hash algorithm.
		     */
		    var MD5 = C_algo.MD5 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init([
		                0x67452301, 0xefcdab89,
		                0x98badcfe, 0x10325476
		            ]);
		        },

		        _doProcessBlock: function (M, offset) {
		            // Swap endian
		            for (var i = 0; i < 16; i++) {
		                // Shortcuts
		                var offset_i = offset + i;
		                var M_offset_i = M[offset_i];

		                M[offset_i] = (
		                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
		                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
		                );
		            }

		            // Shortcuts
		            var H = this._hash.words;

		            var M_offset_0  = M[offset + 0];
		            var M_offset_1  = M[offset + 1];
		            var M_offset_2  = M[offset + 2];
		            var M_offset_3  = M[offset + 3];
		            var M_offset_4  = M[offset + 4];
		            var M_offset_5  = M[offset + 5];
		            var M_offset_6  = M[offset + 6];
		            var M_offset_7  = M[offset + 7];
		            var M_offset_8  = M[offset + 8];
		            var M_offset_9  = M[offset + 9];
		            var M_offset_10 = M[offset + 10];
		            var M_offset_11 = M[offset + 11];
		            var M_offset_12 = M[offset + 12];
		            var M_offset_13 = M[offset + 13];
		            var M_offset_14 = M[offset + 14];
		            var M_offset_15 = M[offset + 15];

		            // Working varialbes
		            var a = H[0];
		            var b = H[1];
		            var c = H[2];
		            var d = H[3];

		            // Computation
		            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
		            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
		            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
		            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
		            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
		            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
		            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
		            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
		            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
		            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
		            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
		            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
		            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
		            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
		            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
		            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

		            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
		            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
		            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
		            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
		            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
		            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
		            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
		            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
		            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
		            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
		            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
		            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
		            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
		            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
		            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
		            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

		            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
		            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
		            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
		            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
		            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
		            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
		            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
		            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
		            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
		            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
		            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
		            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
		            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
		            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
		            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
		            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

		            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
		            d = II(d, a, b, c, M_offset_7,  10, T[49]);
		            c = II(c, d, a, b, M_offset_14, 15, T[50]);
		            b = II(b, c, d, a, M_offset_5,  21, T[51]);
		            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
		            d = II(d, a, b, c, M_offset_3,  10, T[53]);
		            c = II(c, d, a, b, M_offset_10, 15, T[54]);
		            b = II(b, c, d, a, M_offset_1,  21, T[55]);
		            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
		            d = II(d, a, b, c, M_offset_15, 10, T[57]);
		            c = II(c, d, a, b, M_offset_6,  15, T[58]);
		            b = II(b, c, d, a, M_offset_13, 21, T[59]);
		            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
		            d = II(d, a, b, c, M_offset_11, 10, T[61]);
		            c = II(c, d, a, b, M_offset_2,  15, T[62]);
		            b = II(b, c, d, a, M_offset_9,  21, T[63]);

		            // Intermediate hash value
		            H[0] = (H[0] + a) | 0;
		            H[1] = (H[1] + b) | 0;
		            H[2] = (H[2] + c) | 0;
		            H[3] = (H[3] + d) | 0;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

		            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
		            var nBitsTotalL = nBitsTotal;
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
		                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
		                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
		            );
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
		                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
		                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
		            );

		            data.sigBytes = (dataWords.length + 1) * 4;

		            // Hash final blocks
		            this._process();

		            // Shortcuts
		            var hash = this._hash;
		            var H = hash.words;

		            // Swap endian
		            for (var i = 0; i < 4; i++) {
		                // Shortcut
		                var H_i = H[i];

		                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
		                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
		            }

		            // Return final computed hash
		            return hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });

		    function FF(a, b, c, d, x, s, t) {
		        var n = a + ((b & c) | (~b & d)) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    function GG(a, b, c, d, x, s, t) {
		        var n = a + ((b & d) | (c & ~d)) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    function HH(a, b, c, d, x, s, t) {
		        var n = a + (b ^ c ^ d) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    function II(a, b, c, d, x, s, t) {
		        var n = a + (c ^ (b | ~d)) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.MD5('message');
		     *     var hash = CryptoJS.MD5(wordArray);
		     */
		    C.MD5 = Hasher._createHelper(MD5);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacMD5(message, key);
		     */
		    C.HmacMD5 = Hasher._createHmacHelper(MD5);
		}(Math));


		return CryptoJS.MD5;

	}));

/***/ },
/* 47 */
/*!************************************!*\
  !*** ./app/dl/~/crypto-js/sha1.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Reusable object
		    var W = [];

		    /**
		     * SHA-1 hash algorithm.
		     */
		    var SHA1 = C_algo.SHA1 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init([
		                0x67452301, 0xefcdab89,
		                0x98badcfe, 0x10325476,
		                0xc3d2e1f0
		            ]);
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcut
		            var H = this._hash.words;

		            // Working variables
		            var a = H[0];
		            var b = H[1];
		            var c = H[2];
		            var d = H[3];
		            var e = H[4];

		            // Computation
		            for (var i = 0; i < 80; i++) {
		                if (i < 16) {
		                    W[i] = M[offset + i] | 0;
		                } else {
		                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
		                    W[i] = (n << 1) | (n >>> 31);
		                }

		                var t = ((a << 5) | (a >>> 27)) + e + W[i];
		                if (i < 20) {
		                    t += ((b & c) | (~b & d)) + 0x5a827999;
		                } else if (i < 40) {
		                    t += (b ^ c ^ d) + 0x6ed9eba1;
		                } else if (i < 60) {
		                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
		                } else /* if (i < 80) */ {
		                    t += (b ^ c ^ d) - 0x359d3e2a;
		                }

		                e = d;
		                d = c;
		                c = (b << 30) | (b >>> 2);
		                b = a;
		                a = t;
		            }

		            // Intermediate hash value
		            H[0] = (H[0] + a) | 0;
		            H[1] = (H[1] + b) | 0;
		            H[2] = (H[2] + c) | 0;
		            H[3] = (H[3] + d) | 0;
		            H[4] = (H[4] + e) | 0;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
		            data.sigBytes = dataWords.length * 4;

		            // Hash final blocks
		            this._process();

		            // Return final computed hash
		            return this._hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA1('message');
		     *     var hash = CryptoJS.SHA1(wordArray);
		     */
		    C.SHA1 = Hasher._createHelper(SHA1);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA1(message, key);
		     */
		    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
		}());


		return CryptoJS.SHA1;

	}));

/***/ },
/* 48 */
/*!**************************************!*\
  !*** ./app/dl/~/crypto-js/sha256.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Initialization and round constants tables
		    var H = [];
		    var K = [];

		    // Compute constants
		    (function () {
		        function isPrime(n) {
		            var sqrtN = Math.sqrt(n);
		            for (var factor = 2; factor <= sqrtN; factor++) {
		                if (!(n % factor)) {
		                    return false;
		                }
		            }

		            return true;
		        }

		        function getFractionalBits(n) {
		            return ((n - (n | 0)) * 0x100000000) | 0;
		        }

		        var n = 2;
		        var nPrime = 0;
		        while (nPrime < 64) {
		            if (isPrime(n)) {
		                if (nPrime < 8) {
		                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
		                }
		                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

		                nPrime++;
		            }

		            n++;
		        }
		    }());

		    // Reusable object
		    var W = [];

		    /**
		     * SHA-256 hash algorithm.
		     */
		    var SHA256 = C_algo.SHA256 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init(H.slice(0));
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcut
		            var H = this._hash.words;

		            // Working variables
		            var a = H[0];
		            var b = H[1];
		            var c = H[2];
		            var d = H[3];
		            var e = H[4];
		            var f = H[5];
		            var g = H[6];
		            var h = H[7];

		            // Computation
		            for (var i = 0; i < 64; i++) {
		                if (i < 16) {
		                    W[i] = M[offset + i] | 0;
		                } else {
		                    var gamma0x = W[i - 15];
		                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
		                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
		                                   (gamma0x >>> 3);

		                    var gamma1x = W[i - 2];
		                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
		                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
		                                   (gamma1x >>> 10);

		                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
		                }

		                var ch  = (e & f) ^ (~e & g);
		                var maj = (a & b) ^ (a & c) ^ (b & c);

		                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
		                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

		                var t1 = h + sigma1 + ch + K[i] + W[i];
		                var t2 = sigma0 + maj;

		                h = g;
		                g = f;
		                f = e;
		                e = (d + t1) | 0;
		                d = c;
		                c = b;
		                b = a;
		                a = (t1 + t2) | 0;
		            }

		            // Intermediate hash value
		            H[0] = (H[0] + a) | 0;
		            H[1] = (H[1] + b) | 0;
		            H[2] = (H[2] + c) | 0;
		            H[3] = (H[3] + d) | 0;
		            H[4] = (H[4] + e) | 0;
		            H[5] = (H[5] + f) | 0;
		            H[6] = (H[6] + g) | 0;
		            H[7] = (H[7] + h) | 0;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
		            data.sigBytes = dataWords.length * 4;

		            // Hash final blocks
		            this._process();

		            // Return final computed hash
		            return this._hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA256('message');
		     *     var hash = CryptoJS.SHA256(wordArray);
		     */
		    C.SHA256 = Hasher._createHelper(SHA256);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA256(message, key);
		     */
		    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
		}(Math));


		return CryptoJS.SHA256;

	}));

/***/ },
/* 49 */
/*!**************************************!*\
  !*** ./app/dl/~/crypto-js/sha224.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./sha256 */ 48));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./sha256"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var C_algo = C.algo;
		    var SHA256 = C_algo.SHA256;

		    /**
		     * SHA-224 hash algorithm.
		     */
		    var SHA224 = C_algo.SHA224 = SHA256.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init([
		                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
		                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
		            ]);
		        },

		        _doFinalize: function () {
		            var hash = SHA256._doFinalize.call(this);

		            hash.sigBytes -= 4;

		            return hash;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA224('message');
		     *     var hash = CryptoJS.SHA224(wordArray);
		     */
		    C.SHA224 = SHA256._createHelper(SHA224);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA224(message, key);
		     */
		    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
		}());


		return CryptoJS.SHA224;

	}));

/***/ },
/* 50 */
/*!**************************************!*\
  !*** ./app/dl/~/crypto-js/sha512.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./x64-core */ 42));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./x64-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Hasher = C_lib.Hasher;
		    var C_x64 = C.x64;
		    var X64Word = C_x64.Word;
		    var X64WordArray = C_x64.WordArray;
		    var C_algo = C.algo;

		    function X64Word_create() {
		        return X64Word.create.apply(X64Word, arguments);
		    }

		    // Constants
		    var K = [
		        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
		        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
		        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
		        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
		        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
		        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
		        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
		        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
		        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
		        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
		        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
		        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
		        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
		        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
		        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
		        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
		        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
		        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
		        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
		        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
		        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
		        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
		        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
		        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
		        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
		        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
		        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
		        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
		        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
		        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
		        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
		        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
		        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
		        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
		        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
		        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
		        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
		        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
		        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
		        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
		    ];

		    // Reusable objects
		    var W = [];
		    (function () {
		        for (var i = 0; i < 80; i++) {
		            W[i] = X64Word_create();
		        }
		    }());

		    /**
		     * SHA-512 hash algorithm.
		     */
		    var SHA512 = C_algo.SHA512 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new X64WordArray.init([
		                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
		                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
		                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
		                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
		            ]);
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcuts
		            var H = this._hash.words;

		            var H0 = H[0];
		            var H1 = H[1];
		            var H2 = H[2];
		            var H3 = H[3];
		            var H4 = H[4];
		            var H5 = H[5];
		            var H6 = H[6];
		            var H7 = H[7];

		            var H0h = H0.high;
		            var H0l = H0.low;
		            var H1h = H1.high;
		            var H1l = H1.low;
		            var H2h = H2.high;
		            var H2l = H2.low;
		            var H3h = H3.high;
		            var H3l = H3.low;
		            var H4h = H4.high;
		            var H4l = H4.low;
		            var H5h = H5.high;
		            var H5l = H5.low;
		            var H6h = H6.high;
		            var H6l = H6.low;
		            var H7h = H7.high;
		            var H7l = H7.low;

		            // Working variables
		            var ah = H0h;
		            var al = H0l;
		            var bh = H1h;
		            var bl = H1l;
		            var ch = H2h;
		            var cl = H2l;
		            var dh = H3h;
		            var dl = H3l;
		            var eh = H4h;
		            var el = H4l;
		            var fh = H5h;
		            var fl = H5l;
		            var gh = H6h;
		            var gl = H6l;
		            var hh = H7h;
		            var hl = H7l;

		            // Rounds
		            for (var i = 0; i < 80; i++) {
		                // Shortcut
		                var Wi = W[i];

		                // Extend message
		                if (i < 16) {
		                    var Wih = Wi.high = M[offset + i * 2]     | 0;
		                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;
		                } else {
		                    // Gamma0
		                    var gamma0x  = W[i - 15];
		                    var gamma0xh = gamma0x.high;
		                    var gamma0xl = gamma0x.low;
		                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
		                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

		                    // Gamma1
		                    var gamma1x  = W[i - 2];
		                    var gamma1xh = gamma1x.high;
		                    var gamma1xl = gamma1x.low;
		                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
		                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

		                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
		                    var Wi7  = W[i - 7];
		                    var Wi7h = Wi7.high;
		                    var Wi7l = Wi7.low;

		                    var Wi16  = W[i - 16];
		                    var Wi16h = Wi16.high;
		                    var Wi16l = Wi16.low;

		                    var Wil = gamma0l + Wi7l;
		                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
		                    var Wil = Wil + gamma1l;
		                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
		                    var Wil = Wil + Wi16l;
		                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

		                    Wi.high = Wih;
		                    Wi.low  = Wil;
		                }

		                var chh  = (eh & fh) ^ (~eh & gh);
		                var chl  = (el & fl) ^ (~el & gl);
		                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
		                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

		                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
		                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
		                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
		                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

		                // t1 = h + sigma1 + ch + K[i] + W[i]
		                var Ki  = K[i];
		                var Kih = Ki.high;
		                var Kil = Ki.low;

		                var t1l = hl + sigma1l;
		                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
		                var t1l = t1l + chl;
		                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
		                var t1l = t1l + Kil;
		                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
		                var t1l = t1l + Wil;
		                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

		                // t2 = sigma0 + maj
		                var t2l = sigma0l + majl;
		                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

		                // Update working variables
		                hh = gh;
		                hl = gl;
		                gh = fh;
		                gl = fl;
		                fh = eh;
		                fl = el;
		                el = (dl + t1l) | 0;
		                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
		                dh = ch;
		                dl = cl;
		                ch = bh;
		                cl = bl;
		                bh = ah;
		                bl = al;
		                al = (t1l + t2l) | 0;
		                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
		            }

		            // Intermediate hash value
		            H0l = H0.low  = (H0l + al);
		            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
		            H1l = H1.low  = (H1l + bl);
		            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
		            H2l = H2.low  = (H2l + cl);
		            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
		            H3l = H3.low  = (H3l + dl);
		            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
		            H4l = H4.low  = (H4l + el);
		            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
		            H5l = H5.low  = (H5l + fl);
		            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
		            H6l = H6.low  = (H6l + gl);
		            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
		            H7l = H7.low  = (H7l + hl);
		            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
		            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
		            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
		            data.sigBytes = dataWords.length * 4;

		            // Hash final blocks
		            this._process();

		            // Convert hash to 32-bit word array before returning
		            var hash = this._hash.toX32();

		            // Return final computed hash
		            return hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        },

		        blockSize: 1024/32
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA512('message');
		     *     var hash = CryptoJS.SHA512(wordArray);
		     */
		    C.SHA512 = Hasher._createHelper(SHA512);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA512(message, key);
		     */
		    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
		}());


		return CryptoJS.SHA512;

	}));

/***/ },
/* 51 */
/*!**************************************!*\
  !*** ./app/dl/~/crypto-js/sha384.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./x64-core */ 42), __webpack_require__(/*! ./sha512 */ 50));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./x64-core", "./sha512"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_x64 = C.x64;
		    var X64Word = C_x64.Word;
		    var X64WordArray = C_x64.WordArray;
		    var C_algo = C.algo;
		    var SHA512 = C_algo.SHA512;

		    /**
		     * SHA-384 hash algorithm.
		     */
		    var SHA384 = C_algo.SHA384 = SHA512.extend({
		        _doReset: function () {
		            this._hash = new X64WordArray.init([
		                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
		                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
		                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
		                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
		            ]);
		        },

		        _doFinalize: function () {
		            var hash = SHA512._doFinalize.call(this);

		            hash.sigBytes -= 16;

		            return hash;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA384('message');
		     *     var hash = CryptoJS.SHA384(wordArray);
		     */
		    C.SHA384 = SHA512._createHelper(SHA384);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA384(message, key);
		     */
		    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
		}());


		return CryptoJS.SHA384;

	}));

/***/ },
/* 52 */
/*!************************************!*\
  !*** ./app/dl/~/crypto-js/sha3.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./x64-core */ 42));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./x64-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_x64 = C.x64;
		    var X64Word = C_x64.Word;
		    var C_algo = C.algo;

		    // Constants tables
		    var RHO_OFFSETS = [];
		    var PI_INDEXES  = [];
		    var ROUND_CONSTANTS = [];

		    // Compute Constants
		    (function () {
		        // Compute rho offset constants
		        var x = 1, y = 0;
		        for (var t = 0; t < 24; t++) {
		            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

		            var newX = y % 5;
		            var newY = (2 * x + 3 * y) % 5;
		            x = newX;
		            y = newY;
		        }

		        // Compute pi index constants
		        for (var x = 0; x < 5; x++) {
		            for (var y = 0; y < 5; y++) {
		                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
		            }
		        }

		        // Compute round constants
		        var LFSR = 0x01;
		        for (var i = 0; i < 24; i++) {
		            var roundConstantMsw = 0;
		            var roundConstantLsw = 0;

		            for (var j = 0; j < 7; j++) {
		                if (LFSR & 0x01) {
		                    var bitPosition = (1 << j) - 1;
		                    if (bitPosition < 32) {
		                        roundConstantLsw ^= 1 << bitPosition;
		                    } else /* if (bitPosition >= 32) */ {
		                        roundConstantMsw ^= 1 << (bitPosition - 32);
		                    }
		                }

		                // Compute next LFSR
		                if (LFSR & 0x80) {
		                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
		                    LFSR = (LFSR << 1) ^ 0x71;
		                } else {
		                    LFSR <<= 1;
		                }
		            }

		            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
		        }
		    }());

		    // Reusable objects for temporary values
		    var T = [];
		    (function () {
		        for (var i = 0; i < 25; i++) {
		            T[i] = X64Word.create();
		        }
		    }());

		    /**
		     * SHA-3 hash algorithm.
		     */
		    var SHA3 = C_algo.SHA3 = Hasher.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {number} outputLength
		         *   The desired number of bits in the output hash.
		         *   Only values permitted are: 224, 256, 384, 512.
		         *   Default: 512
		         */
		        cfg: Hasher.cfg.extend({
		            outputLength: 512
		        }),

		        _doReset: function () {
		            var state = this._state = []
		            for (var i = 0; i < 25; i++) {
		                state[i] = new X64Word.init();
		            }

		            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcuts
		            var state = this._state;
		            var nBlockSizeLanes = this.blockSize / 2;

		            // Absorb
		            for (var i = 0; i < nBlockSizeLanes; i++) {
		                // Shortcuts
		                var M2i  = M[offset + 2 * i];
		                var M2i1 = M[offset + 2 * i + 1];

		                // Swap endian
		                M2i = (
		                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |
		                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)
		                );
		                M2i1 = (
		                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |
		                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)
		                );

		                // Absorb message into state
		                var lane = state[i];
		                lane.high ^= M2i1;
		                lane.low  ^= M2i;
		            }

		            // Rounds
		            for (var round = 0; round < 24; round++) {
		                // Theta
		                for (var x = 0; x < 5; x++) {
		                    // Mix column lanes
		                    var tMsw = 0, tLsw = 0;
		                    for (var y = 0; y < 5; y++) {
		                        var lane = state[x + 5 * y];
		                        tMsw ^= lane.high;
		                        tLsw ^= lane.low;
		                    }

		                    // Temporary values
		                    var Tx = T[x];
		                    Tx.high = tMsw;
		                    Tx.low  = tLsw;
		                }
		                for (var x = 0; x < 5; x++) {
		                    // Shortcuts
		                    var Tx4 = T[(x + 4) % 5];
		                    var Tx1 = T[(x + 1) % 5];
		                    var Tx1Msw = Tx1.high;
		                    var Tx1Lsw = Tx1.low;

		                    // Mix surrounding columns
		                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
		                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
		                    for (var y = 0; y < 5; y++) {
		                        var lane = state[x + 5 * y];
		                        lane.high ^= tMsw;
		                        lane.low  ^= tLsw;
		                    }
		                }

		                // Rho Pi
		                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
		                    // Shortcuts
		                    var lane = state[laneIndex];
		                    var laneMsw = lane.high;
		                    var laneLsw = lane.low;
		                    var rhoOffset = RHO_OFFSETS[laneIndex];

		                    // Rotate lanes
		                    if (rhoOffset < 32) {
		                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
		                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
		                    } else /* if (rhoOffset >= 32) */ {
		                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
		                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
		                    }

		                    // Transpose lanes
		                    var TPiLane = T[PI_INDEXES[laneIndex]];
		                    TPiLane.high = tMsw;
		                    TPiLane.low  = tLsw;
		                }

		                // Rho pi at x = y = 0
		                var T0 = T[0];
		                var state0 = state[0];
		                T0.high = state0.high;
		                T0.low  = state0.low;

		                // Chi
		                for (var x = 0; x < 5; x++) {
		                    for (var y = 0; y < 5; y++) {
		                        // Shortcuts
		                        var laneIndex = x + 5 * y;
		                        var lane = state[laneIndex];
		                        var TLane = T[laneIndex];
		                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];
		                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];

		                        // Mix rows
		                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
		                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);
		                    }
		                }

		                // Iota
		                var lane = state[0];
		                var roundConstant = ROUND_CONSTANTS[round];
		                lane.high ^= roundConstant.high;
		                lane.low  ^= roundConstant.low;;
		            }
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;
		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;
		            var blockSizeBits = this.blockSize * 32;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
		            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
		            data.sigBytes = dataWords.length * 4;

		            // Hash final blocks
		            this._process();

		            // Shortcuts
		            var state = this._state;
		            var outputLengthBytes = this.cfg.outputLength / 8;
		            var outputLengthLanes = outputLengthBytes / 8;

		            // Squeeze
		            var hashWords = [];
		            for (var i = 0; i < outputLengthLanes; i++) {
		                // Shortcuts
		                var lane = state[i];
		                var laneMsw = lane.high;
		                var laneLsw = lane.low;

		                // Swap endian
		                laneMsw = (
		                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |
		                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)
		                );
		                laneLsw = (
		                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |
		                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)
		                );

		                // Squeeze state to retrieve hash
		                hashWords.push(laneLsw);
		                hashWords.push(laneMsw);
		            }

		            // Return final computed hash
		            return new WordArray.init(hashWords, outputLengthBytes);
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);

		            var state = clone._state = this._state.slice(0);
		            for (var i = 0; i < 25; i++) {
		                state[i] = state[i].clone();
		            }

		            return clone;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA3('message');
		     *     var hash = CryptoJS.SHA3(wordArray);
		     */
		    C.SHA3 = Hasher._createHelper(SHA3);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA3(message, key);
		     */
		    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
		}(Math));


		return CryptoJS.SHA3;

	}));

/***/ },
/* 53 */
/*!*****************************************!*\
  !*** ./app/dl/~/crypto-js/ripemd160.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/** @preserve
		(c) 2012 by Cédric Mesnil. All rights reserved.

		Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

		    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
		    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

		THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*/

		(function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Constants table
		    var _zl = WordArray.create([
		        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
		        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
		        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
		        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
		        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);
		    var _zr = WordArray.create([
		        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
		        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
		        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
		        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
		        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);
		    var _sl = WordArray.create([
		         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
		        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
		        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
		          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
		        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);
		    var _sr = WordArray.create([
		        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
		        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
		        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
		        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
		        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);

		    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
		    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

		    /**
		     * RIPEMD160 hash algorithm.
		     */
		    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
		        _doReset: function () {
		            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
		        },

		        _doProcessBlock: function (M, offset) {

		            // Swap endian
		            for (var i = 0; i < 16; i++) {
		                // Shortcuts
		                var offset_i = offset + i;
		                var M_offset_i = M[offset_i];

		                // Swap
		                M[offset_i] = (
		                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
		                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
		                );
		            }
		            // Shortcut
		            var H  = this._hash.words;
		            var hl = _hl.words;
		            var hr = _hr.words;
		            var zl = _zl.words;
		            var zr = _zr.words;
		            var sl = _sl.words;
		            var sr = _sr.words;

		            // Working variables
		            var al, bl, cl, dl, el;
		            var ar, br, cr, dr, er;

		            ar = al = H[0];
		            br = bl = H[1];
		            cr = cl = H[2];
		            dr = dl = H[3];
		            er = el = H[4];
		            // Computation
		            var t;
		            for (var i = 0; i < 80; i += 1) {
		                t = (al +  M[offset+zl[i]])|0;
		                if (i<16){
			            t +=  f1(bl,cl,dl) + hl[0];
		                } else if (i<32) {
			            t +=  f2(bl,cl,dl) + hl[1];
		                } else if (i<48) {
			            t +=  f3(bl,cl,dl) + hl[2];
		                } else if (i<64) {
			            t +=  f4(bl,cl,dl) + hl[3];
		                } else {// if (i<80) {
			            t +=  f5(bl,cl,dl) + hl[4];
		                }
		                t = t|0;
		                t =  rotl(t,sl[i]);
		                t = (t+el)|0;
		                al = el;
		                el = dl;
		                dl = rotl(cl, 10);
		                cl = bl;
		                bl = t;

		                t = (ar + M[offset+zr[i]])|0;
		                if (i<16){
			            t +=  f5(br,cr,dr) + hr[0];
		                } else if (i<32) {
			            t +=  f4(br,cr,dr) + hr[1];
		                } else if (i<48) {
			            t +=  f3(br,cr,dr) + hr[2];
		                } else if (i<64) {
			            t +=  f2(br,cr,dr) + hr[3];
		                } else {// if (i<80) {
			            t +=  f1(br,cr,dr) + hr[4];
		                }
		                t = t|0;
		                t =  rotl(t,sr[i]) ;
		                t = (t+er)|0;
		                ar = er;
		                er = dr;
		                dr = rotl(cr, 10);
		                cr = br;
		                br = t;
		            }
		            // Intermediate hash value
		            t    = (H[1] + cl + dr)|0;
		            H[1] = (H[2] + dl + er)|0;
		            H[2] = (H[3] + el + ar)|0;
		            H[3] = (H[4] + al + br)|0;
		            H[4] = (H[0] + bl + cr)|0;
		            H[0] =  t;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
		                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
		                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
		            );
		            data.sigBytes = (dataWords.length + 1) * 4;

		            // Hash final blocks
		            this._process();

		            // Shortcuts
		            var hash = this._hash;
		            var H = hash.words;

		            // Swap endian
		            for (var i = 0; i < 5; i++) {
		                // Shortcut
		                var H_i = H[i];

		                // Swap
		                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
		                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
		            }

		            // Return final computed hash
		            return hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });


		    function f1(x, y, z) {
		        return ((x) ^ (y) ^ (z));

		    }

		    function f2(x, y, z) {
		        return (((x)&(y)) | ((~x)&(z)));
		    }

		    function f3(x, y, z) {
		        return (((x) | (~(y))) ^ (z));
		    }

		    function f4(x, y, z) {
		        return (((x) & (z)) | ((y)&(~(z))));
		    }

		    function f5(x, y, z) {
		        return ((x) ^ ((y) |(~(z))));

		    }

		    function rotl(x,n) {
		        return (x<<n) | (x>>>(32-n));
		    }


		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.RIPEMD160('message');
		     *     var hash = CryptoJS.RIPEMD160(wordArray);
		     */
		    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
		     */
		    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
		}(Math));


		return CryptoJS.RIPEMD160;

	}));

/***/ },
/* 54 */
/*!************************************!*\
  !*** ./app/dl/~/crypto-js/hmac.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var C_enc = C.enc;
		    var Utf8 = C_enc.Utf8;
		    var C_algo = C.algo;

		    /**
		     * HMAC algorithm.
		     */
		    var HMAC = C_algo.HMAC = Base.extend({
		        /**
		         * Initializes a newly created HMAC.
		         *
		         * @param {Hasher} hasher The hash algorithm to use.
		         * @param {WordArray|string} key The secret key.
		         *
		         * @example
		         *
		         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
		         */
		        init: function (hasher, key) {
		            // Init hasher
		            hasher = this._hasher = new hasher.init();

		            // Convert string to WordArray, else assume WordArray already
		            if (typeof key == 'string') {
		                key = Utf8.parse(key);
		            }

		            // Shortcuts
		            var hasherBlockSize = hasher.blockSize;
		            var hasherBlockSizeBytes = hasherBlockSize * 4;

		            // Allow arbitrary length keys
		            if (key.sigBytes > hasherBlockSizeBytes) {
		                key = hasher.finalize(key);
		            }

		            // Clamp excess bits
		            key.clamp();

		            // Clone key for inner and outer pads
		            var oKey = this._oKey = key.clone();
		            var iKey = this._iKey = key.clone();

		            // Shortcuts
		            var oKeyWords = oKey.words;
		            var iKeyWords = iKey.words;

		            // XOR keys with pad constants
		            for (var i = 0; i < hasherBlockSize; i++) {
		                oKeyWords[i] ^= 0x5c5c5c5c;
		                iKeyWords[i] ^= 0x36363636;
		            }
		            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

		            // Set initial values
		            this.reset();
		        },

		        /**
		         * Resets this HMAC to its initial state.
		         *
		         * @example
		         *
		         *     hmacHasher.reset();
		         */
		        reset: function () {
		            // Shortcut
		            var hasher = this._hasher;

		            // Reset
		            hasher.reset();
		            hasher.update(this._iKey);
		        },

		        /**
		         * Updates this HMAC with a message.
		         *
		         * @param {WordArray|string} messageUpdate The message to append.
		         *
		         * @return {HMAC} This HMAC instance.
		         *
		         * @example
		         *
		         *     hmacHasher.update('message');
		         *     hmacHasher.update(wordArray);
		         */
		        update: function (messageUpdate) {
		            this._hasher.update(messageUpdate);

		            // Chainable
		            return this;
		        },

		        /**
		         * Finalizes the HMAC computation.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} messageUpdate (Optional) A final message update.
		         *
		         * @return {WordArray} The HMAC.
		         *
		         * @example
		         *
		         *     var hmac = hmacHasher.finalize();
		         *     var hmac = hmacHasher.finalize('message');
		         *     var hmac = hmacHasher.finalize(wordArray);
		         */
		        finalize: function (messageUpdate) {
		            // Shortcut
		            var hasher = this._hasher;

		            // Compute HMAC
		            var innerHash = hasher.finalize(messageUpdate);
		            hasher.reset();
		            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

		            return hmac;
		        }
		    });
		}());


	}));

/***/ },
/* 55 */
/*!**************************************!*\
  !*** ./app/dl/~/crypto-js/pbkdf2.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./sha1 */ 47), __webpack_require__(/*! ./hmac */ 54));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./sha1", "./hmac"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var WordArray = C_lib.WordArray;
		    var C_algo = C.algo;
		    var SHA1 = C_algo.SHA1;
		    var HMAC = C_algo.HMAC;

		    /**
		     * Password-Based Key Derivation Function 2 algorithm.
		     */
		    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
		         * @property {Hasher} hasher The hasher to use. Default: SHA1
		         * @property {number} iterations The number of iterations to perform. Default: 1
		         */
		        cfg: Base.extend({
		            keySize: 128/32,
		            hasher: SHA1,
		            iterations: 1
		        }),

		        /**
		         * Initializes a newly created key derivation function.
		         *
		         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
		         *
		         * @example
		         *
		         *     var kdf = CryptoJS.algo.PBKDF2.create();
		         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
		         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
		         */
		        init: function (cfg) {
		            this.cfg = this.cfg.extend(cfg);
		        },

		        /**
		         * Computes the Password-Based Key Derivation Function 2.
		         *
		         * @param {WordArray|string} password The password.
		         * @param {WordArray|string} salt A salt.
		         *
		         * @return {WordArray} The derived key.
		         *
		         * @example
		         *
		         *     var key = kdf.compute(password, salt);
		         */
		        compute: function (password, salt) {
		            // Shortcut
		            var cfg = this.cfg;

		            // Init HMAC
		            var hmac = HMAC.create(cfg.hasher, password);

		            // Initial values
		            var derivedKey = WordArray.create();
		            var blockIndex = WordArray.create([0x00000001]);

		            // Shortcuts
		            var derivedKeyWords = derivedKey.words;
		            var blockIndexWords = blockIndex.words;
		            var keySize = cfg.keySize;
		            var iterations = cfg.iterations;

		            // Generate key
		            while (derivedKeyWords.length < keySize) {
		                var block = hmac.update(salt).finalize(blockIndex);
		                hmac.reset();

		                // Shortcuts
		                var blockWords = block.words;
		                var blockWordsLength = blockWords.length;

		                // Iterations
		                var intermediate = block;
		                for (var i = 1; i < iterations; i++) {
		                    intermediate = hmac.finalize(intermediate);
		                    hmac.reset();

		                    // Shortcut
		                    var intermediateWords = intermediate.words;

		                    // XOR intermediate with block
		                    for (var j = 0; j < blockWordsLength; j++) {
		                        blockWords[j] ^= intermediateWords[j];
		                    }
		                }

		                derivedKey.concat(block);
		                blockIndexWords[0]++;
		            }
		            derivedKey.sigBytes = keySize * 4;

		            return derivedKey;
		        }
		    });

		    /**
		     * Computes the Password-Based Key Derivation Function 2.
		     *
		     * @param {WordArray|string} password The password.
		     * @param {WordArray|string} salt A salt.
		     * @param {Object} cfg (Optional) The configuration options to use for this computation.
		     *
		     * @return {WordArray} The derived key.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var key = CryptoJS.PBKDF2(password, salt);
		     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
		     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
		     */
		    C.PBKDF2 = function (password, salt, cfg) {
		        return PBKDF2.create(cfg).compute(password, salt);
		    };
		}());


		return CryptoJS.PBKDF2;

	}));

/***/ },
/* 56 */
/*!**************************************!*\
  !*** ./app/dl/~/crypto-js/evpkdf.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./sha1 */ 47), __webpack_require__(/*! ./hmac */ 54));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./sha1", "./hmac"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var WordArray = C_lib.WordArray;
		    var C_algo = C.algo;
		    var MD5 = C_algo.MD5;

		    /**
		     * This key derivation function is meant to conform with EVP_BytesToKey.
		     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
		     */
		    var EvpKDF = C_algo.EvpKDF = Base.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
		         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
		         * @property {number} iterations The number of iterations to perform. Default: 1
		         */
		        cfg: Base.extend({
		            keySize: 128/32,
		            hasher: MD5,
		            iterations: 1
		        }),

		        /**
		         * Initializes a newly created key derivation function.
		         *
		         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
		         *
		         * @example
		         *
		         *     var kdf = CryptoJS.algo.EvpKDF.create();
		         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
		         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
		         */
		        init: function (cfg) {
		            this.cfg = this.cfg.extend(cfg);
		        },

		        /**
		         * Derives a key from a password.
		         *
		         * @param {WordArray|string} password The password.
		         * @param {WordArray|string} salt A salt.
		         *
		         * @return {WordArray} The derived key.
		         *
		         * @example
		         *
		         *     var key = kdf.compute(password, salt);
		         */
		        compute: function (password, salt) {
		            // Shortcut
		            var cfg = this.cfg;

		            // Init hasher
		            var hasher = cfg.hasher.create();

		            // Initial values
		            var derivedKey = WordArray.create();

		            // Shortcuts
		            var derivedKeyWords = derivedKey.words;
		            var keySize = cfg.keySize;
		            var iterations = cfg.iterations;

		            // Generate key
		            while (derivedKeyWords.length < keySize) {
		                if (block) {
		                    hasher.update(block);
		                }
		                var block = hasher.update(password).finalize(salt);
		                hasher.reset();

		                // Iterations
		                for (var i = 1; i < iterations; i++) {
		                    block = hasher.finalize(block);
		                    hasher.reset();
		                }

		                derivedKey.concat(block);
		            }
		            derivedKey.sigBytes = keySize * 4;

		            return derivedKey;
		        }
		    });

		    /**
		     * Derives a key from a password.
		     *
		     * @param {WordArray|string} password The password.
		     * @param {WordArray|string} salt A salt.
		     * @param {Object} cfg (Optional) The configuration options to use for this computation.
		     *
		     * @return {WordArray} The derived key.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var key = CryptoJS.EvpKDF(password, salt);
		     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
		     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
		     */
		    C.EvpKDF = function (password, salt, cfg) {
		        return EvpKDF.create(cfg).compute(password, salt);
		    };
		}());


		return CryptoJS.EvpKDF;

	}));

/***/ },
/* 57 */
/*!*******************************************!*\
  !*** ./app/dl/~/crypto-js/cipher-core.js ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * Cipher core components.
		 */
		CryptoJS.lib.Cipher || (function (undefined) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var WordArray = C_lib.WordArray;
		    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
		    var C_enc = C.enc;
		    var Utf8 = C_enc.Utf8;
		    var Base64 = C_enc.Base64;
		    var C_algo = C.algo;
		    var EvpKDF = C_algo.EvpKDF;

		    /**
		     * Abstract base cipher template.
		     *
		     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
		     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
		     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
		     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
		     */
		    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {WordArray} iv The IV to use for this operation.
		         */
		        cfg: Base.extend(),

		        /**
		         * Creates this cipher in encryption mode.
		         *
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {Cipher} A cipher instance.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
		         */
		        createEncryptor: function (key, cfg) {
		            return this.create(this._ENC_XFORM_MODE, key, cfg);
		        },

		        /**
		         * Creates this cipher in decryption mode.
		         *
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {Cipher} A cipher instance.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
		         */
		        createDecryptor: function (key, cfg) {
		            return this.create(this._DEC_XFORM_MODE, key, cfg);
		        },

		        /**
		         * Initializes a newly created cipher.
		         *
		         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @example
		         *
		         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
		         */
		        init: function (xformMode, key, cfg) {
		            // Apply config defaults
		            this.cfg = this.cfg.extend(cfg);

		            // Store transform mode and key
		            this._xformMode = xformMode;
		            this._key = key;

		            // Set initial values
		            this.reset();
		        },

		        /**
		         * Resets this cipher to its initial state.
		         *
		         * @example
		         *
		         *     cipher.reset();
		         */
		        reset: function () {
		            // Reset data buffer
		            BufferedBlockAlgorithm.reset.call(this);

		            // Perform concrete-cipher logic
		            this._doReset();
		        },

		        /**
		         * Adds data to be encrypted or decrypted.
		         *
		         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
		         *
		         * @return {WordArray} The data after processing.
		         *
		         * @example
		         *
		         *     var encrypted = cipher.process('data');
		         *     var encrypted = cipher.process(wordArray);
		         */
		        process: function (dataUpdate) {
		            // Append
		            this._append(dataUpdate);

		            // Process available blocks
		            return this._process();
		        },

		        /**
		         * Finalizes the encryption or decryption process.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
		         *
		         * @return {WordArray} The data after final processing.
		         *
		         * @example
		         *
		         *     var encrypted = cipher.finalize();
		         *     var encrypted = cipher.finalize('data');
		         *     var encrypted = cipher.finalize(wordArray);
		         */
		        finalize: function (dataUpdate) {
		            // Final data update
		            if (dataUpdate) {
		                this._append(dataUpdate);
		            }

		            // Perform concrete-cipher logic
		            var finalProcessedData = this._doFinalize();

		            return finalProcessedData;
		        },

		        keySize: 128/32,

		        ivSize: 128/32,

		        _ENC_XFORM_MODE: 1,

		        _DEC_XFORM_MODE: 2,

		        /**
		         * Creates shortcut functions to a cipher's object interface.
		         *
		         * @param {Cipher} cipher The cipher to create a helper for.
		         *
		         * @return {Object} An object with encrypt and decrypt shortcut functions.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
		         */
		        _createHelper: (function () {
		            function selectCipherStrategy(key) {
		                if (typeof key == 'string') {
		                    return PasswordBasedCipher;
		                } else {
		                    return SerializableCipher;
		                }
		            }

		            return function (cipher) {
		                return {
		                    encrypt: function (message, key, cfg) {
		                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
		                    },

		                    decrypt: function (ciphertext, key, cfg) {
		                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
		                    }
		                };
		            };
		        }())
		    });

		    /**
		     * Abstract base stream cipher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
		     */
		    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
		        _doFinalize: function () {
		            // Process partial blocks
		            var finalProcessedBlocks = this._process(!!'flush');

		            return finalProcessedBlocks;
		        },

		        blockSize: 1
		    });

		    /**
		     * Mode namespace.
		     */
		    var C_mode = C.mode = {};

		    /**
		     * Abstract base block cipher mode template.
		     */
		    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
		        /**
		         * Creates this mode for encryption.
		         *
		         * @param {Cipher} cipher A block cipher instance.
		         * @param {Array} iv The IV words.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
		         */
		        createEncryptor: function (cipher, iv) {
		            return this.Encryptor.create(cipher, iv);
		        },

		        /**
		         * Creates this mode for decryption.
		         *
		         * @param {Cipher} cipher A block cipher instance.
		         * @param {Array} iv The IV words.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
		         */
		        createDecryptor: function (cipher, iv) {
		            return this.Decryptor.create(cipher, iv);
		        },

		        /**
		         * Initializes a newly created mode.
		         *
		         * @param {Cipher} cipher A block cipher instance.
		         * @param {Array} iv The IV words.
		         *
		         * @example
		         *
		         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
		         */
		        init: function (cipher, iv) {
		            this._cipher = cipher;
		            this._iv = iv;
		        }
		    });

		    /**
		     * Cipher Block Chaining mode.
		     */
		    var CBC = C_mode.CBC = (function () {
		        /**
		         * Abstract base CBC mode.
		         */
		        var CBC = BlockCipherMode.extend();

		        /**
		         * CBC encryptor.
		         */
		        CBC.Encryptor = CBC.extend({
		            /**
		             * Processes the data block at offset.
		             *
		             * @param {Array} words The data words to operate on.
		             * @param {number} offset The offset where the block starts.
		             *
		             * @example
		             *
		             *     mode.processBlock(data.words, offset);
		             */
		            processBlock: function (words, offset) {
		                // Shortcuts
		                var cipher = this._cipher;
		                var blockSize = cipher.blockSize;

		                // XOR and encrypt
		                xorBlock.call(this, words, offset, blockSize);
		                cipher.encryptBlock(words, offset);

		                // Remember this block to use with next block
		                this._prevBlock = words.slice(offset, offset + blockSize);
		            }
		        });

		        /**
		         * CBC decryptor.
		         */
		        CBC.Decryptor = CBC.extend({
		            /**
		             * Processes the data block at offset.
		             *
		             * @param {Array} words The data words to operate on.
		             * @param {number} offset The offset where the block starts.
		             *
		             * @example
		             *
		             *     mode.processBlock(data.words, offset);
		             */
		            processBlock: function (words, offset) {
		                // Shortcuts
		                var cipher = this._cipher;
		                var blockSize = cipher.blockSize;

		                // Remember this block to use with next block
		                var thisBlock = words.slice(offset, offset + blockSize);

		                // Decrypt and XOR
		                cipher.decryptBlock(words, offset);
		                xorBlock.call(this, words, offset, blockSize);

		                // This block becomes the previous block
		                this._prevBlock = thisBlock;
		            }
		        });

		        function xorBlock(words, offset, blockSize) {
		            // Shortcut
		            var iv = this._iv;

		            // Choose mixing block
		            if (iv) {
		                var block = iv;

		                // Remove IV for subsequent blocks
		                this._iv = undefined;
		            } else {
		                var block = this._prevBlock;
		            }

		            // XOR blocks
		            for (var i = 0; i < blockSize; i++) {
		                words[offset + i] ^= block[i];
		            }
		        }

		        return CBC;
		    }());

		    /**
		     * Padding namespace.
		     */
		    var C_pad = C.pad = {};

		    /**
		     * PKCS #5/7 padding strategy.
		     */
		    var Pkcs7 = C_pad.Pkcs7 = {
		        /**
		         * Pads data using the algorithm defined in PKCS #5/7.
		         *
		         * @param {WordArray} data The data to pad.
		         * @param {number} blockSize The multiple that the data should be padded to.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
		         */
		        pad: function (data, blockSize) {
		            // Shortcut
		            var blockSizeBytes = blockSize * 4;

		            // Count padding bytes
		            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

		            // Create padding word
		            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

		            // Create padding
		            var paddingWords = [];
		            for (var i = 0; i < nPaddingBytes; i += 4) {
		                paddingWords.push(paddingWord);
		            }
		            var padding = WordArray.create(paddingWords, nPaddingBytes);

		            // Add padding
		            data.concat(padding);
		        },

		        /**
		         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
		         *
		         * @param {WordArray} data The data to unpad.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
		         */
		        unpad: function (data) {
		            // Get number of padding bytes from last byte
		            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

		            // Remove padding
		            data.sigBytes -= nPaddingBytes;
		        }
		    };

		    /**
		     * Abstract base block cipher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
		     */
		    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {Mode} mode The block mode to use. Default: CBC
		         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
		         */
		        cfg: Cipher.cfg.extend({
		            mode: CBC,
		            padding: Pkcs7
		        }),

		        reset: function () {
		            // Reset cipher
		            Cipher.reset.call(this);

		            // Shortcuts
		            var cfg = this.cfg;
		            var iv = cfg.iv;
		            var mode = cfg.mode;

		            // Reset block mode
		            if (this._xformMode == this._ENC_XFORM_MODE) {
		                var modeCreator = mode.createEncryptor;
		            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
		                var modeCreator = mode.createDecryptor;

		                // Keep at least one block in the buffer for unpadding
		                this._minBufferSize = 1;
		            }
		            this._mode = modeCreator.call(mode, this, iv && iv.words);
		        },

		        _doProcessBlock: function (words, offset) {
		            this._mode.processBlock(words, offset);
		        },

		        _doFinalize: function () {
		            // Shortcut
		            var padding = this.cfg.padding;

		            // Finalize
		            if (this._xformMode == this._ENC_XFORM_MODE) {
		                // Pad data
		                padding.pad(this._data, this.blockSize);

		                // Process final blocks
		                var finalProcessedBlocks = this._process(!!'flush');
		            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
		                // Process final blocks
		                var finalProcessedBlocks = this._process(!!'flush');

		                // Unpad data
		                padding.unpad(finalProcessedBlocks);
		            }

		            return finalProcessedBlocks;
		        },

		        blockSize: 128/32
		    });

		    /**
		     * A collection of cipher parameters.
		     *
		     * @property {WordArray} ciphertext The raw ciphertext.
		     * @property {WordArray} key The key to this ciphertext.
		     * @property {WordArray} iv The IV used in the ciphering operation.
		     * @property {WordArray} salt The salt used with a key derivation function.
		     * @property {Cipher} algorithm The cipher algorithm.
		     * @property {Mode} mode The block mode used in the ciphering operation.
		     * @property {Padding} padding The padding scheme used in the ciphering operation.
		     * @property {number} blockSize The block size of the cipher.
		     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
		     */
		    var CipherParams = C_lib.CipherParams = Base.extend({
		        /**
		         * Initializes a newly created cipher params object.
		         *
		         * @param {Object} cipherParams An object with any of the possible cipher parameters.
		         *
		         * @example
		         *
		         *     var cipherParams = CryptoJS.lib.CipherParams.create({
		         *         ciphertext: ciphertextWordArray,
		         *         key: keyWordArray,
		         *         iv: ivWordArray,
		         *         salt: saltWordArray,
		         *         algorithm: CryptoJS.algo.AES,
		         *         mode: CryptoJS.mode.CBC,
		         *         padding: CryptoJS.pad.PKCS7,
		         *         blockSize: 4,
		         *         formatter: CryptoJS.format.OpenSSL
		         *     });
		         */
		        init: function (cipherParams) {
		            this.mixIn(cipherParams);
		        },

		        /**
		         * Converts this cipher params object to a string.
		         *
		         * @param {Format} formatter (Optional) The formatting strategy to use.
		         *
		         * @return {string} The stringified cipher params.
		         *
		         * @throws Error If neither the formatter nor the default formatter is set.
		         *
		         * @example
		         *
		         *     var string = cipherParams + '';
		         *     var string = cipherParams.toString();
		         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
		         */
		        toString: function (formatter) {
		            return (formatter || this.formatter).stringify(this);
		        }
		    });

		    /**
		     * Format namespace.
		     */
		    var C_format = C.format = {};

		    /**
		     * OpenSSL formatting strategy.
		     */
		    var OpenSSLFormatter = C_format.OpenSSL = {
		        /**
		         * Converts a cipher params object to an OpenSSL-compatible string.
		         *
		         * @param {CipherParams} cipherParams The cipher params object.
		         *
		         * @return {string} The OpenSSL-compatible string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
		         */
		        stringify: function (cipherParams) {
		            // Shortcuts
		            var ciphertext = cipherParams.ciphertext;
		            var salt = cipherParams.salt;

		            // Format
		            if (salt) {
		                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
		            } else {
		                var wordArray = ciphertext;
		            }

		            return wordArray.toString(Base64);
		        },

		        /**
		         * Converts an OpenSSL-compatible string to a cipher params object.
		         *
		         * @param {string} openSSLStr The OpenSSL-compatible string.
		         *
		         * @return {CipherParams} The cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
		         */
		        parse: function (openSSLStr) {
		            // Parse base64
		            var ciphertext = Base64.parse(openSSLStr);

		            // Shortcut
		            var ciphertextWords = ciphertext.words;

		            // Test for salt
		            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
		                // Extract salt
		                var salt = WordArray.create(ciphertextWords.slice(2, 4));

		                // Remove salt from ciphertext
		                ciphertextWords.splice(0, 4);
		                ciphertext.sigBytes -= 16;
		            }

		            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
		        }
		    };

		    /**
		     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
		     */
		    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
		         */
		        cfg: Base.extend({
		            format: OpenSSLFormatter
		        }),

		        /**
		         * Encrypts a message.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {WordArray|string} message The message to encrypt.
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {CipherParams} A cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		         */
		        encrypt: function (cipher, message, key, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Encrypt
		            var encryptor = cipher.createEncryptor(key, cfg);
		            var ciphertext = encryptor.finalize(message);

		            // Shortcut
		            var cipherCfg = encryptor.cfg;

		            // Create and return serializable cipher params
		            return CipherParams.create({
		                ciphertext: ciphertext,
		                key: key,
		                iv: cipherCfg.iv,
		                algorithm: cipher,
		                mode: cipherCfg.mode,
		                padding: cipherCfg.padding,
		                blockSize: cipher.blockSize,
		                formatter: cfg.format
		            });
		        },

		        /**
		         * Decrypts serialized ciphertext.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {WordArray} The plaintext.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		         */
		        decrypt: function (cipher, ciphertext, key, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Convert string to CipherParams
		            ciphertext = this._parse(ciphertext, cfg.format);

		            // Decrypt
		            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

		            return plaintext;
		        },

		        /**
		         * Converts serialized ciphertext to CipherParams,
		         * else assumed CipherParams already and returns ciphertext unchanged.
		         *
		         * @param {CipherParams|string} ciphertext The ciphertext.
		         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
		         *
		         * @return {CipherParams} The unserialized ciphertext.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
		         */
		        _parse: function (ciphertext, format) {
		            if (typeof ciphertext == 'string') {
		                return format.parse(ciphertext, this);
		            } else {
		                return ciphertext;
		            }
		        }
		    });

		    /**
		     * Key derivation function namespace.
		     */
		    var C_kdf = C.kdf = {};

		    /**
		     * OpenSSL key derivation function.
		     */
		    var OpenSSLKdf = C_kdf.OpenSSL = {
		        /**
		         * Derives a key and IV from a password.
		         *
		         * @param {string} password The password to derive from.
		         * @param {number} keySize The size in words of the key to generate.
		         * @param {number} ivSize The size in words of the IV to generate.
		         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
		         *
		         * @return {CipherParams} A cipher params object with the key, IV, and salt.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
		         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
		         */
		        execute: function (password, keySize, ivSize, salt) {
		            // Generate random salt
		            if (!salt) {
		                salt = WordArray.random(64/8);
		            }

		            // Derive key and IV
		            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

		            // Separate key and IV
		            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
		            key.sigBytes = keySize * 4;

		            // Return params
		            return CipherParams.create({ key: key, iv: iv, salt: salt });
		        }
		    };

		    /**
		     * A serializable cipher wrapper that derives the key from a password,
		     * and returns ciphertext as a serializable cipher params object.
		     */
		    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
		         */
		        cfg: SerializableCipher.cfg.extend({
		            kdf: OpenSSLKdf
		        }),

		        /**
		         * Encrypts a message using a password.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {WordArray|string} message The message to encrypt.
		         * @param {string} password The password.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {CipherParams} A cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
		         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
		         */
		        encrypt: function (cipher, message, password, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Derive key and other params
		            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

		            // Add IV to config
		            cfg.iv = derivedParams.iv;

		            // Encrypt
		            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

		            // Mix in derived params
		            ciphertext.mixIn(derivedParams);

		            return ciphertext;
		        },

		        /**
		         * Decrypts serialized ciphertext using a password.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
		         * @param {string} password The password.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {WordArray} The plaintext.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
		         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
		         */
		        decrypt: function (cipher, ciphertext, password, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Convert string to CipherParams
		            ciphertext = this._parse(ciphertext, cfg.format);

		            // Derive key and other params
		            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

		            // Add IV to config
		            cfg.iv = derivedParams.iv;

		            // Decrypt
		            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

		            return plaintext;
		        }
		    });
		}());


	}));

/***/ },
/* 58 */
/*!****************************************!*\
  !*** ./app/dl/~/crypto-js/mode-cfb.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./cipher-core */ 57));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * Cipher Feedback block mode.
		 */
		CryptoJS.mode.CFB = (function () {
		    var CFB = CryptoJS.lib.BlockCipherMode.extend();

		    CFB.Encryptor = CFB.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher;
		            var blockSize = cipher.blockSize;

		            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

		            // Remember this block to use with next block
		            this._prevBlock = words.slice(offset, offset + blockSize);
		        }
		    });

		    CFB.Decryptor = CFB.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher;
		            var blockSize = cipher.blockSize;

		            // Remember this block to use with next block
		            var thisBlock = words.slice(offset, offset + blockSize);

		            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

		            // This block becomes the previous block
		            this._prevBlock = thisBlock;
		        }
		    });

		    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
		        // Shortcut
		        var iv = this._iv;

		        // Generate keystream
		        if (iv) {
		            var keystream = iv.slice(0);

		            // Remove IV for subsequent blocks
		            this._iv = undefined;
		        } else {
		            var keystream = this._prevBlock;
		        }
		        cipher.encryptBlock(keystream, 0);

		        // Encrypt
		        for (var i = 0; i < blockSize; i++) {
		            words[offset + i] ^= keystream[i];
		        }
		    }

		    return CFB;
		}());


		return CryptoJS.mode.CFB;

	}));

/***/ },
/* 59 */
/*!****************************************!*\
  !*** ./app/dl/~/crypto-js/mode-ctr.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./cipher-core */ 57));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * Counter block mode.
		 */
		CryptoJS.mode.CTR = (function () {
		    var CTR = CryptoJS.lib.BlockCipherMode.extend();

		    var Encryptor = CTR.Encryptor = CTR.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher
		            var blockSize = cipher.blockSize;
		            var iv = this._iv;
		            var counter = this._counter;

		            // Generate keystream
		            if (iv) {
		                counter = this._counter = iv.slice(0);

		                // Remove IV for subsequent blocks
		                this._iv = undefined;
		            }
		            var keystream = counter.slice(0);
		            cipher.encryptBlock(keystream, 0);

		            // Increment counter
		            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0

		            // Encrypt
		            for (var i = 0; i < blockSize; i++) {
		                words[offset + i] ^= keystream[i];
		            }
		        }
		    });

		    CTR.Decryptor = Encryptor;

		    return CTR;
		}());


		return CryptoJS.mode.CTR;

	}));

/***/ },
/* 60 */
/*!************************************************!*\
  !*** ./app/dl/~/crypto-js/mode-ctr-gladman.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./cipher-core */ 57));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/** @preserve
		 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
		 * derived from CryptoJS.mode.CTR
		 * Jan Hruby jhruby.web@gmail.com
		 */
		CryptoJS.mode.CTRGladman = (function () {
		    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

			function incWord(word)
			{
				if (((word >> 24) & 0xff) === 0xff) { //overflow
				var b1 = (word >> 16)&0xff;
				var b2 = (word >> 8)&0xff;
				var b3 = word & 0xff;

				if (b1 === 0xff) // overflow b1
				{
				b1 = 0;
				if (b2 === 0xff)
				{
					b2 = 0;
					if (b3 === 0xff)
					{
						b3 = 0;
					}
					else
					{
						++b3;
					}
				}
				else
				{
					++b2;
				}
				}
				else
				{
				++b1;
				}

				word = 0;
				word += (b1 << 16);
				word += (b2 << 8);
				word += b3;
				}
				else
				{
				word += (0x01 << 24);
				}
				return word;
			}

			function incCounter(counter)
			{
				if ((counter[0] = incWord(counter[0])) === 0)
				{
					// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
					counter[1] = incWord(counter[1]);
				}
				return counter;
			}

		    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher
		            var blockSize = cipher.blockSize;
		            var iv = this._iv;
		            var counter = this._counter;

		            // Generate keystream
		            if (iv) {
		                counter = this._counter = iv.slice(0);

		                // Remove IV for subsequent blocks
		                this._iv = undefined;
		            }

					incCounter(counter);

					var keystream = counter.slice(0);
		            cipher.encryptBlock(keystream, 0);

		            // Encrypt
		            for (var i = 0; i < blockSize; i++) {
		                words[offset + i] ^= keystream[i];
		            }
		        }
		    });

		    CTRGladman.Decryptor = Encryptor;

		    return CTRGladman;
		}());




		return CryptoJS.mode.CTRGladman;

	}));

/***/ },
/* 61 */
/*!****************************************!*\
  !*** ./app/dl/~/crypto-js/mode-ofb.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./cipher-core */ 57));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * Output Feedback block mode.
		 */
		CryptoJS.mode.OFB = (function () {
		    var OFB = CryptoJS.lib.BlockCipherMode.extend();

		    var Encryptor = OFB.Encryptor = OFB.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher
		            var blockSize = cipher.blockSize;
		            var iv = this._iv;
		            var keystream = this._keystream;

		            // Generate keystream
		            if (iv) {
		                keystream = this._keystream = iv.slice(0);

		                // Remove IV for subsequent blocks
		                this._iv = undefined;
		            }
		            cipher.encryptBlock(keystream, 0);

		            // Encrypt
		            for (var i = 0; i < blockSize; i++) {
		                words[offset + i] ^= keystream[i];
		            }
		        }
		    });

		    OFB.Decryptor = Encryptor;

		    return OFB;
		}());


		return CryptoJS.mode.OFB;

	}));

/***/ },
/* 62 */
/*!****************************************!*\
  !*** ./app/dl/~/crypto-js/mode-ecb.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./cipher-core */ 57));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * Electronic Codebook block mode.
		 */
		CryptoJS.mode.ECB = (function () {
		    var ECB = CryptoJS.lib.BlockCipherMode.extend();

		    ECB.Encryptor = ECB.extend({
		        processBlock: function (words, offset) {
		            this._cipher.encryptBlock(words, offset);
		        }
		    });

		    ECB.Decryptor = ECB.extend({
		        processBlock: function (words, offset) {
		            this._cipher.decryptBlock(words, offset);
		        }
		    });

		    return ECB;
		}());


		return CryptoJS.mode.ECB;

	}));

/***/ },
/* 63 */
/*!********************************************!*\
  !*** ./app/dl/~/crypto-js/pad-ansix923.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./cipher-core */ 57));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * ANSI X.923 padding strategy.
		 */
		CryptoJS.pad.AnsiX923 = {
		    pad: function (data, blockSize) {
		        // Shortcuts
		        var dataSigBytes = data.sigBytes;
		        var blockSizeBytes = blockSize * 4;

		        // Count padding bytes
		        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

		        // Compute last byte position
		        var lastBytePos = dataSigBytes + nPaddingBytes - 1;

		        // Pad
		        data.clamp();
		        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
		        data.sigBytes += nPaddingBytes;
		    },

		    unpad: function (data) {
		        // Get number of padding bytes from last byte
		        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

		        // Remove padding
		        data.sigBytes -= nPaddingBytes;
		    }
		};


		return CryptoJS.pad.Ansix923;

	}));

/***/ },
/* 64 */
/*!********************************************!*\
  !*** ./app/dl/~/crypto-js/pad-iso10126.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./cipher-core */ 57));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * ISO 10126 padding strategy.
		 */
		CryptoJS.pad.Iso10126 = {
		    pad: function (data, blockSize) {
		        // Shortcut
		        var blockSizeBytes = blockSize * 4;

		        // Count padding bytes
		        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

		        // Pad
		        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
		             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
		    },

		    unpad: function (data) {
		        // Get number of padding bytes from last byte
		        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

		        // Remove padding
		        data.sigBytes -= nPaddingBytes;
		    }
		};


		return CryptoJS.pad.Iso10126;

	}));

/***/ },
/* 65 */
/*!********************************************!*\
  !*** ./app/dl/~/crypto-js/pad-iso97971.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./cipher-core */ 57));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * ISO/IEC 9797-1 Padding Method 2.
		 */
		CryptoJS.pad.Iso97971 = {
		    pad: function (data, blockSize) {
		        // Add 0x80 byte
		        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

		        // Zero pad the rest
		        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
		    },

		    unpad: function (data) {
		        // Remove zero padding
		        CryptoJS.pad.ZeroPadding.unpad(data);

		        // Remove one more byte -- the 0x80 byte
		        data.sigBytes--;
		    }
		};


		return CryptoJS.pad.Iso97971;

	}));

/***/ },
/* 66 */
/*!***********************************************!*\
  !*** ./app/dl/~/crypto-js/pad-zeropadding.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./cipher-core */ 57));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * Zero padding strategy.
		 */
		CryptoJS.pad.ZeroPadding = {
		    pad: function (data, blockSize) {
		        // Shortcut
		        var blockSizeBytes = blockSize * 4;

		        // Pad
		        data.clamp();
		        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
		    },

		    unpad: function (data) {
		        // Shortcut
		        var dataWords = data.words;

		        // Unpad
		        var i = data.sigBytes - 1;
		        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
		            i--;
		        }
		        data.sigBytes = i + 1;
		    }
		};


		return CryptoJS.pad.ZeroPadding;

	}));

/***/ },
/* 67 */
/*!*********************************************!*\
  !*** ./app/dl/~/crypto-js/pad-nopadding.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./cipher-core */ 57));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * A noop padding strategy.
		 */
		CryptoJS.pad.NoPadding = {
		    pad: function () {
		    },

		    unpad: function () {
		    }
		};


		return CryptoJS.pad.NoPadding;

	}));

/***/ },
/* 68 */
/*!******************************************!*\
  !*** ./app/dl/~/crypto-js/format-hex.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./cipher-core */ 57));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function (undefined) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var CipherParams = C_lib.CipherParams;
		    var C_enc = C.enc;
		    var Hex = C_enc.Hex;
		    var C_format = C.format;

		    var HexFormatter = C_format.Hex = {
		        /**
		         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
		         *
		         * @param {CipherParams} cipherParams The cipher params object.
		         *
		         * @return {string} The hexadecimally encoded string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
		         */
		        stringify: function (cipherParams) {
		            return cipherParams.ciphertext.toString(Hex);
		        },

		        /**
		         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
		         *
		         * @param {string} input The hexadecimally encoded string.
		         *
		         * @return {CipherParams} The cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
		         */
		        parse: function (input) {
		            var ciphertext = Hex.parse(input);
		            return CipherParams.create({ ciphertext: ciphertext });
		        }
		    };
		}());


		return CryptoJS.format.Hex;

	}));

/***/ },
/* 69 */
/*!***********************************!*\
  !*** ./app/dl/~/crypto-js/aes.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./enc-base64 */ 45), __webpack_require__(/*! ./md5 */ 46), __webpack_require__(/*! ./evpkdf */ 56), __webpack_require__(/*! ./cipher-core */ 57));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var BlockCipher = C_lib.BlockCipher;
		    var C_algo = C.algo;

		    // Lookup tables
		    var SBOX = [];
		    var INV_SBOX = [];
		    var SUB_MIX_0 = [];
		    var SUB_MIX_1 = [];
		    var SUB_MIX_2 = [];
		    var SUB_MIX_3 = [];
		    var INV_SUB_MIX_0 = [];
		    var INV_SUB_MIX_1 = [];
		    var INV_SUB_MIX_2 = [];
		    var INV_SUB_MIX_3 = [];

		    // Compute lookup tables
		    (function () {
		        // Compute double table
		        var d = [];
		        for (var i = 0; i < 256; i++) {
		            if (i < 128) {
		                d[i] = i << 1;
		            } else {
		                d[i] = (i << 1) ^ 0x11b;
		            }
		        }

		        // Walk GF(2^8)
		        var x = 0;
		        var xi = 0;
		        for (var i = 0; i < 256; i++) {
		            // Compute sbox
		            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
		            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
		            SBOX[x] = sx;
		            INV_SBOX[sx] = x;

		            // Compute multiplication
		            var x2 = d[x];
		            var x4 = d[x2];
		            var x8 = d[x4];

		            // Compute sub bytes, mix columns tables
		            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
		            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
		            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
		            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
		            SUB_MIX_3[x] = t;

		            // Compute inv sub bytes, inv mix columns tables
		            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
		            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
		            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
		            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
		            INV_SUB_MIX_3[sx] = t;

		            // Compute next counter
		            if (!x) {
		                x = xi = 1;
		            } else {
		                x = x2 ^ d[d[d[x8 ^ x2]]];
		                xi ^= d[d[xi]];
		            }
		        }
		    }());

		    // Precomputed Rcon lookup
		    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

		    /**
		     * AES block cipher algorithm.
		     */
		    var AES = C_algo.AES = BlockCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var key = this._key;
		            var keyWords = key.words;
		            var keySize = key.sigBytes / 4;

		            // Compute number of rounds
		            var nRounds = this._nRounds = keySize + 6

		            // Compute number of key schedule rows
		            var ksRows = (nRounds + 1) * 4;

		            // Compute key schedule
		            var keySchedule = this._keySchedule = [];
		            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
		                if (ksRow < keySize) {
		                    keySchedule[ksRow] = keyWords[ksRow];
		                } else {
		                    var t = keySchedule[ksRow - 1];

		                    if (!(ksRow % keySize)) {
		                        // Rot word
		                        t = (t << 8) | (t >>> 24);

		                        // Sub word
		                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

		                        // Mix Rcon
		                        t ^= RCON[(ksRow / keySize) | 0] << 24;
		                    } else if (keySize > 6 && ksRow % keySize == 4) {
		                        // Sub word
		                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
		                    }

		                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
		                }
		            }

		            // Compute inv key schedule
		            var invKeySchedule = this._invKeySchedule = [];
		            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
		                var ksRow = ksRows - invKsRow;

		                if (invKsRow % 4) {
		                    var t = keySchedule[ksRow];
		                } else {
		                    var t = keySchedule[ksRow - 4];
		                }

		                if (invKsRow < 4 || ksRow <= 4) {
		                    invKeySchedule[invKsRow] = t;
		                } else {
		                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
		                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
		                }
		            }
		        },

		        encryptBlock: function (M, offset) {
		            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
		        },

		        decryptBlock: function (M, offset) {
		            // Swap 2nd and 4th rows
		            var t = M[offset + 1];
		            M[offset + 1] = M[offset + 3];
		            M[offset + 3] = t;

		            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

		            // Inv swap 2nd and 4th rows
		            var t = M[offset + 1];
		            M[offset + 1] = M[offset + 3];
		            M[offset + 3] = t;
		        },

		        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
		            // Shortcut
		            var nRounds = this._nRounds;

		            // Get input, add round key
		            var s0 = M[offset]     ^ keySchedule[0];
		            var s1 = M[offset + 1] ^ keySchedule[1];
		            var s2 = M[offset + 2] ^ keySchedule[2];
		            var s3 = M[offset + 3] ^ keySchedule[3];

		            // Key schedule row counter
		            var ksRow = 4;

		            // Rounds
		            for (var round = 1; round < nRounds; round++) {
		                // Shift rows, sub bytes, mix columns, add round key
		                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
		                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
		                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
		                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

		                // Update state
		                s0 = t0;
		                s1 = t1;
		                s2 = t2;
		                s3 = t3;
		            }

		            // Shift rows, sub bytes, add round key
		            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
		            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
		            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
		            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

		            // Set output
		            M[offset]     = t0;
		            M[offset + 1] = t1;
		            M[offset + 2] = t2;
		            M[offset + 3] = t3;
		        },

		        keySize: 256/32
		    });

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
		     */
		    C.AES = BlockCipher._createHelper(AES);
		}());


		return CryptoJS.AES;

	}));

/***/ },
/* 70 */
/*!*****************************************!*\
  !*** ./app/dl/~/crypto-js/tripledes.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./enc-base64 */ 45), __webpack_require__(/*! ./md5 */ 46), __webpack_require__(/*! ./evpkdf */ 56), __webpack_require__(/*! ./cipher-core */ 57));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var BlockCipher = C_lib.BlockCipher;
		    var C_algo = C.algo;

		    // Permuted Choice 1 constants
		    var PC1 = [
		        57, 49, 41, 33, 25, 17, 9,  1,
		        58, 50, 42, 34, 26, 18, 10, 2,
		        59, 51, 43, 35, 27, 19, 11, 3,
		        60, 52, 44, 36, 63, 55, 47, 39,
		        31, 23, 15, 7,  62, 54, 46, 38,
		        30, 22, 14, 6,  61, 53, 45, 37,
		        29, 21, 13, 5,  28, 20, 12, 4
		    ];

		    // Permuted Choice 2 constants
		    var PC2 = [
		        14, 17, 11, 24, 1,  5,
		        3,  28, 15, 6,  21, 10,
		        23, 19, 12, 4,  26, 8,
		        16, 7,  27, 20, 13, 2,
		        41, 52, 31, 37, 47, 55,
		        30, 40, 51, 45, 33, 48,
		        44, 49, 39, 56, 34, 53,
		        46, 42, 50, 36, 29, 32
		    ];

		    // Cumulative bit shift constants
		    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

		    // SBOXes and round permutation constants
		    var SBOX_P = [
		        {
		            0x0: 0x808200,
		            0x10000000: 0x8000,
		            0x20000000: 0x808002,
		            0x30000000: 0x2,
		            0x40000000: 0x200,
		            0x50000000: 0x808202,
		            0x60000000: 0x800202,
		            0x70000000: 0x800000,
		            0x80000000: 0x202,
		            0x90000000: 0x800200,
		            0xa0000000: 0x8200,
		            0xb0000000: 0x808000,
		            0xc0000000: 0x8002,
		            0xd0000000: 0x800002,
		            0xe0000000: 0x0,
		            0xf0000000: 0x8202,
		            0x8000000: 0x0,
		            0x18000000: 0x808202,
		            0x28000000: 0x8202,
		            0x38000000: 0x8000,
		            0x48000000: 0x808200,
		            0x58000000: 0x200,
		            0x68000000: 0x808002,
		            0x78000000: 0x2,
		            0x88000000: 0x800200,
		            0x98000000: 0x8200,
		            0xa8000000: 0x808000,
		            0xb8000000: 0x800202,
		            0xc8000000: 0x800002,
		            0xd8000000: 0x8002,
		            0xe8000000: 0x202,
		            0xf8000000: 0x800000,
		            0x1: 0x8000,
		            0x10000001: 0x2,
		            0x20000001: 0x808200,
		            0x30000001: 0x800000,
		            0x40000001: 0x808002,
		            0x50000001: 0x8200,
		            0x60000001: 0x200,
		            0x70000001: 0x800202,
		            0x80000001: 0x808202,
		            0x90000001: 0x808000,
		            0xa0000001: 0x800002,
		            0xb0000001: 0x8202,
		            0xc0000001: 0x202,
		            0xd0000001: 0x800200,
		            0xe0000001: 0x8002,
		            0xf0000001: 0x0,
		            0x8000001: 0x808202,
		            0x18000001: 0x808000,
		            0x28000001: 0x800000,
		            0x38000001: 0x200,
		            0x48000001: 0x8000,
		            0x58000001: 0x800002,
		            0x68000001: 0x2,
		            0x78000001: 0x8202,
		            0x88000001: 0x8002,
		            0x98000001: 0x800202,
		            0xa8000001: 0x202,
		            0xb8000001: 0x808200,
		            0xc8000001: 0x800200,
		            0xd8000001: 0x0,
		            0xe8000001: 0x8200,
		            0xf8000001: 0x808002
		        },
		        {
		            0x0: 0x40084010,
		            0x1000000: 0x4000,
		            0x2000000: 0x80000,
		            0x3000000: 0x40080010,
		            0x4000000: 0x40000010,
		            0x5000000: 0x40084000,
		            0x6000000: 0x40004000,
		            0x7000000: 0x10,
		            0x8000000: 0x84000,
		            0x9000000: 0x40004010,
		            0xa000000: 0x40000000,
		            0xb000000: 0x84010,
		            0xc000000: 0x80010,
		            0xd000000: 0x0,
		            0xe000000: 0x4010,
		            0xf000000: 0x40080000,
		            0x800000: 0x40004000,
		            0x1800000: 0x84010,
		            0x2800000: 0x10,
		            0x3800000: 0x40004010,
		            0x4800000: 0x40084010,
		            0x5800000: 0x40000000,
		            0x6800000: 0x80000,
		            0x7800000: 0x40080010,
		            0x8800000: 0x80010,
		            0x9800000: 0x0,
		            0xa800000: 0x4000,
		            0xb800000: 0x40080000,
		            0xc800000: 0x40000010,
		            0xd800000: 0x84000,
		            0xe800000: 0x40084000,
		            0xf800000: 0x4010,
		            0x10000000: 0x0,
		            0x11000000: 0x40080010,
		            0x12000000: 0x40004010,
		            0x13000000: 0x40084000,
		            0x14000000: 0x40080000,
		            0x15000000: 0x10,
		            0x16000000: 0x84010,
		            0x17000000: 0x4000,
		            0x18000000: 0x4010,
		            0x19000000: 0x80000,
		            0x1a000000: 0x80010,
		            0x1b000000: 0x40000010,
		            0x1c000000: 0x84000,
		            0x1d000000: 0x40004000,
		            0x1e000000: 0x40000000,
		            0x1f000000: 0x40084010,
		            0x10800000: 0x84010,
		            0x11800000: 0x80000,
		            0x12800000: 0x40080000,
		            0x13800000: 0x4000,
		            0x14800000: 0x40004000,
		            0x15800000: 0x40084010,
		            0x16800000: 0x10,
		            0x17800000: 0x40000000,
		            0x18800000: 0x40084000,
		            0x19800000: 0x40000010,
		            0x1a800000: 0x40004010,
		            0x1b800000: 0x80010,
		            0x1c800000: 0x0,
		            0x1d800000: 0x4010,
		            0x1e800000: 0x40080010,
		            0x1f800000: 0x84000
		        },
		        {
		            0x0: 0x104,
		            0x100000: 0x0,
		            0x200000: 0x4000100,
		            0x300000: 0x10104,
		            0x400000: 0x10004,
		            0x500000: 0x4000004,
		            0x600000: 0x4010104,
		            0x700000: 0x4010000,
		            0x800000: 0x4000000,
		            0x900000: 0x4010100,
		            0xa00000: 0x10100,
		            0xb00000: 0x4010004,
		            0xc00000: 0x4000104,
		            0xd00000: 0x10000,
		            0xe00000: 0x4,
		            0xf00000: 0x100,
		            0x80000: 0x4010100,
		            0x180000: 0x4010004,
		            0x280000: 0x0,
		            0x380000: 0x4000100,
		            0x480000: 0x4000004,
		            0x580000: 0x10000,
		            0x680000: 0x10004,
		            0x780000: 0x104,
		            0x880000: 0x4,
		            0x980000: 0x100,
		            0xa80000: 0x4010000,
		            0xb80000: 0x10104,
		            0xc80000: 0x10100,
		            0xd80000: 0x4000104,
		            0xe80000: 0x4010104,
		            0xf80000: 0x4000000,
		            0x1000000: 0x4010100,
		            0x1100000: 0x10004,
		            0x1200000: 0x10000,
		            0x1300000: 0x4000100,
		            0x1400000: 0x100,
		            0x1500000: 0x4010104,
		            0x1600000: 0x4000004,
		            0x1700000: 0x0,
		            0x1800000: 0x4000104,
		            0x1900000: 0x4000000,
		            0x1a00000: 0x4,
		            0x1b00000: 0x10100,
		            0x1c00000: 0x4010000,
		            0x1d00000: 0x104,
		            0x1e00000: 0x10104,
		            0x1f00000: 0x4010004,
		            0x1080000: 0x4000000,
		            0x1180000: 0x104,
		            0x1280000: 0x4010100,
		            0x1380000: 0x0,
		            0x1480000: 0x10004,
		            0x1580000: 0x4000100,
		            0x1680000: 0x100,
		            0x1780000: 0x4010004,
		            0x1880000: 0x10000,
		            0x1980000: 0x4010104,
		            0x1a80000: 0x10104,
		            0x1b80000: 0x4000004,
		            0x1c80000: 0x4000104,
		            0x1d80000: 0x4010000,
		            0x1e80000: 0x4,
		            0x1f80000: 0x10100
		        },
		        {
		            0x0: 0x80401000,
		            0x10000: 0x80001040,
		            0x20000: 0x401040,
		            0x30000: 0x80400000,
		            0x40000: 0x0,
		            0x50000: 0x401000,
		            0x60000: 0x80000040,
		            0x70000: 0x400040,
		            0x80000: 0x80000000,
		            0x90000: 0x400000,
		            0xa0000: 0x40,
		            0xb0000: 0x80001000,
		            0xc0000: 0x80400040,
		            0xd0000: 0x1040,
		            0xe0000: 0x1000,
		            0xf0000: 0x80401040,
		            0x8000: 0x80001040,
		            0x18000: 0x40,
		            0x28000: 0x80400040,
		            0x38000: 0x80001000,
		            0x48000: 0x401000,
		            0x58000: 0x80401040,
		            0x68000: 0x0,
		            0x78000: 0x80400000,
		            0x88000: 0x1000,
		            0x98000: 0x80401000,
		            0xa8000: 0x400000,
		            0xb8000: 0x1040,
		            0xc8000: 0x80000000,
		            0xd8000: 0x400040,
		            0xe8000: 0x401040,
		            0xf8000: 0x80000040,
		            0x100000: 0x400040,
		            0x110000: 0x401000,
		            0x120000: 0x80000040,
		            0x130000: 0x0,
		            0x140000: 0x1040,
		            0x150000: 0x80400040,
		            0x160000: 0x80401000,
		            0x170000: 0x80001040,
		            0x180000: 0x80401040,
		            0x190000: 0x80000000,
		            0x1a0000: 0x80400000,
		            0x1b0000: 0x401040,
		            0x1c0000: 0x80001000,
		            0x1d0000: 0x400000,
		            0x1e0000: 0x40,
		            0x1f0000: 0x1000,
		            0x108000: 0x80400000,
		            0x118000: 0x80401040,
		            0x128000: 0x0,
		            0x138000: 0x401000,
		            0x148000: 0x400040,
		            0x158000: 0x80000000,
		            0x168000: 0x80001040,
		            0x178000: 0x40,
		            0x188000: 0x80000040,
		            0x198000: 0x1000,
		            0x1a8000: 0x80001000,
		            0x1b8000: 0x80400040,
		            0x1c8000: 0x1040,
		            0x1d8000: 0x80401000,
		            0x1e8000: 0x400000,
		            0x1f8000: 0x401040
		        },
		        {
		            0x0: 0x80,
		            0x1000: 0x1040000,
		            0x2000: 0x40000,
		            0x3000: 0x20000000,
		            0x4000: 0x20040080,
		            0x5000: 0x1000080,
		            0x6000: 0x21000080,
		            0x7000: 0x40080,
		            0x8000: 0x1000000,
		            0x9000: 0x20040000,
		            0xa000: 0x20000080,
		            0xb000: 0x21040080,
		            0xc000: 0x21040000,
		            0xd000: 0x0,
		            0xe000: 0x1040080,
		            0xf000: 0x21000000,
		            0x800: 0x1040080,
		            0x1800: 0x21000080,
		            0x2800: 0x80,
		            0x3800: 0x1040000,
		            0x4800: 0x40000,
		            0x5800: 0x20040080,
		            0x6800: 0x21040000,
		            0x7800: 0x20000000,
		            0x8800: 0x20040000,
		            0x9800: 0x0,
		            0xa800: 0x21040080,
		            0xb800: 0x1000080,
		            0xc800: 0x20000080,
		            0xd800: 0x21000000,
		            0xe800: 0x1000000,
		            0xf800: 0x40080,
		            0x10000: 0x40000,
		            0x11000: 0x80,
		            0x12000: 0x20000000,
		            0x13000: 0x21000080,
		            0x14000: 0x1000080,
		            0x15000: 0x21040000,
		            0x16000: 0x20040080,
		            0x17000: 0x1000000,
		            0x18000: 0x21040080,
		            0x19000: 0x21000000,
		            0x1a000: 0x1040000,
		            0x1b000: 0x20040000,
		            0x1c000: 0x40080,
		            0x1d000: 0x20000080,
		            0x1e000: 0x0,
		            0x1f000: 0x1040080,
		            0x10800: 0x21000080,
		            0x11800: 0x1000000,
		            0x12800: 0x1040000,
		            0x13800: 0x20040080,
		            0x14800: 0x20000000,
		            0x15800: 0x1040080,
		            0x16800: 0x80,
		            0x17800: 0x21040000,
		            0x18800: 0x40080,
		            0x19800: 0x21040080,
		            0x1a800: 0x0,
		            0x1b800: 0x21000000,
		            0x1c800: 0x1000080,
		            0x1d800: 0x40000,
		            0x1e800: 0x20040000,
		            0x1f800: 0x20000080
		        },
		        {
		            0x0: 0x10000008,
		            0x100: 0x2000,
		            0x200: 0x10200000,
		            0x300: 0x10202008,
		            0x400: 0x10002000,
		            0x500: 0x200000,
		            0x600: 0x200008,
		            0x700: 0x10000000,
		            0x800: 0x0,
		            0x900: 0x10002008,
		            0xa00: 0x202000,
		            0xb00: 0x8,
		            0xc00: 0x10200008,
		            0xd00: 0x202008,
		            0xe00: 0x2008,
		            0xf00: 0x10202000,
		            0x80: 0x10200000,
		            0x180: 0x10202008,
		            0x280: 0x8,
		            0x380: 0x200000,
		            0x480: 0x202008,
		            0x580: 0x10000008,
		            0x680: 0x10002000,
		            0x780: 0x2008,
		            0x880: 0x200008,
		            0x980: 0x2000,
		            0xa80: 0x10002008,
		            0xb80: 0x10200008,
		            0xc80: 0x0,
		            0xd80: 0x10202000,
		            0xe80: 0x202000,
		            0xf80: 0x10000000,
		            0x1000: 0x10002000,
		            0x1100: 0x10200008,
		            0x1200: 0x10202008,
		            0x1300: 0x2008,
		            0x1400: 0x200000,
		            0x1500: 0x10000000,
		            0x1600: 0x10000008,
		            0x1700: 0x202000,
		            0x1800: 0x202008,
		            0x1900: 0x0,
		            0x1a00: 0x8,
		            0x1b00: 0x10200000,
		            0x1c00: 0x2000,
		            0x1d00: 0x10002008,
		            0x1e00: 0x10202000,
		            0x1f00: 0x200008,
		            0x1080: 0x8,
		            0x1180: 0x202000,
		            0x1280: 0x200000,
		            0x1380: 0x10000008,
		            0x1480: 0x10002000,
		            0x1580: 0x2008,
		            0x1680: 0x10202008,
		            0x1780: 0x10200000,
		            0x1880: 0x10202000,
		            0x1980: 0x10200008,
		            0x1a80: 0x2000,
		            0x1b80: 0x202008,
		            0x1c80: 0x200008,
		            0x1d80: 0x0,
		            0x1e80: 0x10000000,
		            0x1f80: 0x10002008
		        },
		        {
		            0x0: 0x100000,
		            0x10: 0x2000401,
		            0x20: 0x400,
		            0x30: 0x100401,
		            0x40: 0x2100401,
		            0x50: 0x0,
		            0x60: 0x1,
		            0x70: 0x2100001,
		            0x80: 0x2000400,
		            0x90: 0x100001,
		            0xa0: 0x2000001,
		            0xb0: 0x2100400,
		            0xc0: 0x2100000,
		            0xd0: 0x401,
		            0xe0: 0x100400,
		            0xf0: 0x2000000,
		            0x8: 0x2100001,
		            0x18: 0x0,
		            0x28: 0x2000401,
		            0x38: 0x2100400,
		            0x48: 0x100000,
		            0x58: 0x2000001,
		            0x68: 0x2000000,
		            0x78: 0x401,
		            0x88: 0x100401,
		            0x98: 0x2000400,
		            0xa8: 0x2100000,
		            0xb8: 0x100001,
		            0xc8: 0x400,
		            0xd8: 0x2100401,
		            0xe8: 0x1,
		            0xf8: 0x100400,
		            0x100: 0x2000000,
		            0x110: 0x100000,
		            0x120: 0x2000401,
		            0x130: 0x2100001,
		            0x140: 0x100001,
		            0x150: 0x2000400,
		            0x160: 0x2100400,
		            0x170: 0x100401,
		            0x180: 0x401,
		            0x190: 0x2100401,
		            0x1a0: 0x100400,
		            0x1b0: 0x1,
		            0x1c0: 0x0,
		            0x1d0: 0x2100000,
		            0x1e0: 0x2000001,
		            0x1f0: 0x400,
		            0x108: 0x100400,
		            0x118: 0x2000401,
		            0x128: 0x2100001,
		            0x138: 0x1,
		            0x148: 0x2000000,
		            0x158: 0x100000,
		            0x168: 0x401,
		            0x178: 0x2100400,
		            0x188: 0x2000001,
		            0x198: 0x2100000,
		            0x1a8: 0x0,
		            0x1b8: 0x2100401,
		            0x1c8: 0x100401,
		            0x1d8: 0x400,
		            0x1e8: 0x2000400,
		            0x1f8: 0x100001
		        },
		        {
		            0x0: 0x8000820,
		            0x1: 0x20000,
		            0x2: 0x8000000,
		            0x3: 0x20,
		            0x4: 0x20020,
		            0x5: 0x8020820,
		            0x6: 0x8020800,
		            0x7: 0x800,
		            0x8: 0x8020000,
		            0x9: 0x8000800,
		            0xa: 0x20800,
		            0xb: 0x8020020,
		            0xc: 0x820,
		            0xd: 0x0,
		            0xe: 0x8000020,
		            0xf: 0x20820,
		            0x80000000: 0x800,
		            0x80000001: 0x8020820,
		            0x80000002: 0x8000820,
		            0x80000003: 0x8000000,
		            0x80000004: 0x8020000,
		            0x80000005: 0x20800,
		            0x80000006: 0x20820,
		            0x80000007: 0x20,
		            0x80000008: 0x8000020,
		            0x80000009: 0x820,
		            0x8000000a: 0x20020,
		            0x8000000b: 0x8020800,
		            0x8000000c: 0x0,
		            0x8000000d: 0x8020020,
		            0x8000000e: 0x8000800,
		            0x8000000f: 0x20000,
		            0x10: 0x20820,
		            0x11: 0x8020800,
		            0x12: 0x20,
		            0x13: 0x800,
		            0x14: 0x8000800,
		            0x15: 0x8000020,
		            0x16: 0x8020020,
		            0x17: 0x20000,
		            0x18: 0x0,
		            0x19: 0x20020,
		            0x1a: 0x8020000,
		            0x1b: 0x8000820,
		            0x1c: 0x8020820,
		            0x1d: 0x20800,
		            0x1e: 0x820,
		            0x1f: 0x8000000,
		            0x80000010: 0x20000,
		            0x80000011: 0x800,
		            0x80000012: 0x8020020,
		            0x80000013: 0x20820,
		            0x80000014: 0x20,
		            0x80000015: 0x8020000,
		            0x80000016: 0x8000000,
		            0x80000017: 0x8000820,
		            0x80000018: 0x8020820,
		            0x80000019: 0x8000020,
		            0x8000001a: 0x8000800,
		            0x8000001b: 0x0,
		            0x8000001c: 0x20800,
		            0x8000001d: 0x820,
		            0x8000001e: 0x20020,
		            0x8000001f: 0x8020800
		        }
		    ];

		    // Masks that select the SBOX input
		    var SBOX_MASK = [
		        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
		        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
		    ];

		    /**
		     * DES block cipher algorithm.
		     */
		    var DES = C_algo.DES = BlockCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var key = this._key;
		            var keyWords = key.words;

		            // Select 56 bits according to PC1
		            var keyBits = [];
		            for (var i = 0; i < 56; i++) {
		                var keyBitPos = PC1[i] - 1;
		                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
		            }

		            // Assemble 16 subkeys
		            var subKeys = this._subKeys = [];
		            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
		                // Create subkey
		                var subKey = subKeys[nSubKey] = [];

		                // Shortcut
		                var bitShift = BIT_SHIFTS[nSubKey];

		                // Select 48 bits according to PC2
		                for (var i = 0; i < 24; i++) {
		                    // Select from the left 28 key bits
		                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);

		                    // Select from the right 28 key bits
		                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
		                }

		                // Since each subkey is applied to an expanded 32-bit input,
		                // the subkey can be broken into 8 values scaled to 32-bits,
		                // which allows the key to be used without expansion
		                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
		                for (var i = 1; i < 7; i++) {
		                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
		                }
		                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
		            }

		            // Compute inverse subkeys
		            var invSubKeys = this._invSubKeys = [];
		            for (var i = 0; i < 16; i++) {
		                invSubKeys[i] = subKeys[15 - i];
		            }
		        },

		        encryptBlock: function (M, offset) {
		            this._doCryptBlock(M, offset, this._subKeys);
		        },

		        decryptBlock: function (M, offset) {
		            this._doCryptBlock(M, offset, this._invSubKeys);
		        },

		        _doCryptBlock: function (M, offset, subKeys) {
		            // Get input
		            this._lBlock = M[offset];
		            this._rBlock = M[offset + 1];

		            // Initial permutation
		            exchangeLR.call(this, 4,  0x0f0f0f0f);
		            exchangeLR.call(this, 16, 0x0000ffff);
		            exchangeRL.call(this, 2,  0x33333333);
		            exchangeRL.call(this, 8,  0x00ff00ff);
		            exchangeLR.call(this, 1,  0x55555555);

		            // Rounds
		            for (var round = 0; round < 16; round++) {
		                // Shortcuts
		                var subKey = subKeys[round];
		                var lBlock = this._lBlock;
		                var rBlock = this._rBlock;

		                // Feistel function
		                var f = 0;
		                for (var i = 0; i < 8; i++) {
		                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
		                }
		                this._lBlock = rBlock;
		                this._rBlock = lBlock ^ f;
		            }

		            // Undo swap from last round
		            var t = this._lBlock;
		            this._lBlock = this._rBlock;
		            this._rBlock = t;

		            // Final permutation
		            exchangeLR.call(this, 1,  0x55555555);
		            exchangeRL.call(this, 8,  0x00ff00ff);
		            exchangeRL.call(this, 2,  0x33333333);
		            exchangeLR.call(this, 16, 0x0000ffff);
		            exchangeLR.call(this, 4,  0x0f0f0f0f);

		            // Set output
		            M[offset] = this._lBlock;
		            M[offset + 1] = this._rBlock;
		        },

		        keySize: 64/32,

		        ivSize: 64/32,

		        blockSize: 64/32
		    });

		    // Swap bits across the left and right words
		    function exchangeLR(offset, mask) {
		        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
		        this._rBlock ^= t;
		        this._lBlock ^= t << offset;
		    }

		    function exchangeRL(offset, mask) {
		        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
		        this._lBlock ^= t;
		        this._rBlock ^= t << offset;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
		     */
		    C.DES = BlockCipher._createHelper(DES);

		    /**
		     * Triple-DES block cipher algorithm.
		     */
		    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var key = this._key;
		            var keyWords = key.words;

		            // Create DES instances
		            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
		            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
		            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
		        },

		        encryptBlock: function (M, offset) {
		            this._des1.encryptBlock(M, offset);
		            this._des2.decryptBlock(M, offset);
		            this._des3.encryptBlock(M, offset);
		        },

		        decryptBlock: function (M, offset) {
		            this._des3.decryptBlock(M, offset);
		            this._des2.encryptBlock(M, offset);
		            this._des1.decryptBlock(M, offset);
		        },

		        keySize: 192/32,

		        ivSize: 64/32,

		        blockSize: 64/32
		    });

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
		     */
		    C.TripleDES = BlockCipher._createHelper(TripleDES);
		}());


		return CryptoJS.TripleDES;

	}));

/***/ },
/* 71 */
/*!***********************************!*\
  !*** ./app/dl/~/crypto-js/rc4.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./enc-base64 */ 45), __webpack_require__(/*! ./md5 */ 46), __webpack_require__(/*! ./evpkdf */ 56), __webpack_require__(/*! ./cipher-core */ 57));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var StreamCipher = C_lib.StreamCipher;
		    var C_algo = C.algo;

		    /**
		     * RC4 stream cipher algorithm.
		     */
		    var RC4 = C_algo.RC4 = StreamCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var key = this._key;
		            var keyWords = key.words;
		            var keySigBytes = key.sigBytes;

		            // Init sbox
		            var S = this._S = [];
		            for (var i = 0; i < 256; i++) {
		                S[i] = i;
		            }

		            // Key setup
		            for (var i = 0, j = 0; i < 256; i++) {
		                var keyByteIndex = i % keySigBytes;
		                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;

		                j = (j + S[i] + keyByte) % 256;

		                // Swap
		                var t = S[i];
		                S[i] = S[j];
		                S[j] = t;
		            }

		            // Counters
		            this._i = this._j = 0;
		        },

		        _doProcessBlock: function (M, offset) {
		            M[offset] ^= generateKeystreamWord.call(this);
		        },

		        keySize: 256/32,

		        ivSize: 0
		    });

		    function generateKeystreamWord() {
		        // Shortcuts
		        var S = this._S;
		        var i = this._i;
		        var j = this._j;

		        // Generate keystream word
		        var keystreamWord = 0;
		        for (var n = 0; n < 4; n++) {
		            i = (i + 1) % 256;
		            j = (j + S[i]) % 256;

		            // Swap
		            var t = S[i];
		            S[i] = S[j];
		            S[j] = t;

		            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
		        }

		        // Update counters
		        this._i = i;
		        this._j = j;

		        return keystreamWord;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
		     */
		    C.RC4 = StreamCipher._createHelper(RC4);

		    /**
		     * Modified RC4 stream cipher algorithm.
		     */
		    var RC4Drop = C_algo.RC4Drop = RC4.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {number} drop The number of keystream words to drop. Default 192
		         */
		        cfg: RC4.cfg.extend({
		            drop: 192
		        }),

		        _doReset: function () {
		            RC4._doReset.call(this);

		            // Drop
		            for (var i = this.cfg.drop; i > 0; i--) {
		                generateKeystreamWord.call(this);
		            }
		        }
		    });

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
		     */
		    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
		}());


		return CryptoJS.RC4;

	}));

/***/ },
/* 72 */
/*!**************************************!*\
  !*** ./app/dl/~/crypto-js/rabbit.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./enc-base64 */ 45), __webpack_require__(/*! ./md5 */ 46), __webpack_require__(/*! ./evpkdf */ 56), __webpack_require__(/*! ./cipher-core */ 57));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var StreamCipher = C_lib.StreamCipher;
		    var C_algo = C.algo;

		    // Reusable objects
		    var S  = [];
		    var C_ = [];
		    var G  = [];

		    /**
		     * Rabbit stream cipher algorithm
		     */
		    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var K = this._key.words;
		            var iv = this.cfg.iv;

		            // Swap endian
		            for (var i = 0; i < 4; i++) {
		                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |
		                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);
		            }

		            // Generate initial state values
		            var X = this._X = [
		                K[0], (K[3] << 16) | (K[2] >>> 16),
		                K[1], (K[0] << 16) | (K[3] >>> 16),
		                K[2], (K[1] << 16) | (K[0] >>> 16),
		                K[3], (K[2] << 16) | (K[1] >>> 16)
		            ];

		            // Generate initial counter values
		            var C = this._C = [
		                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
		                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
		                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
		                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
		            ];

		            // Carry bit
		            this._b = 0;

		            // Iterate the system four times
		            for (var i = 0; i < 4; i++) {
		                nextState.call(this);
		            }

		            // Modify the counters
		            for (var i = 0; i < 8; i++) {
		                C[i] ^= X[(i + 4) & 7];
		            }

		            // IV setup
		            if (iv) {
		                // Shortcuts
		                var IV = iv.words;
		                var IV_0 = IV[0];
		                var IV_1 = IV[1];

		                // Generate four subvectors
		                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
		                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
		                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
		                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

		                // Modify counter values
		                C[0] ^= i0;
		                C[1] ^= i1;
		                C[2] ^= i2;
		                C[3] ^= i3;
		                C[4] ^= i0;
		                C[5] ^= i1;
		                C[6] ^= i2;
		                C[7] ^= i3;

		                // Iterate the system four times
		                for (var i = 0; i < 4; i++) {
		                    nextState.call(this);
		                }
		            }
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcut
		            var X = this._X;

		            // Iterate the system
		            nextState.call(this);

		            // Generate four keystream words
		            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
		            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
		            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
		            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

		            for (var i = 0; i < 4; i++) {
		                // Swap endian
		                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
		                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

		                // Encrypt
		                M[offset + i] ^= S[i];
		            }
		        },

		        blockSize: 128/32,

		        ivSize: 64/32
		    });

		    function nextState() {
		        // Shortcuts
		        var X = this._X;
		        var C = this._C;

		        // Save old counter values
		        for (var i = 0; i < 8; i++) {
		            C_[i] = C[i];
		        }

		        // Calculate new counter values
		        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
		        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
		        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
		        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
		        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
		        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
		        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
		        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
		        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

		        // Calculate the g-values
		        for (var i = 0; i < 8; i++) {
		            var gx = X[i] + C[i];

		            // Construct high and low argument for squaring
		            var ga = gx & 0xffff;
		            var gb = gx >>> 16;

		            // Calculate high and low result of squaring
		            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
		            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

		            // High XOR low
		            G[i] = gh ^ gl;
		        }

		        // Calculate new state values
		        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
		        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
		        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
		        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
		        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
		        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
		        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
		        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
		     */
		    C.Rabbit = StreamCipher._createHelper(Rabbit);
		}());


		return CryptoJS.Rabbit;

	}));

/***/ },
/* 73 */
/*!*********************************************!*\
  !*** ./app/dl/~/crypto-js/rabbit-legacy.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(/*! ./core */ 41), __webpack_require__(/*! ./enc-base64 */ 45), __webpack_require__(/*! ./md5 */ 46), __webpack_require__(/*! ./evpkdf */ 56), __webpack_require__(/*! ./cipher-core */ 57));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var StreamCipher = C_lib.StreamCipher;
		    var C_algo = C.algo;

		    // Reusable objects
		    var S  = [];
		    var C_ = [];
		    var G  = [];

		    /**
		     * Rabbit stream cipher algorithm.
		     *
		     * This is a legacy version that neglected to convert the key to little-endian.
		     * This error doesn't affect the cipher's security,
		     * but it does affect its compatibility with other implementations.
		     */
		    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var K = this._key.words;
		            var iv = this.cfg.iv;

		            // Generate initial state values
		            var X = this._X = [
		                K[0], (K[3] << 16) | (K[2] >>> 16),
		                K[1], (K[0] << 16) | (K[3] >>> 16),
		                K[2], (K[1] << 16) | (K[0] >>> 16),
		                K[3], (K[2] << 16) | (K[1] >>> 16)
		            ];

		            // Generate initial counter values
		            var C = this._C = [
		                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
		                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
		                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
		                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
		            ];

		            // Carry bit
		            this._b = 0;

		            // Iterate the system four times
		            for (var i = 0; i < 4; i++) {
		                nextState.call(this);
		            }

		            // Modify the counters
		            for (var i = 0; i < 8; i++) {
		                C[i] ^= X[(i + 4) & 7];
		            }

		            // IV setup
		            if (iv) {
		                // Shortcuts
		                var IV = iv.words;
		                var IV_0 = IV[0];
		                var IV_1 = IV[1];

		                // Generate four subvectors
		                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
		                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
		                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
		                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

		                // Modify counter values
		                C[0] ^= i0;
		                C[1] ^= i1;
		                C[2] ^= i2;
		                C[3] ^= i3;
		                C[4] ^= i0;
		                C[5] ^= i1;
		                C[6] ^= i2;
		                C[7] ^= i3;

		                // Iterate the system four times
		                for (var i = 0; i < 4; i++) {
		                    nextState.call(this);
		                }
		            }
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcut
		            var X = this._X;

		            // Iterate the system
		            nextState.call(this);

		            // Generate four keystream words
		            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
		            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
		            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
		            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

		            for (var i = 0; i < 4; i++) {
		                // Swap endian
		                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
		                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

		                // Encrypt
		                M[offset + i] ^= S[i];
		            }
		        },

		        blockSize: 128/32,

		        ivSize: 64/32
		    });

		    function nextState() {
		        // Shortcuts
		        var X = this._X;
		        var C = this._C;

		        // Save old counter values
		        for (var i = 0; i < 8; i++) {
		            C_[i] = C[i];
		        }

		        // Calculate new counter values
		        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
		        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
		        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
		        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
		        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
		        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
		        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
		        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
		        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

		        // Calculate the g-values
		        for (var i = 0; i < 8; i++) {
		            var gx = X[i] + C[i];

		            // Construct high and low argument for squaring
		            var ga = gx & 0xffff;
		            var gb = gx >>> 16;

		            // Calculate high and low result of squaring
		            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
		            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

		            // High XOR low
		            G[i] = gh ^ gl;
		        }

		        // Calculate new state values
		        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
		        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
		        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
		        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
		        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
		        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
		        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
		        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
		     */
		    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
		}());


		return CryptoJS.RabbitLegacy;

	}));

/***/ },
/* 74 */
/*!*****************************************!*\
  !*** ./app/dl/src/common/bytebuffer.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	//From bytebuffer 3.5.4 index.js, removed used of __dirname.  Webpack's environment changes __dirname.
	/*var path = require("path"),
	    ByteBufferNB = require( "../../node_modules/bytebuffer/dist/ByteBufferNB.js"),
	    ByteBufferAB = require( "../../node_modules/bytebuffer/dist/ByteBufferAB.js");

	module.exports = ByteBufferNB;
	module.exports.ByteBufferNB = ByteBufferNB; // node Buffer backed
	module.exports.ByteBufferAB = ByteBufferAB; // ArrayBuffer backed
	*/
	'use strict';

	module.exports = __webpack_require__(/*! ../../lib/bytebuffer_3.5.4.js */ 75);
	//module.exports = require('bytebuffer')

/***/ },
/* 75 */
/*!****************************************!*\
  !*** ./app/dl/lib/bytebuffer_3.5.4.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	var require;var require;"use strict";

	(function (f) {
	    if (true) {
	        module.exports = f();
	    } else if (typeof define === "function" && define.amd) {
	        define([], f);
	    } else {
	        var g;if (typeof window !== "undefined") {
	            g = window;
	        } else if (typeof global !== "undefined") {
	            g = global;
	        } else if (typeof self !== "undefined") {
	            g = self;
	        } else {
	            g = this;
	        }g.bytebuffer = f();
	    }
	})(function () {
	    var define, module, exports;return (function e(t, n, r) {
	        function s(o, u) {
	            if (!n[o]) {
	                if (!t[o]) {
	                    var a = typeof require == "function" && require;if (!u && a) return require(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw (f.code = "MODULE_NOT_FOUND", f);
	                }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
	                    var n = t[o][1][e];return s(n ? n : e);
	                }, l, l.exports, e, t, n, r);
	            }return n[o].exports;
	        }var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) s(r[o]);return s;
	    })({ 1: [function (require, module, exports) {
	            /*
	             Copyright 2013-2014 Daniel Wirtz <dcode@dcode.io>
	            
	             Licensed under the Apache License, Version 2.0 (the "License");
	             you may not use this file except in compliance with the License.
	             You may obtain a copy of the License at
	            
	             http://www.apache.org/licenses/LICENSE-2.0
	            
	             Unless required by applicable law or agreed to in writing, software
	             distributed under the License is distributed on an "AS IS" BASIS,
	             WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	             See the License for the specific language governing permissions and
	             limitations under the License.
	             */

	            /**
	             * @license ByteBuffer.js (c) 2013-2014 Daniel Wirtz <dcode@dcode.io>
	             * This version of ByteBuffer.js uses an ArrayBuffer (AB) as its backing buffer and is compatible with modern browsers.
	             * Released under the Apache License, Version 2.0
	             * see: https://github.com/dcodeIO/ByteBuffer.js for details
	             */
	            (function (global) {
	                "use strict";

	                /**
	                 * @param {function(new: Long, number, number, boolean=)=} Long
	                 * @returns {function(new: ByteBuffer, number=, boolean=, boolean=)}}
	                 * @inner
	                 */
	                function loadByteBuffer(Long) {

	                    /**
	                     * Constructs a new ByteBuffer.
	                     * @class The swiss army knife for binary data in JavaScript.
	                     * @exports ByteBuffer
	                     * @constructor
	                     * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.
	                     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	                     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	                     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	                     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	                     * @expose
	                     */
	                    var ByteBuffer = function ByteBuffer(capacity, littleEndian, noAssert) {
	                        if (typeof capacity === 'undefined') capacity = ByteBuffer.DEFAULT_CAPACITY;
	                        if (typeof littleEndian === 'undefined') littleEndian = ByteBuffer.DEFAULT_ENDIAN;
	                        if (typeof noAssert === 'undefined') noAssert = ByteBuffer.DEFAULT_NOASSERT;
	                        if (!noAssert) {
	                            capacity = capacity | 0;
	                            if (capacity < 0) throw RangeError("Illegal capacity");
	                            littleEndian = !!littleEndian;
	                            noAssert = !!noAssert;
	                        }

	                        /**
	                         * Backing buffer.
	                         * @type {!ArrayBuffer}
	                         * @expose
	                         */
	                        this.buffer = capacity === 0 ? EMPTY_BUFFER : new ArrayBuffer(capacity);

	                        /**
	                         * Data view to manipulate the backing buffer. Becomes `null` if the backing buffer has a capacity of `0`.
	                         * @type {?DataView}
	                         * @expose
	                         */
	                        this.view = capacity === 0 ? null : new DataView(this.buffer);

	                        /**
	                         * Absolute read/write offset.
	                         * @type {number}
	                         * @expose
	                         * @see ByteBuffer#flip
	                         * @see ByteBuffer#clear
	                         */
	                        this.offset = 0;

	                        /**
	                         * Marked offset.
	                         * @type {number}
	                         * @expose
	                         * @see ByteBuffer#mark
	                         * @see ByteBuffer#reset
	                         */
	                        this.markedOffset = -1;

	                        /**
	                         * Absolute limit of the contained data. Set to the backing buffer's capacity upon allocation.
	                         * @type {number}
	                         * @expose
	                         * @see ByteBuffer#flip
	                         * @see ByteBuffer#clear
	                         */
	                        this.limit = capacity;

	                        /**
	                         * Whether to use little endian byte order, defaults to `false` for big endian.
	                         * @type {boolean}
	                         * @expose
	                         */
	                        this.littleEndian = typeof littleEndian !== 'undefined' ? !!littleEndian : false;

	                        /**
	                         * Whether to skip assertions of offsets and values, defaults to `false`.
	                         * @type {boolean}
	                         * @expose
	                         */
	                        this.noAssert = !!noAssert;
	                    };

	                    /**
	                     * ByteBuffer version.
	                     * @type {string}
	                     * @const
	                     * @expose
	                     */
	                    ByteBuffer.VERSION = "3.5.4";

	                    /**
	                     * Little endian constant that can be used instead of its boolean value. Evaluates to `true`.
	                     * @type {boolean}
	                     * @const
	                     * @expose
	                     */
	                    ByteBuffer.LITTLE_ENDIAN = true;

	                    /**
	                     * Big endian constant that can be used instead of its boolean value. Evaluates to `false`.
	                     * @type {boolean}
	                     * @const
	                     * @expose
	                     */
	                    ByteBuffer.BIG_ENDIAN = false;

	                    /**
	                     * Default initial capacity of `16`.
	                     * @type {number}
	                     * @expose
	                     */
	                    ByteBuffer.DEFAULT_CAPACITY = 16;

	                    /**
	                     * Default endianess of `false` for big endian.
	                     * @type {boolean}
	                     * @expose
	                     */
	                    ByteBuffer.DEFAULT_ENDIAN = ByteBuffer.BIG_ENDIAN;

	                    /**
	                     * Default no assertions flag of `false`.
	                     * @type {boolean}
	                     * @expose
	                     */
	                    ByteBuffer.DEFAULT_NOASSERT = false;

	                    /**
	                     * A `Long` class for representing a 64-bit two's-complement integer value. May be `null` if Long.js has not been loaded
	                     *  and int64 support is not available.
	                     * @type {?Long}
	                     * @const
	                     * @see https://github.com/dcodeIO/Long.js
	                     * @expose
	                     */
	                    ByteBuffer.Long = Long || null;

	                    /**
	                     * @alias ByteBuffer.prototype
	                     * @inner
	                     */
	                    var ByteBufferPrototype = ByteBuffer.prototype;

	                    // helpers

	                    /**
	                     * @type {!ArrayBuffer}
	                     * @inner
	                     */
	                    var EMPTY_BUFFER = new ArrayBuffer(0);

	                    /**
	                     * String.fromCharCode reference for compile-time renaming.
	                     * @type {function(...number):string}
	                     * @inner
	                     */
	                    var stringFromCharCode = String.fromCharCode;

	                    /**
	                     * Creates a source function for a string.
	                     * @param {string} s String to read from
	                     * @returns {function():number|null} Source function returning the next char code respectively `null` if there are
	                     *  no more characters left.
	                     * @throws {TypeError} If the argument is invalid
	                     * @inner
	                     */
	                    function stringSource(s) {
	                        var i = 0;return function () {
	                            return i < s.length ? s.charCodeAt(i++) : null;
	                        };
	                    }

	                    /**
	                     * Creates a destination function for a string.
	                     * @returns {function(number=):undefined|string} Destination function successively called with the next char code.
	                     *  Returns the final string when called without arguments.
	                     * @inner
	                     */
	                    function stringDestination() {
	                        var cs = [],
	                            ps = [];return function () {
	                            if (arguments.length === 0) return ps.join('') + stringFromCharCode.apply(String, cs);
	                            if (cs.length + arguments.length > 1024) ps.push(stringFromCharCode.apply(String, cs)), cs.length = 0;
	                            Array.prototype.push.apply(cs, arguments);
	                        };
	                    }

	                    /**
	                     * Allocates a new ByteBuffer backed by a buffer of the specified capacity.
	                     * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.
	                     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	                     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	                     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	                     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	                     * @returns {!ByteBuffer}
	                     * @expose
	                     */
	                    ByteBuffer.allocate = function (capacity, littleEndian, noAssert) {
	                        return new ByteBuffer(capacity, littleEndian, noAssert);
	                    };

	                    /**
	                     * Concatenates multiple ByteBuffers into one.
	                     * @param {!Array.<!ByteBuffer|!ArrayBuffer|!Uint8Array|string>} buffers Buffers to concatenate
	                     * @param {(string|boolean)=} encoding String encoding if `buffers` contains a string ("base64", "hex", "binary",
	                     *  defaults to "utf8")
	                     * @param {boolean=} littleEndian Whether to use little or big endian byte order for the resulting ByteBuffer. Defaults
	                     *  to {@link ByteBuffer.DEFAULT_ENDIAN}.
	                     * @param {boolean=} noAssert Whether to skip assertions of offsets and values for the resulting ByteBuffer. Defaults to
	                     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	                     * @returns {!ByteBuffer} Concatenated ByteBuffer
	                     * @expose
	                     */
	                    ByteBuffer.concat = function (buffers, encoding, littleEndian, noAssert) {
	                        if (typeof encoding === 'boolean' || typeof encoding !== 'string') {
	                            noAssert = littleEndian;
	                            littleEndian = encoding;
	                            encoding = undefined;
	                        }
	                        var capacity = 0;
	                        for (var i = 0, k = buffers.length, length; i < k; ++i) {
	                            if (!ByteBuffer.isByteBuffer(buffers[i])) buffers[i] = ByteBuffer.wrap(buffers[i], encoding);
	                            length = buffers[i].limit - buffers[i].offset;
	                            if (length > 0) capacity += length;
	                        }
	                        if (capacity === 0) return new ByteBuffer(0, littleEndian, noAssert);
	                        var bb = new ByteBuffer(capacity, littleEndian, noAssert),
	                            bi;
	                        var view = new Uint8Array(bb.buffer);
	                        i = 0;while (i < k) {
	                            bi = buffers[i++];
	                            length = bi.limit - bi.offset;
	                            if (length <= 0) continue;
	                            view.set(new Uint8Array(bi.buffer).subarray(bi.offset, bi.limit), bb.offset);
	                            bb.offset += length;
	                        }
	                        bb.limit = bb.offset;
	                        bb.offset = 0;
	                        return bb;
	                    };

	                    /**
	                     * Tests if the specified type is a ByteBuffer.
	                     * @param {*} bb ByteBuffer to test
	                     * @returns {boolean} `true` if it is a ByteBuffer, otherwise `false`
	                     * @expose
	                     */
	                    ByteBuffer.isByteBuffer = function (bb) {
	                        return (bb && bb instanceof ByteBuffer) === true;
	                    };
	                    /**
	                     * Gets the backing buffer type.
	                     * @returns {Function} `Buffer` for NB builds, `ArrayBuffer` for AB builds (classes)
	                     * @expose
	                     */
	                    ByteBuffer.type = function () {
	                        return ArrayBuffer;
	                    };

	                    /**
	                     * Wraps a buffer or a string. Sets the allocated ByteBuffer's {@link ByteBuffer#offset} to `0` and its
	                     *  {@link ByteBuffer#limit} to the length of the wrapped data.
	                     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string|!Array.<number>} buffer Anything that can be wrapped
	                     * @param {(string|boolean)=} encoding String encoding if `buffer` is a string ("base64", "hex", "binary", defaults to
	                     *  "utf8")
	                     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	                     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	                     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	                     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	                     * @returns {!ByteBuffer} A ByteBuffer wrapping `buffer`
	                     * @expose
	                     */
	                    ByteBuffer.wrap = function (buffer, encoding, littleEndian, noAssert) {
	                        if (typeof encoding !== 'string') {
	                            noAssert = littleEndian;
	                            littleEndian = encoding;
	                            encoding = undefined;
	                        }
	                        if (typeof buffer === 'string') {
	                            if (typeof encoding === 'undefined') encoding = "utf8";
	                            switch (encoding) {
	                                case "base64":
	                                    return ByteBuffer.fromBase64(buffer, littleEndian);
	                                case "hex":
	                                    return ByteBuffer.fromHex(buffer, littleEndian);
	                                case "binary":
	                                    return ByteBuffer.fromBinary(buffer, littleEndian);
	                                case "utf8":
	                                    return ByteBuffer.fromUTF8(buffer, littleEndian);
	                                case "debug":
	                                    return ByteBuffer.fromDebug(buffer, littleEndian);
	                                default:
	                                    throw Error("Unsupported encoding: " + encoding);
	                            }
	                        }
	                        if (buffer === null || typeof buffer !== 'object') throw TypeError("Illegal buffer");
	                        var bb;
	                        if (ByteBuffer.isByteBuffer(buffer)) {
	                            bb = ByteBufferPrototype.clone.call(buffer);
	                            bb.markedOffset = -1;
	                            return bb;
	                        }
	                        if (buffer instanceof Uint8Array) {
	                            // Extract ArrayBuffer from Uint8Array
	                            bb = new ByteBuffer(0, littleEndian, noAssert);
	                            if (buffer.length > 0) {
	                                // Avoid references to more than one EMPTY_BUFFER
	                                bb.buffer = buffer.buffer;
	                                bb.offset = buffer.byteOffset;
	                                bb.limit = buffer.byteOffset + buffer.length;
	                                bb.view = buffer.length > 0 ? new DataView(buffer.buffer) : null;
	                            }
	                        } else if (buffer instanceof ArrayBuffer) {
	                            // Reuse ArrayBuffer
	                            bb = new ByteBuffer(0, littleEndian, noAssert);
	                            if (buffer.byteLength > 0) {
	                                bb.buffer = buffer;
	                                bb.offset = 0;
	                                bb.limit = buffer.byteLength;
	                                bb.view = buffer.byteLength > 0 ? new DataView(buffer) : null;
	                            }
	                        } else if (Object.prototype.toString.call(buffer) === "[object Array]") {
	                            // Create from octets
	                            bb = new ByteBuffer(buffer.length, littleEndian, noAssert);
	                            bb.limit = buffer.length;
	                            for (i = 0; i < buffer.length; ++i) bb.view.setUint8(i, buffer[i]);
	                        } else throw TypeError("Illegal buffer"); // Otherwise fail
	                        return bb;
	                    };

	                    // types/ints/int8

	                    /**
	                     * Writes an 8bit signed integer.
	                     * @param {number} value Value to write
	                     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     */
	                    ByteBufferPrototype.writeInt8 = function (value, offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof value !== 'number' || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
	                            value |= 0;
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                        }
	                        offset += 1;
	                        var capacity0 = this.buffer.byteLength;
	                        if (offset > capacity0) this.resize((capacity0 *= 2) > offset ? capacity0 : offset);
	                        offset -= 1;
	                        this.view.setInt8(offset, value);
	                        if (relative) this.offset += 1;
	                        return this;
	                    };

	                    /**
	                     * Writes an 8bit signed integer. This is an alias of {@link ByteBuffer#writeInt8}.
	                     * @function
	                     * @param {number} value Value to write
	                     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     */
	                    ByteBufferPrototype.writeByte = ByteBufferPrototype.writeInt8;

	                    /**
	                     * Reads an 8bit signed integer.
	                     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	                     * @returns {number} Value read
	                     * @expose
	                     */
	                    ByteBufferPrototype.readInt8 = function (offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
	                        }
	                        var value = this.view.getInt8(offset);
	                        if (relative) this.offset += 1;
	                        return value;
	                    };

	                    /**
	                     * Reads an 8bit signed integer. This is an alias of {@link ByteBuffer#readInt8}.
	                     * @function
	                     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	                     * @returns {number} Value read
	                     * @expose
	                     */
	                    ByteBufferPrototype.readByte = ByteBufferPrototype.readInt8;

	                    /**
	                     * Writes an 8bit unsigned integer.
	                     * @param {number} value Value to write
	                     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     */
	                    ByteBufferPrototype.writeUint8 = function (value, offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof value !== 'number' || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
	                            value >>>= 0;
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                        }
	                        offset += 1;
	                        var capacity1 = this.buffer.byteLength;
	                        if (offset > capacity1) this.resize((capacity1 *= 2) > offset ? capacity1 : offset);
	                        offset -= 1;
	                        this.view.setUint8(offset, value);
	                        if (relative) this.offset += 1;
	                        return this;
	                    };

	                    /**
	                     * Reads an 8bit unsigned integer.
	                     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	                     * @returns {number} Value read
	                     * @expose
	                     */
	                    ByteBufferPrototype.readUint8 = function (offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
	                        }
	                        var value = this.view.getUint8(offset);
	                        if (relative) this.offset += 1;
	                        return value;
	                    };

	                    // types/ints/int16

	                    /**
	                     * Writes a 16bit signed integer.
	                     * @param {number} value Value to write
	                     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	                     * @throws {TypeError} If `offset` or `value` is not a valid number
	                     * @throws {RangeError} If `offset` is out of bounds
	                     * @expose
	                     */
	                    ByteBufferPrototype.writeInt16 = function (value, offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof value !== 'number' || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
	                            value |= 0;
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                        }
	                        offset += 2;
	                        var capacity2 = this.buffer.byteLength;
	                        if (offset > capacity2) this.resize((capacity2 *= 2) > offset ? capacity2 : offset);
	                        offset -= 2;
	                        this.view.setInt16(offset, value, this.littleEndian);
	                        if (relative) this.offset += 2;
	                        return this;
	                    };

	                    /**
	                     * Writes a 16bit signed integer. This is an alias of {@link ByteBuffer#writeInt16}.
	                     * @function
	                     * @param {number} value Value to write
	                     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	                     * @throws {TypeError} If `offset` or `value` is not a valid number
	                     * @throws {RangeError} If `offset` is out of bounds
	                     * @expose
	                     */
	                    ByteBufferPrototype.writeShort = ByteBufferPrototype.writeInt16;

	                    /**
	                     * Reads a 16bit signed integer.
	                     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	                     * @returns {number} Value read
	                     * @throws {TypeError} If `offset` is not a valid number
	                     * @throws {RangeError} If `offset` is out of bounds
	                     * @expose
	                     */
	                    ByteBufferPrototype.readInt16 = function (offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 2 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 2 + ") <= " + this.buffer.byteLength);
	                        }
	                        var value = this.view.getInt16(offset, this.littleEndian);
	                        if (relative) this.offset += 2;
	                        return value;
	                    };

	                    /**
	                     * Reads a 16bit signed integer. This is an alias of {@link ByteBuffer#readInt16}.
	                     * @function
	                     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	                     * @returns {number} Value read
	                     * @throws {TypeError} If `offset` is not a valid number
	                     * @throws {RangeError} If `offset` is out of bounds
	                     * @expose
	                     */
	                    ByteBufferPrototype.readShort = ByteBufferPrototype.readInt16;

	                    /**
	                     * Writes a 16bit unsigned integer.
	                     * @param {number} value Value to write
	                     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	                     * @throws {TypeError} If `offset` or `value` is not a valid number
	                     * @throws {RangeError} If `offset` is out of bounds
	                     * @expose
	                     */
	                    ByteBufferPrototype.writeUint16 = function (value, offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof value !== 'number' || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
	                            value >>>= 0;
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                        }
	                        offset += 2;
	                        var capacity3 = this.buffer.byteLength;
	                        if (offset > capacity3) this.resize((capacity3 *= 2) > offset ? capacity3 : offset);
	                        offset -= 2;
	                        this.view.setUint16(offset, value, this.littleEndian);
	                        if (relative) this.offset += 2;
	                        return this;
	                    };

	                    /**
	                     * Reads a 16bit unsigned integer.
	                     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	                     * @returns {number} Value read
	                     * @throws {TypeError} If `offset` is not a valid number
	                     * @throws {RangeError} If `offset` is out of bounds
	                     * @expose
	                     */
	                    ByteBufferPrototype.readUint16 = function (offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 2 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 2 + ") <= " + this.buffer.byteLength);
	                        }
	                        var value = this.view.getUint16(offset, this.littleEndian);
	                        if (relative) this.offset += 2;
	                        return value;
	                    };

	                    // types/ints/int32

	                    /**
	                     * Writes a 32bit signed integer.
	                     * @param {number} value Value to write
	                     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	                     * @expose
	                     */
	                    ByteBufferPrototype.writeInt32 = function (value, offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof value !== 'number' || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
	                            value |= 0;
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                        }
	                        offset += 4;
	                        var capacity4 = this.buffer.byteLength;
	                        if (offset > capacity4) this.resize((capacity4 *= 2) > offset ? capacity4 : offset);
	                        offset -= 4;
	                        this.view.setInt32(offset, value, this.littleEndian);
	                        if (relative) this.offset += 4;
	                        return this;
	                    };

	                    /**
	                     * Writes a 32bit signed integer. This is an alias of {@link ByteBuffer#writeInt32}.
	                     * @param {number} value Value to write
	                     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	                     * @expose
	                     */
	                    ByteBufferPrototype.writeInt = ByteBufferPrototype.writeInt32;

	                    /**
	                     * Reads a 32bit signed integer.
	                     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	                     * @returns {number} Value read
	                     * @expose
	                     */
	                    ByteBufferPrototype.readInt32 = function (offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 4 + ") <= " + this.buffer.byteLength);
	                        }
	                        var value = this.view.getInt32(offset, this.littleEndian);
	                        if (relative) this.offset += 4;
	                        return value;
	                    };

	                    /**
	                     * Reads a 32bit signed integer. This is an alias of {@link ByteBuffer#readInt32}.
	                     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `4` if omitted.
	                     * @returns {number} Value read
	                     * @expose
	                     */
	                    ByteBufferPrototype.readInt = ByteBufferPrototype.readInt32;

	                    /**
	                     * Writes a 32bit unsigned integer.
	                     * @param {number} value Value to write
	                     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	                     * @expose
	                     */
	                    ByteBufferPrototype.writeUint32 = function (value, offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof value !== 'number' || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
	                            value >>>= 0;
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                        }
	                        offset += 4;
	                        var capacity5 = this.buffer.byteLength;
	                        if (offset > capacity5) this.resize((capacity5 *= 2) > offset ? capacity5 : offset);
	                        offset -= 4;
	                        this.view.setUint32(offset, value, this.littleEndian);
	                        if (relative) this.offset += 4;
	                        return this;
	                    };

	                    /**
	                     * Reads a 32bit unsigned integer.
	                     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	                     * @returns {number} Value read
	                     * @expose
	                     */
	                    ByteBufferPrototype.readUint32 = function (offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 4 + ") <= " + this.buffer.byteLength);
	                        }
	                        var value = this.view.getUint32(offset, this.littleEndian);
	                        if (relative) this.offset += 4;
	                        return value;
	                    };

	                    // types/ints/int64

	                    if (Long) {

	                        /**
	                         * Writes a 64bit signed integer.
	                         * @param {number|!Long} value Value to write
	                         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	                         * @returns {!ByteBuffer} this
	                         * @expose
	                         */
	                        ByteBufferPrototype.writeInt64 = function (value, offset) {
	                            var relative = typeof offset === 'undefined';
	                            if (relative) offset = this.offset;
	                            if (!this.noAssert) {
	                                if (typeof value === 'number') value = Long.fromNumber(value);else if (!(value && value instanceof Long)) throw TypeError("Illegal value: " + value + " (not an integer or Long)");
	                                if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                                offset >>>= 0;
	                                if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                            }
	                            if (typeof value === 'number') value = Long.fromNumber(value);
	                            offset += 8;
	                            var capacity6 = this.buffer.byteLength;
	                            if (offset > capacity6) this.resize((capacity6 *= 2) > offset ? capacity6 : offset);
	                            offset -= 8;
	                            if (this.littleEndian) {
	                                this.view.setInt32(offset, value.low, true);
	                                this.view.setInt32(offset + 4, value.high, true);
	                            } else {
	                                this.view.setInt32(offset, value.high, false);
	                                this.view.setInt32(offset + 4, value.low, false);
	                            }
	                            if (relative) this.offset += 8;
	                            return this;
	                        };

	                        /**
	                         * Writes a 64bit signed integer. This is an alias of {@link ByteBuffer#writeInt64}.
	                         * @param {number|!Long} value Value to write
	                         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	                         * @returns {!ByteBuffer} this
	                         * @expose
	                         */
	                        ByteBufferPrototype.writeLong = ByteBufferPrototype.writeInt64;

	                        /**
	                         * Reads a 64bit signed integer.
	                         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	                         * @returns {!Long}
	                         * @expose
	                         */
	                        ByteBufferPrototype.readInt64 = function (offset) {
	                            var relative = typeof offset === 'undefined';
	                            if (relative) offset = this.offset;
	                            if (!this.noAssert) {
	                                if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                                offset >>>= 0;
	                                if (offset < 0 || offset + 8 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 8 + ") <= " + this.buffer.byteLength);
	                            }
	                            var value = this.littleEndian ? new Long(this.view.getInt32(offset, true), this.view.getInt32(offset + 4, true), false) : new Long(this.view.getInt32(offset + 4, false), this.view.getInt32(offset, false), false);
	                            if (relative) this.offset += 8;
	                            return value;
	                        };

	                        /**
	                         * Reads a 64bit signed integer. This is an alias of {@link ByteBuffer#readInt64}.
	                         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	                         * @returns {!Long}
	                         * @expose
	                         */
	                        ByteBufferPrototype.readLong = ByteBufferPrototype.readInt64;

	                        /**
	                         * Writes a 64bit unsigned integer.
	                         * @param {number|!Long} value Value to write
	                         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	                         * @returns {!ByteBuffer} this
	                         * @expose
	                         */
	                        ByteBufferPrototype.writeUint64 = function (value, offset) {
	                            var relative = typeof offset === 'undefined';
	                            if (relative) offset = this.offset;
	                            if (!this.noAssert) {
	                                if (typeof value === 'number') value = Long.fromNumber(value);else if (!(value && value instanceof Long)) throw TypeError("Illegal value: " + value + " (not an integer or Long)");
	                                if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                                offset >>>= 0;
	                                if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                            }
	                            if (typeof value === 'number') value = Long.fromNumber(value);
	                            offset += 8;
	                            var capacity7 = this.buffer.byteLength;
	                            if (offset > capacity7) this.resize((capacity7 *= 2) > offset ? capacity7 : offset);
	                            offset -= 8;
	                            if (this.littleEndian) {
	                                this.view.setInt32(offset, value.low, true);
	                                this.view.setInt32(offset + 4, value.high, true);
	                            } else {
	                                this.view.setInt32(offset, value.high, false);
	                                this.view.setInt32(offset + 4, value.low, false);
	                            }
	                            if (relative) this.offset += 8;
	                            return this;
	                        };

	                        /**
	                         * Reads a 64bit unsigned integer.
	                         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	                         * @returns {!Long}
	                         * @expose
	                         */
	                        ByteBufferPrototype.readUint64 = function (offset) {
	                            var relative = typeof offset === 'undefined';
	                            if (relative) offset = this.offset;
	                            if (!this.noAssert) {
	                                if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                                offset >>>= 0;
	                                if (offset < 0 || offset + 8 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 8 + ") <= " + this.buffer.byteLength);
	                            }
	                            var value = this.littleEndian ? new Long(this.view.getInt32(offset, true), this.view.getInt32(offset + 4, true), true) : new Long(this.view.getInt32(offset + 4, false), this.view.getInt32(offset, false), true);
	                            if (relative) this.offset += 8;
	                            return value;
	                        };
	                    } // Long

	                    // types/floats/float32

	                    /**
	                     * Writes a 32bit float.
	                     * @param {number} value Value to write
	                     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     */
	                    ByteBufferPrototype.writeFloat32 = function (value, offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof value !== 'number') throw TypeError("Illegal value: " + value + " (not a number)");
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                        }
	                        offset += 4;
	                        var capacity8 = this.buffer.byteLength;
	                        if (offset > capacity8) this.resize((capacity8 *= 2) > offset ? capacity8 : offset);
	                        offset -= 4;
	                        this.view.setFloat32(offset, value, this.littleEndian);
	                        if (relative) this.offset += 4;
	                        return this;
	                    };

	                    /**
	                     * Writes a 32bit float. This is an alias of {@link ByteBuffer#writeFloat32}.
	                     * @function
	                     * @param {number} value Value to write
	                     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     */
	                    ByteBufferPrototype.writeFloat = ByteBufferPrototype.writeFloat32;

	                    /**
	                     * Reads a 32bit float.
	                     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	                     * @returns {number}
	                     * @expose
	                     */
	                    ByteBufferPrototype.readFloat32 = function (offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 4 + ") <= " + this.buffer.byteLength);
	                        }
	                        var value = this.view.getFloat32(offset, this.littleEndian);
	                        if (relative) this.offset += 4;
	                        return value;
	                    };

	                    /**
	                     * Reads a 32bit float. This is an alias of {@link ByteBuffer#readFloat32}.
	                     * @function
	                     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	                     * @returns {number}
	                     * @expose
	                     */
	                    ByteBufferPrototype.readFloat = ByteBufferPrototype.readFloat32;

	                    // types/floats/float64

	                    /**
	                     * Writes a 64bit float.
	                     * @param {number} value Value to write
	                     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     */
	                    ByteBufferPrototype.writeFloat64 = function (value, offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof value !== 'number') throw TypeError("Illegal value: " + value + " (not a number)");
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                        }
	                        offset += 8;
	                        var capacity9 = this.buffer.byteLength;
	                        if (offset > capacity9) this.resize((capacity9 *= 2) > offset ? capacity9 : offset);
	                        offset -= 8;
	                        this.view.setFloat64(offset, value, this.littleEndian);
	                        if (relative) this.offset += 8;
	                        return this;
	                    };

	                    /**
	                     * Writes a 64bit float. This is an alias of {@link ByteBuffer#writeFloat64}.
	                     * @function
	                     * @param {number} value Value to write
	                     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     */
	                    ByteBufferPrototype.writeDouble = ByteBufferPrototype.writeFloat64;

	                    /**
	                     * Reads a 64bit float.
	                     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	                     * @returns {number}
	                     * @expose
	                     */
	                    ByteBufferPrototype.readFloat64 = function (offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 8 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 8 + ") <= " + this.buffer.byteLength);
	                        }
	                        var value = this.view.getFloat64(offset, this.littleEndian);
	                        if (relative) this.offset += 8;
	                        return value;
	                    };

	                    /**
	                     * Reads a 64bit float. This is an alias of {@link ByteBuffer#readFloat64}.
	                     * @function
	                     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	                     * @returns {number}
	                     * @expose
	                     */
	                    ByteBufferPrototype.readDouble = ByteBufferPrototype.readFloat64;

	                    // types/varints/varint32

	                    /**
	                     * Maximum number of bytes required to store a 32bit base 128 variable-length integer.
	                     * @type {number}
	                     * @const
	                     * @expose
	                     */
	                    ByteBuffer.MAX_VARINT32_BYTES = 5;

	                    /**
	                     * Calculates the actual number of bytes required to store a 32bit base 128 variable-length integer.
	                     * @param {number} value Value to encode
	                     * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT32_BYTES}
	                     * @expose
	                     */
	                    ByteBuffer.calculateVarint32 = function (value) {
	                        // ref: src/google/protobuf/io/coded_stream.cc
	                        value = value >>> 0;
	                        if (value < 1 << 7) return 1;else if (value < 1 << 14) return 2;else if (value < 1 << 21) return 3;else if (value < 1 << 28) return 4;else return 5;
	                    };

	                    /**
	                     * Zigzag encodes a signed 32bit integer so that it can be effectively used with varint encoding.
	                     * @param {number} n Signed 32bit integer
	                     * @returns {number} Unsigned zigzag encoded 32bit integer
	                     * @expose
	                     */
	                    ByteBuffer.zigZagEncode32 = function (n) {
	                        return ((n |= 0) << 1 ^ n >> 31) >>> 0; // ref: src/google/protobuf/wire_format_lite.h
	                    };

	                    /**
	                     * Decodes a zigzag encoded signed 32bit integer.
	                     * @param {number} n Unsigned zigzag encoded 32bit integer
	                     * @returns {number} Signed 32bit integer
	                     * @expose
	                     */
	                    ByteBuffer.zigZagDecode32 = function (n) {
	                        return n >>> 1 ^ -(n & 1) | 0; // // ref: src/google/protobuf/wire_format_lite.h
	                    };

	                    /**
	                     * Writes a 32bit base 128 variable-length integer.
	                     * @param {number} value Value to write
	                     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                     *  written if omitted.
	                     * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written
	                     * @expose
	                     */
	                    ByteBufferPrototype.writeVarint32 = function (value, offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof value !== 'number' || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
	                            value |= 0;
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                        }
	                        var size = ByteBuffer.calculateVarint32(value),
	                            b;
	                        offset += size;
	                        var capacity10 = this.buffer.byteLength;
	                        if (offset > capacity10) this.resize((capacity10 *= 2) > offset ? capacity10 : offset);
	                        offset -= size;
	                        // ref: http://code.google.com/searchframe#WTeibokF6gE/trunk/src/google/protobuf/io/coded_stream.cc
	                        this.view.setUint8(offset, b = value | 0x80);
	                        value >>>= 0;
	                        if (value >= 1 << 7) {
	                            b = value >> 7 | 0x80;
	                            this.view.setUint8(offset + 1, b);
	                            if (value >= 1 << 14) {
	                                b = value >> 14 | 0x80;
	                                this.view.setUint8(offset + 2, b);
	                                if (value >= 1 << 21) {
	                                    b = value >> 21 | 0x80;
	                                    this.view.setUint8(offset + 3, b);
	                                    if (value >= 1 << 28) {
	                                        this.view.setUint8(offset + 4, value >> 28 & 0x0F);
	                                        size = 5;
	                                    } else {
	                                        this.view.setUint8(offset + 3, b & 0x7F);
	                                        size = 4;
	                                    }
	                                } else {
	                                    this.view.setUint8(offset + 2, b & 0x7F);
	                                    size = 3;
	                                }
	                            } else {
	                                this.view.setUint8(offset + 1, b & 0x7F);
	                                size = 2;
	                            }
	                        } else {
	                            this.view.setUint8(offset, b & 0x7F);
	                            size = 1;
	                        }
	                        if (relative) {
	                            this.offset += size;
	                            return this;
	                        }
	                        return size;
	                    };

	                    /**
	                     * Writes a zig-zag encoded 32bit base 128 variable-length integer.
	                     * @param {number} value Value to write
	                     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                     *  written if omitted.
	                     * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written
	                     * @expose
	                     */
	                    ByteBufferPrototype.writeVarint32ZigZag = function (value, offset) {
	                        return this.writeVarint32(ByteBuffer.zigZagEncode32(value), offset);
	                    };

	                    /**
	                     * Reads a 32bit base 128 variable-length integer.
	                     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                     *  written if omitted.
	                     * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read
	                     *  and the actual number of bytes read.
	                     * @throws {Error} If it's not a valid varint. Has a property `truncated = true` if there is not enough data available
	                     *  to fully decode the varint.
	                     * @expose
	                     */
	                    ByteBufferPrototype.readVarint32 = function (offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
	                        }
	                        // ref: src/google/protobuf/io/coded_stream.cc
	                        var size = 0,
	                            value = 0 >>> 0,
	                            temp,
	                            ioffset;
	                        do {
	                            ioffset = offset + size;
	                            if (!this.noAssert && ioffset > this.limit) {
	                                var err = Error("Truncated");
	                                err['truncated'] = true;
	                                throw err;
	                            }
	                            temp = this.view.getUint8(ioffset);
	                            if (size < 5) value |= (temp & 0x7F) << 7 * size >>> 0;
	                            ++size;
	                        } while ((temp & 0x80) === 0x80);
	                        value = value | 0; // Make sure to discard the higher order bits
	                        if (relative) {
	                            this.offset += size;
	                            return value;
	                        }
	                        return {
	                            "value": value,
	                            "length": size
	                        };
	                    };

	                    /**
	                     * Reads a zig-zag encoded 32bit base 128 variable-length integer.
	                     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                     *  written if omitted.
	                     * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read
	                     *  and the actual number of bytes read.
	                     * @throws {Error} If it's not a valid varint
	                     * @expose
	                     */
	                    ByteBufferPrototype.readVarint32ZigZag = function (offset) {
	                        var val = this.readVarint32(offset);
	                        if (typeof val === 'object') val["value"] = ByteBuffer.zigZagDecode32(val["value"]);else val = ByteBuffer.zigZagDecode32(val);
	                        return val;
	                    };

	                    // types/varints/varint64

	                    if (Long) {

	                        /**
	                         * Maximum number of bytes required to store a 64bit base 128 variable-length integer.
	                         * @type {number}
	                         * @const
	                         * @expose
	                         */
	                        ByteBuffer.MAX_VARINT64_BYTES = 10;

	                        /**
	                         * Calculates the actual number of bytes required to store a 64bit base 128 variable-length integer.
	                         * @param {number|!Long} value Value to encode
	                         * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT64_BYTES}
	                         * @expose
	                         */
	                        ByteBuffer.calculateVarint64 = function (value) {
	                            if (typeof value === 'number') value = Long.fromNumber(value);
	                            // ref: src/google/protobuf/io/coded_stream.cc
	                            var part0 = value.toInt() >>> 0,
	                                part1 = value.shiftRightUnsigned(28).toInt() >>> 0,
	                                part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
	                            if (part2 == 0) {
	                                if (part1 == 0) {
	                                    if (part0 < 1 << 14) return part0 < 1 << 7 ? 1 : 2;else return part0 < 1 << 21 ? 3 : 4;
	                                } else {
	                                    if (part1 < 1 << 14) return part1 < 1 << 7 ? 5 : 6;else return part1 < 1 << 21 ? 7 : 8;
	                                }
	                            } else return part2 < 1 << 7 ? 9 : 10;
	                        };

	                        /**
	                         * Zigzag encodes a signed 64bit integer so that it can be effectively used with varint encoding.
	                         * @param {number|!Long} value Signed long
	                         * @returns {!Long} Unsigned zigzag encoded long
	                         * @expose
	                         */
	                        ByteBuffer.zigZagEncode64 = function (value) {
	                            if (typeof value === 'number') value = Long.fromNumber(value, false);else if (value.unsigned !== false) value = value.toSigned();
	                            // ref: src/google/protobuf/wire_format_lite.h
	                            return value.shiftLeft(1).xor(value.shiftRight(63)).toUnsigned();
	                        };

	                        /**
	                         * Decodes a zigzag encoded signed 64bit integer.
	                         * @param {!Long|number} value Unsigned zigzag encoded long or JavaScript number
	                         * @returns {!Long} Signed long
	                         * @expose
	                         */
	                        ByteBuffer.zigZagDecode64 = function (value) {
	                            if (typeof value === 'number') value = Long.fromNumber(value, false);else if (value.unsigned !== false) value = value.toSigned();
	                            // ref: src/google/protobuf/wire_format_lite.h
	                            return value.shiftRightUnsigned(1).xor(value.and(Long.ONE).toSigned().negate()).toSigned();
	                        };

	                        /**
	                         * Writes a 64bit base 128 variable-length integer.
	                         * @param {number|Long} value Value to write
	                         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                         *  written if omitted.
	                         * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.
	                         * @expose
	                         */
	                        ByteBufferPrototype.writeVarint64 = function (value, offset) {
	                            var relative = typeof offset === 'undefined';
	                            if (relative) offset = this.offset;
	                            if (!this.noAssert) {
	                                if (typeof value === 'number') value = Long.fromNumber(value);else if (!(value && value instanceof Long)) throw TypeError("Illegal value: " + value + " (not an integer or Long)");
	                                if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                                offset >>>= 0;
	                                if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                            }
	                            if (typeof value === 'number') value = Long.fromNumber(value, false);else if (value.unsigned !== false) value = value.toSigned();
	                            var size = ByteBuffer.calculateVarint64(value),
	                                part0 = value.toInt() >>> 0,
	                                part1 = value.shiftRightUnsigned(28).toInt() >>> 0,
	                                part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
	                            offset += size;
	                            var capacity11 = this.buffer.byteLength;
	                            if (offset > capacity11) this.resize((capacity11 *= 2) > offset ? capacity11 : offset);
	                            offset -= size;
	                            switch (size) {
	                                case 10:
	                                    this.view.setUint8(offset + 9, part2 >>> 7 & 0x01);
	                                case 9:
	                                    this.view.setUint8(offset + 8, size !== 9 ? part2 | 0x80 : part2 & 0x7F);
	                                case 8:
	                                    this.view.setUint8(offset + 7, size !== 8 ? part1 >>> 21 | 0x80 : part1 >>> 21 & 0x7F);
	                                case 7:
	                                    this.view.setUint8(offset + 6, size !== 7 ? part1 >>> 14 | 0x80 : part1 >>> 14 & 0x7F);
	                                case 6:
	                                    this.view.setUint8(offset + 5, size !== 6 ? part1 >>> 7 | 0x80 : part1 >>> 7 & 0x7F);
	                                case 5:
	                                    this.view.setUint8(offset + 4, size !== 5 ? part1 | 0x80 : part1 & 0x7F);
	                                case 4:
	                                    this.view.setUint8(offset + 3, size !== 4 ? part0 >>> 21 | 0x80 : part0 >>> 21 & 0x7F);
	                                case 3:
	                                    this.view.setUint8(offset + 2, size !== 3 ? part0 >>> 14 | 0x80 : part0 >>> 14 & 0x7F);
	                                case 2:
	                                    this.view.setUint8(offset + 1, size !== 2 ? part0 >>> 7 | 0x80 : part0 >>> 7 & 0x7F);
	                                case 1:
	                                    this.view.setUint8(offset, size !== 1 ? part0 | 0x80 : part0 & 0x7F);
	                            }
	                            if (relative) {
	                                this.offset += size;
	                                return this;
	                            } else {
	                                return size;
	                            }
	                        };

	                        /**
	                         * Writes a zig-zag encoded 64bit base 128 variable-length integer.
	                         * @param {number|Long} value Value to write
	                         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                         *  written if omitted.
	                         * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.
	                         * @expose
	                         */
	                        ByteBufferPrototype.writeVarint64ZigZag = function (value, offset) {
	                            return this.writeVarint64(ByteBuffer.zigZagEncode64(value), offset);
	                        };

	                        /**
	                         * Reads a 64bit base 128 variable-length integer. Requires Long.js.
	                         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                         *  read if omitted.
	                         * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and
	                         *  the actual number of bytes read.
	                         * @throws {Error} If it's not a valid varint
	                         * @expose
	                         */
	                        ByteBufferPrototype.readVarint64 = function (offset) {
	                            var relative = typeof offset === 'undefined';
	                            if (relative) offset = this.offset;
	                            if (!this.noAssert) {
	                                if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                                offset >>>= 0;
	                                if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
	                            }
	                            // ref: src/google/protobuf/io/coded_stream.cc
	                            var start = offset,
	                                part0 = 0,
	                                part1 = 0,
	                                part2 = 0,
	                                b = 0;
	                            b = this.view.getUint8(offset++);part0 = b & 0x7F;if (b & 0x80) {
	                                b = this.view.getUint8(offset++);part0 |= (b & 0x7F) << 7;if (b & 0x80) {
	                                    b = this.view.getUint8(offset++);part0 |= (b & 0x7F) << 14;if (b & 0x80) {
	                                        b = this.view.getUint8(offset++);part0 |= (b & 0x7F) << 21;if (b & 0x80) {
	                                            b = this.view.getUint8(offset++);part1 = b & 0x7F;if (b & 0x80) {
	                                                b = this.view.getUint8(offset++);part1 |= (b & 0x7F) << 7;if (b & 0x80) {
	                                                    b = this.view.getUint8(offset++);part1 |= (b & 0x7F) << 14;if (b & 0x80) {
	                                                        b = this.view.getUint8(offset++);part1 |= (b & 0x7F) << 21;if (b & 0x80) {
	                                                            b = this.view.getUint8(offset++);part2 = b & 0x7F;if (b & 0x80) {
	                                                                b = this.view.getUint8(offset++);part2 |= (b & 0x7F) << 7;if (b & 0x80) {
	                                                                    throw Error("Buffer overrun");
	                                                                }
	                                                            }
	                                                        }
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            var value = Long.fromBits(part0 | part1 << 28, part1 >>> 4 | part2 << 24, false);
	                            if (relative) {
	                                this.offset = offset;
	                                return value;
	                            } else {
	                                return {
	                                    'value': value,
	                                    'length': offset - start
	                                };
	                            }
	                        };

	                        /**
	                         * Reads a zig-zag encoded 64bit base 128 variable-length integer. Requires Long.js.
	                         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                         *  read if omitted.
	                         * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and
	                         *  the actual number of bytes read.
	                         * @throws {Error} If it's not a valid varint
	                         * @expose
	                         */
	                        ByteBufferPrototype.readVarint64ZigZag = function (offset) {
	                            var val = this.readVarint64(offset);
	                            if (val && val['value'] instanceof Long) val["value"] = ByteBuffer.zigZagDecode64(val["value"]);else val = ByteBuffer.zigZagDecode64(val);
	                            return val;
	                        };
	                    } // Long

	                    // types/strings/cstring

	                    /**
	                     * Writes a NULL-terminated UTF8 encoded string. For this to work the specified string must not contain any NULL
	                     *  characters itself.
	                     * @param {string} str String to write
	                     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                     *  contained in `str` + 1 if omitted.
	                     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written
	                     * @expose
	                     */
	                    ByteBufferPrototype.writeCString = function (str, offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        var i,
	                            k = str.length;
	                        if (!this.noAssert) {
	                            if (typeof str !== 'string') throw TypeError("Illegal str: Not a string");
	                            for (i = 0; i < k; ++i) {
	                                if (str.charCodeAt(i) === 0) throw RangeError("Illegal str: Contains NULL-characters");
	                            }
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                        }
	                        var start = offset;
	                        // UTF8 strings do not contain zero bytes in between except for the zero character, so:
	                        k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
	                        offset += k + 1;
	                        var capacity12 = this.buffer.byteLength;
	                        if (offset > capacity12) this.resize((capacity12 *= 2) > offset ? capacity12 : offset);
	                        offset -= k + 1;
	                        utfx.encodeUTF16toUTF8(stringSource(str), (function (b) {
	                            this.view.setUint8(offset++, b);
	                        }).bind(this));
	                        this.view.setUint8(offset++, 0);
	                        if (relative) {
	                            this.offset = offset - start;
	                            return this;
	                        }
	                        return k;
	                    };

	                    /**
	                     * Reads a NULL-terminated UTF8 encoded string. For this to work the string read must not contain any NULL characters
	                     *  itself.
	                     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                     *  read if omitted.
	                     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
	                     *  read and the actual number of bytes read.
	                     * @expose
	                     */
	                    ByteBufferPrototype.readCString = function (offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
	                        }
	                        var start = offset,
	                            temp;
	                        // UTF8 strings do not contain zero bytes in between except for the zero character itself, so:
	                        var sd,
	                            b = -1;
	                        utfx.decodeUTF8toUTF16((function () {
	                            if (b === 0) return null;
	                            if (offset >= this.limit) throw RangeError("Illegal range: Truncated data, " + offset + " < " + this.limit);
	                            return (b = this.view.getUint8(offset++)) === 0 ? null : b;
	                        }).bind(this), sd = stringDestination(), true);
	                        if (relative) {
	                            this.offset = offset;
	                            return sd();
	                        } else {
	                            return {
	                                "string": sd(),
	                                "length": offset - start
	                            };
	                        }
	                    };

	                    // types/strings/istring

	                    /**
	                     * Writes a length as uint32 prefixed UTF8 encoded string.
	                     * @param {string} str String to write
	                     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                     *  written if omitted.
	                     * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written
	                     * @expose
	                     * @see ByteBuffer#writeVarint32
	                     */
	                    ByteBufferPrototype.writeIString = function (str, offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof str !== 'string') throw TypeError("Illegal str: Not a string");
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                        }
	                        var start = offset,
	                            k;
	                        k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
	                        offset += 4 + k;
	                        var capacity13 = this.buffer.byteLength;
	                        if (offset > capacity13) this.resize((capacity13 *= 2) > offset ? capacity13 : offset);
	                        offset -= 4 + k;
	                        this.view.setUint32(offset, k, this.littleEndian);
	                        offset += 4;
	                        utfx.encodeUTF16toUTF8(stringSource(str), (function (b) {
	                            this.view.setUint8(offset++, b);
	                        }).bind(this));
	                        if (offset !== start + 4 + k) throw RangeError("Illegal range: Truncated data, " + offset + " == " + (offset + 4 + k));
	                        if (relative) {
	                            this.offset = offset;
	                            return this;
	                        }
	                        return offset - start;
	                    };

	                    /**
	                     * Reads a length as uint32 prefixed UTF8 encoded string.
	                     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                     *  read if omitted.
	                     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
	                     *  read and the actual number of bytes read.
	                     * @expose
	                     * @see ByteBuffer#readVarint32
	                     */
	                    ByteBufferPrototype.readIString = function (offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 4 + ") <= " + this.buffer.byteLength);
	                        }
	                        var temp = 0,
	                            start = offset,
	                            str;
	                        temp = this.view.getUint32(offset, this.littleEndian);
	                        offset += 4;
	                        var k = offset + temp,
	                            sd;
	                        utfx.decodeUTF8toUTF16((function () {
	                            return offset < k ? this.view.getUint8(offset++) : null;
	                        }).bind(this), sd = stringDestination(), this.noAssert);
	                        str = sd();
	                        if (relative) {
	                            this.offset = offset;
	                            return str;
	                        } else {
	                            return {
	                                'string': str,
	                                'length': offset - start
	                            };
	                        }
	                    };

	                    // types/strings/utf8string

	                    /**
	                     * Metrics representing number of UTF8 characters. Evaluates to `c`.
	                     * @type {string}
	                     * @const
	                     * @expose
	                     */
	                    ByteBuffer.METRICS_CHARS = 'c';

	                    /**
	                     * Metrics representing number of bytes. Evaluates to `b`.
	                     * @type {string}
	                     * @const
	                     * @expose
	                     */
	                    ByteBuffer.METRICS_BYTES = 'b';

	                    /**
	                     * Writes an UTF8 encoded string.
	                     * @param {string} str String to write
	                     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.
	                     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.
	                     * @expose
	                     */
	                    ByteBufferPrototype.writeUTF8String = function (str, offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                        }
	                        var k;
	                        var start = offset;
	                        k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
	                        offset += k;
	                        var capacity14 = this.buffer.byteLength;
	                        if (offset > capacity14) this.resize((capacity14 *= 2) > offset ? capacity14 : offset);
	                        offset -= k;
	                        utfx.encodeUTF16toUTF8(stringSource(str), (function (b) {
	                            this.view.setUint8(offset++, b);
	                        }).bind(this));
	                        if (relative) {
	                            this.offset = offset;
	                            return this;
	                        }
	                        return offset - start;
	                    };

	                    /**
	                     * Writes an UTF8 encoded string. This is an alias of {@link ByteBuffer#writeUTF8String}.
	                     * @function
	                     * @param {string} str String to write
	                     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.
	                     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.
	                     * @expose
	                     */
	                    ByteBufferPrototype.writeString = ByteBufferPrototype.writeUTF8String;

	                    /**
	                     * Calculates the number of UTF8 characters of a string. JavaScript itself uses UTF-16, so that a string's
	                     *  `length` property does not reflect its actual UTF8 size if it contains code points larger than 0xFFFF.
	                     * @function
	                     * @param {string} str String to calculate
	                     * @returns {number} Number of UTF8 characters
	                     * @expose
	                     */
	                    ByteBuffer.calculateUTF8Chars = function (str) {
	                        return utfx.calculateUTF16asUTF8(stringSource(str))[0];
	                    };

	                    /**
	                     * Calculates the number of UTF8 bytes of a string.
	                     * @function
	                     * @param {string} str String to calculate
	                     * @returns {number} Number of UTF8 bytes
	                     * @expose
	                     */
	                    ByteBuffer.calculateUTF8Bytes = function (str) {
	                        return utfx.calculateUTF16asUTF8(stringSource(str))[1];
	                    };

	                    /**
	                     * Reads an UTF8 encoded string.
	                     * @param {number} length Number of characters or bytes to read.
	                     * @param {string=} metrics Metrics specifying what `length` is meant to count. Defaults to
	                     *  {@link ByteBuffer.METRICS_CHARS}.
	                     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                     *  read if omitted.
	                     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
	                     *  read and the actual number of bytes read.
	                     * @expose
	                     */
	                    ByteBufferPrototype.readUTF8String = function (length, metrics, offset) {
	                        if (typeof metrics === 'number') {
	                            offset = metrics;
	                            metrics = undefined;
	                        }
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (typeof metrics === 'undefined') metrics = ByteBuffer.METRICS_CHARS;
	                        if (!this.noAssert) {
	                            if (typeof length !== 'number' || length % 1 !== 0) throw TypeError("Illegal length: " + length + " (not an integer)");
	                            length |= 0;
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                        }
	                        var i = 0,
	                            start = offset,
	                            sd;
	                        if (metrics === ByteBuffer.METRICS_CHARS) {
	                            // The same for node and the browser
	                            sd = stringDestination();
	                            utfx.decodeUTF8((function () {
	                                return i < length && offset < this.limit ? this.view.getUint8(offset++) : null;
	                            }).bind(this), (function (cp) {
	                                ++i;utfx.UTF8toUTF16(cp, sd);
	                            }).bind(this));
	                            if (i !== length) throw RangeError("Illegal range: Truncated data, " + i + " == " + length);
	                            if (relative) {
	                                this.offset = offset;
	                                return sd();
	                            } else {
	                                return {
	                                    "string": sd(),
	                                    "length": offset - start
	                                };
	                            }
	                        } else if (metrics === ByteBuffer.METRICS_BYTES) {
	                            if (!this.noAssert) {
	                                if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                                offset >>>= 0;
	                                if (offset < 0 || offset + length > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + length + ") <= " + this.buffer.byteLength);
	                            }
	                            var k = offset + length;
	                            utfx.decodeUTF8toUTF16((function () {
	                                return offset < k ? this.view.getUint8(offset++) : null;
	                            }).bind(this), sd = stringDestination(), this.noAssert);
	                            if (offset !== k) throw RangeError("Illegal range: Truncated data, " + offset + " == " + k);
	                            if (relative) {
	                                this.offset = offset;
	                                return sd();
	                            } else {
	                                return {
	                                    'string': sd(),
	                                    'length': offset - start
	                                };
	                            }
	                        } else throw TypeError("Unsupported metrics: " + metrics);
	                    };

	                    /**
	                     * Reads an UTF8 encoded string. This is an alias of {@link ByteBuffer#readUTF8String}.
	                     * @function
	                     * @param {number} length Number of characters or bytes to read
	                     * @param {number=} metrics Metrics specifying what `n` is meant to count. Defaults to
	                     *  {@link ByteBuffer.METRICS_CHARS}.
	                     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                     *  read if omitted.
	                     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
	                     *  read and the actual number of bytes read.
	                     * @expose
	                     */
	                    ByteBufferPrototype.readString = ByteBufferPrototype.readUTF8String;

	                    // types/strings/vstring

	                    /**
	                     * Writes a length as varint32 prefixed UTF8 encoded string.
	                     * @param {string} str String to write
	                     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                     *  written if omitted.
	                     * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written
	                     * @expose
	                     * @see ByteBuffer#writeVarint32
	                     */
	                    ByteBufferPrototype.writeVString = function (str, offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof str !== 'string') throw TypeError("Illegal str: Not a string");
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                        }
	                        var start = offset,
	                            k,
	                            l;
	                        k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
	                        l = ByteBuffer.calculateVarint32(k);
	                        offset += l + k;
	                        var capacity15 = this.buffer.byteLength;
	                        if (offset > capacity15) this.resize((capacity15 *= 2) > offset ? capacity15 : offset);
	                        offset -= l + k;
	                        offset += this.writeVarint32(k, offset);
	                        utfx.encodeUTF16toUTF8(stringSource(str), (function (b) {
	                            this.view.setUint8(offset++, b);
	                        }).bind(this));
	                        if (offset !== start + k + l) throw RangeError("Illegal range: Truncated data, " + offset + " == " + (offset + k + l));
	                        if (relative) {
	                            this.offset = offset;
	                            return this;
	                        }
	                        return offset - start;
	                    };

	                    /**
	                     * Reads a length as varint32 prefixed UTF8 encoded string.
	                     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                     *  read if omitted.
	                     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
	                     *  read and the actual number of bytes read.
	                     * @expose
	                     * @see ByteBuffer#readVarint32
	                     */
	                    ByteBufferPrototype.readVString = function (offset) {
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
	                        }
	                        var temp = this.readVarint32(offset),
	                            start = offset,
	                            str;
	                        offset += temp['length'];
	                        temp = temp['value'];
	                        var k = offset + temp,
	                            sd = stringDestination();
	                        utfx.decodeUTF8toUTF16((function () {
	                            return offset < k ? this.view.getUint8(offset++) : null;
	                        }).bind(this), sd, this.noAssert);
	                        str = sd();
	                        if (relative) {
	                            this.offset = offset;
	                            return str;
	                        } else {
	                            return {
	                                'string': str,
	                                'length': offset - start
	                            };
	                        }
	                    };

	                    /**
	                     * Appends some data to this ByteBuffer. This will overwrite any contents behind the specified offset up to the appended
	                     *  data's length.
	                     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to append. If `source` is a ByteBuffer, its offsets
	                     *  will be modified according to the performed read operation.
	                     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
	                     * @param {number=} offset Offset to append at. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                     *  read if omitted.
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     * @example A relative `<01 02>03.append(<04 05>)` will result in `<01 02 04 05>, 04 05|`
	                     * @example An absolute `<01 02>03.append(04 05>, 1)` will result in `<01 04>05, 04 05|`
	                     */
	                    ByteBufferPrototype.append = function (source, encoding, offset) {
	                        if (typeof encoding === 'number' || typeof encoding !== 'string') {
	                            offset = encoding;
	                            encoding = undefined;
	                        }
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                        }
	                        if (!(source instanceof ByteBuffer)) source = ByteBuffer.wrap(source, encoding);
	                        var length = source.limit - source.offset;
	                        if (length <= 0) return this; // Nothing to append
	                        offset += length;
	                        var capacity16 = this.buffer.byteLength;
	                        if (offset > capacity16) this.resize((capacity16 *= 2) > offset ? capacity16 : offset);
	                        offset -= length;
	                        new Uint8Array(this.buffer, offset).set(new Uint8Array(source.buffer).subarray(source.offset, source.limit));
	                        source.offset += length;
	                        if (relative) this.offset += length;
	                        return this;
	                    };

	                    /**
	                     * Appends this ByteBuffer's contents to another ByteBuffer. This will overwrite any contents behind the specified
	                     *  offset up to the length of this ByteBuffer's data.
	                     * @param {!ByteBuffer} target Target ByteBuffer
	                     * @param {number=} offset Offset to append to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                     *  read if omitted.
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     * @see ByteBuffer#append
	                     */
	                    ByteBufferPrototype.appendTo = function (target, offset) {
	                        target.append(this, offset);
	                        return this;
	                    };

	                    /**
	                     * Enables or disables assertions of argument types and offsets. Assertions are enabled by default but you can opt to
	                     *  disable them if your code already makes sure that everything is valid.
	                     * @param {boolean} assert `true` to enable assertions, otherwise `false`
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     */
	                    ByteBufferPrototype.assert = function (assert) {
	                        this.noAssert = !assert;
	                        return this;
	                    };

	                    /**
	                     * Gets the capacity of this ByteBuffer's backing buffer.
	                     * @returns {number} Capacity of the backing buffer
	                     * @expose
	                     */
	                    ByteBufferPrototype.capacity = function () {
	                        return this.buffer.byteLength;
	                    };

	                    /**
	                     * Clears this ByteBuffer's offsets by setting {@link ByteBuffer#offset} to `0` and {@link ByteBuffer#limit} to the
	                     *  backing buffer's capacity. Discards {@link ByteBuffer#markedOffset}.
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     */
	                    ByteBufferPrototype.clear = function () {
	                        this.offset = 0;
	                        this.limit = this.buffer.byteLength;
	                        this.markedOffset = -1;
	                        return this;
	                    };

	                    /**
	                     * Creates a cloned instance of this ByteBuffer, preset with this ByteBuffer's values for {@link ByteBuffer#offset},
	                     *  {@link ByteBuffer#markedOffset} and {@link ByteBuffer#limit}.
	                     * @param {boolean=} copy Whether to copy the backing buffer or to return another view on the same, defaults to `false`
	                     * @returns {!ByteBuffer} Cloned instance
	                     * @expose
	                     */
	                    ByteBufferPrototype.clone = function (copy) {
	                        var bb = new ByteBuffer(0, this.littleEndian, this.noAssert);
	                        if (copy) {
	                            var buffer = new ArrayBuffer(this.buffer.byteLength);
	                            new Uint8Array(buffer).set(this.buffer);
	                            bb.buffer = buffer;
	                            bb.view = new DataView(buffer);
	                        } else {
	                            bb.buffer = this.buffer;
	                            bb.view = this.view;
	                        }
	                        bb.offset = this.offset;
	                        bb.markedOffset = this.markedOffset;
	                        bb.limit = this.limit;
	                        return bb;
	                    };

	                    /**
	                     * Compacts this ByteBuffer to be backed by a {@link ByteBuffer#buffer} of its contents' length. Contents are the bytes
	                     *  between {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will set `offset = 0` and `limit = capacity` and
	                     *  adapt {@link ByteBuffer#markedOffset} to the same relative position if set.
	                     * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}
	                     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     */
	                    ByteBufferPrototype.compact = function (begin, end) {
	                        if (typeof begin === 'undefined') begin = this.offset;
	                        if (typeof end === 'undefined') end = this.limit;
	                        if (!this.noAssert) {
	                            if (typeof begin !== 'number' || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
	                            begin >>>= 0;
	                            if (typeof end !== 'number' || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
	                            end >>>= 0;
	                            if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
	                        }
	                        if (begin === 0 && end === this.buffer.byteLength) return this; // Already compacted
	                        var len = end - begin;
	                        if (len === 0) {
	                            this.buffer = EMPTY_BUFFER;
	                            this.view = null;
	                            if (this.markedOffset >= 0) this.markedOffset -= begin;
	                            this.offset = 0;
	                            this.limit = 0;
	                            return this;
	                        }
	                        var buffer = new ArrayBuffer(len);
	                        new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(begin, end));
	                        this.buffer = buffer;
	                        this.view = new DataView(buffer);
	                        if (this.markedOffset >= 0) this.markedOffset -= begin;
	                        this.offset = 0;
	                        this.limit = len;
	                        return this;
	                    };

	                    /**
	                     * Creates a copy of this ByteBuffer's contents. Contents are the bytes between {@link ByteBuffer#offset} and
	                     *  {@link ByteBuffer#limit}.
	                     * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.
	                     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
	                     * @returns {!ByteBuffer} Copy
	                     * @expose
	                     */
	                    ByteBufferPrototype.copy = function (begin, end) {
	                        if (typeof begin === 'undefined') begin = this.offset;
	                        if (typeof end === 'undefined') end = this.limit;
	                        if (!this.noAssert) {
	                            if (typeof begin !== 'number' || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
	                            begin >>>= 0;
	                            if (typeof end !== 'number' || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
	                            end >>>= 0;
	                            if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
	                        }
	                        if (begin === end) return new ByteBuffer(0, this.littleEndian, this.noAssert);
	                        var capacity = end - begin,
	                            bb = new ByteBuffer(capacity, this.littleEndian, this.noAssert);
	                        bb.offset = 0;
	                        bb.limit = capacity;
	                        if (bb.markedOffset >= 0) bb.markedOffset -= begin;
	                        this.copyTo(bb, 0, begin, end);
	                        return bb;
	                    };

	                    /**
	                     * Copies this ByteBuffer's contents to another ByteBuffer. Contents are the bytes between {@link ByteBuffer#offset} and
	                     *  {@link ByteBuffer#limit}.
	                     * @param {!ByteBuffer} target Target ByteBuffer
	                     * @param {number=} targetOffset Offset to copy to. Will use and increase the target's {@link ByteBuffer#offset}
	                     *  by the number of bytes copied if omitted.
	                     * @param {number=} sourceOffset Offset to start copying from. Will use and increase {@link ByteBuffer#offset} by the
	                     *  number of bytes copied if omitted.
	                     * @param {number=} sourceLimit Offset to end copying from, defaults to {@link ByteBuffer#limit}
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     */
	                    ByteBufferPrototype.copyTo = function (target, targetOffset, sourceOffset, sourceLimit) {
	                        var relative, targetRelative;
	                        if (!this.noAssert) {
	                            if (!ByteBuffer.isByteBuffer(target)) throw TypeError("Illegal target: Not a ByteBuffer");
	                        }
	                        targetOffset = (targetRelative = typeof targetOffset === 'undefined') ? target.offset : targetOffset | 0;
	                        sourceOffset = (relative = typeof sourceOffset === 'undefined') ? this.offset : sourceOffset | 0;
	                        sourceLimit = typeof sourceLimit === 'undefined' ? this.limit : sourceLimit | 0;

	                        if (targetOffset < 0 || targetOffset > target.buffer.byteLength) throw RangeError("Illegal target range: 0 <= " + targetOffset + " <= " + target.buffer.byteLength);
	                        if (sourceOffset < 0 || sourceLimit > this.buffer.byteLength) throw RangeError("Illegal source range: 0 <= " + sourceOffset + " <= " + this.buffer.byteLength);

	                        var len = sourceLimit - sourceOffset;
	                        if (len === 0) return target; // Nothing to copy

	                        target.ensureCapacity(targetOffset + len);

	                        new Uint8Array(target.buffer).set(new Uint8Array(this.buffer).subarray(sourceOffset, sourceLimit), targetOffset);

	                        if (relative) this.offset += len;
	                        if (targetRelative) target.offset += len;

	                        return this;
	                    };

	                    /**
	                     * Makes sure that this ByteBuffer is backed by a {@link ByteBuffer#buffer} of at least the specified capacity. If the
	                     *  current capacity is exceeded, it will be doubled. If double the current capacity is less than the required capacity,
	                     *  the required capacity will be used instead.
	                     * @param {number} capacity Required capacity
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     */
	                    ByteBufferPrototype.ensureCapacity = function (capacity) {
	                        var current = this.buffer.byteLength;
	                        if (current < capacity) return this.resize((current *= 2) > capacity ? current : capacity);
	                        return this;
	                    };

	                    /**
	                     * Overwrites this ByteBuffer's contents with the specified value. Contents are the bytes between
	                     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.
	                     * @param {number|string} value Byte value to fill with. If given as a string, the first character is used.
	                     * @param {number=} begin Begin offset. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	                     *  written if omitted. defaults to {@link ByteBuffer#offset}.
	                     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     * @example `someByteBuffer.clear().fill(0)` fills the entire backing buffer with zeroes
	                     */
	                    ByteBufferPrototype.fill = function (value, begin, end) {
	                        var relative = typeof begin === 'undefined';
	                        if (relative) begin = this.offset;
	                        if (typeof value === 'string' && value.length > 0) value = value.charCodeAt(0);
	                        if (typeof begin === 'undefined') begin = this.offset;
	                        if (typeof end === 'undefined') end = this.limit;
	                        if (!this.noAssert) {
	                            if (typeof value !== 'number' || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
	                            value |= 0;
	                            if (typeof begin !== 'number' || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
	                            begin >>>= 0;
	                            if (typeof end !== 'number' || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
	                            end >>>= 0;
	                            if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
	                        }
	                        if (begin >= end) return this; // Nothing to fill
	                        while (begin < end) this.view.setUint8(begin++, value);
	                        if (relative) this.offset = begin;
	                        return this;
	                    };

	                    /**
	                     * Makes this ByteBuffer ready for a new sequence of write or relative read operations. Sets `limit = offset` and
	                     *  `offset = 0`. Make sure always to flip a ByteBuffer when all relative read or write operations are complete.
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     */
	                    ByteBufferPrototype.flip = function () {
	                        this.limit = this.offset;
	                        this.offset = 0;
	                        return this;
	                    };
	                    /**
	                     * Marks an offset on this ByteBuffer to be used later.
	                     * @param {number=} offset Offset to mark. Defaults to {@link ByteBuffer#offset}.
	                     * @returns {!ByteBuffer} this
	                     * @throws {TypeError} If `offset` is not a valid number
	                     * @throws {RangeError} If `offset` is out of bounds
	                     * @see ByteBuffer#reset
	                     * @expose
	                     */
	                    ByteBufferPrototype.mark = function (offset) {
	                        offset = typeof offset === 'undefined' ? this.offset : offset;
	                        if (!this.noAssert) {
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                        }
	                        this.markedOffset = offset;
	                        return this;
	                    };
	                    /**
	                     * Sets the byte order.
	                     * @param {boolean} littleEndian `true` for little endian byte order, `false` for big endian
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     */
	                    ByteBufferPrototype.order = function (littleEndian) {
	                        if (!this.noAssert) {
	                            if (typeof littleEndian !== 'boolean') throw TypeError("Illegal littleEndian: Not a boolean");
	                        }
	                        this.littleEndian = !!littleEndian;
	                        return this;
	                    };

	                    /**
	                     * Switches (to) little endian byte order.
	                     * @param {boolean=} littleEndian Defaults to `true`, otherwise uses big endian
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     */
	                    ByteBufferPrototype.LE = function (littleEndian) {
	                        this.littleEndian = typeof littleEndian !== 'undefined' ? !!littleEndian : true;
	                        return this;
	                    };

	                    /**
	                     * Switches (to) big endian byte order.
	                     * @param {boolean=} bigEndian Defaults to `true`, otherwise uses little endian
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     */
	                    ByteBufferPrototype.BE = function (bigEndian) {
	                        this.littleEndian = typeof bigEndian !== 'undefined' ? !bigEndian : false;
	                        return this;
	                    };
	                    /**
	                     * Prepends some data to this ByteBuffer. This will overwrite any contents before the specified offset up to the
	                     *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer
	                     *  will be resized and its contents moved accordingly.
	                     * @param {!ByteBuffer|string|!ArrayBuffer} source Data to prepend. If `source` is a ByteBuffer, its offset will be
	                     *  modified according to the performed read operation.
	                     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
	                     * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes
	                     *  prepended if omitted.
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     * @example A relative `00<01 02 03>.prepend(<04 05>)` results in `<04 05 01 02 03>, 04 05|`
	                     * @example An absolute `00<01 02 03>.prepend(<04 05>, 2)` results in `04<05 02 03>, 04 05|`
	                     */
	                    ByteBufferPrototype.prepend = function (source, encoding, offset) {
	                        if (typeof encoding === 'number' || typeof encoding !== 'string') {
	                            offset = encoding;
	                            encoding = undefined;
	                        }
	                        var relative = typeof offset === 'undefined';
	                        if (relative) offset = this.offset;
	                        if (!this.noAssert) {
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
	                            offset >>>= 0;
	                            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
	                        }
	                        if (!(source instanceof ByteBuffer)) source = ByteBuffer.wrap(source, encoding);
	                        var len = source.limit - source.offset;
	                        if (len <= 0) return this; // Nothing to prepend
	                        var diff = len - offset;
	                        var arrayView;
	                        if (diff > 0) {
	                            // Not enough space before offset, so resize + move
	                            var buffer = new ArrayBuffer(this.buffer.byteLength + diff);
	                            arrayView = new Uint8Array(buffer);
	                            arrayView.set(new Uint8Array(this.buffer).subarray(offset, this.buffer.byteLength), len);
	                            this.buffer = buffer;
	                            this.view = new DataView(buffer);
	                            this.offset += diff;
	                            if (this.markedOffset >= 0) this.markedOffset += diff;
	                            this.limit += diff;
	                            offset += diff;
	                        } else {
	                            arrayView = new Uint8Array(this.buffer);
	                        }
	                        arrayView.set(new Uint8Array(source.buffer).subarray(source.offset, source.limit), offset - len);
	                        source.offset = source.limit;
	                        if (relative) this.offset -= len;
	                        return this;
	                    };

	                    /**
	                     * Prepends this ByteBuffer to another ByteBuffer. This will overwrite any contents before the specified offset up to the
	                     *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer
	                     *  will be resized and its contents moved accordingly.
	                     * @param {!ByteBuffer} target Target ByteBuffer
	                     * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes
	                     *  prepended if omitted.
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     * @see ByteBuffer#prepend
	                     */
	                    ByteBufferPrototype.prependTo = function (target, offset) {
	                        target.prepend(this, offset);
	                        return this;
	                    };
	                    /**
	                     * Prints debug information about this ByteBuffer's contents.
	                     * @param {function(string)=} out Output function to call, defaults to console.log
	                     * @expose
	                     */
	                    ByteBufferPrototype.printDebug = function (out) {
	                        if (typeof out !== 'function') out = console.log.bind(console);
	                        out(this.toString() + "\n" + "-------------------------------------------------------------------\n" + this.toDebug( /* columns */true));
	                    };

	                    /**
	                     * Gets the number of remaining readable bytes. Contents are the bytes between {@link ByteBuffer#offset} and
	                     *  {@link ByteBuffer#limit}, so this returns `limit - offset`.
	                     * @returns {number} Remaining readable bytes. May be negative if `offset > limit`.
	                     * @expose
	                     */
	                    ByteBufferPrototype.remaining = function () {
	                        return this.limit - this.offset;
	                    };
	                    /**
	                     * Resets this ByteBuffer's {@link ByteBuffer#offset}. If an offset has been marked through {@link ByteBuffer#mark}
	                     *  before, `offset` will be set to {@link ByteBuffer#markedOffset}, which will then be discarded. If no offset has been
	                     *  marked, sets `offset = 0`.
	                     * @returns {!ByteBuffer} this
	                     * @see ByteBuffer#mark
	                     * @expose
	                     */
	                    ByteBufferPrototype.reset = function () {
	                        if (this.markedOffset >= 0) {
	                            this.offset = this.markedOffset;
	                            this.markedOffset = -1;
	                        } else {
	                            this.offset = 0;
	                        }
	                        return this;
	                    };
	                    /**
	                     * Resizes this ByteBuffer to be backed by a buffer of at least the given capacity. Will do nothing if already that
	                     *  large or larger.
	                     * @param {number} capacity Capacity required
	                     * @returns {!ByteBuffer} this
	                     * @throws {TypeError} If `capacity` is not a number
	                     * @throws {RangeError} If `capacity < 0`
	                     * @expose
	                     */
	                    ByteBufferPrototype.resize = function (capacity) {
	                        if (!this.noAssert) {
	                            if (typeof capacity !== 'number' || capacity % 1 !== 0) throw TypeError("Illegal capacity: " + capacity + " (not an integer)");
	                            capacity |= 0;
	                            if (capacity < 0) throw RangeError("Illegal capacity: 0 <= " + capacity);
	                        }
	                        if (this.buffer.byteLength < capacity) {
	                            var buffer = new ArrayBuffer(capacity);
	                            new Uint8Array(buffer).set(new Uint8Array(this.buffer));
	                            this.buffer = buffer;
	                            this.view = new DataView(buffer);
	                        }
	                        return this;
	                    };
	                    /**
	                     * Reverses this ByteBuffer's contents.
	                     * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}
	                     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     */
	                    ByteBufferPrototype.reverse = function (begin, end) {
	                        if (typeof begin === 'undefined') begin = this.offset;
	                        if (typeof end === 'undefined') end = this.limit;
	                        if (!this.noAssert) {
	                            if (typeof begin !== 'number' || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
	                            begin >>>= 0;
	                            if (typeof end !== 'number' || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
	                            end >>>= 0;
	                            if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
	                        }
	                        if (begin === end) return this; // Nothing to reverse
	                        Array.prototype.reverse.call(new Uint8Array(this.buffer).subarray(begin, end));
	                        this.view = new DataView(this.buffer); // FIXME: Why exactly is this necessary?
	                        return this;
	                    };
	                    /**
	                     * Skips the next `length` bytes. This will just advance
	                     * @param {number} length Number of bytes to skip. May also be negative to move the offset back.
	                     * @returns {!ByteBuffer} this
	                     * @expose
	                     */
	                    ByteBufferPrototype.skip = function (length) {
	                        if (!this.noAssert) {
	                            if (typeof length !== 'number' || length % 1 !== 0) throw TypeError("Illegal length: " + length + " (not an integer)");
	                            length |= 0;
	                        }
	                        var offset = this.offset + length;
	                        if (!this.noAssert) {
	                            if (offset < 0 || offset > this.buffer.byteLength) throw RangeError("Illegal length: 0 <= " + this.offset + " + " + length + " <= " + this.buffer.byteLength);
	                        }
	                        this.offset = offset;
	                        return this;
	                    };

	                    /**
	                     * Slices this ByteBuffer by creating a cloned instance with `offset = begin` and `limit = end`.
	                     * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.
	                     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
	                     * @returns {!ByteBuffer} Clone of this ByteBuffer with slicing applied, backed by the same {@link ByteBuffer#buffer}
	                     * @expose
	                     */
	                    ByteBufferPrototype.slice = function (begin, end) {
	                        if (typeof begin === 'undefined') begin = this.offset;
	                        if (typeof end === 'undefined') end = this.limit;
	                        if (!this.noAssert) {
	                            if (typeof begin !== 'number' || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
	                            begin >>>= 0;
	                            if (typeof end !== 'number' || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
	                            end >>>= 0;
	                            if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
	                        }
	                        var bb = this.clone();
	                        bb.offset = begin;
	                        bb.limit = end;
	                        return bb;
	                    };
	                    /**
	                     * Returns a copy of the backing buffer that contains this ByteBuffer's contents. Contents are the bytes between
	                     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will transparently {@link ByteBuffer#flip} this
	                     *  ByteBuffer if `offset > limit` but the actual offsets remain untouched.
	                     * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory if
	                     *  possible. Defaults to `false`
	                     * @returns {!ArrayBuffer} Contents as an ArrayBuffer
	                     * @expose
	                     */
	                    ByteBufferPrototype.toBuffer = function (forceCopy) {
	                        var offset = this.offset,
	                            limit = this.limit;
	                        if (offset > limit) {
	                            var t = offset;
	                            offset = limit;
	                            limit = t;
	                        }
	                        if (!this.noAssert) {
	                            if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: Not an integer");
	                            offset >>>= 0;
	                            if (typeof limit !== 'number' || limit % 1 !== 0) throw TypeError("Illegal limit: Not an integer");
	                            limit >>>= 0;
	                            if (offset < 0 || offset > limit || limit > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + offset + " <= " + limit + " <= " + this.buffer.byteLength);
	                        }
	                        // NOTE: It's not possible to have another ArrayBuffer reference the same memory as the backing buffer. This is
	                        // possible with Uint8Array#subarray only, but we have to return an ArrayBuffer by contract. So:
	                        if (!forceCopy && offset === 0 && limit === this.buffer.byteLength) {
	                            return this.buffer;
	                        }
	                        if (offset === limit) {
	                            return EMPTY_BUFFER;
	                        }
	                        var buffer = new ArrayBuffer(limit - offset);
	                        new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(offset, limit), 0);
	                        return buffer;
	                    };

	                    /**
	                     * Returns a raw buffer compacted to contain this ByteBuffer's contents. Contents are the bytes between
	                     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will transparently {@link ByteBuffer#flip} this
	                     *  ByteBuffer if `offset > limit` but the actual offsets remain untouched. This is an alias of
	                     *  {@link ByteBuffer#toBuffer}.
	                     * @function
	                     * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory.
	                     *  Defaults to `false`
	                     * @returns {!ArrayBuffer} Contents as an ArrayBuffer
	                     * @expose
	                     */
	                    ByteBufferPrototype.toArrayBuffer = ByteBufferPrototype.toBuffer;

	                    /**
	                     * Converts the ByteBuffer's contents to a string.
	                     * @param {string=} encoding Output encoding. Returns an informative string representation if omitted but also allows
	                     *  direct conversion to "utf8", "hex", "base64" and "binary" encoding. "debug" returns a hex representation with
	                     *  highlighted offsets.
	                     * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}
	                     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
	                     * @returns {string} String representation
	                     * @throws {Error} If `encoding` is invalid
	                     * @expose
	                     */
	                    ByteBufferPrototype.toString = function (encoding, begin, end) {
	                        if (typeof encoding === 'undefined') return "ByteBufferAB(offset=" + this.offset + ",markedOffset=" + this.markedOffset + ",limit=" + this.limit + ",capacity=" + this.capacity() + ")";
	                        if (typeof encoding === 'number') encoding = "utf8", begin = encoding, end = begin;
	                        switch (encoding) {
	                            case "utf8":
	                                return this.toUTF8(begin, end);
	                            case "base64":
	                                return this.toBase64(begin, end);
	                            case "hex":
	                                return this.toHex(begin, end);
	                            case "binary":
	                                return this.toBinary(begin, end);
	                            case "debug":
	                                return this.toDebug();
	                            case "columns":
	                                return this.toColumns();
	                            default:
	                                throw Error("Unsupported encoding: " + encoding);
	                        }
	                    };

	                    // lxiv-embeddable

	                    /**
	                     * lxiv-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>
	                     * Released under the Apache License, Version 2.0
	                     * see: https://github.com/dcodeIO/lxiv for details
	                     */
	                    var lxiv = (function () {
	                        "use strict";

	                        /**
	                         * lxiv namespace.
	                         * @type {!Object.<string,*>}
	                         * @exports lxiv
	                         */
	                        var lxiv = {};

	                        /**
	                         * Character codes for output.
	                         * @type {!Array.<number>}
	                         * @inner
	                         */
	                        var aout = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47];

	                        /**
	                         * Character codes for input.
	                         * @type {!Array.<number>}
	                         * @inner
	                         */
	                        var ain = [];
	                        for (var i = 0, k = aout.length; i < k; ++i) ain[aout[i]] = i;

	                        /**
	                         * Encodes bytes to base64 char codes.
	                         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if
	                         *  there are no more bytes left.
	                         * @param {!function(number)} dst Characters destination as a function successively called with each encoded char
	                         *  code.
	                         */
	                        lxiv.encode = function (src, dst) {
	                            var b, t;
	                            while ((b = src()) !== null) {
	                                dst(aout[b >> 2 & 0x3f]);
	                                t = (b & 0x3) << 4;
	                                if ((b = src()) !== null) {
	                                    t |= b >> 4 & 0xf;
	                                    dst(aout[(t | b >> 4 & 0xf) & 0x3f]);
	                                    t = (b & 0xf) << 2;
	                                    if ((b = src()) !== null) dst(aout[(t | b >> 6 & 0x3) & 0x3f]), dst(aout[b & 0x3f]);else dst(aout[t & 0x3f]), dst(61);
	                                } else dst(aout[t & 0x3f]), dst(61), dst(61);
	                            }
	                        };

	                        /**
	                         * Decodes base64 char codes to bytes.
	                         * @param {!function():number|null} src Characters source as a function returning the next char code respectively
	                         *  `null` if there are no more characters left.
	                         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
	                         * @throws {Error} If a character code is invalid
	                         */
	                        lxiv.decode = function (src, dst) {
	                            var c, t1, t2;
	                            function fail(c) {
	                                throw Error("Illegal character code: " + c);
	                            }
	                            while ((c = src()) !== null) {
	                                t1 = ain[c];
	                                if (typeof t1 === 'undefined') fail(c);
	                                if ((c = src()) !== null) {
	                                    t2 = ain[c];
	                                    if (typeof t2 === 'undefined') fail(c);
	                                    dst(t1 << 2 >>> 0 | (t2 & 0x30) >> 4);
	                                    if ((c = src()) !== null) {
	                                        t1 = ain[c];
	                                        if (typeof t1 === 'undefined') if (c === 61) break;else fail(c);
	                                        dst((t2 & 0xf) << 4 >>> 0 | (t1 & 0x3c) >> 2);
	                                        if ((c = src()) !== null) {
	                                            t2 = ain[c];
	                                            if (typeof t2 === 'undefined') if (c === 61) break;else fail(c);
	                                            dst((t1 & 0x3) << 6 >>> 0 | t2);
	                                        }
	                                    }
	                                }
	                            }
	                        };

	                        /**
	                         * Tests if a string is valid base64.
	                         * @param {string} str String to test
	                         * @returns {boolean} `true` if valid, otherwise `false`
	                         */
	                        lxiv.test = function (str) {
	                            return (/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(str)
	                            );
	                        };

	                        return lxiv;
	                    })();

	                    // encodings/base64

	                    /**
	                     * Encodes this ByteBuffer's contents to a base64 encoded string.
	                     * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}.
	                     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}.
	                     * @returns {string} Base64 encoded string
	                     * @expose
	                     */
	                    ByteBufferPrototype.toBase64 = function (begin, end) {
	                        if (typeof begin === 'undefined') begin = this.offset;
	                        if (typeof end === 'undefined') end = this.limit;
	                        if (!this.noAssert) {
	                            if (typeof begin !== 'number' || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
	                            begin >>>= 0;
	                            if (typeof end !== 'number' || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
	                            end >>>= 0;
	                            if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
	                        }
	                        var sd;lxiv.encode((function () {
	                            return begin < end ? this.view.getUint8(begin++) : null;
	                        }).bind(this), sd = stringDestination());
	                        return sd();
	                    };

	                    /**
	                     * Decodes a base64 encoded string to a ByteBuffer.
	                     * @param {string} str String to decode
	                     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	                     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	                     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	                     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	                     * @returns {!ByteBuffer} ByteBuffer
	                     * @expose
	                     */
	                    ByteBuffer.fromBase64 = function (str, littleEndian, noAssert) {
	                        if (!noAssert) {
	                            if (typeof str !== 'string') throw TypeError("Illegal str: Not a string");
	                            if (str.length % 4 !== 0) throw TypeError("Illegal str: Length not a multiple of 4");
	                        }
	                        var bb = new ByteBuffer(str.length / 4 * 3, littleEndian, noAssert),
	                            i = 0;
	                        lxiv.decode(stringSource(str), function (b) {
	                            bb.view.setUint8(i++, b);
	                        });
	                        bb.limit = i;
	                        return bb;
	                    };

	                    /**
	                     * Encodes a binary string to base64 like `window.btoa` does.
	                     * @param {string} str Binary string
	                     * @returns {string} Base64 encoded string
	                     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa
	                     * @expose
	                     */
	                    ByteBuffer.btoa = function (str) {
	                        return ByteBuffer.fromBinary(str).toBase64();
	                    };

	                    /**
	                     * Decodes a base64 encoded string to binary like `window.atob` does.
	                     * @param {string} b64 Base64 encoded string
	                     * @returns {string} Binary string
	                     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.atob
	                     * @expose
	                     */
	                    ByteBuffer.atob = function (b64) {
	                        return ByteBuffer.fromBase64(b64).toBinary();
	                    };

	                    // encodings/binary

	                    /**
	                     * Encodes this ByteBuffer to a binary encoded string, that is using only characters 0x00-0xFF as bytes.
	                     * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.
	                     * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.
	                     * @returns {string} Binary encoded string
	                     * @throws {RangeError} If `offset > limit`
	                     * @expose
	                     */
	                    ByteBufferPrototype.toBinary = function (begin, end) {
	                        begin = typeof begin === 'undefined' ? this.offset : begin;
	                        end = typeof end === 'undefined' ? this.limit : end;
	                        if (!this.noAssert) {
	                            if (typeof begin !== 'number' || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
	                            begin >>>= 0;
	                            if (typeof end !== 'number' || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
	                            end >>>= 0;
	                            if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
	                        }
	                        if (begin === end) return "";
	                        var cc = [],
	                            pt = [];
	                        while (begin < end) {
	                            cc.push(this.view.getUint8(begin++));
	                            if (cc.length >= 1024) pt.push(String.fromCharCode.apply(String, cc)), cc = [];
	                        }
	                        return pt.join('') + String.fromCharCode.apply(String, cc);
	                    };

	                    /**
	                     * Decodes a binary encoded string, that is using only characters 0x00-0xFF as bytes, to a ByteBuffer.
	                     * @param {string} str String to decode
	                     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	                     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	                     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	                     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	                     * @returns {!ByteBuffer} ByteBuffer
	                     * @expose
	                     */
	                    ByteBuffer.fromBinary = function (str, littleEndian, noAssert) {
	                        if (!noAssert) {
	                            if (typeof str !== 'string') throw TypeError("Illegal str: Not a string");
	                        }
	                        var i = 0,
	                            k = str.length,
	                            charCode,
	                            bb = new ByteBuffer(k, littleEndian, noAssert);
	                        while (i < k) {
	                            charCode = str.charCodeAt(i);
	                            if (!noAssert && charCode > 255) throw RangeError("Illegal charCode at " + i + ": 0 <= " + charCode + " <= 255");
	                            bb.view.setUint8(i++, charCode);
	                        }
	                        bb.limit = k;
	                        return bb;
	                    };

	                    // encodings/debug

	                    /**
	                     * Encodes this ByteBuffer to a hex encoded string with marked offsets. Offset symbols are:
	                     * * `<` : offset,
	                     * * `'` : markedOffset,
	                     * * `>` : limit,
	                     * * `|` : offset and limit,
	                     * * `[` : offset and markedOffset,
	                     * * `]` : markedOffset and limit,
	                     * * `!` : offset, markedOffset and limit
	                     * @param {boolean=} columns If `true` returns two columns hex + ascii, defaults to `false`
	                     * @returns {string|!Array.<string>} Debug string or array of lines if `asArray = true`
	                     * @expose
	                     * @example `>00'01 02<03` contains four bytes with `limit=0, markedOffset=1, offset=3`
	                     * @example `00[01 02 03>` contains four bytes with `offset=markedOffset=1, limit=4`
	                     * @example `00|01 02 03` contains four bytes with `offset=limit=1, markedOffset=-1`
	                     * @example `|` contains zero bytes with `offset=limit=0, markedOffset=-1`
	                     */
	                    ByteBufferPrototype.toDebug = function (columns) {
	                        var i = -1,
	                            k = this.buffer.byteLength,
	                            b,
	                            hex = "",
	                            asc = "",
	                            out = "";
	                        while (i < k) {
	                            if (i !== -1) {
	                                b = this.view.getUint8(i);
	                                if (b < 0x10) hex += "0" + b.toString(16).toUpperCase();else hex += b.toString(16).toUpperCase();
	                                if (columns) {
	                                    asc += b > 32 && b < 127 ? String.fromCharCode(b) : '.';
	                                }
	                            }
	                            ++i;
	                            if (columns) {
	                                if (i > 0 && i % 16 === 0 && i !== k) {
	                                    while (hex.length < 3 * 16 + 3) hex += " ";
	                                    out += hex + asc + "\n";
	                                    hex = asc = "";
	                                }
	                            }
	                            if (i === this.offset && i === this.limit) hex += i === this.markedOffset ? "!" : "|";else if (i === this.offset) hex += i === this.markedOffset ? "[" : "<";else if (i === this.limit) hex += i === this.markedOffset ? "]" : ">";else hex += i === this.markedOffset ? "'" : columns || i !== 0 && i !== k ? " " : "";
	                        }
	                        if (columns && hex !== " ") {
	                            while (hex.length < 3 * 16 + 3) hex += " ";
	                            out += hex + asc + "\n";
	                        }
	                        return columns ? out : hex;
	                    };

	                    /**
	                     * Decodes a hex encoded string with marked offsets to a ByteBuffer.
	                     * @param {string} str Debug string to decode (not be generated with `columns = true`)
	                     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	                     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	                     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	                     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	                     * @returns {!ByteBuffer} ByteBuffer
	                     * @expose
	                     * @see ByteBuffer#toDebug
	                     */
	                    ByteBuffer.fromDebug = function (str, littleEndian, noAssert) {
	                        var k = str.length,
	                            bb = new ByteBuffer((k + 1) / 3 | 0, littleEndian, noAssert);
	                        var i = 0,
	                            j = 0,
	                            ch,
	                            b,
	                            rs = false,
	                            // Require symbol next
	                        ho = false,
	                            hm = false,
	                            hl = false,
	                            // Already has offset, markedOffset, limit?
	                        fail = false;
	                        while (i < k) {
	                            switch (ch = str.charAt(i++)) {
	                                case '!':
	                                    if (!noAssert) {
	                                        if (ho || hm || hl) {
	                                            fail = true;break;
	                                        }
	                                        ho = hm = hl = true;
	                                    }
	                                    bb.offset = bb.markedOffset = bb.limit = j;
	                                    rs = false;
	                                    break;
	                                case '|':
	                                    if (!noAssert) {
	                                        if (ho || hl) {
	                                            fail = true;break;
	                                        }
	                                        ho = hl = true;
	                                    }
	                                    bb.offset = bb.limit = j;
	                                    rs = false;
	                                    break;
	                                case '[':
	                                    if (!noAssert) {
	                                        if (ho || hm) {
	                                            fail = true;break;
	                                        }
	                                        ho = hm = true;
	                                    }
	                                    bb.offset = bb.markedOffset = j;
	                                    rs = false;
	                                    break;
	                                case '<':
	                                    if (!noAssert) {
	                                        if (ho) {
	                                            fail = true;break;
	                                        }
	                                        ho = true;
	                                    }
	                                    bb.offset = j;
	                                    rs = false;
	                                    break;
	                                case ']':
	                                    if (!noAssert) {
	                                        if (hl || hm) {
	                                            fail = true;break;
	                                        }
	                                        hl = hm = true;
	                                    }
	                                    bb.limit = bb.markedOffset = j;
	                                    rs = false;
	                                    break;
	                                case '>':
	                                    if (!noAssert) {
	                                        if (hl) {
	                                            fail = true;break;
	                                        }
	                                        hl = true;
	                                    }
	                                    bb.limit = j;
	                                    rs = false;
	                                    break;
	                                case "'":
	                                    if (!noAssert) {
	                                        if (hm) {
	                                            fail = true;break;
	                                        }
	                                        hm = true;
	                                    }
	                                    bb.markedOffset = j;
	                                    rs = false;
	                                    break;
	                                case ' ':
	                                    rs = false;
	                                    break;
	                                default:
	                                    if (!noAssert) {
	                                        if (rs) {
	                                            fail = true;break;
	                                        }
	                                    }
	                                    b = parseInt(ch + str.charAt(i++), 16);
	                                    if (!noAssert) {
	                                        if (isNaN(b) || b < 0 || b > 255) throw TypeError("Illegal str: Not a debug encoded string");
	                                    }
	                                    bb.view.setUint8(j++, b);
	                                    rs = true;
	                            }
	                            if (fail) throw TypeError("Illegal str: Invalid symbol at " + i);
	                        }
	                        if (!noAssert) {
	                            if (!ho || !hl) throw TypeError("Illegal str: Missing offset or limit");
	                            if (j < bb.buffer.byteLength) throw TypeError("Illegal str: Not a debug encoded string (is it hex?) " + j + " < " + k);
	                        }
	                        return bb;
	                    };

	                    // encodings/hex

	                    /**
	                     * Encodes this ByteBuffer's contents to a hex encoded string.
	                     * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.
	                     * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.
	                     * @returns {string} Hex encoded string
	                     * @expose
	                     */
	                    ByteBufferPrototype.toHex = function (begin, end) {
	                        begin = typeof begin === 'undefined' ? this.offset : begin;
	                        end = typeof end === 'undefined' ? this.limit : end;
	                        if (!this.noAssert) {
	                            if (typeof begin !== 'number' || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
	                            begin >>>= 0;
	                            if (typeof end !== 'number' || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
	                            end >>>= 0;
	                            if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
	                        }
	                        var out = new Array(end - begin),
	                            b;
	                        while (begin < end) {
	                            b = this.view.getUint8(begin++);
	                            if (b < 0x10) out.push("0", b.toString(16));else out.push(b.toString(16));
	                        }
	                        return out.join('');
	                    };

	                    /**
	                     * Decodes a hex encoded string to a ByteBuffer.
	                     * @param {string} str String to decode
	                     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	                     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	                     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	                     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	                     * @returns {!ByteBuffer} ByteBuffer
	                     * @expose
	                     */
	                    ByteBuffer.fromHex = function (str, littleEndian, noAssert) {
	                        if (!noAssert) {
	                            if (typeof str !== 'string') throw TypeError("Illegal str: Not a string");
	                            if (str.length % 2 !== 0) throw TypeError("Illegal str: Length not a multiple of 2");
	                        }
	                        var k = str.length,
	                            bb = new ByteBuffer(k / 2 | 0, littleEndian),
	                            b;
	                        for (var i = 0, j = 0; i < k; i += 2) {
	                            b = parseInt(str.substring(i, i + 2), 16);
	                            if (!noAssert) if (!isFinite(b) || b < 0 || b > 255) throw TypeError("Illegal str: Contains non-hex characters");
	                            bb.view.setUint8(j++, b);
	                        }
	                        bb.limit = j;
	                        return bb;
	                    };

	                    // utfx-embeddable

	                    /**
	                     * utfx-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>
	                     * Released under the Apache License, Version 2.0
	                     * see: https://github.com/dcodeIO/utfx for details
	                     */
	                    var utfx = (function () {
	                        "use strict";

	                        /**
	                         * utfx namespace.
	                         * @inner
	                         * @type {!Object.<string,*>}
	                         */
	                        var utfx = {};

	                        /**
	                         * Maximum valid code point.
	                         * @type {number}
	                         * @const
	                         */
	                        utfx.MAX_CODEPOINT = 0x10FFFF;

	                        /**
	                         * Encodes UTF8 code points to UTF8 bytes.
	                         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
	                         *  respectively `null` if there are no more code points left or a single numeric code point.
	                         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte
	                         */
	                        utfx.encodeUTF8 = function (src, dst) {
	                            var cp = null;
	                            if (typeof src === 'number') cp = src, src = function () {
	                                return null;
	                            };
	                            while (cp !== null || (cp = src()) !== null) {
	                                if (cp < 0x80) dst(cp & 0x7F);else if (cp < 0x800) dst(cp >> 6 & 0x1F | 0xC0), dst(cp & 0x3F | 0x80);else if (cp < 0x10000) dst(cp >> 12 & 0x0F | 0xE0), dst(cp >> 6 & 0x3F | 0x80), dst(cp & 0x3F | 0x80);else dst(cp >> 18 & 0x07 | 0xF0), dst(cp >> 12 & 0x3F | 0x80), dst(cp >> 6 & 0x3F | 0x80), dst(cp & 0x3F | 0x80);
	                                cp = null;
	                            }
	                        };

	                        /**
	                         * Decodes UTF8 bytes to UTF8 code points.
	                         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
	                         *  are no more bytes left.
	                         * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.
	                         * @throws {RangeError} If a starting byte is invalid in UTF8
	                         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the
	                         *  remaining bytes.
	                         */
	                        utfx.decodeUTF8 = function (src, dst) {
	                            var a,
	                                b,
	                                c,
	                                d,
	                                fail = function fail(b) {
	                                b = b.slice(0, b.indexOf(null));
	                                var err = Error(b.toString());
	                                err.name = "TruncatedError";
	                                err['bytes'] = b;
	                                throw err;
	                            };
	                            while ((a = src()) !== null) {
	                                if ((a & 0x80) === 0) dst(a);else if ((a & 0xE0) === 0xC0) (b = src()) === null && fail([a, b]), dst((a & 0x1F) << 6 | b & 0x3F);else if ((a & 0xF0) === 0xE0) ((b = src()) === null || (c = src()) === null) && fail([a, b, c]), dst((a & 0x0F) << 12 | (b & 0x3F) << 6 | c & 0x3F);else if ((a & 0xF8) === 0xF0) ((b = src()) === null || (c = src()) === null || (d = src()) === null) && fail([a, b, c, d]), dst((a & 0x07) << 18 | (b & 0x3F) << 12 | (c & 0x3F) << 6 | d & 0x3F);else throw RangeError("Illegal starting byte: " + a);
	                            }
	                        };

	                        /**
	                         * Converts UTF16 characters to UTF8 code points.
	                         * @param {!function():number|null} src Characters source as a function returning the next char code respectively
	                         *  `null` if there are no more characters left.
	                         * @param {!function(number)} dst Code points destination as a function successively called with each converted code
	                         *  point.
	                         */
	                        utfx.UTF16toUTF8 = function (src, dst) {
	                            var c1,
	                                c2 = null;
	                            while (true) {
	                                if ((c1 = c2 !== null ? c2 : src()) === null) break;
	                                if (c1 >= 0xD800 && c1 <= 0xDFFF) {
	                                    if ((c2 = src()) !== null) {
	                                        if (c2 >= 0xDC00 && c2 <= 0xDFFF) {
	                                            dst((c1 - 0xD800) * 0x400 + c2 - 0xDC00 + 0x10000);
	                                            c2 = null;continue;
	                                        }
	                                    }
	                                }
	                                dst(c1);
	                            }
	                            if (c2 !== null) dst(c2);
	                        };

	                        /**
	                         * Converts UTF8 code points to UTF16 characters.
	                         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
	                         *  respectively `null` if there are no more code points left or a single numeric code point.
	                         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
	                         * @throws {RangeError} If a code point is out of range
	                         */
	                        utfx.UTF8toUTF16 = function (src, dst) {
	                            var cp = null;
	                            if (typeof src === 'number') cp = src, src = function () {
	                                return null;
	                            };
	                            while (cp !== null || (cp = src()) !== null) {
	                                if (cp <= 0xFFFF) dst(cp);else cp -= 0x10000, dst((cp >> 10) + 0xD800), dst(cp % 0x400 + 0xDC00);
	                                cp = null;
	                            }
	                        };

	                        /**
	                         * Converts and encodes UTF16 characters to UTF8 bytes.
	                         * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`
	                         *  if there are no more characters left.
	                         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
	                         */
	                        utfx.encodeUTF16toUTF8 = function (src, dst) {
	                            utfx.UTF16toUTF8(src, function (cp) {
	                                utfx.encodeUTF8(cp, dst);
	                            });
	                        };

	                        /**
	                         * Decodes and converts UTF8 bytes to UTF16 characters.
	                         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
	                         *  are no more bytes left.
	                         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
	                         * @throws {RangeError} If a starting byte is invalid in UTF8
	                         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.
	                         */
	                        utfx.decodeUTF8toUTF16 = function (src, dst) {
	                            utfx.decodeUTF8(src, function (cp) {
	                                utfx.UTF8toUTF16(cp, dst);
	                            });
	                        };

	                        /**
	                         * Calculates the byte length of an UTF8 code point.
	                         * @param {number} cp UTF8 code point
	                         * @returns {number} Byte length
	                         */
	                        utfx.calculateCodePoint = function (cp) {
	                            return cp < 0x80 ? 1 : cp < 0x800 ? 2 : cp < 0x10000 ? 3 : 4;
	                        };

	                        /**
	                         * Calculates the number of UTF8 bytes required to store UTF8 code points.
	                         * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively
	                         *  `null` if there are no more code points left.
	                         * @returns {number} The number of UTF8 bytes required
	                         */
	                        utfx.calculateUTF8 = function (src) {
	                            var cp,
	                                l = 0;
	                            while ((cp = src()) !== null) l += utfx.calculateCodePoint(cp);
	                            return l;
	                        };

	                        /**
	                         * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.
	                         * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively
	                         *  `null` if there are no more characters left.
	                         * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.
	                         */
	                        utfx.calculateUTF16asUTF8 = function (src) {
	                            var n = 0,
	                                l = 0;
	                            utfx.UTF16toUTF8(src, function (cp) {
	                                ++n;l += utfx.calculateCodePoint(cp);
	                            });
	                            return [n, l];
	                        };

	                        return utfx;
	                    })();

	                    // encodings/utf8

	                    /**
	                     * Encodes this ByteBuffer's contents between {@link ByteBuffer#offset} and {@link ByteBuffer#limit} to an UTF8 encoded
	                     *  string.
	                     * @returns {string} Hex encoded string
	                     * @throws {RangeError} If `offset > limit`
	                     * @expose
	                     */
	                    ByteBufferPrototype.toUTF8 = function (begin, end) {
	                        if (typeof begin === 'undefined') begin = this.offset;
	                        if (typeof end === 'undefined') end = this.limit;
	                        if (!this.noAssert) {
	                            if (typeof begin !== 'number' || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
	                            begin >>>= 0;
	                            if (typeof end !== 'number' || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
	                            end >>>= 0;
	                            if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
	                        }
	                        var sd;try {
	                            utfx.decodeUTF8toUTF16((function () {
	                                return begin < end ? this.view.getUint8(begin++) : null;
	                            }).bind(this), sd = stringDestination());
	                        } catch (e) {
	                            if (begin !== end) throw RangeError("Illegal range: Truncated data, " + begin + " != " + end);
	                        }
	                        return sd();
	                    };

	                    /**
	                     * Decodes an UTF8 encoded string to a ByteBuffer.
	                     * @param {string} str String to decode
	                     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	                     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	                     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	                     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	                     * @returns {!ByteBuffer} ByteBuffer
	                     * @expose
	                     */
	                    ByteBuffer.fromUTF8 = function (str, littleEndian, noAssert) {
	                        if (!noAssert) if (typeof str !== 'string') throw TypeError("Illegal str: Not a string");
	                        var bb = new ByteBuffer(utfx.calculateUTF16asUTF8(stringSource(str), true)[1], littleEndian, noAssert),
	                            i = 0;
	                        utfx.encodeUTF16toUTF8(stringSource(str), function (b) {
	                            bb.view.setUint8(i++, b);
	                        });
	                        bb.limit = i;
	                        return bb;
	                    };

	                    return ByteBuffer;
	                }

	                /* CommonJS */if (typeof require === 'function' && typeof module === 'object' && module && typeof exports === 'object' && exports) module['exports'] = (function () {
	                    var Long;try {
	                        Long = require("long");
	                    } catch (e) {}
	                    return loadByteBuffer(Long);
	                })();
	                /* AMD */else if (typeof define === 'function' && define["amd"]) define("ByteBuffer", ["Long"], function (Long) {
	                        return loadByteBuffer(Long);
	                    });
	                    /* Global */else (global["dcodeIO"] = global["dcodeIO"] || {})["ByteBuffer"] = loadByteBuffer(global["dcodeIO"]["Long"]);
	            })(this);
	        }, { "long": 3 }], 2: [function (require, module, exports) {
	            /*
	             Copyright 2013 Daniel Wirtz <dcode@dcode.io>
	             Copyright 2009 The Closure Library Authors. All Rights Reserved.
	            
	             Licensed under the Apache License, Version 2.0 (the "License");
	             you may not use this file except in compliance with the License.
	             You may obtain a copy of the License at
	            
	             http://www.apache.org/licenses/LICENSE-2.0
	            
	             Unless required by applicable law or agreed to in writing, software
	             distributed under the License is distributed on an "AS-IS" BASIS,
	             WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	             See the License for the specific language governing permissions and
	             limitations under the License.
	             */

	            (function (global) {
	                "use strict";

	                /**
	                 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
	                 *  See the from* functions below for more convenient ways of constructing Longs.
	                 * @exports Long
	                 * @class A Long class for representing a 64 bit two's-complement integer value.
	                 * @param {number} low The low (signed) 32 bits of the long
	                 * @param {number} high The high (signed) 32 bits of the long
	                 * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
	                 * @constructor
	                 */
	                var Long = function Long(low, high, unsigned) {

	                    /**
	                     * The low 32 bits as a signed value.
	                     * @type {number}
	                     * @expose
	                     */
	                    this.low = low | 0;

	                    /**
	                     * The high 32 bits as a signed value.
	                     * @type {number}
	                     * @expose
	                     */
	                    this.high = high | 0;

	                    /**
	                     * Whether unsigned or not.
	                     * @type {boolean}
	                     * @expose
	                     */
	                    this.unsigned = !!unsigned;
	                };

	                // The internal representation of a long is the two given signed, 32-bit values.
	                // We use 32-bit pieces because these are the size of integers on which
	                // Javascript performs bit-operations.  For operations like addition and
	                // multiplication, we split each number into 16 bit pieces, which can easily be
	                // multiplied within Javascript's floating-point representation without overflow
	                // or change in sign.
	                //
	                // In the algorithms below, we frequently reduce the negative case to the
	                // positive case by negating the input(s) and then post-processing the result.
	                // Note that we must ALWAYS check specially whether those values are MIN_VALUE
	                // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
	                // a positive number, it overflows back into a negative).  Not handling this
	                // case would often result in infinite recursion.
	                //
	                // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
	                // methods on which they depend.

	                /**
	                 * Tests if the specified object is a Long.
	                 * @param {*} obj Object
	                 * @returns {boolean}
	                 * @expose
	                 */
	                Long.isLong = function (obj) {
	                    return (obj && obj instanceof Long) === true;
	                };

	                /**
	                 * A cache of the Long representations of small integer values.
	                 * @type {!Object}
	                 * @inner
	                 */
	                var INT_CACHE = {};

	                /**
	                 * A cache of the Long representations of small unsigned integer values.
	                 * @type {!Object}
	                 * @inner
	                 */
	                var UINT_CACHE = {};

	                /**
	                 * Returns a Long representing the given 32 bit integer value.
	                 * @param {number} value The 32 bit integer in question
	                 * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
	                 * @returns {!Long} The corresponding Long value
	                 * @expose
	                 */
	                Long.fromInt = function (value, unsigned) {
	                    var obj, cachedObj;
	                    if (!unsigned) {
	                        value = value | 0;
	                        if (-128 <= value && value < 128) {
	                            cachedObj = INT_CACHE[value];
	                            if (cachedObj) return cachedObj;
	                        }
	                        obj = new Long(value, value < 0 ? -1 : 0, false);
	                        if (-128 <= value && value < 128) INT_CACHE[value] = obj;
	                        return obj;
	                    } else {
	                        value = value >>> 0;
	                        if (0 <= value && value < 256) {
	                            cachedObj = UINT_CACHE[value];
	                            if (cachedObj) return cachedObj;
	                        }
	                        obj = new Long(value, (value | 0) < 0 ? -1 : 0, true);
	                        if (0 <= value && value < 256) UINT_CACHE[value] = obj;
	                        return obj;
	                    }
	                };

	                /**
	                 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
	                 * @param {number} value The number in question
	                 * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
	                 * @returns {!Long} The corresponding Long value
	                 * @expose
	                 */
	                Long.fromNumber = function (value, unsigned) {
	                    unsigned = !!unsigned;
	                    if (isNaN(value) || !isFinite(value)) return Long.ZERO;
	                    if (!unsigned && value <= -TWO_PWR_63_DBL) return Long.MIN_VALUE;
	                    if (!unsigned && value + 1 >= TWO_PWR_63_DBL) return Long.MAX_VALUE;
	                    if (unsigned && value >= TWO_PWR_64_DBL) return Long.MAX_UNSIGNED_VALUE;
	                    if (value < 0) return Long.fromNumber(-value, unsigned).negate();
	                    return new Long(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
	                };

	                /**
	                 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
	                 *  assumed to use 32 bits.
	                 * @param {number} lowBits The low 32 bits
	                 * @param {number} highBits The high 32 bits
	                 * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
	                 * @returns {!Long} The corresponding Long value
	                 * @expose
	                 */
	                Long.fromBits = function (lowBits, highBits, unsigned) {
	                    return new Long(lowBits, highBits, unsigned);
	                };

	                /**
	                 * Returns a Long representation of the given string, written using the specified radix.
	                 * @param {string} str The textual representation of the Long
	                 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed
	                 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
	                 * @returns {!Long} The corresponding Long value
	                 * @expose
	                 */
	                Long.fromString = function (str, unsigned, radix) {
	                    if (str.length === 0) throw Error('number format error: empty string');
	                    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity") return Long.ZERO;
	                    if (typeof unsigned === 'number') // For goog.math.long compatibility
	                        radix = unsigned, unsigned = false;
	                    radix = radix || 10;
	                    if (radix < 2 || 36 < radix) throw Error('radix out of range: ' + radix);

	                    var p;
	                    if ((p = str.indexOf('-')) > 0) throw Error('number format error: interior "-" character: ' + str);else if (p === 0) return Long.fromString(str.substring(1), unsigned, radix).negate();

	                    // Do several (8) digits each time through the loop, so as to
	                    // minimize the calls to the very expensive emulated div.
	                    var radixToPower = Long.fromNumber(Math.pow(radix, 8));

	                    var result = Long.ZERO;
	                    for (var i = 0; i < str.length; i += 8) {
	                        var size = Math.min(8, str.length - i);
	                        var value = parseInt(str.substring(i, i + size), radix);
	                        if (size < 8) {
	                            var power = Long.fromNumber(Math.pow(radix, size));
	                            result = result.multiply(power).add(Long.fromNumber(value));
	                        } else {
	                            result = result.multiply(radixToPower);
	                            result = result.add(Long.fromNumber(value));
	                        }
	                    }
	                    result.unsigned = unsigned;
	                    return result;
	                };

	                /**
	                 * Converts the specified value to a Long.
	                 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
	                 * @returns {!Long}
	                 * @expose
	                 */
	                Long.fromValue = function (val) {
	                    if (typeof val === 'number') return Long.fromNumber(val);
	                    if (typeof val === 'string') return Long.fromString(val);
	                    if (Long.isLong(val)) return val;
	                    // Throws for not an object (undefined, null):
	                    return new Long(val.low, val.high, val.unsigned);
	                };

	                // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
	                // no runtime penalty for these.

	                /**
	                 * @type {number}
	                 * @const
	                 * @inner
	                 */
	                var TWO_PWR_16_DBL = 1 << 16;

	                /**
	                 * @type {number}
	                 * @const
	                 * @inner
	                 */
	                var TWO_PWR_24_DBL = 1 << 24;

	                /**
	                 * @type {number}
	                 * @const
	                 * @inner
	                 */
	                var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

	                /**
	                 * @type {number}
	                 * @const
	                 * @inner
	                 */
	                var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

	                /**
	                 * @type {number}
	                 * @const
	                 * @inner
	                 */
	                var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

	                /**
	                 * @type {!Long}
	                 * @const
	                 * @inner
	                 */
	                var TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);

	                /**
	                 * Signed zero.
	                 * @type {!Long}
	                 * @expose
	                 */
	                Long.ZERO = Long.fromInt(0);

	                /**
	                 * Unsigned zero.
	                 * @type {!Long}
	                 * @expose
	                 */
	                Long.UZERO = Long.fromInt(0, true);

	                /**
	                 * Signed one.
	                 * @type {!Long}
	                 * @expose
	                 */
	                Long.ONE = Long.fromInt(1);

	                /**
	                 * Unsigned one.
	                 * @type {!Long}
	                 * @expose
	                 */
	                Long.UONE = Long.fromInt(1, true);

	                /**
	                 * Signed negative one.
	                 * @type {!Long}
	                 * @expose
	                 */
	                Long.NEG_ONE = Long.fromInt(-1);

	                /**
	                 * Maximum signed value.
	                 * @type {!Long}
	                 * @expose
	                 */
	                Long.MAX_VALUE = Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);

	                /**
	                 * Maximum unsigned value.
	                 * @type {!Long}
	                 * @expose
	                 */
	                Long.MAX_UNSIGNED_VALUE = Long.fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);

	                /**
	                 * Minimum signed value.
	                 * @type {!Long}
	                 * @expose
	                 */
	                Long.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0, false);

	                /**
	                 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
	                 * @returns {number}
	                 * @expose
	                 */
	                Long.prototype.toInt = function () {
	                    return this.unsigned ? this.low >>> 0 : this.low;
	                };

	                /**
	                 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
	                 * @returns {number}
	                 * @expose
	                 */
	                Long.prototype.toNumber = function () {
	                    if (this.unsigned) {
	                        return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
	                    }
	                    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
	                };

	                /**
	                 * Converts the Long to a string written in the specified radix.
	                 * @param {number=} radix Radix (2-36), defaults to 10
	                 * @returns {string}
	                 * @override
	                 * @throws {RangeError} If `radix` is out of range
	                 * @expose
	                 */
	                Long.prototype.toString = function (radix) {
	                    radix = radix || 10;
	                    if (radix < 2 || 36 < radix) throw RangeError('radix out of range: ' + radix);
	                    if (this.isZero()) return '0';
	                    var rem;
	                    if (this.isNegative()) {
	                        // Unsigned Longs are never negative
	                        if (this.equals(Long.MIN_VALUE)) {
	                            // We need to change the Long value before it can be negated, so we remove
	                            // the bottom-most digit in this base and then recurse to do the rest.
	                            var radixLong = Long.fromNumber(radix);
	                            var div = this.div(radixLong);
	                            rem = div.multiply(radixLong).subtract(this);
	                            return div.toString(radix) + rem.toInt().toString(radix);
	                        } else return '-' + this.negate().toString(radix);
	                    }

	                    // Do several (6) digits each time through the loop, so as to
	                    // minimize the calls to the very expensive emulated div.
	                    var radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);
	                    rem = this;
	                    var result = '';
	                    while (true) {
	                        var remDiv = rem.div(radixToPower),
	                            intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0,
	                            digits = intval.toString(radix);
	                        rem = remDiv;
	                        if (rem.isZero()) return digits + result;else {
	                            while (digits.length < 6) digits = '0' + digits;
	                            result = '' + digits + result;
	                        }
	                    }
	                };

	                /**
	                 * Gets the high 32 bits as a signed integer.
	                 * @returns {number} Signed high bits
	                 * @expose
	                 */
	                Long.prototype.getHighBits = function () {
	                    return this.high;
	                };

	                /**
	                 * Gets the high 32 bits as an unsigned integer.
	                 * @returns {number} Unsigned high bits
	                 * @expose
	                 */
	                Long.prototype.getHighBitsUnsigned = function () {
	                    return this.high >>> 0;
	                };

	                /**
	                 * Gets the low 32 bits as a signed integer.
	                 * @returns {number} Signed low bits
	                 * @expose
	                 */
	                Long.prototype.getLowBits = function () {
	                    return this.low;
	                };

	                /**
	                 * Gets the low 32 bits as an unsigned integer.
	                 * @returns {number} Unsigned low bits
	                 * @expose
	                 */
	                Long.prototype.getLowBitsUnsigned = function () {
	                    return this.low >>> 0;
	                };

	                /**
	                 * Gets the number of bits needed to represent the absolute value of this Long.
	                 * @returns {number}
	                 * @expose
	                 */
	                Long.prototype.getNumBitsAbs = function () {
	                    if (this.isNegative()) // Unsigned Longs are never negative
	                        return this.equals(Long.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();
	                    var val = this.high != 0 ? this.high : this.low;
	                    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;
	                    return this.high != 0 ? bit + 33 : bit + 1;
	                };

	                /**
	                 * Tests if this Long's value equals zero.
	                 * @returns {boolean}
	                 * @expose
	                 */
	                Long.prototype.isZero = function () {
	                    return this.high === 0 && this.low === 0;
	                };

	                /**
	                 * Tests if this Long's value is negative.
	                 * @returns {boolean}
	                 * @expose
	                 */
	                Long.prototype.isNegative = function () {
	                    return !this.unsigned && this.high < 0;
	                };

	                /**
	                 * Tests if this Long's value is positive.
	                 * @returns {boolean}
	                 * @expose
	                 */
	                Long.prototype.isPositive = function () {
	                    return this.unsigned || this.high >= 0;
	                };

	                /**
	                 * Tests if this Long's value is odd.
	                 * @returns {boolean}
	                 * @expose
	                 */
	                Long.prototype.isOdd = function () {
	                    return (this.low & 1) === 1;
	                };

	                /**
	                 * Tests if this Long's value is even.
	                 * @returns {boolean}
	                 * @expose
	                 */
	                Long.prototype.isEven = function () {
	                    return (this.low & 1) === 0;
	                };

	                /**
	                 * Tests if this Long's value equals the specified's.
	                 * @param {!Long|number|string} other Other value
	                 * @returns {boolean}
	                 * @expose
	                 */
	                Long.prototype.equals = function (other) {
	                    if (!Long.isLong(other)) other = Long.fromValue(other);
	                    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;
	                    return this.high === other.high && this.low === other.low;
	                };

	                /**
	                 * Tests if this Long's value differs from the specified's.
	                 * @param {!Long|number|string} other Other value
	                 * @returns {boolean}
	                 * @expose
	                 */
	                Long.prototype.notEquals = function (other) {
	                    if (!Long.isLong(other)) other = Long.fromValue(other);
	                    return !this.equals(other);
	                };

	                /**
	                 * Tests if this Long's value is less than the specified's.
	                 * @param {!Long|number|string} other Other value
	                 * @returns {boolean}
	                 * @expose
	                 */
	                Long.prototype.lessThan = function (other) {
	                    if (!Long.isLong(other)) other = Long.fromValue(other);
	                    return this.compare(other) < 0;
	                };

	                /**
	                 * Tests if this Long's value is less than or equal the specified's.
	                 * @param {!Long|number|string} other Other value
	                 * @returns {boolean}
	                 * @expose
	                 */
	                Long.prototype.lessThanOrEqual = function (other) {
	                    if (!Long.isLong(other)) other = Long.fromValue(other);
	                    return this.compare(other) <= 0;
	                };

	                /**
	                 * Tests if this Long's value is greater than the specified's.
	                 * @param {!Long|number|string} other Other value
	                 * @returns {boolean}
	                 * @expose
	                 */
	                Long.prototype.greaterThan = function (other) {
	                    if (!Long.isLong(other)) other = Long.fromValue(other);
	                    return this.compare(other) > 0;
	                };

	                /**
	                 * Tests if this Long's value is greater than or equal the specified's.
	                 * @param {!Long|number|string} other Other value
	                 * @returns {boolean}
	                 * @expose
	                 */
	                Long.prototype.greaterThanOrEqual = function (other) {
	                    return this.compare(other) >= 0;
	                };

	                /**
	                 * Compares this Long's value with the specified's.
	                 * @param {!Long|number|string} other Other value
	                 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
	                 *  if the given one is greater
	                 * @expose
	                 */
	                Long.prototype.compare = function (other) {
	                    if (this.equals(other)) return 0;
	                    var thisNeg = this.isNegative(),
	                        otherNeg = other.isNegative();
	                    if (thisNeg && !otherNeg) return -1;
	                    if (!thisNeg && otherNeg) return 1;
	                    // At this point the sign bits are the same
	                    if (!this.unsigned) return this.subtract(other).isNegative() ? -1 : 1;
	                    // Both are positive if at least one is unsigned
	                    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
	                };

	                /**
	                 * Negates this Long's value.
	                 * @returns {!Long} Negated Long
	                 * @expose
	                 */
	                Long.prototype.negate = function () {
	                    if (!this.unsigned && this.equals(Long.MIN_VALUE)) return Long.MIN_VALUE;
	                    return this.not().add(Long.ONE);
	                };

	                /**
	                 * Returns the sum of this and the specified Long.
	                 * @param {!Long|number|string} addend Addend
	                 * @returns {!Long} Sum
	                 * @expose
	                 */
	                Long.prototype.add = function (addend) {
	                    if (!Long.isLong(addend)) addend = Long.fromValue(addend);

	                    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

	                    var a48 = this.high >>> 16;
	                    var a32 = this.high & 0xFFFF;
	                    var a16 = this.low >>> 16;
	                    var a00 = this.low & 0xFFFF;

	                    var b48 = addend.high >>> 16;
	                    var b32 = addend.high & 0xFFFF;
	                    var b16 = addend.low >>> 16;
	                    var b00 = addend.low & 0xFFFF;

	                    var c48 = 0,
	                        c32 = 0,
	                        c16 = 0,
	                        c00 = 0;
	                    c00 += a00 + b00;
	                    c16 += c00 >>> 16;
	                    c00 &= 0xFFFF;
	                    c16 += a16 + b16;
	                    c32 += c16 >>> 16;
	                    c16 &= 0xFFFF;
	                    c32 += a32 + b32;
	                    c48 += c32 >>> 16;
	                    c32 &= 0xFFFF;
	                    c48 += a48 + b48;
	                    c48 &= 0xFFFF;
	                    return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
	                };

	                /**
	                 * Returns the difference of this and the specified Long.
	                 * @param {!Long|number|string} subtrahend Subtrahend
	                 * @returns {!Long} Difference
	                 * @expose
	                 */
	                Long.prototype.subtract = function (subtrahend) {
	                    if (!Long.isLong(subtrahend)) subtrahend = Long.fromValue(subtrahend);
	                    return this.add(subtrahend.negate());
	                };

	                /**
	                 * Returns the product of this and the specified Long.
	                 * @param {!Long|number|string} multiplier Multiplier
	                 * @returns {!Long} Product
	                 * @expose
	                 */
	                Long.prototype.multiply = function (multiplier) {
	                    if (this.isZero()) return Long.ZERO;
	                    if (!Long.isLong(multiplier)) multiplier = Long.fromValue(multiplier);
	                    if (multiplier.isZero()) return Long.ZERO;
	                    if (this.equals(Long.MIN_VALUE)) return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;
	                    if (multiplier.equals(Long.MIN_VALUE)) return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;

	                    if (this.isNegative()) {
	                        if (multiplier.isNegative()) return this.negate().multiply(multiplier.negate());else return this.negate().multiply(multiplier).negate();
	                    } else if (multiplier.isNegative()) return this.multiply(multiplier.negate()).negate();

	                    // If both longs are small, use float multiplication
	                    if (this.lessThan(TWO_PWR_24) && multiplier.lessThan(TWO_PWR_24)) return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

	                    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
	                    // We can skip products that would overflow.

	                    var a48 = this.high >>> 16;
	                    var a32 = this.high & 0xFFFF;
	                    var a16 = this.low >>> 16;
	                    var a00 = this.low & 0xFFFF;

	                    var b48 = multiplier.high >>> 16;
	                    var b32 = multiplier.high & 0xFFFF;
	                    var b16 = multiplier.low >>> 16;
	                    var b00 = multiplier.low & 0xFFFF;

	                    var c48 = 0,
	                        c32 = 0,
	                        c16 = 0,
	                        c00 = 0;
	                    c00 += a00 * b00;
	                    c16 += c00 >>> 16;
	                    c00 &= 0xFFFF;
	                    c16 += a16 * b00;
	                    c32 += c16 >>> 16;
	                    c16 &= 0xFFFF;
	                    c16 += a00 * b16;
	                    c32 += c16 >>> 16;
	                    c16 &= 0xFFFF;
	                    c32 += a32 * b00;
	                    c48 += c32 >>> 16;
	                    c32 &= 0xFFFF;
	                    c32 += a16 * b16;
	                    c48 += c32 >>> 16;
	                    c32 &= 0xFFFF;
	                    c32 += a00 * b32;
	                    c48 += c32 >>> 16;
	                    c32 &= 0xFFFF;
	                    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
	                    c48 &= 0xFFFF;
	                    return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
	                };

	                /**
	                 * Returns this Long divided by the specified.
	                 * @param {!Long|number|string} divisor Divisor
	                 * @returns {!Long} Quotient
	                 * @expose
	                 */
	                Long.prototype.div = function (divisor) {
	                    if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);
	                    if (divisor.isZero()) throw new Error('division by zero');
	                    if (this.isZero()) return this.unsigned ? Long.UZERO : Long.ZERO;
	                    var approx, rem, res;
	                    if (this.equals(Long.MIN_VALUE)) {
	                        if (divisor.equals(Long.ONE) || divisor.equals(Long.NEG_ONE)) return Long.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE
	                        else if (divisor.equals(Long.MIN_VALUE)) return Long.ONE;else {
	                                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
	                                var halfThis = this.shiftRight(1);
	                                approx = halfThis.div(divisor).shiftLeft(1);
	                                if (approx.equals(Long.ZERO)) {
	                                    return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;
	                                } else {
	                                    rem = this.subtract(divisor.multiply(approx));
	                                    res = approx.add(rem.div(divisor));
	                                    return res;
	                                }
	                            }
	                    } else if (divisor.equals(Long.MIN_VALUE)) return this.unsigned ? Long.UZERO : Long.ZERO;
	                    if (this.isNegative()) {
	                        if (divisor.isNegative()) return this.negate().div(divisor.negate());
	                        return this.negate().div(divisor).negate();
	                    } else if (divisor.isNegative()) return this.div(divisor.negate()).negate();

	                    // Repeat the following until the remainder is less than other:  find a
	                    // floating-point that approximates remainder / other *from below*, add this
	                    // into the result, and subtract it from the remainder.  It is critical that
	                    // the approximate value is less than or equal to the real value so that the
	                    // remainder never becomes negative.
	                    res = Long.ZERO;
	                    rem = this;
	                    while (rem.greaterThanOrEqual(divisor)) {
	                        // Approximate the result of division. This may be a little greater or
	                        // smaller than the actual value.
	                        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

	                        // We will tweak the approximate result by changing it in the 48-th digit or
	                        // the smallest non-fractional digit, whichever is larger.
	                        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
	                            delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48),

	                        // Decrease the approximation until it is smaller than the remainder.  Note
	                        // that if it is too large, the product overflows and is negative.
	                        approxRes = Long.fromNumber(approx),
	                            approxRem = approxRes.multiply(divisor);
	                        while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
	                            approx -= delta;
	                            approxRes = Long.fromNumber(approx, this.unsigned);
	                            approxRem = approxRes.multiply(divisor);
	                        }

	                        // We know the answer can't be zero... and actually, zero would cause
	                        // infinite recursion since we would make no progress.
	                        if (approxRes.isZero()) approxRes = Long.ONE;

	                        res = res.add(approxRes);
	                        rem = rem.subtract(approxRem);
	                    }
	                    return res;
	                };

	                /**
	                 * Returns this Long modulo the specified.
	                 * @param {!Long|number|string} divisor Divisor
	                 * @returns {!Long} Remainder
	                 * @expose
	                 */
	                Long.prototype.modulo = function (divisor) {
	                    if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);
	                    return this.subtract(this.div(divisor).multiply(divisor));
	                };

	                /**
	                 * Returns the bitwise NOT of this Long.
	                 * @returns {!Long}
	                 * @expose
	                 */
	                Long.prototype.not = function () {
	                    return Long.fromBits(~this.low, ~this.high, this.unsigned);
	                };

	                /**
	                 * Returns the bitwise AND of this Long and the specified.
	                 * @param {!Long|number|string} other Other Long
	                 * @returns {!Long}
	                 * @expose
	                 */
	                Long.prototype.and = function (other) {
	                    if (!Long.isLong(other)) other = Long.fromValue(other);
	                    return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);
	                };

	                /**
	                 * Returns the bitwise OR of this Long and the specified.
	                 * @param {!Long|number|string} other Other Long
	                 * @returns {!Long}
	                 * @expose
	                 */
	                Long.prototype.or = function (other) {
	                    if (!Long.isLong(other)) other = Long.fromValue(other);
	                    return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);
	                };

	                /**
	                 * Returns the bitwise XOR of this Long and the given one.
	                 * @param {!Long|number|string} other Other Long
	                 * @returns {!Long}
	                 * @expose
	                 */
	                Long.prototype.xor = function (other) {
	                    if (!Long.isLong(other)) other = Long.fromValue(other);
	                    return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
	                };

	                /**
	                 * Returns this Long with bits shifted to the left by the given amount.
	                 * @param {number|!Long} numBits Number of bits
	                 * @returns {!Long} Shifted Long
	                 * @expose
	                 */
	                Long.prototype.shiftLeft = function (numBits) {
	                    if (Long.isLong(numBits)) numBits = numBits.toInt();
	                    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return Long.fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return Long.fromBits(0, this.low << numBits - 32, this.unsigned);
	                };

	                /**
	                 * Returns this Long with bits arithmetically shifted to the right by the given amount.
	                 * @param {number|!Long} numBits Number of bits
	                 * @returns {!Long} Shifted Long
	                 * @expose
	                 */
	                Long.prototype.shiftRight = function (numBits) {
	                    if (Long.isLong(numBits)) numBits = numBits.toInt();
	                    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return Long.fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return Long.fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
	                };

	                /**
	                 * Returns this Long with bits logically shifted to the right by the given amount.
	                 * @param {number|!Long} numBits Number of bits
	                 * @returns {!Long} Shifted Long
	                 * @expose
	                 */
	                Long.prototype.shiftRightUnsigned = function (numBits) {
	                    if (Long.isLong(numBits)) numBits = numBits.toInt();
	                    numBits &= 63;
	                    if (numBits === 0) return this;else {
	                        var high = this.high;
	                        if (numBits < 32) {
	                            var low = this.low;
	                            return Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
	                        } else if (numBits === 32) return Long.fromBits(high, 0, this.unsigned);else return Long.fromBits(high >>> numBits - 32, 0, this.unsigned);
	                    }
	                };

	                /**
	                 * Converts this Long to signed.
	                 * @returns {!Long} Signed long
	                 * @expose
	                 */
	                Long.prototype.toSigned = function () {
	                    if (!this.unsigned) return this;
	                    return new Long(this.low, this.high, false);
	                };

	                /**
	                 * Converts this Long to unsigned.
	                 * @returns {!Long} Unsigned long
	                 * @expose
	                 */
	                Long.prototype.toUnsigned = function () {
	                    if (this.unsigned) return this;
	                    return new Long(this.low, this.high, true);
	                };

	                /* CommonJS */if (typeof require === 'function' && typeof module === 'object' && module && typeof exports === 'object' && exports) module["exports"] = Long;
	                /* AMD */else if (typeof define === 'function' && define["amd"]) define(function () {
	                        return Long;
	                    });
	                    /* Global */else (global["dcodeIO"] = global["dcodeIO"] || {})["Long"] = Long;
	            })(this);
	        }, {}], 3: [function (require, module, exports) {
	            /*
	             Copyright 2013 Daniel Wirtz <dcode@dcode.io>
	             Copyright 2009 The Closure Library Authors. All Rights Reserved.
	            
	             Licensed under the Apache License, Version 2.0 (the "License");
	             you may not use this file except in compliance with the License.
	             You may obtain a copy of the License at
	            
	             http://www.apache.org/licenses/LICENSE-2.0
	            
	             Unless required by applicable law or agreed to in writing, software
	             distributed under the License is distributed on an "AS-IS" BASIS,
	             WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	             See the License for the specific language governing permissions and
	             limitations under the License.
	             */

	            module.exports = require("./dist/Long.js");
	        }, { "./dist/Long.js": 2 }], 4: [function (require, module, exports) {
	            module.exports = require('bytebuffer');
	        }, { "bytebuffer": 1 }] }, {}, [4])(4);
	});
	//
	/**
	 * @license Long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
	 * Released under the Apache License, Version 2.0
	 * see: https://github.com/dcodeIO/Long.js for details
	 */

/***/ },
/* 76 */
/*!***************************************!*\
  !*** ./app/dl/src/ecc/address.coffee ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Address, ByteBuffer, assert, base58, config, hash;

	assert = __webpack_require__(/*! assert */ 9);

	ByteBuffer = __webpack_require__(/*! ../common/bytebuffer */ 74);

	config = __webpack_require__(/*! ../chain/config */ 38);

	hash = __webpack_require__(/*! ../common/hash */ 21);

	base58 = __webpack_require__(/*! bs58 */ 20);

	Address = (function() {
	  function Address(addy1) {
	    this.addy = addy1;
	  }

	  Address.fromBuffer = function(buffer) {
	    var _hash, addy;
	    _hash = hash.sha512(buffer);
	    addy = hash.ripemd160(_hash);
	    return new Address(addy);
	  };

	  Address.fromString = function(string, address_prefix) {
	    var addy, checksum, new_checksum, prefix;
	    if (address_prefix == null) {
	      address_prefix = config.address_prefix;
	    }
	    prefix = string.slice(0, address_prefix.length);
	    assert.equal(address_prefix, prefix, "Expecting key to begin with " + address_prefix + ", instead got " + prefix);
	    addy = string.slice(address_prefix.length);
	    addy = new Buffer(base58.decode(addy), 'binary');
	    checksum = addy.slice(-4);
	    addy = addy.slice(0, -4);
	    new_checksum = hash.ripemd160(addy);
	    new_checksum = new_checksum.slice(0, 4);
	    assert.deepEqual(checksum, new_checksum, 'Checksum did not match');
	    return new Address(addy);
	  };


	  /** @return Address - Compressed PTS format (by default) */

	  Address.fromPublic = function(public_key, compressed, version) {
	    var addr, buffer, check, rep, sha2, versionBuffer;
	    if (compressed == null) {
	      compressed = true;
	    }
	    if (version == null) {
	      version = 56;
	    }
	    sha2 = hash.sha256(public_key.toBuffer(compressed));
	    rep = hash.ripemd160(sha2);
	    versionBuffer = new Buffer(1);
	    versionBuffer.writeUInt8(0xFF & version, 0);
	    addr = Buffer.concat([versionBuffer, rep]);
	    check = hash.sha256(addr);
	    check = hash.sha256(check);
	    buffer = Buffer.concat([addr, check.slice(0, 4)]);
	    return new Address(hash.ripemd160(buffer));
	  };

	  Address.prototype.toBuffer = function() {
	    return this.addy;
	  };

	  Address.prototype.toString = function(address_prefix) {
	    var addy, checksum;
	    if (address_prefix == null) {
	      address_prefix = config.address_prefix;
	    }
	    checksum = hash.ripemd160(this.addy);
	    addy = Buffer.concat([this.addy, checksum.slice(0, 4)]);
	    return address_prefix + base58.encode(addy);
	  };

	  return Address;

	})();

	module.exports = Address;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/buffer/index.js */ 2).Buffer))

/***/ },
/* 77 */
/*!********************************************!*\
  !*** ./app/dl/src/common/dictionary_en.js ***!
  \********************************************/
/***/ function(module, exports) {

	"use strict";

		module.exports = "a,aa,aal,aalii,aam,aba,abac,abaca,abacate,abacay,abacist,aback,abactor,abacus,abaff,abaft,abaiser,abalone,abandon,abas,abase,abased,abaser,abash,abashed,abasia,abasic,abask,abate,abater,abatis,abaton,abator,abature,abave,abaxial,abaxile,abaze,abb,abbacy,abbas,abbasi,abbassi,abbess,abbey,abbot,abbotcy,abdal,abdat,abdest,abdomen,abduce,abduct,abeam,abear,abed,abeigh,abele,abelite,abet,abettal,abettor,abey,abeyant,abfarad,abhenry,abhor,abidal,abide,abider,abidi,abiding,abietic,abietin,abigail,abigeat,abigeus,abilao,ability,abilla,abilo,abiosis,abiotic,abir,abiston,abiuret,abject,abjoint,abjudge,abjure,abjurer,abkar,abkari,ablach,ablare,ablate,ablator,ablaut,ablaze,able,ableeze,abler,ablest,ablins,abloom,ablow,ablude,abluent,ablush,ably,abmho,abnet,aboard,abode,abody,abohm,aboil,abolish,abolla,aboma,abomine,aboon,aborad,aboral,abord,abort,aborted,abortin,abortus,abound,about,abouts,above,abox,abrade,abrader,abraid,abrasax,abrase,abrash,abraum,abraxas,abreact,abreast,abret,abrico,abridge,abrim,abrin,abroach,abroad,abrook,abrupt,abscess,abscind,abscise,absciss,abscond,absence,absent,absit,absmho,absohm,absolve,absorb,absorpt,abstain,absume,absurd,absvolt,abthain,abu,abucco,abulia,abulic,abuna,abura,aburban,aburst,aburton,abuse,abusee,abuser,abusion,abusive,abut,abuttal,abutter,abuzz,abvolt,abwab,aby,abysm,abysmal,abyss,abyssal,acaciin,acacin,academe,academy,acajou,acaleph,acana,acanth,acantha,acapnia,acapu,acara,acardia,acari,acarian,acarid,acarine,acaroid,acarol,acate,acatery,acaudal,acca,accede,acceder,accend,accent,accept,accerse,access,accidia,accidie,accinge,accite,acclaim,accloy,accoast,accoil,accolle,accompt,accord,accost,account,accoy,accrete,accrual,accrue,accruer,accurse,accusal,accuse,accused,accuser,ace,acedia,acedy,acephal,acerate,acerb,acerbic,acerdol,acerin,acerose,acerous,acerra,aceship,acetal,acetate,acetic,acetify,acetin,acetize,acetoin,acetol,acetone,acetose,acetous,acetum,acetyl,ach,achage,achar,achate,ache,achene,acher,achete,achieve,achigan,achill,achime,aching,achira,acholia,acholic,achor,achree,achroma,achtel,achy,achylia,achymia,acicula,acid,acider,acidic,acidify,acidite,acidity,acidize,acidly,acidoid,acidyl,acier,aciform,acinar,acinary,acinic,acinose,acinous,acinus,aciurgy,acker,ackey,ackman,acknow,acle,aclinal,aclinic,acloud,aclys,acmatic,acme,acmic,acmite,acne,acnemia,acnodal,acnode,acock,acocotl,acoin,acoine,acold,acology,acolous,acolyte,acoma,acomia,acomous,acone,aconic,aconin,aconine,aconite,acopic,acopon,acor,acorea,acoria,acorn,acorned,acosmic,acouasm,acouchi,acouchy,acoupa,acquest,acquire,acquist,acquit,acracy,acraein,acrasia,acratia,acrawl,acraze,acre,acreage,acreak,acream,acred,acreman,acrid,acridan,acridic,acridly,acridyl,acrinyl,acrisia,acritan,acrite,acritol,acroama,acrobat,acrogen,acron,acronyc,acronym,acronyx,acrook,acrose,across,acrotic,acryl,acrylic,acrylyl,act,acta,actable,actify,actin,actinal,actine,acting,actinic,actinon,action,active,activin,actless,acton,actor,actress,actu,actual,actuary,acture,acuate,acuity,aculea,aculeus,acumen,acushla,acutate,acute,acutely,acutish,acyclic,acyesis,acyetic,acyl,acylate,acyloin,acyloxy,acystia,ad,adactyl,adad,adage,adagial,adagio,adamant,adamas,adamine,adamite,adance,adangle,adapid,adapt,adapter,adaptor,adarme,adat,adati,adatom,adaunt,adaw,adawe,adawlut,adawn,adaxial,aday,adays,adazzle,adcraft,add,adda,addable,addax,added,addedly,addend,addenda,adder,addible,addict,addle,addlins,address,addrest,adduce,adducer,adduct,ade,adead,adeem,adeep,adeling,adelite,adenase,adenia,adenine,adenoid,adenoma,adenose,adenyl,adept,adermia,adermin,adet,adevism,adfix,adhaka,adharma,adhere,adherer,adhibit,adiate,adicity,adieu,adieux,adinole,adion,adipate,adipic,adipoid,adipoma,adipose,adipous,adipsia,adipsic,adipsy,adipyl,adit,adital,aditus,adjag,adject,adjiger,adjoin,adjoint,adjourn,adjudge,adjunct,adjure,adjurer,adjust,adlay,adless,adlet,adman,admi,admiral,admire,admired,admirer,admit,admix,adnate,adnex,adnexal,adnexed,adnoun,ado,adobe,adonin,adonite,adonize,adopt,adopted,adoptee,adopter,adoral,adorant,adore,adorer,adorn,adorner,adossed,adoulie,adown,adoxy,adoze,adpao,adpress,adread,adream,adreamt,adrenal,adrenin,adrift,adrip,adroit,adroop,adrop,adrowse,adrue,adry,adsbud,adsmith,adsorb,adtevac,adular,adulate,adult,adulter,adunc,adusk,adust,advance,advene,adverb,adverse,advert,advice,advisal,advise,advised,advisee,adviser,advisor,advowee,ady,adynamy,adyta,adyton,adytum,adz,adze,adzer,adzooks,ae,aecial,aecium,aedile,aedilic,aefald,aefaldy,aefauld,aegis,aenach,aenean,aeneous,aeolid,aeolina,aeoline,aeon,aeonial,aeonian,aeonist,aer,aerage,aerate,aerator,aerial,aeric,aerical,aerie,aeried,aerify,aero,aerobe,aerobic,aerobus,aerogel,aerogen,aerogun,aeronat,aeronef,aerose,aerosol,aerugo,aery,aes,aevia,aface,afaint,afar,afara,afear,afeard,afeared,afernan,afetal,affa,affable,affably,affair,affaite,affect,affeer,affeir,affiant,affinal,affine,affined,affirm,affix,affixal,affixer,afflict,afflux,afforce,afford,affray,affront,affuse,affy,afghani,afield,afire,aflame,aflare,aflat,aflaunt,aflight,afloat,aflow,aflower,aflush,afoam,afoot,afore,afoul,afraid,afreet,afresh,afret,afront,afrown,aft,aftaba,after,aftergo,aftmost,aftosa,aftward,aga,again,against,agal,agalaxy,agalite,agallop,agalma,agama,agamete,agami,agamian,agamic,agamid,agamoid,agamont,agamous,agamy,agape,agapeti,agar,agaric,agarita,agarwal,agasp,agate,agathin,agatine,agatize,agatoid,agaty,agavose,agaze,agazed,age,aged,agedly,agee,ageless,agelong,agen,agency,agenda,agendum,agent,agentry,ager,ageusia,ageusic,agger,aggrade,aggrate,aggress,aggroup,aggry,aggur,agha,aghanee,aghast,agile,agilely,agility,aging,agio,agist,agistor,agitant,agitate,agla,aglance,aglare,agleaf,agleam,aglet,agley,aglint,aglow,aglucon,agnail,agname,agnamed,agnate,agnatic,agnel,agnize,agnomen,agnosia,agnosis,agnosy,agnus,ago,agog,agoge,agogic,agogics,agoho,agoing,agon,agonal,agone,agonic,agonied,agonist,agonium,agonize,agony,agora,agouara,agouta,agouti,agpaite,agrah,agral,agre,agree,agreed,agreer,agrege,agria,agrin,agrise,agrito,agroan,agrom,agroof,agrope,aground,agrufe,agruif,agsam,agua,ague,aguey,aguish,agunah,agush,agust,agy,agynary,agynous,agyrate,agyria,ah,aha,ahaaina,ahaunch,ahead,aheap,ahem,ahey,ahimsa,ahind,ahint,ahmadi,aho,ahong,ahorse,ahoy,ahsan,ahu,ahuatle,ahull,ahum,ahungry,ahunt,ahura,ahush,ahwal,ahypnia,ai,aid,aidable,aidance,aidant,aide,aider,aidful,aidless,aiel,aiglet,ail,ailanto,aile,aileron,ailette,ailing,aillt,ailment,ailsyte,ailuro,ailweed,aim,aimara,aimer,aimful,aiming,aimless,ainaleh,ainhum,ainoi,ainsell,aint,aion,aionial,air,airable,airampo,airan,aircrew,airdock,airdrop,aire,airer,airfoil,airhead,airily,airing,airish,airless,airlift,airlike,airmail,airman,airmark,airpark,airport,airship,airsick,airt,airward,airway,airy,aisle,aisled,aisling,ait,aitch,aitesis,aition,aiwan,aizle,ajaja,ajangle,ajar,ajari,ajava,ajhar,ajivika,ajog,ajoint,ajowan,ak,aka,akala,akaroa,akasa,akazga,akcheh,ake,akeake,akebi,akee,akeki,akeley,akepiro,akerite,akey,akhoond,akhrot,akhyana,akia,akimbo,akin,akindle,akinete,akmudar,aknee,ako,akoasm,akoasma,akonge,akov,akpek,akra,aku,akule,akund,al,ala,alacha,alack,alada,alaihi,alaite,alala,alalite,alalus,alameda,alamo,alamoth,alan,aland,alangin,alani,alanine,alannah,alantic,alantin,alantol,alanyl,alar,alares,alarm,alarmed,alarum,alary,alas,alate,alated,alatern,alation,alb,alba,alban,albarco,albata,albe,albedo,albee,albeit,albetad,albify,albinal,albinic,albino,albite,albitic,albugo,album,albumen,albumin,alburn,albus,alcaide,alcalde,alcanna,alcazar,alchemy,alchera,alchimy,alchymy,alcine,alclad,alco,alcoate,alcogel,alcohol,alcosol,alcove,alcyon,aldane,aldazin,aldehol,alder,aldern,aldim,aldime,aldine,aldol,aldose,ale,aleak,alec,alecize,alecost,alecup,alee,alef,aleft,alegar,alehoof,alem,alemana,alembic,alemite,alemmal,alen,aleph,alephs,alepole,alepot,alerce,alerse,alert,alertly,alesan,aletap,alette,alevin,alewife,alexia,alexic,alexin,aleyard,alf,alfa,alfaje,alfalfa,alfaqui,alfet,alfiona,alfonso,alforja,alga,algae,algal,algalia,algate,algebra,algedo,algesia,algesic,algesis,algetic,algic,algid,algific,algin,algine,alginic,algist,algoid,algor,algosis,algous,algum,alhenna,alias,alibi,alible,alichel,alidade,alien,aliency,alienee,aliener,alienor,alif,aliform,alight,align,aligner,aliipoe,alike,alima,aliment,alimony,alin,aliofar,alipata,aliped,aliptes,aliptic,aliquot,alish,alisier,alismad,alismal,aliso,alison,alisp,alist,alit,alite,aliunde,alive,aliyah,alizari,aljoba,alk,alkali,alkalic,alkamin,alkane,alkanet,alkene,alkenna,alkenyl,alkide,alkine,alkool,alkoxy,alkoxyl,alky,alkyd,alkyl,alkylic,alkyne,all,allan,allay,allayer,allbone,allege,alleger,allegro,allele,allelic,allene,aller,allergy,alley,alleyed,allgood,allheal,allice,allied,allies,allness,allonym,alloquy,allose,allot,allotee,allover,allow,allower,alloxan,alloy,allseed,alltud,allude,allure,allurer,alluvia,allwork,ally,allyl,allylic,alma,almadia,almadie,almagra,almanac,alme,almemar,almique,almirah,almoign,almon,almond,almondy,almoner,almonry,almost,almous,alms,almsful,almsman,almuce,almud,almude,almug,almuten,aln,alnage,alnager,alnein,alnico,alnoite,alnuin,alo,alochia,alod,alodial,alodian,alodium,alody,aloe,aloed,aloesol,aloetic,aloft,alogia,alogism,alogy,aloid,aloin,aloma,alone,along,alongst,aloof,aloofly,aloose,alop,alopeke,alose,aloud,alow,alowe,alp,alpaca,alpeen,alpha,alphol,alphorn,alphos,alphyl,alpieu,alpine,alpist,alquier,alraun,already,alright,alroot,alruna,also,alsoon,alt,altaite,altar,altared,alter,alterer,altern,alterne,althea,althein,altho,althorn,altilik,altin,alto,altoun,altrose,altun,aludel,alula,alular,alulet,alum,alumic,alumina,alumine,alumish,alumite,alumium,alumna,alumnae,alumnal,alumni,alumnus,alunite,alupag,alure,aluta,alvar,alveary,alveloz,alveola,alveole,alveoli,alveus,alvine,alvite,alvus,alway,always,aly,alypin,alysson,am,ama,amaas,amadou,amaga,amah,amain,amakebe,amala,amalaka,amalgam,amaltas,amamau,amandin,amang,amani,amania,amanori,amanous,amapa,amar,amarin,amarine,amarity,amaroid,amass,amasser,amastia,amasty,amateur,amative,amatol,amatory,amaze,amazed,amazia,amazing,amba,ambage,ambalam,amban,ambar,ambaree,ambary,ambash,ambassy,ambatch,ambay,ambeer,amber,ambery,ambiens,ambient,ambier,ambit,ambital,ambitty,ambitus,amble,ambler,ambling,ambo,ambon,ambos,ambrain,ambrein,ambrite,ambroid,ambrose,ambry,ambsace,ambury,ambush,amchoor,ame,ameed,ameen,amelia,amellus,amelu,amelus,amen,amend,amende,amender,amends,amene,amenia,amenity,ament,amental,amentia,amentum,amerce,amercer,amerism,amesite,ametria,amgarn,amhar,amhran,ami,amiable,amiably,amianth,amic,amical,amice,amiced,amicron,amid,amidase,amidate,amide,amidic,amidid,amidide,amidin,amidine,amido,amidol,amidon,amidoxy,amidst,amil,amimia,amimide,amin,aminate,amine,amini,aminic,aminity,aminize,amino,aminoid,amir,amiray,amiss,amity,amixia,amla,amli,amlikar,amlong,amma,amman,ammelin,ammer,ammeter,ammine,ammo,ammonal,ammonia,ammonic,ammono,ammu,amnesia,amnesic,amnesty,amnia,amniac,amnic,amnion,amniote,amober,amobyr,amoeba,amoebae,amoeban,amoebic,amoebid,amok,amoke,amole,amomal,amomum,among,amongst,amor,amorado,amoraic,amoraim,amoral,amoret,amorism,amorist,amoroso,amorous,amorphy,amort,amotion,amotus,amount,amour,amove,ampalea,amper,ampere,ampery,amphid,amphide,amphora,amphore,ample,amplify,amply,ampoule,ampul,ampulla,amputee,ampyx,amra,amreeta,amrita,amsath,amsel,amt,amtman,amuck,amuguis,amula,amulet,amulla,amunam,amurca,amuse,amused,amusee,amuser,amusia,amusing,amusive,amutter,amuyon,amuyong,amuze,amvis,amy,amyelia,amyelic,amygdal,amyl,amylan,amylase,amylate,amylene,amylic,amylin,amylo,amyloid,amylom,amylon,amylose,amylum,amyous,amyrin,amyrol,amyroot,an,ana,anabata,anabo,anabong,anacara,anacard,anacid,anadem,anadrom,anaemia,anaemic,anagap,anagep,anagoge,anagogy,anagram,anagua,anahau,anal,analav,analgen,analgia,analgic,anally,analogy,analyse,analyst,analyze,anam,anama,anamite,anan,anana,ananas,ananda,ananym,anaphia,anapnea,anapsid,anaqua,anarch,anarchy,anareta,anarya,anatase,anatifa,anatine,anatomy,anatox,anatron,anaudia,anaxial,anaxon,anaxone,anay,anba,anbury,anchor,anchovy,ancient,ancile,ancilla,ancon,anconad,anconal,ancone,ancony,ancora,ancoral,and,anda,andante,andirin,andiron,andric,android,androl,andron,anear,aneath,anele,anemia,anemic,anemone,anemony,anend,anenst,anent,anepia,anergia,anergic,anergy,anerly,aneroid,anes,anesis,aneuria,aneuric,aneurin,anew,angaria,angary,angekok,angel,angelet,angelic,angelin,angelot,anger,angerly,angeyok,angico,angild,angili,angina,anginal,angioid,angioma,angle,angled,angler,angling,angloid,ango,angolar,angor,angrily,angrite,angry,angst,angster,anguid,anguine,anguis,anguish,angula,angular,anguria,anhang,anhima,anhinga,ani,anicut,anidian,aniente,anigh,anight,anights,anil,anilao,anilau,anile,anilic,anilid,anilide,aniline,anility,anilla,anima,animal,animate,anime,animi,animism,animist,animize,animous,animus,anion,anionic,anis,anisal,anisate,anise,aniseed,anisic,anisil,anisoin,anisole,anisoyl,anisum,anisyl,anither,anjan,ankee,anker,ankh,ankle,anklet,anklong,ankus,ankusha,anlace,anlaut,ann,anna,annal,annale,annals,annat,annates,annatto,anneal,annelid,annet,annex,annexa,annexal,annexer,annite,annona,annoy,annoyer,annual,annuary,annuent,annuity,annul,annular,annulet,annulus,anoa,anodal,anode,anodic,anodize,anodos,anodyne,anoesia,anoesis,anoetic,anoil,anoine,anoint,anole,anoli,anolian,anolyte,anomaly,anomite,anomy,anon,anonang,anonol,anonym,anonyma,anopia,anopsia,anorak,anorexy,anormal,anorth,anosmia,anosmic,another,anotia,anotta,anotto,anotus,anounou,anoxia,anoxic,ansa,ansar,ansate,ansu,answer,ant,anta,antacid,antal,antapex,antdom,ante,anteact,anteal,antefix,antenna,antes,antewar,anthela,anthem,anthema,anthemy,anther,anthill,anthine,anthoid,anthood,anthrax,anthrol,anthryl,anti,antiae,antiar,antic,antical,anticly,anticor,anticum,antifat,antigen,antigod,antihum,antiqua,antique,antired,antirun,antisun,antitax,antiwar,antiwit,antler,antlia,antling,antoeci,antonym,antra,antral,antre,antrin,antrum,antship,antu,antwise,anubing,anuloma,anuran,anuria,anuric,anurous,anury,anus,anusim,anvil,anxiety,anxious,any,anybody,anyhow,anyone,anyway,anyways,anywhen,anywhy,anywise,aogiri,aonach,aorist,aorta,aortal,aortic,aortism,aosmic,aoudad,apa,apace,apache,apadana,apagoge,apaid,apalit,apandry,apar,aparejo,apart,apasote,apatan,apathic,apathy,apatite,ape,apeak,apedom,apehood,apeiron,apelet,apelike,apeling,apepsia,apepsy,apeptic,aper,aperch,aperea,apert,apertly,apery,apetaly,apex,apexed,aphagia,aphakia,aphakic,aphasia,aphasic,aphemia,aphemic,aphesis,apheta,aphetic,aphid,aphides,aphidid,aphodal,aphodus,aphonia,aphonic,aphony,aphoria,aphotic,aphrite,aphtha,aphthic,aphylly,aphyric,apian,apiary,apiator,apicad,apical,apices,apicula,apiece,apieces,apii,apiin,apilary,apinch,aping,apinoid,apio,apioid,apiole,apiolin,apionol,apiose,apish,apishly,apism,apitong,apitpat,aplanat,aplasia,aplenty,aplite,aplitic,aplomb,aplome,apnea,apneal,apneic,apocarp,apocha,apocope,apod,apodal,apodan,apodema,apodeme,apodia,apodous,apogamy,apogeal,apogean,apogee,apogeic,apogeny,apohyal,apoise,apojove,apokrea,apolar,apology,aponia,aponic,apoop,apoplex,apopyle,aporia,aporose,aport,aposia,aposoro,apostil,apostle,apothem,apotome,apotype,apout,apozem,apozema,appall,apparel,appay,appeal,appear,appease,append,appet,appete,applaud,apple,applied,applier,applot,apply,appoint,apport,appose,apposer,apprend,apprise,apprize,approof,approve,appulse,apraxia,apraxic,apricot,apriori,apron,apropos,apse,apsidal,apsides,apsis,apt,apteral,apteran,aptly,aptness,aptote,aptotic,apulse,apyonin,apyrene,apyrexy,apyrous,aqua,aquabib,aquage,aquaria,aquatic,aquavit,aqueous,aquifer,aquiver,aquo,aquose,ar,ara,araba,araban,arabana,arabin,arabit,arable,araca,aracari,arachic,arachin,arad,arado,arain,arake,araliad,aralie,aralkyl,aramina,araneid,aranein,aranga,arango,arar,arara,ararao,arariba,araroba,arati,aration,aratory,arba,arbacin,arbalo,arbiter,arbor,arboral,arbored,arboret,arbute,arbutin,arbutus,arc,arca,arcade,arcana,arcanal,arcane,arcanum,arcate,arch,archae,archaic,arche,archeal,arched,archer,archery,arches,archeus,archfoe,archgod,archil,arching,archive,archly,archon,archont,archsee,archsin,archspy,archwag,archway,archy,arcing,arcked,arcking,arctian,arctic,arctiid,arctoid,arcual,arcuale,arcuate,arcula,ardeb,ardella,ardency,ardent,ardish,ardoise,ardor,ardri,ardu,arduous,are,area,areach,aread,areal,arear,areaway,arecain,ared,areek,areel,arefact,areito,arena,arenae,arend,areng,arenoid,arenose,arent,areola,areolar,areole,areolet,arete,argal,argala,argali,argans,argasid,argeers,argel,argenol,argent,arghan,arghel,arghool,argil,argo,argol,argolet,argon,argosy,argot,argotic,argue,arguer,argufy,argute,argyria,argyric,arhar,arhat,aria,aribine,aricine,arid,aridge,aridian,aridity,aridly,ariel,arienzo,arietta,aright,arigue,aril,ariled,arillus,ariose,arioso,ariot,aripple,arisard,arise,arisen,arist,arista,arite,arjun,ark,arkite,arkose,arkosic,arles,arm,armada,armbone,armed,armer,armet,armful,armhole,armhoop,armied,armiger,armil,armilla,arming,armless,armlet,armload,armoire,armor,armored,armorer,armory,armpit,armrack,armrest,arms,armscye,armure,army,arn,arna,arnee,arni,arnica,arnotta,arnotto,arnut,aroar,aroast,arock,aroeira,aroid,aroint,arolium,arolla,aroma,aroon,arose,around,arousal,arouse,arouser,arow,aroxyl,arpen,arpent,arrack,arrah,arraign,arrame,arrange,arrant,arras,arrased,arratel,arrau,array,arrayal,arrayer,arrear,arrect,arrent,arrest,arriage,arriba,arride,arridge,arrie,arriere,arrimby,arris,arrish,arrival,arrive,arriver,arroba,arrope,arrow,arrowed,arrowy,arroyo,arse,arsenal,arsenic,arseno,arsenyl,arses,arsheen,arshin,arshine,arsine,arsinic,arsino,arsis,arsle,arsoite,arson,arsonic,arsono,arsyl,art,artaba,artabe,artal,artar,artel,arterin,artery,artful,artha,arthel,arthral,artiad,article,artisan,artist,artiste,artless,artlet,artlike,artware,arty,aru,arui,aruke,arumin,arupa,arusa,arusha,arustle,arval,arvel,arx,ary,aryl,arylate,arzan,arzun,as,asaddle,asak,asale,asana,asaphia,asaphid,asaprol,asarite,asaron,asarone,asbest,asbolin,ascan,ascare,ascarid,ascaron,ascend,ascent,ascetic,ascham,asci,ascian,ascii,ascites,ascitic,asclent,ascoma,ascon,ascot,ascribe,ascript,ascry,ascula,ascus,asdic,ase,asearch,aseethe,aseity,asem,asemia,asepsis,aseptic,aseptol,asexual,ash,ashake,ashame,ashamed,ashamnu,ashcake,ashen,asherah,ashery,ashes,ashet,ashily,ashine,ashiver,ashkoko,ashlar,ashless,ashling,ashman,ashore,ashpan,ashpit,ashraf,ashrafi,ashur,ashweed,ashwort,ashy,asialia,aside,asideu,asiento,asilid,asimen,asimmer,asinego,asinine,asitia,ask,askable,askance,askant,askar,askari,asker,askew,askip,asklent,askos,aslant,aslaver,asleep,aslop,aslope,asmack,asmalte,asmear,asmile,asmoke,asnort,asoak,asocial,asok,asoka,asonant,asonia,asop,asor,asouth,asp,aspace,aspect,aspen,asper,asperge,asperse,asphalt,asphyxy,aspic,aspire,aspirer,aspirin,aspish,asport,aspout,asprawl,aspread,aspring,asprout,asquare,asquat,asqueal,asquint,asquirm,ass,assacu,assagai,assai,assail,assapan,assart,assary,assate,assault,assaut,assay,assayer,assbaa,asse,assegai,asself,assent,assert,assess,asset,assets,assever,asshead,assi,assify,assign,assilag,assis,assise,assish,assist,assize,assizer,assizes,asslike,assman,assoil,assort,assuade,assuage,assume,assumed,assumer,assure,assured,assurer,assurge,ast,asta,astalk,astare,astart,astasia,astatic,astay,asteam,asteep,asteer,asteism,astelic,astely,aster,asteria,asterin,astern,astheny,asthma,asthore,astilbe,astint,astir,astite,astomia,astony,astoop,astor,astound,astrain,astral,astrand,astray,astream,astrer,astrict,astride,astrier,astrild,astroid,astrut,astute,astylar,asudden,asunder,aswail,aswarm,asway,asweat,aswell,aswim,aswing,aswirl,aswoon,asyla,asylum,at,atabal,atabeg,atabek,atactic,atafter,ataman,atangle,atap,ataraxy,ataunt,atavi,atavic,atavism,atavist,atavus,ataxia,ataxic,ataxite,ataxy,atazir,atbash,ate,atebrin,atechny,ateeter,atef,atelets,atelier,atelo,ates,ateuchi,athanor,athar,atheism,atheist,atheize,athelia,athenee,athenor,atheous,athing,athirst,athlete,athodyd,athort,athrill,athrive,athrob,athrong,athwart,athymia,athymic,athymy,athyria,athyrid,atilt,atimon,atinga,atingle,atinkle,atip,atis,atlas,atlatl,atle,atlee,atloid,atma,atman,atmid,atmo,atmos,atocha,atocia,atokal,atoke,atokous,atoll,atom,atomerg,atomic,atomics,atomism,atomist,atomity,atomize,atomy,atonal,atone,atoner,atonia,atonic,atony,atop,atophan,atopic,atopite,atopy,atour,atoxic,atoxyl,atrail,atrepsy,atresia,atresic,atresy,atretic,atria,atrial,atrip,atrium,atrocha,atropal,atrophy,atropia,atropic,atrous,atry,atta,attacco,attach,attache,attack,attacus,attagen,attain,attaint,attaleh,attar,attask,attempt,attend,attent,atter,attern,attery,attest,attic,attid,attinge,attire,attired,attirer,attorn,attract,attrap,attrist,attrite,attune,atule,atumble,atune,atwain,atweel,atween,atwin,atwirl,atwist,atwitch,atwixt,atwo,atypic,atypy,auantic,aube,aubrite,auburn,auca,auchlet,auction,aucuba,audible,audibly,audient,audile,audio,audion,audit,auditor,auge,augen,augend,auger,augerer,augh,aught,augite,augitic,augment,augur,augural,augury,august,auh,auhuhu,auk,auklet,aula,aulae,auld,auletai,aulete,auletes,auletic,aulic,auloi,aulos,aulu,aum,aumaga,aumail,aumbry,aumery,aumil,aumous,aumrie,auncel,aune,aunt,auntie,auntish,auntly,aupaka,aura,aurae,aural,aurally,aurar,aurate,aurated,aureate,aureity,aurelia,aureola,aureole,aureous,auresca,aureus,auric,auricle,auride,aurific,aurify,aurigal,aurin,aurir,aurist,aurite,aurochs,auronal,aurora,aurorae,auroral,aurore,aurous,aurum,aurure,auryl,auscult,auslaut,auspex,auspice,auspicy,austere,austral,ausu,ausubo,autarch,autarky,aute,autecy,autem,author,autism,autist,auto,autobus,autocab,autocar,autoecy,autoist,automa,automat,autonym,autopsy,autumn,auxesis,auxetic,auxin,auxinic,auxotox,ava,avadana,avahi,avail,aval,avalent,avania,avarice,avast,avaunt,ave,avellan,aveloz,avenage,avener,avenge,avenger,avenin,avenous,avens,avenue,aver,avera,average,averah,averil,averin,averral,averse,avert,averted,averter,avian,aviary,aviate,aviatic,aviator,avichi,avicide,avick,avid,avidity,avidly,avidous,avidya,avigate,avijja,avine,aviso,avital,avitic,avives,avo,avocado,avocate,avocet,avodire,avoid,avoider,avolate,avouch,avow,avowal,avowant,avowed,avower,avowry,avoyer,avulse,aw,awa,awabi,awaft,awag,await,awaiter,awake,awaken,awald,awalim,awalt,awane,awapuhi,award,awarder,aware,awash,awaste,awat,awatch,awater,awave,away,awber,awd,awe,aweary,aweband,awee,aweek,aweel,aweigh,awesome,awest,aweto,awfu,awful,awfully,awheel,awheft,awhet,awhile,awhir,awhirl,awide,awiggle,awin,awing,awink,awiwi,awkward,awl,awless,awlwort,awmous,awn,awned,awner,awning,awnless,awnlike,awny,awoke,awork,awreck,awrist,awrong,awry,ax,axal,axe,axed,axenic,axes,axfetch,axhead,axial,axially,axiate,axiform,axil,axile,axilla,axillae,axillar,axine,axinite,axiom,axion,axis,axised,axite,axle,axled,axmaker,axman,axogamy,axoid,axolotl,axon,axonal,axonost,axseed,axstone,axtree,axunge,axweed,axwise,axwort,ay,ayah,aye,ayelp,ayin,ayless,aylet,ayllu,ayond,ayont,ayous,ayu,azafrin,azalea,azarole,azelaic,azelate,azide,azilut,azimene,azimide,azimine,azimino,azimuth,azine,aziola,azo,azoch,azofier,azofy,azoic,azole,azon,azonal,azonic,azonium,azophen,azorite,azotate,azote,azoted,azoth,azotic,azotine,azotite,azotize,azotous,azox,azoxime,azoxine,azoxy,azteca,azulene,azulite,azulmic,azumbre,azure,azurean,azured,azurine,azurite,azurous,azury,azygos,azygous,azyme,azymite,azymous,b,ba,baa,baal,baar,baba,babai,babasco,babassu,babbitt,babble,babbler,babbly,babby,babe,babelet,babery,babiche,babied,babish,bablah,babloh,baboen,baboo,baboon,baboot,babroot,babu,babudom,babuina,babuism,babul,baby,babydom,babyish,babyism,bac,bacaba,bacach,bacalao,bacao,bacca,baccae,baccara,baccate,bacchar,bacchic,bacchii,bach,bache,bachel,bacilli,back,backage,backcap,backed,backen,backer,backet,backie,backing,backjaw,backlet,backlog,backrun,backsaw,backset,backup,backway,baclin,bacon,baconer,bacony,bacula,bacule,baculi,baculum,baculus,bacury,bad,badan,baddish,baddock,bade,badge,badger,badiaga,badian,badious,badland,badly,badness,bae,baetuli,baetyl,bafaro,baff,baffeta,baffle,baffler,baffy,baft,bafta,bag,baga,bagani,bagasse,bagel,bagful,baggage,baggala,bagged,bagger,baggie,baggily,bagging,baggit,baggy,baglike,bagman,bagnio,bagnut,bago,bagonet,bagpipe,bagre,bagreef,bagroom,bagwig,bagworm,bagwyn,bah,bahan,bahar,bahay,bahera,bahisti,bahnung,baho,bahoe,bahoo,baht,bahur,bahut,baignet,baikie,bail,bailage,bailee,bailer,bailey,bailie,bailiff,bailor,bain,bainie,baioc,baiocco,bairagi,bairn,bairnie,bairnly,baister,bait,baiter,baith,baittle,baize,bajada,bajan,bajra,bajree,bajri,bajury,baka,bakal,bake,baked,baken,bakepan,baker,bakerly,bakery,bakie,baking,bakli,baktun,baku,bakula,bal,balafo,balagan,balai,balance,balanic,balanid,balao,balas,balata,balboa,balcony,bald,balden,balder,baldish,baldly,baldrib,baldric,baldy,bale,baleen,baleful,balei,baleise,baler,balete,bali,baline,balita,balk,balker,balky,ball,ballad,ballade,ballam,ballan,ballant,ballast,ballata,ballate,balldom,balled,baller,ballet,balli,ballist,ballium,balloon,ballot,ballow,ballup,bally,balm,balmily,balmony,balmy,balneal,balonea,baloney,baloo,balow,balsa,balsam,balsamo,balsamy,baltei,balter,balteus,balu,balut,balza,bam,bamban,bambini,bambino,bamboo,bamoth,ban,banaba,banago,banak,banal,banally,banana,banat,banc,banca,bancal,banchi,banco,bancus,band,banda,bandage,bandaka,bandala,bandar,bandbox,bande,bandeau,banded,bander,bandhu,bandi,bandie,banding,bandit,bandle,bandlet,bandman,bando,bandog,bandore,bandrol,bandy,bane,baneful,bang,banga,bange,banger,banghy,banging,bangkok,bangle,bangled,bani,banian,banig,banilad,banish,baniwa,baniya,banjo,banjore,banjuke,bank,banked,banker,bankera,banket,banking,bankman,banky,banner,bannet,banning,bannock,banns,bannut,banquet,banshee,bant,bantam,bantay,banteng,banter,bantery,banty,banuyo,banya,banyan,banzai,baobab,bap,baptism,baptize,bar,bara,barad,barauna,barb,barbal,barbary,barbas,barbate,barbe,barbed,barbel,barber,barbet,barbion,barblet,barbone,barbudo,barbule,bard,bardane,bardash,bardel,bardess,bardic,bardie,bardily,barding,bardish,bardism,bardlet,bardo,bardy,bare,bareca,barefit,barely,barer,baresma,baretta,barff,barfish,barfly,barful,bargain,barge,bargee,bargeer,barger,bargh,bargham,bari,baria,baric,barid,barie,barile,barilla,baring,baris,barish,barit,barite,barium,bark,barken,barker,barkery,barkey,barkhan,barking,barkle,barky,barless,barley,barling,barlock,barlow,barm,barmaid,barman,barmkin,barmote,barmy,barn,barnard,barney,barnful,barnman,barny,baroi,barolo,baron,baronet,barong,baronry,barony,baroque,baroto,barpost,barra,barrack,barrad,barrage,barras,barred,barrel,barren,barrer,barret,barrico,barrier,barring,barrio,barroom,barrow,barruly,barry,barse,barsom,barter,barth,barton,baru,baruria,barvel,barwal,barway,barways,barwise,barwood,barye,baryta,barytes,barytic,baryton,bas,basal,basale,basalia,basally,basalt,basaree,bascule,base,based,basely,baseman,basenji,bases,bash,bashaw,bashful,bashlyk,basial,basiate,basic,basidia,basify,basil,basilar,basilic,basin,basined,basinet,basion,basis,bask,basker,basket,basoid,bason,basos,basote,basque,basqued,bass,bassan,bassara,basset,bassie,bassine,bassist,basso,bassoon,bassus,bast,basta,bastard,baste,basten,baster,bastide,basting,bastion,bastite,basto,baston,bat,bataan,batad,batakan,batara,batata,batch,batcher,bate,batea,bateau,bateaux,bated,batel,bateman,bater,batfish,batfowl,bath,bathe,bather,bathic,bathing,bathman,bathmic,bathos,bathtub,bathyal,batik,batiker,bating,batino,batiste,batlan,batlike,batling,batlon,batman,batoid,baton,batonne,bats,batsman,batster,batt,batta,battel,batten,batter,battery,battik,batting,battish,battle,battled,battler,battue,batty,batule,batwing,batz,batzen,bauble,bauch,bauchle,bauckie,baud,baul,bauleah,baun,bauno,bauson,bausond,bauta,bauxite,bavaroy,bavary,bavian,baviere,bavin,bavoso,baw,bawbee,bawcock,bawd,bawdily,bawdry,bawl,bawler,bawley,bawn,bawtie,baxter,baxtone,bay,baya,bayal,bayamo,bayard,baybolt,baybush,baycuru,bayed,bayeta,baygall,bayhead,bayish,baylet,baylike,bayman,bayness,bayok,bayonet,bayou,baywood,bazaar,baze,bazoo,bazooka,bazzite,bdellid,be,beach,beached,beachy,beacon,bead,beaded,beader,beadily,beading,beadle,beadlet,beadman,beadrow,beady,beagle,beak,beaked,beaker,beakful,beaky,beal,beala,bealing,beam,beamage,beamed,beamer,beamful,beamily,beaming,beamish,beamlet,beamman,beamy,bean,beanbag,beancod,beanery,beanie,beano,beant,beany,bear,beard,bearded,bearder,beardie,beardom,beardy,bearer,bearess,bearing,bearish,bearlet,bearm,beast,beastie,beastly,beat,beata,beatae,beatee,beaten,beater,beath,beatify,beating,beatus,beau,beaufin,beauish,beauism,beauti,beauty,beaux,beaver,beavery,beback,bebait,bebang,bebar,bebaron,bebaste,bebat,bebathe,bebay,bebeast,bebed,bebeeru,bebilya,bebite,beblain,beblear,bebled,bebless,beblood,bebloom,bebog,bebop,beboss,bebotch,bebrave,bebrine,bebrush,bebump,bebusy,becall,becalm,becap,becard,becarve,becater,because,becense,bechalk,becharm,bechase,becheck,becher,bechern,bechirp,becivet,beck,becker,becket,beckon,beclad,beclang,beclart,beclasp,beclaw,becloak,beclog,becloud,beclout,beclown,becolme,becolor,become,becomes,becomma,becoom,becost,becovet,becram,becramp,becrawl,becreep,becrime,becroak,becross,becrowd,becrown,becrush,becrust,becry,becuiba,becuna,becurl,becurry,becurse,becut,bed,bedad,bedamn,bedamp,bedare,bedark,bedash,bedaub,bedawn,beday,bedaze,bedbug,bedcap,bedcase,bedcord,bedded,bedder,bedding,bedead,bedeaf,bedebt,bedeck,bedel,beden,bedene,bedevil,bedew,bedewer,bedfast,bedfoot,bedgery,bedgoer,bedgown,bedight,bedikah,bedim,bedin,bedip,bedirt,bedirty,bedizen,bedkey,bedlam,bedlar,bedless,bedlids,bedman,bedmate,bedog,bedolt,bedot,bedote,bedouse,bedown,bedoyo,bedpan,bedpost,bedrail,bedral,bedrape,bedress,bedrid,bedrift,bedrip,bedrock,bedroll,bedroom,bedrop,bedrown,bedrug,bedsick,bedside,bedsite,bedsock,bedsore,bedtick,bedtime,bedub,beduck,beduke,bedull,bedumb,bedunce,bedunch,bedung,bedur,bedusk,bedust,bedwarf,bedway,bedways,bedwell,bedye,bee,beearn,beech,beechen,beechy,beedged,beedom,beef,beefer,beefily,beefin,beefish,beefy,beehead,beeherd,beehive,beeish,beek,beekite,beelbow,beelike,beeline,beelol,beeman,been,beennut,beer,beerage,beerily,beerish,beery,bees,beest,beeswax,beet,beeth,beetle,beetled,beetler,beety,beeve,beevish,beeware,beeway,beeweed,beewise,beewort,befall,befame,befan,befancy,befavor,befilch,befile,befilth,befire,befist,befit,beflag,beflap,beflea,befleck,beflour,beflout,beflum,befoam,befog,befool,befop,before,befoul,befret,befrill,befriz,befume,beg,begad,begall,begani,begar,begari,begash,begat,begaud,begaudy,begay,begaze,begeck,begem,beget,beggar,beggary,begging,begift,begild,begin,begird,beglad,beglare,beglic,beglide,begloom,begloze,begluc,beglue,begnaw,bego,begob,begobs,begohm,begone,begonia,begorra,begorry,begoud,begowk,begrace,begrain,begrave,begray,begreen,begrett,begrim,begrime,begroan,begrown,beguard,beguess,beguile,beguine,begulf,begum,begun,begunk,begut,behale,behalf,behap,behave,behead,behear,behears,behedge,beheld,behelp,behen,behenic,behest,behind,behint,behn,behold,behoney,behoof,behoot,behoove,behorn,behowl,behung,behymn,beice,beige,being,beinked,beira,beisa,bejade,bejan,bejant,bejazz,bejel,bejewel,bejig,bekah,bekick,beking,bekiss,bekko,beknave,beknit,beknow,beknown,bel,bela,belabor,belaced,beladle,belady,belage,belah,belam,belanda,belar,belard,belash,belate,belated,belaud,belay,belayer,belch,belcher,beld,beldam,beleaf,beleap,beleave,belee,belfry,belga,belibel,belick,belie,belief,belier,believe,belight,beliked,belion,belite,belive,bell,bellboy,belle,belled,bellhop,bellied,belling,bellite,bellman,bellote,bellow,bellows,belly,bellyer,beloam,beloid,belong,belonid,belord,belout,belove,beloved,below,belsire,belt,belted,belter,beltie,beltine,belting,beltman,belton,beluga,belute,belve,bely,belying,bema,bemad,bemadam,bemail,bemaim,beman,bemar,bemask,bemat,bemata,bemaul,bemazed,bemeal,bemean,bemercy,bemire,bemist,bemix,bemoan,bemoat,bemock,bemoil,bemole,bemolt,bemoon,bemotto,bemoult,bemouth,bemuck,bemud,bemuddy,bemuse,bemused,bemusk,ben,bena,benab,bename,benami,benasty,benben,bench,bencher,benchy,bencite,bend,benda,bended,bender,bending,bendlet,bendy,bene,beneath,benefic,benefit,benempt,benet,beng,beni,benight,benign,benison,benj,benjy,benmost,benn,benne,bennel,bennet,benny,beno,benorth,benote,bensel,bensh,benshea,benshee,benshi,bent,bentang,benthal,benthic,benthon,benthos,benting,benty,benumb,benward,benweed,benzal,benzein,benzene,benzil,benzine,benzo,benzoic,benzoid,benzoin,benzol,benzole,benzoxy,benzoyl,benzyl,beode,bepaid,bepale,bepaper,beparch,beparse,bepart,bepaste,bepat,bepaw,bepearl,bepelt,bepen,bepewed,bepiece,bepile,bepill,bepinch,bepity,beprank,bepray,bepress,bepride,beprose,bepuff,bepun,bequalm,bequest,bequote,ber,berain,berakah,berake,berapt,berat,berate,beray,bere,bereave,bereft,berend,beret,berg,berger,berglet,bergut,bergy,bergylt,berhyme,beride,berinse,berith,berley,berlin,berline,berm,berne,berobed,beroll,beround,berret,berri,berried,berrier,berry,berseem,berserk,berth,berthed,berther,bertram,bertrum,berust,bervie,berycid,beryl,bes,besa,besagne,besaiel,besaint,besan,besauce,bescab,bescarf,bescent,bescorn,bescour,bescurf,beseam,besee,beseech,beseem,beseen,beset,beshade,beshag,beshake,beshame,beshear,beshell,beshine,beshlik,beshod,beshout,beshow,beshrew,beside,besides,besiege,besigh,besin,besing,besiren,besit,beslab,beslap,beslash,beslave,beslime,beslow,beslur,besmear,besmell,besmile,besmoke,besmut,besnare,besneer,besnow,besnuff,besogne,besoil,besom,besomer,besoot,besot,besoul,besour,bespate,bespawl,bespeak,besped,bespeed,bespell,bespend,bespete,bespew,bespice,bespill,bespin,bespit,besplit,bespoke,bespot,bespout,bespray,bespy,besquib,besra,best,bestab,bestain,bestamp,bestar,bestare,bestay,bestead,besteer,bester,bestial,bestick,bestill,bestink,bestir,bestock,bestore,bestorm,bestove,bestow,bestraw,bestrew,bestuck,bestud,besugar,besuit,besully,beswarm,beswim,bet,beta,betag,betail,betaine,betalk,betask,betaxed,betear,beteela,beteem,betel,beth,bethel,bethink,bethumb,bethump,betide,betimes,betinge,betire,betis,betitle,betoil,betoken,betone,betony,betoss,betowel,betrace,betrail,betrap,betray,betread,betrend,betrim,betroth,betrunk,betso,betted,better,betters,betting,bettong,bettor,betty,betulin,betutor,between,betwine,betwit,betwixt,beveil,bevel,beveled,beveler,bevenom,bever,beverse,beveto,bevined,bevomit,bevue,bevy,bewail,bewall,beware,bewash,bewaste,bewater,beweary,beweep,bewept,bewest,bewet,bewhig,bewhite,bewidow,bewig,bewired,bewitch,bewith,bework,beworm,beworn,beworry,bewrap,bewray,bewreck,bewrite,bey,beydom,beylic,beyond,beyship,bezant,bezanty,bezel,bezetta,bezique,bezoar,bezzi,bezzle,bezzo,bhabar,bhakta,bhakti,bhalu,bhandar,bhang,bhangi,bhara,bharal,bhat,bhava,bheesty,bhikku,bhikshu,bhoosa,bhoy,bhungi,bhut,biabo,biacid,biacuru,bialate,biallyl,bianco,biarchy,bias,biaxal,biaxial,bib,bibasic,bibb,bibber,bibble,bibbler,bibbons,bibcock,bibi,bibiri,bibless,biblus,bice,biceps,bicetyl,bichir,bichord,bichy,bick,bicker,bickern,bicolor,bicone,biconic,bicorn,bicorne,bicron,bicycle,bicyclo,bid,bidar,bidarka,bidcock,bidder,bidding,biddy,bide,bident,bider,bidet,biding,bidri,biduous,bield,bieldy,bien,bienly,biennia,bier,bietle,bifara,bifer,biff,biffin,bifid,bifidly,bifilar,biflex,bifocal,bifoil,bifold,bifolia,biform,bifront,big,biga,bigamic,bigamy,bigener,bigeye,bigg,biggah,biggen,bigger,biggest,biggin,biggish,bigha,bighead,bighorn,bight,biglot,bigness,bignou,bigot,bigoted,bigotry,bigotty,bigroot,bigwig,bija,bijasal,bijou,bijoux,bike,bikh,bikini,bilabe,bilalo,bilbie,bilbo,bilby,bilch,bilcock,bildar,bilders,bile,bilge,bilgy,biliary,biliate,bilic,bilify,bilimbi,bilio,bilious,bilith,bilk,bilker,bill,billa,billbug,billed,biller,billet,billety,billian,billing,billion,billman,billon,billot,billow,billowy,billy,billyer,bilo,bilobe,bilobed,bilsh,bilsted,biltong,bimalar,bimanal,bimane,bimasty,bimbil,bimeby,bimodal,bin,binal,binary,binate,bind,binder,bindery,binding,bindle,bindlet,bindweb,bine,bing,binge,bingey,binghi,bingle,bingo,bingy,binh,bink,binman,binna,binning,binnite,bino,binocle,binodal,binode,binotic,binous,bint,binukau,biod,biodyne,biogen,biogeny,bioherm,biolith,biology,biome,bion,bionomy,biopsic,biopsy,bioral,biorgan,bios,biose,biosis,biota,biotaxy,biotic,biotics,biotin,biotite,biotome,biotomy,biotope,biotype,bioxide,bipack,biparty,biped,bipedal,biphase,biplane,bipod,bipolar,biprism,biprong,birch,birchen,bird,birddom,birdeen,birder,birdie,birding,birdlet,birdman,birdy,bireme,biretta,biri,biriba,birk,birken,birkie,birl,birle,birler,birlie,birlinn,birma,birn,birny,birr,birse,birsle,birsy,birth,birthy,bis,bisabol,bisalt,biscuit,bisect,bisexed,bisext,bishop,bismar,bismite,bismuth,bisnaga,bison,bispore,bisque,bissext,bisson,bistate,bister,bisti,bistort,bistro,bit,bitable,bitch,bite,biter,biti,biting,bitless,bito,bitolyl,bitt,bitted,bitten,bitter,bittern,bitters,bittie,bittock,bitty,bitume,bitumed,bitumen,bitwise,bityite,bitypic,biune,biunial,biunity,biurate,biurea,biuret,bivalve,bivinyl,bivious,bivocal,bivouac,biwa,bixin,biz,bizarre,bizet,bizonal,bizone,bizz,blab,blabber,black,blacken,blacker,blackey,blackie,blackit,blackly,blacky,blad,bladder,blade,bladed,blader,blading,bladish,blady,blae,blaff,blaflum,blah,blain,blair,blake,blame,blamed,blamer,blaming,blan,blanc,blanca,blanch,blanco,bland,blanda,blandly,blank,blanked,blanket,blankly,blanky,blanque,blare,blarney,blarnid,blarny,blart,blas,blase,blash,blashy,blast,blasted,blaster,blastid,blastie,blasty,blat,blatant,blate,blately,blather,blatta,blatter,blatti,blattid,blaubok,blaver,blaw,blawort,blay,blaze,blazer,blazing,blazon,blazy,bleach,bleak,bleakly,bleaky,blear,bleared,bleary,bleat,bleater,bleaty,bleb,blebby,bleck,blee,bleed,bleeder,bleery,bleeze,bleezy,blellum,blemish,blench,blend,blende,blended,blender,blendor,blenny,blent,bleo,blesbok,bless,blessed,blesser,blest,blet,blewits,blibe,blick,blickey,blight,blighty,blimp,blimy,blind,blinded,blinder,blindly,blink,blinked,blinker,blinks,blinky,blinter,blintze,blip,bliss,blissom,blister,blite,blithe,blithen,blither,blitter,blitz,blizz,blo,bloat,bloated,bloater,blob,blobbed,blobber,blobby,bloc,block,blocked,blocker,blocky,blodite,bloke,blolly,blonde,blood,blooded,bloody,blooey,bloom,bloomer,bloomy,bloop,blooper,blore,blosmy,blossom,blot,blotch,blotchy,blotter,blotto,blotty,blouse,bloused,blout,blow,blowen,blower,blowfly,blowgun,blowing,blown,blowoff,blowout,blowth,blowup,blowy,blowze,blowzed,blowzy,blub,blubber,blucher,blue,bluecap,bluecup,blueing,blueleg,bluely,bluer,blues,bluet,bluetop,bluey,bluff,bluffer,bluffly,bluffy,bluggy,bluing,bluish,bluism,blunder,blunge,blunger,blunk,blunker,blunks,blunnen,blunt,blunter,bluntie,bluntly,blup,blur,blurb,blurred,blurrer,blurry,blurt,blush,blusher,blushy,bluster,blype,bo,boa,boagane,boar,board,boarder,boardly,boardy,boarish,boast,boaster,boat,boatage,boater,boatful,boatie,boating,boatlip,boatly,boatman,bob,boba,bobac,bobbed,bobber,bobbery,bobbin,bobbing,bobbish,bobble,bobby,bobcat,bobcoat,bobeche,bobfly,bobo,bobotie,bobsled,bobstay,bobtail,bobwood,bocal,bocardo,bocca,boccale,boccaro,bocce,boce,bocher,bock,bocking,bocoy,bod,bodach,bode,bodeful,bodega,boden,boder,bodge,bodger,bodgery,bodhi,bodice,bodiced,bodied,bodier,bodikin,bodily,boding,bodkin,bodle,bodock,body,bog,boga,bogan,bogard,bogart,bogey,boggart,boggin,boggish,boggle,boggler,boggy,boghole,bogie,bogier,bogland,bogle,boglet,bogman,bogmire,bogo,bogong,bogtrot,bogue,bogum,bogus,bogway,bogwood,bogwort,bogy,bogydom,bogyism,bohawn,bohea,boho,bohor,bohunk,boid,boil,boiled,boiler,boilery,boiling,boily,boist,bojite,bojo,bokadam,bokard,bokark,boke,bokom,bola,bolar,bold,bolden,boldine,boldly,boldo,bole,boled,boleite,bolero,bolete,bolide,bolimba,bolis,bolivar,bolivia,bolk,boll,bollard,bolled,boller,bolling,bollock,bolly,bolo,boloman,boloney,bolson,bolster,bolt,boltage,boltant,boltel,bolter,bolti,bolting,bolus,bom,boma,bomb,bombard,bombast,bombed,bomber,bombo,bombola,bombous,bon,bonaci,bonagh,bonaght,bonair,bonally,bonang,bonanza,bonasus,bonbon,bonce,bond,bondage,bondar,bonded,bonder,bonding,bondman,bonduc,bone,boned,bonedog,bonelet,boner,boneset,bonfire,bong,bongo,boniata,bonify,bonito,bonk,bonnaz,bonnet,bonnily,bonny,bonsai,bonus,bonxie,bony,bonze,bonzer,bonzery,bonzian,boo,boob,boobery,boobily,boobook,booby,bood,boodie,boodle,boodler,boody,boof,booger,boohoo,boojum,book,bookdom,booked,booker,bookery,bookful,bookie,booking,bookish,bookism,booklet,bookman,booky,bool,booly,boolya,boom,boomage,boomah,boomdas,boomer,booming,boomlet,boomy,boon,boonk,boopis,boor,boorish,boort,boose,boost,booster,boosy,boot,bootboy,booted,bootee,booter,bootery,bootful,booth,boother,bootied,booting,bootleg,boots,booty,booze,boozed,boozer,boozily,boozy,bop,bopeep,boppist,bopyrid,bor,bora,borable,boracic,borage,borak,boral,borasca,borate,borax,bord,bordage,bordar,bordel,border,bordure,bore,boread,boreal,borean,boredom,boree,boreen,boregat,boreism,borele,borer,borg,borgh,borh,boric,boride,borine,boring,borish,borism,bority,borize,borlase,born,borne,borneol,borning,bornite,bornyl,boro,boron,boronic,borough,borrel,borrow,borsch,borscht,borsht,bort,bortsch,borty,bortz,borwort,boryl,borzoi,boscage,bosch,bose,boser,bosh,bosher,bosk,bosker,bosket,bosky,bosn,bosom,bosomed,bosomer,bosomy,boss,bossage,bossdom,bossed,bosser,bosset,bossing,bossism,bosslet,bossy,boston,bostryx,bosun,bot,bota,botanic,botany,botargo,botch,botched,botcher,botchka,botchy,bote,botella,boterol,botfly,both,bother,bothros,bothway,bothy,botonee,botong,bott,bottine,bottle,bottled,bottler,bottom,botulin,bouchal,bouche,boucher,boud,boudoir,bougar,bouge,bouget,bough,boughed,bought,boughy,bougie,bouk,boukit,boulder,boule,boultel,boulter,boun,bounce,bouncer,bound,bounded,bounden,bounder,boundly,bounty,bouquet,bourbon,bourd,bourder,bourdon,bourg,bourn,bourock,bourse,bouse,bouser,bousy,bout,boutade,bouto,bouw,bovate,bovid,bovine,bovoid,bow,bowable,bowback,bowbent,bowboy,bowed,bowel,boweled,bowels,bower,bowery,bowet,bowfin,bowhead,bowie,bowing,bowk,bowkail,bowker,bowknot,bowl,bowla,bowleg,bowler,bowless,bowlful,bowlike,bowline,bowling,bowls,bowly,bowman,bowpin,bowshot,bowwood,bowwort,bowwow,bowyer,boxbush,boxcar,boxen,boxer,boxfish,boxful,boxhaul,boxhead,boxing,boxlike,boxman,boxty,boxwood,boxwork,boxy,boy,boyang,boyar,boyard,boycott,boydom,boyer,boyhood,boyish,boyism,boyla,boylike,boyship,boza,bozal,bozo,bozze,bra,brab,brabant,brabble,braca,braccia,braccio,brace,braced,bracer,bracero,braces,brach,brachet,bracing,brack,bracken,bracker,bracket,bracky,bract,bractea,bracted,brad,bradawl,bradsot,brae,braeman,brag,braggat,bragger,bragget,bragite,braid,braided,braider,brail,brain,brainer,brainge,brains,brainy,braird,brairo,braise,brake,braker,brakie,braky,bramble,brambly,bran,branch,branchi,branchy,brand,branded,brander,brandy,brangle,branial,brank,brankie,branle,branner,branny,bransle,brant,brash,brashy,brasque,brass,brasse,brasser,brasset,brassic,brassie,brassy,brat,brattie,brattle,brauna,bravade,bravado,brave,bravely,braver,bravery,braving,bravish,bravo,bravura,braw,brawl,brawler,brawly,brawlys,brawn,brawned,brawner,brawny,braws,braxy,bray,brayer,brayera,braza,braze,brazen,brazer,brazera,brazier,brazil,breach,breachy,bread,breaden,breadth,breaghe,break,breakax,breaker,breakup,bream,breards,breast,breath,breathe,breathy,breba,breccia,brecham,breck,brecken,bred,brede,bredi,bree,breech,breed,breeder,breedy,breek,breeze,breezy,bregma,brehon,brei,brekkle,brelaw,breme,bremely,brent,brephic,bret,breth,brett,breva,breve,brevet,brevier,brevit,brevity,brew,brewage,brewer,brewery,brewing,brewis,brewst,brey,briar,bribe,bribee,briber,bribery,brichen,brick,brickel,bricken,brickle,brickly,bricky,bricole,bridal,bridale,bride,bridely,bridge,bridged,bridger,bridle,bridled,bridler,bridoon,brief,briefly,briefs,brier,briered,briery,brieve,brig,brigade,brigand,bright,brill,brills,brim,brimful,briming,brimmed,brimmer,brin,brine,briner,bring,bringal,bringer,brinish,brinjal,brink,briny,brioche,brique,brisk,brisken,brisket,briskly,brisque,briss,bristle,bristly,brisure,brit,brith,brither,britska,britten,brittle,brizz,broach,broad,broadax,broaden,broadly,brob,brocade,brocard,broch,brochan,broche,brocho,brock,brocked,brocket,brockle,brod,brodder,brog,brogan,brogger,broggle,brogue,broguer,broider,broigne,broil,broiler,brokage,broke,broken,broker,broking,brolga,broll,brolly,broma,bromal,bromate,brome,bromic,bromide,bromine,bromism,bromite,bromize,bromoil,bromol,bromous,bronc,bronchi,bronco,bronk,bronze,bronzed,bronzen,bronzer,bronzy,broo,brooch,brood,brooder,broody,brook,brooked,brookie,brooky,brool,broom,broomer,broomy,broon,broose,brose,brosot,brosy,brot,brotan,brotany,broth,brothel,brother,brothy,brough,brought,brow,browden,browed,browis,browman,brown,browner,brownie,brownly,browny,browse,browser,browst,bruang,brucia,brucina,brucine,brucite,bruckle,brugh,bruin,bruise,bruiser,bruit,bruiter,bruke,brulee,brulyie,brumal,brumby,brume,brumous,brunch,brunet,brunt,bruscus,brush,brushed,brusher,brushes,brushet,brushy,brusque,brustle,brut,brutage,brutal,brute,brutely,brutify,bruting,brutish,brutism,brutter,bruzz,bryonin,bryony,bu,bual,buaze,bub,buba,bubal,bubalis,bubble,bubbler,bubbly,bubby,bubinga,bubo,buboed,bubonic,bubukle,bucare,bucca,buccal,buccan,buccate,buccina,buccula,buchite,buchu,buck,bucked,buckeen,bucker,bucket,buckety,buckeye,buckie,bucking,buckish,buckle,buckled,buckler,bucklum,bucko,buckpot,buckra,buckram,bucksaw,bucky,bucolic,bucrane,bud,buda,buddage,budder,buddhi,budding,buddle,buddler,buddy,budge,budger,budget,budless,budlet,budlike,budmash,budtime,budwood,budworm,budzat,bufagin,buff,buffalo,buffed,buffer,buffet,buffing,buffle,buffont,buffoon,buffy,bufidin,bufo,bug,bugaboo,bugan,bugbane,bugbear,bugbite,bugdom,bugfish,bugger,buggery,buggy,bughead,bugle,bugled,bugler,buglet,bugloss,bugre,bugseed,bugweed,bugwort,buhl,buhr,build,builder,buildup,built,buirdly,buisson,buist,bukh,bukshi,bulak,bulb,bulbar,bulbed,bulbil,bulblet,bulbose,bulbous,bulbul,bulbule,bulby,bulchin,bulge,bulger,bulgy,bulimia,bulimic,bulimy,bulk,bulked,bulker,bulkily,bulkish,bulky,bull,bulla,bullace,bullan,bullary,bullate,bullbat,bulldog,buller,bullet,bullety,bulling,bullion,bullish,bullism,bullit,bullnut,bullock,bullous,bullule,bully,bulrush,bulse,bult,bulter,bultey,bultong,bultow,bulwand,bulwark,bum,bumbaze,bumbee,bumble,bumbler,bumbo,bumboat,bumicky,bummalo,bummed,bummer,bummie,bumming,bummler,bummock,bump,bumpee,bumper,bumpily,bumping,bumpkin,bumpy,bumtrap,bumwood,bun,buna,buncal,bunce,bunch,buncher,bunchy,bund,bunder,bundle,bundler,bundlet,bundook,bundy,bung,bungee,bungey,bungfu,bungle,bungler,bungo,bungy,bunion,bunk,bunker,bunkery,bunkie,bunko,bunkum,bunnell,bunny,bunt,buntal,bunted,bunter,bunting,bunton,bunty,bunya,bunyah,bunyip,buoy,buoyage,buoyant,bur,buran,burao,burbank,burbark,burble,burbler,burbly,burbot,burbush,burd,burden,burdie,burdock,burdon,bure,bureau,bureaux,burel,burele,buret,burette,burfish,burg,burgage,burgall,burgee,burgeon,burgess,burgh,burghal,burgher,burglar,burgle,burgoo,burgul,burgus,burhead,buri,burial,burian,buried,burier,burin,burion,buriti,burka,burke,burker,burl,burlap,burled,burler,burlet,burlily,burly,burmite,burn,burned,burner,burnet,burnie,burning,burnish,burnous,burnout,burnt,burnut,burny,buro,burp,burr,burrah,burred,burrel,burrer,burring,burrish,burrito,burro,burrow,burry,bursa,bursal,bursar,bursary,bursate,burse,burseed,burst,burster,burt,burton,burucha,burweed,bury,burying,bus,busby,buscarl,bush,bushed,bushel,busher,bushful,bushi,bushily,bushing,bushlet,bushwa,bushy,busied,busily,busine,busk,busked,busker,busket,buskin,buskle,busky,busman,buss,busser,bussock,bussu,bust,bustard,busted,bustee,buster,bustic,bustle,bustled,bustler,busy,busying,busyish,but,butanal,butane,butanol,butch,butcher,butein,butene,butenyl,butic,butine,butler,butlery,butment,butoxy,butoxyl,butt,butte,butter,buttery,butting,buttle,buttock,button,buttons,buttony,butty,butyl,butylic,butyne,butyr,butyral,butyric,butyrin,butyryl,buxerry,buxom,buxomly,buy,buyable,buyer,buzane,buzz,buzzard,buzzer,buzzies,buzzing,buzzle,buzzwig,buzzy,by,bycoket,bye,byee,byeman,byepath,byerite,bygane,bygo,bygoing,bygone,byhand,bylaw,byname,byon,byous,byously,bypass,bypast,bypath,byplay,byre,byreman,byrlaw,byrnie,byroad,byrrus,bysen,byspell,byssal,byssin,byssine,byssoid,byssus,byth,bytime,bywalk,byway,bywoner,byword,bywork,c,ca,caam,caama,caaming,caapeba,cab,caba,cabaan,caback,cabaho,cabal,cabala,cabalic,caban,cabana,cabaret,cabas,cabbage,cabbagy,cabber,cabble,cabbler,cabby,cabda,caber,cabezon,cabin,cabinet,cabio,cable,cabled,cabler,cablet,cabling,cabman,cabob,cabocle,cabook,caboose,cabot,cabree,cabrit,cabuya,cacam,cacao,cachaza,cache,cachet,cachexy,cachou,cachrys,cacique,cack,cackle,cackler,cacodyl,cacoepy,caconym,cacoon,cacti,cactoid,cacur,cad,cadamba,cadaver,cadbait,cadbit,cadbote,caddice,caddie,caddis,caddish,caddle,caddow,caddy,cade,cadelle,cadence,cadency,cadent,cadenza,cader,caderas,cadet,cadetcy,cadette,cadew,cadge,cadger,cadgily,cadgy,cadi,cadism,cadjan,cadlock,cadmia,cadmic,cadmide,cadmium,cados,cadrans,cadre,cadua,caduac,caduca,cadus,cadweed,caeca,caecal,caecum,caeoma,caesura,cafeneh,cafenet,caffa,caffeic,caffeol,caffiso,caffle,caffoy,cafh,cafiz,caftan,cag,cage,caged,cageful,cageman,cager,cagey,caggy,cagily,cagit,cagmag,cahiz,cahoot,cahot,cahow,caickle,caid,caiman,caimito,cain,caique,caird,cairn,cairned,cairny,caisson,caitiff,cajeput,cajole,cajoler,cajuela,cajun,cajuput,cake,cakebox,caker,cakette,cakey,caky,cal,calaba,calaber,calade,calais,calalu,calamus,calash,calcar,calced,calcic,calcify,calcine,calcite,calcium,calculi,calden,caldron,calean,calends,calepin,calf,calfish,caliber,calibre,calices,calicle,calico,calid,caliga,caligo,calinda,calinut,calipee,caliper,caliph,caliver,calix,calk,calkage,calker,calkin,calking,call,callant,callboy,caller,callet,calli,callid,calling,callo,callose,callous,callow,callus,calm,calmant,calmer,calmly,calmy,calomba,calomel,calool,calor,caloric,calorie,caloris,calotte,caloyer,calp,calpac,calpack,caltrap,caltrop,calumba,calumet,calumny,calve,calved,calver,calves,calvish,calvity,calvous,calx,calyces,calycle,calymma,calypso,calyx,cam,camaca,camagon,camail,caman,camansi,camara,camass,camata,camb,cambaye,camber,cambial,cambism,cambist,cambium,cambrel,cambuca,came,cameist,camel,camelry,cameo,camera,cameral,camilla,camion,camise,camisia,camlet,cammed,cammock,camoodi,camp,campana,campane,camper,campho,camphol,camphor,campion,cample,campo,campody,campoo,campus,camus,camused,camwood,can,canaba,canada,canadol,canal,canamo,canape,canard,canari,canarin,canary,canasta,canaut,cancan,cancel,cancer,canch,cancrum,cand,candela,candent,candid,candied,candier,candify,candiru,candle,candler,candock,candor,candroy,candy,candys,cane,canel,canella,canelo,caner,canette,canful,cangan,cangia,cangle,cangler,cangue,canhoop,canid,canille,caninal,canine,caninus,canions,canjac,cank,canker,cankery,canman,canna,cannach,canned,cannel,canner,cannery,cannet,cannily,canning,cannon,cannot,cannula,canny,canoe,canon,canonic,canonry,canopic,canopy,canroy,canso,cant,cantala,cantar,cantara,cantaro,cantata,canted,canteen,canter,canthal,canthus,cantic,cantico,cantily,cantina,canting,cantion,cantish,cantle,cantlet,canto,canton,cantoon,cantor,cantred,cantref,cantrip,cantus,canty,canun,canvas,canvass,cany,canyon,canzon,caoba,cap,capable,capably,capanna,capanne,capax,capcase,cape,caped,capel,capelet,capelin,caper,caperer,capes,capful,caph,caphar,caphite,capias,capicha,capital,capitan,capivi,capkin,capless,caplin,capman,capmint,capomo,capon,caporal,capot,capote,capped,capper,cappie,capping,capple,cappy,caprate,capreol,capric,caprice,caprid,caprin,caprine,caproic,caproin,caprone,caproyl,capryl,capsa,capsid,capsize,capstan,capsula,capsule,captain,caption,captive,captor,capture,capuche,capulet,capulin,car,carabao,carabid,carabin,carabus,caracal,caracol,caract,carafe,caraibe,caraipi,caramba,caramel,caranda,carane,caranna,carapax,carapo,carat,caratch,caravan,caravel,caraway,carbarn,carbeen,carbene,carbide,carbine,carbo,carbon,carbona,carbora,carboxy,carboy,carbro,carbure,carbyl,carcake,carcass,carceag,carcel,carcoon,card,cardecu,carded,cardel,carder,cardia,cardiac,cardial,cardin,carding,cardo,cardol,cardon,cardona,cardoon,care,careen,career,careful,carene,carer,caress,carest,caret,carfare,carfax,carful,carga,cargo,carhop,cariama,caribou,carid,caries,carina,carinal,cariole,carious,cark,carking,carkled,carl,carless,carlet,carlie,carlin,carline,carling,carlish,carload,carlot,carls,carman,carmele,carmine,carmot,carnage,carnal,carnate,carneol,carney,carnic,carnify,carnose,carnous,caroa,carob,caroba,caroche,carol,caroler,caroli,carolin,carolus,carom,carone,caronic,caroome,caroon,carotic,carotid,carotin,carouse,carp,carpal,carpale,carpel,carpent,carper,carpet,carpid,carping,carpium,carport,carpos,carpus,carr,carrack,carrel,carrick,carried,carrier,carrion,carrizo,carroch,carrot,carroty,carrow,carry,carse,carshop,carsick,cart,cartage,carte,cartel,carter,cartful,cartman,carton,cartoon,cartway,carty,carua,carucal,carval,carve,carvel,carven,carvene,carver,carving,carvol,carvone,carvyl,caryl,casaba,casabe,casal,casalty,casate,casaun,casava,casave,casavi,casbah,cascade,cascado,cascara,casco,cascol,case,casease,caseate,casebox,cased,caseful,casefy,caseic,casein,caseose,caseous,caser,casern,caseum,cash,casha,cashaw,cashbox,cashboy,cashel,cashew,cashier,casing,casino,casiri,cask,casket,casking,casque,casqued,casquet,cass,cassady,casse,cassena,cassia,cassie,cassina,cassine,cassino,cassis,cassock,casson,cassoon,cast,caste,caster,castice,casting,castle,castled,castlet,castock,castoff,castor,castory,castra,castral,castrum,castuli,casual,casuary,casuist,casula,cat,catalpa,catan,catapan,cataria,catarrh,catasta,catbird,catboat,catcall,catch,catcher,catchup,catchy,catclaw,catdom,cate,catechu,catella,catena,catenae,cater,cateran,caterer,caterva,cateye,catface,catfall,catfish,catfoot,catgut,cathead,cathect,catheti,cathin,cathine,cathion,cathode,cathole,cathood,cathop,cathro,cation,cativo,catjang,catkin,catlap,catlike,catlin,catling,catmint,catnip,catpipe,catskin,catstep,catsup,cattabu,cattail,cattalo,cattery,cattily,catting,cattish,cattle,catty,catvine,catwalk,catwise,catwood,catwort,caubeen,cauboge,cauch,caucho,caucus,cauda,caudad,caudae,caudal,caudata,caudate,caudex,caudle,caught,cauk,caul,cauld,caules,cauline,caulis,caulome,caulote,caum,cauma,caunch,caup,caupo,caurale,causal,causate,cause,causer,causey,causing,causse,causson,caustic,cautel,cauter,cautery,caution,cautivo,cava,cavae,caval,cavalla,cavalry,cavate,cave,caveat,cavel,cavelet,cavern,cavetto,caviar,cavie,cavil,caviler,caving,cavings,cavish,cavity,caviya,cavort,cavus,cavy,caw,cawk,cawky,cawney,cawquaw,caxiri,caxon,cay,cayenne,cayman,caza,cazimi,ce,cearin,cease,ceasmic,cebell,cebian,cebid,cebil,cebine,ceboid,cebur,cecils,cecity,cedar,cedared,cedarn,cedary,cede,cedent,ceder,cedilla,cedrat,cedrate,cedre,cedrene,cedrin,cedrine,cedrium,cedrol,cedron,cedry,cedula,cee,ceibo,ceil,ceile,ceiler,ceilidh,ceiling,celadon,celemin,celery,celesta,celeste,celiac,celite,cell,cella,cellae,cellar,celled,cellist,cello,celloid,cellose,cellule,celsian,celt,celtium,celtuce,cembalo,cement,cenacle,cendre,cenoby,cense,censer,censive,censor,censual,censure,census,cent,centage,cental,centare,centaur,centavo,centena,center,centiar,centile,centime,centimo,centner,cento,centrad,central,centric,centrum,centry,centum,century,ceorl,cep,cepa,cepe,cephid,ceps,ceptor,cequi,cerago,ceral,ceramal,ceramic,ceras,cerasin,cerata,cerate,cerated,cercal,cerci,cercus,cere,cereal,cerebra,cered,cereous,cerer,ceresin,cerevis,ceria,ceric,ceride,cerillo,ceriman,cerin,cerine,ceriops,cerise,cerite,cerium,cermet,cern,cero,ceroma,cerote,cerotic,cerotin,cerous,cerrero,cerrial,cerris,certain,certie,certify,certis,certy,cerule,cerumen,ceruse,cervid,cervine,cervix,cervoid,ceryl,cesious,cesium,cess,cesser,cession,cessor,cesspit,cest,cestode,cestoid,cestrum,cestus,cetane,cetene,ceti,cetic,cetin,cetyl,cetylic,cevine,cha,chaa,chab,chabot,chabouk,chabuk,chacate,chack,chacker,chackle,chacma,chacona,chacte,chad,chaeta,chafe,chafer,chafery,chaff,chaffer,chaffy,chaft,chafted,chagan,chagrin,chaguar,chagul,chahar,chai,chain,chained,chainer,chainon,chair,chairer,chais,chaise,chaitya,chaja,chaka,chakar,chakari,chakazi,chakdar,chakobu,chakra,chakram,chaksi,chal,chalaco,chalana,chalaza,chalaze,chalcid,chalcon,chalcus,chalder,chalet,chalice,chalk,chalker,chalky,challah,challie,challis,chalmer,chalon,chalone,chalque,chalta,chalutz,cham,chamal,chamar,chamber,chambul,chamfer,chamiso,chamite,chamma,chamois,champ,champac,champer,champy,chance,chancel,chancer,chanche,chanco,chancre,chancy,chandam,chandi,chandoo,chandu,chandul,chang,changa,changar,change,changer,chank,channel,channer,chanson,chanst,chant,chanter,chantey,chantry,chao,chaos,chaotic,chap,chapah,chape,chapeau,chaped,chapel,chapin,chaplet,chapman,chapped,chapper,chappie,chappin,chappow,chappy,chaps,chapt,chapter,char,charac,charade,charas,charbon,chard,chare,charer,charet,charge,chargee,charger,charier,charily,chariot,charism,charity,chark,charka,charkha,charm,charmel,charmer,charnel,charpit,charpoy,charqui,charr,charry,chart,charter,charuk,chary,chase,chaser,chasing,chasm,chasma,chasmal,chasmed,chasmic,chasmy,chasse,chassis,chaste,chasten,chat,chataka,chateau,chati,chatta,chattel,chatter,chatty,chauk,chaus,chaute,chauth,chavish,chaw,chawan,chawer,chawk,chawl,chay,chaya,chayote,chazan,che,cheap,cheapen,cheaply,cheat,cheatee,cheater,chebec,chebel,chebog,chebule,check,checked,checker,checkup,checky,cheder,chee,cheecha,cheek,cheeker,cheeky,cheep,cheeper,cheepy,cheer,cheered,cheerer,cheerio,cheerly,cheery,cheese,cheeser,cheesy,cheet,cheetah,cheeter,cheetie,chef,chegoe,chegre,cheir,chekan,cheke,cheki,chekmak,chela,chelate,chelem,chelide,chello,chelone,chelp,chelys,chemic,chemis,chemise,chemism,chemist,chena,chende,cheng,chenica,cheque,cherem,cherish,cheroot,cherry,chert,cherte,cherty,cherub,chervil,cheson,chess,chessel,chesser,chest,chester,chesty,cheth,chettik,chetty,chevage,cheval,cheve,cheven,chevin,chevise,chevon,chevron,chevy,chew,chewer,chewink,chewy,cheyney,chhatri,chi,chia,chiasm,chiasma,chiaus,chibouk,chibrit,chic,chicane,chichi,chick,chicken,chicker,chicky,chicle,chico,chicory,chicot,chicote,chid,chidden,chide,chider,chiding,chidra,chief,chiefly,chield,chien,chiffer,chiffon,chiggak,chigger,chignon,chigoe,chih,chihfu,chikara,chil,child,childe,childed,childly,chile,chili,chiliad,chill,chilla,chilled,chiller,chillo,chillum,chilly,chiloma,chilver,chimble,chime,chimer,chimera,chimney,chin,china,chinar,chinch,chincha,chinche,chine,chined,ching,chingma,chinik,chinin,chink,chinker,chinkle,chinks,chinky,chinnam,chinned,chinny,chino,chinoa,chinol,chinse,chint,chintz,chip,chiplet,chipped,chipper,chippy,chips,chiral,chirata,chiripa,chirk,chirm,chiro,chirp,chirper,chirpy,chirr,chirrup,chisel,chit,chitak,chital,chitin,chiton,chitose,chitra,chitter,chitty,chive,chivey,chkalik,chlamyd,chlamys,chlor,chloral,chlore,chloric,chloryl,cho,choana,choate,choaty,chob,choca,chocard,chocho,chock,chocker,choel,choenix,choffer,choga,chogak,chogset,choice,choicy,choil,choiler,choir,chokage,choke,choker,choking,chokra,choky,chol,chola,cholane,cholate,chold,choleic,choler,cholera,choli,cholic,choline,cholla,choller,cholum,chomp,chondre,chonta,choop,choose,chooser,choosy,chop,chopa,chopin,chopine,chopped,chopper,choppy,choragy,choral,chord,chorda,chordal,chorded,chore,chorea,choreal,choree,choregy,choreic,choreus,chorial,choric,chorine,chorion,chorism,chorist,chorogi,choroid,chorook,chort,chorten,chortle,chorus,choryos,chose,chosen,chott,chough,chouka,choup,chous,chouse,chouser,chow,chowder,chowk,chowry,choya,chria,chrism,chrisma,chrisom,chroma,chrome,chromic,chromid,chromo,chromy,chromyl,chronal,chronic,chrotta,chrysal,chrysid,chrysin,chub,chubbed,chubby,chuck,chucker,chuckle,chucky,chuddar,chufa,chuff,chuffy,chug,chugger,chuhra,chukar,chukker,chukor,chulan,chullpa,chum,chummer,chummy,chump,chumpy,chun,chunari,chunga,chunk,chunky,chunner,chunnia,chunter,chupak,chupon,church,churchy,churel,churl,churled,churly,churm,churn,churr,churrus,chut,chute,chuter,chutney,chyack,chyak,chyle,chylify,chyloid,chylous,chymase,chyme,chymia,chymic,chymify,chymous,chypre,chytra,chytrid,cibol,cibory,ciboule,cicad,cicada,cicadid,cicala,cicely,cicer,cichlid,cidarid,cidaris,cider,cig,cigala,cigar,cigua,cilia,ciliary,ciliate,cilice,cilium,cimbia,cimelia,cimex,cimicid,cimline,cinch,cincher,cinclis,cinct,cinder,cindery,cine,cinel,cinema,cinene,cineole,cinerea,cingle,cinnyl,cinque,cinter,cinuran,cion,cipher,cipo,cipolin,cippus,circa,circle,circled,circler,circlet,circuit,circus,circusy,cirque,cirrate,cirri,cirrose,cirrous,cirrus,cirsoid,ciruela,cisco,cise,cisele,cissing,cissoid,cist,cista,cistae,cisted,cistern,cistic,cit,citable,citadel,citator,cite,citee,citer,citess,cithara,cither,citied,citify,citizen,citole,citral,citrate,citrean,citrene,citric,citril,citrin,citrine,citron,citrous,citrus,cittern,citua,city,citydom,cityful,cityish,cive,civet,civic,civics,civil,civilly,civism,civvy,cixiid,clabber,clachan,clack,clacker,clacket,clad,cladine,cladode,cladose,cladus,clag,claggum,claggy,claim,claimer,clairce,claith,claiver,clam,clamant,clamb,clamber,clame,clamer,clammed,clammer,clammy,clamor,clamp,clamper,clan,clang,clangor,clank,clanned,clap,clapnet,clapped,clapper,clapt,claque,claquer,clarain,claret,clarify,clarin,clarion,clarity,clark,claro,clart,clarty,clary,clash,clasher,clashy,clasp,clasper,claspt,class,classed,classer,classes,classic,classis,classy,clastic,clat,clatch,clatter,clatty,claught,clausal,clause,claut,clava,claval,clavate,clave,clavel,claver,clavial,clavier,claviol,clavis,clavola,clavus,clavy,claw,clawed,clawer,clawk,clawker,clay,clayen,clayer,clayey,clayish,clayman,claypan,cleach,clead,cleaded,cleam,cleamer,clean,cleaner,cleanly,cleanse,cleanup,clear,clearer,clearly,cleat,cleave,cleaver,cleche,cleck,cled,cledge,cledgy,clee,cleek,cleeked,cleeky,clef,cleft,clefted,cleg,clem,clement,clench,cleoid,clep,clergy,cleric,clerid,clerisy,clerk,clerkly,cleruch,cletch,cleuch,cleve,clever,clevis,clew,cliack,cliche,click,clicker,clicket,clicky,cliency,client,cliff,cliffed,cliffy,clift,clifty,clima,climata,climate,climath,climax,climb,climber,clime,clinal,clinch,cline,cling,clinger,clingy,clinia,clinic,clinium,clink,clinker,clinkum,clinoid,clint,clinty,clip,clipei,clipeus,clipped,clipper,clips,clipse,clipt,clique,cliquy,clisere,clit,clitch,clite,clites,clithe,clitia,clition,clitter,clival,clive,clivers,clivis,clivus,cloaca,cloacal,cloak,cloaked,cloam,cloamen,cloamer,clobber,clochan,cloche,clocher,clock,clocked,clocker,clod,clodder,cloddy,clodlet,cloff,clog,clogger,cloggy,cloghad,clogwyn,cloit,clomb,clomben,clonal,clone,clonic,clonism,clonus,cloof,cloop,cloot,clootie,clop,close,closed,closely,closen,closer,closet,closh,closish,closter,closure,clot,clotbur,clote,cloth,clothe,clothes,clothy,clotter,clotty,cloture,cloud,clouded,cloudy,clough,clour,clout,clouted,clouter,clouty,clove,cloven,clovene,clover,clovery,clow,clown,cloy,cloyer,cloying,club,clubbed,clubber,clubby,clubdom,clubman,cluck,clue,cluff,clump,clumpy,clumse,clumsy,clunch,clung,clunk,clupeid,cluster,clutch,cluther,clutter,cly,clyer,clype,clypeal,clypeus,clysis,clysma,clysmic,clyster,cnemial,cnemis,cnicin,cnida,coabode,coach,coachee,coacher,coachy,coact,coactor,coadapt,coadmit,coadore,coaged,coagent,coagula,coaid,coaita,coak,coakum,coal,coalbag,coalbin,coalbox,coaler,coalify,coalize,coalpit,coaly,coaming,coannex,coapt,coarb,coarse,coarsen,coast,coastal,coaster,coat,coated,coatee,coater,coati,coatie,coating,coax,coaxal,coaxer,coaxial,coaxing,coaxy,cob,cobaea,cobalt,cobang,cobbed,cobber,cobbing,cobble,cobbler,cobbly,cobbra,cobby,cobcab,cobego,cobhead,cobia,cobiron,coble,cobless,cobloaf,cobnut,cobola,cobourg,cobra,coburg,cobweb,cobwork,coca,cocaine,cocash,cocause,coccal,cocci,coccid,cocco,coccoid,coccous,coccule,coccus,coccyx,cochal,cochief,cochlea,cock,cockade,cockal,cocked,cocker,cocket,cockeye,cockily,cocking,cockish,cockle,cockled,cockler,cocklet,cockly,cockney,cockpit,cockshy,cockup,cocky,coco,cocoa,cocoach,coconut,cocoon,cocotte,coctile,coction,cocuisa,cocullo,cocuyo,cod,coda,codbank,codder,codding,coddle,coddler,code,codeine,coder,codex,codfish,codger,codhead,codical,codices,codicil,codify,codilla,codille,codist,codling,codman,codo,codol,codon,codworm,coe,coecal,coecum,coed,coelar,coelder,coelect,coelho,coelia,coeliac,coelian,coelin,coeline,coelom,coeloma,coempt,coenact,coenjoy,coenobe,coequal,coerce,coercer,coetus,coeval,coexert,coexist,coff,coffee,coffer,coffin,coffle,coffret,coft,cog,cogence,cogency,cogener,cogent,cogged,cogger,coggie,cogging,coggle,coggly,coghle,cogman,cognac,cognate,cognize,cogon,cogonal,cograil,cogroad,cogue,cogway,cogwood,cohabit,coheir,cohere,coherer,cohibit,coho,cohoba,cohol,cohort,cohosh,cohune,coif,coifed,coign,coigue,coil,coiled,coiler,coiling,coin,coinage,coiner,coinfer,coining,cointer,coiny,coir,coital,coition,coiture,coitus,cojudge,cojuror,coke,cokeman,coker,cokery,coking,coky,col,cola,colane,colarin,colate,colauxe,colback,cold,colder,coldish,coldly,cole,coletit,coleur,coli,colibri,colic,colical,colicky,colima,colin,coling,colitic,colitis,colk,coll,collage,collar,collard,collare,collate,collaud,collect,colleen,college,collery,collet,colley,collide,collie,collied,collier,collin,colline,colling,collins,collock,colloid,collop,collude,collum,colly,collyba,colmar,colobin,colon,colonel,colonic,colony,color,colored,colorer,colorin,colors,colory,coloss,colossi,colove,colp,colpeo,colport,colpus,colt,colter,coltish,colugo,columbo,column,colunar,colure,coly,colyone,colytic,colyum,colza,coma,comaker,comal,comamie,comanic,comart,comate,comb,combat,combed,comber,combine,combing,comble,comboy,combure,combust,comby,come,comedic,comedo,comedy,comely,comenic,comer,comes,comet,cometic,comfit,comfort,comfrey,comfy,comic,comical,comicry,coming,comino,comism,comital,comitia,comity,comma,command,commend,comment,commie,commit,commix,commixt,commode,common,commons,commot,commove,communa,commune,commute,comoid,comose,comourn,comous,compact,company,compare,compart,compass,compear,compeer,compel,compend,compete,compile,complex,complin,complot,comply,compo,compoer,compole,compone,compony,comport,compos,compose,compost,compote,compreg,compter,compute,comrade,con,conacre,conal,conamed,conatus,concave,conceal,concede,conceit,concent,concept,concern,concert,conch,concha,conchal,conche,conched,concher,conchy,concile,concise,concoct,concord,concupy,concur,concuss,cond,condemn,condign,condite,condole,condone,condor,conduce,conduct,conduit,condyle,cone,coned,coneen,coneine,conelet,coner,cones,confab,confact,confect,confess,confide,confine,confirm,confix,conflow,conflux,conform,confuse,confute,conga,congeal,congee,conger,congest,congius,congou,conic,conical,conicle,conics,conidia,conifer,conima,conin,conine,conject,conjoin,conjure,conjury,conk,conker,conkers,conky,conn,connach,connate,connect,conner,connex,conning,connive,connote,conoid,conopid,conquer,conred,consent,consign,consist,consol,console,consort,conspue,constat,consul,consult,consume,consute,contact,contain,conte,contect,contemn,content,conter,contest,context,contise,conto,contort,contour,contra,control,contund,contuse,conure,conus,conusee,conusor,conuzee,conuzor,convect,convene,convent,convert,conveth,convex,convey,convict,convive,convoke,convoy,cony,coo,cooba,coodle,cooee,cooer,coof,cooing,cooja,cook,cookdom,cookee,cooker,cookery,cooking,cookish,cookout,cooky,cool,coolant,coolen,cooler,coolie,cooling,coolish,coolly,coolth,coolung,cooly,coom,coomb,coomy,coon,cooncan,coonily,coontie,coony,coop,cooper,coopery,cooree,coorie,cooser,coost,coot,cooter,coothay,cootie,cop,copa,copable,copaene,copaiba,copaiye,copal,copalm,copart,coparty,cope,copei,copeman,copen,copepod,coper,coperta,copied,copier,copilot,coping,copious,copis,copist,copita,copolar,copped,copper,coppery,coppet,coppice,coppin,copping,copple,coppled,coppy,copr,copra,coprose,copse,copsing,copsy,copter,copula,copular,copus,copy,copycat,copyism,copyist,copyman,coque,coquet,coquina,coquita,coquito,cor,cora,corach,coracle,corah,coraise,coral,coraled,coram,coranto,corban,corbeau,corbeil,corbel,corbie,corbula,corcass,corcir,cord,cordage,cordant,cordate,cordax,corded,cordel,corder,cordial,cordies,cording,cordite,cordoba,cordon,cordy,cordyl,core,corebel,cored,coreid,coreign,corella,corer,corf,corge,corgi,corial,coriin,coring,corinne,corium,cork,corkage,corke,corked,corker,corking,corkish,corkite,corky,corm,cormel,cormoid,cormous,cormus,corn,cornage,cornbin,corncob,cornea,corneal,cornein,cornel,corner,cornet,corneum,cornic,cornice,cornin,corning,cornu,cornual,cornule,cornute,cornuto,corny,coroa,corody,corol,corolla,corona,coronad,coronae,coronal,coroner,coronet,corozo,corp,corpora,corps,corpse,corpus,corrade,corral,correal,correct,corrie,corrige,corrode,corrupt,corsac,corsage,corsair,corse,corset,corsie,corsite,corta,cortege,cortex,cortez,cortin,cortina,coruco,coruler,corupay,corver,corvina,corvine,corvoid,coryl,corylin,corymb,coryza,cos,cosaque,coscet,coseat,cosec,cosech,coseism,coset,cosh,cosher,coshery,cosily,cosine,cosmic,cosmism,cosmist,cosmos,coss,cossas,cosse,cosset,cossid,cost,costa,costal,costar,costard,costate,costean,coster,costing,costive,costly,costrel,costula,costume,cosy,cot,cotch,cote,coteful,coterie,coth,cothe,cothish,cothon,cothurn,cothy,cotidal,cotise,cotland,cotman,coto,cotoin,cotoro,cotrine,cotset,cotta,cottage,cotte,cotted,cotter,cottid,cottier,cottoid,cotton,cottony,cotty,cotuit,cotula,cotutor,cotwin,cotwist,cotyla,cotylar,cotype,couac,coucal,couch,couched,couchee,coucher,couchy,coude,coudee,coue,cougar,cough,cougher,cougnar,coul,could,coulee,coulomb,coulure,couma,coumara,council,counite,counsel,count,counter,countor,country,county,coup,coupage,coupe,couped,coupee,couper,couple,coupled,coupler,couplet,coupon,coupure,courage,courant,courap,courb,courge,courida,courier,couril,courlan,course,coursed,courser,court,courter,courtin,courtly,cousin,cousiny,coutel,couter,couth,couthie,coutil,couvade,couxia,covado,cove,coved,covent,cover,covered,coverer,covert,covet,coveter,covey,covid,covin,coving,covisit,covite,cow,cowal,coward,cowardy,cowbane,cowbell,cowbind,cowbird,cowboy,cowdie,coween,cower,cowfish,cowgate,cowgram,cowhage,cowheel,cowherb,cowherd,cowhide,cowhorn,cowish,cowitch,cowl,cowle,cowled,cowlick,cowlike,cowling,cowman,cowpath,cowpea,cowpen,cowpock,cowpox,cowrie,cowroid,cowshed,cowskin,cowslip,cowtail,cowweed,cowy,cowyard,cox,coxa,coxal,coxcomb,coxite,coxitis,coxy,coy,coyan,coydog,coyish,coyly,coyness,coynye,coyo,coyol,coyote,coypu,coyure,coz,coze,cozen,cozener,cozier,cozily,cozy,crab,crabbed,crabber,crabby,craber,crablet,crabman,crack,cracked,cracker,crackle,crackly,cracky,craddy,cradge,cradle,cradler,craft,crafty,crag,craggan,cragged,craggy,craichy,crain,craisey,craizey,crajuru,crake,crakow,cram,crambe,crambid,cramble,crambly,crambo,crammer,cramp,cramped,cramper,crampet,crampon,crampy,cran,cranage,crance,crane,craner,craney,crania,craniad,cranial,cranian,cranic,cranium,crank,cranked,cranker,crankle,crankly,crankum,cranky,crannog,cranny,crants,crap,crapaud,crape,crappie,crappin,crapple,crappo,craps,crapy,crare,crash,crasher,crasis,crass,crassly,cratch,crate,crater,craunch,cravat,crave,craven,craver,craving,cravo,craw,crawdad,crawful,crawl,crawler,crawley,crawly,crawm,crawtae,crayer,crayon,craze,crazed,crazily,crazy,crea,creagh,creaght,creak,creaker,creaky,cream,creamer,creamy,creance,creant,crease,creaser,creasy,creat,create,creatic,creator,creche,credent,credit,cree,creed,creedal,creeded,creek,creeker,creeky,creel,creeler,creem,creen,creep,creeper,creepie,creepy,creese,creesh,creeshy,cremate,cremone,cremor,cremule,crena,crenate,crenel,crenele,crenic,crenula,creole,creosol,crepe,crepine,crepon,crept,crepy,cresol,cresoxy,cress,cressed,cresset,cresson,cressy,crest,crested,cresyl,creta,cretic,cretify,cretin,cretion,crevice,crew,crewel,crewer,crewman,crib,cribber,cribble,cribo,cribral,cric,crick,cricket,crickey,crickle,cricoid,cried,crier,criey,crig,crile,crime,crimine,crimp,crimper,crimple,crimpy,crimson,crin,crinal,crine,crined,crinet,cringe,cringer,cringle,crinite,crink,crinkle,crinkly,crinoid,crinose,crinula,cripes,cripple,cripply,crises,crisic,crisis,crisp,crisped,crisper,crisply,crispy,criss,crissal,crissum,crista,critch,crith,critic,crizzle,cro,croak,croaker,croaky,croc,crocard,croceic,crocein,croche,crochet,croci,crocin,crock,crocker,crocket,crocky,crocus,croft,crofter,crome,crone,cronet,cronish,cronk,crony,crood,croodle,crook,crooked,crooken,crookle,crool,croon,crooner,crop,cropman,croppa,cropper,croppie,croppy,croquet,crore,crosa,crosier,crosnes,cross,crosse,crossed,crosser,crossly,crotal,crotalo,crotch,crotchy,crotin,crottle,crotyl,crouch,croup,croupal,croupe,croupy,crouse,crout,croute,crouton,crow,crowbar,crowd,crowded,crowder,crowdy,crower,crowhop,crowing,crowl,crown,crowned,crowner,crowtoe,croy,croyden,croydon,croze,crozer,crozzle,crozzly,crubeen,cruce,cruces,cruche,crucial,crucian,crucify,crucily,cruck,crude,crudely,crudity,cruel,cruelly,cruels,cruelty,cruent,cruet,cruety,cruise,cruiser,cruive,cruller,crum,crumb,crumber,crumble,crumbly,crumby,crumen,crumlet,crummie,crummy,crump,crumper,crumpet,crumple,crumply,crumpy,crunch,crunchy,crunk,crunkle,crunode,crunt,cruor,crupper,crural,crureus,crus,crusade,crusado,cruse,crush,crushed,crusher,crusie,crusily,crust,crusta,crustal,crusted,cruster,crusty,crutch,cruth,crutter,crux,cry,cryable,crybaby,crying,cryogen,cryosel,crypt,crypta,cryptal,crypted,cryptic,crystal,crystic,csardas,ctene,ctenoid,cuadra,cuarta,cub,cubage,cubbing,cubbish,cubby,cubdom,cube,cubeb,cubelet,cuber,cubhood,cubi,cubic,cubica,cubical,cubicle,cubicly,cubism,cubist,cubit,cubital,cubited,cubito,cubitus,cuboid,cuck,cuckold,cuckoo,cuculla,cud,cudava,cudbear,cudden,cuddle,cuddly,cuddy,cudgel,cudweed,cue,cueball,cueca,cueist,cueman,cuerda,cuesta,cuff,cuffer,cuffin,cuffy,cuinage,cuir,cuirass,cuisine,cuisse,cuissen,cuisten,cuke,culbut,culebra,culet,culeus,culgee,culicid,cull,culla,cullage,culler,cullet,culling,cullion,cullis,cully,culm,culmen,culmy,culotte,culpa,culpose,culprit,cult,cultch,cultic,cultish,cultism,cultist,cultual,culture,cultus,culver,culvert,cum,cumal,cumay,cumbent,cumber,cumbha,cumbly,cumbre,cumbu,cumene,cumenyl,cumhal,cumic,cumidin,cumin,cuminal,cuminic,cuminol,cuminyl,cummer,cummin,cumol,cump,cumshaw,cumular,cumuli,cumulus,cumyl,cuneal,cuneate,cunette,cuneus,cunila,cunjah,cunjer,cunner,cunning,cunye,cuorin,cup,cupay,cupcake,cupel,cupeler,cupful,cuphead,cupidon,cupless,cupman,cupmate,cupola,cupolar,cupped,cupper,cupping,cuppy,cuprene,cupric,cupride,cuprite,cuproid,cuprose,cuprous,cuprum,cupseed,cupula,cupule,cur,curable,curably,curacao,curacy,curare,curate,curatel,curatic,curator,curb,curber,curbing,curby,curcas,curch,curd,curdle,curdler,curdly,curdy,cure,curer,curette,curfew,curial,curiate,curie,curin,curine,curing,curio,curiosa,curioso,curious,curite,curium,curl,curled,curler,curlew,curlike,curlily,curling,curly,curn,curney,curnock,curple,curr,currach,currack,curragh,currant,current,curried,currier,currish,curry,cursal,curse,cursed,curser,curship,cursive,cursor,cursory,curst,curstly,cursus,curt,curtail,curtain,curtal,curtate,curtesy,curtly,curtsy,curua,curuba,curule,cururo,curvant,curvate,curve,curved,curver,curvet,curvity,curvous,curvy,cuscus,cusec,cush,cushag,cushat,cushaw,cushion,cushy,cusie,cusk,cusp,cuspal,cuspate,cusped,cuspid,cuspule,cuss,cussed,cusser,cusso,custard,custody,custom,customs,cut,cutaway,cutback,cutch,cutcher,cute,cutely,cutheal,cuticle,cutie,cutin,cutis,cutitis,cutlass,cutler,cutlery,cutlet,cutling,cutlips,cutoff,cutout,cutover,cuttage,cuttail,cutted,cutter,cutting,cuttle,cuttler,cuttoo,cutty,cutup,cutweed,cutwork,cutworm,cuvette,cuvy,cuya,cwierc,cwm,cyan,cyanate,cyanean,cyanic,cyanide,cyanin,cyanine,cyanite,cyanize,cyanol,cyanole,cyanose,cyanus,cyath,cyathos,cyathus,cycad,cyclane,cyclar,cyclas,cycle,cyclene,cycler,cyclian,cyclic,cyclide,cycling,cyclism,cyclist,cyclize,cycloid,cyclone,cyclope,cyclopy,cyclose,cyclus,cyesis,cygnet,cygnine,cyke,cylix,cyma,cymar,cymba,cymbal,cymbalo,cymbate,cyme,cymelet,cymene,cymling,cymoid,cymose,cymous,cymule,cynebot,cynic,cynical,cynipid,cynism,cynoid,cyp,cypre,cypres,cypress,cyprine,cypsela,cyrus,cyst,cystal,cysted,cystic,cystid,cystine,cystis,cystoid,cystoma,cystose,cystous,cytase,cytasic,cytitis,cytode,cytoid,cytoma,cyton,cytost,cytula,czar,czardas,czardom,czarian,czaric,czarina,czarish,czarism,czarist,d,da,daalder,dab,dabb,dabba,dabber,dabble,dabbler,dabby,dablet,daboia,daboya,dabster,dace,dacite,dacitic,dacker,dacoit,dacoity,dacryon,dactyl,dad,dada,dadap,dadder,daddle,daddock,daddy,dade,dado,dae,daedal,daemon,daemony,daer,daff,daffery,daffing,daffish,daffle,daffy,daft,daftly,dag,dagaba,dagame,dagassa,dagesh,dagga,dagger,daggers,daggle,daggly,daggy,daghesh,daglock,dagoba,dags,dah,dahoon,daidle,daidly,daiker,daikon,daily,daimen,daimio,daimon,dain,daincha,dainty,daira,dairi,dairy,dais,daisied,daisy,daitya,daiva,dak,daker,dakir,dal,dalar,dale,daleman,daler,daleth,dali,dalk,dallack,dalle,dalles,dallier,dally,dalt,dalteen,dalton,dam,dama,damage,damager,damages,daman,damask,damasse,dambose,dambrod,dame,damiana,damie,damier,damine,damlike,dammar,damme,dammer,dammish,damn,damned,damner,damnify,damning,damnous,damp,dampang,damped,dampen,damper,damping,dampish,damply,dampy,damsel,damson,dan,danaid,danaide,danaine,danaite,dance,dancer,dancery,dancing,dand,danda,dander,dandify,dandily,dandle,dandler,dandy,dang,danger,dangle,dangler,danglin,danio,dank,dankish,dankly,danli,danner,dannock,dansant,danta,danton,dao,daoine,dap,daphnin,dapicho,dapico,dapifer,dapper,dapple,dappled,dar,darac,daraf,darat,darbha,darby,dardaol,dare,dareall,dareful,darer,daresay,darg,dargah,darger,dargue,dari,daribah,daric,daring,dariole,dark,darken,darkful,darkish,darkle,darkly,darky,darling,darn,darned,darnel,darner,darnex,darning,daroga,daroo,darr,darrein,darst,dart,dartars,darter,darting,dartle,dartman,dartoic,dartoid,dartos,dartre,darts,darzee,das,dash,dashed,dashee,dasheen,dasher,dashing,dashpot,dashy,dasi,dasnt,dassie,dassy,dastard,dastur,dasturi,dasyure,data,datable,datably,dataria,datary,datch,datcha,date,dater,datil,dating,dation,datival,dative,dattock,datum,daturic,daub,daube,dauber,daubery,daubing,dauby,daud,daunch,dauncy,daunt,daunter,daunton,dauphin,daut,dautie,dauw,davach,daven,daver,daverdy,davit,davoch,davy,davyne,daw,dawdle,dawdler,dawdy,dawish,dawkin,dawn,dawning,dawny,dawtet,dawtit,dawut,day,dayal,daybeam,daybook,daydawn,dayfly,dayless,daylit,daylong,dayman,daymare,daymark,dayroom,days,daysman,daystar,daytale,daytide,daytime,dayward,daywork,daywrit,daze,dazed,dazedly,dazy,dazzle,dazzler,de,deacon,dead,deaden,deader,deadeye,deading,deadish,deadly,deadman,deadpan,deadpay,deaf,deafen,deafish,deafly,deair,deal,dealate,dealer,dealing,dealt,dean,deaner,deanery,deaness,dear,dearie,dearly,dearth,deary,deash,deasil,death,deathin,deathly,deathy,deave,deavely,deb,debacle,debadge,debar,debark,debase,debaser,debate,debater,debauch,debby,debeige,deben,debile,debind,debit,debord,debosh,debouch,debride,debrief,debris,debt,debtee,debtful,debtor,debunk,debus,debut,decad,decadal,decade,decadic,decafid,decagon,decal,decamp,decan,decanal,decane,decani,decant,decap,decapod,decarch,decare,decart,decast,decate,decator,decatyl,decay,decayed,decayer,decease,deceit,deceive,decence,decency,decene,decent,decenyl,decern,decess,deciare,decibel,decide,decided,decider,decidua,decil,decile,decima,decimal,deck,decke,decked,deckel,decker,deckie,decking,deckle,declaim,declare,declass,decline,declive,decoat,decoct,decode,decoic,decoke,decolor,decorum,decoy,decoyer,decream,decree,decreer,decreet,decrete,decrew,decrial,decried,decrier,decrown,decry,decuman,decuple,decuria,decurve,decury,decus,decyl,decylic,decyne,dedimus,dedo,deduce,deduct,dee,deed,deedbox,deedeed,deedful,deedily,deedy,deem,deemer,deemie,deep,deepen,deeping,deepish,deeply,deer,deerdog,deerlet,deevey,deface,defacer,defalk,defame,defamed,defamer,defassa,defat,default,defease,defeat,defect,defence,defend,defense,defer,defial,defiant,defiber,deficit,defier,defile,defiled,defiler,define,defined,definer,deflate,deflect,deflesh,deflex,defog,deforce,deform,defoul,defraud,defray,defrock,defrost,deft,deftly,defunct,defuse,defy,deg,degas,degauss,degerm,degged,degger,deglaze,degorge,degrade,degrain,degree,degu,degum,degust,dehair,dehisce,dehorn,dehors,dehort,dehull,dehusk,deice,deicer,deicide,deictic,deific,deifier,deiform,deify,deign,deink,deinos,deiseal,deism,deist,deistic,deity,deject,dejecta,dejeune,dekko,dekle,delaine,delapse,delate,delater,delator,delawn,delay,delayer,dele,delead,delenda,delete,delf,delft,delible,delict,delight,delime,delimit,delint,deliver,dell,deloul,delouse,delta,deltaic,deltal,deltic,deltoid,delude,deluder,deluge,deluxe,delve,delver,demagog,demal,demand,demarch,demark,demast,deme,demean,demency,dement,demerit,demesne,demi,demibob,demidog,demigod,demihag,demiman,demiowl,demiox,demiram,demirep,demise,demiss,demit,demivol,demob,demoded,demoid,demon,demonic,demonry,demos,demote,demotic,demount,demulce,demure,demy,den,denaro,denary,denat,denda,dendral,dendric,dendron,dene,dengue,denial,denier,denim,denizen,dennet,denote,dense,densely,densen,densher,densify,density,dent,dental,dentale,dentary,dentata,dentate,dentel,denter,dentex,dentil,dentile,dentin,dentine,dentist,dentoid,denture,denty,denude,denuder,deny,deodand,deodara,deota,depa,depaint,depark,depart,depas,depass,depend,depeter,dephase,depict,deplane,deplete,deplore,deploy,deplume,deplump,depoh,depone,deport,deposal,depose,deposer,deposit,depot,deprave,depress,deprint,deprive,depside,depth,depthen,depute,deputy,dequeen,derah,deraign,derail,derange,derat,derate,derater,deray,derby,dere,dereism,deric,deride,derider,derival,derive,derived,deriver,derm,derma,dermad,dermal,dermic,dermis,dermoid,dermol,dern,dernier,derout,derrick,derride,derries,derry,dertrum,derust,dervish,desalt,desand,descale,descant,descend,descent,descort,descry,deseed,deseret,desert,deserve,desex,desi,desight,design,desire,desired,desirer,desist,desize,desk,deslime,desma,desman,desmic,desmid,desmine,desmoid,desmoma,desmon,despair,despect,despise,despite,despoil,despond,despot,dess,dessa,dessert,dessil,destain,destine,destiny,destour,destroy,desuete,desugar,desyl,detach,detail,detain,detar,detax,detect,detent,deter,deterge,detest,detin,detinet,detinue,detour,detract,detrain,detrude,detune,detur,deuce,deuced,deul,deuton,dev,deva,devall,devalue,devance,devast,devata,develin,develop,devest,deviant,deviate,device,devil,deviled,deviler,devilet,devilry,devily,devious,devisal,devise,devisee,deviser,devisor,devoice,devoid,devoir,devolve,devote,devoted,devotee,devoter,devour,devout,devow,devvel,dew,dewan,dewanee,dewater,dewax,dewbeam,dewclaw,dewcup,dewdamp,dewdrop,dewer,dewfall,dewily,dewlap,dewless,dewlike,dewool,deworm,dewret,dewtry,dewworm,dewy,dexter,dextrad,dextral,dextran,dextrin,dextro,dey,deyship,dezinc,dha,dhabb,dhai,dhak,dhamnoo,dhan,dhangar,dhanuk,dhanush,dharana,dharani,dharma,dharna,dhaura,dhauri,dhava,dhaw,dheri,dhobi,dhole,dhoni,dhoon,dhoti,dhoul,dhow,dhu,dhunchi,dhurra,dhyal,dhyana,di,diabase,diacid,diacle,diacope,diact,diactin,diadem,diaderm,diaene,diagram,dial,dialect,dialer,dialin,dialing,dialist,dialkyl,diallel,diallyl,dialyze,diamb,diambic,diamide,diamine,diamond,dian,diander,dianite,diapase,diapasm,diaper,diaplex,diapsid,diarch,diarchy,diarial,diarian,diarist,diarize,diary,diastem,diaster,diasyrm,diatom,diaulic,diaulos,diaxial,diaxon,diazide,diazine,diazoic,diazole,diazoma,dib,dibase,dibasic,dibatag,dibber,dibble,dibbler,dibbuk,dibhole,dibrach,dibrom,dibs,dicast,dice,dicebox,dicecup,diceman,dicer,dicetyl,dich,dichas,dichord,dicing,dick,dickens,dicker,dickey,dicky,dicolic,dicolon,dicot,dicotyl,dicta,dictate,dictic,diction,dictum,dicycle,did,didder,diddle,diddler,diddy,didelph,didie,didine,didle,didna,didnt,didromy,didst,didym,didymia,didymus,die,dieb,dieback,diedral,diedric,diehard,dielike,diem,diene,dier,diesel,diesis,diet,dietal,dietary,dieter,diethyl,dietic,dietics,dietine,dietist,diewise,diffame,differ,diffide,difform,diffuse,dig,digamma,digamy,digenic,digeny,digest,digger,digging,dight,dighter,digit,digital,digitus,diglot,diglyph,digmeat,dignify,dignity,digram,digraph,digress,digs,dihalo,diiamb,diiodo,dika,dikage,dike,diker,diketo,dikkop,dilate,dilated,dilater,dilator,dildo,dilemma,dilker,dill,dilli,dillier,dilling,dillue,dilluer,dilly,dilo,dilogy,diluent,dilute,diluted,dilutee,diluter,dilutor,diluvia,dim,dimber,dimble,dime,dimer,dimeran,dimeric,dimeter,dimiss,dimit,dimity,dimly,dimmed,dimmer,dimmest,dimmet,dimmish,dimness,dimoric,dimorph,dimple,dimply,dimps,dimpsy,din,dinar,dinder,dindle,dine,diner,dineric,dinero,dinette,ding,dingar,dingbat,dinge,dingee,dinghee,dinghy,dingily,dingle,dingly,dingo,dingus,dingy,dinic,dinical,dining,dinitro,dink,dinkey,dinkum,dinky,dinmont,dinner,dinnery,dinomic,dinsome,dint,dinus,diobely,diobol,diocese,diode,diodont,dioecy,diol,dionise,dionym,diopter,dioptra,dioptry,diorama,diorite,diose,diosmin,diota,diotic,dioxane,dioxide,dioxime,dioxy,dip,dipetto,diphase,diphead,diplex,diploe,diploic,diploid,diplois,diploma,diplont,diplopy,dipnoan,dipnoid,dipode,dipodic,dipody,dipolar,dipole,diporpa,dipped,dipper,dipping,dipsas,dipsey,dipter,diptote,diptych,dipware,dipygus,dipylon,dipyre,dird,dirdum,dire,direct,direful,direly,dirempt,dirge,dirgler,dirhem,dirk,dirl,dirndl,dirt,dirten,dirtily,dirty,dis,disable,disagio,disally,disarm,disavow,disawa,disazo,disband,disbar,disbark,disbody,disbud,disbury,disc,discage,discal,discard,discase,discept,discern,discerp,discoid,discord,discous,discus,discuss,disdain,disdub,disease,disedge,diseme,disemic,disfame,disfen,disgig,disglut,disgood,disgown,disgulf,disgust,dish,dished,dishelm,disher,dishful,dishome,dishorn,dishpan,dishrag,disject,disjoin,disjune,disk,disleaf,dislike,dislimn,dislink,dislip,disload,dislove,dismain,dismal,disman,dismark,dismask,dismast,dismay,disme,dismiss,disna,disnest,disnew,disobey,disodic,disomic,disomus,disorb,disown,dispark,dispart,dispel,dispend,display,dispone,dispope,disport,dispose,dispost,dispulp,dispute,disrank,disrate,disring,disrobe,disroof,disroot,disrump,disrupt,diss,disseat,dissect,dissent,dissert,dissoul,dissuit,distad,distaff,distain,distal,distale,distant,distend,distent,distich,distill,distome,distort,distune,disturb,disturn,disuse,diswood,disyoke,dit,dita,dital,ditch,ditcher,dite,diter,dither,dithery,dithion,ditolyl,ditone,dittamy,dittany,dittay,dittied,ditto,ditty,diurnal,diurne,div,diva,divan,divata,dive,divel,diver,diverge,divers,diverse,divert,divest,divide,divided,divider,divine,diviner,diving,divinyl,divisor,divorce,divot,divoto,divulge,divulse,divus,divvy,diwata,dixie,dixit,dixy,dizain,dizen,dizoic,dizzard,dizzily,dizzy,djave,djehad,djerib,djersa,do,doab,doable,doarium,doat,doated,doater,doating,doatish,dob,dobbed,dobber,dobbin,dobbing,dobby,dobe,dobla,doblon,dobra,dobrao,dobson,doby,doc,docent,docible,docile,docity,dock,dockage,docken,docker,docket,dockize,dockman,docmac,doctor,doctrix,dod,dodd,doddart,dodded,dodder,doddery,doddie,dodding,doddle,doddy,dodecyl,dodge,dodger,dodgery,dodgily,dodgy,dodkin,dodlet,dodman,dodo,dodoism,dodrans,doe,doebird,doeglic,doer,does,doeskin,doesnt,doest,doff,doffer,dog,dogal,dogate,dogbane,dogbite,dogblow,dogboat,dogbolt,dogbush,dogcart,dogdom,doge,dogedom,dogface,dogfall,dogfish,dogfoot,dogged,dogger,doggery,doggess,doggish,doggo,doggone,doggrel,doggy,doghead,doghole,doghood,dogie,dogless,doglike,dogly,dogma,dogman,dogmata,dogs,dogship,dogskin,dogtail,dogtie,dogtrot,dogvane,dogwood,dogy,doigt,doiled,doily,doina,doing,doings,doit,doited,doitkin,doke,dokhma,dola,dolabra,dolcan,dolcian,dolcino,doldrum,dole,doleful,dolent,doless,doli,dolia,dolina,doline,dolium,doll,dollar,dolldom,dollier,dollish,dollop,dolly,dolman,dolmen,dolor,dolose,dolous,dolphin,dolt,doltish,dom,domain,domal,domba,dome,doment,domer,domett,domic,domical,domine,dominie,domino,dominus,domite,domitic,domn,domnei,domoid,dompt,domy,don,donable,donary,donate,donated,donatee,donator,donax,done,donee,doney,dong,donga,dongon,donjon,donkey,donna,donnert,donnish,donnism,donnot,donor,donship,donsie,dont,donum,doob,doocot,doodab,doodad,doodle,doodler,dooja,dook,dooket,dookit,dool,doolee,dooley,dooli,doolie,dooly,doom,doomage,doomer,doomful,dooms,doon,door,doorba,doorboy,doored,doorman,doorway,dop,dopa,dopatta,dope,doper,dopey,dopper,doppia,dor,dorab,dorad,dorado,doree,dorhawk,doria,dorje,dorlach,dorlot,dorm,dormant,dormer,dormie,dormy,dorn,dorneck,dornic,dornick,dornock,dorp,dorsad,dorsal,dorsale,dorsel,dorser,dorsum,dorter,dorts,dorty,doruck,dory,dos,dosa,dosadh,dosage,dose,doser,dosis,doss,dossal,dossel,dosser,dossier,dossil,dossman,dot,dotage,dotal,dotard,dotardy,dotate,dotchin,dote,doted,doter,doting,dotish,dotkin,dotless,dotlike,dotted,dotter,dottily,dotting,dottle,dottler,dotty,doty,douar,double,doubled,doubler,doublet,doubly,doubt,doubter,douc,douce,doucely,doucet,douche,doucin,doucine,doudle,dough,dought,doughty,doughy,doum,doup,douping,dour,dourine,dourly,douse,douser,dout,douter,doutous,dove,dovecot,dovekey,dovekie,dovelet,dover,dovish,dow,dowable,dowager,dowcet,dowd,dowdily,dowdy,dowed,dowel,dower,doweral,dowery,dowf,dowie,dowily,dowitch,dowl,dowlas,dowless,down,downby,downcry,downcut,downer,downily,downlie,downset,downway,downy,dowp,dowry,dowse,dowser,dowset,doxa,doxy,doze,dozed,dozen,dozener,dozenth,dozer,dozily,dozy,dozzled,drab,drabbet,drabble,drabby,drably,drachm,drachma,dracma,draff,draffy,draft,draftee,drafter,drafty,drag,dragade,dragbar,dragged,dragger,draggle,draggly,draggy,dragman,dragnet,drago,dragon,dragoon,dragsaw,drail,drain,draine,drained,drainer,drake,dram,drama,dramm,dramme,drammed,drammer,drang,drank,drant,drape,draper,drapery,drassid,drastic,drat,drate,dratted,draught,dravya,draw,drawarm,drawbar,drawboy,drawcut,drawee,drawer,drawers,drawing,drawk,drawl,drawler,drawly,drawn,drawnet,drawoff,drawout,drawrod,dray,drayage,drayman,drazel,dread,dreader,dreadly,dream,dreamer,dreamsy,dreamt,dreamy,drear,drearly,dreary,dredge,dredger,dree,dreep,dreepy,dreg,dreggy,dregs,drench,dreng,dress,dressed,dresser,dressy,drest,drew,drewite,drias,drib,dribble,driblet,driddle,dried,drier,driest,drift,drifter,drifty,drill,driller,drillet,dringle,drink,drinker,drinn,drip,dripper,dripple,drippy,drisk,drivage,drive,drivel,driven,driver,driving,drizzle,drizzly,droddum,drogh,drogher,drogue,droit,droll,drolly,drome,dromic,dromond,dromos,drona,dronage,drone,droner,drongo,dronish,drony,drool,droop,drooper,droopt,droopy,drop,droplet,dropman,dropout,dropper,droppy,dropsy,dropt,droshky,drosky,dross,drossel,drosser,drossy,drostdy,droud,drought,drouk,drove,drover,drovy,drow,drown,drowner,drowse,drowsy,drub,drubber,drubbly,drucken,drudge,drudger,druery,drug,drugger,drugget,druggy,drugman,druid,druidic,druidry,druith,drum,drumble,drumlin,drumly,drummer,drummy,drung,drungar,drunk,drunken,drupal,drupe,drupel,druse,drusy,druxy,dry,dryad,dryadic,dryas,drycoal,dryfoot,drying,dryish,dryly,dryness,dryster,dryth,duad,duadic,dual,duali,dualin,dualism,dualist,duality,dualize,dually,duarch,duarchy,dub,dubash,dubb,dubba,dubbah,dubber,dubbing,dubby,dubiety,dubious,dubs,ducal,ducally,ducape,ducat,ducato,ducdame,duces,duchess,duchy,duck,ducker,duckery,duckie,ducking,duckpin,duct,ducted,ductile,duction,ductor,ductule,dud,dudaim,dudder,duddery,duddies,dude,dudeen,dudgeon,dudine,dudish,dudism,dudler,dudley,dudman,due,duel,dueler,dueling,duelist,duello,dueness,duenna,duer,duet,duff,duffel,duffer,duffing,dufoil,dufter,duftery,dug,dugal,dugdug,duggler,dugong,dugout,dugway,duhat,duiker,duim,duit,dujan,duke,dukedom,dukely,dukery,dukhn,dukker,dulbert,dulcet,dulcian,dulcify,dulcose,duledge,duler,dulia,dull,dullard,duller,dullery,dullify,dullish,dullity,dully,dulosis,dulotic,dulse,dult,dultie,duly,dum,duma,dumaist,dumb,dumba,dumbcow,dumbly,dumdum,dummel,dummy,dumose,dump,dumpage,dumper,dumpily,dumping,dumpish,dumple,dumpoke,dumpy,dumsola,dun,dunair,dunal,dunbird,dunce,duncery,dunch,duncify,duncish,dunder,dune,dunfish,dung,dungeon,dunger,dungol,dungon,dungy,dunite,dunk,dunker,dunlin,dunnage,dunne,dunner,dunness,dunnish,dunnite,dunnock,dunny,dunst,dunt,duntle,duny,duo,duodena,duodene,duole,duopod,duopoly,duotone,duotype,dup,dupable,dupe,dupedom,duper,dupery,dupion,dupla,duple,duplet,duplex,duplify,duplone,duppy,dura,durable,durably,durain,dural,duramen,durance,durant,durax,durbar,dure,durene,durenol,duress,durgan,durian,during,durity,durmast,durn,duro,durra,durrie,durrin,durry,durst,durwaun,duryl,dusack,duscle,dush,dusio,dusk,dusken,duskily,duskish,duskly,dusky,dust,dustbin,dustbox,dustee,duster,dustily,dusting,dustman,dustpan,dustuck,dusty,dutch,duteous,dutied,dutiful,dutra,duty,duumvir,duvet,duvetyn,dux,duyker,dvaita,dvandva,dwale,dwalm,dwang,dwarf,dwarfy,dwell,dwelled,dweller,dwelt,dwindle,dwine,dyad,dyadic,dyarchy,dyaster,dyce,dye,dyeable,dyeing,dyer,dyester,dyeware,dyeweed,dyewood,dying,dyingly,dyke,dyker,dynamic,dynamis,dynamo,dynast,dynasty,dyne,dyphone,dyslogy,dysnomy,dyspnea,dystome,dysuria,dysuric,dzeren,e,ea,each,eager,eagerly,eagle,eagless,eaglet,eagre,ean,ear,earache,earbob,earcap,eardrop,eardrum,eared,earful,earhole,earing,earl,earlap,earldom,earless,earlet,earlike,earlish,earlock,early,earmark,earn,earner,earnest,earnful,earning,earpick,earplug,earring,earshot,earsore,eartab,earth,earthed,earthen,earthly,earthy,earwax,earwig,earworm,earwort,ease,easeful,easel,easer,easier,easiest,easily,easing,east,easter,eastern,easting,easy,eat,eatable,eatage,eaten,eater,eatery,eating,eats,eave,eaved,eaver,eaves,ebb,ebbman,eboe,ebon,ebonist,ebonite,ebonize,ebony,ebriate,ebriety,ebrious,ebulus,eburine,ecad,ecanda,ecarte,ecbatic,ecbole,ecbolic,ecdemic,ecderon,ecdysis,ecesic,ecesis,eche,echea,echelon,echidna,echinal,echinid,echinus,echo,echoer,echoic,echoism,echoist,echoize,ecize,ecklein,eclair,eclat,eclegm,eclegma,eclipse,eclogue,ecoid,ecole,ecology,economy,ecotone,ecotype,ecphore,ecru,ecstasy,ectad,ectal,ectally,ectasia,ectasis,ectatic,ectene,ecthyma,ectiris,ectopia,ectopic,ectopy,ectozoa,ectypal,ectype,eczema,edacity,edaphic,edaphon,edder,eddish,eddo,eddy,edea,edeagra,edeitis,edema,edemic,edenite,edental,edestan,edestin,edge,edged,edgeman,edger,edging,edgrew,edgy,edh,edible,edict,edictal,edicule,edifice,edifier,edify,edit,edital,edition,editor,educand,educate,educe,educive,educt,eductor,eegrass,eel,eelboat,eelbob,eelcake,eeler,eelery,eelfare,eelfish,eellike,eelpot,eelpout,eelshop,eelskin,eelware,eelworm,eely,eer,eerie,eerily,effable,efface,effacer,effect,effects,effendi,effete,effigy,efflate,efflux,efform,effort,effulge,effund,effuse,eft,eftest,egad,egality,egence,egeran,egest,egesta,egg,eggcup,egger,eggfish,egghead,egghot,egging,eggler,eggless,egglike,eggnog,eggy,egilops,egipto,egma,ego,egohood,egoism,egoist,egoity,egoize,egoizer,egol,egomism,egotism,egotist,egotize,egress,egret,eh,eheu,ehlite,ehuawa,eident,eider,eidetic,eidolic,eidolon,eight,eighth,eighty,eigne,eimer,einkorn,eisodic,either,eject,ejecta,ejector,ejoo,ekaha,eke,eker,ekerite,eking,ekka,ekphore,ektene,ektenes,el,elaidic,elaidin,elain,elaine,elance,eland,elanet,elapid,elapine,elapoid,elapse,elastic,elastin,elatcha,elate,elated,elater,elation,elative,elator,elb,elbow,elbowed,elbower,elbowy,elcaja,elchee,eld,elder,elderly,eldest,eldin,elding,eldress,elect,electee,electly,elector,electro,elegant,elegiac,elegist,elegit,elegize,elegy,eleidin,element,elemi,elemin,elench,elenchi,elenge,elevate,eleven,elevon,elf,elfhood,elfic,elfin,elfish,elfkin,elfland,elflike,elflock,elfship,elfwife,elfwort,elicit,elide,elision,elisor,elite,elixir,elk,elkhorn,elkslip,elkwood,ell,ellagic,elle,elleck,ellfish,ellipse,ellops,ellwand,elm,elmy,elocute,elod,eloge,elogium,eloign,elope,eloper,elops,els,else,elsehow,elsin,elt,eluate,elude,eluder,elusion,elusive,elusory,elute,elution,elutor,eluvial,eluvium,elvan,elver,elves,elvet,elvish,elysia,elytral,elytrin,elytron,elytrum,em,emanant,emanate,emanium,emarcid,emball,embalm,embank,embar,embargo,embark,embassy,embathe,embay,embed,embelic,ember,embind,embira,emblaze,emblem,emblema,emblic,embody,embog,embole,embolic,embolo,embolum,embolus,emboly,embosom,emboss,embound,embow,embowed,embowel,embower,embox,embrace,embrail,embroil,embrown,embryo,embryon,embuia,embus,embusk,emcee,eme,emeer,emend,emender,emerald,emerge,emerize,emerse,emersed,emery,emesis,emetic,emetine,emgalla,emigree,eminent,emir,emirate,emit,emitter,emma,emmenic,emmer,emmet,emodin,emoloa,emote,emotion,emotive,empall,empanel,empaper,empark,empasm,empathy,emperor,empery,empire,empiric,emplace,emplane,employ,emplume,emporia,empower,empress,emprise,empt,emptier,emptily,emptins,emption,emptor,empty,empyema,emu,emulant,emulate,emulous,emulsin,emulsor,emyd,emydian,en,enable,enabler,enact,enactor,enaena,enage,enalid,enam,enamber,enamdar,enamel,enamor,enapt,enarbor,enarch,enarm,enarme,enate,enatic,enation,enbrave,encage,encake,encamp,encase,encash,encauma,encave,encell,enchain,enchair,enchant,enchase,enchest,encina,encinal,encist,enclasp,enclave,encloak,enclose,encloud,encoach,encode,encoil,encolor,encomia,encomic,encoop,encore,encowl,encraal,encraty,encreel,encrisp,encrown,encrust,encrypt,encup,encurl,encyst,end,endable,endarch,endaze,endear,ended,endemic,ender,endere,enderon,endevil,endew,endgate,ending,endite,endive,endless,endlong,endmost,endogen,endome,endopod,endoral,endore,endorse,endoss,endotys,endow,endower,endozoa,endue,endura,endure,endurer,endways,endwise,endyma,endymal,endysis,enema,enemy,energic,energid,energy,eneuch,eneugh,enface,enfelon,enfeoff,enfever,enfile,enfiled,enflesh,enfoil,enfold,enforce,enfork,enfoul,enframe,enfree,engage,engaged,engager,engaol,engarb,engaud,engaze,engem,engild,engine,engird,engirt,englad,englobe,engloom,englory,englut,englyn,engobe,engold,engore,engorge,engrace,engraff,engraft,engrail,engrain,engram,engrasp,engrave,engreen,engross,enguard,engulf,enhalo,enhance,enhat,enhaunt,enheart,enhedge,enhelm,enherit,enhusk,eniac,enigma,enisle,enjail,enjamb,enjelly,enjewel,enjoin,enjoy,enjoyer,enkraal,enlace,enlard,enlarge,enleaf,enlief,enlife,enlight,enlink,enlist,enliven,enlock,enlodge,enmask,enmass,enmesh,enmist,enmity,enmoss,ennead,ennerve,enniche,ennoble,ennoic,ennomic,ennui,enocyte,enodal,enoil,enol,enolate,enolic,enolize,enomoty,enoplan,enorm,enough,enounce,enow,enplane,enquire,enquiry,enrace,enrage,enraged,enrange,enrank,enrapt,enray,enrib,enrich,enring,enrive,enrobe,enrober,enrol,enroll,enroot,enrough,enruin,enrut,ens,ensaint,ensand,ensate,enscene,ense,enseam,enseat,enseem,enserf,ensete,enshade,enshawl,enshell,ensign,ensile,ensky,enslave,ensmall,ensnare,ensnarl,ensnow,ensoul,enspell,enstamp,enstar,enstate,ensteel,enstool,enstore,ensuant,ensue,ensuer,ensure,ensurer,ensweep,entach,entad,entail,ental,entame,entasia,entasis,entelam,entente,enter,enteral,enterer,enteria,enteric,enteron,entheal,enthral,enthuse,entia,entice,enticer,entify,entire,entiris,entitle,entity,entoil,entomb,entomic,entone,entopic,entotic,entozoa,entrail,entrain,entrant,entrap,entreat,entree,entropy,entrust,entry,entwine,entwist,enure,enurny,envapor,envault,enveil,envelop,envenom,envied,envier,envious,environ,envoy,envy,envying,enwiden,enwind,enwisen,enwoman,enwomb,enwood,enwound,enwrap,enwrite,enzone,enzooty,enzym,enzyme,enzymic,eoan,eolith,eon,eonism,eophyte,eosate,eoside,eosin,eosinic,eozoon,epacme,epacrid,epact,epactal,epagoge,epanody,eparch,eparchy,epaule,epaulet,epaxial,epee,epeeist,epeiric,epeirid,epergne,epha,ephah,ephebe,ephebic,ephebos,ephebus,ephelis,ephetae,ephete,ephetic,ephod,ephor,ephoral,ephoric,ephorus,ephyra,epibole,epiboly,epic,epical,epicarp,epicede,epicele,epicene,epichil,epicism,epicist,epicly,epicure,epicyte,epidemy,epiderm,epidote,epigeal,epigean,epigeic,epigene,epigone,epigram,epigyne,epigyny,epihyal,epikeia,epilate,epilobe,epimer,epimere,epimyth,epinaos,epinine,epiotic,epipial,episode,epistle,epitaph,epitela,epithem,epithet,epitoke,epitome,epiural,epizoa,epizoal,epizoan,epizoic,epizoon,epoch,epocha,epochal,epode,epodic,eponym,eponymy,epopee,epopt,epoptes,epoptic,epos,epsilon,epulary,epulis,epulo,epuloid,epural,epurate,equable,equably,equal,equally,equant,equate,equator,equerry,equid,equine,equinia,equinox,equinus,equip,equiped,equison,equites,equity,equoid,er,era,erade,eral,eranist,erase,erased,eraser,erasion,erasure,erbia,erbium,erd,erdvark,ere,erect,erecter,erectly,erector,erelong,eremic,eremite,erenach,erenow,erepsin,erept,ereptic,erethic,erg,ergal,ergasia,ergates,ergodic,ergoism,ergon,ergot,ergoted,ergotic,ergotin,ergusia,eria,eric,ericad,erical,ericius,ericoid,erika,erikite,erineum,erinite,erinose,eristic,erizo,erlking,ermelin,ermine,ermined,erminee,ermines,erne,erode,eroded,erodent,erogeny,eros,erose,erosely,erosion,erosive,eroteme,erotic,erotica,erotism,err,errable,errancy,errand,errant,errata,erratic,erratum,errhine,erring,errite,error,ers,ersatz,erth,erthen,erthly,eruc,eruca,erucic,erucin,eruct,erudit,erudite,erugate,erupt,eryngo,es,esca,escalan,escalin,escalop,escape,escapee,escaper,escarp,eschar,eschara,escheat,eschew,escoba,escolar,escort,escribe,escrol,escrow,escudo,esculin,esere,eserine,esexual,eshin,esker,esne,esodic,esotery,espadon,esparto,espave,espial,espier,espinal,espino,esplees,espouse,espy,esquire,ess,essang,essay,essayer,essed,essence,essency,essling,essoin,estadal,estadio,estado,estamp,estate,esteem,ester,estevin,estival,estmark,estoc,estoile,estop,estrade,estray,estre,estreat,estrepe,estrin,estriol,estrone,estrous,estrual,estuary,estufa,estuous,estus,eta,etacism,etacist,etalon,etamine,etch,etcher,etching,eternal,etesian,ethal,ethanal,ethane,ethanol,ethel,ethene,ethenic,ethenol,ethenyl,ether,ethered,etheric,etherin,ethic,ethical,ethics,ethid,ethide,ethine,ethiops,ethmoid,ethnal,ethnic,ethnize,ethnos,ethos,ethoxyl,ethrog,ethyl,ethylic,ethylin,ethyne,ethynyl,etiolin,etna,ettle,etua,etude,etui,etym,etymic,etymon,etypic,eu,euaster,eucaine,euchre,euchred,euclase,eucone,euconic,eucrasy,eucrite,euge,eugenic,eugenol,eugeny,eulalia,eulogia,eulogic,eulogy,eumenid,eunicid,eunomy,eunuch,euonym,euonymy,euouae,eupad,eupathy,eupepsy,euphemy,euphon,euphone,euphony,euphory,euphroe,eupione,euploid,eupnea,eureka,euripus,eurite,eurobin,euryon,eusol,eustyle,eutaxic,eutaxy,eutexia,eutony,evacue,evacuee,evade,evader,evalue,evangel,evanish,evase,evasion,evasive,eve,evejar,evelong,even,evener,evening,evenly,evens,event,eveque,ever,evert,evertor,everwho,every,evestar,evetide,eveweed,evict,evictor,evident,evil,evilly,evince,evirate,evisite,evitate,evocate,evoe,evoke,evoker,evolute,evolve,evolver,evovae,evulse,evzone,ewder,ewe,ewer,ewerer,ewery,ewry,ex,exact,exacter,exactly,exactor,exalate,exalt,exalted,exalter,exam,examen,examine,example,exarate,exarch,exarchy,excamb,excave,exceed,excel,except,excerpt,excess,excide,exciple,excise,excisor,excite,excited,exciter,excitor,exclaim,exclave,exclude,excreta,excrete,excurse,excusal,excuse,excuser,excuss,excyst,exdie,exeat,execute,exedent,exedra,exegete,exempt,exequy,exergue,exert,exes,exeunt,exflect,exhale,exhaust,exhibit,exhort,exhume,exhumer,exigent,exile,exiler,exilian,exilic,exility,exist,exister,exit,exite,exition,exitus,exlex,exocarp,exocone,exode,exoderm,exodic,exodist,exodos,exodus,exody,exogamy,exogen,exogeny,exomion,exomis,exon,exoner,exopod,exordia,exormia,exosmic,exostra,exotic,exotism,expand,expanse,expect,expede,expel,expend,expense,expert,expiate,expire,expiree,expirer,expiry,explain,explant,explode,exploit,explore,expone,export,exposal,expose,exposed,exposer,exposit,expound,express,expugn,expulse,expunge,expurge,exradio,exscind,exsect,exsert,exship,exsurge,extant,extend,extense,extent,exter,extern,externe,extima,extinct,extine,extol,extoll,extort,extra,extract,extrait,extreme,extrude,extund,exudate,exude,exult,exultet,exuviae,exuvial,ey,eyah,eyalet,eyas,eye,eyeball,eyebalm,eyebar,eyebeam,eyebolt,eyebree,eyebrow,eyecup,eyed,eyedot,eyedrop,eyeflap,eyeful,eyehole,eyelash,eyeless,eyelet,eyelid,eyelike,eyeline,eyemark,eyen,eyepit,eyer,eyeroot,eyeseed,eyeshot,eyesome,eyesore,eyespot,eyewash,eyewear,eyewink,eyewort,eyey,eying,eyn,eyne,eyot,eyoty,eyra,eyre,eyrie,eyrir,ezba,f,fa,fabella,fabes,fable,fabled,fabler,fabliau,fabling,fabric,fabular,facadal,facade,face,faced,faceman,facer,facet,facete,faceted,facia,facial,faciend,facient,facies,facile,facing,fack,fackins,facks,fact,factful,faction,factish,factive,factor,factory,factrix,factual,factum,facture,facty,facula,facular,faculty,facund,facy,fad,fadable,faddish,faddism,faddist,faddle,faddy,fade,faded,fadedly,faden,fader,fadge,fading,fady,fae,faerie,faery,faff,faffle,faffy,fag,fagald,fage,fager,fagger,faggery,fagging,fagine,fagot,fagoter,fagoty,faham,fahlerz,fahlore,faience,fail,failing,faille,failure,fain,fainly,fains,faint,fainter,faintly,faints,fainty,faipule,fair,fairer,fairily,fairing,fairish,fairly,fairm,fairway,fairy,faith,faitour,fake,faker,fakery,fakir,faky,falbala,falcade,falcate,falcer,falces,falcial,falcon,falcula,faldage,faldfee,fall,fallace,fallacy,fallage,fallen,faller,falling,fallow,fallway,fally,falsary,false,falsely,falsen,falser,falsie,falsify,falsism,faltche,falter,falutin,falx,fam,famble,fame,fameful,familia,family,famine,famish,famous,famulus,fan,fana,fanal,fanam,fanatic,fanback,fancied,fancier,fancify,fancy,fand,fandom,fanega,fanfare,fanfoot,fang,fanged,fangle,fangled,fanglet,fangot,fangy,fanion,fanlike,fanman,fannel,fanner,fannier,fanning,fanon,fant,fantail,fantast,fantasy,fantod,fanweed,fanwise,fanwork,fanwort,faon,far,farad,faraday,faradic,faraway,farce,farcer,farcial,farcied,farcify,farcing,farcist,farcy,farde,fardel,fardh,fardo,fare,farer,farfara,farfel,fargood,farina,faring,farish,farl,farleu,farm,farmage,farmer,farmery,farming,farmost,farmy,farness,faro,farrago,farrand,farrier,farrow,farruca,farse,farseer,farset,farther,fasces,fascet,fascia,fascial,fascine,fascis,fascism,fascist,fash,fasher,fashery,fashion,fass,fast,fasten,faster,fasting,fastish,fastus,fat,fatal,fatally,fatbird,fate,fated,fateful,fathead,father,fathmur,fathom,fatidic,fatigue,fatiha,fatil,fatless,fatling,fatly,fatness,fatsia,fatten,fatter,fattily,fattish,fatty,fatuism,fatuity,fatuoid,fatuous,fatwood,faucal,fauces,faucet,faucial,faucre,faugh,fauld,fault,faulter,faulty,faun,faunal,faunish,faunist,faunule,fause,faust,fautor,fauve,favella,favilla,favism,favissa,favn,favor,favored,favorer,favose,favous,favus,fawn,fawner,fawnery,fawning,fawny,fay,fayles,faze,fazenda,fe,feague,feak,feal,fealty,fear,feared,fearer,fearful,feasor,feast,feasten,feaster,feat,feather,featly,featous,feature,featy,feaze,febrile,fecal,feces,feck,feckful,feckly,fecula,fecund,fed,feddan,federal,fee,feeable,feeble,feebly,feed,feedbin,feedbox,feeder,feeding,feedman,feedway,feedy,feel,feeler,feeless,feeling,feer,feere,feering,feetage,feeze,fegary,fei,feif,feigher,feign,feigned,feigner,feil,feint,feis,feist,feisty,felid,feline,fell,fellage,fellah,fellen,feller,fellic,felling,felloe,fellow,felly,feloid,felon,felonry,felony,fels,felsite,felt,felted,felter,felting,felty,felucca,felwort,female,feme,femic,feminal,feminie,feminin,femora,femoral,femur,fen,fenbank,fence,fencer,fenchyl,fencing,fend,fender,fendy,fenite,fenks,fenland,fenman,fennec,fennel,fennig,fennish,fenny,fensive,fent,fenter,feod,feodal,feodary,feoff,feoffee,feoffor,feower,feral,feralin,ferash,ferdwit,ferfet,feria,ferial,feridgi,ferie,ferine,ferity,ferk,ferling,ferly,fermail,ferme,ferment,fermery,fermila,fern,ferned,fernery,ferny,feroher,ferrado,ferrate,ferrean,ferret,ferrety,ferri,ferric,ferrier,ferrite,ferrous,ferrule,ferrum,ferry,fertile,feru,ferula,ferule,ferulic,fervent,fervid,fervor,fescue,fess,fessely,fest,festal,fester,festine,festive,festoon,festuca,fet,fetal,fetch,fetched,fetcher,fetial,fetid,fetidly,fetish,fetlock,fetlow,fetor,fetter,fettle,fettler,fetus,feu,feuage,feuar,feucht,feud,feudal,feudee,feudist,feued,feuille,fever,feveret,few,fewness,fewsome,fewter,fey,feyness,fez,fezzed,fezzy,fi,fiacre,fiance,fiancee,fiar,fiard,fiasco,fiat,fib,fibber,fibbery,fibdom,fiber,fibered,fibril,fibrin,fibrine,fibroid,fibroin,fibroma,fibrose,fibrous,fibry,fibster,fibula,fibulae,fibular,ficary,fice,ficelle,fiche,fichu,fickle,fickly,fico,ficoid,fictile,fiction,fictive,fid,fidalgo,fidate,fiddle,fiddler,fiddley,fide,fideism,fideist,fidfad,fidge,fidget,fidgety,fiducia,fie,fiefdom,field,fielded,fielder,fieldy,fiend,fiendly,fient,fierce,fiercen,fierily,fiery,fiesta,fife,fifer,fifie,fifish,fifo,fifteen,fifth,fifthly,fifty,fig,figaro,figbird,figent,figged,figgery,figging,figgle,figgy,fight,fighter,figless,figlike,figment,figural,figure,figured,figurer,figury,figworm,figwort,fike,fikie,filace,filacer,filao,filar,filaria,filasse,filate,filator,filbert,filch,filcher,file,filemot,filer,filet,filial,filiate,filibeg,filical,filicic,filicin,filiety,filing,filings,filippo,filite,fill,filled,filler,fillet,filleul,filling,fillip,fillock,filly,film,filmdom,filmet,filmic,filmily,filmish,filmist,filmize,filmy,filo,filose,fils,filter,filth,filthy,fimble,fimbria,fin,finable,finagle,final,finale,finally,finance,finback,finch,finched,find,findal,finder,finding,findjan,fine,fineish,finely,finer,finery,finesse,finetop,finfish,finfoot,fingent,finger,fingery,finial,finical,finick,finific,finify,finikin,fining,finis,finish,finite,finity,finjan,fink,finkel,finland,finless,finlet,finlike,finnac,finned,finner,finnip,finny,fiord,fiorded,fiorin,fiorite,fip,fipenny,fipple,fique,fir,firca,fire,firearm,firebox,fireboy,firebug,fired,firedog,firefly,firelit,fireman,firer,firetop,firing,firk,firker,firkin,firlot,firm,firman,firmer,firmly,firn,firring,firry,first,firstly,firth,fisc,fiscal,fise,fisetin,fish,fishbed,fished,fisher,fishery,fishet,fisheye,fishful,fishgig,fishify,fishily,fishing,fishlet,fishman,fishpot,fishway,fishy,fisnoga,fissate,fissile,fission,fissive,fissure,fissury,fist,fisted,fister,fistful,fistic,fistify,fisting,fistuca,fistula,fistule,fisty,fit,fitch,fitched,fitchee,fitcher,fitchet,fitchew,fitful,fitly,fitment,fitness,fitout,fitroot,fittage,fitted,fitten,fitter,fitters,fittily,fitting,fitty,fitweed,five,fivebar,fiver,fives,fix,fixable,fixage,fixate,fixatif,fixator,fixed,fixedly,fixer,fixing,fixity,fixture,fixure,fizgig,fizz,fizzer,fizzle,fizzy,fjeld,flabby,flabrum,flaccid,flack,flacked,flacker,flacket,flaff,flaffer,flag,flagger,flaggy,flaglet,flagman,flagon,flail,flair,flaith,flak,flakage,flake,flaker,flakily,flaky,flam,flamant,flamb,flame,flamed,flamen,flamer,flamfew,flaming,flamy,flan,flanch,flandan,flane,flange,flanger,flank,flanked,flanker,flanky,flannel,flanque,flap,flapper,flare,flaring,flary,flaser,flash,flasher,flashet,flashly,flashy,flask,flasker,flasket,flasque,flat,flatcap,flatcar,flatdom,flated,flathat,flatlet,flatly,flatman,flatten,flatter,flattie,flattop,flatus,flatway,flaught,flaunt,flaunty,flavedo,flavic,flavid,flavin,flavine,flavo,flavone,flavor,flavory,flavour,flaw,flawed,flawful,flawn,flawy,flax,flaxen,flaxman,flaxy,flay,flayer,flea,fleam,fleay,flebile,fleche,fleck,flecken,flecker,flecky,flector,fled,fledge,fledgy,flee,fleece,fleeced,fleecer,fleech,fleecy,fleer,fleerer,fleet,fleeter,fleetly,flemish,flench,flense,flenser,flerry,flesh,fleshed,fleshen,flesher,fleshly,fleshy,flet,fletch,flether,fleuret,fleury,flew,flewed,flewit,flews,flex,flexed,flexile,flexion,flexor,flexure,fley,flick,flicker,flicky,flidder,flier,fligger,flight,flighty,flimmer,flimp,flimsy,flinch,flinder,fling,flinger,flingy,flint,flinter,flinty,flioma,flip,flipe,flipper,flirt,flirter,flirty,flisk,flisky,flit,flitch,flite,fliting,flitter,flivver,flix,float,floater,floaty,flob,flobby,floc,floccus,flock,flocker,flocky,flocoon,flodge,floe,floey,flog,flogger,flokite,flong,flood,flooded,flooder,floody,floor,floorer,floozy,flop,flopper,floppy,flora,floral,floran,florate,floreal,florent,flores,floret,florid,florin,florist,floroon,florula,flory,flosh,floss,flosser,flossy,flot,flota,flotage,flotant,flotsam,flounce,flour,floury,flouse,flout,flouter,flow,flowage,flower,flowery,flowing,flown,flowoff,flu,fluate,fluavil,flub,flubdub,flucan,flue,flued,flueman,fluency,fluent,fluer,fluey,fluff,fluffer,fluffy,fluible,fluid,fluidal,fluidic,fluidly,fluke,fluked,flukily,fluking,fluky,flume,flummer,flummox,flump,flung,flunk,flunker,flunky,fluor,fluoran,fluoric,fluoryl,flurn,flurr,flurry,flush,flusher,flushy,flusk,flusker,fluster,flute,fluted,fluter,flutina,fluting,flutist,flutter,fluty,fluvial,flux,fluxer,fluxile,fluxion,fly,flyable,flyaway,flyback,flyball,flybane,flybelt,flyblow,flyboat,flyboy,flyer,flyflap,flying,flyleaf,flyless,flyman,flyness,flype,flytail,flytier,flytrap,flyway,flywort,foal,foaly,foam,foambow,foamer,foamily,foaming,foamy,fob,focal,focally,foci,focoids,focsle,focus,focuser,fod,fodda,fodder,foder,fodge,fodgel,fodient,foe,foehn,foeish,foeless,foelike,foeman,foeship,fog,fogbow,fogdog,fogdom,fogey,foggage,fogged,fogger,foggily,foggish,foggy,foghorn,fogle,fogless,fogman,fogo,fogon,fogou,fogram,fogus,fogy,fogydom,fogyish,fogyism,fohat,foible,foil,foiler,foiling,foining,foison,foist,foister,foisty,foiter,fold,foldage,folded,folden,folder,folding,foldure,foldy,fole,folia,foliage,folial,foliar,foliary,foliate,folie,folio,foliole,foliose,foliot,folious,folium,folk,folkmot,folksy,folkway,folky,folles,follis,follow,folly,foment,fomes,fomites,fondak,fondant,fondish,fondle,fondler,fondly,fondu,fondue,fonduk,fonly,fonnish,fono,fons,font,fontal,fonted,fontful,fontlet,foo,food,fooder,foodful,foody,fool,fooldom,foolery,fooless,fooling,foolish,fooner,fooster,foot,footage,footboy,footed,footer,footful,foothot,footing,footle,footler,footman,footpad,foots,footway,footy,foozle,foozler,fop,fopling,foppery,foppish,foppy,fopship,for,fora,forage,forager,foramen,forane,foray,forayer,forb,forbade,forbar,forbear,forbid,forbit,forbled,forblow,forbore,forbow,forby,force,forced,forceps,forcer,forche,forcing,ford,fordays,fording,fordo,fordone,fordy,fore,foreact,forearm,forebay,forecar,foreday,forefin,forefit,forego,foreign,forel,forelay,foreleg,foreman,forepad,forepaw,foreran,forerib,forerun,foresay,foresee,foreset,foresin,forest,foresty,foretop,foreuse,forever,forevow,forfar,forfare,forfars,forfeit,forfend,forge,forged,forger,forgery,forget,forgie,forging,forgive,forgo,forgoer,forgot,forgrow,forhoo,forhooy,forhow,forint,fork,forked,forker,forkful,forkman,forky,forleft,forlet,forlorn,form,formal,formant,format,formate,forme,formed,formee,formel,formene,former,formful,formic,formin,forming,formose,formula,formule,formy,formyl,fornent,fornix,forpet,forpine,forpit,forrad,forrard,forride,forrit,forrue,forsake,forset,forslow,fort,forte,forth,forthgo,forthy,forties,fortify,fortin,fortis,fortlet,fortune,forty,forum,forward,forwean,forwent,fosh,fosie,fossa,fossage,fossane,fosse,fossed,fossick,fossil,fossor,fossula,fossule,fostell,foster,fot,fotch,fother,fotmal,fotui,fou,foud,fouette,fougade,fought,foughty,foujdar,foul,foulage,foulard,fouler,fouling,foulish,foully,foumart,foun,found,founder,foundry,fount,four,fourble,fourche,fourer,fourre,fourth,foussa,foute,fouter,fouth,fovea,foveal,foveate,foveola,foveole,fow,fowk,fowl,fowler,fowlery,fowling,fox,foxbane,foxchop,foxer,foxery,foxfeet,foxfish,foxhole,foxily,foxing,foxish,foxlike,foxship,foxskin,foxtail,foxwood,foxy,foy,foyaite,foyboat,foyer,fozy,fra,frab,frabbit,frabous,fracas,frache,frack,fracted,frae,fraghan,fragile,fraid,fraik,frail,frailly,frailty,fraise,fraiser,frame,framea,framed,framer,framing,frammit,franc,franco,frank,franker,frankly,frantic,franzy,frap,frappe,frasco,frase,frasier,frass,frat,fratch,fratchy,frater,fratery,fratry,fraud,fraught,frawn,fraxin,fray,frayed,fraying,frayn,fraze,frazer,frazil,frazzle,freak,freaky,fream,freath,freck,frecken,frecket,freckle,freckly,free,freed,freedom,freeing,freeish,freely,freeman,freer,freet,freety,freeway,freeze,freezer,freight,freir,freit,freity,fremd,fremdly,frenal,frenate,frenum,frenzy,fresco,fresh,freshen,freshet,freshly,fresnel,fresno,fret,fretful,frett,frette,fretted,fretter,fretty,fretum,friable,friand,friar,friarly,friary,frib,fribble,fribby,fried,friend,frier,frieze,friezer,friezy,frig,frigate,friggle,fright,frighty,frigid,frijol,frike,frill,frilled,friller,frilly,frim,fringe,fringed,fringy,frisca,frisk,frisker,frisket,frisky,frison,frist,frisure,frit,frith,fritt,fritter,frivol,frixion,friz,frize,frizer,frizz,frizzer,frizzle,frizzly,frizzy,fro,frock,froe,frog,frogbit,frogeye,frogged,froggy,frogleg,froglet,frogman,froise,frolic,from,frond,fronded,front,frontad,frontal,fronted,fronter,froom,frore,frory,frosh,frost,frosted,froster,frosty,frot,froth,frother,frothy,frotton,frough,froughy,frounce,frow,froward,frower,frowl,frown,frowner,frowny,frowst,frowsty,frowy,frowze,frowzly,frowzy,froze,frozen,fructed,frugal,fruggan,fruit,fruited,fruiter,fruity,frump,frumple,frumpy,frush,frustum,frutify,fry,fryer,fu,fub,fubby,fubsy,fucate,fuchsin,fuci,fucoid,fucosan,fucose,fucous,fucus,fud,fuddle,fuddler,fuder,fudge,fudger,fudgy,fuel,fueler,fuerte,fuff,fuffy,fugal,fugally,fuggy,fugient,fugle,fugler,fugu,fugue,fuguist,fuidhir,fuji,fulcral,fulcrum,fulfill,fulgent,fulgid,fulgide,fulgor,fulham,fulk,full,fullam,fuller,fullery,fulling,fullish,fullom,fully,fulmar,fulmine,fulsome,fulth,fulvene,fulvid,fulvous,fulwa,fulyie,fulzie,fum,fumado,fumage,fumaric,fumaryl,fumble,fumbler,fume,fumer,fumet,fumette,fumily,fuming,fumose,fumous,fumy,fun,fund,fundal,funded,funder,fundi,fundic,funds,fundus,funeral,funest,fungal,fungate,fungi,fungian,fungic,fungin,fungo,fungoid,fungose,fungous,fungus,fungusy,funicle,funis,funk,funker,funky,funnel,funnily,funny,funori,funt,fur,fural,furan,furazan,furbish,furca,furcal,furcate,furcula,furdel,furfur,furiant,furied,furify,furil,furilic,furiosa,furioso,furious,furison,furl,furler,furless,furlong,furnace,furnage,furner,furnish,furoic,furoid,furoin,furole,furor,furore,furphy,furred,furrier,furrily,furring,furrow,furrowy,furry,further,furtive,fury,furyl,furze,furzed,furzery,furzy,fusain,fusate,fusc,fuscin,fuscous,fuse,fused,fusee,fusht,fusible,fusibly,fusil,fusilly,fusion,fusoid,fuss,fusser,fussify,fussily,fussock,fussy,fust,fustee,fustet,fustian,fustic,fustily,fustin,fustle,fusty,fusuma,fusure,fut,futchel,fute,futhorc,futile,futtock,futural,future,futuric,futwa,fuye,fuze,fuzz,fuzzily,fuzzy,fyke,fylfot,fyrd,g,ga,gab,gabbard,gabber,gabble,gabbler,gabbro,gabby,gabelle,gabgab,gabi,gabion,gable,gablet,gablock,gaby,gad,gadbee,gadbush,gadded,gadder,gaddi,gadding,gaddish,gade,gadfly,gadge,gadger,gadget,gadid,gadling,gadman,gadoid,gadroon,gadsman,gaduin,gadwall,gaen,gaet,gaff,gaffe,gaffer,gaffle,gag,gagate,gage,gagee,gageite,gager,gagger,gaggery,gaggle,gaggler,gagman,gagor,gagroot,gahnite,gaiassa,gaiety,gaily,gain,gainage,gaine,gainer,gainful,gaining,gainly,gains,gainsay,gainset,gainst,gair,gait,gaited,gaiter,gaiting,gaize,gaj,gal,gala,galah,galanas,galanga,galant,galany,galatea,galaxy,galban,gale,galea,galeage,galeate,galee,galeeny,galeid,galena,galenic,galeoid,galera,galerum,galerus,galet,galey,galgal,gali,galilee,galiot,galipot,gall,galla,gallah,gallant,gallate,galled,gallein,galleon,galler,gallery,gallet,galley,gallfly,gallic,galline,galling,gallium,gallnut,gallon,galloon,gallop,gallous,gallows,gally,galoot,galop,galore,galosh,galp,galt,galumph,galuth,galyac,galyak,gam,gamahe,gamasid,gamb,gamba,gambade,gambado,gambang,gambeer,gambet,gambia,gambier,gambist,gambit,gamble,gambler,gamboge,gambol,gambrel,game,gamebag,gameful,gamely,gamene,gametal,gamete,gametic,gamic,gamily,gamin,gaming,gamma,gammer,gammick,gammock,gammon,gammy,gamont,gamori,gamp,gamut,gamy,gan,ganam,ganch,gander,gandul,gandum,gane,ganef,gang,ganga,gangan,gangava,gangdom,gange,ganger,ganging,gangism,ganglia,gangly,gangman,gangrel,gangue,gangway,ganja,ganner,gannet,ganoid,ganoin,ganosis,gansel,gansey,gansy,gant,ganta,gantang,gantlet,ganton,gantry,gantsl,ganza,ganzie,gaol,gaoler,gap,gapa,gape,gaper,gapes,gaping,gapo,gappy,gapy,gar,gara,garad,garage,garance,garava,garawi,garb,garbage,garbel,garbell,garbill,garble,garbler,garboil,garbure,garce,gardant,gardeen,garden,gardeny,gardy,gare,gareh,garetta,garfish,garget,gargety,gargle,gargol,garial,gariba,garish,garland,garle,garlic,garment,garn,garnel,garner,garnet,garnets,garnett,garnetz,garnice,garniec,garnish,garoo,garrafa,garran,garret,garrot,garrote,garrupa,garse,garsil,garston,garten,garter,garth,garum,garvey,garvock,gas,gasbag,gaseity,gaseous,gash,gashes,gashful,gashly,gashy,gasify,gasket,gaskin,gasking,gaskins,gasless,gaslit,gaslock,gasman,gasp,gasper,gasping,gaspy,gasser,gassing,gassy,gast,gaster,gastral,gastric,gastrin,gat,gata,gatch,gate,gateado,gateage,gated,gateman,gater,gateway,gather,gating,gator,gatter,gau,gaub,gauby,gauche,gaud,gaudery,gaudful,gaudily,gaudy,gaufer,gauffer,gauffre,gaufre,gauge,gauger,gauging,gaulin,gault,gaulter,gaum,gaumish,gaumy,gaun,gaunt,gaunted,gauntly,gauntry,gaunty,gaup,gaupus,gaur,gaus,gauss,gauster,gaut,gauze,gauzily,gauzy,gavall,gave,gavel,gaveler,gavial,gavotte,gavyuti,gaw,gawby,gawcie,gawk,gawkily,gawkish,gawky,gawm,gawn,gawney,gawsie,gay,gayal,gayatri,gaybine,gaycat,gayish,gayment,gayness,gaysome,gayyou,gaz,gazabo,gaze,gazebo,gazee,gazel,gazelle,gazer,gazette,gazi,gazing,gazon,gazy,ge,geal,gean,gear,gearbox,geared,gearing,gearman,gearset,gease,geason,geat,gebang,gebanga,gebbie,gebur,geck,gecko,geckoid,ged,gedackt,gedder,gedeckt,gedrite,gee,geebong,geebung,geejee,geek,geelbec,geerah,geest,geet,geezer,gegg,geggee,gegger,geggery,gein,geira,geisha,geison,geitjie,gel,gelable,gelada,gelatin,geld,geldant,gelder,gelding,gelid,gelidly,gelilah,gell,gelly,gelong,gelose,gelosin,gelt,gem,gemauve,gemel,gemeled,gemless,gemlike,gemma,gemmae,gemmate,gemmer,gemmily,gemmoid,gemmula,gemmule,gemmy,gemot,gemsbok,gemul,gemuti,gemwork,gen,gena,genal,genapp,genarch,gender,gene,genear,geneat,geneki,genep,genera,general,generic,genesic,genesis,genet,genetic,geneva,genial,genian,genic,genie,genii,genin,genion,genip,genipa,genipap,genista,genital,genitor,genius,genizah,genoese,genom,genome,genomic,genos,genre,genro,gens,genson,gent,genteel,gentes,gentian,gentile,gentle,gently,gentman,gentry,genty,genu,genua,genual,genuine,genus,genys,geo,geobios,geodal,geode,geodesy,geodete,geodic,geodist,geoduck,geoform,geogeny,geogony,geoid,geoidal,geology,geomaly,geomant,geomyid,geonoma,geopony,georama,georgic,geosid,geoside,geotaxy,geotic,geoty,ger,gerah,geranic,geranyl,gerate,gerated,geratic,geraty,gerb,gerbe,gerbil,gercrow,gerefa,gerenda,gerent,gerenuk,gerim,gerip,germ,germal,german,germane,germen,germin,germina,germing,germon,germule,germy,gernitz,geront,geronto,gers,gersum,gerund,gerusia,gervao,gesith,gesning,gesso,gest,gestant,gestate,geste,gested,gesten,gestic,gestion,gesture,get,geta,getah,getaway,gether,getling,getter,getting,getup,geum,gewgaw,gewgawy,gey,geyan,geyser,gez,ghafir,ghaist,ghalva,gharial,gharnao,gharry,ghastly,ghat,ghatti,ghatwal,ghazi,ghazism,ghebeta,ghee,gheleem,gherkin,ghetti,ghetto,ghizite,ghoom,ghost,ghoster,ghostly,ghosty,ghoul,ghrush,ghurry,giant,giantly,giantry,giardia,giarra,giarre,gib,gibaro,gibbals,gibbed,gibber,gibbet,gibbles,gibbon,gibbose,gibbous,gibbus,gibby,gibe,gibel,giber,gibing,gibleh,giblet,giblets,gibus,gid,giddap,giddea,giddify,giddily,giddy,gidgee,gie,gied,gien,gif,gift,gifted,giftie,gig,gigback,gigeria,gigful,gigger,giggish,giggit,giggle,giggler,giggly,giglet,giglot,gigman,gignate,gigolo,gigot,gigsman,gigster,gigtree,gigunu,gilbert,gild,gilded,gilden,gilder,gilding,gilguy,gilia,gilim,gill,gilled,giller,gillie,gilling,gilly,gilo,gilpy,gilse,gilt,giltcup,gim,gimbal,gimble,gimel,gimlet,gimlety,gimmal,gimmer,gimmick,gimp,gimped,gimper,gimping,gin,ging,ginger,gingery,gingham,gingili,gingiva,gink,ginkgo,ginned,ginner,ginners,ginnery,ginney,ginning,ginnle,ginny,ginseng,ginward,gio,gip,gipon,gipper,gipser,gipsire,giraffe,girasol,girba,gird,girder,girding,girdle,girdler,girl,girleen,girlery,girlie,girling,girlish,girlism,girly,girn,girny,giro,girr,girse,girsh,girsle,girt,girth,gisarme,gish,gisla,gisler,gist,git,gitalin,gith,gitonin,gitoxin,gittern,gittith,give,given,giver,givey,giving,gizz,gizzard,gizzen,gizzern,glace,glaceed,glacial,glacier,glacis,glack,glad,gladden,gladdon,gladdy,glade,gladeye,gladful,gladify,gladii,gladius,gladly,glady,glaga,glaieul,glaik,glaiket,glair,glairy,glaive,glaived,glaked,glaky,glam,glamour,glance,glancer,gland,glandes,glans,glar,glare,glarily,glaring,glarry,glary,glashan,glass,glassen,glasser,glasses,glassie,glassy,glaucin,glaum,glaur,glaury,glaver,glaze,glazed,glazen,glazer,glazier,glazily,glazing,glazy,gleam,gleamy,glean,gleaner,gleary,gleba,glebal,glebe,glebous,glede,gledy,glee,gleed,gleeful,gleek,gleeman,gleet,gleety,gleg,glegly,glen,glenoid,glent,gleyde,glia,gliadin,glial,glib,glibly,glidder,glide,glider,gliding,gliff,glime,glimmer,glimpse,glink,glint,glioma,gliosa,gliosis,glirine,glisk,glisky,glisten,glister,glitter,gloam,gloat,gloater,global,globate,globe,globed,globin,globoid,globose,globous,globule,globy,glochid,glochis,gloea,gloeal,glom,glome,glommox,glomus,glonoin,gloom,gloomth,gloomy,glop,gloppen,glor,glore,glorify,glory,gloss,glossa,glossal,glossed,glosser,glossic,glossy,glost,glottal,glottic,glottid,glottis,glout,glove,glover,glovey,gloving,glow,glower,glowfly,glowing,gloy,gloze,glozing,glub,glucase,glucid,glucide,glucina,glucine,gluck,glucose,glue,glued,gluepot,gluer,gluey,glug,gluish,glum,gluma,glumal,glume,glumly,glummy,glumose,glump,glumpy,glunch,glusid,gluside,glut,glutch,gluteal,gluten,gluteus,glutin,glutoid,glutose,glutter,glutton,glycid,glycide,glycine,glycol,glycose,glycyl,glyoxal,glyoxim,glyoxyl,glyph,glyphic,glyptic,glyster,gnabble,gnar,gnarl,gnarled,gnarly,gnash,gnat,gnathal,gnathic,gnatter,gnatty,gnaw,gnawer,gnawing,gnawn,gneiss,gneissy,gnome,gnomed,gnomic,gnomide,gnomish,gnomist,gnomon,gnosis,gnostic,gnu,go,goa,goad,goaf,goal,goalage,goalee,goalie,goanna,goat,goatee,goateed,goatish,goatly,goaty,goave,gob,goback,goban,gobang,gobbe,gobber,gobbet,gobbin,gobbing,gobble,gobbler,gobby,gobelin,gobi,gobiid,gobioid,goblet,goblin,gobline,gobo,gobony,goburra,goby,gocart,god,goddard,godded,goddess,goddize,gode,godet,godhead,godhood,godkin,godless,godlet,godlike,godlily,godling,godly,godown,godpapa,godsend,godship,godson,godwit,goeduck,goel,goelism,goer,goes,goetia,goetic,goety,goff,goffer,goffle,gog,gogga,goggan,goggle,goggled,goggler,goggly,goglet,gogo,goi,going,goitcho,goiter,goitral,gol,gola,golach,goladar,gold,goldbug,goldcup,golden,golder,goldie,goldin,goldish,goldtit,goldy,golee,golem,golf,golfdom,golfer,goli,goliard,goliath,golland,gollar,golly,goloe,golpe,gomari,gomart,gomavel,gombay,gombeen,gomer,gomeral,gomlah,gomuti,gon,gonad,gonadal,gonadic,gonagra,gonakie,gonal,gonapod,gondang,gondite,gondola,gone,goner,gong,gongman,gonia,goniac,gonial,goniale,gonid,gonidia,gonidic,gonimic,gonion,gonitis,gonium,gonne,gony,gonys,goo,goober,good,gooding,goodish,goodly,goodman,goods,goody,goof,goofer,goofily,goofy,googly,googol,googul,gook,gool,goolah,gools,gooma,goon,goondie,goonie,goose,goosery,goosish,goosy,gopher,gopura,gor,gora,goracco,goral,goran,gorb,gorbal,gorbet,gorble,gorce,gorcock,gorcrow,gore,gorer,gorevan,gorfly,gorge,gorged,gorger,gorget,gorglin,gorhen,goric,gorilla,gorily,goring,gorlin,gorlois,gormaw,gormed,gorra,gorraf,gorry,gorse,gorsedd,gorsy,gory,gos,gosain,goschen,gosh,goshawk,goslet,gosling,gosmore,gospel,gosport,gossan,gossard,gossip,gossipy,gossoon,gossy,got,gotch,gote,gothite,gotra,gotraja,gotten,gouaree,gouge,gouger,goujon,goulash,goumi,goup,gourami,gourd,gourde,gourdy,gourmet,gousty,gout,goutify,goutily,goutish,goutte,gouty,gove,govern,gowan,gowdnie,gowf,gowfer,gowk,gowked,gowkit,gowl,gown,gownlet,gowpen,goy,goyim,goyin,goyle,gozell,gozzard,gra,grab,grabber,grabble,graben,grace,gracer,gracile,grackle,grad,gradal,gradate,graddan,grade,graded,gradely,grader,gradin,gradine,grading,gradual,gradus,graff,graffer,graft,grafted,grafter,graham,grail,grailer,grain,grained,grainer,grainy,graip,graisse,graith,grallic,gram,grama,grame,grammar,gramme,gramp,grampa,grampus,granada,granage,granary,granate,granch,grand,grandam,grandee,grandly,grandma,grandpa,grane,grange,granger,granite,grank,grannom,granny,grano,granose,grant,grantee,granter,grantor,granula,granule,granza,grape,graped,grapery,graph,graphic,graphy,graping,grapnel,grappa,grapple,grapy,grasp,grasper,grass,grassed,grasser,grasset,grassy,grat,grate,grater,grather,gratify,grating,gratis,gratten,graupel,grave,graved,gravel,gravely,graven,graver,gravic,gravid,graving,gravity,gravure,gravy,grawls,gray,grayfly,grayish,graylag,grayly,graze,grazer,grazier,grazing,grease,greaser,greasy,great,greaten,greater,greatly,greave,greaved,greaves,grebe,grece,gree,greed,greedy,green,greener,greeney,greenly,greenth,greenuk,greeny,greet,greeter,gregal,gregale,grege,greggle,grego,greige,grein,greisen,gremial,gremlin,grenade,greund,grew,grey,greyly,gribble,grice,grid,griddle,gride,griece,grieced,grief,grieve,grieved,griever,griff,griffe,griffin,griffon,grift,grifter,grig,grignet,grigri,grike,grill,grille,grilled,griller,grilse,grim,grimace,grime,grimful,grimily,grimly,grimme,grimp,grimy,grin,grinch,grind,grinder,grindle,gringo,grinner,grinny,grip,gripe,griper,griping,gripman,grippal,grippe,gripper,gripple,grippy,gripy,gris,grisard,griskin,grisly,grison,grist,grister,gristle,gristly,gristy,grit,grith,grits,gritten,gritter,grittle,gritty,grivet,grivna,grizzle,grizzly,groan,groaner,groat,groats,grobian,grocer,grocery,groff,grog,groggy,grogram,groin,groined,grommet,groom,groomer,groomy,groop,groose,groot,grooty,groove,groover,groovy,grope,groper,groping,gropple,gros,groser,groset,gross,grossen,grosser,grossly,grosso,grosz,groszy,grot,grotto,grouch,grouchy,grouf,grough,ground,grounds,groundy,group,grouped,grouper,grouse,grouser,grousy,grout,grouter,grouts,grouty,grouze,grove,groved,grovel,grovy,grow,growan,growed,grower,growing,growl,growler,growly,grown,grownup,growse,growth,growthy,grozart,grozet,grr,grub,grubbed,grubber,grubby,grubs,grudge,grudger,grue,gruel,grueler,gruelly,gruff,gruffly,gruffs,gruffy,grufted,grugru,gruine,grum,grumble,grumbly,grume,grumly,grummel,grummet,grumose,grumous,grump,grumph,grumphy,grumpy,grun,grundy,grunion,grunt,grunter,gruntle,grush,grushie,gruss,grutch,grutten,gryde,grylli,gryllid,gryllos,gryllus,grysbok,guaba,guacimo,guacin,guaco,guaiac,guaiol,guaka,guama,guan,guana,guanaco,guanase,guanay,guango,guanine,guanize,guano,guanyl,guao,guapena,guar,guara,guarabu,guarana,guarani,guard,guarded,guarder,guardo,guariba,guarri,guasa,guava,guavina,guayaba,guayabi,guayabo,guayule,guaza,gubbo,gucki,gud,gudame,guddle,gude,gudge,gudgeon,gudget,gudok,gue,guebucu,guemal,guenepe,guenon,guepard,guerdon,guereza,guess,guesser,guest,guesten,guester,gufa,guff,guffaw,guffer,guffin,guffy,gugal,guggle,gugglet,guglet,guglia,guglio,gugu,guhr,guib,guiba,guidage,guide,guider,guidman,guidon,guige,guignol,guijo,guild,guilder,guildic,guildry,guile,guilery,guilt,guilty,guily,guimpe,guinea,guipure,guisard,guise,guiser,guising,guitar,gul,gula,gulae,gulaman,gular,gularis,gulch,gulden,gule,gules,gulf,gulfy,gulgul,gulix,gull,gullery,gullet,gullion,gullish,gully,gulonic,gulose,gulp,gulper,gulpin,gulping,gulpy,gulsach,gum,gumbo,gumboil,gumby,gumdrop,gumihan,gumless,gumlike,gumly,gumma,gummage,gummata,gummed,gummer,gumming,gummite,gummose,gummous,gummy,gump,gumpus,gumshoe,gumweed,gumwood,gun,guna,gunate,gunboat,gundi,gundy,gunebo,gunfire,gunge,gunite,gunj,gunk,gunl,gunless,gunlock,gunman,gunnage,gunne,gunnel,gunner,gunnery,gunnies,gunning,gunnung,gunny,gunong,gunplay,gunrack,gunsel,gunshop,gunshot,gunsman,gunster,gunter,gunwale,gunyah,gunyang,gunyeh,gup,guppy,gur,gurdle,gurge,gurgeon,gurges,gurgle,gurglet,gurgly,gurjun,gurk,gurl,gurly,gurnard,gurnet,gurniad,gurr,gurrah,gurry,gurt,guru,gush,gusher,gushet,gushily,gushing,gushy,gusla,gusle,guss,gusset,gussie,gust,gustful,gustily,gusto,gusty,gut,gutless,gutlike,gutling,gutt,gutta,guttate,gutte,gutter,guttery,gutti,guttide,guttie,guttle,guttler,guttula,guttule,guttus,gutty,gutweed,gutwise,gutwort,guy,guydom,guyer,guz,guze,guzzle,guzzler,gwag,gweduc,gweed,gweeon,gwely,gwine,gwyniad,gyle,gym,gymel,gymnast,gymnic,gymnics,gymnite,gymnure,gympie,gyn,gyne,gynecic,gynic,gynics,gyp,gype,gypper,gyps,gypsine,gypsite,gypsous,gypster,gypsum,gypsy,gypsyfy,gypsyry,gyral,gyrally,gyrant,gyrate,gyrator,gyre,gyrene,gyri,gyric,gyrinid,gyro,gyrocar,gyroma,gyron,gyronny,gyrose,gyrous,gyrus,gyte,gytling,gyve,h,ha,haab,haaf,habble,habeas,habena,habenal,habenar,habile,habille,habit,habitan,habitat,habited,habitue,habitus,habnab,haboob,habu,habutai,hache,hachure,hack,hackbut,hacked,hackee,hacker,hackery,hackin,hacking,hackle,hackler,hacklog,hackly,hackman,hackney,hacksaw,hacky,had,hadbot,hadden,haddie,haddo,haddock,hade,hading,hadj,hadji,hadland,hadrome,haec,haem,haemony,haet,haff,haffet,haffle,hafiz,hafnium,hafnyl,haft,hafter,hag,hagboat,hagborn,hagbush,hagdon,hageen,hagfish,haggada,haggard,hagged,hagger,haggis,haggish,haggle,haggler,haggly,haggy,hagi,hagia,haglet,haglike,haglin,hagride,hagrope,hagseed,hagship,hagweed,hagworm,hah,haik,haikai,haikal,haikwan,hail,hailer,hailse,haily,hain,haine,hair,haircut,hairdo,haire,haired,hairen,hairif,hairlet,hairpin,hairup,hairy,haje,hajib,hajilij,hak,hakam,hakdar,hake,hakeem,hakim,hako,haku,hala,halakah,halakic,halal,halberd,halbert,halch,halcyon,hale,halebi,haler,halerz,half,halfer,halfman,halfway,halibiu,halibut,halide,halidom,halite,halitus,hall,hallage,hallah,hallan,hallel,hallex,halling,hallman,halloo,hallow,hallux,hallway,halma,halo,halogen,haloid,hals,halse,halsen,halt,halter,halting,halurgy,halutz,halvans,halve,halved,halver,halves,halyard,ham,hamal,hamald,hamate,hamated,hamatum,hamble,hame,hameil,hamel,hamfat,hami,hamlah,hamlet,hammada,hammam,hammer,hammock,hammy,hamose,hamous,hamper,hamsa,hamster,hamular,hamule,hamulus,hamus,hamza,han,hanaper,hanbury,hance,hanced,hanch,hand,handbag,handbow,handcar,handed,hander,handful,handgun,handily,handle,handled,handler,handout,handsaw,handsel,handset,handy,hangar,hangby,hangdog,hange,hangee,hanger,hangie,hanging,hangle,hangman,hangout,hangul,hanif,hank,hanker,hankie,hankle,hanky,hanna,hansa,hanse,hansel,hansom,hant,hantle,hao,haole,haoma,haori,hap,hapless,haplite,haploid,haploma,haplont,haply,happen,happier,happify,happily,happing,happy,hapten,haptene,haptere,haptic,haptics,hapu,hapuku,harass,haratch,harbi,harbor,hard,harden,harder,hardily,hardim,hardish,hardly,hardock,hardpan,hardy,hare,harebur,harelip,harem,harfang,haricot,harish,hark,harka,harl,harling,harlock,harlot,harm,harmal,harmala,harman,harmel,harmer,harmful,harmine,harmony,harmost,harn,harness,harnpan,harp,harpago,harper,harpier,harpist,harpoon,harpula,harr,harrier,harrow,harry,harsh,harshen,harshly,hart,hartal,hartin,hartite,harvest,hasan,hash,hashab,hasher,hashish,hashy,hask,hasky,haslet,haslock,hasp,hassar,hassel,hassle,hassock,hasta,hastate,hastati,haste,hasten,haster,hastily,hastish,hastler,hasty,hat,hatable,hatband,hatbox,hatbrim,hatch,hatchel,hatcher,hatchet,hate,hateful,hater,hatful,hath,hathi,hatless,hatlike,hatpin,hatrack,hatrail,hatred,hatress,hatt,hatted,hatter,hattery,hatting,hattock,hatty,hau,hauberk,haugh,haught,haughty,haul,haulage,hauld,hauler,haulier,haulm,haulmy,haunch,haunchy,haunt,haunter,haunty,hause,hausen,hausse,hautboy,hauteur,havage,have,haveage,havel,haven,havener,havenet,havent,haver,haverel,haverer,havers,havier,havoc,haw,hawbuck,hawer,hawk,hawkbit,hawked,hawker,hawkery,hawkie,hawking,hawkish,hawknut,hawky,hawm,hawok,hawse,hawser,hay,haya,hayband,haybird,haybote,haycap,haycart,haycock,hayey,hayfork,haylift,hayloft,haymow,hayrack,hayrake,hayrick,hayseed,haysel,haysuck,haytime,hayward,hayweed,haywire,hayz,hazard,haze,hazel,hazeled,hazelly,hazen,hazer,hazily,hazing,hazle,hazy,hazzan,he,head,headcap,headed,header,headful,headily,heading,headman,headset,headway,heady,heaf,heal,heald,healder,healer,healful,healing,health,healthy,heap,heaper,heaps,heapy,hear,hearer,hearing,hearken,hearsay,hearse,hearst,heart,hearted,hearten,hearth,heartly,hearts,hearty,heat,heater,heatful,heath,heathen,heather,heathy,heating,heaume,heaumer,heave,heaven,heavens,heaver,heavies,heavily,heaving,heavity,heavy,hebamic,hebenon,hebete,hebetic,hech,heck,heckle,heckler,hectare,hecte,hectic,hector,heddle,heddler,hedebo,heder,hederic,hederin,hedge,hedger,hedging,hedgy,hedonic,heed,heeder,heedful,heedily,heedy,heehaw,heel,heelcap,heeled,heeler,heeltap,heer,heeze,heezie,heezy,heft,hefter,heftily,hefty,hegari,hegemon,hegira,hegumen,hei,heiau,heifer,heigh,height,heii,heimin,heinous,heir,heirdom,heiress,heitiki,hekteus,helbeh,helcoid,helder,hele,helenin,heliast,helical,heliced,helices,helicin,helicon,helide,heling,helio,helioid,helium,helix,hell,hellbox,hellcat,helldog,heller,helleri,hellhag,hellier,hellion,hellish,hello,helluo,helly,helm,helmage,helmed,helmet,helodes,heloe,heloma,helonin,helosis,helotry,help,helper,helpful,helping,helply,helve,helvell,helver,helvite,hem,hemad,hemal,hemapod,hemase,hematal,hematic,hematid,hematin,heme,hemen,hemera,hemiamb,hemic,hemin,hemina,hemine,heminee,hemiope,hemipic,heml,hemlock,hemmel,hemmer,hemocry,hemoid,hemol,hemopod,hemp,hempen,hempy,hen,henad,henbane,henbill,henbit,hence,hencoop,hencote,hend,hendly,henfish,henism,henlike,henna,hennery,hennin,hennish,henny,henotic,henpeck,henpen,henry,hent,henter,henware,henwife,henwise,henyard,hep,hepar,heparin,hepatic,hepcat,heppen,hepper,heptace,heptad,heptal,heptane,heptene,heptine,heptite,heptoic,heptose,heptyl,heptyne,her,herald,herb,herbage,herbal,herbane,herbary,herbish,herbist,herblet,herbman,herbose,herbous,herby,herd,herdboy,herder,herdic,herding,here,hereat,hereby,herein,herem,hereof,hereon,heresy,heretic,hereto,herile,heriot,heritor,herl,herling,herma,hermaic,hermit,hern,hernani,hernant,herne,hernia,hernial,hero,heroess,heroic,heroid,heroify,heroin,heroine,heroism,heroize,heron,heroner,heronry,herpes,herring,hers,herse,hersed,herself,hership,hersir,hertz,hessite,hest,hestern,het,hetaera,hetaery,heteric,hetero,hething,hetman,hetter,heuau,heugh,heumite,hevi,hew,hewable,hewel,hewer,hewhall,hewn,hewt,hex,hexa,hexace,hexacid,hexact,hexad,hexadic,hexagon,hexagyn,hexane,hexaped,hexapla,hexapod,hexarch,hexene,hexer,hexerei,hexeris,hexine,hexis,hexitol,hexode,hexogen,hexoic,hexone,hexonic,hexosan,hexose,hexyl,hexylic,hexyne,hey,heyday,hi,hia,hiant,hiatal,hiate,hiation,hiatus,hibbin,hic,hicatee,hiccup,hick,hickey,hickory,hidable,hidage,hidalgo,hidated,hidden,hide,hided,hideous,hider,hidling,hie,hieder,hield,hiemal,hieron,hieros,higdon,higgle,higgler,high,highboy,higher,highest,highish,highly,highman,hight,hightop,highway,higuero,hijack,hike,hiker,hilch,hilding,hill,hiller,hillet,hillman,hillock,hilltop,hilly,hilsa,hilt,hilum,hilus,him,himp,himself,himward,hin,hinau,hinch,hind,hinder,hing,hinge,hinger,hingle,hinney,hinny,hinoid,hinoki,hint,hinter,hiodont,hip,hipbone,hipe,hiper,hiphalt,hipless,hipmold,hipped,hippen,hippian,hippic,hipping,hippish,hipple,hippo,hippoid,hippus,hippy,hipshot,hipwort,hirable,hircine,hire,hired,hireman,hirer,hirmos,hiro,hirple,hirse,hirsel,hirsle,hirsute,his,hish,hisn,hispid,hiss,hisser,hissing,hist,histie,histoid,histon,histone,history,histrio,hit,hitch,hitcher,hitchy,hithe,hither,hitless,hitter,hive,hiver,hives,hizz,ho,hoar,hoard,hoarder,hoarily,hoarish,hoarse,hoarsen,hoary,hoast,hoatzin,hoax,hoaxee,hoaxer,hob,hobber,hobbet,hobbil,hobble,hobbler,hobbly,hobby,hoblike,hobnail,hobnob,hobo,hoboism,hocco,hock,hocker,hocket,hockey,hocky,hocus,hod,hodden,hodder,hoddle,hoddy,hodful,hodman,hoe,hoecake,hoedown,hoeful,hoer,hog,hoga,hogan,hogback,hogbush,hogfish,hogged,hogger,hoggery,hogget,hoggie,hoggin,hoggish,hoggism,hoggy,hogherd,hoghide,hoghood,hoglike,hogling,hogmace,hognose,hognut,hogpen,hogship,hogskin,hogsty,hogward,hogwash,hogweed,hogwort,hogyard,hoi,hoick,hoin,hoise,hoist,hoister,hoit,hoju,hokey,hokum,holard,holcad,hold,holdall,holden,holder,holding,holdout,holdup,hole,holeman,holer,holey,holia,holiday,holily,holing,holism,holl,holla,holler,hollin,hollo,hollock,hollong,hollow,holly,holm,holmia,holmic,holmium,holmos,holour,holster,holt,holy,holyday,homage,homager,home,homelet,homely,homelyn,homeoid,homer,homey,homily,hominal,hominid,hominy,homish,homo,homodox,homogen,homonym,homrai,homy,honda,hondo,hone,honest,honesty,honey,honeyed,hong,honied,honily,honk,honker,honor,honoree,honorer,hontish,hontous,hooch,hood,hoodcap,hooded,hoodful,hoodie,hoodlum,hoodman,hoodoo,hoodshy,hooey,hoof,hoofed,hoofer,hoofish,hooflet,hoofrot,hoofs,hoofy,hook,hookah,hooked,hooker,hookers,hookish,hooklet,hookman,hooktip,hookum,hookup,hooky,hoolock,hooly,hoon,hoop,hooped,hooper,hooping,hoopla,hoople,hoopman,hoopoe,hoose,hoosh,hoot,hootay,hooter,hoove,hooven,hoovey,hop,hopbine,hopbush,hope,hoped,hopeful,hopeite,hoper,hopi,hoplite,hopoff,hopped,hopper,hoppers,hoppet,hoppity,hopple,hoppy,hoptoad,hopvine,hopyard,hora,horal,horary,hordary,horde,hordein,horizon,horme,hormic,hormigo,hormion,hormist,hormone,hormos,horn,horned,horner,hornet,hornety,hornful,hornify,hornily,horning,hornish,hornist,hornito,hornlet,horntip,horny,horrent,horreum,horrid,horrify,horror,horse,horser,horsify,horsily,horsing,horst,horsy,hortite,hory,hosanna,hose,hosed,hosel,hoseman,hosier,hosiery,hospice,host,hostage,hostel,hoster,hostess,hostie,hostile,hosting,hostler,hostly,hostry,hot,hotbed,hotbox,hotch,hotel,hotfoot,hothead,hoti,hotly,hotness,hotspur,hotter,hottery,hottish,houbara,hough,hougher,hounce,hound,hounder,houndy,hour,hourful,houri,hourly,housage,housal,house,housel,houser,housing,housty,housy,houtou,houvari,hove,hovel,hoveler,hoven,hover,hoverer,hoverly,how,howadji,howbeit,howdah,howder,howdie,howdy,howe,howel,however,howff,howish,howk,howkit,howl,howler,howlet,howling,howlite,howso,hox,hoy,hoyden,hoyle,hoyman,huaca,huaco,huarizo,hub,hubb,hubba,hubber,hubble,hubbly,hubbub,hubby,hubshi,huchen,hucho,huck,huckle,hud,huddle,huddler,huddock,huddup,hue,hued,hueful,hueless,huer,huff,huffier,huffily,huffish,huffle,huffler,huffy,hug,huge,hugely,hugeous,hugger,hugging,huggle,hugsome,huh,huia,huipil,huitain,huke,hula,huldee,hulk,hulkage,hulking,hulky,hull,huller,hullock,hulloo,hulsite,hulster,hulu,hulver,hum,human,humane,humanly,humate,humble,humbler,humblie,humbly,humbo,humbug,humbuzz,humdrum,humect,humeral,humeri,humerus,humet,humetty,humhum,humic,humid,humidly,humidor,humific,humify,humin,humite,humlie,hummel,hummer,hummie,humming,hummock,humor,humoral,humous,hump,humped,humph,humpty,humpy,humus,hunch,hunchet,hunchy,hundi,hundred,hung,hunger,hungry,hunh,hunk,hunker,hunkers,hunkies,hunks,hunky,hunt,hunting,hup,hura,hurdies,hurdis,hurdle,hurdler,hurds,hure,hureek,hurgila,hurkle,hurl,hurled,hurler,hurley,hurling,hurlock,hurly,huron,hurr,hurrah,hurried,hurrier,hurrock,hurroo,hurry,hurst,hurt,hurted,hurter,hurtful,hurting,hurtle,hurty,husband,huse,hush,hushaby,husheen,hushel,husher,hushful,hushing,hushion,husho,husk,husked,husker,huskily,husking,husky,huso,huspil,huss,hussar,hussy,husting,hustle,hustler,hut,hutch,hutcher,hutchet,huthold,hutia,hutlet,hutment,huvelyk,huzoor,huzz,huzza,huzzard,hyaena,hyaline,hyalite,hyaloid,hybosis,hybrid,hydatid,hydnoid,hydrant,hydrate,hydrazo,hydria,hydric,hydride,hydro,hydroa,hydroid,hydrol,hydrome,hydrone,hydrops,hydrous,hydroxy,hydrula,hyena,hyenic,hyenine,hyenoid,hyetal,hygeist,hygiene,hygric,hygrine,hygroma,hying,hyke,hyle,hyleg,hylic,hylism,hylist,hyloid,hymen,hymenal,hymenic,hymn,hymnal,hymnary,hymner,hymnic,hymnist,hymnode,hymnody,hynde,hyne,hyoid,hyoidal,hyoidan,hyoides,hyp,hypate,hypaton,hyper,hypha,hyphal,hyphema,hyphen,hypho,hypnody,hypnoid,hypnone,hypo,hypogee,hypoid,hyponym,hypopus,hyporit,hyppish,hypural,hyraces,hyracid,hyrax,hyson,hyssop,i,iamb,iambi,iambic,iambist,iambize,iambus,iao,iatric,iba,iberite,ibex,ibices,ibid,ibidine,ibis,ibolium,ibota,icaco,ice,iceberg,iceboat,icebone,icebox,icecap,iced,icefall,icefish,iceland,iceleaf,iceless,icelike,iceman,iceroot,icework,ich,ichnite,icho,ichor,ichthus,ichu,icica,icicle,icicled,icily,iciness,icing,icon,iconic,iconism,icosian,icotype,icteric,icterus,ictic,ictuate,ictus,icy,id,idalia,idant,iddat,ide,idea,ideaed,ideaful,ideal,ideally,ideate,ideist,identic,ides,idgah,idiasm,idic,idiocy,idiom,idiot,idiotcy,idiotic,idiotry,idite,iditol,idle,idleful,idleman,idler,idleset,idlety,idlish,idly,idol,idola,idolify,idolism,idolist,idolize,idolous,idolum,idoneal,idorgan,idose,idryl,idyl,idyler,idylism,idylist,idylize,idyllic,ie,if,ife,iffy,igloo,ignatia,ignavia,igneous,ignify,ignite,igniter,ignitor,ignoble,ignobly,ignore,ignorer,ignote,iguana,iguanid,ihi,ihleite,ihram,iiwi,ijma,ijolite,ikat,ikey,ikona,ikra,ileac,ileitis,ileon,ilesite,ileum,ileus,ilex,ilia,iliac,iliacus,iliahi,ilial,iliau,ilicic,ilicin,ilima,ilium,ilk,ilka,ilkane,ill,illapse,illeck,illegal,illeism,illeist,illess,illfare,illicit,illish,illium,illness,illocal,illogic,illoyal,illth,illude,illuder,illume,illumer,illupi,illure,illusor,illy,ilot,ilvaite,image,imager,imagery,imagine,imagism,imagist,imago,imam,imamah,imamate,imamic,imaret,imban,imband,imbarge,imbark,imbarn,imbased,imbat,imbauba,imbe,imbed,imber,imbibe,imbiber,imbondo,imbosom,imbower,imbrex,imbrue,imbrute,imbue,imburse,imi,imide,imidic,imine,imino,imitant,imitate,immane,immask,immense,immerd,immerge,immerit,immerse,immew,immi,immit,immix,immoral,immound,immund,immune,immure,immute,imonium,imp,impack,impact,impages,impaint,impair,impala,impale,impaler,impall,impalm,impalsy,impane,impanel,impar,impark,imparl,impart,impasse,impaste,impasto,impave,impavid,impawn,impeach,impearl,impede,impeder,impel,impen,impend,impent,imperia,imperil,impest,impetre,impetus,imphee,impi,impiety,impinge,impious,impish,implant,implate,implead,implete,implex,implial,impling,implode,implore,implume,imply,impofo,impone,impoor,import,imposal,impose,imposer,impost,impot,impound,impreg,impregn,impresa,imprese,impress,imprest,imprime,imprint,improof,improve,impship,impubic,impugn,impulse,impure,impute,imputer,impy,imshi,imsonic,imu,in,inachid,inadept,inagile,inaja,inane,inanely,inanga,inanity,inapt,inaptly,inarch,inarm,inaugur,inaxon,inbe,inbeing,inbent,inbirth,inblow,inblown,inboard,inbond,inborn,inbound,inbread,inbreak,inbred,inbreed,inbring,inbuilt,inburnt,inburst,inby,incarn,incase,incast,incense,incept,incest,inch,inched,inchpin,incide,incisal,incise,incisor,incite,inciter,incivic,incline,inclip,inclose,include,inclusa,incluse,incog,income,incomer,inconnu,incrash,increep,increst,incross,incrust,incubi,incubus,incudal,incudes,incult,incur,incurse,incurve,incus,incuse,incut,indaba,indan,indane,indart,indazin,indazol,inde,indebt,indeed,indeedy,indene,indent,index,indexed,indexer,indic,indican,indices,indicia,indict,indign,indigo,indite,inditer,indium,indogen,indole,indoles,indolyl,indoor,indoors,indorse,indoxyl,indraft,indrawn,indri,induce,induced,inducer,induct,indue,indulge,indult,indulto,induna,indwell,indy,indyl,indylic,inearth,inept,ineptly,inequal,inerm,inert,inertia,inertly,inesite,ineunt,inexact,inexist,inface,infall,infame,infamy,infancy,infand,infang,infant,infanta,infante,infarct,infare,infaust,infect,infeed,infeft,infelt,infer,infern,inferno,infest,infidel,infield,infill,infilm,infirm,infit,infix,inflame,inflate,inflect,inflex,inflict,inflood,inflow,influx,infold,inform,infra,infract,infula,infuse,infuser,ing,ingate,ingenit,ingenue,ingest,ingesta,ingiver,ingle,inglobe,ingoing,ingot,ingraft,ingrain,ingrate,ingress,ingross,ingrow,ingrown,inguen,ingulf,inhabit,inhale,inhaler,inhaul,inhaust,inhere,inherit,inhiate,inhibit,inhuman,inhume,inhumer,inial,iniome,inion,initial,initis,initive,inject,injelly,injunct,injure,injured,injurer,injury,ink,inkbush,inken,inker,inket,inkfish,inkhorn,inkish,inkle,inkless,inklike,inkling,inknot,inkosi,inkpot,inkroot,inks,inkshed,inkweed,inkwell,inkwood,inky,inlaid,inlaik,inlake,inland,inlaut,inlaw,inlawry,inlay,inlayer,inleak,inlet,inlier,inlook,inly,inlying,inmate,inmeats,inmost,inn,innate,inneity,inner,innerly,innerve,inness,innest,innet,inning,innless,innyard,inocyte,inogen,inoglia,inolith,inoma,inone,inopine,inorb,inosic,inosin,inosite,inower,inphase,inport,inpour,inpush,input,inquest,inquiet,inquire,inquiry,inring,inro,inroad,inroll,inrub,inrun,inrush,insack,insane,insculp,insea,inseam,insect,insee,inseer,insense,insert,inset,inshave,inshell,inship,inshoe,inshoot,inshore,inside,insider,insight,insigne,insipid,insist,insnare,insofar,insole,insolid,insooth,insorb,insoul,inspan,inspeak,inspect,inspire,inspoke,install,instant,instar,instate,instead,insteam,insteep,instep,instill,insula,insular,insulin,insulse,insult,insunk,insure,insured,insurer,insurge,inswamp,inswell,inswept,inswing,intact,intake,intaker,integer,inteind,intend,intense,intent,inter,interim,intern,intext,inthrow,intil,intima,intimal,intine,into,intoed,intone,intoner,intort,intown,intrada,intrait,intrant,intreat,intrine,introit,intrude,intruse,intrust,intube,intue,intuent,intuit,inturn,intwist,inula,inulase,inulin,inuloid,inunct,inure,inured,inurn,inutile,invade,invader,invalid,inveigh,inveil,invein,invent,inverse,invert,invest,invigor,invised,invital,invite,invitee,inviter,invivid,invoice,invoke,invoker,involve,inwale,inwall,inward,inwards,inweave,inweed,inwick,inwind,inwit,inwith,inwood,inwork,inworn,inwound,inwoven,inwrap,inwrit,inyoite,inyoke,io,iodate,iodic,iodide,iodine,iodism,iodite,iodize,iodizer,iodo,iodol,iodoso,iodous,iodoxy,iolite,ion,ionic,ionium,ionize,ionizer,ionogen,ionone,iota,iotize,ipecac,ipid,ipil,ipomea,ipseand,ipseity,iracund,irade,irate,irately,ire,ireful,ireless,irene,irenic,irenics,irian,irid,iridal,iridate,irides,iridial,iridian,iridic,iridin,iridine,iridite,iridium,iridize,iris,irised,irisin,iritic,iritis,irk,irksome,irok,iroko,iron,irone,ironer,ironice,ironish,ironism,ironist,ironize,ironly,ironman,irony,irrisor,irrupt,is,isagoge,isagon,isamine,isatate,isatic,isatide,isatin,isazoxy,isba,ischiac,ischial,ischium,ischury,iserine,iserite,isidium,isidoid,island,islandy,islay,isle,islet,isleted,islot,ism,ismal,ismatic,ismdom,ismy,iso,isoamyl,isobar,isobare,isobase,isobath,isochor,isocola,isocrat,isodont,isoflor,isogamy,isogen,isogeny,isogon,isogram,isohel,isohyet,isolate,isology,isomer,isomere,isomery,isoneph,isonomy,isonym,isonymy,isopag,isopod,isopoly,isoptic,isopyre,isotac,isotely,isotome,isotony,isotope,isotopy,isotron,isotype,isoxime,issei,issite,issuant,issue,issuer,issuing,ist,isthmi,isthmic,isthmus,istle,istoke,isuret,isuroid,it,itacism,itacist,italics,italite,itch,itching,itchy,itcze,item,iteming,itemize,itemy,iter,iterant,iterate,ither,itmo,itoubou,its,itself,iturite,itzebu,iva,ivied,ivin,ivoried,ivorine,ivorist,ivory,ivy,ivylike,ivyweed,ivywood,ivywort,iwa,iwaiwa,iwis,ixodian,ixodic,ixodid,iyo,izar,izard,izle,izote,iztle,izzard,j,jab,jabbed,jabber,jabbing,jabble,jabers,jabia,jabiru,jabot,jabul,jacal,jacamar,jacami,jacamin,jacana,jacare,jacate,jacchus,jacent,jacinth,jack,jackal,jackass,jackbox,jackboy,jackdaw,jackeen,jacker,jacket,jackety,jackleg,jackman,jacko,jackrod,jacksaw,jacktan,jacobus,jacoby,jaconet,jactant,jacu,jacuaru,jadder,jade,jaded,jadedly,jadeite,jadery,jadish,jady,jaeger,jag,jagat,jager,jagged,jagger,jaggery,jaggy,jagir,jagla,jagless,jagong,jagrata,jagua,jaguar,jail,jailage,jaildom,jailer,jailish,jajman,jake,jakes,jako,jalap,jalapa,jalapin,jalkar,jalopy,jalouse,jam,jama,jaman,jamb,jambeau,jambo,jambone,jambool,jambosa,jamdani,jami,jamlike,jammer,jammy,jampan,jampani,jamwood,janapa,janapan,jane,jangada,jangkar,jangle,jangler,jangly,janitor,jank,janker,jann,jannock,jantu,janua,jaob,jap,japan,jape,japer,japery,japing,japish,jaquima,jar,jara,jaragua,jarbird,jarble,jarbot,jarfly,jarful,jarg,jargon,jarkman,jarl,jarldom,jarless,jarnut,jarool,jarra,jarrah,jarring,jarry,jarvey,jasey,jaseyed,jasmine,jasmone,jasper,jaspery,jaspis,jaspoid,jass,jassid,jassoid,jatha,jati,jato,jaudie,jauk,jaun,jaunce,jaunder,jaunt,jauntie,jaunty,jaup,javali,javelin,javer,jaw,jawab,jawbone,jawed,jawfall,jawfish,jawfoot,jawless,jawy,jay,jayhawk,jaypie,jaywalk,jazz,jazzer,jazzily,jazzy,jealous,jean,jeans,jecoral,jecorin,jed,jedcock,jedding,jeddock,jeel,jeep,jeer,jeerer,jeering,jeery,jeff,jehu,jehup,jejunal,jejune,jejunum,jelab,jelick,jell,jellica,jellico,jellied,jellify,jellily,jelloid,jelly,jemadar,jemmily,jemmy,jenkin,jenna,jennet,jennier,jenny,jeofail,jeopard,jerboa,jereed,jerez,jerib,jerk,jerker,jerkily,jerkin,jerkish,jerky,jerl,jerm,jerque,jerquer,jerry,jersey,jert,jervia,jervina,jervine,jess,jessamy,jessant,jessed,jessur,jest,jestee,jester,jestful,jesting,jet,jetbead,jete,jetsam,jettage,jetted,jetter,jettied,jetton,jetty,jetware,jewbird,jewbush,jewel,jeweler,jewelry,jewely,jewfish,jezail,jeziah,jharal,jheel,jhool,jhow,jib,jibbah,jibber,jibby,jibe,jibhead,jibi,jibman,jiboa,jibstay,jicama,jicara,jiff,jiffle,jiffy,jig,jigger,jiggers,jigget,jiggety,jiggish,jiggle,jiggly,jiggy,jiglike,jigman,jihad,jikungu,jillet,jilt,jiltee,jilter,jiltish,jimbang,jimjam,jimmy,jimp,jimply,jina,jing,jingal,jingle,jingled,jingler,jinglet,jingly,jingo,jinja,jinjili,jink,jinker,jinket,jinkle,jinks,jinn,jinni,jinny,jinriki,jinx,jipper,jiqui,jirble,jirga,jiti,jitneur,jitney,jitro,jitter,jitters,jittery,jiva,jive,jixie,jo,job,jobade,jobarbe,jobber,jobbery,jobbet,jobbing,jobbish,jobble,jobless,jobman,jobo,joch,jock,jocker,jockey,jocko,jocoque,jocose,jocote,jocu,jocular,jocum,jocuma,jocund,jodel,jodelr,joe,joebush,joewood,joey,jog,jogger,joggle,joggler,joggly,johnin,join,joinant,joinder,joiner,joinery,joining,joint,jointed,jointer,jointly,jointy,joist,jojoba,joke,jokelet,joker,jokish,jokist,jokul,joky,joll,jollier,jollify,jollily,jollity,jollop,jolly,jolt,jolter,jolting,jolty,jonque,jonquil,joola,joom,jordan,joree,jorum,joseite,josh,josher,joshi,josie,joskin,joss,josser,jostle,jostler,jot,jota,jotisi,jotter,jotting,jotty,joubarb,joug,jough,jouk,joule,joulean,jounce,journal,journey,jours,joust,jouster,jovial,jow,jowar,jowari,jowel,jower,jowery,jowl,jowler,jowlish,jowlop,jowly,jowpy,jowser,jowter,joy,joyance,joyancy,joyant,joyful,joyhop,joyleaf,joyless,joylet,joyous,joysome,joyweed,juba,jubate,jubbah,jubbe,jube,jubilee,jubilus,juck,juckies,jud,judcock,judex,judge,judger,judices,judo,jufti,jug,jugal,jugale,jugate,jugated,juger,jugerum,jugful,jugger,juggins,juggle,juggler,juglone,jugular,jugulum,jugum,juice,juicily,juicy,jujitsu,juju,jujube,jujuism,jujuist,juke,jukebox,julep,julid,julidan,julio,juloid,julole,julolin,jumart,jumba,jumble,jumbler,jumbly,jumbo,jumbuck,jumby,jumelle,jument,jumfru,jumma,jump,jumper,jumpy,juncite,juncous,june,jungle,jungled,jungli,jungly,juniata,junior,juniper,junk,junker,junket,junking,junkman,junt,junta,junto,jupati,jupe,jupon,jural,jurally,jurant,jurara,jurat,jurator,jure,jurel,juridic,juring,jurist,juror,jury,juryman,jussel,jussion,jussive,jussory,just,justen,justice,justify,justly,justo,jut,jute,jutka,jutting,jutty,juvenal,juvia,juvite,jyngine,jynx,k,ka,kabaya,kabel,kaberu,kabiet,kabuki,kachin,kadaya,kadein,kados,kaffir,kafir,kafirin,kafiz,kafta,kago,kagu,kaha,kahar,kahau,kahili,kahu,kahuna,kai,kaid,kaik,kaikara,kail,kainga,kainite,kainsi,kainyn,kairine,kaiser,kaitaka,kaiwi,kajawah,kaka,kakapo,kakar,kaki,kakkak,kakke,kala,kalasie,kale,kalema,kalends,kali,kalian,kalium,kallah,kallege,kalo,kalon,kalong,kalpis,kamahi,kamala,kamansi,kamao,kamas,kamassi,kambal,kamboh,kame,kamerad,kamias,kamichi,kamik,kampong,kan,kana,kanae,kanagi,kanap,kanara,kanari,kanat,kanchil,kande,kandol,kaneh,kang,kanga,kangani,kankie,kannume,kanoon,kans,kantele,kanten,kaolin,kapa,kapai,kapeika,kapok,kapp,kappa,kappe,kapur,kaput,karagan,karaka,karakul,karamu,karaoke,karate,karaya,karbi,karch,kareao,kareeta,karela,karite,karma,karmic,karo,kaross,karou,karree,karri,karroo,karsha,karst,karstic,kartel,kartos,karwar,karyon,kasa,kasbah,kasbeke,kasher,kashga,kashi,kashima,kasida,kasm,kassu,kastura,kat,katar,katcina,kath,katha,kathal,katipo,katmon,katogle,katsup,katuka,katun,katurai,katydid,kauri,kava,kavaic,kavass,kawaka,kawika,kay,kayak,kayaker,kayles,kayo,kazi,kazoo,kea,keach,keacorn,keawe,keb,kebab,kebbie,kebbuck,kechel,keck,keckle,kecksy,kecky,ked,keddah,kedge,kedger,kedlock,keech,keek,keeker,keel,keelage,keeled,keeler,keelfat,keelie,keeling,keelman,keelson,keen,keena,keened,keener,keenly,keep,keeper,keeping,keest,keet,keeve,kef,keffel,kefir,kefiric,keg,kegler,kehaya,keita,keitloa,kekuna,kelchin,keld,kele,kelebe,keleh,kelek,kelep,kelk,kell,kella,kellion,kelly,keloid,kelp,kelper,kelpie,kelpy,kelt,kelter,kelty,kelvin,kemb,kemp,kempite,kemple,kempt,kempy,ken,kenaf,kenareh,kench,kend,kendir,kendyr,kenlore,kenmark,kennel,kenner,kenning,kenno,keno,kenosis,kenotic,kenspac,kent,kenyte,kep,kepi,kept,kerana,kerasin,kerat,keratin,keratto,kerchoo,kerchug,kerel,kerf,kerflap,kerflop,kermes,kermis,kern,kernel,kerner,kernish,kernite,kernos,kerogen,kerrie,kerril,kerrite,kerry,kersey,kerslam,kerugma,kerwham,kerygma,kestrel,ket,keta,ketal,ketch,ketchup,keten,ketene,ketipic,keto,ketogen,ketol,ketole,ketone,ketonic,ketose,ketosis,kette,ketting,kettle,kettler,ketty,ketuba,ketupa,ketyl,keup,kevalin,kevel,kewpie,kex,kexy,key,keyage,keyed,keyhole,keyless,keylet,keylock,keynote,keyway,khaddar,khadi,khahoon,khaiki,khair,khaja,khajur,khaki,khakied,khalifa,khalsa,khamsin,khan,khanate,khanda,khanjar,khanjee,khankah,khanum,khar,kharaj,kharua,khass,khat,khatib,khatri,khediva,khedive,khepesh,khet,khilat,khir,khirka,khoja,khoka,khot,khu,khubber,khula,khutbah,khvat,kiack,kiaki,kialee,kiang,kiaugh,kibber,kibble,kibbler,kibe,kibei,kibitka,kibitz,kiblah,kibosh,kiby,kick,kickee,kicker,kicking,kickish,kickoff,kickout,kickup,kidder,kiddier,kiddish,kiddush,kiddy,kidhood,kidlet,kidling,kidnap,kidney,kidskin,kidsman,kiekie,kiel,kier,kieye,kikar,kike,kiki,kiku,kikuel,kikumon,kil,kiladja,kilah,kilan,kildee,kileh,kilerg,kiley,kilhig,kiliare,kilim,kill,killas,killcu,killeen,killer,killick,killing,killy,kiln,kilneye,kilnman,kilnrib,kilo,kilobar,kiloton,kilovar,kilp,kilt,kilter,kiltie,kilting,kim,kimbang,kimnel,kimono,kin,kina,kinah,kinase,kinbote,kinch,kinchin,kincob,kind,kindle,kindler,kindly,kindred,kinepox,kinesic,kinesis,kinetic,king,kingcob,kingcup,kingdom,kinglet,kingly,kingpin,kingrow,kink,kinkhab,kinkily,kinkle,kinkled,kinkly,kinky,kinless,kino,kinship,kinsman,kintar,kioea,kiosk,kiotome,kip,kipage,kipe,kippeen,kipper,kippy,kipsey,kipskin,kiri,kirimon,kirk,kirker,kirkify,kirking,kirkman,kirmew,kirn,kirombo,kirsch,kirtle,kirtled,kirve,kirver,kischen,kish,kishen,kishon,kishy,kismet,kisra,kiss,kissage,kissar,kisser,kissing,kissy,kist,kistful,kiswa,kit,kitab,kitabis,kitar,kitcat,kitchen,kite,kith,kithe,kitish,kitling,kittel,kitten,kitter,kittle,kittles,kittly,kittock,kittul,kitty,kiva,kiver,kivu,kiwi,kiyas,kiyi,klafter,klam,klavern,klaxon,klepht,kleptic,klicket,klip,klipbok,klipdas,klippe,klippen,klister,klom,klop,klops,klosh,kmet,knab,knabble,knack,knacker,knacky,knag,knagged,knaggy,knap,knape,knappan,knapper,knar,knark,knarred,knarry,knave,knavery,knavess,knavish,knawel,knead,kneader,knee,kneecap,kneed,kneel,kneeler,kneelet,kneepad,kneepan,knell,knelt,knet,knew,knez,knezi,kniaz,kniazi,knick,knicker,knife,knifer,knight,knit,knitch,knitted,knitter,knittle,knived,knivey,knob,knobbed,knobber,knobble,knobbly,knobby,knock,knocker,knockup,knoll,knoller,knolly,knop,knopite,knopped,knopper,knoppy,knosp,knosped,knot,knotted,knotter,knotty,knout,know,knowe,knower,knowing,known,knub,knubbly,knubby,knublet,knuckle,knuckly,knur,knurl,knurled,knurly,knut,knutty,knyaz,knyazi,ko,koa,koae,koala,koali,kob,koban,kobi,kobird,kobold,kobong,kobu,koda,kodak,kodaker,kodakry,kodro,koel,koff,koft,koftgar,kohemp,kohl,kohua,koi,koil,koila,koilon,koine,koinon,kojang,kokako,kokam,kokan,kokil,kokio,koklas,koklass,koko,kokoon,kokowai,kokra,koku,kokum,kokumin,kola,kolach,kolea,kolhoz,kolkhos,kolkhoz,kollast,koller,kolo,kolobus,kolsun,komatik,kombu,kommos,kompeni,kon,kona,konak,kongoni,kongu,konini,konjak,kooka,kookery,kookri,koolah,koombar,koomkie,kootcha,kop,kopeck,koph,kopi,koppa,koppen,koppite,kor,kora,koradji,korait,korakan,korari,kore,korec,koreci,korero,kori,korin,korona,korova,korrel,koruna,korzec,kos,kosher,kosin,kosong,koswite,kotal,koto,kotuku,kotwal,kotyle,kotylos,kou,koulan,kouza,kovil,kowhai,kowtow,koyan,kozo,kra,kraal,kraft,krait,kraken,kral,krama,kran,kras,krasis,krausen,kraut,kreis,krelos,kremlin,krems,kreng,krieker,krimmer,krina,krocket,krome,krona,krone,kronen,kroner,kronor,kronur,kroon,krosa,krypsis,kryptic,kryptol,krypton,kuan,kuba,kubba,kuchen,kudize,kudos,kudu,kudzu,kuei,kuge,kugel,kuichua,kukri,kuku,kukui,kukupa,kula,kulack,kulah,kulaite,kulak,kulang,kulimit,kulm,kulmet,kumbi,kumhar,kumiss,kummel,kumquat,kumrah,kunai,kung,kunk,kunkur,kunzite,kuphar,kupper,kurbash,kurgan,kuruma,kurung,kurus,kurvey,kusa,kusam,kusha,kuskite,kuskos,kuskus,kusti,kusum,kutcha,kuttab,kuttar,kuttaur,kuvasz,kvass,kvint,kvinter,kwamme,kwan,kwarta,kwazoku,kyack,kyah,kyar,kyat,kyaung,kyl,kyle,kylite,kylix,kyrine,kyte,l,la,laager,laang,lab,labara,labarum,labba,labber,labefy,label,labeler,labella,labia,labial,labiate,labile,labiose,labis,labium,lablab,labor,labored,laborer,labour,labra,labral,labret,labroid,labrose,labrum,labrys,lac,lacca,laccaic,laccase,laccol,lace,laced,laceman,lacepod,lacer,lacery,lacet,lache,laches,lachsa,lacily,lacing,lacinia,lacis,lack,lacker,lackey,lackwit,lacmoid,lacmus,laconic,lacquer,lacrym,lactam,lactant,lactary,lactase,lactate,lacteal,lactean,lactic,lactid,lactide,lactify,lactim,lacto,lactoid,lactol,lactone,lactose,lactyl,lacuna,lacunae,lacunal,lacunar,lacune,lacwork,lacy,lad,ladakin,ladanum,ladder,laddery,laddess,laddie,laddish,laddock,lade,lademan,laden,lader,ladhood,ladies,ladify,lading,ladkin,ladle,ladler,ladrone,lady,ladybug,ladydom,ladyfly,ladyfy,ladyish,ladyism,ladykin,ladyly,laet,laeti,laetic,lag,lagan,lagarto,lagen,lagena,lagend,lager,lagetto,laggar,laggard,lagged,laggen,lagger,laggin,lagging,laglast,lagna,lagoon,lagwort,lai,laic,laical,laich,laicism,laicity,laicize,laid,laigh,lain,laine,laiose,lair,lairage,laird,lairdie,lairdly,lairman,lairy,laity,lak,lakatoi,lake,lakelet,laker,lakie,laking,lakish,lakism,lakist,laky,lalang,lall,lalling,lalo,lam,lama,lamaic,lamany,lamb,lamba,lambale,lambda,lambeau,lambent,lamber,lambert,lambie,lambish,lambkin,lambly,lamboys,lamby,lame,lamedh,lamel,lamella,lamely,lament,lameter,lametta,lamia,lamiger,lamiid,lamin,lamina,laminae,laminar,lamish,lamiter,lammas,lammer,lammock,lammy,lamnid,lamnoid,lamp,lampad,lampas,lamper,lampern,lampers,lampfly,lampful,lamping,lampion,lampist,lamplet,lamplit,lampman,lampoon,lamprey,lan,lanas,lanate,lanated,lanaz,lance,lanced,lancely,lancer,lances,lancet,lancha,land,landau,landed,lander,landing,landman,landmil,lane,lanete,laneway,laney,langaha,langca,langi,langite,langle,langoon,langsat,langued,languet,languid,languor,langur,laniary,laniate,lanific,lanioid,lanista,lank,lanket,lankily,lankish,lankly,lanky,lanner,lanolin,lanose,lansat,lanseh,lanson,lant,lantaca,lantern,lantum,lanugo,lanum,lanx,lanyard,lap,lapacho,lapcock,lapel,lapeler,lapful,lapillo,lapon,lappage,lapped,lapper,lappet,lapping,lapse,lapsed,lapser,lapsi,lapsing,lapwing,lapwork,laquear,laqueus,lar,larceny,larch,larchen,lard,larder,lardite,lardon,lardy,large,largely,largen,largess,largish,largo,lari,lariat,larick,larid,larigo,larigot,lariid,larin,larine,larixin,lark,larker,larking,larkish,larky,larmier,larnax,laroid,larrup,larry,larva,larvae,larval,larvate,larve,larvule,larynx,las,lasa,lascar,laser,lash,lasher,lask,lasket,lasque,lass,lasset,lassie,lasso,lassock,lassoer,last,lastage,laster,lasting,lastly,lastre,lasty,lat,lata,latah,latch,latcher,latchet,late,latebra,lated,lateen,lately,laten,latence,latency,latent,later,latera,laterad,lateral,latest,latex,lath,lathe,lathee,lathen,lather,lathery,lathing,lathy,latices,latigo,lation,latish,latitat,latite,latomy,latrant,latria,latrine,latro,latrobe,latron,latten,latter,lattice,latus,lauan,laud,lauder,laudist,laugh,laughee,laugher,laughy,lauia,laun,launce,launch,laund,launder,laundry,laur,laura,laurate,laurel,lauric,laurin,laurite,laurone,lauryl,lava,lavable,lavabo,lavacre,lavage,lavanga,lavant,lavaret,lavatic,lave,laveer,laver,lavic,lavish,lavolta,law,lawbook,lawful,lawing,lawish,lawk,lawless,lawlike,lawman,lawn,lawned,lawner,lawnlet,lawny,lawsuit,lawter,lawyer,lawyery,lawzy,lax,laxate,laxism,laxist,laxity,laxly,laxness,lay,layaway,layback,layboy,layer,layered,layery,layette,laying,layland,layman,layne,layoff,layout,layover,layship,laystow,lazar,lazaret,lazarly,laze,lazily,lazule,lazuli,lazy,lazyish,lea,leach,leacher,leachy,lead,leadage,leaded,leaden,leader,leadin,leading,leadman,leadoff,leadout,leadway,leady,leaf,leafage,leafboy,leafcup,leafdom,leafed,leafen,leafer,leafery,leafit,leaflet,leafy,league,leaguer,leak,leakage,leaker,leaky,leal,lealand,leally,lealty,leam,leamer,lean,leaner,leaning,leanish,leanly,leant,leap,leaper,leaping,leapt,lear,learn,learned,learner,learnt,lease,leaser,leash,leasing,leasow,least,leat,leath,leather,leatman,leave,leaved,leaven,leaver,leaves,leaving,leavy,leawill,leban,lebbek,lecama,lech,lecher,lechery,lechwe,leck,lecker,lectern,lection,lector,lectual,lecture,lecyth,led,lede,leden,ledge,ledged,ledger,ledging,ledgy,ledol,lee,leech,leecher,leeches,leed,leefang,leek,leekish,leeky,leep,leepit,leer,leerily,leerish,leery,lees,leet,leetman,leewan,leeward,leeway,leewill,left,leftish,leftism,leftist,leg,legacy,legal,legally,legate,legatee,legato,legator,legend,legenda,leger,leges,legged,legger,legging,leggy,leghorn,legible,legibly,legific,legion,legist,legit,legitim,leglen,legless,leglet,leglike,legman,legoa,legpull,legrope,legua,leguan,legume,legumen,legumin,lehr,lehrman,lehua,lei,leister,leisure,lek,lekach,lekane,lekha,leman,lemel,lemma,lemmata,lemming,lemnad,lemon,lemony,lempira,lemur,lemures,lemurid,lenad,lenard,lench,lend,lendee,lender,lene,length,lengthy,lenient,lenify,lenis,lenitic,lenity,lennow,leno,lens,lensed,lent,lenth,lentigo,lentil,lentisc,lentisk,lento,lentoid,lentor,lentous,lenvoi,lenvoy,leonine,leonite,leopard,leotard,lepa,leper,lepered,leporid,lepra,lepric,leproid,leproma,leprose,leprosy,leprous,leptid,leptite,leptome,lepton,leptus,lerot,lerp,lerret,lesche,lesion,lesiy,less,lessee,lessen,lesser,lessive,lessn,lesson,lessor,lest,lestrad,let,letch,letchy,letdown,lete,lethal,letoff,letten,letter,lettrin,lettuce,letup,leu,leuch,leucine,leucism,leucite,leuco,leucoid,leucoma,leucon,leucous,leucyl,leud,leuk,leuma,lev,levance,levant,levator,levee,level,leveler,levelly,lever,leverer,leveret,levers,levier,levin,levir,levity,levo,levulic,levulin,levy,levyist,lew,lewd,lewdly,lewis,lewth,lexia,lexical,lexicon,ley,leyland,leysing,li,liable,liaison,liana,liang,liar,liard,libant,libate,libber,libbet,libbra,libel,libelee,libeler,liber,liberal,liberty,libido,libken,libra,libral,library,librate,licca,license,lich,licham,lichen,licheny,lichi,licit,licitly,lick,licker,licking,licorn,licorne,lictor,lid,lidded,lidder,lidgate,lidless,lie,lied,lief,liege,liegely,lieger,lien,lienal,lienee,lienic,lienor,lier,lierne,lierre,liesh,lieu,lieue,lieve,life,lifeday,lifeful,lifelet,lifer,lifey,lifo,lift,lifter,lifting,liftman,ligable,ligas,ligate,ligator,ligger,light,lighten,lighter,lightly,ligne,lignify,lignin,lignite,lignone,lignose,lignum,ligula,ligular,ligule,ligulin,ligure,liin,lija,likable,like,likely,liken,liker,likin,liking,liknon,lilac,lilacin,lilacky,lile,lilied,lill,lilt,lily,lilyfy,lim,limacel,limacon,liman,limb,limbal,limbat,limbate,limbeck,limbed,limber,limbers,limbic,limbie,limbo,limbous,limbus,limby,lime,limeade,limeman,limen,limer,limes,limetta,limey,liminal,liming,limit,limital,limited,limiter,limma,limmer,limmock,limmu,limn,limner,limnery,limniad,limnite,limoid,limonin,limose,limous,limp,limper,limpet,limpid,limpily,limpin,limping,limpish,limpkin,limply,limpsy,limpy,limsy,limu,limulid,limy,lin,lina,linable,linaga,linage,linaloa,linalol,linch,linchet,linctus,lindane,linden,linder,lindo,line,linea,lineage,lineal,linear,lineate,linecut,lined,linelet,lineman,linen,liner,ling,linga,linge,lingel,linger,lingo,lingtow,lingua,lingual,linguet,lingula,lingy,linha,linhay,linie,linin,lining,linitis,liniya,linja,linje,link,linkage,linkboy,linked,linker,linking,linkman,links,linky,linn,linnet,lino,linolic,linolin,linon,linous,linoxin,linoxyn,linpin,linseed,linsey,lint,lintel,linten,linter,lintern,lintie,linty,linwood,liny,lion,lioncel,lionel,lioness,lionet,lionism,lionize,lionly,lip,lipa,liparid,lipase,lipemia,lipide,lipin,lipless,liplet,liplike,lipoid,lipoma,lipopod,liposis,lipped,lippen,lipper,lipping,lippy,lipuria,lipwork,liquate,liquefy,liqueur,liquid,liquidy,liquor,lira,lirate,lire,lirella,lis,lisere,lish,lisk,lisle,lisp,lisper,lispund,liss,lissom,lissome,list,listed,listel,listen,lister,listing,listred,lit,litany,litas,litch,litchi,lite,liter,literal,lith,lithe,lithely,lithi,lithia,lithic,lithify,lithite,lithium,litho,lithoid,lithous,lithy,litmus,litotes,litra,litster,litten,litter,littery,little,lituite,liturgy,litus,lituus,litz,livable,live,lived,livedo,lively,liven,liver,livered,livery,livid,lividly,livier,living,livor,livre,liwan,lixive,lizard,llama,llano,llautu,llyn,lo,loa,loach,load,loadage,loaded,loaden,loader,loading,loaf,loafer,loafing,loaflet,loam,loamily,loaming,loamy,loan,loaner,loanin,loath,loathe,loather,loathly,loave,lob,lobal,lobar,lobate,lobated,lobber,lobbish,lobby,lobbyer,lobcock,lobe,lobed,lobelet,lobelin,lobfig,lobing,lobiped,lobo,lobola,lobose,lobster,lobtail,lobular,lobule,lobworm,loca,locable,local,locale,locally,locanda,locate,locator,loch,lochage,lochan,lochia,lochial,lochus,lochy,loci,lock,lockage,lockbox,locked,locker,locket,lockful,locking,lockjaw,locklet,lockman,lockout,lockpin,lockram,lockup,locky,loco,locoism,locular,locule,loculus,locum,locus,locust,locusta,locutor,lod,lode,lodge,lodged,lodger,lodging,loess,loessal,loessic,lof,loft,lofter,loftily,lofting,loftman,lofty,log,loganin,logbook,logcock,loge,logeion,logeum,loggat,logged,logger,loggia,loggin,logging,loggish,loghead,logia,logic,logical,logie,login,logion,logium,loglet,loglike,logman,logoi,logos,logroll,logway,logwise,logwood,logwork,logy,lohan,lohoch,loimic,loin,loined,loir,loiter,loka,lokao,lokaose,loke,loket,lokiec,loll,loller,lollop,lollopy,lolly,loma,lombard,lomboy,loment,lomita,lommock,lone,lonely,long,longa,longan,longbow,longe,longear,longer,longfin,longful,longing,longish,longjaw,longly,longs,longue,longway,lontar,loo,looby,lood,loof,loofah,loofie,look,looker,looking,lookout,lookum,loom,loomer,loomery,looming,loon,loonery,looney,loony,loop,looper,loopful,looping,loopist,looplet,loopy,loose,loosely,loosen,looser,loosing,loosish,loot,looten,looter,lootie,lop,lope,loper,lophiid,lophine,loppard,lopper,loppet,lopping,loppy,lopseed,loquat,loquent,lora,loral,loran,lorate,lorcha,lord,lording,lordkin,lordlet,lordly,lordy,lore,loreal,lored,lori,loric,lorica,lorilet,lorimer,loriot,loris,lormery,lorn,loro,lorry,lors,lorum,lory,losable,lose,losel,loser,losh,losing,loss,lost,lot,lota,lotase,lote,lotic,lotion,lotment,lotrite,lots,lotter,lottery,lotto,lotus,lotusin,louch,loud,louden,loudish,loudly,louey,lough,louk,loukoum,loulu,lounder,lounge,lounger,loungy,loup,loupe,lour,lourdy,louse,lousily,louster,lousy,lout,louter,louther,loutish,louty,louvar,louver,lovable,lovably,lovage,love,loveful,lovely,loveman,lover,lovered,loverly,loving,low,lowa,lowan,lowbell,lowborn,lowboy,lowbred,lowdah,lowder,loweite,lower,lowerer,lowery,lowish,lowland,lowlily,lowly,lowmen,lowmost,lown,lowness,lownly,lowth,lowwood,lowy,lox,loxia,loxic,loxotic,loy,loyal,loyally,loyalty,lozenge,lozengy,lubber,lube,lubra,lubric,lubrify,lucanid,lucarne,lucban,luce,lucence,lucency,lucent,lucern,lucerne,lucet,lucible,lucid,lucida,lucidly,lucifee,lucific,lucigen,lucivee,luck,lucken,luckful,luckie,luckily,lucky,lucre,lucrify,lucule,lucumia,lucy,ludden,ludibry,ludo,lue,lues,luetic,lufbery,luff,lug,luge,luger,luggage,luggar,lugged,lugger,luggie,lugmark,lugsail,lugsome,lugworm,luhinga,luigino,luke,lukely,lulab,lull,lullaby,luller,lulu,lum,lumbago,lumbang,lumbar,lumber,lumen,luminal,lumine,lummox,lummy,lump,lumper,lumpet,lumpily,lumping,lumpish,lumpkin,lumpman,lumpy,luna,lunacy,lunar,lunare,lunary,lunate,lunatic,lunatum,lunch,luncher,lune,lunes,lunette,lung,lunge,lunged,lunger,lungful,lungi,lungie,lungis,lungy,lunn,lunoid,lunt,lunula,lunular,lunule,lunulet,lupe,lupeol,lupeose,lupine,lupinin,lupis,lupoid,lupous,lupulic,lupulin,lupulus,lupus,lura,lural,lurch,lurcher,lurdan,lure,lureful,lurer,lurg,lurid,luridly,lurk,lurker,lurky,lurrier,lurry,lush,lusher,lushly,lushy,lusk,lusky,lusory,lust,luster,lustful,lustily,lustra,lustral,lustrum,lusty,lut,lutany,lute,luteal,lutecia,lutein,lutelet,luteo,luteoma,luteous,luter,luteway,lutfisk,luthern,luthier,luting,lutist,lutose,lutrin,lutrine,lux,luxate,luxe,luxury,luxus,ly,lyam,lyard,lyceal,lyceum,lycid,lycopin,lycopod,lycosid,lyctid,lyddite,lydite,lye,lyery,lygaeid,lying,lyingly,lymph,lymphad,lymphy,lyncean,lynch,lyncher,lyncine,lynx,lyra,lyrate,lyrated,lyraway,lyre,lyreman,lyric,lyrical,lyrism,lyrist,lys,lysate,lyse,lysin,lysine,lysis,lysogen,lyssa,lyssic,lytic,lytta,lyxose,m,ma,maam,mabi,mabolo,mac,macabre,macaco,macadam,macan,macana,macao,macaque,macaw,macco,mace,maceman,macer,machan,machar,machete,machi,machila,machin,machine,machree,macies,mack,mackins,mackle,macle,macled,maco,macrame,macro,macron,macuca,macula,macular,macule,macuta,mad,madam,madame,madcap,madden,madder,madding,maddish,maddle,made,madefy,madhuca,madid,madling,madly,madman,madnep,madness,mado,madoqua,madrier,madrona,madship,maduro,madweed,madwort,mae,maenad,maestri,maestro,maffia,maffick,maffle,mafflin,mafic,mafoo,mafura,mag,magadis,magani,magas,mage,magenta,magged,maggle,maggot,maggoty,magi,magic,magical,magiric,magma,magnate,magnes,magnet,magneta,magneto,magnify,magnum,magot,magpie,magpied,magsman,maguari,maguey,maha,mahaleb,mahalla,mahant,mahar,maharao,mahatma,mahmal,mahmudi,mahoe,maholi,mahone,mahout,mahseer,mahua,mahuang,maid,maidan,maiden,maidish,maidism,maidkin,maidy,maiefic,maigre,maiid,mail,mailbag,mailbox,mailed,mailer,mailie,mailman,maim,maimed,maimer,maimon,main,mainly,mainour,mainpin,mains,maint,maintop,maioid,maire,maize,maizer,majagua,majesty,majo,majoon,major,makable,make,makedom,maker,makhzan,maki,making,makluk,mako,makuk,mal,mala,malacia,malacon,malady,malagma,malaise,malakin,malambo,malanga,malapi,malar,malaria,malarin,malate,malati,malax,malduck,male,malease,maleate,maleic,malella,maleo,malfed,mali,malic,malice,malicho,malign,malik,maline,malines,malism,malison,malist,malkin,mall,mallard,malleal,mallear,mallee,mallein,mallet,malleus,mallow,mallum,mallus,malm,malmsey,malmy,malo,malodor,malonic,malonyl,malouah,malpais,malt,maltase,malter,maltha,malting,maltman,maltose,malty,mamba,mambo,mamma,mammal,mammary,mammate,mammee,mammer,mammock,mammon,mammoth,mammula,mammy,mamo,man,mana,manacle,manage,managee,manager,manaism,manakin,manal,manas,manatee,manavel,manbird,manbot,manche,manchet,mancono,mancus,mand,mandala,mandant,mandate,mandil,mandola,mandom,mandora,mandore,mandra,mandrel,mandrin,mandua,mandyas,mane,maned,manege,manei,manent,manes,maness,maney,manful,mang,manga,mangal,mange,mangeao,mangel,manger,mangi,mangily,mangle,mangler,mango,mangona,mangue,mangy,manhead,manhole,manhood,mani,mania,maniac,manic,manid,manify,manikin,manila,manilla,manille,manioc,maniple,manism,manist,manito,maniu,manjak,mank,mankin,mankind,manless,manlet,manlike,manlily,manling,manly,manna,mannan,manner,manners,manness,mannide,mannie,mannify,manning,mannish,mannite,mannose,manny,mano,manoc,manomin,manor,manque,manred,manrent,manroot,manrope,mansard,manse,manship,mansion,manso,mant,manta,mantal,manteau,mantel,manter,mantes,mantic,mantid,mantis,mantle,mantled,mantlet,manto,mantoid,mantra,mantrap,mantua,manual,manuao,manuka,manul,manuma,manumea,manumit,manure,manurer,manus,manward,manway,manweed,manwise,many,manzana,manzil,mao,maomao,map,mapach,mapau,mapland,maple,mapo,mapper,mappist,mappy,mapwise,maqui,maquis,mar,marabou,maraca,maracan,marae,maral,marang,marara,mararie,marasca,maraud,marble,marbled,marbler,marbles,marbly,marc,marcel,march,marcher,marcid,marco,marconi,marcor,mardy,mare,maremma,marengo,marfire,margay,marge,margent,margin,margosa,marhala,maria,marid,marimba,marina,marine,mariner,mariola,maris,marish,marital,mark,marka,marked,marker,market,markhor,marking,markka,markman,markup,marl,marled,marler,marli,marlin,marline,marlite,marlock,marlpit,marly,marm,marmit,marmite,marmose,marmot,maro,marok,maroon,marplot,marque,marquee,marquis,marrano,marree,marrer,married,marrier,marron,marrot,marrow,marrowy,marry,marryer,marsh,marshal,marshy,marsoon,mart,martel,marten,martext,martial,martin,martite,martlet,martyr,martyry,maru,marvel,marver,mary,marybud,mas,masa,mascara,mascled,mascot,masculy,masdeu,mash,masha,mashal,masher,mashie,mashing,mashman,mashru,mashy,masjid,mask,masked,masker,maskoid,maslin,mason,masoned,masoner,masonic,masonry,masooka,masoola,masque,masquer,mass,massa,massage,masse,massel,masser,masseur,massier,massif,massily,massive,massoy,massula,massy,mast,mastaba,mastage,mastax,masted,master,mastery,mastful,mastic,mastiff,masting,mastman,mastoid,masty,masu,mat,mataco,matador,matai,matalan,matanza,matapan,matapi,matara,matax,match,matcher,matchy,mate,mately,mater,matey,math,mathes,matico,matin,matinal,matinee,mating,matins,matipo,matka,matless,matlow,matra,matral,matrass,matreed,matric,matris,matrix,matron,matross,matsu,matsuri,matta,mattaro,matte,matted,matter,mattery,matti,matting,mattock,mattoid,mattoir,mature,maturer,matweed,maty,matzo,matzoon,matzos,matzoth,mau,maud,maudle,maudlin,mauger,maugh,maul,mauler,mauley,mauling,maumet,maun,maund,maunder,maundy,maunge,mauther,mauve,mauvine,maux,mavis,maw,mawk,mawkish,mawky,mawp,maxilla,maxim,maxima,maximal,maximed,maximum,maximus,maxixe,maxwell,may,maya,maybe,maybush,maycock,mayday,mayfish,mayhap,mayhem,maynt,mayor,mayoral,maypop,maysin,mayten,mayweed,maza,mazame,mazard,maze,mazed,mazedly,mazeful,mazer,mazic,mazily,mazuca,mazuma,mazurka,mazut,mazy,mazzard,mbalolo,mbori,me,meable,mead,meader,meadow,meadowy,meager,meagre,meak,meal,mealer,mealies,mealily,mealman,mealy,mean,meander,meaned,meaner,meaning,meanish,meanly,meant,mease,measle,measled,measles,measly,measure,meat,meatal,meated,meatily,meatman,meatus,meaty,mecate,mecon,meconic,meconin,medal,medaled,medalet,meddle,meddler,media,mediacy,mediad,medial,median,mediant,mediate,medic,medical,medico,mediety,medimn,medimno,medino,medio,medium,medius,medlar,medley,medrick,medulla,medusal,medusan,meebos,meece,meed,meek,meeken,meekly,meered,meerkat,meese,meet,meeten,meeter,meeting,meetly,megabar,megaerg,megafog,megapod,megaron,megaton,megerg,megilp,megmho,megohm,megrim,mehalla,mehari,mehtar,meile,mein,meinie,meio,meiobar,meiosis,meiotic,meith,mel,mela,melada,melagra,melam,melamed,melange,melanic,melanin,melano,melasma,melch,meld,melder,meldrop,mele,melee,melena,melene,melenic,melic,melilot,meline,melisma,melitis,mell,mellate,mellay,meller,mellit,mellite,mellon,mellow,mellowy,melodia,melodic,melody,meloe,meloid,melon,melonry,melos,melosa,melt,meltage,melted,melter,melters,melting,melton,mem,member,membral,memento,meminna,memo,memoir,memoria,memory,men,menace,menacer,menacme,menage,menald,mend,mendee,mender,mending,mendole,mends,menfolk,meng,menhir,menial,meninx,menkind,mennom,mensa,mensal,mense,menses,mensk,mensual,mental,mentary,menthol,menthyl,mention,mentor,mentum,menu,meny,menyie,menzie,merbaby,mercal,mercer,mercery,merch,merchet,mercy,mere,merel,merely,merfold,merfolk,merge,merger,mergh,meriah,merice,meril,merism,merist,merit,merited,meriter,merk,merkhet,merkin,merl,merle,merlin,merlon,mermaid,merman,mero,merop,meropia,meros,merrily,merrow,merry,merse,mesa,mesad,mesail,mesal,mesally,mesange,mesarch,mescal,mese,mesem,mesenna,mesh,meshed,meshy,mesiad,mesial,mesian,mesic,mesilla,mesion,mesityl,mesne,meso,mesobar,mesode,mesodic,mesole,meson,mesonic,mesopic,mespil,mess,message,messan,messe,messer,messet,messily,messin,messing,messman,messor,messrs,messtin,messy,mestee,mester,mestiza,mestizo,mestome,met,meta,metad,metage,metal,metaler,metamer,metanym,metate,metayer,mete,metel,meteor,meter,methane,methene,mether,methid,methide,methine,method,methyl,metic,metier,metis,metochy,metonym,metope,metopic,metopon,metra,metreta,metrete,metria,metric,metrics,metrify,metrist,mettar,mettle,mettled,metusia,metze,meuse,meute,mew,meward,mewer,mewl,mewler,mezcal,mezuzah,mezzo,mho,mi,miamia,mian,miaow,miaower,mias,miasm,miasma,miasmal,miasmic,miaul,miauler,mib,mica,micate,mice,micelle,miche,micher,miching,micht,mick,mickle,mico,micrify,micro,microbe,microhm,micron,miction,mid,midday,midden,middle,middler,middy,mide,midge,midget,midgety,midgy,midiron,midland,midleg,midmain,midmorn,midmost,midnoon,midpit,midrash,midrib,midriff,mids,midship,midst,midtap,midvein,midward,midway,midweek,midwife,midwise,midyear,mien,miff,miffy,mig,might,mightnt,mighty,miglio,mignon,migrant,migrate,mihrab,mijl,mikado,mike,mikie,mil,mila,milady,milch,milcher,milchy,mild,milden,milder,mildew,mildewy,mildish,mildly,mile,mileage,miler,mileway,milfoil,milha,miliary,milieu,militia,milium,milk,milken,milker,milkily,milking,milkman,milksop,milky,mill,milla,millage,milldam,mille,milled,miller,millet,millful,milliad,millile,milline,milling,million,millman,milner,milo,milord,milpa,milreis,milsey,milsie,milt,milter,milty,milvine,mim,mima,mimbar,mimble,mime,mimeo,mimer,mimesis,mimetic,mimic,mimical,mimicry,mimine,mimly,mimmest,mimmock,mimmood,mimmoud,mimosis,mimp,mimsey,min,mina,minable,minar,minaret,minaway,mince,mincer,mincing,mind,minded,minder,mindful,minding,mine,miner,mineral,minery,mines,minette,ming,minge,mingle,mingler,mingy,minhag,minhah,miniate,minibus,minicam,minify,minikin,minim,minima,minimal,minimum,minimus,mining,minion,minish,minium,miniver,minivet,mink,minkery,minkish,minnie,minning,minnow,minny,mino,minoize,minor,minot,minster,mint,mintage,minter,mintman,minty,minuend,minuet,minus,minute,minuter,minutia,minx,minxish,miny,minyan,miqra,mir,mirach,miracle,mirador,mirage,miragy,mirate,mirbane,mird,mirdaha,mire,mirid,mirific,mirish,mirk,miro,mirror,mirrory,mirth,miry,mirza,misact,misadd,misaim,misally,misbias,misbill,misbind,misbode,misborn,misbusy,miscall,miscast,mischio,miscoin,miscook,miscrop,miscue,miscut,misdate,misdaub,misdeal,misdeed,misdeem,misdiet,misdo,misdoer,misdraw,mise,misease,misedit,miser,miserly,misery,misfare,misfile,misfire,misfit,misfond,misform,misgive,misgo,misgrow,mishap,mishmee,misjoin,miskeep,misken,miskill,misknow,misky,mislay,mislead,mislear,misled,mislest,mislike,mislive,mismade,mismake,mismate,mismove,misname,misobey,mispage,mispart,mispay,mispick,misplay,misput,misrate,misread,misrule,miss,missal,missay,misseem,missel,misset,missile,missing,mission,missis,missish,missive,misstay,misstep,missy,mist,mistake,mistbow,misted,mistell,mistend,mister,misterm,mistful,mistic,mistide,mistify,mistily,mistime,mistle,mistone,mistook,mistral,mistry,misturn,misty,misura,misuse,misuser,miswed,miswish,misword,misyoke,mite,miter,mitered,miterer,mitis,mitome,mitosis,mitotic,mitra,mitral,mitrate,mitre,mitrer,mitt,mitten,mitty,mity,miurus,mix,mixable,mixed,mixedly,mixen,mixer,mixhill,mixible,mixite,mixtion,mixture,mixy,mizmaze,mizzen,mizzle,mizzler,mizzly,mizzy,mneme,mnemic,mnesic,mnestic,mnioid,mo,moan,moanful,moaning,moat,mob,mobable,mobber,mobbish,mobbism,mobbist,mobby,mobcap,mobed,mobile,moble,moblike,mobship,mobsman,mobster,mocha,mochras,mock,mockado,mocker,mockery,mockful,mocmain,mocuck,modal,modally,mode,model,modeler,modena,modern,modest,modesty,modicum,modify,modish,modist,modiste,modius,modular,module,modulo,modulus,moellon,mofette,moff,mog,mogador,mogdad,moggan,moggy,mogo,moguey,moha,mohabat,mohair,mohar,mohel,moho,mohr,mohur,moider,moidore,moieter,moiety,moil,moiler,moiles,moiley,moiling,moineau,moio,moire,moise,moist,moisten,moistly,moisty,moit,moity,mojarra,mojo,moke,moki,moko,moksha,mokum,moky,mola,molal,molar,molary,molassy,molave,mold,molder,moldery,molding,moldy,mole,moleism,moler,molest,molimen,moline,molka,molland,molle,mollie,mollify,mollusk,molly,molman,moloid,moloker,molompi,molosse,molpe,molt,molten,molter,moly,mombin,momble,mome,moment,momenta,momism,momme,mommet,mommy,momo,mon,mona,monad,monadic,monaene,monal,monarch,monas,monase,monaxon,mone,monel,monepic,moner,moneral,moneran,moneric,moneron,monesia,money,moneyed,moneyer,mong,monger,mongery,mongler,mongrel,mongst,monial,moniker,monism,monist,monitor,monk,monkdom,monkery,monkess,monkey,monkish,monkism,monkly,monny,mono,monoazo,monocle,monocot,monodic,monody,monoid,monomer,mononch,monont,mononym,monose,monotic,monsoon,monster,montage,montana,montane,montant,monte,montem,month,monthly,monthon,montjoy,monton,monture,moo,mooch,moocha,moocher,mood,mooder,moodily,moodish,moodle,moody,mooing,mool,moolet,mools,moolum,moon,moonack,mooned,mooner,moonery,mooneye,moonily,mooning,moonish,moonite,moonja,moonjah,moonlet,moonlit,moonman,moonset,moonway,moony,moop,moor,moorage,mooring,moorish,moorman,moorn,moorpan,moors,moorup,moory,moosa,moose,moosey,moost,moot,mooter,mooth,mooting,mootman,mop,mopane,mope,moper,moph,mophead,moping,mopish,mopla,mopper,moppet,moppy,mopsy,mopus,mor,mora,moraine,moral,morale,morally,morals,morass,morassy,morat,morate,moray,morbid,morbify,mordant,mordent,mordore,more,moreen,moreish,morel,morella,morello,mores,morfrey,morg,morga,morgan,morgay,morgen,morglay,morgue,moric,moriche,morin,morinel,morion,morkin,morlop,mormaor,mormo,mormon,mormyr,mormyre,morn,morne,morned,morning,moro,moroc,morocco,moron,moroncy,morong,moronic,moronry,morose,morosis,morph,morphea,morphew,morphia,morphic,morphon,morris,morrow,morsal,morse,morsel,morsing,morsure,mort,mortal,mortar,mortary,morth,mortier,mortify,mortise,morula,morular,morule,morvin,morwong,mosaic,mosaist,mosette,mosey,mosker,mosque,moss,mossed,mosser,mossery,mossful,mossy,most,moste,mostly,mot,mote,moted,motel,moter,motet,motey,moth,mothed,mother,mothery,mothy,motif,motific,motile,motion,motive,motley,motmot,motor,motored,motoric,motory,mott,motte,mottle,mottled,mottler,motto,mottoed,motyka,mou,mouche,moud,moudie,moudy,mouflon,mouille,moujik,moul,mould,moulded,moule,moulin,mouls,moulter,mouly,mound,moundy,mount,mounted,mounter,moup,mourn,mourner,mouse,mouser,mousery,mousey,mousily,mousing,mousle,mousmee,mousse,moustoc,mousy,mout,moutan,mouth,mouthed,mouther,mouthy,mouton,mouzah,movable,movably,movant,move,mover,movie,moving,mow,mowable,mowana,mowburn,mowch,mowcht,mower,mowha,mowie,mowing,mowland,mown,mowra,mowrah,mowse,mowt,mowth,moxa,moy,moyen,moyenne,moyite,moyle,moyo,mozing,mpret,mu,muang,mubarat,mucago,mucaro,mucedin,much,muchly,mucic,mucid,mucific,mucigen,mucin,muck,mucker,mucket,muckite,muckle,muckman,muckna,mucksy,mucky,mucluc,mucoid,muconic,mucopus,mucor,mucosa,mucosal,mucose,mucous,mucro,mucus,mucusin,mud,mudar,mudbank,mudcap,mudd,mudde,mudden,muddify,muddily,mudding,muddish,muddle,muddler,muddy,mudee,mudfish,mudflow,mudhead,mudhole,mudir,mudiria,mudland,mudlark,mudless,mudra,mudsill,mudweed,mudwort,muermo,muezzin,muff,muffed,muffet,muffin,muffish,muffle,muffled,muffler,mufflin,muffy,mufti,mufty,mug,muga,mugful,mugg,mugger,mugget,muggily,muggins,muggish,muggles,muggy,mugient,mugweed,mugwort,mugwump,muid,muir,muist,mukluk,muktar,mukti,mulatta,mulatto,mulch,mulcher,mulct,mulder,mule,muleman,muleta,muletta,muley,mulga,mulier,mulish,mulism,mulita,mulk,mull,mulla,mullah,mullar,mullein,muller,mullet,mullets,mulley,mullid,mullion,mullite,mullock,mulloid,mulmul,mulse,mulsify,mult,multum,multure,mum,mumble,mumbler,mummer,mummery,mummick,mummied,mummify,mumming,mummy,mumness,mump,mumper,mumpish,mumps,mun,munch,muncher,munchet,mund,mundane,mundic,mundify,mundil,mundle,mung,munga,munge,mungey,mungo,mungofa,munguba,mungy,munific,munity,munj,munjeet,munnion,munshi,munt,muntin,muntjac,mura,murage,mural,muraled,murally,murchy,murder,murdrum,mure,murex,murexan,murga,murgavi,murgeon,muriate,muricid,murid,murine,murinus,muriti,murium,murk,murkily,murkish,murkly,murky,murlin,murly,murmur,murphy,murra,murrain,murre,murrey,murrina,murshid,muruxi,murva,murza,musal,musang,musar,muscade,muscat,muscid,muscle,muscled,muscly,muscoid,muscone,muscose,muscot,muscovy,muscule,muse,mused,museful,museist,muser,musery,musette,museum,mush,musha,mushaa,mushed,musher,mushily,mushla,mushru,mushy,music,musical,musico,musie,musily,musimon,musing,musk,muskat,muskeg,musket,muskie,muskish,muskrat,musky,muslin,musnud,musquaw,musrol,muss,mussal,mussel,mussily,mussuk,mussy,must,mustang,mustard,mustee,muster,mustify,mustily,mustnt,musty,muta,mutable,mutably,mutage,mutant,mutase,mutate,mutch,mute,mutedly,mutely,muth,mutic,mutiny,mutism,mutist,mutive,mutsje,mutt,mutter,mutton,muttony,mutual,mutuary,mutule,mutuum,mux,muyusa,muzhik,muzz,muzzily,muzzle,muzzler,muzzy,my,myal,myalgia,myalgic,myalism,myall,myarian,myatony,mycele,mycelia,mycoid,mycose,mycosin,mycosis,mycotic,mydine,myelic,myelin,myeloic,myeloid,myeloma,myelon,mygale,mygalid,myiasis,myiosis,myitis,mykiss,mymarid,myna,myocele,myocyte,myogen,myogram,myoid,myology,myoma,myomere,myoneme,myope,myophan,myopia,myopic,myops,myopy,myosin,myosis,myosote,myotic,myotome,myotomy,myotony,myowun,myoxine,myrcene,myrcia,myriad,myriare,myrica,myricin,myricyl,myringa,myron,myronic,myrosin,myrrh,myrrhed,myrrhic,myrrhol,myrrhy,myrtal,myrtle,myrtol,mysel,myself,mysell,mysid,mysoid,mysost,myst,mystax,mystery,mystes,mystic,mystify,myth,mythify,mythism,mythist,mythize,mythos,mythus,mytilid,myxa,myxemia,myxo,myxoid,myxoma,myxopod,myzont,n,na,naa,naam,nab,nabak,nabber,nabk,nabla,nable,nabob,nabobry,nabs,nacarat,nace,nacelle,nach,nachani,nacket,nacre,nacred,nacrine,nacrite,nacrous,nacry,nadder,nadir,nadiral,nae,naebody,naegate,nael,naether,nag,naga,nagaika,nagana,nagara,nagger,naggin,nagging,naggish,naggle,naggly,naggy,naght,nagmaal,nagman,nagnag,nagnail,nagor,nagsman,nagster,nagual,naiad,naiant,naid,naif,naifly,naig,naigie,naik,nail,nailbin,nailer,nailery,nailing,nailrod,naily,nain,nainsel,naio,naipkin,nairy,nais,naish,naither,naive,naively,naivete,naivety,nak,nake,naked,nakedly,naker,nakhod,nakhoda,nako,nakong,nakoo,nallah,nam,namable,namaqua,namaz,namda,name,namely,namer,naming,nammad,nan,nana,nancy,nandi,nandine,nandow,nandu,nane,nanes,nanga,nanism,nankeen,nankin,nanny,nanoid,nanpie,nant,nantle,naology,naos,nap,napa,napal,napalm,nape,napead,naperer,napery,naphtha,naphtho,naphtol,napkin,napless,napoo,nappe,napped,napper,napping,nappy,napron,napu,nar,narcism,narcist,narcoma,narcose,narcous,nard,nardine,nardoo,nares,nargil,narial,naric,narica,narine,nark,narky,narr,narra,narras,narrate,narrow,narrowy,narthex,narwhal,nary,nasab,nasal,nasalis,nasally,nasard,nascent,nasch,nash,nashgab,nashgob,nasi,nasial,nasion,nasitis,nasrol,nast,nastic,nastika,nastily,nasty,nasus,nasute,nasutus,nat,nataka,natal,natals,natant,natator,natch,nates,nathe,nather,nation,native,natr,natrium,natron,natter,nattily,nattle,natty,natuary,natural,nature,naucrar,nauger,naught,naughty,naumk,naunt,nauntle,nausea,naut,nautch,nauther,nautic,nautics,naval,navally,navar,navarch,nave,navel,naveled,navet,navette,navew,navite,navvy,navy,naw,nawab,nawt,nay,nayaur,naysay,nayward,nayword,naze,nazim,nazir,ne,nea,neal,neanic,neap,neaped,nearby,nearest,nearish,nearly,neat,neaten,neath,neatify,neatly,neb,neback,nebbed,nebbuck,nebbuk,nebby,nebel,nebris,nebula,nebulae,nebular,nebule,neck,neckar,necked,necker,neckful,necking,necklet,necktie,necrose,nectar,nectary,nedder,neddy,nee,neebor,neebour,need,needer,needful,needham,needily,needing,needle,needled,needler,needles,needly,needs,needy,neeger,neeld,neele,neem,neep,neepour,neer,neese,neet,neetup,neeze,nef,nefast,neffy,neftgil,negate,negator,neger,neglect,negrine,negro,negus,nei,neif,neigh,neigher,neiper,neist,neither,nekton,nelson,nema,nematic,nemeses,nemesic,nemoral,nenta,neo,neocyte,neogamy,neolith,neology,neon,neonate,neorama,neossin,neoteny,neotype,neoza,nep,neper,nephele,nephesh,nephew,nephria,nephric,nephron,nephros,nepman,nepotal,nepote,nepotic,nereite,nerine,neritic,nerval,nervate,nerve,nerver,nervid,nervily,nervine,nerving,nervish,nervism,nervose,nervous,nervule,nervure,nervy,nese,nesh,neshly,nesiote,ness,nest,nestage,nester,nestful,nestle,nestler,nesty,net,netball,netbush,netcha,nete,neter,netful,neth,nether,neti,netleaf,netlike,netman,netop,netsman,netsuke,netted,netter,netting,nettle,nettler,nettly,netty,netwise,network,neuma,neume,neumic,neurad,neural,neurale,neuric,neurin,neurine,neurism,neurite,neuroid,neuroma,neuron,neurone,neurula,neuter,neutral,neutron,neve,nevel,never,nevo,nevoid,nevoy,nevus,new,newcal,newcome,newel,newelty,newing,newings,newish,newly,newness,news,newsboy,newsful,newsman,newsy,newt,newtake,newton,nexal,next,nextly,nexum,nexus,neyanda,ngai,ngaio,ngapi,ni,niacin,niata,nib,nibbana,nibbed,nibber,nibble,nibbler,nibby,niblick,niblike,nibong,nibs,nibsome,nice,niceish,nicely,nicety,niche,nicher,nick,nickel,nicker,nickey,nicking,nickle,nicky,nicolo,nicotia,nicotic,nictate,nid,nidal,nidana,niddick,niddle,nide,nidge,nidget,nidgety,nidi,nidify,niding,nidor,nidulus,nidus,niece,nielled,niello,niepa,nieve,nieveta,nife,niffer,nific,nifle,nifling,nifty,nig,niggard,nigger,niggery,niggle,niggler,niggly,nigh,nighly,night,nighted,nightie,nightly,nights,nignay,nignye,nigori,nigre,nigrify,nigrine,nigrous,nigua,nikau,nil,nilgai,nim,nimb,nimbed,nimbi,nimble,nimbly,nimbose,nimbus,nimiety,niminy,nimious,nimmer,nimshi,nincom,nine,ninepin,nineted,ninety,ninny,ninon,ninth,ninthly,nintu,ninut,niobate,niobic,niobite,niobium,niobous,niog,niota,nip,nipa,nipper,nippers,nippily,nipping,nipple,nippy,nipter,nirles,nirvana,nisei,nishiki,nisnas,nispero,nisse,nisus,nit,nitch,nitency,niter,nitered,nither,nithing,nitid,nito,niton,nitrate,nitric,nitride,nitrify,nitrile,nitrite,nitro,nitrous,nitryl,nitter,nitty,nitwit,nival,niveous,nix,nixie,niyoga,nizam,nizamut,nizy,njave,no,noa,nob,nobber,nobbily,nobble,nobbler,nobbut,nobby,noble,nobley,nobly,nobody,nobs,nocake,nocent,nock,nocket,nocktat,noctuid,noctule,nocturn,nocuity,nocuous,nod,nodal,nodated,nodder,nodding,noddle,noddy,node,noded,nodi,nodiak,nodical,nodose,nodous,nodular,nodule,noduled,nodulus,nodus,noel,noetic,noetics,nog,nogada,nogal,noggen,noggin,nogging,noghead,nohow,noil,noilage,noiler,noily,noint,noir,noise,noisily,noisome,noisy,nokta,noll,nolle,nolo,noma,nomad,nomadic,nomancy,nomarch,nombril,nome,nomial,nomic,nomina,nominal,nominee,nominy,nomism,nomisma,nomos,non,nonacid,nonact,nonage,nonagon,nonaid,nonair,nonane,nonary,nonbase,nonce,noncock,noncom,noncome,noncon,nonda,nondo,none,nonego,nonene,nonent,nonepic,nones,nonet,nonevil,nonfact,nonfarm,nonfat,nonfood,nonform,nonfrat,nongas,nongod,nongold,nongray,nongrey,nonhero,nonic,nonion,nonius,nonjury,nonlife,nonly,nonnant,nonnat,nonoic,nonoily,nonomad,nonpaid,nonpar,nonpeak,nonplus,nonpoet,nonport,nonrun,nonsale,nonsane,nonself,nonsine,nonskid,nonslip,nonstop,nonsuit,nontan,nontax,nonterm,nonuple,nonuse,nonuser,nonwar,nonya,nonyl,nonylic,nonzero,noodle,nook,nooked,nookery,nooking,nooklet,nooky,noology,noon,noonday,nooning,noonlit,noop,noose,nooser,nopal,nopalry,nope,nor,norard,norate,noreast,norelin,norgine,nori,noria,norie,norimon,norite,norland,norm,norma,normal,norsel,north,norther,norward,norwest,nose,nosean,nosed,nosegay,noser,nosey,nosine,nosing,nosism,nostic,nostril,nostrum,nosy,not,notable,notably,notaeal,notaeum,notal,notan,notary,notate,notator,notch,notched,notchel,notcher,notchy,note,noted,notedly,notekin,notelet,noter,nother,nothing,nothous,notice,noticer,notify,notion,notitia,notour,notself,notum,nougat,nought,noun,nounal,nounize,noup,nourice,nourish,nous,nouther,nova,novalia,novate,novator,novcic,novel,novelet,novella,novelly,novelry,novelty,novem,novena,novene,novice,novity,now,nowaday,noway,noways,nowed,nowel,nowhat,nowhen,nowhere,nowhit,nowise,nowness,nowt,nowy,noxa,noxal,noxally,noxious,noy,noyade,noyau,nozzle,nozzler,nth,nu,nuance,nub,nubbin,nubble,nubbly,nubby,nubia,nubile,nucal,nucha,nuchal,nucin,nucleal,nuclear,nuclei,nuclein,nucleon,nucleus,nuclide,nucule,nuculid,nudate,nuddle,nude,nudely,nudge,nudger,nudiped,nudish,nudism,nudist,nudity,nugator,nuggar,nugget,nuggety,nugify,nuke,nul,null,nullah,nullify,nullism,nullity,nullo,numb,number,numbing,numble,numbles,numbly,numda,numdah,numen,numeral,numero,nummary,nummi,nummus,numud,nun,nunatak,nunbird,nunch,nuncio,nuncle,nundine,nunhood,nunky,nunlet,nunlike,nunnari,nunnery,nunni,nunnify,nunnish,nunship,nuptial,nuque,nuraghe,nurhag,nurly,nurse,nurser,nursery,nursing,nursle,nursy,nurture,nusfiah,nut,nutant,nutate,nutcake,nutgall,nuthook,nutlet,nutlike,nutmeg,nutpick,nutria,nutrice,nutrify,nutseed,nutted,nutter,nuttery,nuttily,nutting,nuttish,nutty,nuzzer,nuzzle,nyanza,nye,nylast,nylon,nymil,nymph,nympha,nymphae,nymphal,nymphet,nymphic,nymphid,nymphly,nyxis,o,oadal,oaf,oafdom,oafish,oak,oaken,oaklet,oaklike,oakling,oakum,oakweb,oakwood,oaky,oam,oar,oarage,oarcock,oared,oarfish,oarhole,oarial,oaric,oaritic,oaritis,oarium,oarless,oarlike,oarlock,oarlop,oarman,oarsman,oarweed,oary,oasal,oasean,oases,oasis,oasitic,oast,oat,oatbin,oatcake,oatear,oaten,oatfowl,oath,oathay,oathed,oathful,oathlet,oatland,oatlike,oatmeal,oatseed,oaty,oban,obclude,obe,obeah,obeche,obeism,obelia,obeliac,obelial,obelion,obelisk,obelism,obelize,obelus,obese,obesely,obesity,obex,obey,obeyer,obi,obispo,obit,obitual,object,objure,oblate,obley,oblige,obliged,obligee,obliger,obligor,oblique,oblong,obloquy,oboe,oboist,obol,obolary,obole,obolet,obolus,oboval,obovate,obovoid,obscene,obscure,obsede,obsequy,observe,obsess,obtain,obtect,obtest,obtrude,obtund,obtuse,obverse,obvert,obviate,obvious,obvolve,ocarina,occamy,occiput,occlude,occluse,occult,occupy,occur,ocean,oceaned,oceanet,oceanic,ocellar,ocelli,ocellus,oceloid,ocelot,och,ochava,ochavo,ocher,ochery,ochone,ochrea,ochro,ochroid,ochrous,ocht,ock,oclock,ocote,ocque,ocracy,ocrea,ocreate,octad,octadic,octagon,octan,octane,octant,octapla,octarch,octary,octaval,octave,octavic,octavo,octene,octet,octic,octine,octoad,octoate,octofid,octoic,octoid,octonal,octoon,octoped,octopi,octopod,octopus,octose,octoyl,octroi,octroy,octuor,octuple,octuply,octyl,octyne,ocuby,ocular,oculary,oculate,oculist,oculus,od,oda,odacoid,odal,odalisk,odaller,odalman,odd,oddish,oddity,oddlegs,oddly,oddman,oddment,oddness,odds,oddsman,ode,odel,odelet,odeon,odeum,odic,odinite,odious,odist,odium,odology,odontic,odoom,odor,odorant,odorate,odored,odorful,odorize,odorous,odso,odum,odyl,odylic,odylism,odylist,odylize,oe,oecist,oecus,oenin,oenolin,oenomel,oer,oersted,oes,oestrid,oestrin,oestrum,oestrus,of,off,offal,offbeat,offcast,offcome,offcut,offend,offense,offer,offeree,offerer,offeror,offhand,office,officer,offing,offish,offlet,offlook,offscum,offset,offtake,offtype,offward,oflete,oft,often,oftens,ofter,oftest,oftly,oftness,ofttime,ogaire,ogam,ogamic,ogdoad,ogdoas,ogee,ogeed,ogham,oghamic,ogival,ogive,ogived,ogle,ogler,ogmic,ogre,ogreish,ogreism,ogress,ogrish,ogrism,ogtiern,ogum,oh,ohelo,ohia,ohm,ohmage,ohmic,oho,ohoy,oidioid,oii,oil,oilbird,oilcan,oilcoat,oilcup,oildom,oiled,oiler,oilery,oilfish,oilhole,oilily,oilless,oillet,oillike,oilman,oilseed,oilskin,oilway,oily,oilyish,oime,oinomel,oint,oisin,oitava,oka,okapi,okee,okenite,oket,oki,okia,okonite,okra,okrug,olam,olamic,old,olden,older,oldish,oldland,oldness,oldster,oldwife,oleana,olease,oleate,olefin,olefine,oleic,olein,olena,olenid,olent,oleo,oleose,oleous,olfact,olfacty,oliban,olid,oligist,olio,olitory,oliva,olivary,olive,olived,olivet,olivil,olivile,olivine,olla,ollamh,ollapod,ollock,olm,ologist,ology,olomao,olona,oloroso,olpe,oltonde,oltunna,olycook,olykoek,om,omagra,omalgia,omao,omasum,omber,omega,omegoid,omelet,omen,omened,omental,omentum,omer,omicron,omina,ominous,omit,omitis,omitter,omlah,omneity,omniana,omnibus,omnific,omnify,omnist,omnium,on,ona,onager,onagra,onanism,onanist,onca,once,oncetta,oncia,oncin,oncome,oncosis,oncost,ondatra,ondine,ondy,one,onefold,onegite,onehow,oneiric,oneism,onement,oneness,oner,onerary,onerous,onery,oneself,onetime,oneyer,onfall,onflow,ongaro,ongoing,onicolo,onion,onionet,oniony,onium,onkos,onlay,onlepy,onliest,onlook,only,onmarch,onrush,ons,onset,onshore,onside,onsight,onstand,onstead,onsweep,ontal,onto,onus,onward,onwards,onycha,onychia,onychin,onym,onymal,onymity,onymize,onymous,onymy,onyx,onyxis,onza,ooblast,oocyst,oocyte,oodles,ooecial,ooecium,oofbird,ooftish,oofy,oogamy,oogeny,ooglea,oogone,oograph,ooid,ooidal,oolak,oolemma,oolite,oolitic,oolly,oologic,oology,oolong,oomancy,oometer,oometry,oons,oont,oopak,oophore,oophyte,ooplasm,ooplast,oopod,oopodal,oorali,oord,ooscope,ooscopy,oosperm,oospore,ootheca,ootid,ootype,ooze,oozily,oozooid,oozy,opacate,opacify,opacite,opacity,opacous,opah,opal,opaled,opaline,opalish,opalize,opaloid,opaque,ope,opelet,open,opener,opening,openly,opera,operae,operand,operant,operate,opercle,operose,ophic,ophioid,ophite,ophitic,ophryon,opianic,opianyl,opiate,opiatic,opiism,opinant,opine,opiner,opinion,opium,opossum,oppidan,oppose,opposed,opposer,opposit,oppress,oppugn,opsonic,opsonin,opsy,opt,optable,optably,optant,optate,optic,optical,opticon,optics,optimal,optime,optimum,option,optive,opulent,opulus,opus,oquassa,or,ora,orach,oracle,orad,orage,oral,oraler,oralism,oralist,orality,oralize,orally,oralogy,orang,orange,oranger,orangey,orant,orarian,orarion,orarium,orary,orate,oration,orator,oratory,oratrix,orb,orbed,orbic,orbical,orbicle,orbific,orbit,orbital,orbitar,orbite,orbless,orblet,orby,orc,orcanet,orcein,orchard,orchat,orchel,orchic,orchid,orchil,orcin,orcinol,ordain,ordeal,order,ordered,orderer,orderly,ordinal,ordinar,ordinee,ordines,ordu,ordure,ore,oread,orectic,orellin,oreman,orenda,oreweed,orewood,orexis,orf,orfgild,organ,organal,organdy,organer,organic,organon,organry,organum,orgasm,orgeat,orgia,orgiac,orgiacs,orgiasm,orgiast,orgic,orgue,orgy,orgyia,oribi,oriel,oriency,orient,orifice,oriform,origan,origin,orignal,orihon,orillon,oriole,orison,oristic,orle,orlean,orlet,orlo,orlop,ormer,ormolu,orna,ornate,ornery,ornis,ornoite,oroanal,orogen,orogeny,oroide,orology,oronoco,orotund,orphan,orpheon,orpheum,orphrey,orpine,orrery,orrhoid,orris,orsel,orselle,ort,ortalid,ortet,orthal,orthian,orthic,orthid,orthite,ortho,orthose,orthron,ortiga,ortive,ortolan,ortygan,ory,oryssid,os,osamin,osamine,osazone,oscella,oscheal,oscin,oscine,oscnode,oscular,oscule,osculum,ose,osela,oshac,oside,osier,osiered,osiery,osmate,osmatic,osmesis,osmetic,osmic,osmin,osmina,osmious,osmium,osmose,osmosis,osmotic,osmous,osmund,osone,osophy,osprey,ossal,osse,ossein,osselet,osseous,ossicle,ossific,ossify,ossuary,osteal,ostein,ostemia,ostent,osteoid,osteoma,ostial,ostiary,ostiate,ostiole,ostitis,ostium,ostmark,ostosis,ostrich,otalgia,otalgic,otalgy,otarian,otarine,otary,otate,other,othmany,otiant,otiatry,otic,otidine,otidium,otiose,otitic,otitis,otkon,otocyst,otolite,otolith,otology,otosis,ototomy,ottar,otter,otterer,otto,oturia,ouabain,ouabaio,ouabe,ouakari,ouch,ouenite,ouf,ough,ought,oughtnt,oukia,oulap,ounce,ounds,ouphe,ouphish,our,ourie,ouroub,ours,ourself,oust,ouster,out,outact,outage,outarde,outask,outawe,outback,outbake,outban,outbar,outbark,outbawl,outbeam,outbear,outbeg,outbent,outbid,outblot,outblow,outbond,outbook,outborn,outbow,outbowl,outbox,outbrag,outbray,outbred,outbud,outbulk,outburn,outbuy,outbuzz,outby,outcant,outcase,outcast,outcity,outcome,outcrop,outcrow,outcry,outcull,outcure,outcut,outdare,outdate,outdo,outdoer,outdoor,outdraw,outdure,outeat,outecho,outed,outedge,outen,outer,outerly,outeye,outeyed,outface,outfall,outfame,outfast,outfawn,outfeat,outfish,outfit,outflow,outflue,outflux,outfly,outfold,outfool,outfoot,outform,outfort,outgain,outgame,outgang,outgas,outgate,outgaze,outgive,outglad,outglow,outgnaw,outgo,outgoer,outgone,outgrin,outgrow,outgun,outgush,outhaul,outhear,outheel,outher,outhire,outhiss,outhit,outhold,outhowl,outhue,outhunt,outhurl,outhut,outhymn,outing,outish,outjazz,outjest,outjet,outjinx,outjump,outjut,outkick,outkill,outking,outkiss,outknee,outlaid,outland,outlash,outlast,outlaw,outlay,outlean,outleap,outler,outlet,outlie,outlier,outlimb,outlimn,outline,outlip,outlive,outlook,outlord,outlove,outlung,outly,outman,outmate,outmode,outmost,outmove,outname,outness,outnook,outoven,outpace,outpage,outpart,outpass,outpath,outpay,outpeal,outpeep,outpeer,outpick,outpipe,outpity,outplan,outplay,outplod,outplot,outpoll,outpomp,outpop,outport,outpost,outpour,outpray,outpry,outpull,outpurl,outpush,output,outrace,outrage,outrail,outrank,outrant,outrap,outrate,outrave,outray,outre,outread,outrede,outrick,outride,outrig,outring,outroar,outroll,outroot,outrove,outrow,outrun,outrush,outsail,outsay,outsea,outseam,outsee,outseek,outsell,outsert,outset,outshot,outshow,outshut,outside,outsift,outsigh,outsin,outsing,outsit,outsize,outskip,outsoar,outsole,outspan,outspin,outspit,outspue,outstay,outstep,outsuck,outsulk,outsum,outswim,outtalk,outtask,outtear,outtell,outtire,outtoil,outtop,outtrot,outturn,outvie,outvier,outvote,outwait,outwake,outwale,outwalk,outwall,outwar,outward,outwash,outwave,outwear,outweed,outweep,outwell,outwent,outwick,outwile,outwill,outwind,outwing,outwish,outwit,outwith,outwoe,outwood,outword,outwore,outwork,outworn,outyard,outyell,outyelp,outzany,ouzel,ova,oval,ovalish,ovalize,ovally,ovaloid,ovant,ovarial,ovarian,ovarin,ovarium,ovary,ovate,ovated,ovately,ovation,oven,ovenful,ovenly,ovenman,over,overact,overage,overall,overapt,overarm,overawe,overawn,overbet,overbid,overbig,overbit,overbow,overbuy,overby,overcap,overcow,overcoy,overcry,overcup,overcut,overdo,overdry,overdue,overdye,overeat,overegg,overeye,overfag,overfar,overfat,overfed,overfee,overfew,overfit,overfix,overfly,overget,overgo,overgod,overgun,overhit,overhot,overink,overjob,overjoy,overlap,overlax,overlay,overleg,overlie,overlip,overlow,overly,overman,overmix,overnet,overnew,overpay,overpet,overply,overpot,overrim,overrun,oversad,oversea,oversee,overset,oversew,oversot,oversow,overt,overtax,overtip,overtly,overtoe,overtop,overuse,overway,overweb,overwet,overwin,ovest,ovey,ovicell,ovicide,ovicyst,oviduct,oviform,ovigerm,ovile,ovine,ovinia,ovipara,ovisac,ovism,ovist,ovistic,ovocyte,ovoid,ovoidal,ovolo,ovology,ovular,ovulary,ovulate,ovule,ovulist,ovum,ow,owd,owe,owelty,ower,owerby,owght,owing,owk,owl,owldom,owler,owlery,owlet,owlhead,owling,owlish,owlism,owllike,owly,own,owner,ownhood,ownness,ownself,owrehip,owrelay,owse,owsen,owser,owtchah,ox,oxacid,oxalan,oxalate,oxalic,oxalite,oxalyl,oxamate,oxamic,oxamid,oxamide,oxan,oxanate,oxane,oxanic,oxazine,oxazole,oxbane,oxberry,oxbird,oxbiter,oxblood,oxbow,oxboy,oxbrake,oxcart,oxcheek,oxea,oxeate,oxen,oxeote,oxer,oxetone,oxeye,oxfly,oxgang,oxgoad,oxhead,oxheal,oxheart,oxhide,oxhoft,oxhorn,oxhouse,oxhuvud,oxidant,oxidase,oxidate,oxide,oxidic,oxidize,oximate,oxime,oxland,oxlike,oxlip,oxman,oxonic,oxonium,oxozone,oxphony,oxreim,oxshoe,oxskin,oxtail,oxter,oxwort,oxy,oxyacid,oxygas,oxygen,oxyl,oxymel,oxyntic,oxyopia,oxysalt,oxytone,oyapock,oyer,oyster,ozena,ozonate,ozone,ozoned,ozonic,ozonide,ozonify,ozonize,ozonous,ozophen,ozotype,p,pa,paal,paar,paauw,pabble,pablo,pabouch,pabular,pabulum,pac,paca,pacable,pacate,pacay,pacaya,pace,paced,pacer,pachak,pachisi,pacific,pacify,pack,package,packer,packery,packet,packly,packman,packway,paco,pact,paction,pad,padder,padding,paddle,paddled,paddler,paddock,paddy,padella,padfoot,padge,padle,padlike,padlock,padnag,padre,padtree,paean,paegel,paegle,paenula,paeon,paeonic,paga,pagan,paganic,paganly,paganry,page,pageant,pagedom,pageful,pager,pagina,paginal,pagoda,pagrus,pagurid,pagus,pah,paha,pahi,pahlavi,pahmi,paho,pahutan,paigle,paik,pail,pailful,pailou,pain,pained,painful,paining,paint,painted,painter,painty,paip,pair,paired,pairer,pais,paisa,paiwari,pajama,pajock,pakchoi,pakeha,paktong,pal,palace,palaced,paladin,palaite,palama,palame,palanka,palar,palas,palatal,palate,palated,palatic,palaver,palay,palazzi,palch,pale,palea,paleate,paled,palely,paleola,paler,palet,paletot,palette,paletz,palfrey,palgat,pali,palikar,palila,palinal,paling,palisfy,palish,palkee,pall,palla,pallae,pallah,pallall,palled,pallet,palli,pallial,pallid,pallion,pallium,pallone,pallor,pally,palm,palma,palmad,palmar,palmary,palmate,palmed,palmer,palmery,palmful,palmist,palmite,palmito,palmo,palmula,palmus,palmy,palmyra,palolo,palp,palpal,palpate,palped,palpi,palpon,palpus,palsied,palster,palsy,palt,palter,paltry,paludal,paludic,palule,palulus,palus,paly,pam,pament,pamment,pampas,pampean,pamper,pampero,pampre,pan,panace,panacea,panache,panada,panade,panama,panaris,panary,panax,pancake,pand,panda,pandal,pandan,pandect,pandemy,pander,pandita,pandle,pandora,pandour,pandrop,pandura,pandy,pane,paned,paneity,panel,panela,paneler,panfil,panfish,panful,pang,pangamy,pangane,pangen,pangene,pangful,pangi,panhead,panic,panical,panicky,panicle,panisc,panisca,panisic,pank,pankin,panman,panmixy,panmug,pannade,pannage,pannam,panne,pannel,panner,pannery,pannier,panning,pannose,pannum,pannus,panocha,panoche,panoply,panoram,panse,panside,pansied,pansy,pant,pantas,panter,panther,pantie,panties,pantile,panting,pantle,pantler,panto,pantod,panton,pantoon,pantoum,pantry,pants,pantun,panty,panung,panurgy,panyar,paolo,paon,pap,papa,papable,papabot,papacy,papain,papal,papally,papalty,papane,papaw,papaya,papboat,pape,paper,papered,paperer,papern,papery,papess,papey,papilla,papion,papish,papism,papist,papize,papless,papmeat,papoose,pappi,pappose,pappox,pappus,pappy,papreg,paprica,paprika,papula,papular,papule,papyr,papyral,papyri,papyrin,papyrus,paquet,par,para,parable,paracme,parade,parader,parado,parados,paradox,parafle,parage,paragon,parah,paraiba,parale,param,paramo,parang,parao,parapet,paraph,parapod,pararek,parasol,paraspy,parate,paraxon,parbake,parboil,parcel,parch,parcher,parchy,parcook,pard,pardao,parded,pardesi,pardine,pardner,pardo,pardon,pare,parel,parella,paren,parent,parer,paresis,paretic,parfait,pargana,parge,parget,pargo,pari,pariah,parial,parian,paries,parify,parilla,parine,paring,parish,parisis,parison,parity,park,parka,parkee,parker,parkin,parking,parkish,parkway,parky,parlay,parle,parley,parling,parlish,parlor,parlous,parly,parma,parmak,parnas,parnel,paroch,parode,parodic,parodos,parody,paroecy,parol,parole,parolee,paroli,paronym,parotic,parotid,parotis,parous,parpal,parquet,parr,parrel,parrier,parrock,parrot,parroty,parry,parse,parsec,parser,parsley,parsnip,parson,parsony,part,partake,partan,parted,parter,partial,partile,partite,partlet,partly,partner,parto,partook,parture,party,parulis,parure,paruria,parvenu,parvis,parvule,pasan,pasang,paschal,pascual,pash,pasha,pashm,pasi,pasmo,pasquil,pasquin,pass,passade,passado,passage,passant,passe,passee,passen,passer,passewa,passing,passion,passir,passive,passkey,passman,passo,passout,passus,passway,past,paste,pasted,pastel,paster,pastern,pasteur,pastil,pastile,pastime,pasting,pastor,pastose,pastry,pasture,pasty,pasul,pat,pata,pataca,patacao,pataco,patagon,pataka,patamar,patao,patapat,pataque,patas,patball,patch,patcher,patchy,pate,patefy,patel,patella,paten,patency,patener,patent,pater,patera,patesi,path,pathed,pathema,pathic,pathlet,pathos,pathway,pathy,patible,patient,patina,patine,patined,patio,patly,patness,pato,patois,patola,patonce,patria,patrial,patrice,patrico,patrin,patriot,patrist,patrix,patrol,patron,patroon,patta,patte,pattee,patten,patter,pattern,pattu,patty,patu,patwari,paty,pau,paucify,paucity,paughty,paukpan,paular,paulie,paulin,paunch,paunchy,paup,pauper,pausal,pause,pauser,paussid,paut,pauxi,pavage,pavan,pavane,pave,paver,pavid,pavier,paving,pavior,paviour,pavis,paviser,pavisor,pavy,paw,pawdite,pawer,pawing,pawk,pawkery,pawkily,pawkrie,pawky,pawl,pawn,pawnage,pawnee,pawner,pawnie,pawnor,pawpaw,pax,paxilla,paxiuba,paxwax,pay,payable,payably,payday,payed,payee,payeny,payer,paying,payment,paynim,payoff,payong,payor,payroll,pea,peace,peach,peachen,peacher,peachy,peacoat,peacock,peacod,peafowl,peag,peage,peahen,peai,peaiism,peak,peaked,peaker,peakily,peaking,peakish,peaky,peal,pealike,pean,peanut,pear,pearl,pearled,pearler,pearlet,pearlin,pearly,peart,pearten,peartly,peasant,peasen,peason,peasy,peat,peatery,peatman,peaty,peavey,peavy,peba,pebble,pebbled,pebbly,pebrine,pecan,peccant,peccary,peccavi,pech,pecht,pecite,peck,pecked,pecker,pecket,peckful,peckish,peckle,peckled,peckly,pecky,pectase,pectate,pecten,pectic,pectin,pectize,pectora,pectose,pectous,pectus,ped,peda,pedage,pedagog,pedal,pedaler,pedant,pedary,pedate,pedated,pedder,peddle,peddler,pedee,pedes,pedesis,pedicab,pedicel,pedicle,pedion,pedlar,pedlary,pedocal,pedrail,pedrero,pedro,pedule,pedum,pee,peed,peek,peel,peele,peeled,peeler,peeling,peelman,peen,peenge,peeoy,peep,peeper,peepeye,peepy,peer,peerage,peerdom,peeress,peerie,peerly,peery,peesash,peeve,peeved,peever,peevish,peewee,peg,pega,pegall,pegasid,pegbox,pegged,pegger,pegging,peggle,peggy,pegless,peglet,peglike,pegman,pegwood,peho,peine,peisage,peise,peiser,peixere,pekan,pekin,pekoe,peladic,pelage,pelagic,pelamyd,pelanos,pelean,pelecan,pelf,pelican,pelick,pelike,peliom,pelioma,pelisse,pelite,pelitic,pell,pellage,pellar,pellard,pellas,pellate,peller,pellet,pellety,pellile,pellock,pelmet,pelon,peloria,peloric,pelorus,pelota,peloton,pelt,pelta,peltast,peltate,pelter,pelting,peltry,pelu,peludo,pelves,pelvic,pelvis,pembina,pemican,pen,penal,penally,penalty,penance,penang,penates,penbard,pence,pencel,pencil,pend,penda,pendant,pendent,pending,pendle,pendom,pendule,penfold,penful,pengo,penguin,penhead,penial,penide,penile,penis,penk,penlike,penman,penna,pennae,pennage,pennant,pennate,penner,pennet,penni,pennia,pennied,pennill,penning,pennon,penny,penrack,penship,pensile,pension,pensive,penster,pensum,pensy,pent,penta,pentace,pentad,pentail,pentane,pentene,pentine,pentit,pentite,pentode,pentoic,pentol,pentose,pentrit,pentyl,pentyne,penuchi,penult,penury,peon,peonage,peonism,peony,people,peopler,peoplet,peotomy,pep,pepful,pepino,peplos,peplum,peplus,pepo,pepper,peppery,peppily,peppin,peppy,pepsin,pepsis,peptic,peptide,peptize,peptone,per,peracid,peract,perbend,percale,percent,percept,perch,percha,percher,percid,percoct,percoid,percur,percuss,perdu,perdure,pereion,pereira,peres,perfect,perfidy,perform,perfume,perfumy,perfuse,pergola,perhaps,peri,periapt,peridot,perigee,perigon,peril,perine,period,periost,perique,perish,perit,perite,periwig,perjink,perjure,perjury,perk,perkily,perkin,perking,perkish,perky,perle,perlid,perlite,perloir,perm,permit,permute,pern,pernine,pernor,pernyi,peroba,peropod,peropus,peroral,perosis,perotic,peroxy,peroxyl,perpend,perpera,perplex,perrier,perron,perry,persalt,perse,persico,persis,persist,person,persona,pert,pertain,perten,pertish,pertly,perturb,pertuse,perty,peruke,perula,perule,perusal,peruse,peruser,pervade,pervert,pes,pesa,pesade,pesage,peseta,peshkar,peshwa,peskily,pesky,peso,pess,pessary,pest,peste,pester,pestful,pestify,pestle,pet,petal,petaled,petalon,petaly,petard,petary,petasos,petasus,petcock,pete,peteca,peteman,peter,petful,petiole,petit,petite,petitor,petkin,petling,peto,petrary,petre,petrean,petrel,petrie,petrify,petrol,petrosa,petrous,petted,petter,pettily,pettish,pettle,petty,petune,petwood,petzite,peuhl,pew,pewage,pewdom,pewee,pewful,pewing,pewit,pewless,pewmate,pewter,pewtery,pewy,peyote,peyotl,peyton,peytrel,pfennig,pfui,pfund,phacoid,phaeism,phaeton,phage,phalanx,phalera,phallic,phallin,phallus,phanic,phano,phantom,phare,pharmic,pharos,pharynx,phase,phaseal,phasemy,phases,phasic,phasis,phasm,phasma,phasmid,pheal,phellem,phemic,phenate,phene,phenene,phenic,phenin,phenol,phenyl,pheon,phew,phi,phial,phiale,philter,philtra,phit,phiz,phizes,phizog,phlegm,phlegma,phlegmy,phloem,phloxin,pho,phobiac,phobic,phobism,phobist,phoby,phoca,phocal,phocid,phocine,phocoid,phoebe,phoenix,phoh,pholad,pholcid,pholido,phon,phonal,phonate,phone,phoneme,phonic,phonics,phonism,phono,phony,phoo,phoresy,phoria,phorid,phorone,phos,phose,phosis,phospho,phossy,phot,photal,photic,photics,photism,photo,photoma,photon,phragma,phrasal,phrase,phraser,phrasy,phrator,phratry,phrenic,phrynid,phrynin,phthor,phu,phugoid,phulwa,phut,phycite,phyla,phyle,phylic,phyllin,phylon,phylum,phyma,phymata,physic,physics,phytase,phytic,phytin,phytoid,phytol,phytoma,phytome,phyton,phytyl,pi,pia,piaba,piacaba,piacle,piaffe,piaffer,pial,pialyn,pian,pianic,pianino,pianism,pianist,piannet,piano,pianola,piaster,piastre,piation,piazine,piazza,pibcorn,pibroch,pic,pica,picador,pical,picamar,picara,picarel,picaro,picary,piccolo,pice,picene,piceous,pichi,picine,pick,pickage,pickax,picked,pickee,pickeer,picker,pickery,picket,pickle,pickler,pickman,pickmaw,pickup,picky,picnic,pico,picoid,picot,picotah,picotee,picra,picrate,picric,picrite,picrol,picryl,pict,picture,pictury,picuda,picudo,picul,piculet,pidan,piddle,piddler,piddock,pidgin,pie,piebald,piece,piecen,piecer,piecing,pied,piedly,pieless,pielet,pielum,piemag,pieman,pien,piend,piepan,pier,pierage,pierce,pierced,piercel,piercer,pierid,pierine,pierrot,pieshop,piet,pietas,pietic,pietism,pietist,pietose,piety,piewife,piewipe,piezo,piff,piffle,piffler,pifine,pig,pigdan,pigdom,pigeon,pigface,pigfish,pigfoot,pigful,piggery,piggin,pigging,piggish,piggle,piggy,pighead,pigherd,pightle,pigless,piglet,pigling,pigly,pigman,pigment,pignon,pignus,pignut,pigpen,pigroot,pigskin,pigsney,pigsty,pigtail,pigwash,pigweed,pigyard,piitis,pik,pika,pike,piked,pikel,pikelet,pikeman,piker,pikey,piki,piking,pikle,piky,pilage,pilapil,pilar,pilary,pilau,pilaued,pilch,pilcher,pilcorn,pilcrow,pile,pileata,pileate,piled,pileous,piler,piles,pileus,pilfer,pilger,pilgrim,pili,pilifer,piligan,pilikai,pilin,piline,piling,pilkins,pill,pillage,pillar,pillary,pillas,pillbox,pilled,pillet,pilleus,pillion,pillory,pillow,pillowy,pilm,pilmy,pilon,pilori,pilose,pilosis,pilot,pilotee,pilotry,pilous,pilpul,piltock,pilula,pilular,pilule,pilum,pilus,pily,pimaric,pimelic,pimento,pimlico,pimola,pimp,pimpery,pimping,pimpish,pimple,pimpled,pimplo,pimploe,pimply,pin,pina,pinaces,pinacle,pinacol,pinang,pinax,pinball,pinbone,pinbush,pincase,pincer,pincers,pinch,pinche,pinched,pinchem,pincher,pind,pinda,pinder,pindy,pine,pineal,pined,pinene,piner,pinery,pinesap,pinetum,piney,pinfall,pinfish,pinfold,ping,pingle,pingler,pingue,pinguid,pinguin,pinhead,pinhold,pinhole,pinhook,pinic,pining,pinion,pinite,pinitol,pinjane,pinjra,pink,pinked,pinkeen,pinken,pinker,pinkeye,pinkie,pinkify,pinkily,pinking,pinkish,pinkly,pinky,pinless,pinlock,pinna,pinnace,pinnae,pinnal,pinnate,pinned,pinnel,pinner,pinnet,pinning,pinnock,pinnula,pinnule,pinny,pino,pinole,pinolia,pinolin,pinon,pinonic,pinrail,pinsons,pint,pinta,pintado,pintail,pintano,pinte,pintle,pinto,pintura,pinulus,pinweed,pinwing,pinwork,pinworm,piny,pinyl,pinyon,pioneer,pioted,piotine,piotty,pioury,pious,piously,pip,pipa,pipage,pipal,pipe,pipeage,piped,pipeful,pipeman,piper,piperic,piperly,piperno,pipery,pipet,pipette,pipi,piping,pipiri,pipit,pipkin,pipless,pipped,pipper,pippin,pippy,piprine,piproid,pipy,piquant,pique,piquet,piquia,piqure,pir,piracy,piragua,piranha,pirate,piraty,pirl,pirn,pirner,pirnie,pirny,pirogue,pirol,pirr,pirrmaw,pisaca,pisang,pisay,piscary,piscian,piscina,piscine,pisco,pise,pish,pishaug,pishu,pisk,pisky,pismire,piso,piss,pissant,pist,pistic,pistil,pistle,pistol,pistole,piston,pistrix,pit,pita,pitanga,pitapat,pitarah,pitau,pitaya,pitch,pitcher,pitchi,pitchy,piteous,pitfall,pith,pithful,pithily,pithole,pithos,pithy,pitier,pitiful,pitless,pitlike,pitman,pitmark,pitmirk,pitpan,pitpit,pitside,pitted,pitter,pittine,pitting,pittite,pittoid,pituite,pituri,pitwood,pitwork,pity,pitying,piuri,pivalic,pivot,pivotal,pivoter,pix,pixie,pixy,pize,pizza,pizzle,placard,placate,place,placebo,placer,placet,placid,plack,placket,placode,placoid,placula,plaga,plagal,plagate,plage,plagium,plagose,plague,plagued,plaguer,plaguy,plaice,plaid,plaided,plaidie,plaidy,plain,plainer,plainly,plaint,plait,plaited,plaiter,plak,plakat,plan,planaea,planar,planate,planch,plandok,plane,planer,planet,planeta,planful,plang,plangor,planish,planity,plank,planker,planky,planner,plant,planta,plantad,plantal,plantar,planter,planula,planury,planxty,plap,plaque,plash,plasher,plashet,plashy,plasm,plasma,plasmic,plasome,plass,plasson,plaster,plastic,plastid,plastin,plat,platan,platane,platano,platch,plate,platea,plateau,plated,platen,plater,platery,platic,platina,plating,platode,platoid,platoon,platted,platten,platter,platty,platy,plaud,plaudit,play,playa,playbox,playboy,playday,player,playful,playlet,playman,playock,playpen,plaza,plea,pleach,plead,pleader,please,pleaser,pleat,pleater,pleb,plebe,plebify,plebs,pleck,plectre,pled,pledge,pledgee,pledger,pledget,pledgor,pleion,plenary,plenipo,plenish,plenism,plenist,plenty,plenum,pleny,pleon,pleonal,pleonic,pleopod,pleroma,plerome,plessor,pleura,pleural,pleuric,pleuron,pleurum,plew,plex,plexal,plexor,plexure,plexus,pliable,pliably,pliancy,pliant,plica,plical,plicate,plied,plier,plies,pliers,plight,plim,plinth,pliskie,plisky,ploat,ploce,plock,plod,plodder,plodge,plomb,plook,plop,plosion,plosive,plot,plote,plotful,plotted,plotter,plotty,plough,plouk,plouked,plouky,plounce,plout,plouter,plover,plovery,plow,plowboy,plower,plowing,plowman,ploy,pluck,plucked,plucker,plucky,plud,pluff,pluffer,pluffy,plug,plugged,plugger,pluggy,plugman,plum,pluma,plumach,plumade,plumage,plumate,plumb,plumber,plumbet,plumbic,plumbog,plumbum,plumcot,plume,plumed,plumer,plumery,plumet,plumier,plumify,plumist,plumlet,plummer,plummet,plummy,plumose,plumous,plump,plumpen,plumper,plumply,plumps,plumpy,plumula,plumule,plumy,plunder,plunge,plunger,plunk,plup,plural,pluries,plurify,plus,plush,plushed,plushy,pluteal,plutean,pluteus,pluvial,pluvian,pluvine,ply,plyer,plying,plywood,pneuma,po,poach,poacher,poachy,poalike,pob,pobby,pobs,pochade,pochard,pochay,poche,pock,pocket,pockety,pockily,pocky,poco,pocosin,pod,podagra,podal,podalic,podatus,podded,podder,poddish,poddle,poddy,podeon,podesta,podex,podge,podger,podgily,podgy,podial,podical,podices,podite,poditic,poditti,podium,podler,podley,podlike,podogyn,podsol,poduran,podurid,podware,podzol,poe,poem,poemet,poemlet,poesie,poesis,poesy,poet,poetdom,poetess,poetic,poetics,poetito,poetize,poetly,poetry,pogge,poggy,pogonip,pogrom,pogy,poh,poha,pohna,poi,poietic,poignet,poil,poilu,poind,poinder,point,pointed,pointel,pointer,pointy,poise,poised,poiser,poison,poitrel,pokable,poke,poked,pokeful,pokeout,poker,pokey,pokily,poking,pokomoo,pokunt,poky,pol,polacca,polack,polacre,polar,polaric,polarly,polaxis,poldavy,polder,pole,polearm,poleax,poleaxe,polecat,poleman,polemic,polenta,poler,poley,poliad,police,policed,policy,poligar,polio,polis,polish,polite,politic,polity,polk,polka,poll,pollack,polladz,pollage,pollam,pollan,pollard,polled,pollen,pollent,poller,pollex,polling,pollock,polloi,pollute,pollux,polo,poloist,polony,polos,polska,polt,poltina,poly,polyact,polyad,polygam,polygon,polygyn,polymer,polyose,polyp,polyped,polypi,polypod,polypus,pom,pomace,pomade,pomane,pomate,pomato,pomatum,pombe,pombo,pome,pomelo,pomey,pomfret,pomme,pommee,pommel,pommet,pommey,pommy,pomonal,pomonic,pomp,pompa,pompal,pompano,pompey,pomphus,pompier,pompion,pompist,pompon,pompous,pomster,pon,ponce,ponceau,poncho,pond,pondage,ponder,pondful,pondlet,pondman,pondok,pondus,pondy,pone,ponent,ponerid,poney,pong,ponga,pongee,poniard,ponica,ponier,ponja,pont,pontage,pontal,pontee,pontes,pontic,pontiff,pontify,pontil,pontile,pontin,pontine,pontist,ponto,ponton,pontoon,pony,ponzite,pooa,pooch,pooder,poodle,poof,poogye,pooh,pook,pooka,pookaun,pookoo,pool,pooler,pooli,pooly,poon,poonac,poonga,poop,pooped,poor,poorish,poorly,poot,pop,popadam,popal,popcorn,popdock,pope,popedom,popeism,popeler,popely,popery,popess,popeye,popeyed,popgun,popify,popinac,popish,popjoy,poplar,poplin,popover,poppa,poppean,poppel,popper,poppet,poppied,poppin,popple,popply,poppy,popshop,popular,populin,popweed,poral,porcate,porch,porched,porcine,pore,pored,porer,porge,porger,porgy,poring,porism,porite,pork,porker,porkery,porket,porkish,porkman,porkpie,porky,porogam,poroma,poros,porose,porosis,porotic,porous,porr,porrect,porret,porrigo,porry,port,porta,portage,portail,portal,portass,ported,portend,portent,porter,portia,portico,portify,portio,portion,portlet,portly,portman,porto,portray,portway,porty,porule,porus,pory,posca,pose,poser,poseur,posey,posh,posing,posit,positor,positum,posnet,posole,poss,posse,possess,posset,possum,post,postage,postal,postbag,postbox,postboy,posted,posteen,poster,postern,postfix,postic,postil,posting,postman,posture,postwar,posy,pot,potable,potamic,potash,potass,potassa,potate,potato,potator,potbank,potboil,potboy,potch,potcher,potdar,pote,poteen,potence,potency,potent,poter,poteye,potful,potgirl,potgun,pothead,potheen,pother,potherb,pothery,pothole,pothook,pothunt,potifer,potion,potleg,potlid,potlike,potluck,potman,potong,potoo,potoroo,potpie,potrack,pott,pottage,pottagy,pottah,potted,potter,pottery,potting,pottle,pottled,potto,potty,potware,potwork,potwort,pouce,poucer,poucey,pouch,pouched,pouchy,pouf,poulard,poulp,poulpe,poult,poulter,poultry,pounamu,pounce,pounced,pouncer,pouncet,pound,poundal,pounder,pour,pourer,pourie,pouring,pouser,pout,pouter,poutful,pouting,pouty,poverty,pow,powder,powdery,powdike,powdry,power,powered,powitch,pownie,powwow,pox,poxy,poy,poyou,praam,prabble,prabhu,practic,prad,praecox,praetor,prairie,praise,praiser,prajna,praline,pram,prana,prance,prancer,prancy,prank,pranked,pranker,prankle,pranky,prase,prasine,prasoid,prastha,prat,pratal,prate,prater,pratey,prating,prattle,prattly,prau,pravity,prawn,prawner,prawny,praxis,pray,praya,prayer,prayful,praying,preach,preachy,preacid,preact,preaged,preally,preanal,prearm,preaver,prebake,prebend,prebid,prebill,preboil,preborn,preburn,precant,precary,precast,precava,precede,precent,precept,preces,precess,precipe,precis,precise,precite,precoil,precook,precool,precopy,precox,precure,precut,precyst,predamn,predark,predata,predate,predawn,preday,predefy,predeny,predial,predict,prediet,predine,predoom,predraw,predry,predusk,preen,preener,preeze,prefab,preface,prefect,prefer,prefine,prefix,prefool,preform,pregain,pregust,prehaps,preheal,preheat,prehend,preidea,preknit,preknow,prelacy,prelate,prelect,prelim,preloan,preloss,prelude,premake,premate,premial,premier,premise,premiss,premium,premix,premold,premove,prename,prender,prendre,preomit,preopen,preoral,prep,prepare,prepave,prepay,prepink,preplan,preplot,prepose,prepuce,prepupa,prerent,prerich,prerupt,presage,presay,preseal,presee,presell,present,preses,preset,preship,preshow,preside,presift,presign,prespur,press,pressel,presser,pressor,prest,prester,presto,presume,pretan,pretell,pretend,pretest,pretext,pretire,pretone,pretry,pretty,pretzel,prevail,prevene,prevent,preverb,preveto,previde,preview,previse,prevoid,prevote,prevue,prewar,prewarn,prewash,prewhip,prewire,prewrap,prexy,prey,preyer,preyful,prezone,price,priced,pricer,prich,prick,pricked,pricker,pricket,prickle,prickly,pricks,pricky,pride,pridian,priding,pridy,pried,prier,priest,prig,prigdom,prigger,prigman,prill,prim,prima,primacy,primage,primal,primar,primary,primate,prime,primely,primer,primero,primine,priming,primly,primost,primp,primsie,primula,primus,primy,prince,princox,prine,pringle,prink,prinker,prinkle,prinky,print,printed,printer,prion,prionid,prior,prioral,priorly,priory,prisage,prisal,priscan,prism,prismal,prismed,prismy,prison,priss,prissy,pritch,prithee,prius,privacy,privant,private,privet,privily,privity,privy,prize,prizer,prizery,pro,proa,proal,proarmy,prob,probabl,probal,probang,probant,probate,probe,probeer,prober,probity,problem,procarp,proceed,process,proctal,proctor,procure,prod,prodder,proddle,prodigy,produce,product,proem,proetid,prof,profane,profert,profess,proffer,profile,profit,profuse,prog,progeny,progger,progne,program,project,proke,proker,prolan,prolate,proleg,prolify,proline,prolix,prolong,prolyl,promic,promise,promote,prompt,pronaos,pronate,pronavy,prone,pronely,proneur,prong,pronged,pronger,pronic,pronoun,pronpl,pronto,pronuba,proo,proof,proofer,proofy,prop,propago,propale,propane,propend,propene,proper,prophet,propine,proplex,propone,propons,propose,propoxy,propper,props,propupa,propyl,propyne,prorata,prorate,prore,prorean,prorsad,prorsal,prosaic,prosar,prose,prosect,proser,prosify,prosily,prosing,prosish,prosist,proso,prosode,prosody,prosoma,prosper,pross,prossy,prosy,protax,prote,protea,protead,protean,protect,protege,proteic,protein,protend,protest,protext,prothyl,protide,protist,protium,proto,protoma,protome,proton,protone,protore,protyl,protyle,protype,proudly,provand,provant,prove,provect,proved,proven,prover,proverb,provide,provine,proving,proviso,provoke,provost,prow,prowar,prowed,prowess,prowl,prowler,proxeny,proximo,proxy,proxysm,prozone,prude,prudely,prudent,prudery,prudish,prudist,prudity,pruh,prunase,prune,prunell,pruner,pruning,prunt,prunted,prurigo,prussic,prut,prutah,pry,pryer,prying,pryler,pryse,prytany,psalis,psalm,psalmic,psalmy,psaloid,psalter,psaltes,pschent,pseudo,psha,pshaw,psi,psiloi,psoadic,psoas,psoatic,psocid,psocine,psoitis,psora,psoric,psoroid,psorous,pst,psych,psychal,psyche,psychic,psychid,psychon,psykter,psylla,psyllid,ptarmic,ptereal,pteric,pterion,pteroid,pteroma,pteryla,ptinid,ptinoid,ptisan,ptomain,ptosis,ptotic,ptyalin,ptyxis,pu,pua,puan,pub,pubal,pubble,puberal,puberty,pubes,pubian,pubic,pubis,public,publish,puccoon,puce,pucelle,puchero,puck,pucka,pucker,puckery,puckish,puckle,puckrel,pud,puddee,pudder,pudding,puddle,puddled,puddler,puddly,puddock,puddy,pudency,pudenda,pudent,pudge,pudgily,pudgy,pudiano,pudic,pudical,pudsey,pudsy,pudu,pueblo,puerer,puerile,puerman,puff,puffed,puffer,puffery,puffily,puffin,puffing,pufflet,puffwig,puffy,pug,pugged,pugger,puggi,pugging,puggish,puggle,puggree,puggy,pugh,pugil,pugman,pugmill,puisne,puist,puistie,puja,puka,pukatea,puke,pukeko,puker,pukish,pukras,puku,puky,pul,pulahan,pulasan,pule,pulegol,puler,puli,pulicat,pulicid,puling,pulish,pulk,pulka,pull,pulldoo,pullen,puller,pullery,pullet,pulley,pulli,pullus,pulp,pulpal,pulper,pulpify,pulpily,pulpit,pulpous,pulpy,pulque,pulsant,pulsate,pulse,pulsion,pulsive,pulton,pulu,pulvic,pulvil,pulvino,pulwar,puly,puma,pumice,pumiced,pumicer,pummel,pummice,pump,pumpage,pumper,pumpkin,pumple,pumpman,pun,puna,punaise,punalua,punatoo,punch,puncher,punchy,punct,punctal,punctum,pundit,pundita,pundum,puneca,pung,punga,pungar,pungent,punger,pungey,pungi,pungle,pungled,punicin,punily,punish,punjum,punk,punkah,punkie,punky,punless,punlet,punnage,punner,punnet,punnic,punster,punt,punta,puntal,puntel,punter,punti,puntil,puntist,punto,puntout,punty,puny,punyish,punyism,pup,pupa,pupal,pupate,pupelo,pupil,pupilar,pupiled,pupoid,puppet,puppify,puppily,puppy,pupulo,pupunha,pur,purana,puranic,puraque,purdah,purdy,pure,pured,puree,purely,purer,purfle,purfled,purfler,purfly,purga,purge,purger,purgery,purging,purify,purine,puriri,purism,purist,purity,purl,purler,purlieu,purlin,purlman,purloin,purpart,purple,purply,purport,purpose,purpura,purpure,purr,purre,purree,purreic,purrel,purrer,purring,purrone,purry,purse,pursed,purser,pursily,purslet,pursley,pursual,pursue,pursuer,pursuit,pursy,purusha,purvey,purview,purvoe,pus,push,pusher,pushful,pushing,pushpin,puss,pusscat,pussley,pussy,pustule,put,putage,putamen,putback,putchen,putcher,puteal,putelee,puther,puthery,putid,putidly,putlog,putois,putrefy,putrid,putt,puttee,putter,puttier,puttock,putty,puture,puxy,puzzle,puzzled,puzzler,pya,pyal,pyche,pycnia,pycnial,pycnid,pycnite,pycnium,pyelic,pyemia,pyemic,pygal,pygarg,pygidid,pygmoid,pygmy,pygofer,pygopod,pyic,pyin,pyjama,pyke,pyknic,pyla,pylar,pylic,pylon,pyloric,pylorus,pyocele,pyocyst,pyocyte,pyoid,pyosis,pyr,pyral,pyralid,pyralis,pyramid,pyran,pyranyl,pyre,pyrena,pyrene,pyrenic,pyrenin,pyretic,pyrex,pyrexia,pyrexic,pyrgom,pyridic,pyridyl,pyrite,pyrites,pyritic,pyro,pyrogen,pyroid,pyrone,pyrope,pyropen,pyropus,pyrosis,pyrotic,pyrrhic,pyrrol,pyrrole,pyrroyl,pyrryl,pyruvic,pyruvil,pyruvyl,python,pyuria,pyvuril,pyx,pyxides,pyxie,pyxis,q,qasida,qere,qeri,qintar,qoph,qua,quab,quabird,quachil,quack,quackle,quacky,quad,quadded,quaddle,quadra,quadral,quadrat,quadric,quadrum,quaedam,quaff,quaffer,quag,quagga,quaggle,quaggy,quahog,quail,quaily,quaint,quake,quaker,quaking,quaky,quale,qualify,quality,qualm,qualmy,quan,quandy,quannet,quant,quanta,quantic,quantum,quar,quare,quark,quarl,quarle,quarred,quarrel,quarry,quart,quartan,quarter,quartet,quartic,quarto,quartz,quartzy,quash,quashey,quashy,quasi,quasky,quassin,quat,quata,quatch,quatern,quaters,quatral,quatre,quatrin,quattie,quatuor,quauk,quave,quaver,quavery,quaw,quawk,quay,quayage,quayful,quayman,qubba,queach,queachy,queak,queal,quean,queasom,queasy,quedful,queechy,queen,queenly,queer,queerer,queerly,queery,queest,queet,queeve,quegh,quei,quelch,quell,queller,quemado,queme,quemely,quench,quercic,quercin,querent,querier,querist,querken,querl,quern,quernal,query,quest,quester,questor,quet,quetch,quetzal,queue,quey,quiapo,quib,quibble,quiblet,quica,quick,quicken,quickie,quickly,quid,quidder,quiddit,quiddle,quiesce,quiet,quieten,quieter,quietly,quietus,quiff,quila,quiles,quilkin,quill,quillai,quilled,quiller,quillet,quilly,quilt,quilted,quilter,quin,quina,quinary,quinate,quince,quinch,quinia,quinic,quinin,quinina,quinine,quinism,quinite,quinize,quink,quinnat,quinnet,quinoa,quinoid,quinol,quinone,quinova,quinoyl,quinse,quinsy,quint,quintad,quintal,quintan,quinte,quintet,quintic,quintin,quinto,quinton,quintus,quinyl,quinze,quip,quipful,quipo,quipper,quippy,quipu,quira,quire,quirk,quirky,quirl,quirt,quis,quisby,quiscos,quisle,quit,quitch,quite,quits,quitted,quitter,quittor,quiver,quivery,quiz,quizzee,quizzer,quizzy,quo,quod,quoin,quoined,quoit,quoiter,quoits,quondam,quoniam,quop,quorum,quot,quota,quote,quotee,quoter,quoth,quotha,quotity,quotum,r,ra,raad,raash,rab,raband,rabanna,rabat,rabatte,rabbet,rabbi,rabbin,rabbit,rabbity,rabble,rabbler,rabboni,rabic,rabid,rabidly,rabies,rabific,rabinet,rabitic,raccoon,raccroc,race,raceme,racemed,racemic,racer,raceway,rach,rache,rachial,rachis,racial,racily,racing,racism,racist,rack,rackan,racker,racket,rackett,rackety,rackful,racking,rackle,rackway,racloir,racon,racoon,racy,rad,rada,radar,raddle,radial,radiale,radian,radiant,radiate,radical,radicel,radices,radicle,radii,radio,radiode,radish,radium,radius,radix,radman,radome,radon,radula,raff,raffe,raffee,raffery,raffia,raffing,raffish,raffle,raffler,raft,raftage,rafter,raftman,rafty,rag,raga,rage,rageful,rageous,rager,ragfish,ragged,raggedy,raggee,ragger,raggery,raggety,raggil,raggily,ragging,raggle,raggled,raggy,raging,raglan,raglet,raglin,ragman,ragout,ragshag,ragtag,ragtime,ragule,raguly,ragweed,ragwort,rah,rahdar,raia,raid,raider,rail,railage,railer,railing,railly,railman,railway,raiment,rain,rainbow,rainer,rainful,rainily,rainy,raioid,rais,raise,raised,raiser,raisin,raising,raisiny,raj,raja,rajah,rakan,rake,rakeage,rakeful,raker,rakery,rakh,raki,rakily,raking,rakish,rakit,raku,rallier,ralline,rally,ralph,ram,ramada,ramage,ramal,ramanas,ramass,ramate,rambeh,ramble,rambler,rambong,rame,rameal,ramed,ramekin,rament,rameous,ramet,ramex,ramhead,ramhood,rami,ramie,ramify,ramlike,ramline,rammack,rammel,rammer,rammish,rammy,ramose,ramous,ramp,rampage,rampant,rampart,ramped,ramper,rampick,rampike,ramping,rampion,rampire,rampler,ramplor,ramrace,ramrod,ramsch,ramson,ramstam,ramtil,ramular,ramule,ramulus,ramus,ran,rana,ranal,rance,rancel,rancer,ranch,ranche,rancher,rancho,rancid,rancor,rand,randan,randem,rander,randing,randir,randle,random,randy,rane,rang,range,ranged,ranger,rangey,ranging,rangle,rangler,rangy,rani,ranid,ranine,rank,ranked,ranker,rankish,rankle,rankly,rann,rannel,ranny,ransack,ransel,ransom,rant,rantan,ranter,ranting,rantock,ranty,ranula,ranular,rap,rape,rapeful,raper,raphany,raphe,raphide,raphis,rapic,rapid,rapidly,rapier,rapillo,rapine,rapiner,raping,rapinic,rapist,raploch,rappage,rappe,rappel,rapper,rapping,rappist,rapport,rapt,raptly,raptor,raptril,rapture,raptury,raptus,rare,rarebit,rarefy,rarely,rarish,rarity,ras,rasa,rasant,rascal,rasceta,rase,rasen,raser,rasgado,rash,rasher,rashful,rashing,rashly,rasion,rasp,rasped,rasper,rasping,raspish,raspite,raspy,rasse,rassle,raster,rastik,rastle,rasure,rat,rata,ratable,ratably,ratafee,ratafia,ratal,ratbite,ratch,ratchel,ratcher,ratchet,rate,rated,ratel,rater,ratfish,rath,rathe,rathed,rathely,rather,rathest,rathite,rathole,ratify,ratine,rating,ratio,ration,ratite,ratlike,ratline,ratoon,rattage,rattail,rattan,ratteen,ratten,ratter,rattery,ratti,rattish,rattle,rattled,rattler,rattles,rattly,ratton,rattrap,ratty,ratwa,ratwood,raucid,raucity,raucous,raught,rauk,raukle,rauli,raun,raunge,raupo,rauque,ravage,ravager,rave,ravel,raveler,ravelin,ravelly,raven,ravener,ravenry,ravens,raver,ravin,ravine,ravined,raviney,raving,ravioli,ravish,ravison,raw,rawhead,rawhide,rawish,rawness,rax,ray,raya,rayage,rayed,rayful,rayless,raylet,rayon,raze,razee,razer,razoo,razor,razz,razzia,razzly,re,rea,reaal,reabuse,reach,reacher,reachy,react,reactor,read,readapt,readd,reader,readily,reading,readmit,readopt,readorn,ready,reagent,reagin,reagree,reak,real,realarm,reales,realest,realgar,realign,realism,realist,reality,realive,realize,reallot,reallow,really,realm,realter,realtor,realty,ream,reamage,reamass,reamend,reamer,reamuse,reamy,reannex,reannoy,reanvil,reap,reaper,reapply,rear,rearer,reargue,rearise,rearm,rearray,reask,reason,reassay,reasty,reasy,reatus,reaudit,reavail,reave,reaver,reavoid,reavow,reawait,reawake,reaward,reaware,reb,rebab,reback,rebag,rebait,rebake,rebale,reban,rebar,rebase,rebasis,rebate,rebater,rebathe,rebato,rebawl,rebear,rebeat,rebec,rebeck,rebed,rebeg,rebeget,rebegin,rebel,rebelly,rebend,rebeset,rebia,rebias,rebid,rebill,rebind,rebirth,rebite,reblade,reblame,reblast,reblend,rebless,reblock,rebloom,reblot,reblow,reblue,rebluff,reboant,reboard,reboast,rebob,reboil,reboise,rebold,rebolt,rebone,rebook,rebop,rebore,reborn,rebound,rebox,rebrace,rebraid,rebrand,rebreed,rebrew,rebribe,rebrick,rebring,rebrown,rebrush,rebud,rebuff,rebuild,rebuilt,rebuke,rebuker,rebulk,rebunch,rebuoy,reburn,reburst,rebury,rebus,rebush,rebusy,rebut,rebute,rebuy,recable,recage,recalk,recall,recant,recap,recarry,recart,recarve,recase,recash,recast,recatch,recce,recco,reccy,recede,receder,receipt,receive,recency,recense,recent,recept,recess,rechafe,rechain,rechal,rechant,rechaos,rechar,rechase,rechaw,recheat,recheck,recheer,rechew,rechip,rechuck,rechurn,recipe,recital,recite,reciter,reck,reckla,reckon,reclaim,reclama,reclang,reclasp,reclass,reclean,reclear,reclimb,recline,reclose,recluse,recoach,recoal,recoast,recoat,recock,recoct,recode,recoil,recoin,recoke,recolor,recomb,recon,recook,recool,recopy,record,recork,recount,recoup,recover,recramp,recrank,recrate,recrew,recroon,recrop,recross,recrowd,recrown,recruit,recrush,rect,recta,rectal,recti,rectify,rection,recto,rector,rectory,rectrix,rectum,rectus,recur,recure,recurl,recurse,recurve,recuse,recut,recycle,red,redact,redan,redare,redarn,redart,redate,redaub,redawn,redback,redbait,redbill,redbird,redbone,redbuck,redbud,redcap,redcoat,redd,redden,redder,redding,reddish,reddock,reddy,rede,redeal,redebit,redeck,redeed,redeem,redefer,redefy,redeify,redelay,redeny,redeye,redfin,redfish,redfoot,redhead,redhoop,redia,redient,redig,redip,redive,redleg,redlegs,redly,redness,redo,redock,redoom,redoubt,redound,redowa,redox,redpoll,redraft,redrag,redrape,redraw,redream,redress,redrill,redrive,redroot,redry,redsear,redskin,redtab,redtail,redtop,redub,reduce,reduced,reducer,reduct,redue,redux,redward,redware,redweed,redwing,redwood,redye,ree,reechy,reed,reeded,reeden,reeder,reedily,reeding,reedish,reedman,reedy,reef,reefer,reefing,reefy,reek,reeker,reeky,reel,reeled,reeler,reem,reeming,reemish,reen,reenge,reeper,reese,reeshle,reesk,reesle,reest,reester,reestle,reesty,reet,reetam,reetle,reeve,ref,reface,refall,refan,refavor,refect,refeed,refeel,refeign,refel,refence,refer,referee,refetch,refight,refill,refilm,refind,refine,refined,refiner,refire,refit,refix,reflag,reflame,reflash,reflate,reflect,reflee,reflex,refling,refloat,reflog,reflood,refloor,reflow,reflush,reflux,refly,refocus,refold,refont,refool,refoot,reforce,reford,reforge,reform,refound,refract,refrain,reframe,refresh,refront,reft,refuel,refuge,refugee,refulge,refund,refurl,refusal,refuse,refuser,refutal,refute,refuter,reg,regain,regal,regale,regaler,regalia,regally,regard,regatta,regauge,regency,regent,reges,reget,regia,regift,regild,regill,regime,regimen,regin,reginal,region,regive,reglair,reglaze,regle,reglet,regloss,reglove,reglow,reglue,regma,regnal,regnant,regorge,regrade,regraft,regrant,regrasp,regrass,regrate,regrede,regreen,regreet,regress,regret,regrind,regrip,regroup,regrow,reguard,reguide,regula,regular,reguli,regulus,regur,regurge,regush,reh,rehair,rehale,rehang,reharm,rehash,rehaul,rehead,reheal,reheap,rehear,reheat,rehedge,reheel,rehoe,rehoist,rehonor,rehood,rehook,rehoop,rehouse,rehung,reif,reify,reign,reim,reimage,reimpel,reimply,rein,reina,reincur,reindue,reinfer,reins,reinter,reis,reissue,reit,reitbok,reiter,reiver,rejail,reject,rejerk,rejoice,rejoin,rejolt,rejudge,rekick,rekill,reking,rekiss,reknit,reknow,rel,relabel,relace,relade,reladen,relais,relamp,reland,relap,relapse,relast,relata,relatch,relate,related,relater,relator,relatum,relax,relaxed,relaxer,relay,relbun,relead,releap,relearn,release,relend,relent,relet,relevel,relevy,reliant,relic,relick,relict,relief,relier,relieve,relievo,relift,relight,relime,relimit,reline,reliner,relink,relish,relishy,relist,relive,reload,reloan,relock,relodge,relook,relose,relost,relot,relove,relower,reluct,relume,rely,remade,remail,remain,remains,remake,remaker,reman,remand,remanet,remap,remarch,remark,remarry,remask,remass,remast,rematch,remble,remeant,remede,remedy,remeet,remelt,remend,remerge,remetal,remex,remica,remicle,remiges,remill,remimic,remind,remint,remiped,remise,remiss,remit,remix,remnant,remock,remodel,remold,remop,remora,remord,remorse,remote,remould,remount,removal,remove,removed,remover,renable,renably,renail,renal,rename,rend,render,reneg,renege,reneger,renegue,renerve,renes,renet,renew,renewal,renewer,renin,renish,renk,renky,renne,rennet,rennin,renown,rent,rentage,rental,rented,rentee,renter,renvoi,renvoy,reoccur,reoffer,reoil,reomit,reopen,reorder,reown,rep,repace,repack,repage,repaint,repair,repale,repand,repanel,repaper,repark,repass,repast,repaste,repatch,repave,repawn,repay,repayal,repeal,repeat,repeg,repel,repen,repent,repew,rephase,repic,repick,repiece,repile,repin,repine,repiner,repipe,repique,repitch,repkie,replace,replait,replan,replane,replant,replate,replay,replead,repleat,replete,replevy,replica,replier,replod,replot,replow,replum,replume,reply,repoint,repoll,repolon,repone,repope,report,reposal,repose,reposed,reposer,reposit,repost,repot,repound,repour,repp,repped,repray,repress,reprice,reprime,reprint,reprise,reproof,reprove,reprune,reps,reptant,reptile,repuff,repugn,repulse,repump,repurge,repute,reputed,requeen,request,requiem,requin,require,requit,requite,requiz,requote,rerack,rerail,reraise,rerake,rerank,rerate,reread,reredos,reree,rereel,rereeve,rereign,rerent,rerig,rering,rerise,rerival,rerivet,rerob,rerobe,reroll,reroof,reroot,rerope,reroute,rerow,rerub,rerun,resaca,resack,resail,resale,resalt,resaw,resawer,resay,rescan,rescind,rescore,rescrub,rescue,rescuer,reseal,reseam,reseat,resect,reseda,resee,reseed,reseek,reseise,reseize,reself,resell,resend,resene,resent,reserve,reset,resever,resew,resex,resh,reshake,reshape,reshare,reshave,reshear,reshift,reshine,reship,reshoe,reshoot,reshun,reshunt,reshut,reside,resider,residua,residue,resift,resigh,resign,resile,resin,resina,resiner,resing,resinic,resink,resinol,resiny,resist,resize,resizer,reskin,reslash,reslate,reslay,reslide,reslot,resmell,resmelt,resmile,resnap,resnub,resoak,resoap,resoil,resole,resolve,resorb,resort,resound,resow,resp,respace,respade,respan,respeak,respect,respell,respin,respire,respite,resplit,respoke,respond,respot,respray,respue,ressala,ressaut,rest,restack,restaff,restain,restake,restamp,restant,restart,restate,restaur,resteal,resteel,resteep,restem,restep,rester,restes,restful,restiad,restiff,resting,restir,restis,restive,restock,restore,restow,restrap,restrip,restudy,restuff,resty,restyle,resuck,resue,resuing,resuit,result,resume,resumer,resun,resup,resurge,reswage,resward,reswarm,reswear,resweat,resweep,reswell,reswill,reswim,ret,retable,retack,retag,retail,retain,retake,retaker,retalk,retama,retame,retan,retape,retard,retare,retaste,retax,retch,reteach,retell,retem,retempt,retene,retent,retest,rethank,rethaw,rethe,rethink,rethrow,retia,retial,retiary,reticle,retie,retier,retile,retill,retime,retin,retina,retinal,retinol,retinue,retip,retiral,retire,retired,retirer,retoast,retold,retomb,retook,retool,retooth,retort,retoss,retotal,retouch,retour,retrace,retrack,retract,retrad,retrade,retrain,retral,retramp,retread,retreat,retree,retrial,retrim,retrip,retrot,retrude,retrue,retrust,retry,retted,retter,rettery,retting,rettory,retube,retuck,retune,returf,return,retuse,retwine,retwist,retying,retype,retzian,reune,reunify,reunion,reunite,reurge,reuse,reutter,rev,revalue,revamp,revary,reve,reveal,reveil,revel,reveler,revelly,revelry,revend,revenge,revent,revenue,rever,reverb,revere,revered,reverer,reverie,revers,reverse,reversi,reverso,revert,revery,revest,revet,revete,revie,review,revile,reviler,revisal,revise,revisee,reviser,revisit,revisor,revival,revive,reviver,revivor,revoice,revoke,revoker,revolt,revolve,revomit,revote,revue,revuist,rewade,rewager,rewake,rewaken,rewall,reward,rewarm,rewarn,rewash,rewater,rewave,rewax,rewayle,rewear,reweave,rewed,reweigh,reweld,rewend,rewet,rewhelp,rewhirl,rewiden,rewin,rewind,rewire,rewish,rewood,reword,rework,rewound,rewove,rewoven,rewrap,rewrite,rex,rexen,reyield,reyoke,reyouth,rhabdom,rhabdos,rhabdus,rhagite,rhagon,rhagose,rhamn,rhamnal,rhason,rhatany,rhe,rhea,rhebok,rheeboc,rheebok,rheen,rheic,rhein,rheinic,rhema,rheme,rhenium,rheotan,rhesian,rhesus,rhetor,rheum,rheumed,rheumic,rheumy,rhexis,rhinal,rhine,rhinion,rhino,rhizine,rhizoid,rhizoma,rhizome,rhizote,rho,rhodic,rhoding,rhodite,rhodium,rhomb,rhombic,rhombos,rhombus,rhubarb,rhumb,rhumba,rhyme,rhymer,rhymery,rhymic,rhymist,rhymy,rhyptic,rhythm,rhyton,ria,rial,riancy,riant,riantly,riata,rib,ribald,riband,ribat,ribband,ribbed,ribber,ribbet,ribbing,ribble,ribbon,ribbony,ribby,ribe,ribless,riblet,riblike,ribonic,ribose,ribskin,ribwork,ribwort,rice,ricer,ricey,rich,richdom,richen,riches,richly,richt,ricin,ricine,ricinic,ricinus,rick,ricker,rickets,rickety,rickey,rickle,ricksha,ricrac,rictal,rictus,rid,ridable,ridably,riddam,riddel,ridden,ridder,ridding,riddle,riddler,ride,rideau,riden,rident,rider,ridered,ridge,ridged,ridgel,ridger,ridgil,ridging,ridgy,riding,ridotto,rie,riem,riempie,rier,rife,rifely,riff,riffle,riffler,rifle,rifler,riflery,rifling,rift,rifter,rifty,rig,rigbane,riggald,rigger,rigging,riggish,riggite,riggot,right,righten,righter,rightle,rightly,righto,righty,rigid,rigidly,rigling,rignum,rigol,rigor,rigsby,rikisha,rikk,riksha,rikshaw,rilawa,rile,riley,rill,rillet,rillett,rillock,rilly,rim,rima,rimal,rimate,rimbase,rime,rimer,rimfire,rimland,rimless,rimmed,rimmer,rimose,rimous,rimpi,rimple,rimrock,rimu,rimula,rimy,rinceau,rinch,rincon,rind,rinded,rindle,rindy,rine,ring,ringe,ringed,ringent,ringer,ringeye,ringing,ringite,ringle,ringlet,ringman,ringtaw,ringy,rink,rinka,rinker,rinkite,rinner,rinse,rinser,rinsing,rio,riot,rioter,rioting,riotist,riotous,riotry,rip,ripa,ripal,ripcord,ripe,ripely,ripen,ripener,riper,ripgut,ripieno,ripier,ripost,riposte,ripper,rippet,rippier,ripping,rippit,ripple,rippler,ripplet,ripply,rippon,riprap,ripsack,ripsaw,ripup,risala,risberm,rise,risen,riser,rishi,risible,risibly,rising,risk,risker,riskful,riskily,riskish,risky,risp,risper,risque,risquee,rissel,risser,rissle,rissoid,rist,ristori,rit,rita,rite,ritling,ritual,ritzy,riva,rivage,rival,rivalry,rive,rivel,rivell,riven,river,rivered,riverly,rivery,rivet,riveter,riving,rivose,rivulet,rix,rixy,riyal,rizzar,rizzle,rizzom,roach,road,roadbed,roaded,roader,roading,roadite,roadman,roadway,roam,roamage,roamer,roaming,roan,roanoke,roar,roarer,roaring,roast,roaster,rob,robalo,roband,robber,robbery,robbin,robbing,robe,rober,roberd,robin,robinet,robing,robinin,roble,robomb,robot,robotry,robur,robust,roc,rocher,rochet,rock,rockaby,rocker,rockery,rocket,rockety,rocking,rockish,rocklay,rocklet,rockman,rocky,rococo,rocta,rod,rodd,roddin,rodding,rode,rodent,rodeo,rodge,rodham,roding,rodless,rodlet,rodlike,rodman,rodney,rodsman,rodster,rodwood,roe,roebuck,roed,roelike,roer,roey,rog,rogan,roger,roggle,rogue,roguery,roguing,roguish,rohan,rohob,rohun,rohuna,roi,roid,roil,roily,roister,roit,roka,roke,rokeage,rokee,rokelay,roker,rokey,roky,role,roleo,roll,rolled,roller,rolley,rollick,rolling,rollix,rollmop,rollock,rollway,roloway,romaika,romaine,romal,romance,romancy,romanza,romaunt,rombos,romeite,romero,rommack,romp,romper,romping,rompish,rompu,rompy,roncet,ronco,rond,ronde,rondeau,rondel,rondino,rondle,rondo,rondure,rone,rongeur,ronquil,rontgen,ronyon,rood,roodle,roof,roofage,roofer,roofing,rooflet,roofman,roofy,rooibok,rooinek,rook,rooker,rookery,rookie,rookish,rooklet,rooky,rool,room,roomage,roomed,roomer,roomful,roomie,roomily,roomlet,roomth,roomthy,roomy,roon,roosa,roost,roosted,rooster,root,rootage,rootcap,rooted,rooter,rootery,rootle,rootlet,rooty,roove,ropable,rope,ropeman,roper,ropery,ropes,ropeway,ropily,roping,ropish,ropp,ropy,roque,roquer,roquet,roquist,roral,roric,rorqual,rorty,rory,rosal,rosario,rosary,rosated,roscid,rose,roseal,roseate,rosebay,rosebud,rosed,roseine,rosel,roselet,rosella,roselle,roseola,roseous,rosery,roset,rosetan,rosette,rosetty,rosetum,rosety,rosied,rosier,rosilla,rosillo,rosily,rosin,rosiny,rosland,rosoli,rosolic,rosolio,ross,rosser,rossite,rostel,roster,rostra,rostral,rostrum,rosular,rosy,rot,rota,rotal,rotaman,rotan,rotang,rotary,rotate,rotated,rotator,rotch,rote,rotella,roter,rotge,rotgut,rother,rotifer,roto,rotor,rottan,rotten,rotter,rotting,rottle,rottock,rottolo,rotula,rotulad,rotular,rotulet,rotulus,rotund,rotunda,rotundo,roub,roucou,roud,roue,rouelle,rouge,rougeau,rougeot,rough,roughen,rougher,roughet,roughie,roughly,roughy,rougy,rouille,rouky,roulade,rouleau,roun,rounce,rouncy,round,rounded,roundel,rounder,roundly,roundup,roundy,roup,rouper,roupet,roupily,roupit,roupy,rouse,rouser,rousing,roust,rouster,rout,route,router,routh,routhie,routhy,routine,routing,routous,rove,rover,rovet,rovetto,roving,row,rowable,rowan,rowboat,rowdily,rowdy,rowed,rowel,rowen,rower,rowet,rowing,rowlet,rowlock,rowport,rowty,rowy,rox,roxy,royal,royale,royalet,royally,royalty,royet,royt,rozum,ruach,ruana,rub,rubasse,rubato,rubbed,rubber,rubbers,rubbery,rubbing,rubbish,rubble,rubbler,rubbly,rubdown,rubelet,rubella,rubelle,rubeola,rubiate,rubican,rubidic,rubied,rubific,rubify,rubine,rubious,ruble,rublis,rubor,rubric,rubrica,rubrify,ruby,ruche,ruching,ruck,rucker,ruckle,rucksey,ruckus,rucky,ruction,rud,rudas,rudd,rudder,ruddied,ruddily,ruddle,ruddock,ruddy,rude,rudely,ruderal,rudesby,rudge,rudish,rudity,rue,rueful,ruelike,ruelle,ruen,ruer,ruesome,ruewort,ruff,ruffed,ruffer,ruffian,ruffin,ruffle,ruffled,ruffler,ruffly,rufous,rufter,rufus,rug,ruga,rugate,rugged,rugging,ruggle,ruggy,ruglike,rugosa,rugose,rugous,ruin,ruinate,ruined,ruiner,ruing,ruinous,rukh,rulable,rule,ruledom,ruler,ruling,rull,ruller,rullion,rum,rumal,rumble,rumbler,rumbly,rumbo,rumen,ruminal,rumkin,rumless,rumly,rummage,rummagy,rummer,rummily,rummish,rummy,rumness,rumney,rumor,rumorer,rump,rumpad,rumpade,rumple,rumply,rumpus,rumshop,run,runaway,runback,runby,runch,rundale,rundle,rundlet,rune,runed,runer,runfish,rung,runic,runite,runkle,runkly,runless,runlet,runman,runnel,runner,runnet,running,runny,runoff,runout,runover,runrig,runt,runted,runtee,runtish,runty,runway,rupa,rupee,rupia,rupiah,rupial,rupie,rupitic,ruptile,ruption,ruptive,rupture,rural,rurally,rurban,ruru,ruse,rush,rushed,rushen,rusher,rushing,rushlit,rushy,rusine,rusk,ruskin,rusky,rusma,rusot,ruspone,russel,russet,russety,russia,russud,rust,rustful,rustic,rustily,rustle,rustler,rustly,rustre,rustred,rusty,ruswut,rut,rutate,rutch,ruth,ruther,ruthful,rutic,rutile,rutin,ruttee,rutter,ruttish,rutty,rutyl,ruvid,rux,ryal,ryania,rybat,ryder,rye,ryen,ryme,rynd,rynt,ryot,ryotwar,rype,rypeck,s,sa,saa,sab,sabalo,sabanut,sabbat,sabbath,sabe,sabeca,sabella,saber,sabered,sabicu,sabina,sabine,sabino,sable,sably,sabora,sabot,saboted,sabra,sabulum,saburra,sabutan,sabzi,sac,sacaton,sacatra,saccade,saccate,saccos,saccule,saccus,sachem,sachet,sack,sackage,sackbag,sackbut,sacked,sacken,sacker,sackful,sacking,sackman,saclike,saco,sacope,sacque,sacra,sacrad,sacral,sacred,sacring,sacrist,sacro,sacrum,sad,sadden,saddik,saddish,saddle,saddled,saddler,sade,sadh,sadhe,sadhu,sadic,sadiron,sadism,sadist,sadly,sadness,sado,sadr,saecula,saeter,saeume,safari,safe,safely,safen,safener,safety,saffian,safflor,safflow,saffron,safrole,saft,sag,saga,sagaie,sagaman,sagathy,sage,sagely,sagene,sagger,sagging,saggon,saggy,saging,sagitta,sagless,sago,sagoin,saguaro,sagum,saguran,sagwire,sagy,sah,sahh,sahib,sahme,sahukar,sai,saic,said,saiga,sail,sailage,sailed,sailer,sailing,sailor,saily,saim,saimiri,saimy,sain,saint,sainted,saintly,saip,sair,sairly,sairve,sairy,saithe,saj,sajou,sake,sakeber,sakeen,saker,sakeret,saki,sakieh,sakulya,sal,salaam,salable,salably,salacot,salad,salago,salal,salamo,salar,salary,salat,salay,sale,salele,salema,salep,salfern,salic,salicin,salicyl,salient,salify,saligot,salina,saline,salite,salited,saliva,salival,salix,salle,sallee,sallet,sallier,salloo,sallow,sallowy,sally,salma,salmiac,salmine,salmis,salmon,salol,salomon,salon,saloon,saloop,salp,salpa,salpian,salpinx,salpoid,salse,salsify,salt,salta,saltant,saltary,saltate,saltcat,salted,saltee,salten,salter,saltern,saltery,saltfat,saltier,saltine,salting,saltish,saltly,saltman,saltpan,saltus,salty,saluki,salung,salute,saluter,salvage,salve,salver,salviol,salvo,salvor,salvy,sam,samadh,samadhi,samaj,saman,samara,samaria,samarra,samba,sambal,sambar,sambo,sambuk,sambuke,same,samekh,samel,samely,samen,samh,samhita,samiel,samiri,samisen,samite,samkara,samlet,sammel,sammer,sammier,sammy,samovar,samp,sampan,sampi,sample,sampler,samsara,samshu,samson,samurai,san,sanable,sanai,sancho,sanct,sancta,sanctum,sand,sandak,sandal,sandan,sandbag,sandbin,sandbox,sandboy,sandbur,sanded,sander,sanders,sandhi,sanding,sandix,sandman,sandust,sandy,sane,sanely,sang,sanga,sangar,sangei,sanger,sangha,sangley,sangrel,sangsue,sanicle,sanies,sanify,sanious,sanity,sanjak,sank,sankha,sannup,sans,sansei,sansi,sant,santal,santene,santimi,santims,santir,santon,sao,sap,sapa,sapajou,sapan,sapbush,sapek,sapful,saphead,saphena,saphie,sapid,sapient,sapin,sapinda,saple,sapless,sapling,sapo,saponin,sapor,sapota,sapote,sappare,sapper,sapphic,sapping,sapples,sappy,saprine,sapsago,sapsuck,sapwood,sapwort,sar,saraad,saraf,sarangi,sarcasm,sarcast,sarcine,sarcle,sarcler,sarcode,sarcoid,sarcoma,sarcous,sard,sardel,sardine,sardius,sare,sargo,sargus,sari,sarif,sarigue,sarinda,sarip,sark,sarkar,sarkful,sarkine,sarking,sarkit,sarlak,sarlyk,sarment,sarna,sarod,saron,sarong,saronic,saros,sarpler,sarpo,sarra,sarraf,sarsa,sarsen,sart,sartage,sartain,sartor,sarus,sarwan,sasa,sasan,sasani,sash,sashay,sashery,sashing,sasin,sasine,sassaby,sassy,sat,satable,satan,satang,satanic,satara,satchel,sate,sateen,satiate,satient,satiety,satin,satine,satined,satiny,satire,satiric,satisfy,satlijk,satrap,satrapy,satron,sattle,sattva,satura,satyr,satyric,sauce,saucer,saucily,saucy,sauf,sauger,saugh,saughen,sauld,saulie,sault,saulter,saum,saumon,saumont,sauna,saunter,sauqui,saur,saurel,saurian,saury,sausage,saut,saute,sauteur,sauty,sauve,savable,savacu,savage,savanna,savant,savarin,save,saved,saveloy,saver,savin,saving,savior,savola,savor,savored,savorer,savory,savour,savoy,savoyed,savssat,savvy,saw,sawah,sawali,sawarra,sawback,sawbill,sawbuck,sawbwa,sawder,sawdust,sawed,sawer,sawfish,sawfly,sawing,sawish,sawlike,sawman,sawmill,sawmon,sawmont,sawn,sawney,sawt,sawway,sawwort,sawyer,sax,saxhorn,saxten,saxtie,saxtuba,say,saya,sayable,sayer,sayette,sayid,saying,sazen,sblood,scab,scabbed,scabble,scabby,scabid,scabies,scabish,scabrid,scad,scaddle,scads,scaff,scaffer,scaffie,scaffle,scaglia,scala,scalage,scalar,scalare,scald,scalded,scalder,scaldic,scaldy,scale,scaled,scalena,scalene,scaler,scales,scaling,scall,scalled,scallom,scallop,scalma,scaloni,scalp,scalpel,scalper,scalt,scaly,scam,scamble,scamell,scamler,scamles,scamp,scamper,scan,scandal,scandia,scandic,scanmag,scanner,scant,scantle,scantly,scanty,scap,scape,scapel,scapha,scapoid,scapose,scapple,scapula,scapus,scar,scarab,scarce,scarcen,scare,scarer,scarf,scarfed,scarfer,scarfy,scarid,scarify,scarily,scarlet,scarman,scarn,scaroid,scarp,scarred,scarrer,scarry,scart,scarth,scarus,scarved,scary,scase,scasely,scat,scatch,scathe,scatter,scatty,scatula,scaul,scaum,scaup,scauper,scaur,scaurie,scaut,scavage,scavel,scaw,scawd,scawl,scazon,sceat,scena,scenary,scend,scene,scenery,scenic,scenist,scenite,scent,scented,scenter,scepsis,scepter,sceptic,sceptry,scerne,schanz,schappe,scharf,schelly,schema,scheme,schemer,schemy,schene,schepel,schepen,scherm,scherzi,scherzo,schesis,schism,schisma,schist,schloop,schmelz,scho,schola,scholae,scholar,scholia,schone,school,schoon,schorl,schorly,schout,schtoff,schuh,schuhe,schuit,schule,schuss,schute,schwa,schwarz,sciapod,sciarid,sciatic,scibile,science,scient,scincid,scind,sciniph,scintle,scion,scious,scirrhi,scissel,scissor,sciurid,sclaff,sclate,sclater,sclaw,scler,sclera,scleral,sclere,scliff,sclim,sclimb,scoad,scob,scobby,scobs,scoff,scoffer,scog,scoggan,scogger,scoggin,scoke,scolb,scold,scolder,scolex,scolia,scoliid,scolion,scolite,scollop,scolog,sconce,sconcer,scone,scoon,scoop,scooped,scooper,scoot,scooter,scopa,scopate,scope,scopet,scopic,scopine,scopola,scops,scopula,scorch,score,scored,scorer,scoria,scoriac,scoriae,scorify,scoring,scorn,scorned,scorner,scorny,scorper,scorse,scot,scotale,scotch,scote,scoter,scotia,scotino,scotoma,scotomy,scouch,scouk,scoup,scour,scoured,scourer,scourge,scoury,scouse,scout,scouter,scouth,scove,scovel,scovy,scow,scowder,scowl,scowler,scowman,scrab,scrabe,scrae,scrag,scraggy,scraily,scram,scran,scranch,scrank,scranky,scranny,scrap,scrape,scraped,scraper,scrapie,scrappy,scrapy,scrat,scratch,scrath,scrauch,scraw,scrawk,scrawl,scrawly,scrawm,scrawny,scray,scraze,screak,screaky,scream,screamy,scree,screech,screed,screek,screel,screen,screeny,screet,screeve,screich,screigh,screve,screver,screw,screwed,screwer,screwy,scribal,scribe,scriber,scride,scrieve,scrike,scrim,scrime,scrimer,scrimp,scrimpy,scrin,scrinch,scrine,scringe,scrip,scripee,script,scritch,scrive,scriven,scriver,scrob,scrobe,scrobis,scrod,scroff,scrog,scroggy,scrolar,scroll,scrolly,scroo,scrooch,scrooge,scroop,scrota,scrotal,scrotum,scrouge,scrout,scrow,scroyle,scrub,scrubby,scruf,scruff,scruffy,scruft,scrum,scrump,scrunch,scrunge,scrunt,scruple,scrush,scruto,scruze,scry,scryer,scud,scudder,scuddle,scuddy,scudi,scudler,scudo,scuff,scuffed,scuffer,scuffle,scuffly,scuffy,scuft,scufter,scug,sculch,scull,sculler,scullog,sculp,sculper,sculpin,sculpt,sculsh,scum,scumber,scumble,scummed,scummer,scummy,scun,scunder,scunner,scup,scupful,scupper,scuppet,scur,scurdy,scurf,scurfer,scurfy,scurry,scurvy,scuse,scut,scuta,scutage,scutal,scutate,scutch,scute,scutel,scutter,scuttle,scutty,scutula,scutum,scybala,scye,scypha,scyphae,scyphi,scyphoi,scyphus,scyt,scytale,scythe,sdeath,se,sea,seadog,seafare,seafolk,seafowl,seagirt,seagoer,seah,seak,seal,sealant,sealch,sealed,sealer,sealery,sealess,sealet,sealike,sealine,sealing,seam,seaman,seamark,seamed,seamer,seaming,seamlet,seamost,seamrog,seamy,seance,seaport,sear,searce,searcer,search,seared,searer,searing,seary,seasick,seaside,season,seat,seatang,seated,seater,seathe,seating,seatron,seave,seavy,seawant,seaward,seaware,seaway,seaweed,seawife,seaworn,seax,sebacic,sebait,sebate,sebific,sebilla,sebkha,sebum,sebundy,sec,secable,secalin,secancy,secant,secede,seceder,secern,secesh,sech,seck,seclude,secluse,secohm,second,seconde,secos,secpar,secque,secre,secrecy,secret,secreta,secrete,secreto,sect,sectary,sectile,section,sectism,sectist,sective,sector,secular,secund,secure,securer,sedan,sedate,sedent,sedge,sedged,sedging,sedgy,sedile,sedilia,seduce,seducee,seducer,seduct,sedum,see,seeable,seech,seed,seedage,seedbed,seedbox,seeded,seeder,seedful,seedily,seedkin,seedlet,seedlip,seedman,seedy,seege,seeing,seek,seeker,seeking,seel,seelful,seely,seem,seemer,seeming,seemly,seen,seenie,seep,seepage,seeped,seepy,seer,seeress,seerpaw,seesaw,seesee,seethe,seg,seggar,seggard,segged,seggrom,segment,sego,segol,seiche,seidel,seine,seiner,seise,seism,seismal,seismic,seit,seity,seize,seizer,seizin,seizing,seizor,seizure,sejant,sejoin,sejunct,sekos,selah,selamin,seldom,seldor,sele,select,selenic,self,selfdom,selfful,selfish,selfism,selfist,selfly,selion,sell,sella,sellar,sellate,seller,sellie,selling,sellout,selly,selsyn,selt,selva,selvage,semarum,sematic,semball,semble,seme,semeed,semeia,semeion,semen,semence,semese,semi,semiape,semiarc,semibay,semic,semicup,semidry,semiegg,semifib,semifit,semify,semigod,semihot,seminal,seminar,semiorb,semiped,semipro,semiraw,semis,semita,semitae,semital,semiurn,semmet,semmit,semola,semsem,sen,senaite,senam,senary,senate,senator,sence,sencion,send,sendal,sendee,sender,sending,senega,senegin,senesce,senile,senior,senna,sennet,sennit,sennite,sensa,sensal,sensate,sense,sensed,sensify,sensile,sension,sensism,sensist,sensive,sensize,senso,sensor,sensory,sensual,sensum,sensyne,sent,sentry,sepad,sepal,sepaled,sephen,sepia,sepian,sepiary,sepic,sepioid,sepion,sepiost,sepium,sepone,sepoy,seppuku,seps,sepsine,sepsis,sept,septa,septal,septan,septane,septate,septave,septet,septic,septier,septile,septime,septoic,septole,septum,septuor,sequa,sequel,sequela,sequent,sequest,sequin,ser,sera,serab,seragli,serai,serail,seral,serang,serape,seraph,serau,seraw,sercial,serdab,sere,sereh,serene,serf,serfage,serfdom,serfish,serfism,serge,serger,serging,serial,seriary,seriate,sericea,sericin,seriema,series,serif,serific,serin,serine,seringa,serio,serious,serment,sermo,sermon,sero,serolin,seron,seroon,seroot,seropus,serosa,serous,serow,serpent,serphid,serpigo,serpula,serra,serrage,serran,serrana,serrano,serrate,serried,serry,sert,serta,sertule,sertum,serum,serumal,serut,servage,serval,servant,serve,server,servery,servet,service,servile,serving,servist,servo,sesame,sesma,sesqui,sess,sessile,session,sestet,sesti,sestiad,sestina,sestine,sestole,sestuor,set,seta,setae,setal,setback,setbolt,setdown,setfast,seth,sethead,setier,setline,setness,setoff,seton,setose,setous,setout,setover,setsman,sett,settee,setter,setting,settle,settled,settler,settlor,setula,setule,setup,setwall,setwise,setwork,seugh,seven,sevener,seventh,seventy,sever,several,severe,severer,severy,sew,sewable,sewage,sewan,sewed,sewen,sewer,sewered,sewery,sewing,sewless,sewn,sex,sexed,sexern,sexfid,sexfoil,sexhood,sexifid,sexiped,sexless,sexlike,sexly,sext,sextain,sextan,sextans,sextant,sextar,sextary,sextern,sextet,sextic,sextile,sexto,sextole,sexton,sextry,sextula,sexual,sexuale,sexuous,sexy,sey,sfoot,sh,sha,shab,shabash,shabbed,shabble,shabby,shachle,shachly,shack,shackle,shackly,shacky,shad,shade,shaded,shader,shadily,shadine,shading,shadkan,shadoof,shadow,shadowy,shady,shaffle,shaft,shafted,shafter,shafty,shag,shagbag,shagged,shaggy,shaglet,shagrag,shah,shahdom,shahi,shahin,shaikh,shaitan,shake,shaken,shaker,shakers,shakha,shakily,shaking,shako,shakti,shaku,shaky,shale,shall,shallal,shallon,shallop,shallot,shallow,shallu,shalom,shalt,shalwar,shaly,sham,shama,shamal,shamalo,shaman,shamba,shamble,shame,shamed,shamer,shamir,shammed,shammer,shammy,shampoo,shan,shandry,shandy,shangan,shank,shanked,shanker,shanna,shanny,shansa,shant,shanty,shap,shape,shaped,shapely,shapen,shaper,shaping,shaps,shapy,shard,sharded,shardy,share,sharer,shargar,shark,sharky,sharn,sharny,sharp,sharpen,sharper,sharpie,sharply,sharps,sharpy,sharrag,sharry,shaster,shastra,shastri,shat,shatan,shatter,shaugh,shaul,shaup,shauri,shauwe,shave,shaved,shavee,shaven,shaver,shavery,shaving,shaw,shawl,shawled,shawm,shawny,shawy,shay,she,shea,sheaf,sheafy,sheal,shear,sheard,shearer,shears,sheat,sheath,sheathe,sheathy,sheave,sheaved,shebang,shebeen,shed,shedded,shedder,sheder,shedman,shee,sheely,sheen,sheenly,sheeny,sheep,sheepy,sheer,sheered,sheerly,sheet,sheeted,sheeter,sheety,sheik,sheikly,shekel,shela,sheld,shelder,shelf,shelfy,shell,shellac,shelled,sheller,shellum,shelly,shelta,shelter,shelty,shelve,shelver,shelvy,shend,sheng,sheolic,sheppey,sher,sherbet,sheriat,sherif,sherifa,sheriff,sherifi,sherify,sherry,sheth,sheugh,sheva,shevel,shevri,shewa,shewel,sheyle,shi,shibah,shibar,shice,shicer,shicker,shide,shied,shiel,shield,shier,shies,shiest,shift,shifter,shifty,shigram,shih,shikar,shikara,shikari,shikimi,shikken,shiko,shikra,shilf,shilfa,shill,shilla,shillet,shilloo,shilpit,shim,shimal,shimmer,shimmy,shimose,shimper,shin,shindig,shindle,shindy,shine,shiner,shingle,shingly,shinily,shining,shinner,shinny,shinty,shiny,shinza,ship,shipboy,shipful,shiplap,shiplet,shipman,shipped,shipper,shippo,shippon,shippy,shipway,shire,shirk,shirker,shirky,shirl,shirpit,shirr,shirt,shirty,shish,shisham,shisn,shita,shither,shittah,shittim,shiv,shive,shiver,shivery,shivey,shivoo,shivy,sho,shoad,shoader,shoal,shoaler,shoaly,shoat,shock,shocker,shod,shodden,shoddy,shode,shoder,shoe,shoeboy,shoeing,shoeman,shoer,shoful,shog,shogaol,shoggie,shoggle,shoggly,shogi,shogun,shohet,shoji,shola,shole,shone,shoneen,shoo,shood,shoofa,shoofly,shooi,shook,shool,shooler,shoop,shoor,shoot,shootee,shooter,shop,shopboy,shopful,shophar,shoplet,shopman,shoppe,shopper,shoppy,shoq,shor,shoran,shore,shored,shorer,shoring,shorn,short,shorten,shorter,shortly,shorts,shot,shote,shotgun,shotman,shott,shotted,shotten,shotter,shotty,shou,should,shout,shouter,shoval,shove,shovel,shover,show,showdom,shower,showery,showily,showing,showish,showman,shown,showup,showy,shoya,shrab,shradh,shraf,shrag,shram,shrank,shrap,shrave,shravey,shred,shreddy,shree,shreeve,shrend,shrew,shrewd,shrewdy,shrewly,shriek,shrieky,shrift,shrike,shrill,shrilly,shrimp,shrimpi,shrimpy,shrinal,shrine,shrink,shrinky,shrip,shrite,shrive,shrivel,shriven,shriver,shroff,shrog,shroud,shroudy,shrove,shrover,shrub,shrubby,shruff,shrug,shrunk,shrups,shuba,shuck,shucker,shucks,shudder,shuff,shuffle,shug,shul,shuler,shumac,shun,shune,shunner,shunt,shunter,shure,shurf,shush,shusher,shut,shutoff,shutout,shutten,shutter,shuttle,shy,shyer,shyish,shyly,shyness,shyster,si,siak,sial,sialic,sialid,sialoid,siamang,sib,sibbed,sibbens,sibber,sibby,sibilus,sibling,sibness,sibrede,sibship,sibyl,sibylic,sibylla,sic,sicca,siccant,siccate,siccity,sice,sick,sickbed,sicken,sicker,sickish,sickle,sickled,sickler,sickly,sicsac,sicula,sicular,sidder,siddur,side,sideage,sidearm,sidecar,sided,sider,sideral,siderin,sides,sideway,sidhe,sidi,siding,sidle,sidler,sidling,sidth,sidy,sie,siege,sieger,sienna,sier,siering,sierra,sierran,siesta,sieve,siever,sievy,sifac,sifaka,sife,siffle,sifflet,sifflot,sift,siftage,sifted,sifter,sifting,sig,sigger,sigh,sigher,sighful,sighing,sight,sighted,sighten,sighter,sightly,sighty,sigil,sigla,siglos,sigma,sigmate,sigmoid,sign,signal,signary,signate,signee,signer,signet,signify,signior,signist,signman,signory,signum,sika,sikar,sikatch,sike,sikerly,siket,sikhara,sikhra,sil,silage,silane,sile,silen,silence,silency,sileni,silenic,silent,silenus,silesia,silex,silica,silicam,silicic,silicle,silico,silicon,silicyl,siliqua,silique,silk,silked,silken,silker,silkie,silkily,silkman,silky,sill,sillar,siller,sillily,sillock,sillon,silly,silo,siloist,silphid,silt,siltage,silting,silty,silurid,silva,silvan,silver,silvern,silvery,silvics,silyl,sima,simal,simar,simball,simbil,simblin,simblot,sime,simiad,simial,simian,similar,simile,similor,simioid,simious,simity,simkin,simlin,simling,simmer,simmon,simnel,simony,simool,simoom,simoon,simous,simp,simpai,simper,simple,simpler,simplex,simply,simsim,simson,simular,simuler,sin,sina,sinaite,sinal,sinamay,sinapic,sinapis,sinawa,since,sincere,sind,sinder,sindle,sindoc,sindon,sindry,sine,sinew,sinewed,sinewy,sinful,sing,singe,singed,singer,singey,singh,singing,single,singled,singler,singles,singlet,singly,singult,sinh,sink,sinkage,sinker,sinking,sinky,sinless,sinlike,sinnen,sinner,sinnet,sinopia,sinople,sinsion,sinsyne,sinter,sintoc,sinuate,sinuose,sinuous,sinus,sinusal,sinward,siol,sion,sip,sipage,sipe,siper,siphoid,siphon,sipid,siping,sipling,sipper,sippet,sippio,sir,sircar,sirdar,sire,siren,sirene,sirenic,sireny,siress,sirgang,sirian,siricid,sirih,siris,sirkeer,sirki,sirky,sirloin,siroc,sirocco,sirpea,sirple,sirpoon,sirrah,sirree,sirship,sirup,siruped,siruper,sirupy,sis,sisal,sise,sisel,sish,sisham,sisi,siskin,siss,sissify,sissoo,sissy,sist,sister,sistern,sistle,sistrum,sit,sitao,sitar,sitch,site,sitfast,sith,sithe,sithens,sitient,sitio,sittee,sitten,sitter,sittine,sitting,situal,situate,situla,situlae,situs,siva,siver,sivvens,siwash,six,sixain,sixer,sixfoil,sixfold,sixsome,sixte,sixteen,sixth,sixthet,sixthly,sixty,sizable,sizably,sizal,sizar,size,sized,sizeman,sizer,sizes,sizing,sizy,sizygia,sizz,sizzard,sizzing,sizzle,sjambok,skaddle,skaff,skaffie,skag,skair,skal,skance,skart,skasely,skat,skate,skater,skatiku,skating,skatist,skatole,skaw,skean,skedge,skee,skeed,skeeg,skeel,skeely,skeen,skeer,skeered,skeery,skeet,skeeter,skeezix,skeg,skegger,skeif,skeigh,skeily,skein,skeiner,skeipp,skel,skelder,skelf,skelic,skell,skellat,skeller,skellum,skelly,skelp,skelper,skelpin,skelter,skemmel,skemp,sken,skene,skeo,skeough,skep,skepful,skeptic,sker,skere,skerret,skerry,sketch,sketchy,skete,skevish,skew,skewed,skewer,skewl,skewly,skewy,skey,ski,skiapod,skibby,skice,skid,skidded,skidder,skiddoo,skiddy,skidpan,skidway,skied,skieppe,skier,skies,skiff,skift,skiing,skijore,skil,skilder,skill,skilled,skillet,skilly,skilpot,skilts,skim,skime,skimmed,skimmer,skimp,skimpy,skin,skinch,skinful,skink,skinker,skinkle,skinned,skinner,skinny,skip,skipman,skippel,skipper,skippet,skipple,skippy,skirl,skirp,skirr,skirreh,skirret,skirt,skirted,skirter,skirty,skit,skite,skiter,skither,skitter,skittle,skitty,skiv,skive,skiver,skiving,sklate,sklater,sklent,skoal,skoo,skookum,skoptsy,skout,skraigh,skrike,skrupul,skua,skulk,skulker,skull,skulled,skully,skulp,skun,skunk,skunky,skuse,sky,skybal,skyey,skyful,skyish,skylark,skyless,skylike,skylook,skyman,skyphoi,skyphos,skyre,skysail,skyugle,skyward,skyway,sla,slab,slabbed,slabber,slabby,slabman,slack,slacked,slacken,slacker,slackly,slad,sladang,slade,slae,slag,slagger,slaggy,slagman,slain,slainte,slait,slake,slaker,slaking,slaky,slam,slamp,slander,slane,slang,slangy,slank,slant,slantly,slap,slape,slapper,slare,slart,slarth,slash,slashed,slasher,slashy,slat,slatch,slate,slater,slath,slather,slatify,slating,slatish,slatted,slatter,slaty,slaum,slave,slaved,slaver,slavery,slavey,slaving,slavish,slaw,slay,slayer,slaying,sleathy,sleave,sleaved,sleazy,sleck,sled,sledded,sledder,sledful,sledge,sledger,slee,sleech,sleechy,sleek,sleeken,sleeker,sleekit,sleekly,sleeky,sleep,sleeper,sleepry,sleepy,sleer,sleet,sleety,sleeve,sleeved,sleever,sleigh,sleight,slender,slent,slepez,slept,slete,sleuth,slew,slewed,slewer,slewing,sley,sleyer,slice,sliced,slicer,slich,slicht,slicing,slick,slicken,slicker,slickly,slid,slidage,slidden,slidder,slide,slided,slider,sliding,slifter,slight,slighty,slim,slime,slimer,slimily,slimish,slimly,slimpsy,slimsy,slimy,sline,sling,slinge,slinger,slink,slinker,slinky,slip,slipe,slipman,slipped,slipper,slippy,slipway,slirt,slish,slit,slitch,slite,slither,slithy,slitted,slitter,slitty,slive,sliver,slivery,sliving,sloan,slob,slobber,slobby,slock,slocken,slod,slodder,slodge,slodger,sloe,slog,slogan,slogger,sloka,sloke,slon,slone,slonk,sloo,sloom,sloomy,sloop,sloosh,slop,slope,sloped,slopely,sloper,sloping,slopped,sloppy,slops,slopy,slorp,slosh,slosher,sloshy,slot,slote,sloted,sloth,slotted,slotter,slouch,slouchy,slough,sloughy,slour,sloush,sloven,slow,slowish,slowly,slowrie,slows,sloyd,slub,slubber,slubby,slud,sludder,sludge,sludged,sludger,sludgy,slue,sluer,slug,slugged,slugger,sluggy,sluice,sluicer,sluicy,sluig,sluit,slum,slumber,slumdom,slumgum,slummer,slummy,slump,slumpy,slung,slunge,slunk,slunken,slur,slurbow,slurp,slurry,slush,slusher,slushy,slut,slutch,slutchy,sluther,slutter,slutty,sly,slyish,slyly,slyness,slype,sma,smack,smackee,smacker,smaik,small,smallen,smaller,smalls,smally,smalm,smalt,smalter,smalts,smaragd,smarm,smarmy,smart,smarten,smartly,smarty,smash,smasher,smashup,smatter,smaze,smear,smeared,smearer,smeary,smectic,smectis,smeddum,smee,smeech,smeek,smeeky,smeer,smeeth,smegma,smell,smelled,smeller,smelly,smelt,smelter,smeth,smethe,smeuse,smew,smich,smicker,smicket,smiddie,smiddum,smidge,smidgen,smilax,smile,smiler,smilet,smiling,smily,smirch,smirchy,smiris,smirk,smirker,smirkle,smirkly,smirky,smirtle,smit,smitch,smite,smiter,smith,smitham,smither,smithy,smiting,smitten,smock,smocker,smog,smoke,smoked,smoker,smokery,smokily,smoking,smokish,smoky,smolder,smolt,smooch,smoochy,smoodge,smook,smoot,smooth,smopple,smore,smote,smother,smotter,smouch,smous,smouse,smouser,smout,smriti,smudge,smudged,smudger,smudgy,smug,smuggle,smugism,smugly,smuisty,smur,smurr,smurry,smuse,smush,smut,smutch,smutchy,smutted,smutter,smutty,smyth,smytrie,snab,snabbie,snabble,snack,snackle,snaff,snaffle,snafu,snag,snagged,snagger,snaggy,snagrel,snail,snails,snaily,snaith,snake,snaker,snakery,snakily,snaking,snakish,snaky,snap,snapbag,snape,snaper,snapped,snapper,snapps,snappy,snaps,snapy,snare,snarer,snark,snarl,snarler,snarly,snary,snaste,snatch,snatchy,snath,snathe,snavel,snavvle,snaw,snead,sneak,sneaker,sneaky,sneap,sneath,sneathe,sneb,sneck,snecker,snecket,sned,snee,sneer,sneerer,sneery,sneesh,sneest,sneesty,sneeze,sneezer,sneezy,snell,snelly,snerp,snew,snib,snibble,snibel,snicher,snick,snicker,snicket,snickey,snickle,sniddle,snide,sniff,sniffer,sniffle,sniffly,sniffy,snift,snifter,snifty,snig,snigger,sniggle,snip,snipe,sniper,sniping,snipish,snipper,snippet,snippy,snipy,snirl,snirt,snirtle,snitch,snite,snithe,snithy,snittle,snivel,snively,snivy,snob,snobber,snobby,snobdom,snocher,snock,snocker,snod,snodly,snoek,snog,snoga,snoke,snood,snooded,snook,snooker,snoop,snooper,snoopy,snoose,snoot,snooty,snoove,snooze,snoozer,snoozle,snoozy,snop,snore,snorer,snoring,snork,snorkel,snorker,snort,snorter,snortle,snorty,snot,snotter,snotty,snouch,snout,snouted,snouter,snouty,snow,snowcap,snowie,snowily,snowish,snowk,snowl,snowy,snozzle,snub,snubbed,snubbee,snubber,snubby,snuck,snudge,snuff,snuffer,snuffle,snuffly,snuffy,snug,snugger,snuggle,snugify,snugly,snum,snup,snupper,snur,snurl,snurly,snurp,snurt,snuzzle,sny,snying,so,soak,soakage,soaked,soaken,soaker,soaking,soakman,soaky,soally,soam,soap,soapbox,soaper,soapery,soapily,soapsud,soapy,soar,soarer,soaring,soary,sob,sobber,sobbing,sobby,sobeit,sober,soberer,soberly,sobful,soboles,soc,socage,socager,soccer,soce,socht,social,society,socii,socius,sock,socker,socket,sockeye,socky,socle,socman,soco,sod,soda,sodaic,sodded,sodden,sodding,soddite,soddy,sodic,sodio,sodium,sodless,sodoku,sodomic,sodomy,sodwork,sody,soe,soekoe,soever,sofa,sofane,sofar,soffit,soft,softa,soften,softish,softly,softner,softy,sog,soger,soget,soggily,sogging,soggy,soh,soho,soil,soilage,soiled,soiling,soilure,soily,soiree,soja,sojourn,sok,soka,soke,sokeman,soken,sol,sola,solace,solacer,solan,solanal,solanum,solar,solate,solatia,solay,sold,soldado,soldan,solder,soldi,soldier,soldo,sole,solea,soleas,soleil,solely,solemn,solen,solent,soler,soles,soleus,soleyn,soli,solicit,solid,solidi,solidly,solidum,solidus,solio,soliped,solist,sollar,solo,solod,solodi,soloist,solon,soloth,soluble,solubly,solum,solute,solvate,solve,solvend,solvent,solver,soma,somal,somata,somatic,somber,sombre,some,someday,somehow,someone,somers,someway,somewhy,somital,somite,somitic,somma,somnial,somnify,somnus,sompay,sompne,sompner,son,sonable,sonance,sonancy,sonant,sonar,sonata,sond,sondeli,soneri,song,songful,songish,songle,songlet,songman,songy,sonhood,sonic,soniou,sonk,sonless,sonlike,sonly,sonnet,sonny,sonoric,sons,sonship,sonsy,sontag,soodle,soodly,sook,sooky,sool,sooloos,soon,sooner,soonish,soonly,soorawn,soord,soorkee,soot,sooter,sooth,soothe,soother,sootily,sooty,sop,sope,soph,sophia,sophic,sophism,sophy,sopite,sopor,sopper,sopping,soppy,soprani,soprano,sora,sorage,soral,sorb,sorbate,sorbent,sorbic,sorbile,sorbin,sorbite,sorbose,sorbus,sorcer,sorcery,sorchin,sorda,sordes,sordid,sordine,sordino,sordor,sore,soredia,soree,sorehon,sorely,sorema,sorgho,sorghum,sorgo,sori,soricid,sorite,sorites,sorn,sornare,sornari,sorner,sorning,soroban,sororal,sorose,sorosis,sorra,sorrel,sorrily,sorroa,sorrow,sorrowy,sorry,sort,sortal,sorted,sorter,sortie,sortly,sorty,sorus,sorva,sory,sosh,soshed,soso,sosoish,soss,sossle,sot,sotie,sotnia,sotnik,sotol,sots,sottage,sotted,sotter,sottish,sou,souari,soubise,soucar,souchet,souchy,soud,souffle,sough,sougher,sought,soul,soulack,souled,soulful,soulish,souly,soum,sound,sounder,soundly,soup,soupcon,souper,souple,soupy,sour,source,soured,souren,sourer,souring,sourish,sourly,sourock,soursop,sourtop,soury,souse,souser,souslik,soutane,souter,south,souther,sov,soviet,sovite,sovkhoz,sovran,sow,sowable,sowan,sowans,sowar,sowarry,sowback,sowbane,sowel,sowens,sower,sowfoot,sowing,sowins,sowl,sowle,sowlike,sowlth,sown,sowse,sowt,sowte,soy,soya,soybean,sozin,sozolic,sozzle,sozzly,spa,space,spaced,spacer,spacing,spack,spacy,spad,spade,spaded,spader,spadger,spading,spadix,spadone,spae,spaedom,spaeman,spaer,spahi,spaid,spaik,spairge,spak,spald,spalder,spale,spall,spaller,spalt,span,spancel,spandle,spandy,spane,spanemy,spang,spangle,spangly,spaniel,spaning,spank,spanker,spanky,spann,spannel,spanner,spanule,spar,sparada,sparch,spare,sparely,sparer,sparge,sparger,sparid,sparing,spark,sparked,sparker,sparkle,sparkly,sparks,sparky,sparm,sparoid,sparred,sparrer,sparrow,sparry,sparse,spart,sparth,spartle,sparver,spary,spasm,spasmed,spasmic,spastic,spat,spate,spatha,spathal,spathe,spathed,spathic,spatial,spatted,spatter,spattle,spatula,spatule,spave,spaver,spavie,spavied,spaviet,spavin,spawn,spawner,spawny,spay,spayad,spayard,spaying,speak,speaker,speal,spean,spear,spearer,speary,spec,spece,special,specie,species,specify,speck,specked,speckle,speckly,specks,specky,specs,specter,spectra,spectry,specula,specus,sped,speech,speed,speeder,speedy,speel,speen,speer,speiss,spelder,spelk,spell,speller,spelt,spelter,speltz,spelunk,spence,spencer,spend,spender,spense,spent,speos,sperate,sperity,sperket,sperm,sperma,spermic,spermy,sperone,spet,spetch,spew,spewer,spewing,spewy,spex,sphacel,sphecid,spheges,sphegid,sphene,sphenic,spheral,sphere,spheric,sphery,sphinx,spica,spical,spicant,spicate,spice,spiced,spicer,spicery,spicily,spicing,spick,spicket,spickle,spicose,spicous,spicula,spicule,spicy,spider,spidery,spidger,spied,spiegel,spiel,spieler,spier,spiff,spiffed,spiffy,spig,spignet,spigot,spike,spiked,spiker,spikily,spiking,spiky,spile,spiler,spiling,spilite,spill,spiller,spillet,spilly,spiloma,spilt,spilth,spilus,spin,spina,spinach,spinae,spinage,spinal,spinate,spinder,spindle,spindly,spine,spined,spinel,spinet,spingel,spink,spinner,spinney,spinoid,spinose,spinous,spinule,spiny,spionid,spiral,spirale,spiran,spirant,spirate,spire,spirea,spired,spireme,spiring,spirit,spirity,spirket,spiro,spiroid,spirous,spirt,spiry,spise,spit,spital,spitbox,spite,spitful,spitish,spitted,spitten,spitter,spittle,spitz,spiv,spivery,splash,splashy,splat,splatch,splay,splayed,splayer,spleen,spleeny,spleet,splenic,splet,splice,splicer,spline,splint,splinty,split,splodge,splodgy,splore,splosh,splotch,splunge,splurge,splurgy,splurt,spoach,spode,spodium,spoffle,spoffy,spogel,spoil,spoiled,spoiler,spoilt,spoke,spoken,spoky,spole,spolia,spolium,spondee,spondyl,spong,sponge,sponged,sponger,spongin,spongy,sponsal,sponson,sponsor,spoof,spoofer,spook,spooky,spool,spooler,spoom,spoon,spooner,spoony,spoor,spoorer,spoot,spor,sporal,spore,spored,sporid,sporoid,sporont,sporous,sporran,sport,sporter,sportly,sports,sporty,sporule,sposh,sposhy,spot,spotted,spotter,spottle,spotty,spousal,spouse,spousy,spout,spouter,spouty,sprack,sprad,sprag,spraich,sprain,spraint,sprang,sprank,sprat,spratty,sprawl,sprawly,spray,sprayer,sprayey,spread,spready,spreath,spree,spreeuw,spreng,sprent,spret,sprew,sprewl,spried,sprier,spriest,sprig,spriggy,spring,springe,springy,sprink,sprint,sprit,sprite,spritty,sproat,sprod,sprogue,sproil,sprong,sprose,sprout,sprowsy,spruce,sprue,spruer,sprug,spruit,sprung,sprunny,sprunt,spry,spryly,spud,spudder,spuddle,spuddy,spuffle,spug,spuke,spume,spumone,spumose,spumous,spumy,spun,spung,spunk,spunkie,spunky,spunny,spur,spurge,spuriae,spurl,spurlet,spurn,spurner,spurred,spurrer,spurry,spurt,spurter,spurtle,spurway,sput,sputa,sputter,sputum,spy,spyboat,spydom,spyer,spyhole,spyism,spyship,squab,squabby,squacco,squad,squaddy,squail,squalid,squall,squally,squalm,squalor,squam,squama,squamae,squame,square,squared,squarer,squark,squary,squash,squashy,squat,squatly,squatty,squaw,squawk,squawky,squdge,squdgy,squeak,squeaky,squeal,squeald,squeam,squeamy,squeege,squeeze,squeezy,squelch,squench,squib,squid,squidge,squidgy,squiffy,squilla,squin,squinch,squinny,squinsy,squint,squinty,squire,squiret,squirk,squirm,squirmy,squirr,squirt,squirty,squish,squishy,squit,squitch,squoze,squush,squushy,sraddha,sramana,sri,sruti,ssu,st,staab,stab,stabber,stabile,stable,stabler,stably,staboy,stacher,stachys,stack,stacker,stacte,stadda,staddle,stade,stadia,stadic,stadion,stadium,staff,staffed,staffer,stag,stage,staged,stager,stagery,stagese,stagger,staggie,staggy,stagily,staging,stagnum,stagy,staia,staid,staidly,stain,stainer,staio,stair,staired,stairy,staith,staiver,stake,staker,stale,stalely,staling,stalk,stalked,stalker,stalko,stalky,stall,stallar,staller,stam,stambha,stamen,stamin,stamina,stammel,stammer,stamnos,stamp,stampee,stamper,stample,stance,stanch,stand,standee,standel,stander,stane,stang,stanine,stanjen,stank,stankie,stannel,stanner,stannic,stanno,stannum,stannyl,stanza,stanze,stap,stapes,staple,stapled,stapler,star,starch,starchy,stardom,stare,staree,starer,starets,starful,staring,stark,starken,starkly,starky,starlet,starlit,starn,starnel,starnie,starost,starred,starry,start,starter,startle,startly,startor,starty,starve,starved,starver,starvy,stary,stases,stash,stashie,stasis,statal,statant,state,stated,stately,stater,static,statics,station,statism,statist,stative,stator,statue,statued,stature,status,statute,stauk,staumer,staun,staunch,staup,stauter,stave,staver,stavers,staving,staw,stawn,staxis,stay,stayed,stayer,staynil,stays,stchi,stead,steady,steak,steal,stealed,stealer,stealth,stealy,steam,steamer,steamy,stean,stearic,stearin,stearyl,steatin,stech,steddle,steed,steek,steel,steeler,steely,steen,steenth,steep,steepen,steeper,steeple,steeply,steepy,steer,steerer,steeve,steever,steg,steid,steigh,stein,stekan,stela,stelae,stelai,stelar,stele,stell,stella,stellar,stem,stema,stemlet,stemma,stemmed,stemmer,stemmy,stemple,stemson,sten,stenar,stench,stenchy,stencil,stend,steng,stengah,stenion,steno,stenog,stent,stenter,stenton,step,steppe,stepped,stepper,stepson,stept,stepway,stere,stereo,steri,steric,sterics,steride,sterile,sterin,sterk,sterlet,stern,sterna,sternad,sternal,sterned,sternly,sternum,stero,steroid,sterol,stert,stertor,sterve,stet,stetch,stevel,steven,stevia,stew,steward,stewed,stewpan,stewpot,stewy,stey,sthenia,sthenic,stib,stibial,stibic,stibine,stibium,stich,stichic,stichid,stick,sticked,sticker,stickit,stickle,stickly,sticks,stickum,sticky,stid,stiddy,stife,stiff,stiffen,stiffly,stifle,stifler,stigma,stigmai,stigmal,stigme,stile,stilet,still,stiller,stilly,stilt,stilted,stilter,stilty,stim,stime,stimuli,stimy,stine,sting,stinge,stinger,stingo,stingy,stink,stinker,stint,stinted,stinter,stinty,stion,stionic,stipe,stiped,stipel,stipend,stipes,stippen,stipple,stipply,stipula,stipule,stir,stirk,stirp,stirps,stirra,stirrer,stirrup,stitch,stite,stith,stithy,stive,stiver,stivy,stoa,stoach,stoat,stoater,stob,stocah,stock,stocker,stocks,stocky,stod,stodge,stodger,stodgy,stoep,stof,stoff,stog,stoga,stogie,stogy,stoic,stoical,stoke,stoker,stola,stolae,stole,stoled,stolen,stolid,stolist,stollen,stolon,stoma,stomach,stomata,stomate,stomium,stomp,stomper,stond,stone,stoned,stonen,stoner,stong,stonied,stonify,stonily,stoning,stonish,stonker,stony,stood,stooded,stooden,stoof,stooge,stook,stooker,stookie,stool,stoon,stoond,stoop,stooper,stoory,stoot,stop,stopa,stope,stoper,stopgap,stoping,stopped,stopper,stoppit,stopple,storage,storax,store,storeen,storer,storge,storied,storier,storify,stork,storken,storm,stormer,stormy,story,stosh,stoss,stot,stotter,stoun,stound,stoup,stour,stoury,stoush,stout,stouten,stouth,stoutly,stouty,stove,stoven,stover,stow,stowage,stowce,stower,stowing,stra,strack,stract,strad,strade,stradl,stradld,strae,strafe,strafer,strag,straik,strain,straint,strait,strake,straked,straky,stram,stramp,strand,strang,strange,strany,strap,strass,strata,stratal,strath,strati,stratic,stratum,stratus,strave,straw,strawen,strawer,strawy,stray,strayer,stre,streak,streaky,stream,streamy,streck,stree,streek,streel,streen,streep,street,streets,streite,streke,stremma,streng,strent,strenth,strepen,strepor,stress,stret,stretch,strette,stretti,stretto,strew,strewer,strewn,strey,streyne,stria,striae,strial,striate,strich,striche,strick,strict,strid,stride,strider,stridor,strife,strig,striga,strigae,strigal,stright,strigil,strike,striker,strind,string,stringy,striola,strip,stripe,striped,striper,stript,stripy,strit,strive,strived,striven,striver,strix,stroam,strobic,strode,stroil,stroke,stroker,stroky,strold,stroll,strolld,strom,stroma,stromal,stromb,strome,strone,strong,strook,stroot,strop,strophe,stroth,stroud,stroup,strove,strow,strowd,strown,stroy,stroyer,strub,struck,strudel,strue,strum,struma,strumae,strung,strunt,strut,struth,struv,strych,stub,stubb,stubbed,stubber,stubble,stubbly,stubboy,stubby,stuber,stuboy,stucco,stuck,stud,studder,studdie,studdle,stude,student,studia,studied,studier,studio,studium,study,stue,stuff,stuffed,stuffer,stuffy,stug,stuggy,stuiver,stull,stuller,stulm,stum,stumble,stumbly,stumer,stummer,stummy,stump,stumper,stumpy,stun,stung,stunk,stunner,stunsle,stunt,stunted,stunter,stunty,stupa,stupe,stupefy,stupend,stupent,stupex,stupid,stupor,stupose,stupp,stuprum,sturdy,sturine,sturk,sturt,sturtan,sturtin,stuss,stut,stutter,sty,styan,styca,styful,stylar,stylate,style,styler,stylet,styline,styling,stylish,stylist,stylite,stylize,stylo,styloid,stylops,stylus,stymie,stypsis,styptic,styrax,styrene,styrol,styrone,styryl,stythe,styward,suable,suably,suade,suaharo,suant,suantly,suasion,suasive,suasory,suave,suavely,suavify,suavity,sub,subacid,subact,subage,subah,subaid,subanal,subarch,subarea,subatom,subaud,subband,subbank,subbase,subbass,subbeau,subbias,subbing,subcase,subcash,subcast,subcell,subcity,subclan,subcool,subdate,subdean,subdeb,subdial,subdie,subdual,subduce,subduct,subdue,subdued,subduer,subecho,subedit,suber,suberic,suberin,subface,subfeu,subfief,subfix,subform,subfusc,subfusk,subgape,subgens,subget,subgit,subgod,subgrin,subgyre,subhall,subhead,subherd,subhero,subicle,subidar,subidea,subitem,subjack,subject,subjee,subjoin,subking,sublate,sublet,sublid,sublime,sublong,sublot,submaid,submain,subman,submind,submiss,submit,subnect,subness,subnex,subnote,subnude,suboral,suborn,suboval,subpart,subpass,subpial,subpimp,subplat,subplot,subplow,subpool,subport,subrace,subrent,subroot,subrule,subsale,subsalt,subsea,subsect,subsept,subset,subside,subsidy,subsill,subsist,subsoil,subsult,subsume,subtack,subtend,subtext,subtile,subtill,subtle,subtly,subtone,subtype,subunit,suburb,subvein,subvene,subvert,subvola,subway,subwink,subzone,succade,succeed,succent,success,succi,succin,succise,succor,succory,succous,succub,succuba,succube,succula,succumb,succuss,such,suck,suckage,sucken,sucker,sucking,suckle,suckler,suclat,sucrate,sucre,sucrose,suction,sucuri,sucuriu,sud,sudamen,sudary,sudate,sudd,sudden,sudder,suddle,suddy,sudoral,sudoric,suds,sudsman,sudsy,sue,suede,suer,suet,suety,suff,suffect,suffer,suffete,suffice,suffix,sufflue,suffuse,sugamo,sugan,sugar,sugared,sugarer,sugary,sugent,suggest,sugh,sugi,suguaro,suhuaro,suicide,suid,suidian,suiform,suimate,suine,suing,suingly,suint,suist,suit,suite,suiting,suitor,suity,suji,sulcal,sulcar,sulcate,sulcus,suld,sulea,sulfa,sulfato,sulfion,sulfury,sulk,sulka,sulker,sulkily,sulky,sull,sulla,sullage,sullen,sullow,sully,sulpha,sulpho,sulphur,sultam,sultan,sultana,sultane,sultone,sultry,sulung,sum,sumac,sumatra,sumbul,sumless,summage,summand,summar,summary,summate,summed,summer,summery,summist,summit,summity,summon,summons,summula,summut,sumner,sump,sumpage,sumper,sumph,sumphy,sumpit,sumple,sumpman,sumpter,sun,sunbeam,sunbird,sunbow,sunburn,suncup,sundae,sundang,sundari,sundek,sunder,sundew,sundial,sundik,sundog,sundown,sundra,sundri,sundry,sune,sunfall,sunfast,sunfish,sung,sungha,sunglo,sunglow,sunk,sunken,sunket,sunlamp,sunland,sunless,sunlet,sunlike,sunlit,sunn,sunnily,sunnud,sunny,sunray,sunrise,sunroom,sunset,sunsmit,sunspot,sunt,sunup,sunward,sunway,sunways,sunweed,sunwise,sunyie,sup,supa,supari,supawn,supe,super,superb,supine,supper,supping,supple,supply,support,suppose,suppost,supreme,sur,sura,surah,surahi,sural,suranal,surat,surbase,surbate,surbed,surcoat,surcrue,surculi,surd,surdent,surdity,sure,surely,sures,surette,surety,surf,surface,surfacy,surfeit,surfer,surfle,surfman,surfuse,surfy,surge,surgent,surgeon,surgery,surging,surgy,suriga,surlily,surly,surma,surmark,surmise,surname,surnap,surnay,surpass,surplus,surra,surrey,surtax,surtout,survey,survive,suscept,susi,suslik,suspect,suspend,suspire,sustain,susu,susurr,suther,sutile,sutler,sutlery,sutor,sutra,suttee,sutten,suttin,suttle,sutural,suture,suum,suwarro,suwe,suz,svelte,swa,swab,swabber,swabble,swack,swacken,swad,swaddle,swaddy,swag,swage,swager,swagger,swaggie,swaggy,swagman,swain,swaird,swale,swaler,swaling,swallet,swallo,swallow,swam,swami,swamp,swamper,swampy,swan,swang,swangy,swank,swanker,swanky,swanner,swanny,swap,swape,swapper,swaraj,swarbie,sward,swardy,sware,swarf,swarfer,swarm,swarmer,swarmy,swarry,swart,swarth,swarthy,swartly,swarty,swarve,swash,swasher,swashy,swat,swatch,swath,swathe,swather,swathy,swatter,swattle,swaver,sway,swayed,swayer,swayful,swaying,sweal,swear,swearer,sweat,sweated,sweater,sweath,sweaty,swedge,sweeny,sweep,sweeper,sweepy,sweer,sweered,sweet,sweeten,sweetie,sweetly,sweety,swego,swell,swelled,sweller,swelly,swelp,swelt,swelter,swelth,sweltry,swelty,swep,swept,swerd,swerve,swerver,swick,swidge,swift,swiften,swifter,swifty,swig,swigger,swiggle,swile,swill,swiller,swim,swimmer,swimmy,swimy,swindle,swine,swinely,swinery,swiney,swing,swinge,swinger,swingle,swingy,swinish,swink,swinney,swipe,swiper,swipes,swiple,swipper,swipy,swird,swire,swirl,swirly,swish,swisher,swishy,swiss,switch,switchy,swith,swithe,swithen,swither,swivel,swivet,swiz,swizzle,swob,swollen,swom,swonken,swoon,swooned,swoony,swoop,swooper,swoosh,sword,swore,sworn,swosh,swot,swotter,swounds,swow,swum,swung,swungen,swure,syagush,sybotic,syce,sycee,sycock,sycoma,syconid,syconus,sycosis,sye,syenite,sylid,syllab,syllabe,syllabi,sylloge,sylph,sylphic,sylphid,sylphy,sylva,sylvae,sylvage,sylvan,sylvate,sylvic,sylvine,sylvite,symbion,symbiot,symbol,sympode,symptom,synacme,synacmy,synange,synapse,synapte,synaxar,synaxis,sync,syncarp,synch,synchro,syncope,syndic,syndoc,syne,synema,synergy,synesis,syngamy,synod,synodal,synoecy,synonym,synopsy,synovia,syntan,syntax,synthol,syntomy,syntone,syntony,syntype,synusia,sypher,syre,syringa,syringe,syrinx,syrma,syrphid,syrt,syrtic,syrup,syruped,syruper,syrupy,syssel,system,systole,systyle,syzygy,t,ta,taa,taar,tab,tabacin,tabacum,tabanid,tabard,tabaret,tabaxir,tabber,tabby,tabefy,tabella,taberna,tabes,tabet,tabetic,tabic,tabid,tabidly,tabific,tabinet,tabla,table,tableau,tabled,tabler,tables,tablet,tabling,tabloid,tabog,taboo,taboot,tabor,taborer,taboret,taborin,tabour,tabret,tabu,tabula,tabular,tabule,tabut,taccada,tach,tache,tachiol,tacit,tacitly,tack,tacker,tacket,tackety,tackey,tacking,tackle,tackled,tackler,tacky,tacnode,tacso,tact,tactful,tactic,tactics,tactile,taction,tactite,tactive,tactor,tactual,tactus,tad,tade,tadpole,tae,tael,taen,taenia,taenial,taenian,taenite,taennin,taffeta,taffety,taffle,taffy,tafia,taft,tafwiz,tag,tagetol,tagged,tagger,taggle,taggy,taglet,taglike,taglock,tagrag,tagsore,tagtail,tagua,taguan,tagwerk,taha,taheen,tahil,tahin,tahr,tahsil,tahua,tai,taiaha,taich,taiga,taigle,taihoa,tail,tailage,tailed,tailer,tailet,tailge,tailing,taille,taillie,tailor,tailory,tailpin,taily,tailzee,tailzie,taimen,tain,taint,taintor,taipan,taipo,tairge,tairger,tairn,taisch,taise,taissle,tait,taiver,taivers,taivert,taj,takable,takar,take,takeful,taken,taker,takin,taking,takings,takosis,takt,taky,takyr,tal,tala,talabon,talahib,talaje,talak,talao,talar,talari,talaria,talaric,talayot,talbot,talc,talcer,talcky,talcoid,talcose,talcous,talcum,tald,tale,taled,taleful,talent,taler,tales,tali,taliage,taliera,talion,talipat,taliped,talipes,talipot,talis,talisay,talite,talitol,talk,talker,talkful,talkie,talking,talky,tall,tallage,tallboy,taller,tallero,talles,tallet,talliar,tallier,tallis,tallish,tallit,tallith,talloel,tallote,tallow,tallowy,tally,tallyho,talma,talon,taloned,talonic,talonid,talose,talpid,talpify,talpine,talpoid,talthib,taluk,taluka,talus,taluto,talwar,talwood,tam,tamable,tamably,tamale,tamandu,tamanu,tamara,tamarao,tamarin,tamas,tamasha,tambac,tamber,tambo,tamboo,tambor,tambour,tame,tamein,tamely,tamer,tamis,tamise,tamlung,tammie,tammock,tammy,tamp,tampala,tampan,tampang,tamper,tampin,tamping,tampion,tampon,tampoon,tan,tana,tanach,tanager,tanaist,tanak,tanan,tanbark,tanbur,tancel,tandan,tandem,tandle,tandour,tane,tang,tanga,tanged,tangelo,tangent,tanger,tangham,tanghan,tanghin,tangi,tangie,tangka,tanglad,tangle,tangler,tangly,tango,tangram,tangs,tangue,tangum,tangun,tangy,tanh,tanha,tania,tanica,tanier,tanist,tanjib,tanjong,tank,tanka,tankage,tankah,tankard,tanked,tanker,tankert,tankful,tankle,tankman,tanling,tannage,tannaic,tannaim,tannase,tannate,tanned,tanner,tannery,tannic,tannide,tannin,tanning,tannoid,tannyl,tanoa,tanquam,tanquen,tanrec,tansy,tantara,tanti,tantivy,tantle,tantra,tantric,tantrik,tantrum,tantum,tanwood,tanyard,tanzeb,tanzib,tanzy,tao,taotai,taoyin,tap,tapa,tapalo,tapas,tapasvi,tape,tapeman,tapen,taper,tapered,taperer,taperly,tapet,tapetal,tapete,tapeti,tapetum,taphole,tapia,tapioca,tapir,tapis,tapism,tapist,taplash,taplet,tapmost,tapnet,tapoa,tapoun,tappa,tappall,tappaul,tappen,tapper,tappet,tapping,tappoon,taproom,taproot,taps,tapster,tapu,tapul,taqua,tar,tara,taraf,tarage,tarairi,tarand,taraph,tarapin,tarata,taratah,tarau,tarbet,tarboy,tarbush,tardily,tardive,tardle,tardy,tare,tarea,tarefa,tarente,tarfa,targe,targer,target,tarhood,tari,tarie,tariff,tarin,tariric,tarish,tarkhan,tarlike,tarmac,tarman,tarn,tarnal,tarnish,taro,taroc,tarocco,tarok,tarot,tarp,tarpan,tarpon,tarpot,tarpum,tarr,tarrack,tarras,tarrass,tarred,tarrer,tarri,tarrie,tarrier,tarrify,tarrily,tarrish,tarrock,tarrow,tarry,tars,tarsal,tarsale,tarse,tarsi,tarsia,tarsier,tarsome,tarsus,tart,tartago,tartan,tartana,tartane,tartar,tarten,tartish,tartle,tartlet,tartly,tartro,tartryl,tarve,tarweed,tarwood,taryard,tasajo,tascal,tasco,tash,tashie,tashlik,tashrif,task,taskage,tasker,taskit,taslet,tass,tassago,tassah,tassal,tassard,tasse,tassel,tassely,tasser,tasset,tassie,tassoo,taste,tasted,tasten,taster,tastily,tasting,tasty,tasu,tat,tataupa,tatbeb,tatchy,tate,tater,tath,tatie,tatinek,tatler,tatou,tatouay,tatsman,tatta,tatter,tattery,tatther,tattied,tatting,tattle,tattler,tattoo,tattva,tatty,tatu,tau,taught,taula,taum,taun,taunt,taunter,taupe,taupo,taupou,taur,taurean,taurian,tauric,taurine,taurite,tauryl,taut,tautaug,tauted,tauten,tautit,tautly,tautog,tav,tave,tavell,taver,tavern,tavers,tavert,tavola,taw,tawa,tawdry,tawer,tawery,tawie,tawite,tawkee,tawkin,tawn,tawney,tawnily,tawnle,tawny,tawpi,tawpie,taws,tawse,tawtie,tax,taxable,taxably,taxator,taxed,taxeme,taxemic,taxer,taxi,taxibus,taxicab,taximan,taxine,taxing,taxis,taxite,taxitic,taxless,taxman,taxon,taxor,taxpaid,taxwax,taxy,tay,tayer,tayir,tayra,taysaam,tazia,tch,tchai,tcharik,tchast,tche,tchick,tchu,tck,te,tea,teabox,teaboy,teacake,teacart,teach,teache,teacher,teachy,teacup,tead,teadish,teaer,teaey,teagle,teaish,teaism,teak,teal,tealery,tealess,team,teaman,teameo,teamer,teaming,teamman,tean,teanal,teap,teapot,teapoy,tear,tearage,tearcat,tearer,tearful,tearing,tearlet,tearoom,tearpit,teart,teary,tease,teasel,teaser,teashop,teasing,teasler,teasy,teat,teated,teathe,teather,teatime,teatman,teaty,teave,teaware,teaze,teazer,tebbet,tec,teca,tecali,tech,techily,technic,techous,techy,teck,tecomin,tecon,tectal,tectum,tecum,tecuma,ted,tedder,tedge,tedious,tedium,tee,teedle,teel,teem,teemer,teemful,teeming,teems,teen,teenage,teenet,teens,teensy,teenty,teeny,teer,teerer,teest,teet,teetan,teeter,teeth,teethe,teethy,teeting,teety,teevee,teff,teg,tegmen,tegmina,tegua,tegula,tegular,tegumen,tehseel,tehsil,teicher,teil,teind,teinder,teioid,tejon,teju,tekiah,tekke,tekken,tektite,tekya,telamon,telang,telar,telary,tele,teledu,telega,teleost,teleran,telergy,telesia,telesis,teleuto,televox,telfer,telford,teli,telial,telic,telical,telium,tell,tellach,tellee,teller,telling,tellt,telome,telomic,telpath,telpher,telson,telt,telurgy,telyn,temacha,teman,tembe,temblor,temenos,temiak,temin,temp,temper,tempera,tempery,tempest,tempi,templar,temple,templed,templet,tempo,tempora,tempre,tempt,tempter,temse,temser,ten,tenable,tenably,tenace,tenai,tenancy,tenant,tench,tend,tendant,tendent,tender,tending,tendon,tendour,tendril,tendron,tenebra,tenent,teneral,tenet,tenfold,teng,tengere,tengu,tenible,tenio,tenline,tenne,tenner,tennis,tennisy,tenon,tenoner,tenor,tenpin,tenrec,tense,tensely,tensify,tensile,tension,tensity,tensive,tenson,tensor,tent,tentage,tented,tenter,tentful,tenth,tenthly,tentigo,tention,tentlet,tenture,tenty,tenuate,tenues,tenuis,tenuity,tenuous,tenure,teopan,tepache,tepal,tepee,tepefy,tepid,tepidly,tepor,tequila,tera,terap,teras,terbia,terbic,terbium,tercel,tercer,tercet,tercia,tercine,tercio,terebic,terebra,teredo,terek,terete,tereu,terfez,tergal,tergant,tergite,tergum,term,terma,termage,termen,termer,termin,termine,termini,termino,termite,termly,termon,termor,tern,terna,ternal,ternar,ternary,ternate,terne,ternery,ternion,ternize,ternlet,terp,terpane,terpene,terpin,terpine,terrace,terrage,terrain,terral,terrane,terrar,terrene,terret,terrier,terrify,terrine,terron,terror,terry,terse,tersely,tersion,tertia,tertial,tertian,tertius,terton,tervee,terzina,terzo,tesack,teskere,tessara,tessel,tessera,test,testa,testacy,testar,testata,testate,teste,tested,testee,tester,testes,testify,testily,testing,testis,teston,testone,testoon,testor,testril,testudo,testy,tetanic,tetanus,tetany,tetard,tetch,tetchy,tete,tetel,teth,tether,tethery,tetra,tetract,tetrad,tetrane,tetrazo,tetric,tetrode,tetrole,tetrose,tetryl,tetter,tettery,tettix,teucrin,teufit,teuk,teviss,tew,tewel,tewer,tewit,tewly,tewsome,text,textile,textlet,textman,textual,texture,tez,tezkere,th,tha,thack,thacker,thakur,thalami,thaler,thalli,thallic,thallus,thameng,than,thana,thanage,thanan,thane,thank,thankee,thanker,thanks,thapes,thapsia,thar,tharf,tharm,that,thatch,thatchy,thatn,thats,thaught,thave,thaw,thawer,thawn,thawy,the,theah,theasum,theat,theater,theatry,theave,theb,theca,thecae,thecal,thecate,thecia,thecium,thecla,theclan,thecoid,thee,theek,theeker,theelin,theelol,theer,theet,theezan,theft,thegn,thegnly,theine,their,theirn,theirs,theism,theist,thelium,them,thema,themata,theme,themer,themis,themsel,then,thenal,thenar,thence,theody,theorbo,theorem,theoria,theoric,theorum,theory,theow,therapy,there,thereas,thereat,thereby,therein,thereof,thereon,theres,therese,thereto,thereup,theriac,therial,therm,thermae,thermal,thermic,thermit,thermo,thermos,theroid,these,theses,thesial,thesis,theta,thetch,thetic,thetics,thetin,thetine,theurgy,thew,thewed,thewy,they,theyll,theyre,thiamin,thiasi,thiasoi,thiasos,thiasus,thick,thicken,thicket,thickly,thief,thienyl,thieve,thiever,thig,thigger,thigh,thighed,thight,thilk,thill,thiller,thilly,thimber,thimble,thin,thine,thing,thingal,thingly,thingum,thingy,think,thinker,thinly,thinner,thio,thiol,thiolic,thionic,thionyl,thir,third,thirdly,thirl,thirst,thirsty,thirt,thirty,this,thishow,thisn,thissen,thistle,thistly,thither,thiuram,thivel,thixle,tho,thob,thocht,thof,thoft,thoke,thokish,thole,tholi,tholoi,tholos,tholus,thon,thonder,thone,thong,thonged,thongy,thoo,thooid,thoom,thoral,thorax,thore,thoria,thoric,thorina,thorite,thorium,thorn,thorned,thornen,thorny,thoro,thoron,thorp,thort,thorter,those,thou,though,thought,thouse,thow,thowel,thowt,thrack,thraep,thrail,thrain,thrall,thram,thrang,thrap,thrash,thrast,thrave,thraver,thraw,thrawn,thread,thready,threap,threat,three,threne,threnos,threose,thresh,threw,thrice,thrift,thrifty,thrill,thrilly,thrimp,thring,thrip,thripel,thrips,thrive,thriven,thriver,thro,throat,throaty,throb,throck,throddy,throe,thronal,throne,throng,throu,throuch,through,throve,throw,thrower,thrown,thrum,thrummy,thrush,thrushy,thrust,thrutch,thruv,thrymsa,thud,thug,thugdom,thuggee,thujene,thujin,thujone,thujyl,thulia,thulir,thulite,thulium,thulr,thuluth,thumb,thumbed,thumber,thumble,thumby,thump,thumper,thunder,thung,thunge,thuoc,thurify,thurl,thurm,thurmus,thurse,thurt,thus,thusly,thutter,thwack,thwaite,thwart,thwite,thy,thyine,thymate,thyme,thymele,thymene,thymic,thymine,thymol,thymoma,thymus,thymy,thymyl,thynnid,thyroid,thyrse,thyrsus,thysel,thyself,thysen,ti,tiang,tiao,tiar,tiara,tib,tibby,tibet,tibey,tibia,tibiad,tibiae,tibial,tibiale,tiburon,tic,tical,ticca,tice,ticer,tick,ticked,ticken,ticker,ticket,tickey,tickie,ticking,tickle,tickled,tickler,tickly,tickney,ticky,ticul,tid,tidal,tidally,tidbit,tiddle,tiddler,tiddley,tiddy,tide,tided,tideful,tidely,tideway,tidily,tiding,tidings,tidley,tidy,tidyism,tie,tieback,tied,tien,tiepin,tier,tierce,tierced,tiered,tierer,tietick,tiewig,tiff,tiffany,tiffie,tiffin,tiffish,tiffle,tiffy,tift,tifter,tig,tige,tigella,tigelle,tiger,tigerly,tigery,tigger,tight,tighten,tightly,tights,tiglic,tignum,tigress,tigrine,tigroid,tigtag,tikka,tikker,tiklin,tikor,tikur,til,tilaite,tilaka,tilbury,tilde,tile,tiled,tiler,tilery,tilikum,tiling,till,tillage,tiller,tilley,tillite,tillot,tilly,tilmus,tilpah,tilt,tilter,tilth,tilting,tiltup,tilty,tilyer,timable,timar,timarau,timawa,timbal,timbale,timbang,timbe,timber,timbern,timbery,timbo,timbre,timbrel,time,timed,timeful,timely,timeous,timer,times,timid,timidly,timing,timish,timist,timon,timor,timothy,timpani,timpano,tin,tinamou,tincal,tinchel,tinclad,tinct,tind,tindal,tindalo,tinder,tindery,tine,tinea,tineal,tinean,tined,tineid,tineine,tineman,tineoid,tinety,tinful,ting,tinge,tinged,tinger,tingi,tingid,tingle,tingler,tingly,tinguy,tinhorn,tinily,tining,tink,tinker,tinkle,tinkler,tinkly,tinlet,tinlike,tinman,tinned,tinner,tinnery,tinnet,tinnily,tinning,tinnock,tinny,tinosa,tinsel,tinsman,tint,tinta,tintage,tinted,tinter,tintie,tinting,tintist,tinty,tintype,tinwald,tinware,tinwork,tiny,tip,tipburn,tipcart,tipcat,tipe,tipful,tiphead,tipiti,tiple,tipless,tiplet,tipman,tipmost,tiponi,tipped,tippee,tipper,tippet,tipping,tipple,tippler,tipply,tippy,tipsify,tipsily,tipster,tipsy,tiptail,tiptilt,tiptoe,tiptop,tipulid,tipup,tirade,tiralee,tire,tired,tiredly,tiredom,tireman,tirer,tiriba,tiring,tirl,tirma,tirr,tirret,tirrlie,tirve,tirwit,tisane,tisar,tissual,tissue,tissued,tissuey,tiswin,tit,titania,titanic,titano,titanyl,titar,titbit,tite,titer,titfish,tithal,tithe,tither,tithing,titi,titian,titien,titlark,title,titled,titler,titlike,titling,titlist,titmal,titman,titoki,titrate,titre,titter,tittery,tittie,tittle,tittler,tittup,tittupy,titty,titular,titule,titulus,tiver,tivoli,tivy,tiza,tizeur,tizzy,tji,tjosite,tlaco,tmema,tmesis,to,toa,toad,toadeat,toader,toadery,toadess,toadier,toadish,toadlet,toady,toast,toastee,toaster,toasty,toat,toatoa,tobacco,tobe,tobine,tobira,toby,tobyman,toccata,tocher,tock,toco,tocome,tocsin,tocusso,tod,today,todder,toddick,toddite,toddle,toddler,toddy,tode,tody,toe,toecap,toed,toeless,toelike,toenail,toetoe,toff,toffee,toffing,toffish,toffy,toft,tofter,toftman,tofu,tog,toga,togaed,togata,togate,togated,toggel,toggery,toggle,toggler,togless,togs,togt,togue,toher,toheroa,toho,tohunga,toi,toil,toiled,toiler,toilet,toilful,toiling,toise,toit,toitish,toity,tokay,toke,token,tokened,toko,tokopat,tol,tolan,tolane,told,toldo,tole,tolite,toll,tollage,toller,tollery,tolling,tollman,tolly,tolsey,tolt,tolter,tolu,toluate,toluene,toluic,toluide,toluido,toluol,toluyl,tolyl,toman,tomato,tomb,tombac,tombal,tombe,tombic,tomblet,tombola,tombolo,tomboy,tomcat,tomcod,tome,tomeful,tomelet,toment,tomfool,tomial,tomin,tomish,tomium,tomjohn,tomkin,tommy,tomnoup,tomorn,tomosis,tompon,tomtate,tomtit,ton,tonal,tonally,tonant,tondino,tone,toned,toneme,toner,tonetic,tong,tonga,tonger,tongman,tongs,tongue,tongued,tonguer,tonguey,tonic,tonify,tonight,tonish,tonite,tonjon,tonk,tonkin,tonlet,tonnage,tonneau,tonner,tonnish,tonous,tonsil,tonsor,tonsure,tontine,tonus,tony,too,toodle,took,tooken,tool,toolbox,tooler,tooling,toolman,toom,toomly,toon,toop,toorie,toorock,tooroo,toosh,toot,tooter,tooth,toothed,toother,toothy,tootle,tootler,tootsy,toozle,toozoo,top,toparch,topass,topaz,topazy,topcap,topcast,topcoat,tope,topee,topeng,topepo,toper,topfull,toph,tophus,topi,topia,topiary,topic,topical,topknot,topless,toplike,topline,topman,topmast,topmost,topo,toponym,topped,topper,topping,topple,toppler,topply,toppy,toprail,toprope,tops,topsail,topside,topsl,topsman,topsoil,toptail,topwise,toque,tor,tora,torah,toral,toran,torc,torcel,torch,torcher,torchon,tore,tored,torero,torfel,torgoch,toric,torii,torma,tormen,torment,tormina,torn,tornade,tornado,tornal,tornese,torney,tornote,tornus,toro,toroid,torose,torous,torpedo,torpent,torpid,torpify,torpor,torque,torqued,torques,torrefy,torrent,torrid,torsade,torse,torsel,torsile,torsion,torsive,torsk,torso,tort,torta,torteau,tortile,tortive,tortula,torture,toru,torula,torulin,torulus,torus,torve,torvid,torvity,torvous,tory,tosh,tosher,toshery,toshly,toshy,tosily,toss,tosser,tossily,tossing,tosspot,tossup,tossy,tost,toston,tosy,tot,total,totally,totara,totchka,tote,totem,totemic,totemy,toter,tother,totient,toto,totora,totquot,totter,tottery,totting,tottle,totty,totuava,totum,toty,totyman,tou,toucan,touch,touched,toucher,touchy,toug,tough,toughen,toughly,tought,tould,toumnah,toup,toupee,toupeed,toupet,tour,touraco,tourer,touring,tourism,tourist,tourize,tourn,tournay,tournee,tourney,tourte,tousche,touse,touser,tousle,tously,tousy,tout,touter,tovar,tow,towable,towage,towai,towan,toward,towards,towboat,towcock,towd,towel,towelry,tower,towered,towery,towght,towhead,towhee,towing,towkay,towlike,towline,towmast,town,towned,townee,towner,townet,townful,townify,townish,townist,townlet,townly,townman,towny,towpath,towrope,towser,towy,tox,toxa,toxamin,toxcatl,toxemia,toxemic,toxic,toxical,toxicum,toxifer,toxin,toxity,toxoid,toxon,toxone,toxosis,toxotae,toy,toydom,toyer,toyful,toying,toyish,toyland,toyless,toylike,toyman,toyon,toyshop,toysome,toytown,toywort,toze,tozee,tozer,tra,trabal,trabant,trabea,trabeae,trabuch,trace,tracer,tracery,trachea,trachle,tracing,track,tracked,tracker,tract,tractor,tradal,trade,trader,trading,tradite,traduce,trady,traffic,trag,tragal,tragedy,tragi,tragic,tragus,trah,traheen,traik,trail,trailer,traily,train,trained,trainee,trainer,trainy,traipse,trait,traitor,traject,trajet,tralira,tram,trama,tramal,tramcar,trame,tramful,tramman,trammel,trammer,trammon,tramp,tramper,trample,trampot,tramway,trance,tranced,traneen,trank,tranka,tranker,trankum,tranky,transit,transom,trant,tranter,trap,trapes,trapeze,trapped,trapper,trappy,traps,trash,traship,trashy,trass,trasy,trauma,travail,travale,trave,travel,travis,travois,travoy,trawl,trawler,tray,trayful,treacle,treacly,tread,treader,treadle,treason,treat,treatee,treater,treator,treaty,treble,trebly,treddle,tree,treed,treeful,treeify,treelet,treeman,treen,treetop,treey,tref,trefle,trefoil,tregerg,tregohm,trehala,trek,trekker,trellis,tremble,trembly,tremie,tremolo,tremor,trenail,trench,trend,trendle,trental,trepan,trepang,trepid,tress,tressed,tresson,tressy,trest,trestle,tret,trevet,trews,trey,tri,triable,triace,triacid,triact,triad,triadic,triaene,triage,trial,triamid,triarch,triarii,triatic,triaxon,triazin,triazo,tribade,tribady,tribal,tribase,tribble,tribe,triblet,tribrac,tribual,tribuna,tribune,tribute,trica,tricae,tricar,trice,triceps,trichi,trichia,trichy,trick,tricker,trickle,trickly,tricksy,tricky,triclad,tricorn,tricot,trident,triduan,triduum,tried,triedly,triene,triens,trier,trifa,trifid,trifle,trifler,triflet,trifoil,trifold,trifoly,triform,trig,trigamy,trigger,triglid,triglot,trigly,trigon,trigone,trigram,trigyn,trikaya,trike,triker,triketo,trikir,trilabe,trilby,trilit,trilite,trilith,trill,trillet,trilli,trillo,trilobe,trilogy,trim,trimer,trimly,trimmer,trin,trinal,trinary,trindle,trine,trinely,tringle,trinity,trink,trinket,trinkle,trinode,trinol,trintle,trio,triobol,triode,triodia,triole,triolet,trionym,trior,triose,trip,tripal,tripara,tripart,tripe,tripel,tripery,triple,triplet,triplex,triplum,triply,tripod,tripody,tripoli,tripos,tripper,trippet,tripple,tripsis,tripy,trireme,trisalt,trisazo,trisect,triseme,trishna,trismic,trismus,trisome,trisomy,trist,trisul,trisula,tritaph,trite,tritely,tritish,tritium,tritolo,triton,tritone,tritor,trityl,triumph,triunal,triune,triurid,trivant,trivet,trivia,trivial,trivium,trivvet,trizoic,trizone,troat,troca,trocar,trochal,troche,trochee,trochi,trochid,trochus,trock,troco,trod,trodden,trode,troft,trog,trogger,troggin,trogon,trogs,trogue,troika,troke,troker,troll,troller,trolley,trollol,trollop,trolly,tromba,trombe,trommel,tromp,trompe,trompil,tromple,tron,trona,tronage,tronc,trone,troner,troolie,troop,trooper,troot,tropal,tropary,tropate,trope,tropeic,troper,trophal,trophi,trophic,trophy,tropic,tropine,tropism,tropist,tropoyl,tropyl,trot,troth,trotlet,trotol,trotter,trottie,trotty,trotyl,trouble,troubly,trough,troughy,trounce,troupe,trouper,trouse,trouser,trout,trouter,trouty,trove,trover,trow,trowel,trowing,trowman,trowth,troy,truancy,truant,trub,trubu,truce,trucial,truck,trucker,truckle,trucks,truddo,trudge,trudgen,trudger,true,truer,truff,truffle,trug,truish,truism,trull,truller,trullo,truly,trummel,trump,trumper,trumpet,trumph,trumpie,trun,truncal,trunch,trundle,trunk,trunked,trunnel,trush,trusion,truss,trussed,trusser,trust,trustee,trusten,truster,trustle,trusty,truth,truthy,truvat,try,trygon,trying,tryma,tryout,tryp,trypa,trypan,trypsin,tryptic,trysail,tryst,tryster,tryt,tsadik,tsamba,tsantsa,tsar,tsardom,tsarina,tsatlee,tsere,tsetse,tsia,tsine,tst,tsuba,tsubo,tsun,tsunami,tsungtu,tu,tua,tuan,tuarn,tuart,tuatara,tuatera,tuath,tub,tuba,tubae,tubage,tubal,tubar,tubate,tubba,tubbal,tubbeck,tubber,tubbie,tubbing,tubbish,tubboe,tubby,tube,tubeful,tubelet,tubeman,tuber,tuberin,tubfish,tubful,tubicen,tubifer,tubig,tubik,tubing,tublet,tublike,tubman,tubular,tubule,tubulet,tubuli,tubulus,tuchit,tuchun,tuck,tucker,tucket,tucking,tuckner,tucktoo,tucky,tucum,tucuma,tucuman,tudel,tue,tueiron,tufa,tufan,tuff,tuffet,tuffing,tuft,tufted,tufter,tuftily,tufting,tuftlet,tufty,tug,tugboat,tugger,tuggery,tugging,tughra,tugless,tuglike,tugman,tugrik,tugui,tui,tuik,tuille,tuilyie,tuism,tuition,tuitive,tuke,tukra,tula,tulare,tulasi,tulchan,tulchin,tule,tuliac,tulip,tulipy,tulisan,tulle,tulsi,tulwar,tum,tumasha,tumbak,tumble,tumbled,tumbler,tumbly,tumbrel,tume,tumefy,tumid,tumidly,tummals,tummel,tummer,tummock,tummy,tumor,tumored,tump,tumtum,tumular,tumuli,tumult,tumulus,tun,tuna,tunable,tunably,tunca,tund,tunder,tundish,tundra,tundun,tune,tuned,tuneful,tuner,tunful,tung,tungate,tungo,tunhoof,tunic,tunicin,tunicle,tuning,tunish,tunist,tunk,tunket,tunlike,tunmoot,tunna,tunnel,tunner,tunnery,tunnor,tunny,tuno,tunu,tuny,tup,tupara,tupek,tupelo,tupik,tupman,tupuna,tuque,tur,turacin,turb,turban,turbary,turbeh,turbid,turbine,turbit,turbith,turbo,turbot,turco,turd,turdine,turdoid,tureen,turf,turfage,turfdom,turfed,turfen,turfing,turfite,turfman,turfy,turgent,turgid,turgite,turgoid,turgor,turgy,turio,turion,turjite,turk,turken,turkey,turkis,turkle,turm,turma,turment,turmit,turmoil,turn,turncap,turndun,turned,turnel,turner,turnery,turney,turning,turnip,turnipy,turnix,turnkey,turnoff,turnout,turnpin,turnrow,turns,turnup,turp,turpeth,turpid,turps,turr,turret,turse,tursio,turtle,turtler,turtlet,turtosa,tururi,turus,turwar,tusche,tush,tushed,tusher,tushery,tusk,tuskar,tusked,tusker,tuskish,tusky,tussah,tussal,tusser,tussis,tussive,tussle,tussock,tussore,tussur,tut,tutania,tutball,tute,tutee,tutela,tutelar,tutenag,tuth,tutin,tutly,tutman,tutor,tutorer,tutorly,tutory,tutoyer,tutress,tutrice,tutrix,tuts,tutsan,tutster,tutti,tutty,tutu,tutulus,tutwork,tuwi,tux,tuxedo,tuyere,tuza,tuzzle,twa,twaddle,twaddly,twaddy,twae,twagger,twain,twaite,twal,twale,twalt,twang,twanger,twangle,twangy,twank,twanker,twankle,twanky,twant,twarly,twas,twasome,twat,twattle,tway,twazzy,tweag,tweak,tweaker,tweaky,twee,tweed,tweeded,tweedle,tweedy,tweeg,tweel,tween,tweeny,tweesh,tweesht,tweest,tweet,tweeter,tweeze,tweezer,tweil,twelfth,twelve,twenty,twere,twerp,twibil,twice,twicer,twicet,twick,twiddle,twiddly,twifoil,twifold,twig,twigful,twigged,twiggen,twigger,twiggy,twiglet,twilit,twill,twilled,twiller,twilly,twilt,twin,twindle,twine,twiner,twinge,twingle,twinism,twink,twinkle,twinkly,twinly,twinned,twinner,twinter,twiny,twire,twirk,twirl,twirler,twirly,twiscar,twisel,twist,twisted,twister,twistle,twisty,twit,twitch,twitchy,twite,twitten,twitter,twitty,twixt,twizzle,two,twofold,twoling,twoness,twosome,tychism,tychite,tycoon,tyddyn,tydie,tye,tyee,tyg,tying,tyke,tyken,tykhana,tyking,tylarus,tylion,tyloma,tylopod,tylose,tylosis,tylote,tylotic,tylotus,tylus,tymp,tympan,tympana,tympani,tympany,tynd,typal,type,typer,typeset,typhia,typhic,typhlon,typhoid,typhoon,typhose,typhous,typhus,typic,typica,typical,typicon,typicum,typify,typist,typo,typobar,typonym,typp,typy,tyranny,tyrant,tyre,tyro,tyroma,tyrone,tyronic,tyrosyl,tyste,tyt,tzolkin,tzontle,u,uang,uayeb,uberant,uberous,uberty,ubi,ubiety,ubiquit,ubussu,uckia,udal,udaler,udaller,udalman,udasi,udder,uddered,udell,udo,ug,ugh,uglify,uglily,ugly,ugsome,uhlan,uhllo,uhtsong,uily,uinal,uintjie,uitspan,uji,ukase,uke,ukiyoye,ukulele,ula,ulcer,ulcered,ulcery,ule,ulema,uletic,ulex,ulexine,ulexite,ulitis,ull,ulla,ullage,ullaged,uller,ulling,ulluco,ulmic,ulmin,ulminic,ulmo,ulmous,ulna,ulnad,ulnae,ulnar,ulnare,ulnaria,uloid,uloncus,ulster,ultima,ultimo,ultimum,ultra,ulu,ulua,uluhi,ululant,ululate,ululu,um,umbel,umbeled,umbella,umber,umbilic,umble,umbo,umbonal,umbone,umbones,umbonic,umbra,umbrae,umbrage,umbral,umbrel,umbril,umbrine,umbrose,umbrous,ume,umiak,umiri,umlaut,ump,umph,umpire,umpirer,umpteen,umpty,umu,un,unable,unably,unact,unacted,unacute,unadapt,unadd,unadded,unadopt,unadorn,unadult,unafire,unaflow,unaged,unagile,unaging,unaided,unaimed,unaired,unakin,unakite,unal,unalarm,unalert,unalike,unalist,unalive,unallow,unalone,unaloud,unamend,unamiss,unamo,unample,unamply,unangry,unannex,unapart,unapt,unaptly,unarch,unark,unarm,unarmed,unarray,unarted,unary,unasked,unau,unavian,unawake,unaware,unaway,unawed,unawful,unawned,unaxled,unbag,unbain,unbait,unbaked,unbale,unbank,unbar,unbarb,unbare,unbark,unbase,unbased,unbaste,unbated,unbay,unbe,unbear,unbeard,unbeast,unbed,unbefit,unbeget,unbegot,unbegun,unbeing,unbell,unbelt,unbench,unbend,unbent,unberth,unbeset,unbesot,unbet,unbias,unbid,unbind,unbit,unbitt,unblade,unbled,unblent,unbless,unblest,unblind,unbliss,unblock,unbloom,unblown,unblued,unblush,unboat,unbody,unbog,unboggy,unbokel,unbold,unbolt,unbone,unboned,unbonny,unboot,unbored,unborn,unborne,unbosom,unbound,unbow,unbowed,unbowel,unbox,unboxed,unboy,unbrace,unbraid,unbran,unbrand,unbrave,unbraze,unbred,unbrent,unbrick,unbrief,unbroad,unbroke,unbrown,unbrute,unbud,unbuild,unbuilt,unbulky,unbung,unburly,unburn,unburnt,unburst,unbury,unbush,unbusk,unbusy,unbuxom,unca,uncage,uncaged,uncake,uncalk,uncall,uncalm,uncaned,uncanny,uncap,uncart,uncase,uncased,uncask,uncast,uncaste,uncate,uncave,unceded,unchain,unchair,uncharm,unchary,uncheat,uncheck,unchid,unchild,unchurn,unci,uncia,uncial,uncinal,uncinch,uncinct,uncini,uncinus,uncite,uncited,uncity,uncivic,uncivil,unclad,unclamp,unclasp,unclay,uncle,unclead,unclean,unclear,uncleft,unclew,unclick,unclify,unclimb,uncling,unclip,uncloak,unclog,unclose,uncloud,unclout,unclub,unco,uncoach,uncoat,uncock,uncoded,uncoif,uncoil,uncoin,uncoked,uncolt,uncoly,uncome,uncomfy,uncomic,uncoop,uncope,uncord,uncore,uncored,uncork,uncost,uncouch,uncous,uncouth,uncover,uncowed,uncowl,uncoy,uncram,uncramp,uncream,uncrest,uncrib,uncried,uncrime,uncrisp,uncrook,uncropt,uncross,uncrown,uncrude,uncruel,unction,uncubic,uncular,uncurb,uncurd,uncured,uncurl,uncurse,uncurst,uncus,uncut,uncuth,undaily,undam,undamn,undared,undark,undate,undated,undaub,undazed,unde,undead,undeaf,undealt,undean,undear,undeck,undecyl,undeep,undeft,undeify,undelve,unden,under,underdo,underer,undergo,underly,undern,undevil,undewed,undewy,undid,undies,undig,undight,undiked,undim,undine,undined,undirk,undo,undock,undoer,undog,undoing,undomed,undon,undone,undoped,undose,undosed,undowny,undrab,undrag,undrape,undraw,undrawn,undress,undried,undrunk,undry,undub,unducal,undue,undug,unduke,undular,undull,unduly,unduped,undust,unduty,undwelt,undy,undye,undyed,undying,uneager,unearly,unearth,unease,uneasy,uneaten,uneath,unebbed,unedge,unedged,unelect,unempt,unempty,unended,unepic,unequal,unerect,unethic,uneven,unevil,unexact,uneye,uneyed,unface,unfaced,unfact,unfaded,unfain,unfaint,unfair,unfaith,unfaked,unfalse,unfamed,unfancy,unfar,unfast,unfeary,unfed,unfeed,unfele,unfelon,unfelt,unfence,unfeted,unfeued,unfew,unfiber,unfiend,unfiery,unfight,unfile,unfiled,unfill,unfilm,unfine,unfined,unfired,unfirm,unfit,unfitly,unfitty,unfix,unfixed,unflag,unflaky,unflank,unflat,unflead,unflesh,unflock,unfloor,unflown,unfluid,unflush,unfoggy,unfold,unfond,unfool,unfork,unform,unfoul,unfound,unfoxy,unfrail,unframe,unfrank,unfree,unfreed,unfret,unfried,unfrill,unfrizz,unfrock,unfrost,unfroze,unfull,unfully,unfumed,unfunny,unfur,unfurl,unfused,unfussy,ungag,ungaged,ungain,ungaite,ungaro,ungaudy,ungear,ungelt,unget,ungiant,ungiddy,ungild,ungill,ungilt,ungird,ungirt,ungirth,ungive,ungiven,ungka,unglad,unglaze,unglee,unglobe,ungloom,unglory,ungloss,unglove,unglue,unglued,ungnaw,ungnawn,ungod,ungodly,ungold,ungone,ungood,ungored,ungorge,ungot,ungouty,ungown,ungrace,ungraft,ungrain,ungrand,ungrasp,ungrave,ungreat,ungreen,ungrip,ungripe,ungross,ungrow,ungrown,ungruff,ungual,unguard,ungueal,unguent,ungues,unguis,ungula,ungulae,ungular,unguled,ungull,ungulp,ungum,unguyed,ungyve,ungyved,unhabit,unhad,unhaft,unhair,unhairy,unhand,unhandy,unhang,unhap,unhappy,unhard,unhardy,unharsh,unhasp,unhaste,unhasty,unhat,unhate,unhated,unhaunt,unhave,unhayed,unhazed,unhead,unheady,unheal,unheard,unheart,unheavy,unhedge,unheed,unheedy,unheld,unhele,unheler,unhelm,unherd,unhero,unhewed,unhewn,unhex,unhid,unhide,unhigh,unhinge,unhired,unhit,unhitch,unhive,unhoard,unhoary,unhoed,unhoist,unhold,unholy,unhome,unhoned,unhood,unhook,unhoop,unhoped,unhorny,unhorse,unhose,unhosed,unhot,unhouse,unhull,unhuman,unhumid,unhung,unhurt,unhusk,uniat,uniate,uniaxal,unible,unice,uniced,unicell,unicism,unicist,unicity,unicorn,unicum,unideal,unidle,unidly,unie,uniface,unific,unified,unifier,uniflow,uniform,unify,unilobe,unimped,uninked,uninn,unio,unioid,union,unioned,unionic,unionid,unioval,unipara,uniped,unipod,unique,unireme,unisoil,unison,unit,unitage,unital,unitary,unite,united,uniter,uniting,unition,unitism,unitive,unitize,unitude,unity,univied,unjaded,unjam,unjewel,unjoin,unjoint,unjolly,unjoyed,unjudge,unjuicy,unjust,unkamed,unked,unkempt,unken,unkept,unket,unkey,unkeyed,unkid,unkill,unkin,unkind,unking,unkink,unkirk,unkiss,unkist,unknave,unknew,unknit,unknot,unknow,unknown,unlace,unlaced,unlade,unladen,unlaid,unlame,unlamed,unland,unlap,unlarge,unlash,unlatch,unlath,unlaugh,unlaved,unlaw,unlawed,unlawly,unlay,unlead,unleaf,unleaky,unleal,unlean,unlearn,unleash,unleave,unled,unleft,unlegal,unlent,unless,unlet,unlevel,unlid,unlie,unlight,unlike,unliked,unliken,unlimb,unlime,unlimed,unlimp,unline,unlined,unlink,unlist,unlisty,unlit,unlive,unload,unloath,unlobed,unlocal,unlock,unlodge,unlofty,unlogic,unlook,unloop,unloose,unlord,unlost,unlousy,unlove,unloved,unlowly,unloyal,unlucid,unluck,unlucky,unlunar,unlured,unlust,unlusty,unlute,unluted,unlying,unmad,unmade,unmagic,unmaid,unmail,unmake,unmaker,unman,unmaned,unmanly,unmarch,unmarry,unmask,unmast,unmate,unmated,unmaze,unmeant,unmeek,unmeet,unmerge,unmerry,unmesh,unmet,unmeted,unmew,unmewed,unmind,unmined,unmired,unmiry,unmist,unmiter,unmix,unmixed,unmodel,unmoist,unmold,unmoldy,unmoor,unmoral,unmount,unmoved,unmowed,unmown,unmuddy,unmuted,unnail,unnaked,unname,unnamed,unneat,unneedy,unnegro,unnerve,unnest,unneth,unnethe,unnew,unnewly,unnice,unnigh,unnoble,unnobly,unnose,unnosed,unnoted,unnovel,unoared,unobese,unode,unoften,unogled,unoil,unoiled,unoily,unold,unoped,unopen,unorbed,unorder,unorn,unornly,unovert,unowed,unowing,unown,unowned,unpaced,unpack,unpagan,unpaged,unpaid,unpaint,unpale,unpaled,unpanel,unpapal,unpaper,unparch,unpared,unpark,unparty,unpass,unpaste,unpave,unpaved,unpawed,unpawn,unpeace,unpeel,unpeg,unpen,unpenal,unpent,unperch,unpetal,unpick,unpiece,unpiety,unpile,unpiled,unpin,unpious,unpiped,unplace,unplaid,unplain,unplait,unplan,unplank,unplant,unplat,unpleat,unplied,unplow,unplug,unplumb,unplume,unplump,unpoise,unpoled,unpope,unposed,unpot,unpower,unpray,unprim,unprime,unprint,unprop,unproud,unpure,unpurse,unput,unqueen,unquick,unquiet,unquit,unquote,unraced,unrack,unrainy,unrake,unraked,unram,unrank,unraped,unrare,unrash,unrated,unravel,unray,unrayed,unrazed,unread,unready,unreal,unreave,unrebel,unred,unreel,unreeve,unregal,unrein,unrent,unrest,unresty,unrhyme,unrich,unricht,unrid,unride,unrife,unrig,unright,unrigid,unrind,unring,unrip,unripe,unriped,unrisen,unrisky,unrived,unriven,unrivet,unroast,unrobe,unrobed,unroll,unroof,unroomy,unroost,unroot,unrope,unroped,unrosed,unroted,unrough,unround,unrove,unroved,unrow,unrowed,unroyal,unrule,unruled,unruly,unrun,unrung,unrural,unrust,unruth,unsack,unsad,unsafe,unsage,unsaid,unsaint,unsalt,unsane,unsappy,unsash,unsated,unsatin,unsaved,unsawed,unsawn,unsay,unscale,unscaly,unscarb,unscent,unscrew,unseal,unseam,unseat,unsee,unseen,unself,unsense,unsent,unset,unsew,unsewed,unsewn,unsex,unsexed,unshade,unshady,unshape,unsharp,unshawl,unsheaf,unshed,unsheet,unshell,unship,unshod,unshoe,unshoed,unshop,unshore,unshorn,unshort,unshot,unshown,unshowy,unshrew,unshut,unshy,unshyly,unsick,unsided,unsiege,unsight,unsilly,unsin,unsinew,unsing,unsized,unskin,unslack,unslain,unslate,unslave,unsleek,unslept,unsling,unslip,unslit,unslot,unslow,unslung,unsly,unsmart,unsmoky,unsmote,unsnaky,unsnap,unsnare,unsnarl,unsneck,unsnib,unsnow,unsober,unsoft,unsoggy,unsoil,unsolar,unsold,unsole,unsoled,unsolid,unsome,unson,unsonsy,unsooty,unsore,unsorry,unsort,unsoul,unsound,unsour,unsowed,unsown,unspan,unspar,unspeak,unsped,unspeed,unspell,unspelt,unspent,unspicy,unspied,unspike,unspin,unspit,unsplit,unspoil,unspot,unspun,unstack,unstagy,unstaid,unstain,unstar,unstate,unsteck,unsteel,unsteep,unstep,unstern,unstick,unstill,unsting,unstock,unstoic,unstone,unstony,unstop,unstore,unstout,unstow,unstrap,unstrip,unstuck,unstuff,unstung,unsty,unsued,unsuit,unsulky,unsun,unsung,unsunk,unsunny,unsure,unswear,unsweat,unsweet,unswell,unswept,unswing,unsworn,unswung,untack,untaint,untaken,untall,untame,untamed,untap,untaped,untar,untaste,untasty,untaut,untawed,untax,untaxed,unteach,unteam,unteem,untell,untense,untent,untenty,untewed,unthank,unthaw,unthick,unthink,unthorn,unthrid,unthrob,untidal,untidy,untie,untied,untight,until,untile,untiled,untill,untilt,untimed,untin,untinct,untine,untipt,untire,untired,unto,untold,untomb,untone,untoned,untooth,untop,untorn,untouch,untough,untown,untrace,untrain,untread,untreed,untress,untried,untrig,untrill,untrim,untripe,untrite,untrod,untruck,untrue,untruly,untruss,untrust,untruth,untuck,untumid,untune,untuned,unturf,unturn,untwine,untwirl,untwist,untying,untz,unugly,unultra,unupset,unurban,unurged,unurn,unurned,unuse,unused,unusual,unvain,unvalid,unvalue,unveil,unvenom,unvest,unvexed,unvicar,unvisor,unvital,unvivid,unvocal,unvoice,unvote,unvoted,unvowed,unwaded,unwaged,unwaked,unwall,unwan,unware,unwarm,unwarn,unwarp,unwary,unwater,unwaved,unwax,unwaxed,unwayed,unweal,unweary,unweave,unweb,unwed,unwedge,unweel,unweft,unweld,unwell,unwept,unwet,unwheel,unwhig,unwhip,unwhite,unwield,unwifed,unwig,unwild,unwill,unwily,unwind,unwindy,unwiped,unwire,unwired,unwise,unwish,unwist,unwitch,unwitty,unwive,unwived,unwoful,unwoman,unwomb,unwon,unwooed,unwoof,unwooly,unwordy,unwork,unworld,unwormy,unworn,unworth,unwound,unwoven,unwrap,unwrit,unwrite,unwrung,unyoke,unyoked,unyoung,unze,unzen,unzone,unzoned,up,upaisle,upalley,upalong,uparch,uparise,uparm,uparna,upas,upattic,upbank,upbar,upbay,upbear,upbeat,upbelch,upbelt,upbend,upbid,upbind,upblast,upblaze,upblow,upboil,upbolt,upboost,upborne,upbotch,upbound,upbrace,upbraid,upbray,upbreak,upbred,upbreed,upbrim,upbring,upbrook,upbrow,upbuild,upbuoy,upburn,upburst,upbuy,upcall,upcanal,upcarry,upcast,upcatch,upchoke,upchuck,upcity,upclimb,upclose,upcoast,upcock,upcoil,upcome,upcover,upcrane,upcrawl,upcreek,upcreep,upcrop,upcrowd,upcry,upcurl,upcurve,upcut,updart,update,updeck,updelve,updive,updo,updome,updraft,updrag,updraw,updrink,updry,upeat,upend,upeygan,upfeed,upfield,upfill,upflame,upflare,upflash,upflee,upfling,upfloat,upflood,upflow,upflung,upfly,upfold,upframe,upfurl,upgale,upgang,upgape,upgaze,upget,upgird,upgirt,upgive,upglean,upglide,upgo,upgorge,upgrade,upgrave,upgrow,upgully,upgush,uphand,uphang,uphasp,upheal,upheap,upheave,upheld,uphelm,uphelya,upher,uphill,uphoard,uphoist,uphold,uphung,uphurl,upjerk,upjet,upkeep,upknell,upknit,upla,uplaid,uplake,upland,uplane,uplay,uplead,upleap,upleg,uplick,uplift,uplight,uplimb,upline,uplock,uplong,uplook,uploom,uploop,uplying,upmast,upmix,upmost,upmount,upmove,upness,upo,upon,uppard,uppent,upper,upperch,upperer,uppers,uppile,upping,uppish,uppity,upplow,uppluck,uppoint,uppoise,uppop,uppour,uppowoc,upprick,upprop,uppuff,uppull,uppush,upraise,upreach,uprear,uprein,uprend,uprest,uprid,upridge,upright,uprip,uprisal,uprise,uprisen,upriser,uprist,uprive,upriver,uproad,uproar,uproom,uproot,uprose,uprouse,uproute,uprun,uprush,upscale,upscrew,upseal,upseek,upseize,upsend,upset,upsey,upshaft,upshear,upshoot,upshore,upshot,upshove,upshut,upside,upsides,upsilon,upsit,upslant,upslip,upslope,upsmite,upsoak,upsoar,upsolve,upspeak,upspear,upspeed,upspew,upspin,upspire,upspout,upspurt,upstaff,upstage,upstair,upstamp,upstand,upstare,upstart,upstate,upstay,upsteal,upsteam,upstem,upstep,upstick,upstir,upsuck,upsun,upsup,upsurge,upswarm,upsway,upsweep,upswell,upswing,uptable,uptake,uptaker,uptear,uptend,upthrow,uptide,uptie,uptill,uptilt,uptorn,uptoss,uptower,uptown,uptrace,uptrack,uptrail,uptrain,uptree,uptrend,uptrill,uptrunk,uptruss,uptube,uptuck,upturn,uptwist,upupoid,upvomit,upwaft,upwall,upward,upwards,upwarp,upwax,upway,upways,upwell,upwent,upwheel,upwhelm,upwhir,upwhirl,upwind,upwith,upwork,upwound,upwrap,upwring,upyard,upyoke,ur,ura,urachal,urachus,uracil,uraemic,uraeus,ural,urali,uraline,uralite,uralium,uramido,uramil,uramino,uran,uranate,uranic,uraniid,uranin,uranine,uranion,uranism,uranist,uranite,uranium,uranous,uranyl,urao,urare,urari,urase,urate,uratic,uratoma,urazine,urazole,urban,urbane,urbian,urbic,urbify,urceole,urceoli,urceus,urchin,urd,urde,urdee,ure,urea,ureal,urease,uredema,uredine,uredo,ureic,ureid,ureide,ureido,uremia,uremic,urent,uresis,uretal,ureter,urethan,urethra,uretic,urf,urge,urgence,urgency,urgent,urger,urging,urheen,urial,uric,urinal,urinant,urinary,urinate,urine,urinose,urinous,urite,urlar,urled,urling,urluch,urman,urn,urna,urnae,urnal,urnful,urning,urnism,urnlike,urocele,urocyst,urodele,urogram,urohyal,urolith,urology,uromere,uronic,uropod,urosis,urosome,urostea,urotoxy,uroxin,ursal,ursine,ursoid,ursolic,urson,ursone,ursuk,urtica,urtite,urubu,urucu,urucuri,uruisg,urunday,urus,urushi,urushic,urva,us,usable,usage,usager,usance,usar,usara,usaron,usation,use,used,usedly,usednt,usee,useful,usehold,useless,usent,user,ush,ushabti,usher,usherer,usings,usitate,usnea,usneoid,usnic,usninic,usque,usself,ussels,ust,uster,ustion,usual,usually,usuary,usucapt,usure,usurer,usuress,usurp,usurper,usurpor,usury,usward,uswards,ut,uta,utahite,utai,utas,utch,utchy,utees,utensil,uteri,uterine,uterus,utick,utile,utility,utilize,utinam,utmost,utopia,utopian,utopism,utopist,utricle,utricul,utrubi,utrum,utsuk,utter,utterer,utterly,utu,utum,uva,uval,uvalha,uvanite,uvate,uvea,uveal,uveitic,uveitis,uveous,uvic,uvid,uviol,uvitic,uvito,uvrou,uvula,uvulae,uvular,uvver,uxorial,uzan,uzara,uzarin,uzaron,v,vaagmer,vaalite,vacancy,vacant,vacate,vacatur,vaccary,vaccina,vaccine,vache,vacoa,vacona,vacoua,vacouf,vacual,vacuate,vacuefy,vacuist,vacuity,vacuole,vacuome,vacuous,vacuum,vacuuma,vade,vadium,vadose,vady,vag,vagal,vagary,vagas,vage,vagile,vagina,vaginal,vagitus,vagrant,vagrate,vagrom,vague,vaguely,vaguish,vaguity,vagus,vahine,vail,vain,vainful,vainly,vair,vairagi,vaire,vairy,vaivode,vajra,vakass,vakia,vakil,valance,vale,valence,valency,valent,valeral,valeric,valerin,valeryl,valet,valeta,valetry,valeur,valgoid,valgus,valhall,vali,valiant,valid,validly,valine,valise,vall,vallar,vallary,vallate,valley,vallis,vallum,valonia,valor,valse,valsoid,valuate,value,valued,valuer,valuta,valva,valval,valvate,valve,valved,valvula,valvule,valyl,vamfont,vamoose,vamp,vamped,vamper,vampire,van,vanadic,vanadyl,vane,vaned,vanfoss,vang,vangee,vangeli,vanglo,vanilla,vanille,vanish,vanity,vanman,vanmost,vanner,vannet,vansire,vantage,vanward,vapid,vapidly,vapor,vapored,vaporer,vapory,vara,varahan,varan,varanid,vardy,vare,varec,vareuse,vari,variant,variate,varical,varices,varied,varier,variety,variola,variole,various,varisse,varix,varlet,varment,varna,varnish,varsha,varsity,varus,varve,varved,vary,vas,vasa,vasal,vase,vaseful,vaselet,vassal,vast,vastate,vastily,vastity,vastly,vasty,vasu,vat,vatful,vatic,vatman,vatter,vau,vaudy,vault,vaulted,vaulter,vaulty,vaunt,vaunted,vaunter,vaunty,vauxite,vavasor,vaward,veal,vealer,vealy,vection,vectis,vector,vecture,vedana,vedette,vedika,vedro,veduis,vee,veen,veep,veer,veery,vegetal,vegete,vehicle,vei,veigle,veil,veiled,veiler,veiling,veily,vein,veinage,veinal,veined,veiner,veinery,veining,veinlet,veinous,veinule,veiny,vejoces,vela,velal,velamen,velar,velaric,velary,velate,velated,veldman,veldt,velic,veliger,vell,vellala,velleda,vellon,vellum,vellumy,velo,velours,velte,velum,velumen,velure,velvet,velvety,venada,venal,venally,venatic,venator,vencola,vend,vendace,vendee,vender,vending,vendor,vendue,veneer,venene,veneral,venerer,venery,venesia,venger,venial,venie,venin,venison,vennel,venner,venom,venomed,venomer,venomly,venomy,venosal,venose,venous,vent,ventage,ventail,venter,ventil,ventose,ventrad,ventral,ventric,venture,venue,venula,venular,venule,venust,vera,veranda,verb,verbal,verbate,verbena,verbene,verbid,verbify,verbile,verbose,verbous,verby,verchok,verd,verdant,verdea,verdet,verdict,verdin,verdoy,verdun,verdure,verek,verge,vergent,verger,vergery,vergi,verglas,veri,veridic,verify,verily,verine,verism,verist,verite,verity,vermeil,vermian,vermin,verminy,vermis,vermix,vernal,vernant,vernier,vernile,vernin,vernine,verre,verrel,verruca,verruga,versal,versant,versate,verse,versed,verser,verset,versify,versine,version,verso,versor,verst,versta,versual,versus,vert,vertex,vertigo,veruled,vervain,verve,vervel,vervet,very,vesania,vesanic,vesbite,vesicae,vesical,vesicle,veskit,vespal,vesper,vespers,vespery,vespid,vespine,vespoid,vessel,vest,vestal,vestee,vester,vestige,vesting,vestlet,vestral,vestry,vesture,vet,veta,vetanda,vetch,vetchy,veteran,vetiver,veto,vetoer,vetoism,vetoist,vetust,vetusty,veuve,vex,vexable,vexed,vexedly,vexer,vexful,vexil,vext,via,viable,viaduct,viagram,viajaca,vial,vialful,viand,viander,viatic,viatica,viator,vibex,vibgyor,vibix,vibrant,vibrate,vibrato,vibrion,vicar,vicarly,vice,viceroy,vicety,vicilin,vicinal,vicine,vicious,vicoite,victim,victor,victory,victrix,victual,vicuna,viddui,video,vidette,vidonia,vidry,viduage,vidual,viduate,viduine,viduity,viduous,vidya,vie,vielle,vier,viertel,view,viewer,viewly,viewy,vifda,viga,vigia,vigil,vignin,vigonia,vigor,vihara,vihuela,vijao,viking,vila,vilayet,vile,vilely,vilify,vility,vill,villa,village,villain,villar,villate,ville,villein,villoid,villose,villous,villus,vim,vimana,vimen,vimful,viminal,vina,vinage,vinal,vinasse,vinata,vincent,vindex,vine,vinea,vineal,vined,vinegar,vineity,vinelet,viner,vinery,vinic,vinny,vino,vinose,vinous,vint,vinta,vintage,vintem,vintner,vintry,viny,vinyl,vinylic,viol,viola,violal,violate,violent,violer,violet,violety,violin,violina,violine,violist,violon,violone,viper,viperan,viperid,vipery,viqueen,viragin,virago,viral,vire,virelay,viremia,viremic,virent,vireo,virga,virgal,virgate,virgin,virgula,virgule,virial,virid,virific,virify,virile,virl,virole,viroled,viron,virose,virosis,virous,virtu,virtual,virtue,virtued,viruela,virus,vis,visa,visage,visaged,visarga,viscera,viscid,viscin,viscose,viscous,viscus,vise,viseman,visible,visibly,visie,visile,vision,visit,visita,visite,visitee,visiter,visitor,visive,visne,vison,visor,vista,vistaed,vistal,visto,visual,vita,vital,vitalic,vitally,vitals,vitamer,vitamin,vitasti,vitiate,vitium,vitrage,vitrail,vitrain,vitraux,vitreal,vitrean,vitreum,vitric,vitrics,vitrify,vitrine,vitriol,vitrite,vitrous,vitta,vittate,vitular,viuva,viva,vivary,vivax,vive,vively,vivency,viver,vivers,vives,vivid,vividly,vivific,vivify,vixen,vixenly,vizard,vizier,vlei,voar,vocable,vocably,vocal,vocalic,vocally,vocate,vocular,vocule,vodka,voe,voet,voeten,vog,voglite,vogue,voguey,voguish,voice,voiced,voicer,voicing,void,voided,voidee,voider,voiding,voidly,voile,voivode,vol,volable,volage,volant,volar,volata,volatic,volcan,volcano,vole,volency,volent,volery,volet,volley,volost,volt,voltage,voltaic,voltize,voluble,volubly,volume,volumed,volupt,volupty,voluta,volute,voluted,volutin,volva,volvate,volvent,vomer,vomica,vomit,vomiter,vomito,vomitus,voodoo,vorago,vorant,vorhand,vorpal,vortex,vota,votable,votal,votally,votary,vote,voteen,voter,voting,votive,votress,vouch,vouchee,voucher,vouge,vow,vowed,vowel,vowely,vower,vowess,vowless,voyage,voyager,voyance,voyeur,vraic,vrbaite,vriddhi,vrother,vug,vuggy,vulgar,vulgare,vulgate,vulgus,vuln,vulnose,vulpic,vulpine,vulture,vulturn,vulva,vulval,vulvar,vulvate,vum,vying,vyingly,w,wa,waag,waapa,waar,wab,wabber,wabble,wabbly,wabby,wabe,wabeno,wabster,wacago,wace,wachna,wack,wacke,wacken,wacker,wacky,wad,waddent,wadder,wadding,waddler,waddly,waddy,wade,wader,wadi,wading,wadlike,wadmal,wadmeal,wadna,wadset,wae,waeg,waer,waesome,waesuck,wafer,waferer,wafery,waff,waffle,waffly,waft,waftage,wafter,wafture,wafty,wag,wagaun,wage,waged,wagedom,wager,wagerer,wages,waggel,wagger,waggery,waggie,waggish,waggle,waggly,waggy,waglike,wagling,wagon,wagoner,wagonry,wagsome,wagtail,wagwag,wagwit,wah,wahahe,wahine,wahoo,waiata,waif,waik,waikly,wail,wailer,wailful,waily,wain,wainage,wainer,wainful,wainman,waipiro,wairch,waird,wairepo,wairsh,waise,waist,waisted,waister,wait,waiter,waiting,waive,waiver,waivery,waivod,waiwode,wajang,waka,wakan,wake,wakeel,wakeful,waken,wakener,waker,wakes,wakf,wakif,wakiki,waking,wakiup,wakken,wakon,wakonda,waky,walahee,wale,waled,waler,wali,waling,walk,walker,walking,walkist,walkout,walkway,wall,wallaba,wallaby,wallah,walled,waller,wallet,walleye,wallful,walling,wallise,wallman,walloon,wallop,wallow,wally,walnut,walrus,walsh,walt,walter,walth,waltz,waltzer,wamara,wambais,wamble,wambly,wame,wamefou,wamel,wamp,wampee,wample,wampum,wampus,wamus,wan,wand,wander,wandery,wandle,wandoo,wandy,wane,waned,wang,wanga,wangala,wangan,wanghee,wangle,wangler,wanhope,wanhorn,wanigan,waning,wankle,wankly,wanle,wanly,wanner,wanness,wannish,wanny,wanrufe,want,wantage,wanter,wantful,wanting,wanton,wantwit,wanty,wany,wap,wapacut,wapatoo,wapiti,wapp,wapper,wapping,war,warabi,waratah,warble,warbled,warbler,warblet,warbly,warch,ward,wardage,warday,warded,warden,warder,warding,wardite,wardman,ware,warehou,wareman,warf,warfare,warful,warily,warish,warison,wark,warl,warless,warlike,warlock,warluck,warly,warm,warman,warmed,warmer,warmful,warming,warmish,warmly,warmth,warmus,warn,warnel,warner,warning,warnish,warnoth,warnt,warp,warpage,warped,warper,warping,warple,warran,warrand,warrant,warree,warren,warrer,warrin,warrior,warrok,warsaw,warse,warsel,warship,warsle,warsler,warst,wart,warted,wartern,warth,wartime,wartlet,warty,warve,warwolf,warworn,wary,was,wasabi,wase,wasel,wash,washday,washed,washen,washer,washery,washin,washing,washman,washoff,washout,washpot,washrag,washtub,washway,washy,wasnt,wasp,waspen,waspily,waspish,waspy,wassail,wassie,wast,wastage,waste,wasted,wastel,waster,wasting,wastrel,wasty,wat,watap,watch,watched,watcher,water,watered,waterer,waterie,watery,wath,watt,wattage,wattape,wattle,wattled,wattman,wauble,wauch,wauchle,waucht,wauf,waugh,waughy,wauken,waukit,waul,waumle,wauner,wauns,waup,waur,wauve,wavable,wavably,wave,waved,wavelet,waver,waverer,wavery,waveson,wavey,wavicle,wavily,waving,wavy,waw,wawa,wawah,wax,waxbill,waxbird,waxbush,waxen,waxer,waxily,waxing,waxlike,waxman,waxweed,waxwing,waxwork,waxy,way,wayaka,wayang,wayback,waybill,waybird,waybook,waybung,wayfare,waygang,waygate,waygone,waying,waylaid,waylay,wayless,wayman,waymark,waymate,waypost,ways,wayside,wayward,waywode,wayworn,waywort,we,weak,weaken,weakish,weakly,weaky,weal,weald,wealth,wealthy,weam,wean,weanel,weaner,weanyer,weapon,wear,wearer,wearied,wearier,wearily,wearing,wearish,weary,weasand,weasel,weaser,weason,weather,weave,weaved,weaver,weaving,weazen,weazeny,web,webbed,webber,webbing,webby,weber,webeye,webfoot,webless,weblike,webster,webwork,webworm,wecht,wed,wedana,wedbed,wedded,wedder,wedding,wede,wedge,wedged,wedger,wedging,wedgy,wedlock,wedset,wee,weeble,weed,weeda,weedage,weeded,weeder,weedery,weedful,weedish,weedow,weedy,week,weekday,weekend,weekly,weekwam,weel,weemen,ween,weeness,weening,weenong,weeny,weep,weeper,weepful,weeping,weeps,weepy,weesh,weeshy,weet,weever,weevil,weevily,weewow,weeze,weft,weftage,wefted,wefty,weigh,weighed,weigher,weighin,weight,weighty,weir,weird,weirdly,weiring,weism,wejack,weka,wekau,wekeen,weki,welcome,weld,welder,welding,weldor,welfare,welk,welkin,well,wellat,welling,wellish,wellman,welly,wels,welsh,welsher,welsium,welt,welted,welter,welting,wem,wemless,wen,wench,wencher,wend,wende,wene,wennish,wenny,went,wenzel,wept,wer,were,werefox,werent,werf,wergil,weri,wert,wervel,wese,weskit,west,weste,wester,western,westing,westy,wet,weta,wetback,wetbird,wetched,wetchet,wether,wetly,wetness,wetted,wetter,wetting,wettish,weve,wevet,wey,wha,whabby,whack,whacker,whacky,whale,whaler,whalery,whaling,whalish,whally,whalm,whalp,whaly,wham,whamble,whame,whammle,whamp,whampee,whample,whan,whand,whang,whangam,whangee,whank,whap,whappet,whapuka,whapuku,whar,whare,whareer,wharf,wharl,wharp,wharry,whart,wharve,whase,whasle,what,whata,whatkin,whatna,whatnot,whats,whatso,whatten,whau,whauk,whaup,whaur,whauve,wheal,whealy,wheam,wheat,wheaten,wheaty,whedder,whee,wheedle,wheel,wheeled,wheeler,wheely,wheem,wheen,wheenge,wheep,wheeple,wheer,wheesht,wheetle,wheeze,wheezer,wheezle,wheezy,wheft,whein,whekau,wheki,whelk,whelked,whelker,whelky,whelm,whelp,whelve,whemmel,when,whenas,whence,wheneer,whenso,where,whereas,whereat,whereby,whereer,wherein,whereof,whereon,whereso,whereto,whereup,wherret,wherrit,wherry,whet,whether,whetile,whetter,whew,whewer,whewl,whewt,whey,wheyey,wheyish,whiba,which,whick,whicken,whicker,whid,whidah,whidder,whiff,whiffer,whiffet,whiffle,whiffy,whift,whig,while,whileen,whilere,whiles,whilie,whilk,whill,whilly,whilock,whilom,whils,whilst,whilter,whim,whimble,whimmy,whimper,whimsey,whimsic,whin,whincow,whindle,whine,whiner,whing,whinge,whinger,whinnel,whinner,whinny,whiny,whip,whipcat,whipman,whippa,whipped,whipper,whippet,whippy,whipsaw,whipt,whir,whirken,whirl,whirled,whirler,whirley,whirly,whirret,whirrey,whirroo,whirry,whirtle,whish,whisk,whisker,whiskey,whisky,whisp,whisper,whissle,whist,whister,whistle,whistly,whit,white,whited,whitely,whiten,whites,whither,whiting,whitish,whitlow,whits,whittaw,whitten,whitter,whittle,whity,whiz,whizgig,whizzer,whizzle,who,whoa,whoever,whole,wholly,whom,whomble,whomso,whone,whoo,whoof,whoop,whoopee,whooper,whoops,whoosh,whop,whopper,whorage,whore,whorish,whorl,whorled,whorly,whort,whortle,whose,whosen,whud,whuff,whuffle,whulk,whulter,whummle,whun,whup,whush,whuskie,whussle,whute,whuther,whutter,whuz,why,whyever,whyfor,whyness,whyo,wi,wice,wicht,wichtje,wick,wicked,wicken,wicker,wicket,wicking,wickiup,wickup,wicky,wicopy,wid,widbin,widder,widdle,widdy,wide,widegab,widely,widen,widener,widgeon,widish,widow,widowed,widower,widowly,widowy,width,widu,wield,wielder,wieldy,wiener,wienie,wife,wifedom,wifeism,wifekin,wifelet,wifely,wifie,wifish,wifock,wig,wigan,wigdom,wigful,wigged,wiggen,wigger,wiggery,wigging,wiggish,wiggism,wiggle,wiggler,wiggly,wiggy,wight,wightly,wigless,wiglet,wiglike,wigtail,wigwag,wigwam,wiikite,wild,wildcat,wilded,wilder,wilding,wildish,wildly,wile,wileful,wilga,wilgers,wilily,wilk,wilkin,will,willawa,willed,willer,willet,willey,willful,willie,willier,willies,willing,willock,willow,willowy,willy,willyer,wilsome,wilt,wilter,wily,wim,wimble,wimbrel,wime,wimick,wimple,win,wince,wincer,wincey,winch,wincher,wincing,wind,windage,windbag,winddog,winded,winder,windigo,windily,winding,windle,windles,windlin,windock,windore,window,windowy,windrow,windup,windway,windy,wine,wined,winemay,winepot,winer,winery,winesop,winevat,winful,wing,wingcut,winged,winger,wingle,winglet,wingman,wingy,winish,wink,winkel,winker,winking,winkle,winklet,winly,winna,winnard,winnel,winner,winning,winnle,winnow,winrace,winrow,winsome,wint,winter,wintle,wintry,winy,winze,wipe,wiper,wippen,wips,wir,wirable,wirble,wird,wire,wirebar,wired,wireman,wirer,wireway,wirily,wiring,wirl,wirling,wirr,wirra,wirrah,wiry,wis,wisdom,wise,wisely,wiseman,wisen,wisent,wiser,wish,wisha,wished,wisher,wishful,wishing,wishly,wishmay,wisht,wisket,wisp,wispish,wispy,wiss,wisse,wissel,wist,wiste,wistful,wistit,wistiti,wit,witan,witch,witched,witchen,witchet,witchy,wite,witess,witful,with,withal,withe,withen,wither,withers,withery,within,without,withy,witjar,witless,witlet,witling,witloof,witness,witney,witship,wittal,witted,witter,wittily,witting,wittol,witty,witwall,wive,wiver,wivern,wiz,wizard,wizen,wizened,wizier,wizzen,wloka,wo,woad,woader,woadman,woady,woak,woald,woan,wob,wobble,wobbler,wobbly,wobster,wod,woddie,wode,wodge,wodgy,woe,woeful,woesome,woevine,woeworn,woffler,woft,wog,wogiet,woibe,wokas,woke,wokowi,wold,woldy,wolf,wolfdom,wolfen,wolfer,wolfish,wolfkin,wolfram,wollop,wolter,wolve,wolver,woman,womanly,womb,wombat,wombed,womble,womby,womera,won,wonder,wone,wonegan,wong,wonga,wongen,wongshy,wongsky,woning,wonky,wonna,wonned,wonner,wonning,wonnot,wont,wonted,wonting,woo,wooable,wood,woodbin,woodcut,wooded,wooden,woodeny,woodine,wooding,woodish,woodlet,woodly,woodman,woodrow,woodsy,woodwax,woody,wooer,woof,woofed,woofell,woofer,woofy,woohoo,wooing,wool,woold,woolder,wooled,woolen,wooler,woolert,woolly,woolman,woolsey,woom,woomer,woon,woons,woorali,woorari,woosh,wootz,woozle,woozy,wop,woppish,wops,worble,word,wordage,worded,worder,wordily,wording,wordish,wordle,wordman,wordy,wore,work,workbag,workbox,workday,worked,worker,working,workman,workout,workpan,works,worky,world,worlded,worldly,worldy,worm,wormed,wormer,wormil,worming,wormy,worn,wornil,worral,worried,worrier,worrit,worry,worse,worsen,worser,worset,worship,worst,worsted,wort,worth,worthy,wosbird,wot,wote,wots,wottest,wotteth,woubit,wouch,wouf,wough,would,wouldnt,wouldst,wound,wounded,wounder,wounds,woundy,wourali,wourari,wournil,wove,woven,wow,wowser,wowsery,wowt,woy,wrack,wracker,wraggle,wraith,wraithe,wraithy,wraitly,wramp,wran,wrang,wrangle,wranny,wrap,wrapped,wrapper,wrasse,wrastle,wrath,wrathy,wraw,wrawl,wrawler,wraxle,wreak,wreat,wreath,wreathe,wreathy,wreck,wrecker,wrecky,wren,wrench,wrenlet,wrest,wrester,wrestle,wretch,wricht,wrick,wride,wried,wrier,wriest,wrig,wriggle,wriggly,wright,wring,wringer,wrinkle,wrinkly,wrist,wristed,wrister,writ,write,writee,writer,writh,writhe,writhed,writhen,writher,writhy,writing,written,writter,wrive,wro,wrocht,wroke,wroken,wrong,wronged,wronger,wrongly,wrossle,wrote,wroth,wrothly,wrothy,wrought,wrox,wrung,wry,wrybill,wryly,wryneck,wryness,wrytail,wud,wuddie,wudge,wudu,wugg,wulk,wull,wullcat,wulliwa,wumble,wumman,wummel,wun,wungee,wunna,wunner,wunsome,wup,wur,wurley,wurmal,wurrus,wurset,wurzel,wush,wusp,wuss,wusser,wust,wut,wuther,wuzu,wuzzer,wuzzle,wuzzy,wy,wyde,wye,wyke,wyle,wymote,wyn,wynd,wyne,wynn,wype,wyson,wyss,wyve,wyver,x,xanthic,xanthin,xanthyl,xarque,xebec,xenia,xenial,xenian,xenium,xenon,xenyl,xerafin,xerarch,xerasia,xeric,xeriff,xerogel,xeroma,xeronic,xerosis,xerotes,xerotic,xi,xiphias,xiphiid,xiphoid,xoana,xoanon,xurel,xyla,xylan,xylate,xylem,xylene,xylenol,xylenyl,xyletic,xylic,xylidic,xylinid,xylite,xylitol,xylogen,xyloid,xylol,xyloma,xylon,xylonic,xylose,xyloyl,xylyl,xylylic,xyphoid,xyrid,xyst,xyster,xysti,xystos,xystum,xystus,y,ya,yaba,yabber,yabbi,yabble,yabby,yabu,yacal,yacca,yachan,yacht,yachter,yachty,yad,yade,yaff,yaffle,yagger,yagi,yagua,yaguaza,yah,yahan,yahoo,yair,yaird,yaje,yajeine,yak,yakalo,yakamik,yakin,yakka,yakman,yalb,yale,yali,yalla,yallaer,yallow,yam,yamamai,yamanai,yamen,yamilke,yammer,yamp,yampa,yamph,yamshik,yan,yander,yang,yangtao,yank,yanking,yanky,yaoort,yaourti,yap,yapa,yaply,yapness,yapok,yapp,yapped,yapper,yapping,yappish,yappy,yapster,yar,yarak,yaray,yarb,yard,yardage,yardang,yardarm,yarder,yardful,yarding,yardman,yare,yareta,yark,yarke,yarl,yarly,yarm,yarn,yarnen,yarner,yarpha,yarr,yarran,yarrow,yarth,yarthen,yarwhip,yas,yashiro,yashmak,yat,yate,yati,yatter,yaud,yauld,yaupon,yautia,yava,yaw,yawl,yawler,yawn,yawner,yawney,yawnful,yawnily,yawning,yawnups,yawny,yawp,yawper,yawroot,yaws,yawweed,yawy,yaxche,yaya,ycie,yday,ye,yea,yeah,yealing,yean,year,yeara,yeard,yearday,yearful,yearly,yearn,yearock,yearth,yeast,yeasty,yeat,yeather,yed,yede,yee,yeel,yees,yegg,yeggman,yeguita,yeld,yeldrin,yelk,yell,yeller,yelling,yelloch,yellow,yellows,yellowy,yelm,yelmer,yelp,yelper,yelt,yen,yender,yeni,yenite,yeo,yeoman,yep,yer,yerb,yerba,yercum,yerd,yere,yerga,yerk,yern,yerth,yes,yese,yeso,yesso,yest,yester,yestern,yesty,yet,yeta,yetapa,yeth,yether,yetlin,yeuk,yeuky,yeven,yew,yex,yez,yezzy,ygapo,yield,yielden,yielder,yieldy,yigh,yill,yilt,yin,yince,yinst,yip,yird,yirk,yirm,yirn,yirr,yirth,yis,yite,ym,yn,ynambu,yo,yobi,yocco,yochel,yock,yockel,yodel,yodeler,yodh,yoe,yoga,yogh,yoghurt,yogi,yogin,yogism,yogist,yogoite,yohimbe,yohimbi,yoi,yoick,yoicks,yojan,yojana,yok,yoke,yokeage,yokel,yokelry,yoker,yoking,yoky,yolden,yolk,yolked,yolky,yom,yomer,yon,yond,yonder,yonner,yonside,yont,yook,yoop,yor,yore,york,yorker,yot,yote,you,youd,youden,youdith,youff,youl,young,younger,youngly,youngun,younker,youp,your,yourn,yours,yoursel,youse,youth,youthen,youthy,youve,youward,youze,yoven,yow,yowie,yowl,yowler,yowley,yowt,yox,yoy,yperite,yr,yttria,yttric,yttrium,yuan,yuca,yucca,yuck,yuckel,yucker,yuckle,yucky,yuft,yugada,yuh,yukkel,yulan,yule,yummy,yungan,yurt,yurta,yus,yusdrum,yutu,yuzlik,yuzluk,z,za,zabeta,zabra,zabti,zabtie,zac,zacate,zacaton,zachun,zad,zadruga,zaffar,zaffer,zafree,zag,zagged,zain,zak,zakkeu,zaman,zamang,zamarra,zamarro,zambo,zamorin,zamouse,zander,zanella,zant,zante,zany,zanyish,zanyism,zanze,zapas,zaphara,zapota,zaptiah,zaptieh,zapupe,zaqqum,zar,zareba,zarf,zarnich,zarp,zat,zati,zattare,zax,zayat,zayin,zeal,zealful,zealot,zealous,zebra,zebraic,zebrass,zebrine,zebroid,zebrula,zebrule,zebu,zebub,zeburro,zechin,zed,zedoary,zee,zeed,zehner,zein,zeism,zeist,zel,zelator,zemeism,zemi,zemmi,zemni,zemstvo,zenana,zendik,zenick,zenith,zenu,zeolite,zephyr,zephyry,zequin,zer,zerda,zero,zeroize,zest,zestful,zesty,zeta,zetetic,zeugma,ziamet,ziara,ziarat,zibet,zibetum,ziega,zieger,ziffs,zig,ziganka,zigzag,zihar,zikurat,zillah,zimarra,zimb,zimbi,zimme,zimmi,zimmis,zimocca,zinc,zincate,zincic,zincide,zincify,zincing,zincite,zincize,zincke,zincky,zinco,zincous,zincum,zing,zingel,zink,zinsang,zip,ziphian,zipper,zipping,zippy,zira,zirai,zircite,zircon,zither,zizz,zloty,zo,zoa,zoacum,zoaria,zoarial,zoarium,zobo,zocco,zoccolo,zodiac,zoea,zoeal,zoeform,zoetic,zogan,zogo,zoic,zoid,zoisite,zoism,zoist,zoistic,zokor,zoll,zolle,zombi,zombie,zonal,zonally,zonar,zonary,zonate,zonated,zone,zoned,zonelet,zonic,zoning,zonite,zonitid,zonoid,zonular,zonule,zonulet,zonure,zonurid,zoo,zoocarp,zoocyst,zooecia,zoogamy,zoogene,zoogeny,zoogony,zooid,zooidal,zooks,zoolite,zoolith,zoology,zoom,zoon,zoonal,zoonic,zoonist,zoonite,zoonomy,zoons,zoonule,zoopery,zoopsia,zoosis,zootaxy,zooter,zootic,zootomy,zootype,zoozoo,zorgite,zoril,zorilla,zorillo,zorro,zoster,zounds,zowie,zudda,zuisin,zumatic,zunyite,zuza,zwitter,zyga,zygal,zygion,zygite,zygoma,zygon,zygose,zygosis,zygote,zygotic,zygous,zymase,zyme,zymic,zymin,zymite,zymogen,zymoid,zymome,zymomin,zymosis,zymotic,zymurgy,zythem,zythum";

/***/ },
/* 78 */
/*!***********************************************!*\
  !*** ./app/dl/src/common/secureRandom.coffee ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! secure-random */ 79);


/***/ },
/* 79 */
/*!*****************************************************!*\
  !*** ./app/dl/~/secure-random/lib/secure-random.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, Buffer) {!function(globals){
	'use strict'

	//*** UMD BEGIN
	if (true) { //require.js / AMD
	  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    return secureRandom
	  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
	} else if (typeof module !== 'undefined' && module.exports) { //CommonJS
	  module.exports = secureRandom
	} else { //script / browser
	  globals.secureRandom = secureRandom
	}
	//*** UMD END

	//options.type is the only valid option
	function secureRandom(count, options) {
	  options = options || {type: 'Array'}
	  //we check for process.pid to prevent browserify from tricking us
	  if (typeof process != 'undefined' && typeof process.pid == 'number') {
	    return nodeRandom(count, options)
	  } else {
	    var crypto = window.crypto || window.msCrypto
	    if (!crypto) throw new Error("Your browser does not support window.crypto.")
	    return browserRandom(count, options)
	  }
	}

	function nodeRandom(count, options) {
	  var crypto = __webpack_require__(/*! crypto */ 80)
	  var buf = crypto.randomBytes(count)

	  switch (options.type) {
	    case 'Array':
	      return [].slice.call(buf)
	    case 'Buffer':
	      return buf
	    case 'Uint8Array':
	      var arr = new Uint8Array(count)
	      for (var i = 0; i < count; ++i) { arr[i] = buf.readUInt8(i) }
	      return arr
	    default:
	      throw new Error(options.type + " is unsupported.")
	  }
	}

	function browserRandom(count, options) {
	  var nativeArr = new Uint8Array(count)
	  var crypto = window.crypto || window.msCrypto
	  crypto.getRandomValues(nativeArr)

	  switch (options.type) {
	    case 'Array':
	      return [].slice.call(nativeArr)
	    case 'Buffer':
	      try { var b = new Buffer(1) } catch(e) { throw new Error('Buffer not supported in this environment. Use Node.js or Browserify for browser support.')}
	      return new Buffer(nativeArr)
	    case 'Uint8Array':
	      return nativeArr
	    default:
	      throw new Error(options.type + " is unsupported.")
	  }
	}

	secureRandom.randomArray = function(byteCount) {
	  return secureRandom(byteCount, {type: 'Array'})
	}

	secureRandom.randomUint8Array = function(byteCount) {
	  return secureRandom(byteCount, {type: 'Uint8Array'})
	}

	secureRandom.randomBuffer = function(byteCount) {
	  return secureRandom(byteCount, {type: 'Buffer'})
	}


	}(this);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 11), __webpack_require__(/*! (webpack)/~/node-libs-browser/~/buffer/index.js */ 2).Buffer))

/***/ },
/* 80 */
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
24
/******/ ])));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA1ZDFiMGQ5Mzc3ZTc3MDU3MmEud29ya2VyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDEwNWQxYjBkOTM3N2U3NzA1NzJhIiwid2VicGFjazovLy9jOi9iaXRzaGFyZXN3YWxsZXQvd3d3L2FwcC93b3JrZXJzL0FkZHJlc3NJbmRleFdvcmtlci5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvZGwvc3JjL2NvbW1vbi9rZXlfdXRpbHMuY29mZmVlIiwid2VicGFjazovLy8od2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2J1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9idWZmZXIvfi9iYXNlNjQtanMvbGliL2I2NC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9idWZmZXIvfi9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2J1ZmZlci9+L2lzLWFycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL2FwcC9kbC9zcmMvZWNjL2tleV9wcml2YXRlLmNvZmZlZSIsIndlYnBhY2s6Ly8vLi9hcHAvZGwvfi9lY3VydmUvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL2FwcC9kbC9+L2VjdXJ2ZS9saWIvcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vYXNzZXJ0L2Fzc2VydC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi91dGlsL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L3V0aWwvc3VwcG9ydC9pc0J1ZmZlckJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vdXRpbC9+L2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2RsL34vYmlnaS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2RsL34vYmlnaS9saWIvYmlnaS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvZGwvfi9iaWdpL2xpYi9jb252ZXJ0LmpzIiwid2VicGFjazovLy8uL2FwcC9kbC9+L2VjdXJ2ZS9saWIvY3VydmUuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2RsL34vZWN1cnZlL2xpYi9uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvZGwvfi9lY3VydmUvbGliL2N1cnZlcy5qc29uIiwid2VicGFjazovLy8uL2FwcC9kbC9+L2JzNTgvbGliL2JzNTguanMiLCJ3ZWJwYWNrOi8vL2M6L2JpdHNoYXJlc3dhbGxldC93d3cvYXBwL2RsL3NyYy9jb21tb24vaGFzaC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9jcnlwdG8tYnJvd3NlcmlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9jcnlwdG8tYnJvd3NlcmlmeS9ybmcuanMiLCJ3ZWJwYWNrOi8vL2NyeXB0byAoaWdub3JlZCkiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vY3J5cHRvLWJyb3dzZXJpZnkvY3JlYXRlLWhhc2guanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vY3J5cHRvLWJyb3dzZXJpZnkvfi9zaGEuanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vY3J5cHRvLWJyb3dzZXJpZnkvfi9zaGEuanMvaGFzaC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9jcnlwdG8tYnJvd3NlcmlmeS9+L3NoYS5qcy9zaGExLmpzIiwid2VicGFjazovLy8od2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2NyeXB0by1icm93c2VyaWZ5L34vc2hhLmpzL3NoYTI1Ni5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9jcnlwdG8tYnJvd3NlcmlmeS9+L3NoYS5qcy9zaGE1MTIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vY3J5cHRvLWJyb3dzZXJpZnkvbWQ1LmpzIiwid2VicGFjazovLy8od2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2NyeXB0by1icm93c2VyaWZ5L2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vY3J5cHRvLWJyb3dzZXJpZnkvfi9yaXBlbWQxNjAvbGliL3JpcGVtZDE2MC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9jcnlwdG8tYnJvd3NlcmlmeS9jcmVhdGUtaG1hYy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9jcnlwdG8tYnJvd3NlcmlmeS9wYmtkZjIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vY3J5cHRvLWJyb3dzZXJpZnkvfi9wYmtkZjItY29tcGF0L3Bia2RmMi5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvZGwvc3JjL2VjYy9rZXlfcHVibGljLmNvZmZlZSIsIndlYnBhY2s6Ly8vLi9hcHAvZGwvc3JjL2NoYWluL2NvbmZpZy5jb2ZmZWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL2RsL3NyYy9lY2MvYWVzLmNvZmZlZSIsIndlYnBhY2s6Ly8vLi9hcHAvZGwvfi9jcnlwdG8tanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2RsL34vY3J5cHRvLWpzL2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2RsL34vY3J5cHRvLWpzL3g2NC1jb3JlLmpzIiwid2VicGFjazovLy8uL2FwcC9kbC9+L2NyeXB0by1qcy9saWItdHlwZWRhcnJheXMuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2RsL34vY3J5cHRvLWpzL2VuYy11dGYxNi5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvZGwvfi9jcnlwdG8tanMvZW5jLWJhc2U2NC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvZGwvfi9jcnlwdG8tanMvbWQ1LmpzIiwid2VicGFjazovLy8uL2FwcC9kbC9+L2NyeXB0by1qcy9zaGExLmpzIiwid2VicGFjazovLy8uL2FwcC9kbC9+L2NyeXB0by1qcy9zaGEyNTYuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2RsL34vY3J5cHRvLWpzL3NoYTIyNC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvZGwvfi9jcnlwdG8tanMvc2hhNTEyLmpzIiwid2VicGFjazovLy8uL2FwcC9kbC9+L2NyeXB0by1qcy9zaGEzODQuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2RsL34vY3J5cHRvLWpzL3NoYTMuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2RsL34vY3J5cHRvLWpzL3JpcGVtZDE2MC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvZGwvfi9jcnlwdG8tanMvaG1hYy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvZGwvfi9jcnlwdG8tanMvcGJrZGYyLmpzIiwid2VicGFjazovLy8uL2FwcC9kbC9+L2NyeXB0by1qcy9ldnBrZGYuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2RsL34vY3J5cHRvLWpzL2NpcGhlci1jb3JlLmpzIiwid2VicGFjazovLy8uL2FwcC9kbC9+L2NyeXB0by1qcy9tb2RlLWNmYi5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvZGwvfi9jcnlwdG8tanMvbW9kZS1jdHIuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2RsL34vY3J5cHRvLWpzL21vZGUtY3RyLWdsYWRtYW4uanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2RsL34vY3J5cHRvLWpzL21vZGUtb2ZiLmpzIiwid2VicGFjazovLy8uL2FwcC9kbC9+L2NyeXB0by1qcy9tb2RlLWVjYi5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvZGwvfi9jcnlwdG8tanMvcGFkLWFuc2l4OTIzLmpzIiwid2VicGFjazovLy8uL2FwcC9kbC9+L2NyeXB0by1qcy9wYWQtaXNvMTAxMjYuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2RsL34vY3J5cHRvLWpzL3BhZC1pc285Nzk3MS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvZGwvfi9jcnlwdG8tanMvcGFkLXplcm9wYWRkaW5nLmpzIiwid2VicGFjazovLy8uL2FwcC9kbC9+L2NyeXB0by1qcy9wYWQtbm9wYWRkaW5nLmpzIiwid2VicGFjazovLy8uL2FwcC9kbC9+L2NyeXB0by1qcy9mb3JtYXQtaGV4LmpzIiwid2VicGFjazovLy8uL2FwcC9kbC9+L2NyeXB0by1qcy9hZXMuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2RsL34vY3J5cHRvLWpzL3RyaXBsZWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvZGwvfi9jcnlwdG8tanMvcmM0LmpzIiwid2VicGFjazovLy8uL2FwcC9kbC9+L2NyeXB0by1qcy9yYWJiaXQuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2RsL34vY3J5cHRvLWpzL3JhYmJpdC1sZWdhY3kuanMiLCJ3ZWJwYWNrOi8vL2M6L2JpdHNoYXJlc3dhbGxldC93d3cvYXBwL2RsL3NyYy9jb21tb24vYnl0ZWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vYzovYml0c2hhcmVzd2FsbGV0L3d3dy9hcHAvZGwvbGliL2J5dGVidWZmZXJfMy41LjQuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2RsL3NyYy9lY2MvYWRkcmVzcy5jb2ZmZWUiLCJ3ZWJwYWNrOi8vL2M6L2JpdHNoYXJlc3dhbGxldC93d3cvYXBwL2RsL3NyYy9jb21tb24vZGljdGlvbmFyeV9lbi5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvZGwvc3JjL2NvbW1vbi9zZWN1cmVSYW5kb20uY29mZmVlIiwid2VicGFjazovLy8uL2FwcC9kbC9+L3NlY3VyZS1yYW5kb20vbGliL3NlY3VyZS1yYW5kb20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiIFx0dmFyIGhvdEFwcGx5T25VcGRhdGUgPSB0cnVlO1xyXG4gXHR2YXIgaG90Q3VycmVudEhhc2ggPSBcIjEwNWQxYjBkOTM3N2U3NzA1NzJhXCI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuIFx0dmFyIGhvdEN1cnJlbnRNb2R1bGVEYXRhID0ge307XHJcbiBcdHZhciBob3RDdXJyZW50UGFyZW50cyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiBcdFxyXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuIFx0XHR2YXIgbWUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcclxuIFx0XHRpZighbWUpIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fO1xyXG4gXHRcdHZhciBmbiA9IGZ1bmN0aW9uKHJlcXVlc3QpIHtcclxuIFx0XHRcdGlmKG1lLmhvdC5hY3RpdmUpIHtcclxuIFx0XHRcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xyXG4gXHRcdFx0XHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA8IDApXHJcbiBcdFx0XHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMucHVzaChtb2R1bGVJZCk7XHJcbiBcdFx0XHRcdFx0aWYobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA8IDApXHJcbiBcdFx0XHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xyXG4gXHRcdFx0XHR9IGVsc2UgaG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xyXG4gXHRcdFx0fSBlbHNlIHtcclxuIFx0XHRcdFx0Y29uc29sZS53YXJuKFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgcmVxdWVzdCArIFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArIG1vZHVsZUlkKTtcclxuIFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbXTtcclxuIFx0XHRcdH1cclxuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHJlcXVlc3QpO1xyXG4gXHRcdH07XHJcbiBcdFx0Zm9yKHZhciBuYW1lIGluIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfX3dlYnBhY2tfcmVxdWlyZV9fLCBuYW1lKSkge1xyXG4gXHRcdFx0XHRmbltuYW1lXSA9IF9fd2VicGFja19yZXF1aXJlX19bbmFtZV07XHJcbiBcdFx0XHR9XHJcbiBcdFx0fVxyXG4gXHRcdGZuLmUgPSBmdW5jdGlvbihjaHVua0lkLCBjYWxsYmFjaykge1xyXG4gXHRcdFx0aWYoaG90U3RhdHVzID09PSBcInJlYWR5XCIpXHJcbiBcdFx0XHRcdGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XHJcbiBcdFx0XHRob3RDaHVua3NMb2FkaW5nKys7XHJcbiBcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmUoY2h1bmtJZCwgZnVuY3Rpb24oKSB7XHJcbiBcdFx0XHRcdHRyeSB7XHJcbiBcdFx0XHRcdFx0Y2FsbGJhY2suY2FsbChudWxsLCBmbik7XHJcbiBcdFx0XHRcdH0gZmluYWxseSB7XHJcbiBcdFx0XHRcdFx0ZmluaXNoQ2h1bmtMb2FkaW5nKCk7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHJcbiBcdFx0XHRcdGZ1bmN0aW9uIGZpbmlzaENodW5rTG9hZGluZygpIHtcclxuIFx0XHRcdFx0XHRob3RDaHVua3NMb2FkaW5nLS07XHJcbiBcdFx0XHRcdFx0aWYoaG90U3RhdHVzID09PSBcInByZXBhcmVcIikge1xyXG4gXHRcdFx0XHRcdFx0aWYoIWhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSkge1xyXG4gXHRcdFx0XHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcclxuIFx0XHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0XHRcdGlmKGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiYgaG90V2FpdGluZ0ZpbGVzID09PSAwKSB7XHJcbiBcdFx0XHRcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcclxuIFx0XHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdH0pO1xyXG4gXHRcdH07XHJcbiBcdFx0cmV0dXJuIGZuO1xyXG4gXHR9XHJcbiBcdFxyXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gXHRcdHZhciBob3QgPSB7XHJcbiBcdFx0XHQvLyBwcml2YXRlIHN0dWZmXHJcbiBcdFx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxyXG4gXHRcdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcclxuIFx0XHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxyXG4gXHRcdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXHJcbiBcdFx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcclxuIFx0XHJcbiBcdFx0XHQvLyBNb2R1bGUgQVBJXHJcbiBcdFx0XHRhY3RpdmU6IHRydWUsXHJcbiBcdFx0XHRhY2NlcHQ6IGZ1bmN0aW9uKGRlcCwgY2FsbGJhY2spIHtcclxuIFx0XHRcdFx0aWYodHlwZW9mIGRlcCA9PT0gXCJ1bmRlZmluZWRcIilcclxuIFx0XHRcdFx0XHRob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XHJcbiBcdFx0XHRcdGVsc2UgaWYodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKVxyXG4gXHRcdFx0XHRcdGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xyXG4gXHRcdFx0XHRlbHNlIGlmKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXHJcbiBcdFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcclxuIFx0XHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrO1xyXG4gXHRcdFx0XHRlbHNlXHJcbiBcdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2s7XHJcbiBcdFx0XHR9LFxyXG4gXHRcdFx0ZGVjbGluZTogZnVuY3Rpb24oZGVwKSB7XHJcbiBcdFx0XHRcdGlmKHR5cGVvZiBkZXAgPT09IFwidW5kZWZpbmVkXCIpXHJcbiBcdFx0XHRcdFx0aG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xyXG4gXHRcdFx0XHRlbHNlIGlmKHR5cGVvZiBkZXAgPT09IFwibnVtYmVyXCIpXHJcbiBcdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcclxuIFx0XHRcdFx0ZWxzZVxyXG4gXHRcdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXHJcbiBcdFx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xyXG4gXHRcdFx0fSxcclxuIFx0XHRcdGRpc3Bvc2U6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xyXG4gXHRcdFx0fSxcclxuIFx0XHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcclxuIFx0XHRcdH0sXHJcbiBcdFx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xyXG4gXHRcdFx0XHRpZihpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XHJcbiBcdFx0XHR9LFxyXG4gXHRcclxuIFx0XHRcdC8vIE1hbmFnZW1lbnQgQVBJXHJcbiBcdFx0XHRjaGVjazogaG90Q2hlY2ssXHJcbiBcdFx0XHRhcHBseTogaG90QXBwbHksXHJcbiBcdFx0XHRzdGF0dXM6IGZ1bmN0aW9uKGwpIHtcclxuIFx0XHRcdFx0aWYoIWwpIHJldHVybiBob3RTdGF0dXM7XHJcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XHJcbiBcdFx0XHR9LFxyXG4gXHRcdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xyXG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xyXG4gXHRcdFx0fSxcclxuIFx0XHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcclxuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XHJcbiBcdFx0XHRcdGlmKGlkeCA+PSAwKSBob3RTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcclxuIFx0XHRcdH0sXHJcbiBcdFxyXG4gXHRcdFx0Ly9pbmhlcml0IGZyb20gcHJldmlvdXMgZGlzcG9zZSBjYWxsXHJcbiBcdFx0XHRkYXRhOiBob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cclxuIFx0XHR9O1xyXG4gXHRcdHJldHVybiBob3Q7XHJcbiBcdH1cclxuIFx0XHJcbiBcdHZhciBob3RTdGF0dXNIYW5kbGVycyA9IFtdO1xyXG4gXHR2YXIgaG90U3RhdHVzID0gXCJpZGxlXCI7XHJcbiBcdFxyXG4gXHRmdW5jdGlvbiBob3RTZXRTdGF0dXMobmV3U3RhdHVzKSB7XHJcbiBcdFx0aG90U3RhdHVzID0gbmV3U3RhdHVzO1xyXG4gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBob3RTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcclxuIFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcclxuIFx0fVxyXG4gXHRcclxuIFx0Ly8gd2hpbGUgZG93bmxvYWRpbmdcclxuIFx0dmFyIGhvdFdhaXRpbmdGaWxlcyA9IDA7XHJcbiBcdHZhciBob3RDaHVua3NMb2FkaW5nID0gMDtcclxuIFx0dmFyIGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xyXG4gXHR2YXIgaG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcclxuIFx0dmFyIGhvdEF2YWlsaWJsZUZpbGVzTWFwID0ge307XHJcbiBcdHZhciBob3RDYWxsYmFjaztcclxuIFx0XHJcbiBcdC8vIFRoZSB1cGRhdGUgaW5mb1xyXG4gXHR2YXIgaG90VXBkYXRlLCBob3RVcGRhdGVOZXdIYXNoO1xyXG4gXHRcclxuIFx0ZnVuY3Rpb24gdG9Nb2R1bGVJZChpZCkge1xyXG4gXHRcdHZhciBpc051bWJlciA9ICgraWQpICsgXCJcIiA9PT0gaWQ7XHJcbiBcdFx0cmV0dXJuIGlzTnVtYmVyID8gK2lkIDogaWQ7XHJcbiBcdH1cclxuIFx0XHJcbiBcdGZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5LCBjYWxsYmFjaykge1xyXG4gXHRcdGlmKGhvdFN0YXR1cyAhPT0gXCJpZGxlXCIpIHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xyXG4gXHRcdGlmKHR5cGVvZiBhcHBseSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiBcdFx0XHRob3RBcHBseU9uVXBkYXRlID0gZmFsc2U7XHJcbiBcdFx0XHRjYWxsYmFjayA9IGFwcGx5O1xyXG4gXHRcdH0gZWxzZSB7XHJcbiBcdFx0XHRob3RBcHBseU9uVXBkYXRlID0gYXBwbHk7XHJcbiBcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKGVycikge1xyXG4gXHRcdFx0XHRpZihlcnIpIHRocm93IGVycjtcclxuIFx0XHRcdH07XHJcbiBcdFx0fVxyXG4gXHRcdGhvdFNldFN0YXR1cyhcImNoZWNrXCIpO1xyXG4gXHRcdGhvdERvd25sb2FkTWFuaWZlc3QoZnVuY3Rpb24oZXJyLCB1cGRhdGUpIHtcclxuIFx0XHRcdGlmKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XHJcbiBcdFx0XHRpZighdXBkYXRlKSB7XHJcbiBcdFx0XHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XHJcbiBcdFx0XHRcdGNhbGxiYWNrKG51bGwsIG51bGwpO1xyXG4gXHRcdFx0XHRyZXR1cm47XHJcbiBcdFx0XHR9XHJcbiBcdFxyXG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcclxuIFx0XHRcdGhvdEF2YWlsaWJsZUZpbGVzTWFwID0ge307XHJcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcclxuIFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCB1cGRhdGUuYy5sZW5ndGg7IGkrKylcclxuIFx0XHRcdFx0aG90QXZhaWxpYmxlRmlsZXNNYXBbdXBkYXRlLmNbaV1dID0gdHJ1ZTtcclxuIFx0XHRcdGhvdFVwZGF0ZU5ld0hhc2ggPSB1cGRhdGUuaDtcclxuIFx0XHJcbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xyXG4gXHRcdFx0aG90Q2FsbGJhY2sgPSBjYWxsYmFjaztcclxuIFx0XHRcdGhvdFVwZGF0ZSA9IHt9O1xyXG4gXHRcdFx0dmFyIGNodW5rSWQgPSAwO1xyXG4gXHRcdFx0eyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWxvbmUtYmxvY2tzXHJcbiBcdFx0XHRcdC8qZ2xvYmFscyBjaHVua0lkICovXHJcbiBcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xyXG4gXHRcdFx0fVxyXG4gXHRcdFx0aWYoaG90U3RhdHVzID09PSBcInByZXBhcmVcIiAmJiBob3RDaHVua3NMb2FkaW5nID09PSAwICYmIGhvdFdhaXRpbmdGaWxlcyA9PT0gMCkge1xyXG4gXHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XHJcbiBcdFx0XHR9XHJcbiBcdFx0fSk7XHJcbiBcdH1cclxuIFx0XHJcbiBcdGZ1bmN0aW9uIGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuIFx0XHRpZighaG90QXZhaWxpYmxlRmlsZXNNYXBbY2h1bmtJZF0gfHwgIWhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdKVxyXG4gXHRcdFx0cmV0dXJuO1xyXG4gXHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gZmFsc2U7XHJcbiBcdFx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xyXG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcclxuIFx0XHRcdFx0aG90VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcclxuIFx0XHRcdH1cclxuIFx0XHR9XHJcbiBcdFx0aWYoLS1ob3RXYWl0aW5nRmlsZXMgPT09IDAgJiYgaG90Q2h1bmtzTG9hZGluZyA9PT0gMCkge1xyXG4gXHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xyXG4gXHRcdH1cclxuIFx0fVxyXG4gXHRcclxuIFx0ZnVuY3Rpb24gaG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xyXG4gXHRcdGlmKCFob3RBdmFpbGlibGVGaWxlc01hcFtjaHVua0lkXSkge1xyXG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcclxuIFx0XHR9IGVsc2Uge1xyXG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xyXG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzKys7XHJcbiBcdFx0XHRob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpO1xyXG4gXHRcdH1cclxuIFx0fVxyXG4gXHRcclxuIFx0ZnVuY3Rpb24gaG90VXBkYXRlRG93bmxvYWRlZCgpIHtcclxuIFx0XHRob3RTZXRTdGF0dXMoXCJyZWFkeVwiKTtcclxuIFx0XHR2YXIgY2FsbGJhY2sgPSBob3RDYWxsYmFjaztcclxuIFx0XHRob3RDYWxsYmFjayA9IG51bGw7XHJcbiBcdFx0aWYoIWNhbGxiYWNrKSByZXR1cm47XHJcbiBcdFx0aWYoaG90QXBwbHlPblVwZGF0ZSkge1xyXG4gXHRcdFx0aG90QXBwbHkoaG90QXBwbHlPblVwZGF0ZSwgY2FsbGJhY2spO1xyXG4gXHRcdH0gZWxzZSB7XHJcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XHJcbiBcdFx0XHRmb3IodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xyXG4gXHRcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcclxuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaCh0b01vZHVsZUlkKGlkKSk7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdH1cclxuIFx0XHRcdGNhbGxiYWNrKG51bGwsIG91dGRhdGVkTW9kdWxlcyk7XHJcbiBcdFx0fVxyXG4gXHR9XHJcbiBcdFxyXG4gXHRmdW5jdGlvbiBob3RBcHBseShvcHRpb25zLCBjYWxsYmFjaykge1xyXG4gXHRcdGlmKGhvdFN0YXR1cyAhPT0gXCJyZWFkeVwiKSB0aHJvdyBuZXcgRXJyb3IoXCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXNcIik7XHJcbiBcdFx0aWYodHlwZW9mIG9wdGlvbnMgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gXHRcdFx0Y2FsbGJhY2sgPSBvcHRpb25zO1xyXG4gXHRcdFx0b3B0aW9ucyA9IHt9O1xyXG4gXHRcdH0gZWxzZSBpZihvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zID09PSBcIm9iamVjdFwiKSB7XHJcbiBcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKGVycikge1xyXG4gXHRcdFx0XHRpZihlcnIpIHRocm93IGVycjtcclxuIFx0XHRcdH07XHJcbiBcdFx0fSBlbHNlIHtcclxuIFx0XHRcdG9wdGlvbnMgPSB7fTtcclxuIFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oZXJyKSB7XHJcbiBcdFx0XHRcdGlmKGVycikgdGhyb3cgZXJyO1xyXG4gXHRcdFx0fTtcclxuIFx0XHR9XHJcbiBcdFxyXG4gXHRcdGZ1bmN0aW9uIGdldEFmZmVjdGVkU3R1ZmYobW9kdWxlKSB7XHJcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW21vZHVsZV07XHJcbiBcdFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcclxuIFx0XHJcbiBcdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcclxuIFx0XHRcdHdoaWxlKHF1ZXVlLmxlbmd0aCA+IDApIHtcclxuIFx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWUucG9wKCk7XHJcbiBcdFx0XHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcclxuIFx0XHRcdFx0aWYoIW1vZHVsZSB8fCBtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQpXHJcbiBcdFx0XHRcdFx0Y29udGludWU7XHJcbiBcdFx0XHRcdGlmKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xyXG4gXHRcdFx0XHRcdHJldHVybiBuZXcgRXJyb3IoXCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArIG1vZHVsZUlkKTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRpZihtb2R1bGVJZCA9PT0gMCkge1xyXG4gXHRcdFx0XHRcdHJldHVybjtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHtcclxuIFx0XHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcclxuIFx0XHRcdFx0XHR2YXIgcGFyZW50ID0gaW5zdGFsbGVkTW9kdWxlc1twYXJlbnRJZF07XHJcbiBcdFx0XHRcdFx0aWYocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XHJcbiBcdFx0XHRcdFx0XHRyZXR1cm4gbmV3IEVycm9yKFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiICsgbW9kdWxlSWQgKyBcIiBpbiBcIiArIHBhcmVudElkKTtcclxuIFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdFx0aWYob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpID49IDApIGNvbnRpbnVlO1xyXG4gXHRcdFx0XHRcdGlmKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xyXG4gXHRcdFx0XHRcdFx0aWYoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcclxuIFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XHJcbiBcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xyXG4gXHRcdFx0XHRcdFx0Y29udGludWU7XHJcbiBcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XHJcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xyXG4gXHRcdFx0XHRcdHF1ZXVlLnB1c2gocGFyZW50SWQpO1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHR9XHJcbiBcdFxyXG4gXHRcdFx0cmV0dXJuIFtvdXRkYXRlZE1vZHVsZXMsIG91dGRhdGVkRGVwZW5kZW5jaWVzXTtcclxuIFx0XHR9XHJcbiBcdFxyXG4gXHRcdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcclxuIFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XHJcbiBcdFx0XHRcdHZhciBpdGVtID0gYltpXTtcclxuIFx0XHRcdFx0aWYoYS5pbmRleE9mKGl0ZW0pIDwgMClcclxuIFx0XHRcdFx0XHRhLnB1c2goaXRlbSk7XHJcbiBcdFx0XHR9XHJcbiBcdFx0fVxyXG4gXHRcclxuIFx0XHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxyXG4gXHRcdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cclxuIFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcclxuIFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XHJcbiBcdFx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcclxuIFx0XHRmb3IodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xyXG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XHJcbiBcdFx0XHRcdHZhciBtb2R1bGVJZCA9IHRvTW9kdWxlSWQoaWQpO1xyXG4gXHRcdFx0XHR2YXIgcmVzdWx0ID0gZ2V0QWZmZWN0ZWRTdHVmZihtb2R1bGVJZCk7XHJcbiBcdFx0XHRcdGlmKCFyZXN1bHQpIHtcclxuIFx0XHRcdFx0XHRpZihvcHRpb25zLmlnbm9yZVVuYWNjZXB0ZWQpXHJcbiBcdFx0XHRcdFx0XHRjb250aW51ZTtcclxuIFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJhYm9ydFwiKTtcclxuIFx0XHRcdFx0XHRyZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIikpO1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHRcdGlmKHJlc3VsdCBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiBcdFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiYWJvcnRcIik7XHJcbiBcdFx0XHRcdFx0cmV0dXJuIGNhbGxiYWNrKHJlc3VsdCk7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBob3RVcGRhdGVbbW9kdWxlSWRdO1xyXG4gXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdFswXSk7XHJcbiBcdFx0XHRcdGZvcih2YXIgbW9kdWxlSWQgaW4gcmVzdWx0WzFdKSB7XHJcbiBcdFx0XHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdFsxXSwgbW9kdWxlSWQpKSB7XHJcbiBcdFx0XHRcdFx0XHRpZighb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxyXG4gXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcclxuIFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSwgcmVzdWx0WzFdW21vZHVsZUlkXSk7XHJcbiBcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHR9XHJcbiBcdFx0fVxyXG4gXHRcclxuIFx0XHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXHJcbiBcdFx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xyXG4gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcclxuIFx0XHRcdHZhciBtb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tpXTtcclxuIFx0XHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdICYmIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkKVxyXG4gXHRcdFx0XHRvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMucHVzaCh7XHJcbiBcdFx0XHRcdFx0bW9kdWxlOiBtb2R1bGVJZCxcclxuIFx0XHRcdFx0XHRlcnJvckhhbmRsZXI6IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXHJcbiBcdFx0XHRcdH0pO1xyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXHJcbiBcdFx0aG90U2V0U3RhdHVzKFwiZGlzcG9zZVwiKTtcclxuIFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcclxuIFx0XHR3aGlsZShxdWV1ZS5sZW5ndGggPiAwKSB7XHJcbiBcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTtcclxuIFx0XHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcclxuIFx0XHRcdGlmKCFtb2R1bGUpIGNvbnRpbnVlO1xyXG4gXHRcclxuIFx0XHRcdHZhciBkYXRhID0ge307XHJcbiBcdFxyXG4gXHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXHJcbiBcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xyXG4gXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xyXG4gXHRcdFx0XHR2YXIgY2IgPSBkaXNwb3NlSGFuZGxlcnNbal07XHJcbiBcdFx0XHRcdGNiKGRhdGEpO1xyXG4gXHRcdFx0fVxyXG4gXHRcdFx0aG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdID0gZGF0YTtcclxuIFx0XHJcbiBcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxyXG4gXHRcdFx0bW9kdWxlLmhvdC5hY3RpdmUgPSBmYWxzZTtcclxuIFx0XHJcbiBcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcclxuIFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcclxuIFx0XHJcbiBcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxyXG4gXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xyXG4gXHRcdFx0XHR2YXIgY2hpbGQgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZS5jaGlsZHJlbltqXV07XHJcbiBcdFx0XHRcdGlmKCFjaGlsZCkgY29udGludWU7XHJcbiBcdFx0XHRcdHZhciBpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xyXG4gXHRcdFx0XHRpZihpZHggPj0gMCkge1xyXG4gXHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdH1cclxuIFx0XHR9XHJcbiBcdFxyXG4gXHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXHJcbiBcdFx0Zm9yKHZhciBtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xyXG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZCkpIHtcclxuIFx0XHRcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xyXG4gXHRcdFx0XHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XHJcbiBcdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xyXG4gXHRcdFx0XHRcdHZhciBkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XHJcbiBcdFx0XHRcdFx0dmFyIGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xyXG4gXHRcdFx0XHRcdGlmKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdH1cclxuIFx0XHR9XHJcbiBcdFxyXG4gXHRcdC8vIE5vdCBpbiBcImFwcGx5XCIgcGhhc2VcclxuIFx0XHRob3RTZXRTdGF0dXMoXCJhcHBseVwiKTtcclxuIFx0XHJcbiBcdFx0aG90Q3VycmVudEhhc2ggPSBob3RVcGRhdGVOZXdIYXNoO1xyXG4gXHRcclxuIFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcclxuIFx0XHRmb3IodmFyIG1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcclxuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcHBsaWVkVXBkYXRlLCBtb2R1bGVJZCkpIHtcclxuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW21vZHVsZUlkXTtcclxuIFx0XHRcdH1cclxuIFx0XHR9XHJcbiBcdFxyXG4gXHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXHJcbiBcdFx0dmFyIGVycm9yID0gbnVsbDtcclxuIFx0XHRmb3IodmFyIG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XHJcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKSkge1xyXG4gXHRcdFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XHJcbiBcdFx0XHRcdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcclxuIFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xyXG4gXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcclxuIFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldO1xyXG4gXHRcdFx0XHRcdHZhciBjYiA9IG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xyXG4gXHRcdFx0XHRcdGlmKGNhbGxiYWNrcy5pbmRleE9mKGNiKSA+PSAwKSBjb250aW51ZTtcclxuIFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChjYik7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xyXG4gXHRcdFx0XHRcdHZhciBjYiA9IGNhbGxiYWNrc1tpXTtcclxuIFx0XHRcdFx0XHR0cnkge1xyXG4gXHRcdFx0XHRcdFx0Y2Iob3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xyXG4gXHRcdFx0XHRcdH0gY2F0Y2goZXJyKSB7XHJcbiBcdFx0XHRcdFx0XHRpZighZXJyb3IpXHJcbiBcdFx0XHRcdFx0XHRcdGVycm9yID0gZXJyO1xyXG4gXHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0fVxyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcclxuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcbiBcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tpXTtcclxuIFx0XHRcdHZhciBtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xyXG4gXHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xyXG4gXHRcdFx0dHJ5IHtcclxuIFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XHJcbiBcdFx0XHR9IGNhdGNoKGVycikge1xyXG4gXHRcdFx0XHRpZih0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gXHRcdFx0XHRcdHRyeSB7XHJcbiBcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIpO1xyXG4gXHRcdFx0XHRcdH0gY2F0Y2goZXJyKSB7XHJcbiBcdFx0XHRcdFx0XHRpZighZXJyb3IpXHJcbiBcdFx0XHRcdFx0XHRcdGVycm9yID0gZXJyO1xyXG4gXHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0fSBlbHNlIGlmKCFlcnJvcilcclxuIFx0XHRcdFx0XHRlcnJvciA9IGVycjtcclxuIFx0XHRcdH1cclxuIFx0XHR9XHJcbiBcdFxyXG4gXHRcdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXHJcbiBcdFx0aWYoZXJyb3IpIHtcclxuIFx0XHRcdGhvdFNldFN0YXR1cyhcImZhaWxcIik7XHJcbiBcdFx0XHRyZXR1cm4gY2FsbGJhY2soZXJyb3IpO1xyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcclxuIFx0XHRjYWxsYmFjayhudWxsLCBvdXRkYXRlZE1vZHVsZXMpO1xyXG4gXHR9XHJcblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlLFxuIFx0XHRcdGhvdDogaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSxcbiBcdFx0XHRwYXJlbnRzOiBob3RDdXJyZW50UGFyZW50cyxcbiBcdFx0XHRjaGlsZHJlbjogW11cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkpO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIF9fd2VicGFja19oYXNoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18uaCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaG90Q3VycmVudEhhc2g7IH07XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIGhvdENyZWF0ZVJlcXVpcmUoMCkoMCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL2Jvb3RzdHJhcCAxMDVkMWIwZDkzNzdlNzcwNTcyYVxuICoqLyIsIlxyXG52YXIga2V5ID0gcmVxdWlyZSgnY29tbW9uL2tleV91dGlscycpXHJcbnZhciBjaGFpbl9jb25maWcgPSByZXF1aXJlKCdjaGFpbi9jb25maWcnKVxyXG5cclxub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHsgdHJ5IHtcclxuICAgIGNvbnNvbGUubG9nKFwiQWRkcmVzc0luZGV4V29ya2VyIHN0YXJ0XCIpO1xyXG4gICAgdmFyIHtwdWJrZXlzLCBhZGRyZXNzX3ByZWZpeH0gPSBldmVudC5kYXRhXHJcbiAgICB2YXIgcmVzdWx0cyA9IFtdXHJcbiAgICBmb3IobGV0IHB1YmtleSBvZiBwdWJrZXlzKSByZXN1bHRzLnB1c2goIGtleS5hZGRyZXNzZXMocHVia2V5LCBhZGRyZXNzX3ByZWZpeCkgKVxyXG4gICAgcG9zdE1lc3NhZ2UoIHJlc3VsdHMgKVxyXG4gICAgY29uc29sZS5sb2coXCJBZGRyZXNzSW5kZXhXb3JrZXIgZG9uZVwiKTtcclxufSBjYXRjaCggZSApIHsgY29uc29sZS5lcnJvcihcIkFkZHJlc3NJbmRleFdvcmtlclwiLCBlKSB9IH1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBjOi9iaXRzaGFyZXN3YWxsZXQvd3d3L2FwcC93b3JrZXJzL0FkZHJlc3NJbmRleFdvcmtlci5qc1xuICoqLyIsIlxyXG5Qcml2YXRlS2V5ID0gcmVxdWlyZSAnLi4vZWNjL2tleV9wcml2YXRlJ1xyXG5QdWJsaWNLZXkgPSByZXF1aXJlICcuLi9lY2Mva2V5X3B1YmxpYydcclxuQWRkcmVzcyA9IHJlcXVpcmUgJy4uL2VjYy9hZGRyZXNzJ1xyXG5BZXMgPSByZXF1aXJlICcuLi9lY2MvYWVzJ1xyXG5cclxuaGFzaCA9IHJlcXVpcmUgJy4vaGFzaCdcclxuZGljdGlvbmFyeSA9IHJlcXVpcmUgJy4vZGljdGlvbmFyeV9lbidcclxuc2VjdXJlUmFuZG9tID0gcmVxdWlyZSAnLi9zZWN1cmVSYW5kb20nXHJcbmNvbmZpZyA9IHJlcXVpcmUgJ2NoYWluL2NvbmZpZydcclxuXHJcbiMgaGFzaCBmb3IgLjI1IHNlY29uZFxyXG5IQVNIX1BPV0VSX01JTExTID0gMjUwXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGtleSA9XHJcbiAgICBcclxuICAgICMjIyogVXNlcyAxIHNlY29uZCBvZiBoYXNoaW5nIHBvd2VyIHRvIGNyZWF0ZSBhIGtleS9wYXNzd29yZCBjaGVja3N1bS4gIEFuXHJcbiAgICBpbXBsZW1lbnRhdGlvbiBjYW4gcmUtY2FsbCB0aGlzIG1ldGhvZCB3aXRoIHRoZSBzYW1lIHBhc3N3b3JkIHRvIHJlLW1hdGNoXHJcbiAgICB0aGUgc3RyZW5ndGggb2YgdGhlIENQVSAoZWl0aGVyIGFmdGVyIG1vdmluZyBmcm9tIGEgZGVza3RvcCB0byBhIG1vYmlsZSxcclxuICAgIG1vYmlsZSB0byBkZXNrdG9wLCBvciBOIHllYXJzIGZyb20gbm93IHdoZW4gQ1BVcyBhcmUgcHJlc3VtYWJseSBzdHJvbmdlcikuXHJcbiAgICBcclxuICAgIEEgc2FsdCBpcyB1c2VkIGZvciBhbGwgdGhlIG5vcm1hbCByZWFzb25zLi4uXHJcbiAgICBcclxuICAgIEByZXR1cm4gb2JqZWN0IHtcclxuICAgICAgICBhZXNfcHJpdmF0ZTogQWVzLCBcclxuICAgICAgICBjaGVja3N1bTogXCJ7aGFzaF9pdGVyYXRpb25fY291bnR9LHtzYWx0fSx7Y2hlY2tzdW19XCJcclxuICAgIH1cclxuICAgICMjI1xyXG4gICAgYWVzX2NoZWNrc3VtOihwYXNzd29yZCktPlxyXG4gICAgICAgIHRocm93IG5ldyBcInBhc3N3b3JkIHN0cmluZyByZXF1aXJlZFwiIHVubGVzcyB0eXBlb2YgcGFzc3dvcmQgaXMgXCJzdHJpbmdcIlxyXG4gICAgICAgIHNhbHQgPSBzZWN1cmVSYW5kb20ucmFuZG9tQnVmZmVyKDQpLnRvU3RyaW5nKCdoZXgnKVxyXG4gICAgICAgIGl0ZXJhdGlvbnMgPSAwXHJcbiAgICAgICAgc2VjcmV0ID0gc2FsdCArIHBhc3N3b3JkXHJcbiAgICAgICAgIyBoYXNoIGZvciAuMSBzZWNvbmRcclxuICAgICAgICBzdGFydF90ID0gRGF0ZS5ub3coKVxyXG4gICAgICAgIHdoaWxlIERhdGUubm93KCkgLSBzdGFydF90IDwgSEFTSF9QT1dFUl9NSUxMU1xyXG4gICAgICAgICAgICBzZWNyZXQgPSBoYXNoLnNoYTI1NiBzZWNyZXRcclxuICAgICAgICAgICAgaXRlcmF0aW9ucyArPSAxXHJcbiAgICAgICAgXHJcbiAgICAgICAgY2hlY2tzdW0gPSBoYXNoLnNoYTI1NiBzZWNyZXRcclxuICAgICAgICBjaGVja3N1bV9zdHJpbmcgPSBbXHJcbiAgICAgICAgICAgIGl0ZXJhdGlvbnNcclxuICAgICAgICAgICAgc2FsdC50b1N0cmluZygnaGV4JylcclxuICAgICAgICAgICAgY2hlY2tzdW0uc2xpY2UoMCwgNCkudG9TdHJpbmcoJ2hleCcpXHJcbiAgICAgICAgXS5qb2luICcsJ1xyXG4gICAgICAgIFxyXG4gICAgICAgIGFlc19wcml2YXRlOiBBZXMuZnJvbVNlZWQoc2VjcmV0KVxyXG4gICAgICAgIGNoZWNrc3VtOiBjaGVja3N1bV9zdHJpbmdcclxuICAgIFxyXG4gICAgIyMjKiBQcm92aWRlIGEgbWF0Y2hpbmcgcGFzc3dvcmQgYW5kIGtleV9jaGVja3N1bS4gIEEgXCJ3cm9uZyBwYXNzd29yZFwiXHJcbiAgICBlcnJvciBpcyB0aHJvd24gaWYgdGhlIHBhc3N3b3JkIGRvZXMgbm90IG1hdGNoLiAgSWYgdGhpcyBtZXRob2QgdGFrZXNcclxuICAgIG11Y2ggbW9yZSBvciBsZXNzIHRoYW4gMSBzZWNvbmQgdG8gcmV0dXJuLCBvbmUgc2hvdWxkIGNvbnNpZGVyIHVwZGF0aW5nXHJcbiAgICBhbGwgZW5jeXJwdGVkIGZpZWxkcyB1c2luZyBhIG5ldyBrZXkua2V5X2NoZWNrc3VtLlxyXG4gICAgIyMjXHJcbiAgICBhZXNfcHJpdmF0ZToocGFzc3dvcmQsIGtleV9jaGVja3N1bSktPlxyXG4gICAgICAgIFtpdGVyYXRpb25zLCBzYWx0LCBjaGVja3N1bV0gPSBrZXlfY2hlY2tzdW0uc3BsaXQgJywnXHJcbiAgICAgICAgc2VjcmV0ID0gc2FsdCArIHBhc3N3b3JkXHJcbiAgICAgICAgZm9yIGkgaW4gWzAuLi5pdGVyYXRpb25zXSBieSAxXHJcbiAgICAgICAgICAgIHNlY3JldCA9IGhhc2guc2hhMjU2IHNlY3JldFxyXG4gICAgICAgIG5ld19jaGVja3N1bSA9IGhhc2guc2hhMjU2IHNlY3JldFxyXG4gICAgICAgIHVubGVzcyBuZXdfY2hlY2tzdW0uc2xpY2UoMCwgNCkudG9TdHJpbmcoJ2hleCcpIGlzIGNoZWNrc3VtXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciBcIndyb25nIHBhc3N3b3JkXCJcclxuICAgICAgICBBZXMuZnJvbVNlZWQgc2VjcmV0XHJcbiAgICBcclxuICAgICMjIyogQHBhcmFtMSBzdHJpbmcgZW50cm9weSBvZiBhdCBsZWFzdCAzMiBieXRlcyAjIyNcclxuICAgIHJhbmRvbTMyQnl0ZUJ1ZmZlcjooZW50cm9weSA9IEBicm93c2VyRW50cm9weSgpKSAtPlxyXG4gICAgICAgIHVubGVzcyB0eXBlb2YgZW50cm9weSBpcyAnc3RyaW5nJ1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IgXCJzdHJpbmcgcmVxdWlyZWQgZm9yIGVudHJvcHlcIlxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIGVudHJvcHkubGVuZ3RoIDwgMzJcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yIFwiZXhwZWN0aW5nIGF0IGxlYXN0IDMyIGJ5dGVzIG9mIGVudHJvcHlcIlxyXG4gICAgICAgIFxyXG4gICAgICAgIGl0ZXJhdGlvbnMgPSAwXHJcbiAgICAgICAgc3RhcnRfdCA9IERhdGUubm93KClcclxuICAgICAgICBcclxuICAgICAgICB3aGlsZSBEYXRlLm5vdygpIC0gc3RhcnRfdCA8IEhBU0hfUE9XRVJfTUlMTFNcclxuICAgICAgICAgICAgZW50cm9weSA9IGhhc2guc2hhMjU2IGVudHJvcHlcclxuICAgICAgICAgICAgaXRlcmF0aW9ucyArPSAxXHJcbiAgICAgICAgXHJcbiAgICAgICAgaGFzaF9hcnJheSA9IFtdXHJcbiAgICAgICAgXHJcbiAgICAgICAgIyBUYWtlIENQVSBzcGVlZCBpbnRvIGNvbnNpZGVyYXRpb24gKGFkZCBpdGVyYXRpb25zKVxyXG4gICAgICAgIGhhc2hfYXJyYXkucHVzaCBuZXcgQnVmZmVyIFwiXCIraXRlcmF0aW9uc1xyXG4gICAgICAgIGhhc2hfYXJyYXkucHVzaCBoYXNoLnNoYTI1NiBlbnRyb3B5XHJcbiAgICAgICAgXHJcbiAgICAgICAgIyMjIFNlY3VyZSBSYW5kb20gIyMjXHJcbiAgICAgICAgIyBOb3RlLCB0aGlzIGlzIGFmdGVyIGhhc2hpbmcgZm9yIDEgc2Vjb25kLiBIZWxwcyB0byBlbnN1cmUgdGhlIGNvbXB1dGVyXHJcbiAgICAgICAgIyBpcyBub3QgbG93IG9uIGVudHJvcHkuXHJcbiAgICAgICAgaGFzaF9hcnJheS5wdXNoIHNlY3VyZVJhbmRvbS5yYW5kb21CdWZmZXIoMzIpXHJcbiAgICAgICAgaGFzaC5zaGEyNTYgQnVmZmVyLmNvbmNhdChoYXNoX2FycmF5KVxyXG4gICAgXHJcbiAgICAjIyMqIEBwYXJhbTEgc3RyaW5nIGVudHJvcHkgb2YgYXQgbGVhc3QgMzIgYnl0ZXMgIyMjXHJcbiAgICBzdWdnZXN0X2JyYWluX2tleTooZW50cm9weSA9IEBicm93c2VyRW50cm9weSgpKSAtPlxyXG4gICAgICAgIHJhbmRvbUJ1ZmZlciA9IEByYW5kb20zMkJ5dGVCdWZmZXIgZW50cm9weVxyXG4gICAgICAgIFxyXG4gICAgICAgIHdvcmRfY291bnQgPSAxNlxyXG4gICAgICAgIGRpY3Rpb25hcnlfbGluZXMgPSBkaWN0aW9uYXJ5LnNwbGl0ICcsJ1xyXG4gICAgICAgIFxyXG4gICAgICAgIHVubGVzcyBkaWN0aW9uYXJ5X2xpbmVzLmxlbmd0aCBpcyA0OTc0NFxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IgXCJleHBlY3RpbmcgI3s0OTc0NH0gYnV0IGdvdCAje2RpY3Rpb25hcnlfbGluZXMubGVuZ3RofSBkaWN0aW9uYXJ5IHdvcmRzXCJcclxuICAgICAgICBcclxuICAgICAgICBicmFpbmtleSA9IGZvciBpIGluIFswLi4uKHdvcmRfY291bnQgKiAyKV0gYnkgMlxyXG4gICAgICAgICAgICAjIHJhbmRvbUJ1ZmZlciBoYXMgMjU2IGJpdHMgLyAxNiBiaXRzIHBlciB3b3JkID09IDE2IHdvcmRzXHJcbiAgICAgICAgICAgIG51bSA9IChyYW5kb21CdWZmZXJbaV08PDgpICsgcmFuZG9tQnVmZmVyW2krMV1cclxuICAgICAgICAgICAgIyBERUJVRyBjb25zb2xlLmxvZygnLi4uIG51bScsbnVtLnRvU3RyaW5nKDE2KSlcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICMgY29udmVydCBpbnRvIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMSAoaW5jbHVzaXZlKVxyXG4gICAgICAgICAgICBybmRNdWx0aXBsaWVyID0gbnVtIC8gTWF0aC5wb3coMiwxNilcclxuICAgICAgICAgICAgd29yZEluZGV4ID0gTWF0aC5yb3VuZCBkaWN0aW9uYXJ5X2xpbmVzLmxlbmd0aCAqIHJuZE11bHRpcGxpZXJcclxuICAgICAgICAgICAgIyBERUJVRyBjb25zb2xlLmxvZyAnLi4uIGksbnVtLHJuZE11bHRpcGxpZXIsd29yZEluZGV4JyxpLG51bSxybmRNdWx0aXBsaWVyLHdvcmRJbmRleFxyXG4gICAgICAgICAgICBkaWN0aW9uYXJ5X2xpbmVzW3dvcmRJbmRleF1cclxuICAgICAgICBcclxuICAgICAgICBrZXkubm9ybWFsaXplX2JyYWluX2tleSBicmFpbmtleS5qb2luICcgJ1xyXG4gICAgXHJcbiAgICBnZXRfcmFuZG9tX2tleTogKGVudHJvcHkpIC0+XHJcbiAgICAgICAgUHJpdmF0ZUtleS5mcm9tQnVmZmVyIEByYW5kb20zMkJ5dGVCdWZmZXIgZW50cm9weVxyXG4gICAgXHJcbiAgICBnZXRfYnJhaW5rZXlfcHJpdmF0ZTogKGJyYWluX2tleSwgc2VxdWVuY2UgPSAwKS0+XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yIFwiaW52YWxpZCBzZXF1ZW5jZVwiIGlmIHNlcXVlbmNlIDwgMFxyXG4gICAgICAgIGJyYWluX2tleSA9IGtleS5ub3JtYWxpemVfYnJhaW5fa2V5IGJyYWluX2tleVxyXG4gICAgICAgIFByaXZhdGVLZXkuZnJvbUJ1ZmZlciggaGFzaC5zaGEyNTYoaGFzaC5zaGE1MTIoXHJcbiAgICAgICAgICAgIGJyYWluX2tleSArIFwiIFwiICsgc2VxdWVuY2VcclxuICAgICAgICApKSApXHJcblxyXG4gICAgIyBUdXJuIGludmlzaWJsZSBzcGFjZSBsaWtlIGNoYXJhY3RlcnMgaW50byBhIHNpbmdsZSBzcGFjZVxyXG4gICAgbm9ybWFsaXplX2JyYWluX2tleTogKGJyYWluX2tleSktPlxyXG4gICAgICAgIHVubGVzcyB0eXBlb2YgYnJhaW5fa2V5IGlzICdzdHJpbmcnXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciBcInN0cmluZyByZXF1aXJlZCBmb3IgYnJhaW5fa2V5XCJcclxuICAgICAgICBcclxuICAgICAgICBicmFpbl9rZXkgPSBicmFpbl9rZXkudHJpbSgpXHJcbiAgICAgICAgYnJhaW5fa2V5LnNwbGl0KC9bXFx0XFxuXFx2XFxmXFxyIF0rLykuam9pbiAnICdcclxuICAgIFxyXG4gICAgYnJvd3NlckVudHJvcHk6IC0+XHJcbiAgICAgICAgcmVxID0gKHZhcmlhYmxlLCBuYW1lKS0+IHVubGVzcyB2YXJpYWJsZVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IgXCJtaXNzaW5nIFwiKyBuYW1lXHJcbiAgICAgICAgcmVxIHdpbmRvdywgXCJ3aW5kb3dcIlxyXG4gICAgICAgIHJlcSBuYXZpZ2F0b3IsIFwibmF2aWdhdG9yXCJcclxuICAgICAgICByZXEgd2luZG93LnNjcmVlbiwgXCJ3aW5kb3cuc2NyZWVuXCJcclxuICAgICAgICByZXEgd2luZG93LmxvY2F0aW9uLCBcIndpbmRvdy5sb2NhdGlvblwiXHJcbiAgICAgICAgcmVxIHdpbmRvdy5oaXN0b3J5LCBcIndpbmRvdy5oaXN0b3J5XCJcclxuICAgICAgICByZXEgbmF2aWdhdG9yLmxhbmd1YWdlLCBcIm5hdmlnYXRvci5sYW5ndWFnZVwiXHJcbiAgICAgICAgcmVxIG5hdmlnYXRvci5taW1lVHlwZXMsIFwibmF2aWdhdG9yLm1pbWVUeXBlc1wiXHJcbiAgICAgICAgXHJcbiAgICAgICAgZW50cm9weVN0ciA9IChuZXcgRGF0ZSgpKS50b1N0cmluZygpICsgXCIgXCIgK1xyXG4gICAgICAgICAgICArIHdpbmRvdy5zY3JlZW4uaGVpZ2h0ICsgXCIgXCIgKyB3aW5kb3cuc2NyZWVuLndpZHRoICsgXCIgXCIgXHJcbiAgICAgICAgICAgICsgd2luZG93LnNjcmVlbi5jb2xvckRlcHRoICsgXCIgXCIgKyBcIiBcIiArIHdpbmRvdy5zY3JlZW4uYXZhaWxIZWlnaHQgXHJcbiAgICAgICAgICAgICsgXCIgXCIgKyB3aW5kb3cuc2NyZWVuLmF2YWlsV2lkdGggKyBcIiBcIiArIHdpbmRvdy5zY3JlZW4ucGl4ZWxEZXB0aFxyXG4gICAgICAgICAgICArIG5hdmlnYXRvci5sYW5ndWFnZSArIFwiIFwiICtcclxuICAgICAgICAgICAgKyB3aW5kb3cubG9jYXRpb24gKyBcIiBcIiArXHJcbiAgICAgICAgICAgICsgd2luZG93Lmhpc3RvcnkubGVuZ3RoXHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yIG1pbWVUeXBlIGluIG5hdmlnYXRvci5taW1lVHlwZXNcclxuICAgICAgICAgICAgZW50cm9weVN0ciArPSBcclxuICAgICAgICAgICAgICAgIG1pbWVUeXBlLmRlc2NyaXB0aW9uICsgXCIgXCIgKyBcclxuICAgICAgICAgICAgICAgIG1pbWVUeXBlLnR5cGUgKyBcIiBcIiArIFxyXG4gICAgICAgICAgICAgICAgbWltZVR5cGUuc3VmZml4ZXMgKyBcIiBcIlxyXG4gICAgICAgIFxyXG4gICAgICAgIGIgPSBuZXcgQnVmZmVyKGVudHJvcHlTdHIpXHJcbiAgICAgICAgZW50cm9weVN0ciArPSBiLnRvU3RyaW5nKCdiaW5hcnknKSArIFwiIFwiICtcclxuICAgICAgICAgICAgKG5ldyBEYXRlKCkpLnRvU3RyaW5nKClcclxuICAgICAgICAjIERFQlVHIGNvbnNvbGUubG9nKCcuLi4gZW50cm9weVN0cicsZW50cm9weVN0cilcclxuICAgICAgICBlbnRyb3B5U3RyXHJcblxyXG4gICAgIyBAcmV0dXJuIGFycmF5IG9mIDUgbGVnYWN5IGFkZHJlc3NlcyBmb3IgYSBwdWJrZXkgc3RyaW5nIHBhcmFtZXRlci5cclxuICAgIGFkZHJlc3NlczogKHB1YmtleSwgYWRkcmVzc19wcmVmaXggPSBjb25maWcuYWRkcmVzc19wcmVmaXgpIC0+XHJcbiAgICAgICAgcHVibGljX2tleSA9IFB1YmxpY0tleS5mcm9tUHVibGljS2V5U3RyaW5nKHB1YmtleSwgYWRkcmVzc19wcmVmaXgpXHJcbiAgICAgICAgYWRkcmVzc19zdHJpbmcgPSBbIyBTIEwgTyBXXHJcbiAgICAgICAgICAgIEFkZHJlc3MuZnJvbVB1YmxpYyhwdWJsaWNfa2V5LCBmYWxzZSwgMCkudG9TdHJpbmcoYWRkcmVzc19wcmVmaXgpLCAjIGJ0Y191bmNvbXByZXNzZWRcclxuICAgICAgICAgICAgQWRkcmVzcy5mcm9tUHVibGljKHB1YmxpY19rZXksIHRydWUsIDApLnRvU3RyaW5nKGFkZHJlc3NfcHJlZml4KSwgICMgYnRjX2NvbXByZXNzZWRcclxuICAgICAgICAgICAgQWRkcmVzcy5mcm9tUHVibGljKHB1YmxpY19rZXksIGZhbHNlLCA1NikudG9TdHJpbmcoYWRkcmVzc19wcmVmaXgpLCMgcHRzX3VuY29tcHJlc3NlZFxyXG4gICAgICAgICAgICBBZGRyZXNzLmZyb21QdWJsaWMocHVibGljX2tleSwgdHJ1ZSwgNTYpLnRvU3RyaW5nKGFkZHJlc3NfcHJlZml4KSwgIyBwdHNfY29tcHJlc3NlZFxyXG4gICAgICAgICAgICBwdWJsaWNfa2V5LnRvQWRkcmVzc1N0cmluZyhhZGRyZXNzX3ByZWZpeCkgIyBidHNfc2hvcnQsIG1vc3QgcmVjZW50IGZvcm1hdFxyXG4gICAgICAgIF1cclxuICAgICAgICBhZGRyZXNzX3N0cmluZ1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL2RsL3NyYy9jb21tb24va2V5X3V0aWxzLmNvZmZlZVxuICoqLyIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXMtYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxudmFyIHJvb3RQYXJlbnQgPSB7fVxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIFNhZmFyaSA1LTcgbGFja3Mgc3VwcG9ydCBmb3IgY2hhbmdpbmcgdGhlIGBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yYCBwcm9wZXJ0eVxuICogICAgIG9uIG9iamVjdHMuXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICBmdW5jdGlvbiBCYXIgKCkge31cbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuZm9vID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfVxuICAgIGFyci5jb25zdHJ1Y3RvciA9IEJhclxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIGFyci5jb25zdHJ1Y3RvciA9PT0gQmFyICYmIC8vIGNvbnN0cnVjdG9yIGNhbiBiZSBzZXRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuLyoqXG4gKiBDbGFzczogQnVmZmVyXG4gKiA9PT09PT09PT09PT09XG4gKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBhcmUgYXVnbWVudGVkXG4gKiB3aXRoIGZ1bmN0aW9uIHByb3BlcnRpZXMgZm9yIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBBUEkgZnVuY3Rpb25zLiBXZSB1c2VcbiAqIGBVaW50OEFycmF5YCBzbyB0aGF0IHNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0IHJldHVybnNcbiAqIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIEJ5IGF1Z21lbnRpbmcgdGhlIGluc3RhbmNlcywgd2UgY2FuIGF2b2lkIG1vZGlmeWluZyB0aGUgYFVpbnQ4QXJyYXlgXG4gKiBwcm90b3R5cGUuXG4gKi9cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgLy8gQXZvaWQgZ29pbmcgdGhyb3VnaCBhbiBBcmd1bWVudHNBZGFwdG9yVHJhbXBvbGluZSBpbiB0aGUgY29tbW9uIGNhc2UuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGFyZ3VtZW50c1sxXSlcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcpXG4gIH1cblxuICB0aGlzLmxlbmd0aCA9IDBcbiAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWRcblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZyb21OdW1iZXIodGhpcywgYXJnKVxuICB9XG5cbiAgLy8gU2xpZ2h0bHkgbGVzcyBjb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhpcywgYXJnLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6ICd1dGY4JylcbiAgfVxuXG4gIC8vIFVudXN1YWwuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoaXMsIGFyZylcbn1cblxuZnVuY3Rpb24gZnJvbU51bWJlciAodGhhdCwgbGVuZ3RoKSB7XG4gIHRoYXQgPSBhbGxvY2F0ZSh0aGF0LCBsZW5ndGggPCAwID8gMCA6IGNoZWNrZWQobGVuZ3RoKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykgZW5jb2RpbmcgPSAndXRmOCdcblxuICAvLyBBc3N1bXB0aW9uOiBieXRlTGVuZ3RoKCkgcmV0dXJuIHZhbHVlIGlzIGFsd2F5cyA8IGtNYXhMZW5ndGguXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gYWxsb2NhdGUodGhhdCwgbGVuZ3RoKVxuXG4gIHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqZWN0KSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqZWN0KSkgcmV0dXJuIGZyb21CdWZmZXIodGhhdCwgb2JqZWN0KVxuXG4gIGlmIChpc0FycmF5KG9iamVjdCkpIHJldHVybiBmcm9tQXJyYXkodGhhdCwgb2JqZWN0KVxuXG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ211c3Qgc3RhcnQgd2l0aCBudW1iZXIsIGJ1ZmZlciwgYXJyYXkgb3Igc3RyaW5nJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKG9iamVjdC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgcmV0dXJuIGZyb21UeXBlZEFycmF5KHRoYXQsIG9iamVjdClcbiAgICB9XG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIG9iamVjdClcbiAgICB9XG4gIH1cblxuICBpZiAob2JqZWN0Lmxlbmd0aCkgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqZWN0KVxuXG4gIHJldHVybiBmcm9tSnNvbk9iamVjdCh0aGF0LCBvYmplY3QpXG59XG5cbmZ1bmN0aW9uIGZyb21CdWZmZXIgKHRoYXQsIGJ1ZmZlcikge1xuICB2YXIgbGVuZ3RoID0gY2hlY2tlZChidWZmZXIubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGFsbG9jYXRlKHRoYXQsIGxlbmd0aClcbiAgYnVmZmVyLmNvcHkodGhhdCwgMCwgMCwgbGVuZ3RoKVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXkgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBhbGxvY2F0ZSh0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vLyBEdXBsaWNhdGUgb2YgZnJvbUFycmF5KCkgdG8ga2VlcCBmcm9tQXJyYXkoKSBtb25vbW9ycGhpYy5cbmZ1bmN0aW9uIGZyb21UeXBlZEFycmF5ICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gYWxsb2NhdGUodGhhdCwgbGVuZ3RoKVxuICAvLyBUcnVuY2F0aW5nIHRoZSBlbGVtZW50cyBpcyBwcm9iYWJseSBub3Qgd2hhdCBwZW9wbGUgZXhwZWN0IGZyb20gdHlwZWRcbiAgLy8gYXJyYXlzIHdpdGggQllURVNfUEVSX0VMRU1FTlQgPiAxIGJ1dCBpdCdzIGNvbXBhdGlibGUgd2l0aCB0aGUgYmVoYXZpb3JcbiAgLy8gb2YgdGhlIG9sZCBCdWZmZXIgY29uc3RydWN0b3IuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5KSB7XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIGFycmF5LmJ5dGVMZW5ndGhcbiAgICB0aGF0ID0gQnVmZmVyLl9hdWdtZW50KG5ldyBVaW50OEFycmF5KGFycmF5KSlcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21UeXBlZEFycmF5KHRoYXQsIG5ldyBVaW50OEFycmF5KGFycmF5KSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gYWxsb2NhdGUodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLy8gRGVzZXJpYWxpemUgeyB0eXBlOiAnQnVmZmVyJywgZGF0YTogWzEsMiwzLC4uLl0gfSBpbnRvIGEgQnVmZmVyIG9iamVjdC5cbi8vIFJldHVybnMgYSB6ZXJvLWxlbmd0aCBidWZmZXIgZm9yIGlucHV0cyB0aGF0IGRvbid0IGNvbmZvcm0gdG8gdGhlIHNwZWMuXG5mdW5jdGlvbiBmcm9tSnNvbk9iamVjdCAodGhhdCwgb2JqZWN0KSB7XG4gIHZhciBhcnJheVxuICB2YXIgbGVuZ3RoID0gMFxuXG4gIGlmIChvYmplY3QudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmplY3QuZGF0YSkpIHtcbiAgICBhcnJheSA9IG9iamVjdC5kYXRhXG4gICAgbGVuZ3RoID0gY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB9XG4gIHRoYXQgPSBhbGxvY2F0ZSh0aGF0LCBsZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG59XG5cbmZ1bmN0aW9uIGFsbG9jYXRlICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IEJ1ZmZlci5fYXVnbWVudChuZXcgVWludDhBcnJheShsZW5ndGgpKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICAgIHRoYXQuX2lzQnVmZmVyID0gdHJ1ZVxuICB9XG5cbiAgdmFyIGZyb21Qb29sID0gbGVuZ3RoICE9PSAwICYmIGxlbmd0aCA8PSBCdWZmZXIucG9vbFNpemUgPj4+IDFcbiAgaWYgKGZyb21Qb29sKSB0aGF0LnBhcmVudCA9IHJvb3RQYXJlbnRcblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aGAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKHN1YmplY3QsIGVuY29kaW5nKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTbG93QnVmZmVyKSkgcmV0dXJuIG5ldyBTbG93QnVmZmVyKHN1YmplY3QsIGVuY29kaW5nKVxuXG4gIHZhciBidWYgPSBuZXcgQnVmZmVyKHN1YmplY3QsIGVuY29kaW5nKVxuICBkZWxldGUgYnVmLnBhcmVudFxuICByZXR1cm4gYnVmXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICB2YXIgaSA9IDBcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIGJyZWFrXG5cbiAgICArK2lcbiAgfVxuXG4gIGlmIChpICE9PSBsZW4pIHtcbiAgICB4ID0gYVtpXVxuICAgIHkgPSBiW2ldXG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3Jhdyc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2xpc3QgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzLicpXG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXVxuICAgIGl0ZW0uY29weShidWYsIHBvcylcbiAgICBwb3MgKz0gaXRlbS5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSBzdHJpbmcgPSAnJyArIHN0cmluZ1xuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgLy8gRGVwcmVjYXRlZFxuICAgICAgY2FzZSAncmF3JzpcbiAgICAgIGNhc2UgJ3Jhd3MnOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuLy8gcHJlLXNldCBmb3IgdmFsdWVzIHRoYXQgbWF5IGV4aXN0IGluIHRoZSBmdXR1cmVcbkJ1ZmZlci5wcm90b3R5cGUubGVuZ3RoID0gdW5kZWZpbmVkXG5CdWZmZXIucHJvdG90eXBlLnBhcmVudCA9IHVuZGVmaW5lZFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgc3RhcnQgPSBzdGFydCB8IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID09PSBJbmZpbml0eSA/IHRoaXMubGVuZ3RoIDogZW5kIHwgMFxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG4gIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmIChlbmQgPD0gc3RhcnQpIHJldHVybiAnJ1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGJpbmFyeVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gMFxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYilcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0KSB7XG4gIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgYnl0ZU9mZnNldCA+Pj0gMFxuXG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG4gIGlmIChieXRlT2Zmc2V0ID49IHRoaXMubGVuZ3RoKSByZXR1cm4gLTFcblxuICAvLyBOZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoICsgYnl0ZU9mZnNldCwgMClcblxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xIC8vIHNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nIGFsd2F5cyBmYWlsc1xuICAgIHJldHVybiBTdHJpbmcucHJvdG90eXBlLmluZGV4T2YuY2FsbCh0aGlzLCB2YWwsIGJ5dGVPZmZzZXQpXG4gIH1cbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQpXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwodGhpcywgdmFsLCBieXRlT2Zmc2V0KVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKHRoaXMsIFsgdmFsIF0sIGJ5dGVPZmZzZXQpXG4gIH1cblxuICBmdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0KSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAodmFyIGkgPSAwOyBieXRlT2Zmc2V0ICsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFycltieXRlT2Zmc2V0ICsgaV0gPT09IHZhbFtmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleF0pIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWwubGVuZ3RoKSByZXR1cm4gYnl0ZU9mZnNldCArIGZvdW5kSW5kZXhcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTFcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbi8vIGBnZXRgIGlzIGRlcHJlY2F0ZWRcbkJ1ZmZlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChvZmZzZXQpIHtcbiAgY29uc29sZS5sb2coJy5nZXQoKSBpcyBkZXByZWNhdGVkLiBBY2Nlc3MgdXNpbmcgYXJyYXkgaW5kZXhlcyBpbnN0ZWFkLicpXG4gIHJldHVybiB0aGlzLnJlYWRVSW50OChvZmZzZXQpXG59XG5cbi8vIGBzZXRgIGlzIGRlcHJlY2F0ZWRcbkJ1ZmZlci5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gc2V0ICh2LCBvZmZzZXQpIHtcbiAgY29uc29sZS5sb2coJy5zZXQoKSBpcyBkZXByZWNhdGVkLiBBY2Nlc3MgdXNpbmcgYXJyYXkgaW5kZXhlcyBpbnN0ZWFkLicpXG4gIHJldHVybiB0aGlzLndyaXRlVUludDgodiwgb2Zmc2V0KVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJpbmFyeVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB2YXIgc3dhcCA9IGVuY29kaW5nXG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBvZmZzZXQgPSBsZW5ndGggfCAwXG4gICAgbGVuZ3RoID0gc3dhcFxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBiaW5hcnlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGJpbmFyeVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSBCdWZmZXIuX2F1Z21lbnQodGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSlcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyBpKyspIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIGlmIChuZXdCdWYubGVuZ3RoKSBuZXdCdWYucGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpc1xuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignYnVmZmVyIG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCd2YWx1ZSBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdpbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSwgMClcblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSwgMClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyBpKyspIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgaSsrKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IHZhbHVlIDwgMCA/IDEgOiAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gdmFsdWUgPCAwID8gMSA6IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndmFsdWUgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignaW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdpbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRhcmdldC5fc2V0KHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSwgdGFyZ2V0U3RhcnQpXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIGZpbGwodmFsdWUsIHN0YXJ0PTAsIGVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCF2YWx1ZSkgdmFsdWUgPSAwXG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCkgZW5kID0gdGhpcy5sZW5ndGhcblxuICBpZiAoZW5kIDwgc3RhcnQpIHRocm93IG5ldyBSYW5nZUVycm9yKCdlbmQgPCBzdGFydCcpXG5cbiAgLy8gRmlsbCAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm5cbiAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm5cblxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgdGhpc1tpXSA9IHZhbHVlXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IHV0ZjhUb0J5dGVzKHZhbHVlLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHRoaXNbaV0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBgQXJyYXlCdWZmZXJgIHdpdGggdGhlICpjb3BpZWQqIG1lbW9yeSBvZiB0aGUgYnVmZmVyIGluc3RhbmNlLlxuICogQWRkZWQgaW4gTm9kZSAwLjEyLiBPbmx5IGF2YWlsYWJsZSBpbiBicm93c2VycyB0aGF0IHN1cHBvcnQgQXJyYXlCdWZmZXIuXG4gKi9cbkJ1ZmZlci5wcm90b3R5cGUudG9BcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIHRvQXJyYXlCdWZmZXIgKCkge1xuICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgICByZXR1cm4gKG5ldyBCdWZmZXIodGhpcykpLmJ1ZmZlclxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYnVmID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5sZW5ndGgpXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYnVmLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGJ1ZltpXSA9IHRoaXNbaV1cbiAgICAgIH1cbiAgICAgIHJldHVybiBidWYuYnVmZmVyXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0J1ZmZlci50b0FycmF5QnVmZmVyIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyJylcbiAgfVxufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBCUCA9IEJ1ZmZlci5wcm90b3R5cGVcblxuLyoqXG4gKiBBdWdtZW50IGEgVWludDhBcnJheSAqaW5zdGFuY2UqIChub3QgdGhlIFVpbnQ4QXJyYXkgY2xhc3MhKSB3aXRoIEJ1ZmZlciBtZXRob2RzXG4gKi9cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIF9hdWdtZW50IChhcnIpIHtcbiAgYXJyLmNvbnN0cnVjdG9yID0gQnVmZmVyXG4gIGFyci5faXNCdWZmZXIgPSB0cnVlXG5cbiAgLy8gc2F2ZSByZWZlcmVuY2UgdG8gb3JpZ2luYWwgVWludDhBcnJheSBzZXQgbWV0aG9kIGJlZm9yZSBvdmVyd3JpdGluZ1xuICBhcnIuX3NldCA9IGFyci5zZXRcblxuICAvLyBkZXByZWNhdGVkXG4gIGFyci5nZXQgPSBCUC5nZXRcbiAgYXJyLnNldCA9IEJQLnNldFxuXG4gIGFyci53cml0ZSA9IEJQLndyaXRlXG4gIGFyci50b1N0cmluZyA9IEJQLnRvU3RyaW5nXG4gIGFyci50b0xvY2FsZVN0cmluZyA9IEJQLnRvU3RyaW5nXG4gIGFyci50b0pTT04gPSBCUC50b0pTT05cbiAgYXJyLmVxdWFscyA9IEJQLmVxdWFsc1xuICBhcnIuY29tcGFyZSA9IEJQLmNvbXBhcmVcbiAgYXJyLmluZGV4T2YgPSBCUC5pbmRleE9mXG4gIGFyci5jb3B5ID0gQlAuY29weVxuICBhcnIuc2xpY2UgPSBCUC5zbGljZVxuICBhcnIucmVhZFVJbnRMRSA9IEJQLnJlYWRVSW50TEVcbiAgYXJyLnJlYWRVSW50QkUgPSBCUC5yZWFkVUludEJFXG4gIGFyci5yZWFkVUludDggPSBCUC5yZWFkVUludDhcbiAgYXJyLnJlYWRVSW50MTZMRSA9IEJQLnJlYWRVSW50MTZMRVxuICBhcnIucmVhZFVJbnQxNkJFID0gQlAucmVhZFVJbnQxNkJFXG4gIGFyci5yZWFkVUludDMyTEUgPSBCUC5yZWFkVUludDMyTEVcbiAgYXJyLnJlYWRVSW50MzJCRSA9IEJQLnJlYWRVSW50MzJCRVxuICBhcnIucmVhZEludExFID0gQlAucmVhZEludExFXG4gIGFyci5yZWFkSW50QkUgPSBCUC5yZWFkSW50QkVcbiAgYXJyLnJlYWRJbnQ4ID0gQlAucmVhZEludDhcbiAgYXJyLnJlYWRJbnQxNkxFID0gQlAucmVhZEludDE2TEVcbiAgYXJyLnJlYWRJbnQxNkJFID0gQlAucmVhZEludDE2QkVcbiAgYXJyLnJlYWRJbnQzMkxFID0gQlAucmVhZEludDMyTEVcbiAgYXJyLnJlYWRJbnQzMkJFID0gQlAucmVhZEludDMyQkVcbiAgYXJyLnJlYWRGbG9hdExFID0gQlAucmVhZEZsb2F0TEVcbiAgYXJyLnJlYWRGbG9hdEJFID0gQlAucmVhZEZsb2F0QkVcbiAgYXJyLnJlYWREb3VibGVMRSA9IEJQLnJlYWREb3VibGVMRVxuICBhcnIucmVhZERvdWJsZUJFID0gQlAucmVhZERvdWJsZUJFXG4gIGFyci53cml0ZVVJbnQ4ID0gQlAud3JpdGVVSW50OFxuICBhcnIud3JpdGVVSW50TEUgPSBCUC53cml0ZVVJbnRMRVxuICBhcnIud3JpdGVVSW50QkUgPSBCUC53cml0ZVVJbnRCRVxuICBhcnIud3JpdGVVSW50MTZMRSA9IEJQLndyaXRlVUludDE2TEVcbiAgYXJyLndyaXRlVUludDE2QkUgPSBCUC53cml0ZVVJbnQxNkJFXG4gIGFyci53cml0ZVVJbnQzMkxFID0gQlAud3JpdGVVSW50MzJMRVxuICBhcnIud3JpdGVVSW50MzJCRSA9IEJQLndyaXRlVUludDMyQkVcbiAgYXJyLndyaXRlSW50TEUgPSBCUC53cml0ZUludExFXG4gIGFyci53cml0ZUludEJFID0gQlAud3JpdGVJbnRCRVxuICBhcnIud3JpdGVJbnQ4ID0gQlAud3JpdGVJbnQ4XG4gIGFyci53cml0ZUludDE2TEUgPSBCUC53cml0ZUludDE2TEVcbiAgYXJyLndyaXRlSW50MTZCRSA9IEJQLndyaXRlSW50MTZCRVxuICBhcnIud3JpdGVJbnQzMkxFID0gQlAud3JpdGVJbnQzMkxFXG4gIGFyci53cml0ZUludDMyQkUgPSBCUC53cml0ZUludDMyQkVcbiAgYXJyLndyaXRlRmxvYXRMRSA9IEJQLndyaXRlRmxvYXRMRVxuICBhcnIud3JpdGVGbG9hdEJFID0gQlAud3JpdGVGbG9hdEJFXG4gIGFyci53cml0ZURvdWJsZUxFID0gQlAud3JpdGVEb3VibGVMRVxuICBhcnIud3JpdGVEb3VibGVCRSA9IEJQLndyaXRlRG91YmxlQkVcbiAgYXJyLmZpbGwgPSBCUC5maWxsXG4gIGFyci5pbnNwZWN0ID0gQlAuaW5zcGVjdFxuICBhcnIudG9BcnJheUJ1ZmZlciA9IEJQLnRvQXJyYXlCdWZmZXJcblxuICByZXR1cm4gYXJyXG59XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2J1ZmZlci9pbmRleC5qc1xuICoqIG1vZHVsZSBpZCA9IDJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBsb29rdXAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG5cbjsoZnVuY3Rpb24gKGV4cG9ydHMpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG4gIHZhciBBcnIgPSAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKVxuICAgID8gVWludDhBcnJheVxuICAgIDogQXJyYXlcblxuXHR2YXIgUExVUyAgID0gJysnLmNoYXJDb2RlQXQoMClcblx0dmFyIFNMQVNIICA9ICcvJy5jaGFyQ29kZUF0KDApXG5cdHZhciBOVU1CRVIgPSAnMCcuY2hhckNvZGVBdCgwKVxuXHR2YXIgTE9XRVIgID0gJ2EnLmNoYXJDb2RlQXQoMClcblx0dmFyIFVQUEVSICA9ICdBJy5jaGFyQ29kZUF0KDApXG5cdHZhciBQTFVTX1VSTF9TQUZFID0gJy0nLmNoYXJDb2RlQXQoMClcblx0dmFyIFNMQVNIX1VSTF9TQUZFID0gJ18nLmNoYXJDb2RlQXQoMClcblxuXHRmdW5jdGlvbiBkZWNvZGUgKGVsdCkge1xuXHRcdHZhciBjb2RlID0gZWx0LmNoYXJDb2RlQXQoMClcblx0XHRpZiAoY29kZSA9PT0gUExVUyB8fFxuXHRcdCAgICBjb2RlID09PSBQTFVTX1VSTF9TQUZFKVxuXHRcdFx0cmV0dXJuIDYyIC8vICcrJ1xuXHRcdGlmIChjb2RlID09PSBTTEFTSCB8fFxuXHRcdCAgICBjb2RlID09PSBTTEFTSF9VUkxfU0FGRSlcblx0XHRcdHJldHVybiA2MyAvLyAnLydcblx0XHRpZiAoY29kZSA8IE5VTUJFUilcblx0XHRcdHJldHVybiAtMSAvL25vIG1hdGNoXG5cdFx0aWYgKGNvZGUgPCBOVU1CRVIgKyAxMClcblx0XHRcdHJldHVybiBjb2RlIC0gTlVNQkVSICsgMjYgKyAyNlxuXHRcdGlmIChjb2RlIDwgVVBQRVIgKyAyNilcblx0XHRcdHJldHVybiBjb2RlIC0gVVBQRVJcblx0XHRpZiAoY29kZSA8IExPV0VSICsgMjYpXG5cdFx0XHRyZXR1cm4gY29kZSAtIExPV0VSICsgMjZcblx0fVxuXG5cdGZ1bmN0aW9uIGI2NFRvQnl0ZUFycmF5IChiNjQpIHtcblx0XHR2YXIgaSwgaiwgbCwgdG1wLCBwbGFjZUhvbGRlcnMsIGFyclxuXG5cdFx0aWYgKGI2NC5sZW5ndGggJSA0ID4gMCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0Jylcblx0XHR9XG5cblx0XHQvLyB0aGUgbnVtYmVyIG9mIGVxdWFsIHNpZ25zIChwbGFjZSBob2xkZXJzKVxuXHRcdC8vIGlmIHRoZXJlIGFyZSB0d28gcGxhY2Vob2xkZXJzLCB0aGFuIHRoZSB0d28gY2hhcmFjdGVycyBiZWZvcmUgaXRcblx0XHQvLyByZXByZXNlbnQgb25lIGJ5dGVcblx0XHQvLyBpZiB0aGVyZSBpcyBvbmx5IG9uZSwgdGhlbiB0aGUgdGhyZWUgY2hhcmFjdGVycyBiZWZvcmUgaXQgcmVwcmVzZW50IDIgYnl0ZXNcblx0XHQvLyB0aGlzIGlzIGp1c3QgYSBjaGVhcCBoYWNrIHRvIG5vdCBkbyBpbmRleE9mIHR3aWNlXG5cdFx0dmFyIGxlbiA9IGI2NC5sZW5ndGhcblx0XHRwbGFjZUhvbGRlcnMgPSAnPScgPT09IGI2NC5jaGFyQXQobGVuIC0gMikgPyAyIDogJz0nID09PSBiNjQuY2hhckF0KGxlbiAtIDEpID8gMSA6IDBcblxuXHRcdC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuXHRcdGFyciA9IG5ldyBBcnIoYjY0Lmxlbmd0aCAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzKVxuXG5cdFx0Ly8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuXHRcdGwgPSBwbGFjZUhvbGRlcnMgPiAwID8gYjY0Lmxlbmd0aCAtIDQgOiBiNjQubGVuZ3RoXG5cblx0XHR2YXIgTCA9IDBcblxuXHRcdGZ1bmN0aW9uIHB1c2ggKHYpIHtcblx0XHRcdGFycltMKytdID0gdlxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbDsgaSArPSA0LCBqICs9IDMpIHtcblx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMTgpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPDwgMTIpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAyKSkgPDwgNikgfCBkZWNvZGUoYjY0LmNoYXJBdChpICsgMykpXG5cdFx0XHRwdXNoKCh0bXAgJiAweEZGMDAwMCkgPj4gMTYpXG5cdFx0XHRwdXNoKCh0bXAgJiAweEZGMDApID4+IDgpXG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0fVxuXG5cdFx0aWYgKHBsYWNlSG9sZGVycyA9PT0gMikge1xuXHRcdFx0dG1wID0gKGRlY29kZShiNjQuY2hhckF0KGkpKSA8PCAyKSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMSkpID4+IDQpXG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0fSBlbHNlIGlmIChwbGFjZUhvbGRlcnMgPT09IDEpIHtcblx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMTApIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPDwgNCkgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDIpKSA+PiAyKVxuXHRcdFx0cHVzaCgodG1wID4+IDgpICYgMHhGRilcblx0XHRcdHB1c2godG1wICYgMHhGRilcblx0XHR9XG5cblx0XHRyZXR1cm4gYXJyXG5cdH1cblxuXHRmdW5jdGlvbiB1aW50OFRvQmFzZTY0ICh1aW50OCkge1xuXHRcdHZhciBpLFxuXHRcdFx0ZXh0cmFCeXRlcyA9IHVpbnQ4Lmxlbmd0aCAlIDMsIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG5cdFx0XHRvdXRwdXQgPSBcIlwiLFxuXHRcdFx0dGVtcCwgbGVuZ3RoXG5cblx0XHRmdW5jdGlvbiBlbmNvZGUgKG51bSkge1xuXHRcdFx0cmV0dXJuIGxvb2t1cC5jaGFyQXQobnVtKVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG5cdFx0XHRyZXR1cm4gZW5jb2RlKG51bSA+PiAxOCAmIDB4M0YpICsgZW5jb2RlKG51bSA+PiAxMiAmIDB4M0YpICsgZW5jb2RlKG51bSA+PiA2ICYgMHgzRikgKyBlbmNvZGUobnVtICYgMHgzRilcblx0XHR9XG5cblx0XHQvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG5cdFx0Zm9yIChpID0gMCwgbGVuZ3RoID0gdWludDgubGVuZ3RoIC0gZXh0cmFCeXRlczsgaSA8IGxlbmd0aDsgaSArPSAzKSB7XG5cdFx0XHR0ZW1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyAodWludDhbaSArIDJdKVxuXHRcdFx0b3V0cHV0ICs9IHRyaXBsZXRUb0Jhc2U2NCh0ZW1wKVxuXHRcdH1cblxuXHRcdC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcblx0XHRzd2l0Y2ggKGV4dHJhQnl0ZXMpIHtcblx0XHRcdGNhc2UgMTpcblx0XHRcdFx0dGVtcCA9IHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDFdXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUodGVtcCA+PiAyKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wIDw8IDQpICYgMHgzRilcblx0XHRcdFx0b3V0cHV0ICs9ICc9PSdcblx0XHRcdFx0YnJlYWtcblx0XHRcdGNhc2UgMjpcblx0XHRcdFx0dGVtcCA9ICh1aW50OFt1aW50OC5sZW5ndGggLSAyXSA8PCA4KSArICh1aW50OFt1aW50OC5sZW5ndGggLSAxXSlcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSh0ZW1wID4+IDEwKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wID4+IDQpICYgMHgzRilcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSgodGVtcCA8PCAyKSAmIDB4M0YpXG5cdFx0XHRcdG91dHB1dCArPSAnPSdcblx0XHRcdFx0YnJlYWtcblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0XG5cdH1cblxuXHRleHBvcnRzLnRvQnl0ZUFycmF5ID0gYjY0VG9CeXRlQXJyYXlcblx0ZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gdWludDhUb0Jhc2U2NFxufSh0eXBlb2YgZXhwb3J0cyA9PT0gJ3VuZGVmaW5lZCcgPyAodGhpcy5iYXNlNjRqcyA9IHt9KSA6IGV4cG9ydHMpKVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2J1ZmZlci9+L2Jhc2U2NC1qcy9saWIvYjY0LmpzXG4gKiogbW9kdWxlIGlkID0gM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqICh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vYnVmZmVyL34vaWVlZTc1NC9pbmRleC5qc1xuICoqIG1vZHVsZSBpZCA9IDRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlxuLyoqXG4gKiBpc0FycmF5XG4gKi9cblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIHRvU3RyaW5nXG4gKi9cblxudmFyIHN0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogV2hldGhlciBvciBub3QgdGhlIGdpdmVuIGB2YWxgXG4gKiBpcyBhbiBhcnJheS5cbiAqXG4gKiBleGFtcGxlOlxuICpcbiAqICAgICAgICBpc0FycmF5KFtdKTtcbiAqICAgICAgICAvLyA+IHRydWVcbiAqICAgICAgICBpc0FycmF5KGFyZ3VtZW50cyk7XG4gKiAgICAgICAgLy8gPiBmYWxzZVxuICogICAgICAgIGlzQXJyYXkoJycpO1xuICogICAgICAgIC8vID4gZmFsc2VcbiAqXG4gKiBAcGFyYW0ge21peGVkfSB2YWxcbiAqIEByZXR1cm4ge2Jvb2x9XG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5IHx8IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuICEhIHZhbCAmJiAnW29iamVjdCBBcnJheV0nID09IHN0ci5jYWxsKHZhbCk7XG59O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2J1ZmZlci9+L2lzLWFycmF5L2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiZWN1cnZlID0gcmVxdWlyZSAnZWN1cnZlJ1xyXG5Qb2ludCA9IGVjdXJ2ZS5Qb2ludFxyXG5zZWNwMjU2azEgPSBlY3VydmUuZ2V0Q3VydmVCeU5hbWUgJ3NlY3AyNTZrMSdcclxuQmlnSW50ZWdlciA9IHJlcXVpcmUgJ2JpZ2knXHJcbmJhc2U1OCA9IHJlcXVpcmUgJ2JzNTgnXHJcbmFzc2VydCA9IHJlcXVpcmUgJ2Fzc2VydCdcclxuaGFzaCA9IHJlcXVpcmUgJy4uL2NvbW1vbi9oYXNoJ1xyXG5cclxuUHVibGljS2V5ID0gcmVxdWlyZSAnLi9rZXlfcHVibGljJ1xyXG5BZXMgPSByZXF1aXJlICcuL2FlcydcclxuXHJcbmNsYXNzIFByaXZhdGVLZXlcclxuXHJcbiAgICAjIyMqXHJcbiAgICBAcGFyYW0ge0JpZ0ludGVnZXJ9XHJcbiAgICAjIyNcclxuICAgIGNvbnN0cnVjdG9yOiAoQGQpIC0+XHJcblxyXG4gICAgUHJpdmF0ZUtleS5mcm9tQnVmZmVyID0gKGJ1ZikgLT5cclxuICAgICAgICBpZiBub3QgQnVmZmVyLmlzQnVmZmVyIGJ1ZlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IgXCJFeHBlY3RpbmcgcGFyYW10ZXIgdG8gYmUgYSBCdWZmZXIgdHlwZVwiXHJcbiAgICAgICAgaWYgMzIgaXNudCBidWYubGVuZ3RoXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiV0FSTjogRXhwZWN0aW5nIDMyIGJ5dGVzLCBpbnN0ZWFkIGdvdCAje2J1Zi5sZW5ndGh9LCBzdGFjayB0cmFjZTpcIiwgbmV3IEVycm9yKCkuc3RhY2spXHJcbiAgICAgICAgaWYgYnVmLmxlbmd0aCBpcyAwXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciBcIkVtcHR5IGJ1ZmZlclwiXHJcbiAgICAgICAgbmV3IFByaXZhdGVLZXkgQmlnSW50ZWdlci5mcm9tQnVmZmVyKGJ1ZilcclxuICAgIFxyXG4gICAgUHJpdmF0ZUtleS5mcm9tU2VlZCA9IChzZWVkKSAtPiAjIGdlbmVyYXRlX3ByaXZhdGVfa2V5XHJcbiAgICAgICAgdW5sZXNzIHR5cGVvZiBzZWVkIGlzICdzdHJpbmcnXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciAnc2VlZCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nJ1xyXG4gICAgICAgIFByaXZhdGVLZXkuZnJvbUJ1ZmZlciBoYXNoLnNoYTI1NiBzZWVkXHJcbiAgICBcclxuICAgIFByaXZhdGVLZXkuZnJvbVdpZiA9IChfcHJpdmF0ZV93aWYpIC0+XHJcbiAgICAgICAgcHJpdmF0ZV93aWYgPSBuZXcgQnVmZmVyIGJhc2U1OC5kZWNvZGUgX3ByaXZhdGVfd2lmXHJcbiAgICAgICAgdmVyc2lvbiA9IHByaXZhdGVfd2lmLnJlYWRVSW50OCgwKVxyXG4gICAgICAgIGFzc2VydC5lcXVhbCAweDgwLCB2ZXJzaW9uLCBcIkV4cGVjdGVkIHZlcnNpb24gI3sweDgwfSwgaW5zdGVhZCBnb3QgI3t2ZXJzaW9ufVwiXHJcbiAgICAgICAgIyBjaGVja3N1bSBpbmNsdWRlcyB0aGUgdmVyc2lvblxyXG4gICAgICAgIHByaXZhdGVfa2V5ID0gcHJpdmF0ZV93aWYuc2xpY2UgMCwgLTRcclxuICAgICAgICBjaGVja3N1bSA9IHByaXZhdGVfd2lmLnNsaWNlIC00XHJcbiAgICAgICAgbmV3X2NoZWNrc3VtID0gaGFzaC5zaGEyNTYgcHJpdmF0ZV9rZXlcclxuICAgICAgICBuZXdfY2hlY2tzdW0gPSBoYXNoLnNoYTI1NiBuZXdfY2hlY2tzdW1cclxuICAgICAgICBuZXdfY2hlY2tzdW0gPSBuZXdfY2hlY2tzdW0uc2xpY2UgMCwgNFxyXG4gICAgICAgIGFzc2VydC5kZWVwRXF1YWwgY2hlY2tzdW0sIG5ld19jaGVja3N1bSAjLCAnSW52YWxpZCBjaGVja3N1bSdcclxuICAgICAgICBwcml2YXRlX2tleSA9IHByaXZhdGVfa2V5LnNsaWNlIDFcclxuICAgICAgICBQcml2YXRlS2V5LmZyb21CdWZmZXIgcHJpdmF0ZV9rZXlcclxuXHJcbiAgICB0b1dpZjogLT5cclxuICAgICAgICBwcml2YXRlX2tleSA9IEB0b0J1ZmZlcigpXHJcbiAgICAgICAgIyBjaGVja3N1bSBpbmNsdWRlcyB0aGUgdmVyc2lvblxyXG4gICAgICAgIHByaXZhdGVfa2V5ID0gQnVmZmVyLmNvbmNhdCBbbmV3IEJ1ZmZlcihbMHg4MF0pLCBwcml2YXRlX2tleV1cclxuICAgICAgICBjaGVja3N1bSA9IGhhc2guc2hhMjU2IHByaXZhdGVfa2V5XHJcbiAgICAgICAgY2hlY2tzdW0gPSBoYXNoLnNoYTI1NiBjaGVja3N1bVxyXG4gICAgICAgIGNoZWNrc3VtID0gY2hlY2tzdW0uc2xpY2UgMCwgNFxyXG4gICAgICAgIHByaXZhdGVfd2lmID0gQnVmZmVyLmNvbmNhdCBbcHJpdmF0ZV9rZXksIGNoZWNrc3VtXVxyXG4gICAgICAgIGJhc2U1OC5lbmNvZGUgcHJpdmF0ZV93aWZcclxuXHJcbiAgICAjIyMqXHJcbiAgICBAcmV0dXJuIHtQb2ludH1cclxuICAgICMjI1xyXG4gICAgdG9QdWJsaWNLZXlQb2ludDogLT5cclxuICAgICAgICBRID0gc2VjcDI1NmsxLkcubXVsdGlwbHkoQGQpXHJcblxyXG4gICAgdG9QdWJsaWNLZXk6IC0+XHJcbiAgICAgICAgcmV0dXJuIEBwdWJsaWNfa2V5IGlmIEBwdWJsaWNfa2V5XHJcbiAgICAgICAgQHB1YmxpY19rZXkgPSBQdWJsaWNLZXkuZnJvbVBvaW50IEB0b1B1YmxpY0tleVBvaW50KClcclxuICAgIFxyXG4gICAgdG9CdWZmZXI6IC0+XHJcbiAgICAgICAgQGQudG9CdWZmZXIoMzIpXHJcbiAgICBcclxuICAgICMjIyogRUNJRVMgIyMjXHJcbiAgICBnZXRfc2hhcmVkX3NlY3JldDoocHVibGljX2tleSktPlxyXG4gICAgICAgIEtCID0gcHVibGljX2tleS50b1VuY29tcHJlc3NlZCgpLnRvQnVmZmVyKClcclxuICAgICAgICBLQlAgPSBQb2ludC5mcm9tQWZmaW5lKFxyXG4gICAgICAgICAgICBzZWNwMjU2azFcclxuICAgICAgICAgICAgeCA9IEJpZ0ludGVnZXIuZnJvbUJ1ZmZlciBLQi5zbGljZSAxLDMzXHJcbiAgICAgICAgICAgIHkgPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIgS0Iuc2xpY2UgMzMsNjVcclxuICAgICAgICApXHJcbiAgICAgICAgciA9IEB0b0J1ZmZlcigpXHJcbiAgICAgICAgUCA9IEtCUC5tdWx0aXBseSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIgclxyXG4gICAgICAgIFMgPSBQLmFmZmluZVgudG9CdWZmZXIge3NpemU6IDMyfVxyXG4gICAgICAgICMgU0hBNTEyIHVzZWQgaW4gRUNJRVNcclxuICAgICAgICBoYXNoLnNoYTUxMiBTXHJcbiAgICBcclxuICAgICMjIyA8aGVscGVyX2Z1bmN0aW9ucz4gIyMjXHJcbiAgICBcclxuICAgIHRvQnl0ZUJ1ZmZlcjogKCkgLT5cclxuICAgICAgICBiID0gbmV3IEJ5dGVCdWZmZXIoQnl0ZUJ1ZmZlci5ERUZBVUxUX0NBUEFDSVRZLCBCeXRlQnVmZmVyLkxJVFRMRV9FTkRJQU4pXHJcbiAgICAgICAgQGFwcGVuZEJ5dGVCdWZmZXIoYilcclxuICAgICAgICBiLmNvcHkgMCwgYi5vZmZzZXRcclxuICAgIFxyXG4gICAgUHJpdmF0ZUtleS5mcm9tSGV4ID0gKGhleCkgLT5cclxuICAgICAgICBQcml2YXRlS2V5LmZyb21CdWZmZXIgbmV3IEJ1ZmZlciBoZXgsICdoZXgnXHJcblxyXG4gICAgdG9IZXg6IC0+XHJcbiAgICAgICAgQHRvQnVmZmVyKCkudG9TdHJpbmcgJ2hleCdcclxuICAgICAgICBcclxuICAgICMjIyA8L2hlbHBlcl9mdW5jdGlvbnM+ICMjI1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBQcml2YXRlS2V5XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvZGwvc3JjL2VjYy9rZXlfcHJpdmF0ZS5jb2ZmZWVcbiAqKi8iLCJ2YXIgUG9pbnQgPSByZXF1aXJlKCcuL3BvaW50JylcbnZhciBDdXJ2ZSA9IHJlcXVpcmUoJy4vY3VydmUnKVxuXG52YXIgZ2V0Q3VydmVCeU5hbWUgPSByZXF1aXJlKCcuL25hbWVzJylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEN1cnZlOiBDdXJ2ZSxcbiAgUG9pbnQ6IFBvaW50LFxuICBnZXRDdXJ2ZUJ5TmFtZTogZ2V0Q3VydmVCeU5hbWVcbn1cblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvZGwvfi9lY3VydmUvbGliL2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpXG52YXIgQmlnSW50ZWdlciA9IHJlcXVpcmUoJ2JpZ2knKVxuXG52YXIgVEhSRUUgPSBCaWdJbnRlZ2VyLnZhbHVlT2YoMylcblxuZnVuY3Rpb24gUG9pbnQoY3VydmUsIHgsIHksIHopIHtcbiAgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsKHosIHVuZGVmaW5lZCwgJ01pc3NpbmcgWiBjb29yZGluYXRlJylcblxuICB0aGlzLmN1cnZlID0gY3VydmVcbiAgdGhpcy54ID0geFxuICB0aGlzLnkgPSB5XG4gIHRoaXMueiA9IHpcbiAgdGhpcy5fekludiA9IG51bGxcblxuICB0aGlzLmNvbXByZXNzZWQgPSB0cnVlXG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShQb2ludC5wcm90b3R5cGUsICd6SW52Jywge1xuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl96SW52ID09PSBudWxsKSB7XG4gICAgICB0aGlzLl96SW52ID0gdGhpcy56Lm1vZEludmVyc2UodGhpcy5jdXJ2ZS5wKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl96SW52XG4gIH1cbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShQb2ludC5wcm90b3R5cGUsICdhZmZpbmVYJywge1xuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLngubXVsdGlwbHkodGhpcy56SW52KS5tb2QodGhpcy5jdXJ2ZS5wKVxuICB9XG59KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUG9pbnQucHJvdG90eXBlLCAnYWZmaW5lWScsIHtcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy55Lm11bHRpcGx5KHRoaXMuekludikubW9kKHRoaXMuY3VydmUucClcbiAgfVxufSlcblxuUG9pbnQuZnJvbUFmZmluZSA9IGZ1bmN0aW9uKGN1cnZlLCB4LCB5KSB7XG4gIHJldHVybiBuZXcgUG9pbnQoY3VydmUsIHgsIHksIEJpZ0ludGVnZXIuT05FKVxufVxuXG5Qb2ludC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgaWYgKG90aGVyID09PSB0aGlzKSByZXR1cm4gdHJ1ZVxuICBpZiAodGhpcy5jdXJ2ZS5pc0luZmluaXR5KHRoaXMpKSByZXR1cm4gdGhpcy5jdXJ2ZS5pc0luZmluaXR5KG90aGVyKVxuICBpZiAodGhpcy5jdXJ2ZS5pc0luZmluaXR5KG90aGVyKSkgcmV0dXJuIHRoaXMuY3VydmUuaXNJbmZpbml0eSh0aGlzKVxuXG4gIC8vIHUgPSBZMiAqIFoxIC0gWTEgKiBaMlxuICB2YXIgdSA9IG90aGVyLnkubXVsdGlwbHkodGhpcy56KS5zdWJ0cmFjdCh0aGlzLnkubXVsdGlwbHkob3RoZXIueikpLm1vZCh0aGlzLmN1cnZlLnApXG5cbiAgaWYgKHUuc2lnbnVtKCkgIT09IDApIHJldHVybiBmYWxzZVxuXG4gIC8vIHYgPSBYMiAqIFoxIC0gWDEgKiBaMlxuICB2YXIgdiA9IG90aGVyLngubXVsdGlwbHkodGhpcy56KS5zdWJ0cmFjdCh0aGlzLngubXVsdGlwbHkob3RoZXIueikpLm1vZCh0aGlzLmN1cnZlLnApXG5cbiAgcmV0dXJuIHYuc2lnbnVtKCkgPT09IDBcbn1cblxuUG9pbnQucHJvdG90eXBlLm5lZ2F0ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgeSA9IHRoaXMuY3VydmUucC5zdWJ0cmFjdCh0aGlzLnkpXG5cbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLmN1cnZlLCB0aGlzLngsIHksIHRoaXMueilcbn1cblxuUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKGIpIHtcbiAgaWYgKHRoaXMuY3VydmUuaXNJbmZpbml0eSh0aGlzKSkgcmV0dXJuIGJcbiAgaWYgKHRoaXMuY3VydmUuaXNJbmZpbml0eShiKSkgcmV0dXJuIHRoaXNcblxuICB2YXIgeDEgPSB0aGlzLnhcbiAgdmFyIHkxID0gdGhpcy55XG4gIHZhciB4MiA9IGIueFxuICB2YXIgeTIgPSBiLnlcblxuICAvLyB1ID0gWTIgKiBaMSAtIFkxICogWjJcbiAgdmFyIHUgPSB5Mi5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHkxLm11bHRpcGx5KGIueikpLm1vZCh0aGlzLmN1cnZlLnApXG4gIC8vIHYgPSBYMiAqIFoxIC0gWDEgKiBaMlxuICB2YXIgdiA9IHgyLm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QoeDEubXVsdGlwbHkoYi56KSkubW9kKHRoaXMuY3VydmUucClcblxuICBpZiAodi5zaWdudW0oKSA9PT0gMCkge1xuICAgIGlmICh1LnNpZ251bSgpID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy50d2ljZSgpIC8vIHRoaXMgPT0gYiwgc28gZG91YmxlXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuaW5maW5pdHkgLy8gdGhpcyA9IC1iLCBzbyBpbmZpbml0eVxuICB9XG5cbiAgdmFyIHYyID0gdi5zcXVhcmUoKVxuICB2YXIgdjMgPSB2Mi5tdWx0aXBseSh2KVxuICB2YXIgeDF2MiA9IHgxLm11bHRpcGx5KHYyKVxuICB2YXIgenUyID0gdS5zcXVhcmUoKS5tdWx0aXBseSh0aGlzLnopXG5cbiAgLy8geDMgPSB2ICogKHoyICogKHoxICogdV4yIC0gMiAqIHgxICogdl4yKSAtIHZeMylcbiAgdmFyIHgzID0genUyLnN1YnRyYWN0KHgxdjIuc2hpZnRMZWZ0KDEpKS5tdWx0aXBseShiLnopLnN1YnRyYWN0KHYzKS5tdWx0aXBseSh2KS5tb2QodGhpcy5jdXJ2ZS5wKVxuICAvLyB5MyA9IHoyICogKDMgKiB4MSAqIHUgKiB2XjIgLSB5MSAqIHZeMyAtIHoxICogdV4zKSArIHUgKiB2XjNcbiAgdmFyIHkzID0geDF2Mi5tdWx0aXBseShUSFJFRSkubXVsdGlwbHkodSkuc3VidHJhY3QoeTEubXVsdGlwbHkodjMpKS5zdWJ0cmFjdCh6dTIubXVsdGlwbHkodSkpLm11bHRpcGx5KGIueikuYWRkKHUubXVsdGlwbHkodjMpKS5tb2QodGhpcy5jdXJ2ZS5wKVxuICAvLyB6MyA9IHZeMyAqIHoxICogejJcbiAgdmFyIHozID0gdjMubXVsdGlwbHkodGhpcy56KS5tdWx0aXBseShiLnopLm1vZCh0aGlzLmN1cnZlLnApXG5cbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLmN1cnZlLCB4MywgeTMsIHozKVxufVxuXG5Qb2ludC5wcm90b3R5cGUudHdpY2UgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuY3VydmUuaXNJbmZpbml0eSh0aGlzKSkgcmV0dXJuIHRoaXNcbiAgaWYgKHRoaXMueS5zaWdudW0oKSA9PT0gMCkgcmV0dXJuIHRoaXMuY3VydmUuaW5maW5pdHlcblxuICB2YXIgeDEgPSB0aGlzLnhcbiAgdmFyIHkxID0gdGhpcy55XG5cbiAgdmFyIHkxejEgPSB5MS5tdWx0aXBseSh0aGlzLnopXG4gIHZhciB5MXNxejEgPSB5MXoxLm11bHRpcGx5KHkxKS5tb2QodGhpcy5jdXJ2ZS5wKVxuICB2YXIgYSA9IHRoaXMuY3VydmUuYVxuXG4gIC8vIHcgPSAzICogeDFeMiArIGEgKiB6MV4yXG4gIHZhciB3ID0geDEuc3F1YXJlKCkubXVsdGlwbHkoVEhSRUUpXG5cbiAgaWYgKGEuc2lnbnVtKCkgIT09IDApIHtcbiAgICB3ID0gdy5hZGQodGhpcy56LnNxdWFyZSgpLm11bHRpcGx5KGEpKVxuICB9XG5cbiAgdyA9IHcubW9kKHRoaXMuY3VydmUucClcbiAgLy8geDMgPSAyICogeTEgKiB6MSAqICh3XjIgLSA4ICogeDEgKiB5MV4yICogejEpXG4gIHZhciB4MyA9IHcuc3F1YXJlKCkuc3VidHJhY3QoeDEuc2hpZnRMZWZ0KDMpLm11bHRpcGx5KHkxc3F6MSkpLnNoaWZ0TGVmdCgxKS5tdWx0aXBseSh5MXoxKS5tb2QodGhpcy5jdXJ2ZS5wKVxuICAvLyB5MyA9IDQgKiB5MV4yICogejEgKiAoMyAqIHcgKiB4MSAtIDIgKiB5MV4yICogejEpIC0gd14zXG4gIHZhciB5MyA9IHcubXVsdGlwbHkoVEhSRUUpLm11bHRpcGx5KHgxKS5zdWJ0cmFjdCh5MXNxejEuc2hpZnRMZWZ0KDEpKS5zaGlmdExlZnQoMikubXVsdGlwbHkoeTFzcXoxKS5zdWJ0cmFjdCh3LnBvdygzKSkubW9kKHRoaXMuY3VydmUucClcbiAgLy8gejMgPSA4ICogKHkxICogejEpXjNcbiAgdmFyIHozID0geTF6MS5wb3coMykuc2hpZnRMZWZ0KDMpLm1vZCh0aGlzLmN1cnZlLnApXG5cbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLmN1cnZlLCB4MywgeTMsIHozKVxufVxuXG4vLyBTaW1wbGUgTkFGIChOb24tQWRqYWNlbnQgRm9ybSkgbXVsdGlwbGljYXRpb24gYWxnb3JpdGhtXG4vLyBUT0RPOiBtb2R1bGFyaXplIHRoZSBtdWx0aXBsaWNhdGlvbiBhbGdvcml0aG1cblBvaW50LnByb3RvdHlwZS5tdWx0aXBseSA9IGZ1bmN0aW9uKGspIHtcbiAgaWYgKHRoaXMuY3VydmUuaXNJbmZpbml0eSh0aGlzKSkgcmV0dXJuIHRoaXNcbiAgaWYgKGsuc2lnbnVtKCkgPT09IDApIHJldHVybiB0aGlzLmN1cnZlLmluZmluaXR5XG5cbiAgdmFyIGUgPSBrXG4gIHZhciBoID0gZS5tdWx0aXBseShUSFJFRSlcblxuICB2YXIgbmVnID0gdGhpcy5uZWdhdGUoKVxuICB2YXIgUiA9IHRoaXNcblxuICBmb3IgKHZhciBpID0gaC5iaXRMZW5ndGgoKSAtIDI7IGkgPiAwOyAtLWkpIHtcbiAgICBSID0gUi50d2ljZSgpXG5cbiAgICB2YXIgaEJpdCA9IGgudGVzdEJpdChpKVxuICAgIHZhciBlQml0ID0gZS50ZXN0Qml0KGkpXG5cbiAgICBpZiAoaEJpdCAhPSBlQml0KSB7XG4gICAgICBSID0gUi5hZGQoaEJpdCA/IHRoaXMgOiBuZWcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFJcbn1cblxuLy8gQ29tcHV0ZSB0aGlzKmogKyB4KmsgKHNpbXVsdGFuZW91cyBtdWx0aXBsaWNhdGlvbilcblBvaW50LnByb3RvdHlwZS5tdWx0aXBseVR3byA9IGZ1bmN0aW9uKGosIHgsIGspIHtcbiAgdmFyIGlcblxuICBpZiAoai5iaXRMZW5ndGgoKSA+IGsuYml0TGVuZ3RoKCkpXG4gICAgaSA9IGouYml0TGVuZ3RoKCkgLSAxXG4gIGVsc2VcbiAgICBpID0gay5iaXRMZW5ndGgoKSAtIDFcblxuICB2YXIgUiA9IHRoaXMuY3VydmUuaW5maW5pdHlcbiAgdmFyIGJvdGggPSB0aGlzLmFkZCh4KVxuXG4gIHdoaWxlIChpID49IDApIHtcbiAgICBSID0gUi50d2ljZSgpXG5cbiAgICB2YXIgakJpdCA9IGoudGVzdEJpdChpKVxuICAgIHZhciBrQml0ID0gay50ZXN0Qml0KGkpXG5cbiAgICBpZiAoakJpdCkge1xuICAgICAgaWYgKGtCaXQpIHtcbiAgICAgICAgUiA9IFIuYWRkKGJvdGgpXG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFIgPSBSLmFkZCh0aGlzKVxuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChrQml0KSB7XG4gICAgICAgIFIgPSBSLmFkZCh4KVxuICAgICAgfVxuICAgIH1cbiAgICAtLWlcbiAgfVxuXG4gIHJldHVybiBSXG59XG5cblBvaW50LnByb3RvdHlwZS5nZXRFbmNvZGVkID0gZnVuY3Rpb24oY29tcHJlc3NlZCkge1xuICBpZiAoY29tcHJlc3NlZCA9PSB1bmRlZmluZWQpIGNvbXByZXNzZWQgPSB0aGlzLmNvbXByZXNzZWRcbiAgaWYgKHRoaXMuY3VydmUuaXNJbmZpbml0eSh0aGlzKSkgcmV0dXJuIG5ldyBCdWZmZXIoJzAwJywgJ2hleCcpIC8vIEluZmluaXR5IHBvaW50IGVuY29kZWQgaXMgc2ltcGx5ICcwMCdcblxuICB2YXIgeCA9IHRoaXMuYWZmaW5lWFxuICB2YXIgeSA9IHRoaXMuYWZmaW5lWVxuXG4gIHZhciBidWZmZXJcblxuICAvLyBEZXRlcm1pbmUgc2l6ZSBvZiBxIGluIGJ5dGVzXG4gIHZhciBieXRlTGVuZ3RoID0gTWF0aC5mbG9vcigodGhpcy5jdXJ2ZS5wLmJpdExlbmd0aCgpICsgNykgLyA4KVxuXG4gIC8vIDB4MDIvMHgwMyB8IFhcbiAgaWYgKGNvbXByZXNzZWQpIHtcbiAgICBidWZmZXIgPSBuZXcgQnVmZmVyKDEgKyBieXRlTGVuZ3RoKVxuICAgIGJ1ZmZlci53cml0ZVVJbnQ4KHkuaXNFdmVuKCkgPyAweDAyIDogMHgwMywgMClcblxuICAvLyAweDA0IHwgWCB8IFlcbiAgfSBlbHNlIHtcbiAgICBidWZmZXIgPSBuZXcgQnVmZmVyKDEgKyBieXRlTGVuZ3RoICsgYnl0ZUxlbmd0aClcbiAgICBidWZmZXIud3JpdGVVSW50OCgweDA0LCAwKVxuXG4gICAgeS50b0J1ZmZlcihieXRlTGVuZ3RoKS5jb3B5KGJ1ZmZlciwgMSArIGJ5dGVMZW5ndGgpXG4gIH1cblxuICB4LnRvQnVmZmVyKGJ5dGVMZW5ndGgpLmNvcHkoYnVmZmVyLCAxKVxuXG4gIHJldHVybiBidWZmZXJcbn1cblxuUG9pbnQuZGVjb2RlRnJvbSA9IGZ1bmN0aW9uKGN1cnZlLCBidWZmZXIpIHtcbiAgdmFyIHR5cGUgPSBidWZmZXIucmVhZFVJbnQ4KDApXG4gIHZhciBjb21wcmVzc2VkID0gKHR5cGUgIT09IDQpXG5cbiAgdmFyIHggPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoYnVmZmVyLnNsaWNlKDEsIDMzKSlcbiAgdmFyIGJ5dGVMZW5ndGggPSBNYXRoLmZsb29yKChjdXJ2ZS5wLmJpdExlbmd0aCgpICsgNykgLyA4KVxuXG4gIHZhciBRXG4gIGlmIChjb21wcmVzc2VkKSB7XG4gICAgYXNzZXJ0LmVxdWFsKGJ1ZmZlci5sZW5ndGgsIGJ5dGVMZW5ndGggKyAxLCAnSW52YWxpZCBzZXF1ZW5jZSBsZW5ndGgnKVxuICAgIGFzc2VydCh0eXBlID09PSAweDAyIHx8IHR5cGUgPT09IDB4MDMsICdJbnZhbGlkIHNlcXVlbmNlIHRhZycpXG5cbiAgICB2YXIgaXNPZGQgPSAodHlwZSA9PT0gMHgwMylcbiAgICBRID0gY3VydmUucG9pbnRGcm9tWChpc09kZCwgeClcblxuICB9IGVsc2Uge1xuICAgIGFzc2VydC5lcXVhbChidWZmZXIubGVuZ3RoLCAxICsgYnl0ZUxlbmd0aCArIGJ5dGVMZW5ndGgsICdJbnZhbGlkIHNlcXVlbmNlIGxlbmd0aCcpXG5cbiAgICB2YXIgeSA9IEJpZ0ludGVnZXIuZnJvbUJ1ZmZlcihidWZmZXIuc2xpY2UoMSArIGJ5dGVMZW5ndGgpKVxuICAgIFEgPSBQb2ludC5mcm9tQWZmaW5lKGN1cnZlLCB4LCB5KVxuICB9XG5cbiAgUS5jb21wcmVzc2VkID0gY29tcHJlc3NlZFxuICByZXR1cm4gUVxufVxuXG5Qb2ludC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmN1cnZlLmlzSW5maW5pdHkodGhpcykpIHJldHVybiAnKElORklOSVRZKSdcblxuICByZXR1cm4gJygnICsgdGhpcy5hZmZpbmVYLnRvU3RyaW5nKCkgKyAnLCcgKyB0aGlzLmFmZmluZVkudG9TdHJpbmcoKSArICcpJ1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBvaW50XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL2RsL34vZWN1cnZlL2xpYi9wb2ludC5qc1xuICoqIG1vZHVsZSBpZCA9IDhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIGh0dHA6Ly93aWtpLmNvbW1vbmpzLm9yZy93aWtpL1VuaXRfVGVzdGluZy8xLjBcbi8vXG4vLyBUSElTIElTIE5PVCBURVNURUQgTk9SIExJS0VMWSBUTyBXT1JLIE9VVFNJREUgVjghXG4vL1xuLy8gT3JpZ2luYWxseSBmcm9tIG5hcndoYWwuanMgKGh0dHA6Ly9uYXJ3aGFsanMub3JnKVxuLy8gQ29weXJpZ2h0IChjKSAyMDA5IFRob21hcyBSb2JpbnNvbiA8Mjgwbm9ydGguY29tPlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICdTb2Z0d2FyZScpLCB0b1xuLy8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGVcbi8vIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vclxuLy8gc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU5cbi8vIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT05cbi8vIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyB3aGVuIHVzZWQgaW4gbm9kZSwgdGhpcyB3aWxsIGFjdHVhbGx5IGxvYWQgdGhlIHV0aWwgbW9kdWxlIHdlIGRlcGVuZCBvblxuLy8gdmVyc3VzIGxvYWRpbmcgdGhlIGJ1aWx0aW4gdXRpbCBtb2R1bGUgYXMgaGFwcGVucyBvdGhlcndpc2Vcbi8vIHRoaXMgaXMgYSBidWcgaW4gbm9kZSBtb2R1bGUgbG9hZGluZyBhcyBmYXIgYXMgSSBhbSBjb25jZXJuZWRcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbC8nKTtcblxudmFyIHBTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vLyAxLiBUaGUgYXNzZXJ0IG1vZHVsZSBwcm92aWRlcyBmdW5jdGlvbnMgdGhhdCB0aHJvd1xuLy8gQXNzZXJ0aW9uRXJyb3IncyB3aGVuIHBhcnRpY3VsYXIgY29uZGl0aW9ucyBhcmUgbm90IG1ldC4gVGhlXG4vLyBhc3NlcnQgbW9kdWxlIG11c3QgY29uZm9ybSB0byB0aGUgZm9sbG93aW5nIGludGVyZmFjZS5cblxudmFyIGFzc2VydCA9IG1vZHVsZS5leHBvcnRzID0gb2s7XG5cbi8vIDIuIFRoZSBBc3NlcnRpb25FcnJvciBpcyBkZWZpbmVkIGluIGFzc2VydC5cbi8vIG5ldyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IoeyBtZXNzYWdlOiBtZXNzYWdlLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbDogYWN0dWFsLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCB9KVxuXG5hc3NlcnQuQXNzZXJ0aW9uRXJyb3IgPSBmdW5jdGlvbiBBc3NlcnRpb25FcnJvcihvcHRpb25zKSB7XG4gIHRoaXMubmFtZSA9ICdBc3NlcnRpb25FcnJvcic7XG4gIHRoaXMuYWN0dWFsID0gb3B0aW9ucy5hY3R1YWw7XG4gIHRoaXMuZXhwZWN0ZWQgPSBvcHRpb25zLmV4cGVjdGVkO1xuICB0aGlzLm9wZXJhdG9yID0gb3B0aW9ucy5vcGVyYXRvcjtcbiAgaWYgKG9wdGlvbnMubWVzc2FnZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG9wdGlvbnMubWVzc2FnZTtcbiAgICB0aGlzLmdlbmVyYXRlZE1lc3NhZ2UgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBnZXRNZXNzYWdlKHRoaXMpO1xuICAgIHRoaXMuZ2VuZXJhdGVkTWVzc2FnZSA9IHRydWU7XG4gIH1cbiAgdmFyIHN0YWNrU3RhcnRGdW5jdGlvbiA9IG9wdGlvbnMuc3RhY2tTdGFydEZ1bmN0aW9uIHx8IGZhaWw7XG5cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgc3RhY2tTdGFydEZ1bmN0aW9uKTtcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBub24gdjggYnJvd3NlcnMgc28gd2UgY2FuIGhhdmUgYSBzdGFja3RyYWNlXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcigpO1xuICAgIGlmIChlcnIuc3RhY2spIHtcbiAgICAgIHZhciBvdXQgPSBlcnIuc3RhY2s7XG5cbiAgICAgIC8vIHRyeSB0byBzdHJpcCB1c2VsZXNzIGZyYW1lc1xuICAgICAgdmFyIGZuX25hbWUgPSBzdGFja1N0YXJ0RnVuY3Rpb24ubmFtZTtcbiAgICAgIHZhciBpZHggPSBvdXQuaW5kZXhPZignXFxuJyArIGZuX25hbWUpO1xuICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgIC8vIG9uY2Ugd2UgaGF2ZSBsb2NhdGVkIHRoZSBmdW5jdGlvbiBmcmFtZVxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHN0cmlwIG91dCBldmVyeXRoaW5nIGJlZm9yZSBpdCAoYW5kIGl0cyBsaW5lKVxuICAgICAgICB2YXIgbmV4dF9saW5lID0gb3V0LmluZGV4T2YoJ1xcbicsIGlkeCArIDEpO1xuICAgICAgICBvdXQgPSBvdXQuc3Vic3RyaW5nKG5leHRfbGluZSArIDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0YWNrID0gb3V0O1xuICAgIH1cbiAgfVxufTtcblxuLy8gYXNzZXJ0LkFzc2VydGlvbkVycm9yIGluc3RhbmNlb2YgRXJyb3JcbnV0aWwuaW5oZXJpdHMoYXNzZXJ0LkFzc2VydGlvbkVycm9yLCBFcnJvcik7XG5cbmZ1bmN0aW9uIHJlcGxhY2VyKGtleSwgdmFsdWUpIHtcbiAgaWYgKHV0aWwuaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuICcnICsgdmFsdWU7XG4gIH1cbiAgaWYgKHV0aWwuaXNOdW1iZXIodmFsdWUpICYmICFpc0Zpbml0ZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgfVxuICBpZiAodXRpbC5pc0Z1bmN0aW9uKHZhbHVlKSB8fCB1dGlsLmlzUmVnRXhwKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gdHJ1bmNhdGUocywgbikge1xuICBpZiAodXRpbC5pc1N0cmluZyhzKSkge1xuICAgIHJldHVybiBzLmxlbmd0aCA8IG4gPyBzIDogcy5zbGljZSgwLCBuKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRNZXNzYWdlKHNlbGYpIHtcbiAgcmV0dXJuIHRydW5jYXRlKEpTT04uc3RyaW5naWZ5KHNlbGYuYWN0dWFsLCByZXBsYWNlciksIDEyOCkgKyAnICcgK1xuICAgICAgICAgc2VsZi5vcGVyYXRvciArICcgJyArXG4gICAgICAgICB0cnVuY2F0ZShKU09OLnN0cmluZ2lmeShzZWxmLmV4cGVjdGVkLCByZXBsYWNlciksIDEyOCk7XG59XG5cbi8vIEF0IHByZXNlbnQgb25seSB0aGUgdGhyZWUga2V5cyBtZW50aW9uZWQgYWJvdmUgYXJlIHVzZWQgYW5kXG4vLyB1bmRlcnN0b29kIGJ5IHRoZSBzcGVjLiBJbXBsZW1lbnRhdGlvbnMgb3Igc3ViIG1vZHVsZXMgY2FuIHBhc3Ncbi8vIG90aGVyIGtleXMgdG8gdGhlIEFzc2VydGlvbkVycm9yJ3MgY29uc3RydWN0b3IgLSB0aGV5IHdpbGwgYmVcbi8vIGlnbm9yZWQuXG5cbi8vIDMuIEFsbCBvZiB0aGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBtdXN0IHRocm93IGFuIEFzc2VydGlvbkVycm9yXG4vLyB3aGVuIGEgY29ycmVzcG9uZGluZyBjb25kaXRpb24gaXMgbm90IG1ldCwgd2l0aCBhIG1lc3NhZ2UgdGhhdFxuLy8gbWF5IGJlIHVuZGVmaW5lZCBpZiBub3QgcHJvdmlkZWQuICBBbGwgYXNzZXJ0aW9uIG1ldGhvZHMgcHJvdmlkZVxuLy8gYm90aCB0aGUgYWN0dWFsIGFuZCBleHBlY3RlZCB2YWx1ZXMgdG8gdGhlIGFzc2VydGlvbiBlcnJvciBmb3Jcbi8vIGRpc3BsYXkgcHVycG9zZXMuXG5cbmZ1bmN0aW9uIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgb3BlcmF0b3IsIHN0YWNrU3RhcnRGdW5jdGlvbikge1xuICB0aHJvdyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHtcbiAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgIGFjdHVhbDogYWN0dWFsLFxuICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICBvcGVyYXRvcjogb3BlcmF0b3IsXG4gICAgc3RhY2tTdGFydEZ1bmN0aW9uOiBzdGFja1N0YXJ0RnVuY3Rpb25cbiAgfSk7XG59XG5cbi8vIEVYVEVOU0lPTiEgYWxsb3dzIGZvciB3ZWxsIGJlaGF2ZWQgZXJyb3JzIGRlZmluZWQgZWxzZXdoZXJlLlxuYXNzZXJ0LmZhaWwgPSBmYWlsO1xuXG4vLyA0LiBQdXJlIGFzc2VydGlvbiB0ZXN0cyB3aGV0aGVyIGEgdmFsdWUgaXMgdHJ1dGh5LCBhcyBkZXRlcm1pbmVkXG4vLyBieSAhIWd1YXJkLlxuLy8gYXNzZXJ0Lm9rKGd1YXJkLCBtZXNzYWdlX29wdCk7XG4vLyBUaGlzIHN0YXRlbWVudCBpcyBlcXVpdmFsZW50IHRvIGFzc2VydC5lcXVhbCh0cnVlLCAhIWd1YXJkLFxuLy8gbWVzc2FnZV9vcHQpOy4gVG8gdGVzdCBzdHJpY3RseSBmb3IgdGhlIHZhbHVlIHRydWUsIHVzZVxuLy8gYXNzZXJ0LnN0cmljdEVxdWFsKHRydWUsIGd1YXJkLCBtZXNzYWdlX29wdCk7LlxuXG5mdW5jdGlvbiBvayh2YWx1ZSwgbWVzc2FnZSkge1xuICBpZiAoIXZhbHVlKSBmYWlsKHZhbHVlLCB0cnVlLCBtZXNzYWdlLCAnPT0nLCBhc3NlcnQub2spO1xufVxuYXNzZXJ0Lm9rID0gb2s7XG5cbi8vIDUuIFRoZSBlcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgc2hhbGxvdywgY29lcmNpdmUgZXF1YWxpdHkgd2l0aFxuLy8gPT0uXG4vLyBhc3NlcnQuZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQuZXF1YWwgPSBmdW5jdGlvbiBlcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgIT0gZXhwZWN0ZWQpIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJz09JywgYXNzZXJ0LmVxdWFsKTtcbn07XG5cbi8vIDYuIFRoZSBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciB3aGV0aGVyIHR3byBvYmplY3RzIGFyZSBub3QgZXF1YWxcbi8vIHdpdGggIT0gYXNzZXJ0Lm5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0Lm5vdEVxdWFsID0gZnVuY3Rpb24gbm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsID09IGV4cGVjdGVkKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnIT0nLCBhc3NlcnQubm90RXF1YWwpO1xuICB9XG59O1xuXG4vLyA3LiBUaGUgZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGEgZGVlcCBlcXVhbGl0eSByZWxhdGlvbi5cbi8vIGFzc2VydC5kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQuZGVlcEVxdWFsID0gZnVuY3Rpb24gZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnZGVlcEVxdWFsJywgYXNzZXJ0LmRlZXBFcXVhbCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCkge1xuICAvLyA3LjEuIEFsbCBpZGVudGljYWwgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB9IGVsc2UgaWYgKHV0aWwuaXNCdWZmZXIoYWN0dWFsKSAmJiB1dGlsLmlzQnVmZmVyKGV4cGVjdGVkKSkge1xuICAgIGlmIChhY3R1YWwubGVuZ3RoICE9IGV4cGVjdGVkLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhY3R1YWwubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhY3R1YWxbaV0gIT09IGV4cGVjdGVkW2ldKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgLy8gNy4yLiBJZiB0aGUgZXhwZWN0ZWQgdmFsdWUgaXMgYSBEYXRlIG9iamVjdCwgdGhlIGFjdHVhbCB2YWx1ZSBpc1xuICAvLyBlcXVpdmFsZW50IGlmIGl0IGlzIGFsc28gYSBEYXRlIG9iamVjdCB0aGF0IHJlZmVycyB0byB0aGUgc2FtZSB0aW1lLlxuICB9IGVsc2UgaWYgKHV0aWwuaXNEYXRlKGFjdHVhbCkgJiYgdXRpbC5pc0RhdGUoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGFjdHVhbC5nZXRUaW1lKCkgPT09IGV4cGVjdGVkLmdldFRpbWUoKTtcblxuICAvLyA3LjMgSWYgdGhlIGV4cGVjdGVkIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdCwgdGhlIGFjdHVhbCB2YWx1ZSBpc1xuICAvLyBlcXVpdmFsZW50IGlmIGl0IGlzIGFsc28gYSBSZWdFeHAgb2JqZWN0IHdpdGggdGhlIHNhbWUgc291cmNlIGFuZFxuICAvLyBwcm9wZXJ0aWVzIChgZ2xvYmFsYCwgYG11bHRpbGluZWAsIGBsYXN0SW5kZXhgLCBgaWdub3JlQ2FzZWApLlxuICB9IGVsc2UgaWYgKHV0aWwuaXNSZWdFeHAoYWN0dWFsKSAmJiB1dGlsLmlzUmVnRXhwKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBhY3R1YWwuc291cmNlID09PSBleHBlY3RlZC5zb3VyY2UgJiZcbiAgICAgICAgICAgYWN0dWFsLmdsb2JhbCA9PT0gZXhwZWN0ZWQuZ2xvYmFsICYmXG4gICAgICAgICAgIGFjdHVhbC5tdWx0aWxpbmUgPT09IGV4cGVjdGVkLm11bHRpbGluZSAmJlxuICAgICAgICAgICBhY3R1YWwubGFzdEluZGV4ID09PSBleHBlY3RlZC5sYXN0SW5kZXggJiZcbiAgICAgICAgICAgYWN0dWFsLmlnbm9yZUNhc2UgPT09IGV4cGVjdGVkLmlnbm9yZUNhc2U7XG5cbiAgLy8gNy40LiBPdGhlciBwYWlycyB0aGF0IGRvIG5vdCBib3RoIHBhc3MgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnLFxuICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5ID09LlxuICB9IGVsc2UgaWYgKCF1dGlsLmlzT2JqZWN0KGFjdHVhbCkgJiYgIXV0aWwuaXNPYmplY3QoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGFjdHVhbCA9PSBleHBlY3RlZDtcblxuICAvLyA3LjUgRm9yIGFsbCBvdGhlciBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSBvYmplY3RzLCBlcXVpdmFsZW5jZSBpc1xuICAvLyBkZXRlcm1pbmVkIGJ5IGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoYXMgdmVyaWZpZWRcbiAgLy8gd2l0aCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwpLCB0aGUgc2FtZSBzZXQgb2Yga2V5c1xuICAvLyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSwgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5XG4gIC8vIGNvcnJlc3BvbmRpbmcga2V5LCBhbmQgYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LiBOb3RlOiB0aGlzXG4gIC8vIGFjY291bnRzIGZvciBib3RoIG5hbWVkIGFuZCBpbmRleGVkIHByb3BlcnRpZXMgb24gQXJyYXlzLlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBvYmpFcXVpdihhY3R1YWwsIGV4cGVjdGVkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0FyZ3VtZW50cyhvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xufVxuXG5mdW5jdGlvbiBvYmpFcXVpdihhLCBiKSB7XG4gIGlmICh1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKGEpIHx8IHV0aWwuaXNOdWxsT3JVbmRlZmluZWQoYikpXG4gICAgcmV0dXJuIGZhbHNlO1xuICAvLyBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuXG4gIGlmIChhLnByb3RvdHlwZSAhPT0gYi5wcm90b3R5cGUpIHJldHVybiBmYWxzZTtcbiAgLy8gaWYgb25lIGlzIGEgcHJpbWl0aXZlLCB0aGUgb3RoZXIgbXVzdCBiZSBzYW1lXG4gIGlmICh1dGlsLmlzUHJpbWl0aXZlKGEpIHx8IHV0aWwuaXNQcmltaXRpdmUoYikpIHtcbiAgICByZXR1cm4gYSA9PT0gYjtcbiAgfVxuICB2YXIgYUlzQXJncyA9IGlzQXJndW1lbnRzKGEpLFxuICAgICAgYklzQXJncyA9IGlzQXJndW1lbnRzKGIpO1xuICBpZiAoKGFJc0FyZ3MgJiYgIWJJc0FyZ3MpIHx8ICghYUlzQXJncyAmJiBiSXNBcmdzKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmIChhSXNBcmdzKSB7XG4gICAgYSA9IHBTbGljZS5jYWxsKGEpO1xuICAgIGIgPSBwU2xpY2UuY2FsbChiKTtcbiAgICByZXR1cm4gX2RlZXBFcXVhbChhLCBiKTtcbiAgfVxuICB2YXIga2EgPSBvYmplY3RLZXlzKGEpLFxuICAgICAga2IgPSBvYmplY3RLZXlzKGIpLFxuICAgICAga2V5LCBpO1xuICAvLyBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGtleXMgaW5jb3Jwb3JhdGVzXG4gIC8vIGhhc093blByb3BlcnR5KVxuICBpZiAoa2EubGVuZ3RoICE9IGtiLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vdGhlIHNhbWUgc2V0IG9mIGtleXMgKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksXG4gIGthLnNvcnQoKTtcbiAga2Iuc29ydCgpO1xuICAvL35+fmNoZWFwIGtleSB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGthW2ldICE9IGtiW2ldKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LCBhbmRcbiAgLy9+fn5wb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAga2V5ID0ga2FbaV07XG4gICAgaWYgKCFfZGVlcEVxdWFsKGFba2V5XSwgYltrZXldKSkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyA4LiBUaGUgbm9uLWVxdWl2YWxlbmNlIGFzc2VydGlvbiB0ZXN0cyBmb3IgYW55IGRlZXAgaW5lcXVhbGl0eS5cbi8vIGFzc2VydC5ub3REZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQubm90RGVlcEVxdWFsID0gZnVuY3Rpb24gbm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKF9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdub3REZWVwRXF1YWwnLCBhc3NlcnQubm90RGVlcEVxdWFsKTtcbiAgfVxufTtcblxuLy8gOS4gVGhlIHN0cmljdCBlcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgc3RyaWN0IGVxdWFsaXR5LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbi8vIGFzc2VydC5zdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5zdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIHN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICc9PT0nLCBhc3NlcnQuc3RyaWN0RXF1YWwpO1xuICB9XG59O1xuXG4vLyAxMC4gVGhlIHN0cmljdCBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciBzdHJpY3QgaW5lcXVhbGl0eSwgYXNcbi8vIGRldGVybWluZWQgYnkgIT09LiAgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0Lm5vdFN0cmljdEVxdWFsID0gZnVuY3Rpb24gbm90U3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJyE9PScsIGFzc2VydC5ub3RTdHJpY3RFcXVhbCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpIHtcbiAgaWYgKCFhY3R1YWwgfHwgIWV4cGVjdGVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChleHBlY3RlZCkgPT0gJ1tvYmplY3QgUmVnRXhwXScpIHtcbiAgICByZXR1cm4gZXhwZWN0ZWQudGVzdChhY3R1YWwpO1xuICB9IGVsc2UgaWYgKGFjdHVhbCBpbnN0YW5jZW9mIGV4cGVjdGVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWQuY2FsbCh7fSwgYWN0dWFsKSA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBfdGhyb3dzKHNob3VsZFRocm93LCBibG9jaywgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgdmFyIGFjdHVhbDtcblxuICBpZiAodXRpbC5pc1N0cmluZyhleHBlY3RlZCkpIHtcbiAgICBtZXNzYWdlID0gZXhwZWN0ZWQ7XG4gICAgZXhwZWN0ZWQgPSBudWxsO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBibG9jaygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgYWN0dWFsID0gZTtcbiAgfVxuXG4gIG1lc3NhZ2UgPSAoZXhwZWN0ZWQgJiYgZXhwZWN0ZWQubmFtZSA/ICcgKCcgKyBleHBlY3RlZC5uYW1lICsgJykuJyA6ICcuJykgK1xuICAgICAgICAgICAgKG1lc3NhZ2UgPyAnICcgKyBtZXNzYWdlIDogJy4nKTtcblxuICBpZiAoc2hvdWxkVGhyb3cgJiYgIWFjdHVhbCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgJ01pc3NpbmcgZXhwZWN0ZWQgZXhjZXB0aW9uJyArIG1lc3NhZ2UpO1xuICB9XG5cbiAgaWYgKCFzaG91bGRUaHJvdyAmJiBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgJ0dvdCB1bndhbnRlZCBleGNlcHRpb24nICsgbWVzc2FnZSk7XG4gIH1cblxuICBpZiAoKHNob3VsZFRocm93ICYmIGFjdHVhbCAmJiBleHBlY3RlZCAmJlxuICAgICAgIWV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpKSB8fCAoIXNob3VsZFRocm93ICYmIGFjdHVhbCkpIHtcbiAgICB0aHJvdyBhY3R1YWw7XG4gIH1cbn1cblxuLy8gMTEuIEV4cGVjdGVkIHRvIHRocm93IGFuIGVycm9yOlxuLy8gYXNzZXJ0LnRocm93cyhibG9jaywgRXJyb3Jfb3B0LCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC50aHJvd3MgPSBmdW5jdGlvbihibG9jaywgLypvcHRpb25hbCovZXJyb3IsIC8qb3B0aW9uYWwqL21lc3NhZ2UpIHtcbiAgX3Rocm93cy5hcHBseSh0aGlzLCBbdHJ1ZV0uY29uY2F0KHBTbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbn07XG5cbi8vIEVYVEVOU0lPTiEgVGhpcyBpcyBhbm5veWluZyB0byB3cml0ZSBvdXRzaWRlIHRoaXMgbW9kdWxlLlxuYXNzZXJ0LmRvZXNOb3RUaHJvdyA9IGZ1bmN0aW9uKGJsb2NrLCAvKm9wdGlvbmFsKi9tZXNzYWdlKSB7XG4gIF90aHJvd3MuYXBwbHkodGhpcywgW2ZhbHNlXS5jb25jYXQocFNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xufTtcblxuYXNzZXJ0LmlmRXJyb3IgPSBmdW5jdGlvbihlcnIpIHsgaWYgKGVycikge3Rocm93IGVycjt9fTtcblxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoaGFzT3duLmNhbGwob2JqLCBrZXkpKSBrZXlzLnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn07XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqICh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vYXNzZXJ0L2Fzc2VydC5qc1xuICoqIG1vZHVsZSBpZCA9IDlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZztcbmV4cG9ydHMuZm9ybWF0ID0gZnVuY3Rpb24oZikge1xuICBpZiAoIWlzU3RyaW5nKGYpKSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgb2JqZWN0cy5wdXNoKGluc3BlY3QoYXJndW1lbnRzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHZhciBpID0gMTtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgdmFyIHN0ciA9IFN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24oeCkge1xuICAgIGlmICh4ID09PSAnJSUnKSByZXR1cm4gJyUnO1xuICAgIGlmIChpID49IGxlbikgcmV0dXJuIHg7XG4gICAgc3dpdGNoICh4KSB7XG4gICAgICBjYXNlICclcyc6IHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVkJzogcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWonOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmdzW2krK10pO1xuICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICB9KTtcbiAgZm9yICh2YXIgeCA9IGFyZ3NbaV07IGkgPCBsZW47IHggPSBhcmdzWysraV0pIHtcbiAgICBpZiAoaXNOdWxsKHgpIHx8ICFpc09iamVjdCh4KSkge1xuICAgICAgc3RyICs9ICcgJyArIHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnICcgKyBpbnNwZWN0KHgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuXG4vLyBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuLy8gUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbi8vIElmIC0tbm8tZGVwcmVjYXRpb24gaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG5leHBvcnRzLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKGZuLCBtc2cpIHtcbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKGlzVW5kZWZpbmVkKGdsb2JhbC5wcm9jZXNzKSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn07XG5cblxudmFyIGRlYnVncyA9IHt9O1xudmFyIGRlYnVnRW52aXJvbjtcbmV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpXG4gICAgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJztcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAobmV3IFJlZ0V4cCgnXFxcXGInICsgc2V0ICsgJ1xcXFxiJywgJ2knKS50ZXN0KGRlYnVnRW52aXJvbikpIHtcbiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtc2cgPSBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZnVuY3Rpb24gaXNBcnJheShhcikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gaXNPYmplY3QoZSkgJiZcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IHJlcXVpcmUoJy4vc3VwcG9ydC9pc0J1ZmZlcicpO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cblxuZnVuY3Rpb24gcGFkKG4pIHtcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XG59XG5cblxudmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLFxuICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTtcblxuLy8gMjYgRmViIDE2OjE5OjM0XG5mdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG4gIHZhciBkID0gbmV3IERhdGUoKTtcbiAgdmFyIHRpbWUgPSBbcGFkKGQuZ2V0SG91cnMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcbiAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTtcbn1cblxuXG4vLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCgpLCBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpKTtcbn07XG5cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXG4gKlxuICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZVxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXG4gKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZVxuICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlXG4gKiAgICAgcHJvdG90eXBlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uXG4gKi9cbmV4cG9ydHMuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5leHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luO1xufTtcblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi91dGlsL3V0aWwuanNcbiAqKiBtb2R1bGUgaWQgPSAxMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZHJhaW5RdWV1ZSwgMCk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqICh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vcHJvY2Vzcy9icm93c2VyLmpzXG4gKiogbW9kdWxlIGlkID0gMTFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7XG4gIHJldHVybiBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCdcbiAgICAmJiB0eXBlb2YgYXJnLmNvcHkgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLmZpbGwgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLnJlYWRVSW50OCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqICh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qc1xuICoqIG1vZHVsZSBpZCA9IDEyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi91dGlsL34vaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qc1xuICoqIG1vZHVsZSBpZCA9IDEzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgQmlnSW50ZWdlciA9IHJlcXVpcmUoJy4vYmlnaScpXG5cbi8vYWRkb25zXG5yZXF1aXJlKCcuL2NvbnZlcnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpZ0ludGVnZXJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL2RsL34vYmlnaS9saWIvaW5kZXguanNcbiAqKiBtb2R1bGUgaWQgPSAxNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpXG5cbm1vZHVsZS5leHBvcnRzID0gQmlnSW50ZWdlclxuXG4vLyBKYXZhU2NyaXB0IGVuZ2luZSBhbmFseXNpc1xudmFyIGNhbmFyeSA9IDB4ZGVhZGJlZWZjYWZlO1xudmFyIGpfbG0gPSAoKGNhbmFyeSYweGZmZmZmZik9PTB4ZWZjYWZlKTtcblxuLy8gKHB1YmxpYykgQ29uc3RydWN0b3JcbmZ1bmN0aW9uIEJpZ0ludGVnZXIoYSxiLGMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEJpZ0ludGVnZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGEsIGIsIGMpO1xuICB9XG5cbiAgaWYoYSAhPSBudWxsKSB7XG4gICAgaWYoXCJudW1iZXJcIiA9PSB0eXBlb2YgYSkgdGhpcy5mcm9tTnVtYmVyKGEsYixjKTtcbiAgICBlbHNlIGlmKGIgPT0gbnVsbCAmJiBcInN0cmluZ1wiICE9IHR5cGVvZiBhKSB0aGlzLmZyb21TdHJpbmcoYSwyNTYpO1xuICAgIGVsc2UgdGhpcy5mcm9tU3RyaW5nKGEsYik7XG4gIH1cbn1cblxudmFyIHByb3RvID0gQmlnSW50ZWdlci5wcm90b3R5cGU7XG5cbi8vIHJldHVybiBuZXcsIHVuc2V0IEJpZ0ludGVnZXJcbmZ1bmN0aW9uIG5iaSgpIHsgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKG51bGwpOyB9XG5cbi8vIEJpdHMgcGVyIGRpZ2l0XG52YXIgZGJpdHM7XG5cbi8vIGFtOiBDb21wdXRlIHdfaiArPSAoeCp0aGlzX2kpLCBwcm9wYWdhdGUgY2Fycmllcyxcbi8vIGMgaXMgaW5pdGlhbCBjYXJyeSwgcmV0dXJucyBmaW5hbCBjYXJyeS5cbi8vIGMgPCAzKmR2YWx1ZSwgeCA8IDIqZHZhbHVlLCB0aGlzX2kgPCBkdmFsdWVcbi8vIFdlIG5lZWQgdG8gc2VsZWN0IHRoZSBmYXN0ZXN0IG9uZSB0aGF0IHdvcmtzIGluIHRoaXMgZW52aXJvbm1lbnQuXG5cbi8vIGFtMTogdXNlIGEgc2luZ2xlIG11bHQgYW5kIGRpdmlkZSB0byBnZXQgdGhlIGhpZ2ggYml0cyxcbi8vIG1heCBkaWdpdCBiaXRzIHNob3VsZCBiZSAyNiBiZWNhdXNlXG4vLyBtYXggaW50ZXJuYWwgdmFsdWUgPSAyKmR2YWx1ZV4yLTIqZHZhbHVlICg8IDJeNTMpXG5mdW5jdGlvbiBhbTEoaSx4LHcsaixjLG4pIHtcbiAgd2hpbGUoLS1uID49IDApIHtcbiAgICB2YXIgdiA9IHgqdGhpc1tpKytdK3dbal0rYztcbiAgICBjID0gTWF0aC5mbG9vcih2LzB4NDAwMDAwMCk7XG4gICAgd1tqKytdID0gdiYweDNmZmZmZmY7XG4gIH1cbiAgcmV0dXJuIGM7XG59XG4vLyBhbTIgYXZvaWRzIGEgYmlnIG11bHQtYW5kLWV4dHJhY3QgY29tcGxldGVseS5cbi8vIE1heCBkaWdpdCBiaXRzIHNob3VsZCBiZSA8PSAzMCBiZWNhdXNlIHdlIGRvIGJpdHdpc2Ugb3BzXG4vLyBvbiB2YWx1ZXMgdXAgdG8gMipoZHZhbHVlXjItaGR2YWx1ZS0xICg8IDJeMzEpXG5mdW5jdGlvbiBhbTIoaSx4LHcsaixjLG4pIHtcbiAgdmFyIHhsID0geCYweDdmZmYsIHhoID0geD4+MTU7XG4gIHdoaWxlKC0tbiA+PSAwKSB7XG4gICAgdmFyIGwgPSB0aGlzW2ldJjB4N2ZmZjtcbiAgICB2YXIgaCA9IHRoaXNbaSsrXT4+MTU7XG4gICAgdmFyIG0gPSB4aCpsK2gqeGw7XG4gICAgbCA9IHhsKmwrKChtJjB4N2ZmZik8PDE1KSt3W2pdKyhjJjB4M2ZmZmZmZmYpO1xuICAgIGMgPSAobD4+PjMwKSsobT4+PjE1KSt4aCpoKyhjPj4+MzApO1xuICAgIHdbaisrXSA9IGwmMHgzZmZmZmZmZjtcbiAgfVxuICByZXR1cm4gYztcbn1cbi8vIEFsdGVybmF0ZWx5LCBzZXQgbWF4IGRpZ2l0IGJpdHMgdG8gMjggc2luY2Ugc29tZVxuLy8gYnJvd3NlcnMgc2xvdyBkb3duIHdoZW4gZGVhbGluZyB3aXRoIDMyLWJpdCBudW1iZXJzLlxuZnVuY3Rpb24gYW0zKGkseCx3LGosYyxuKSB7XG4gIHZhciB4bCA9IHgmMHgzZmZmLCB4aCA9IHg+PjE0O1xuICB3aGlsZSgtLW4gPj0gMCkge1xuICAgIHZhciBsID0gdGhpc1tpXSYweDNmZmY7XG4gICAgdmFyIGggPSB0aGlzW2krK10+PjE0O1xuICAgIHZhciBtID0geGgqbCtoKnhsO1xuICAgIGwgPSB4bCpsKygobSYweDNmZmYpPDwxNCkrd1tqXStjO1xuICAgIGMgPSAobD4+MjgpKyhtPj4xNCkreGgqaDtcbiAgICB3W2orK10gPSBsJjB4ZmZmZmZmZjtcbiAgfVxuICByZXR1cm4gYztcbn1cblxuLy8gd3RmP1xuQmlnSW50ZWdlci5wcm90b3R5cGUuYW0gPSBhbTE7XG5kYml0cyA9IDI2O1xuXG4vKlxuaWYoal9sbSAmJiAobmF2aWdhdG9yLmFwcE5hbWUgPT0gXCJNaWNyb3NvZnQgSW50ZXJuZXQgRXhwbG9yZXJcIikpIHtcbiAgQmlnSW50ZWdlci5wcm90b3R5cGUuYW0gPSBhbTI7XG4gIGRiaXRzID0gMzA7XG59XG5lbHNlIGlmKGpfbG0gJiYgKG5hdmlnYXRvci5hcHBOYW1lICE9IFwiTmV0c2NhcGVcIikpIHtcbiAgQmlnSW50ZWdlci5wcm90b3R5cGUuYW0gPSBhbTE7XG4gIGRiaXRzID0gMjY7XG59XG5lbHNlIHsgLy8gTW96aWxsYS9OZXRzY2FwZSBzZWVtcyB0byBwcmVmZXIgYW0zXG4gIEJpZ0ludGVnZXIucHJvdG90eXBlLmFtID0gYW0zO1xuICBkYml0cyA9IDI4O1xufVxuKi9cblxuQmlnSW50ZWdlci5wcm90b3R5cGUuREIgPSBkYml0cztcbkJpZ0ludGVnZXIucHJvdG90eXBlLkRNID0gKCgxPDxkYml0cyktMSk7XG52YXIgRFYgPSBCaWdJbnRlZ2VyLnByb3RvdHlwZS5EViA9ICgxPDxkYml0cyk7XG5cbnZhciBCSV9GUCA9IDUyO1xuQmlnSW50ZWdlci5wcm90b3R5cGUuRlYgPSBNYXRoLnBvdygyLEJJX0ZQKTtcbkJpZ0ludGVnZXIucHJvdG90eXBlLkYxID0gQklfRlAtZGJpdHM7XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5GMiA9IDIqZGJpdHMtQklfRlA7XG5cbi8vIERpZ2l0IGNvbnZlcnNpb25zXG52YXIgQklfUk0gPSBcIjAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiO1xudmFyIEJJX1JDID0gbmV3IEFycmF5KCk7XG52YXIgcnIsdnY7XG5yciA9IFwiMFwiLmNoYXJDb2RlQXQoMCk7XG5mb3IodnYgPSAwOyB2diA8PSA5OyArK3Z2KSBCSV9SQ1tycisrXSA9IHZ2O1xucnIgPSBcImFcIi5jaGFyQ29kZUF0KDApO1xuZm9yKHZ2ID0gMTA7IHZ2IDwgMzY7ICsrdnYpIEJJX1JDW3JyKytdID0gdnY7XG5yciA9IFwiQVwiLmNoYXJDb2RlQXQoMCk7XG5mb3IodnYgPSAxMDsgdnYgPCAzNjsgKyt2dikgQklfUkNbcnIrK10gPSB2djtcblxuZnVuY3Rpb24gaW50MmNoYXIobikgeyByZXR1cm4gQklfUk0uY2hhckF0KG4pOyB9XG5mdW5jdGlvbiBpbnRBdChzLGkpIHtcbiAgdmFyIGMgPSBCSV9SQ1tzLmNoYXJDb2RlQXQoaSldO1xuICByZXR1cm4gKGM9PW51bGwpPy0xOmM7XG59XG5cbi8vIChwcm90ZWN0ZWQpIGNvcHkgdGhpcyB0byByXG5mdW5jdGlvbiBibnBDb3B5VG8ocikge1xuICBmb3IodmFyIGkgPSB0aGlzLnQtMTsgaSA+PSAwOyAtLWkpIHJbaV0gPSB0aGlzW2ldO1xuICByLnQgPSB0aGlzLnQ7XG4gIHIucyA9IHRoaXMucztcbn1cblxuLy8gKHByb3RlY3RlZCkgc2V0IGZyb20gaW50ZWdlciB2YWx1ZSB4LCAtRFYgPD0geCA8IERWXG5mdW5jdGlvbiBibnBGcm9tSW50KHgpIHtcbiAgdGhpcy50ID0gMTtcbiAgdGhpcy5zID0gKHg8MCk/LTE6MDtcbiAgaWYoeCA+IDApIHRoaXNbMF0gPSB4O1xuICBlbHNlIGlmKHggPCAtMSkgdGhpc1swXSA9IHgrRFY7XG4gIGVsc2UgdGhpcy50ID0gMDtcbn1cblxuLy8gcmV0dXJuIGJpZ2ludCBpbml0aWFsaXplZCB0byB2YWx1ZVxuZnVuY3Rpb24gbmJ2KGkpIHsgdmFyIHIgPSBuYmkoKTsgci5mcm9tSW50KGkpOyByZXR1cm4gcjsgfVxuXG4vLyAocHJvdGVjdGVkKSBzZXQgZnJvbSBzdHJpbmcgYW5kIHJhZGl4XG5mdW5jdGlvbiBibnBGcm9tU3RyaW5nKHMsYikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdmFyIGs7XG4gIGlmKGIgPT0gMTYpIGsgPSA0O1xuICBlbHNlIGlmKGIgPT0gOCkgayA9IDM7XG4gIGVsc2UgaWYoYiA9PSAyNTYpIGsgPSA4OyAvLyBieXRlIGFycmF5XG4gIGVsc2UgaWYoYiA9PSAyKSBrID0gMTtcbiAgZWxzZSBpZihiID09IDMyKSBrID0gNTtcbiAgZWxzZSBpZihiID09IDQpIGsgPSAyO1xuICBlbHNlIHsgc2VsZi5mcm9tUmFkaXgocyxiKTsgcmV0dXJuOyB9XG4gIHNlbGYudCA9IDA7XG4gIHNlbGYucyA9IDA7XG4gIHZhciBpID0gcy5sZW5ndGgsIG1pID0gZmFsc2UsIHNoID0gMDtcbiAgd2hpbGUoLS1pID49IDApIHtcbiAgICB2YXIgeCA9IChrPT04KT9zW2ldJjB4ZmY6aW50QXQocyxpKTtcbiAgICBpZih4IDwgMCkge1xuICAgICAgaWYocy5jaGFyQXQoaSkgPT0gXCItXCIpIG1pID0gdHJ1ZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBtaSA9IGZhbHNlO1xuICAgIGlmKHNoID09IDApXG4gICAgICBzZWxmW3NlbGYudCsrXSA9IHg7XG4gICAgZWxzZSBpZihzaCtrID4gc2VsZi5EQikge1xuICAgICAgc2VsZltzZWxmLnQtMV0gfD0gKHgmKCgxPDwoc2VsZi5EQi1zaCkpLTEpKTw8c2g7XG4gICAgICBzZWxmW3NlbGYudCsrXSA9ICh4Pj4oc2VsZi5EQi1zaCkpO1xuICAgIH1cbiAgICBlbHNlXG4gICAgICBzZWxmW3NlbGYudC0xXSB8PSB4PDxzaDtcbiAgICBzaCArPSBrO1xuICAgIGlmKHNoID49IHNlbGYuREIpIHNoIC09IHNlbGYuREI7XG4gIH1cbiAgaWYoayA9PSA4ICYmIChzWzBdJjB4ODApICE9IDApIHtcbiAgICBzZWxmLnMgPSAtMTtcbiAgICBpZihzaCA+IDApIHNlbGZbc2VsZi50LTFdIHw9ICgoMTw8KHNlbGYuREItc2gpKS0xKTw8c2g7XG4gIH1cbiAgc2VsZi5jbGFtcCgpO1xuICBpZihtaSkgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHNlbGYsc2VsZik7XG59XG5cbi8vIChwcm90ZWN0ZWQpIGNsYW1wIG9mZiBleGNlc3MgaGlnaCB3b3Jkc1xuZnVuY3Rpb24gYm5wQ2xhbXAoKSB7XG4gIHZhciBjID0gdGhpcy5zJnRoaXMuRE07XG4gIHdoaWxlKHRoaXMudCA+IDAgJiYgdGhpc1t0aGlzLnQtMV0gPT0gYykgLS10aGlzLnQ7XG59XG5cbi8vIChwdWJsaWMpIHJldHVybiBzdHJpbmcgcmVwcmVzZW50YXRpb24gaW4gZ2l2ZW4gcmFkaXhcbmZ1bmN0aW9uIGJuVG9TdHJpbmcoYikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGlmKHNlbGYucyA8IDApIHJldHVybiBcIi1cIitzZWxmLm5lZ2F0ZSgpLnRvU3RyaW5nKGIpO1xuICB2YXIgaztcbiAgaWYoYiA9PSAxNikgayA9IDQ7XG4gIGVsc2UgaWYoYiA9PSA4KSBrID0gMztcbiAgZWxzZSBpZihiID09IDIpIGsgPSAxO1xuICBlbHNlIGlmKGIgPT0gMzIpIGsgPSA1O1xuICBlbHNlIGlmKGIgPT0gNCkgayA9IDI7XG4gIGVsc2UgcmV0dXJuIHNlbGYudG9SYWRpeChiKTtcbiAgdmFyIGttID0gKDE8PGspLTEsIGQsIG0gPSBmYWxzZSwgciA9IFwiXCIsIGkgPSBzZWxmLnQ7XG4gIHZhciBwID0gc2VsZi5EQi0oaSpzZWxmLkRCKSVrO1xuICBpZihpLS0gPiAwKSB7XG4gICAgaWYocCA8IHNlbGYuREIgJiYgKGQgPSBzZWxmW2ldPj5wKSA+IDApIHsgbSA9IHRydWU7IHIgPSBpbnQyY2hhcihkKTsgfVxuICAgIHdoaWxlKGkgPj0gMCkge1xuICAgICAgaWYocCA8IGspIHtcbiAgICAgICAgZCA9IChzZWxmW2ldJigoMTw8cCktMSkpPDwoay1wKTtcbiAgICAgICAgZCB8PSBzZWxmWy0taV0+PihwKz1zZWxmLkRCLWspO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGQgPSAoc2VsZltpXT4+KHAtPWspKSZrbTtcbiAgICAgICAgaWYocCA8PSAwKSB7IHAgKz0gc2VsZi5EQjsgLS1pOyB9XG4gICAgICB9XG4gICAgICBpZihkID4gMCkgbSA9IHRydWU7XG4gICAgICBpZihtKSByICs9IGludDJjaGFyKGQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbT9yOlwiMFwiO1xufVxuXG4vLyAocHVibGljKSAtdGhpc1xuZnVuY3Rpb24gYm5OZWdhdGUoKSB7IHZhciByID0gbmJpKCk7IEJpZ0ludGVnZXIuWkVSTy5zdWJUbyh0aGlzLHIpOyByZXR1cm4gcjsgfVxuXG4vLyAocHVibGljKSB8dGhpc3xcbmZ1bmN0aW9uIGJuQWJzKCkgeyByZXR1cm4gKHRoaXMuczwwKT90aGlzLm5lZ2F0ZSgpOnRoaXM7IH1cblxuLy8gKHB1YmxpYykgcmV0dXJuICsgaWYgdGhpcyA+IGEsIC0gaWYgdGhpcyA8IGEsIDAgaWYgZXF1YWxcbmZ1bmN0aW9uIGJuQ29tcGFyZVRvKGEpIHtcbiAgdmFyIHIgPSB0aGlzLnMtYS5zO1xuICBpZihyICE9IDApIHJldHVybiByO1xuICB2YXIgaSA9IHRoaXMudDtcbiAgciA9IGktYS50O1xuICBpZihyICE9IDApIHJldHVybiAodGhpcy5zPDApPy1yOnI7XG4gIHdoaWxlKC0taSA+PSAwKSBpZigocj10aGlzW2ldLWFbaV0pICE9IDApIHJldHVybiByO1xuICByZXR1cm4gMDtcbn1cblxuLy8gcmV0dXJucyBiaXQgbGVuZ3RoIG9mIHRoZSBpbnRlZ2VyIHhcbmZ1bmN0aW9uIG5iaXRzKHgpIHtcbiAgdmFyIHIgPSAxLCB0O1xuICBpZigodD14Pj4+MTYpICE9IDApIHsgeCA9IHQ7IHIgKz0gMTY7IH1cbiAgaWYoKHQ9eD4+OCkgIT0gMCkgeyB4ID0gdDsgciArPSA4OyB9XG4gIGlmKCh0PXg+PjQpICE9IDApIHsgeCA9IHQ7IHIgKz0gNDsgfVxuICBpZigodD14Pj4yKSAhPSAwKSB7IHggPSB0OyByICs9IDI7IH1cbiAgaWYoKHQ9eD4+MSkgIT0gMCkgeyB4ID0gdDsgciArPSAxOyB9XG4gIHJldHVybiByO1xufVxuXG4vLyAocHVibGljKSByZXR1cm4gdGhlIG51bWJlciBvZiBiaXRzIGluIFwidGhpc1wiXG5mdW5jdGlvbiBibkJpdExlbmd0aCgpIHtcbiAgaWYodGhpcy50IDw9IDApIHJldHVybiAwO1xuICByZXR1cm4gdGhpcy5EQioodGhpcy50LTEpK25iaXRzKHRoaXNbdGhpcy50LTFdXih0aGlzLnMmdGhpcy5ETSkpO1xufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyA8PCBuKkRCXG5mdW5jdGlvbiBibnBETFNoaWZ0VG8obixyKSB7XG4gIHZhciBpO1xuICBmb3IoaSA9IHRoaXMudC0xOyBpID49IDA7IC0taSkgcltpK25dID0gdGhpc1tpXTtcbiAgZm9yKGkgPSBuLTE7IGkgPj0gMDsgLS1pKSByW2ldID0gMDtcbiAgci50ID0gdGhpcy50K247XG4gIHIucyA9IHRoaXMucztcbn1cblxuLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgPj4gbipEQlxuZnVuY3Rpb24gYm5wRFJTaGlmdFRvKG4scikge1xuICBmb3IodmFyIGkgPSBuOyBpIDwgdGhpcy50OyArK2kpIHJbaS1uXSA9IHRoaXNbaV07XG4gIHIudCA9IE1hdGgubWF4KHRoaXMudC1uLDApO1xuICByLnMgPSB0aGlzLnM7XG59XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzIDw8IG5cbmZ1bmN0aW9uIGJucExTaGlmdFRvKG4scikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBicyA9IG4lc2VsZi5EQjtcbiAgdmFyIGNicyA9IHNlbGYuREItYnM7XG4gIHZhciBibSA9ICgxPDxjYnMpLTE7XG4gIHZhciBkcyA9IE1hdGguZmxvb3Iobi9zZWxmLkRCKSwgYyA9IChzZWxmLnM8PGJzKSZzZWxmLkRNLCBpO1xuICBmb3IoaSA9IHNlbGYudC0xOyBpID49IDA7IC0taSkge1xuICAgIHJbaStkcysxXSA9IChzZWxmW2ldPj5jYnMpfGM7XG4gICAgYyA9IChzZWxmW2ldJmJtKTw8YnM7XG4gIH1cbiAgZm9yKGkgPSBkcy0xOyBpID49IDA7IC0taSkgcltpXSA9IDA7XG4gIHJbZHNdID0gYztcbiAgci50ID0gc2VsZi50K2RzKzE7XG4gIHIucyA9IHNlbGYucztcbiAgci5jbGFtcCgpO1xufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyA+PiBuXG5mdW5jdGlvbiBibnBSU2hpZnRUbyhuLHIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByLnMgPSBzZWxmLnM7XG4gIHZhciBkcyA9IE1hdGguZmxvb3Iobi9zZWxmLkRCKTtcbiAgaWYoZHMgPj0gc2VsZi50KSB7IHIudCA9IDA7IHJldHVybjsgfVxuICB2YXIgYnMgPSBuJXNlbGYuREI7XG4gIHZhciBjYnMgPSBzZWxmLkRCLWJzO1xuICB2YXIgYm0gPSAoMTw8YnMpLTE7XG4gIHJbMF0gPSBzZWxmW2RzXT4+YnM7XG4gIGZvcih2YXIgaSA9IGRzKzE7IGkgPCBzZWxmLnQ7ICsraSkge1xuICAgIHJbaS1kcy0xXSB8PSAoc2VsZltpXSZibSk8PGNicztcbiAgICByW2ktZHNdID0gc2VsZltpXT4+YnM7XG4gIH1cbiAgaWYoYnMgPiAwKSByW3NlbGYudC1kcy0xXSB8PSAoc2VsZi5zJmJtKTw8Y2JzO1xuICByLnQgPSBzZWxmLnQtZHM7XG4gIHIuY2xhbXAoKTtcbn1cblxuLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgLSBhXG5mdW5jdGlvbiBibnBTdWJUbyhhLHIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgaSA9IDAsIGMgPSAwLCBtID0gTWF0aC5taW4oYS50LHNlbGYudCk7XG4gIHdoaWxlKGkgPCBtKSB7XG4gICAgYyArPSBzZWxmW2ldLWFbaV07XG4gICAgcltpKytdID0gYyZzZWxmLkRNO1xuICAgIGMgPj49IHNlbGYuREI7XG4gIH1cbiAgaWYoYS50IDwgc2VsZi50KSB7XG4gICAgYyAtPSBhLnM7XG4gICAgd2hpbGUoaSA8IHNlbGYudCkge1xuICAgICAgYyArPSBzZWxmW2ldO1xuICAgICAgcltpKytdID0gYyZzZWxmLkRNO1xuICAgICAgYyA+Pj0gc2VsZi5EQjtcbiAgICB9XG4gICAgYyArPSBzZWxmLnM7XG4gIH1cbiAgZWxzZSB7XG4gICAgYyArPSBzZWxmLnM7XG4gICAgd2hpbGUoaSA8IGEudCkge1xuICAgICAgYyAtPSBhW2ldO1xuICAgICAgcltpKytdID0gYyZzZWxmLkRNO1xuICAgICAgYyA+Pj0gc2VsZi5EQjtcbiAgICB9XG4gICAgYyAtPSBhLnM7XG4gIH1cbiAgci5zID0gKGM8MCk/LTE6MDtcbiAgaWYoYyA8IC0xKSByW2krK10gPSBzZWxmLkRWK2M7XG4gIGVsc2UgaWYoYyA+IDApIHJbaSsrXSA9IGM7XG4gIHIudCA9IGk7XG4gIHIuY2xhbXAoKTtcbn1cblxuLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgKiBhLCByICE9IHRoaXMsYSAoSEFDIDE0LjEyKVxuLy8gXCJ0aGlzXCIgc2hvdWxkIGJlIHRoZSBsYXJnZXIgb25lIGlmIGFwcHJvcHJpYXRlLlxuZnVuY3Rpb24gYm5wTXVsdGlwbHlUbyhhLHIpIHtcbiAgdmFyIHggPSB0aGlzLmFicygpLCB5ID0gYS5hYnMoKTtcbiAgdmFyIGkgPSB4LnQ7XG4gIHIudCA9IGkreS50O1xuICB3aGlsZSgtLWkgPj0gMCkgcltpXSA9IDA7XG4gIGZvcihpID0gMDsgaSA8IHkudDsgKytpKSByW2kreC50XSA9IHguYW0oMCx5W2ldLHIsaSwwLHgudCk7XG4gIHIucyA9IDA7XG4gIHIuY2xhbXAoKTtcbiAgaWYodGhpcy5zICE9IGEucykgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHIscik7XG59XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzXjIsIHIgIT0gdGhpcyAoSEFDIDE0LjE2KVxuZnVuY3Rpb24gYm5wU3F1YXJlVG8ocikge1xuICB2YXIgeCA9IHRoaXMuYWJzKCk7XG4gIHZhciBpID0gci50ID0gMip4LnQ7XG4gIHdoaWxlKC0taSA+PSAwKSByW2ldID0gMDtcbiAgZm9yKGkgPSAwOyBpIDwgeC50LTE7ICsraSkge1xuICAgIHZhciBjID0geC5hbShpLHhbaV0sciwyKmksMCwxKTtcbiAgICBpZigocltpK3gudF0rPXguYW0oaSsxLDIqeFtpXSxyLDIqaSsxLGMseC50LWktMSkpID49IHguRFYpIHtcbiAgICAgIHJbaSt4LnRdIC09IHguRFY7XG4gICAgICByW2kreC50KzFdID0gMTtcbiAgICB9XG4gIH1cbiAgaWYoci50ID4gMCkgcltyLnQtMV0gKz0geC5hbShpLHhbaV0sciwyKmksMCwxKTtcbiAgci5zID0gMDtcbiAgci5jbGFtcCgpO1xufVxuXG4vLyAocHJvdGVjdGVkKSBkaXZpZGUgdGhpcyBieSBtLCBxdW90aWVudCBhbmQgcmVtYWluZGVyIHRvIHEsIHIgKEhBQyAxNC4yMClcbi8vIHIgIT0gcSwgdGhpcyAhPSBtLiAgcSBvciByIG1heSBiZSBudWxsLlxuZnVuY3Rpb24gYm5wRGl2UmVtVG8obSxxLHIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgcG0gPSBtLmFicygpO1xuICBpZihwbS50IDw9IDApIHJldHVybjtcbiAgdmFyIHB0ID0gc2VsZi5hYnMoKTtcbiAgaWYocHQudCA8IHBtLnQpIHtcbiAgICBpZihxICE9IG51bGwpIHEuZnJvbUludCgwKTtcbiAgICBpZihyICE9IG51bGwpIHNlbGYuY29weVRvKHIpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZihyID09IG51bGwpIHIgPSBuYmkoKTtcbiAgdmFyIHkgPSBuYmkoKSwgdHMgPSBzZWxmLnMsIG1zID0gbS5zO1xuICB2YXIgbnNoID0gc2VsZi5EQi1uYml0cyhwbVtwbS50LTFdKTsgIC8vIG5vcm1hbGl6ZSBtb2R1bHVzXG4gIGlmKG5zaCA+IDApIHsgcG0ubFNoaWZ0VG8obnNoLHkpOyBwdC5sU2hpZnRUbyhuc2gscik7IH1cbiAgZWxzZSB7IHBtLmNvcHlUbyh5KTsgcHQuY29weVRvKHIpOyB9XG4gIHZhciB5cyA9IHkudDtcbiAgdmFyIHkwID0geVt5cy0xXTtcbiAgaWYoeTAgPT0gMCkgcmV0dXJuO1xuICB2YXIgeXQgPSB5MCooMTw8c2VsZi5GMSkrKCh5cz4xKT95W3lzLTJdPj5zZWxmLkYyOjApO1xuICB2YXIgZDEgPSBzZWxmLkZWL3l0LCBkMiA9ICgxPDxzZWxmLkYxKS95dCwgZSA9IDE8PHNlbGYuRjI7XG4gIHZhciBpID0gci50LCBqID0gaS15cywgdCA9IChxPT1udWxsKT9uYmkoKTpxO1xuICB5LmRsU2hpZnRUbyhqLHQpO1xuICBpZihyLmNvbXBhcmVUbyh0KSA+PSAwKSB7XG4gICAgcltyLnQrK10gPSAxO1xuICAgIHIuc3ViVG8odCxyKTtcbiAgfVxuICBCaWdJbnRlZ2VyLk9ORS5kbFNoaWZ0VG8oeXMsdCk7XG4gIHQuc3ViVG8oeSx5KTsgLy8gXCJuZWdhdGl2ZVwiIHkgc28gd2UgY2FuIHJlcGxhY2Ugc3ViIHdpdGggYW0gbGF0ZXJcbiAgd2hpbGUoeS50IDwgeXMpIHlbeS50KytdID0gMDtcbiAgd2hpbGUoLS1qID49IDApIHtcbiAgICAvLyBFc3RpbWF0ZSBxdW90aWVudCBkaWdpdFxuICAgIHZhciBxZCA9IChyWy0taV09PXkwKT9zZWxmLkRNOk1hdGguZmxvb3IocltpXSpkMSsocltpLTFdK2UpKmQyKTtcbiAgICBpZigocltpXSs9eS5hbSgwLHFkLHIsaiwwLHlzKSkgPCBxZCkgeyAgLy8gVHJ5IGl0IG91dFxuICAgICAgeS5kbFNoaWZ0VG8oaix0KTtcbiAgICAgIHIuc3ViVG8odCxyKTtcbiAgICAgIHdoaWxlKHJbaV0gPCAtLXFkKSByLnN1YlRvKHQscik7XG4gICAgfVxuICB9XG4gIGlmKHEgIT0gbnVsbCkge1xuICAgIHIuZHJTaGlmdFRvKHlzLHEpO1xuICAgIGlmKHRzICE9IG1zKSBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8ocSxxKTtcbiAgfVxuICByLnQgPSB5cztcbiAgci5jbGFtcCgpO1xuICBpZihuc2ggPiAwKSByLnJTaGlmdFRvKG5zaCxyKTsgICAgLy8gRGVub3JtYWxpemUgcmVtYWluZGVyXG4gIGlmKHRzIDwgMCkgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHIscik7XG59XG5cbi8vIChwdWJsaWMpIHRoaXMgbW9kIGFcbmZ1bmN0aW9uIGJuTW9kKGEpIHtcbiAgdmFyIHIgPSBuYmkoKTtcbiAgdGhpcy5hYnMoKS5kaXZSZW1UbyhhLG51bGwscik7XG4gIGlmKHRoaXMucyA8IDAgJiYgci5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKSA+IDApIGEuc3ViVG8ocixyKTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIE1vZHVsYXIgcmVkdWN0aW9uIHVzaW5nIFwiY2xhc3NpY1wiIGFsZ29yaXRobVxuZnVuY3Rpb24gQ2xhc3NpYyhtKSB7IHRoaXMubSA9IG07IH1cbmZ1bmN0aW9uIGNDb252ZXJ0KHgpIHtcbiAgaWYoeC5zIDwgMCB8fCB4LmNvbXBhcmVUbyh0aGlzLm0pID49IDApIHJldHVybiB4Lm1vZCh0aGlzLm0pO1xuICBlbHNlIHJldHVybiB4O1xufVxuZnVuY3Rpb24gY1JldmVydCh4KSB7IHJldHVybiB4OyB9XG5mdW5jdGlvbiBjUmVkdWNlKHgpIHsgeC5kaXZSZW1Ubyh0aGlzLm0sbnVsbCx4KTsgfVxuZnVuY3Rpb24gY011bFRvKHgseSxyKSB7IHgubXVsdGlwbHlUbyh5LHIpOyB0aGlzLnJlZHVjZShyKTsgfVxuZnVuY3Rpb24gY1NxclRvKHgscikgeyB4LnNxdWFyZVRvKHIpOyB0aGlzLnJlZHVjZShyKTsgfVxuXG5DbGFzc2ljLnByb3RvdHlwZS5jb252ZXJ0ID0gY0NvbnZlcnQ7XG5DbGFzc2ljLnByb3RvdHlwZS5yZXZlcnQgPSBjUmV2ZXJ0O1xuQ2xhc3NpYy5wcm90b3R5cGUucmVkdWNlID0gY1JlZHVjZTtcbkNsYXNzaWMucHJvdG90eXBlLm11bFRvID0gY011bFRvO1xuQ2xhc3NpYy5wcm90b3R5cGUuc3FyVG8gPSBjU3FyVG87XG5cbi8vIChwcm90ZWN0ZWQpIHJldHVybiBcIi0xL3RoaXMgJSAyXkRCXCI7IHVzZWZ1bCBmb3IgTW9udC4gcmVkdWN0aW9uXG4vLyBqdXN0aWZpY2F0aW9uOlxuLy8gICAgICAgICB4eSA9PSAxIChtb2QgbSlcbi8vICAgICAgICAgeHkgPSAgMStrbVxuLy8gICB4eSgyLXh5KSA9ICgxK2ttKSgxLWttKVxuLy8geFt5KDIteHkpXSA9IDEta14ybV4yXG4vLyB4W3koMi14eSldID09IDEgKG1vZCBtXjIpXG4vLyBpZiB5IGlzIDEveCBtb2QgbSwgdGhlbiB5KDIteHkpIGlzIDEveCBtb2QgbV4yXG4vLyBzaG91bGQgcmVkdWNlIHggYW5kIHkoMi14eSkgYnkgbV4yIGF0IGVhY2ggc3RlcCB0byBrZWVwIHNpemUgYm91bmRlZC5cbi8vIEpTIG11bHRpcGx5IFwib3ZlcmZsb3dzXCIgZGlmZmVyZW50bHkgZnJvbSBDL0MrKywgc28gY2FyZSBpcyBuZWVkZWQgaGVyZS5cbmZ1bmN0aW9uIGJucEludkRpZ2l0KCkge1xuICBpZih0aGlzLnQgPCAxKSByZXR1cm4gMDtcbiAgdmFyIHggPSB0aGlzWzBdO1xuICBpZigoeCYxKSA9PSAwKSByZXR1cm4gMDtcbiAgdmFyIHkgPSB4JjM7ICAgICAgLy8geSA9PSAxL3ggbW9kIDJeMlxuICB5ID0gKHkqKDItKHgmMHhmKSp5KSkmMHhmOyAgICAvLyB5ID09IDEveCBtb2QgMl40XG4gIHkgPSAoeSooMi0oeCYweGZmKSp5KSkmMHhmZjsgIC8vIHkgPT0gMS94IG1vZCAyXjhcbiAgeSA9ICh5KigyLSgoKHgmMHhmZmZmKSp5KSYweGZmZmYpKSkmMHhmZmZmOyAgIC8vIHkgPT0gMS94IG1vZCAyXjE2XG4gIC8vIGxhc3Qgc3RlcCAtIGNhbGN1bGF0ZSBpbnZlcnNlIG1vZCBEViBkaXJlY3RseTtcbiAgLy8gYXNzdW1lcyAxNiA8IERCIDw9IDMyIGFuZCBhc3N1bWVzIGFiaWxpdHkgdG8gaGFuZGxlIDQ4LWJpdCBpbnRzXG4gIHkgPSAoeSooMi14KnkldGhpcy5EVikpJXRoaXMuRFY7ICAgICAgLy8geSA9PSAxL3ggbW9kIDJeZGJpdHNcbiAgLy8gd2UgcmVhbGx5IHdhbnQgdGhlIG5lZ2F0aXZlIGludmVyc2UsIGFuZCAtRFYgPCB5IDwgRFZcbiAgcmV0dXJuICh5PjApP3RoaXMuRFYteToteTtcbn1cblxuLy8gTW9udGdvbWVyeSByZWR1Y3Rpb25cbmZ1bmN0aW9uIE1vbnRnb21lcnkobSkge1xuICB0aGlzLm0gPSBtO1xuICB0aGlzLm1wID0gbS5pbnZEaWdpdCgpO1xuICB0aGlzLm1wbCA9IHRoaXMubXAmMHg3ZmZmO1xuICB0aGlzLm1waCA9IHRoaXMubXA+PjE1O1xuICB0aGlzLnVtID0gKDE8PChtLkRCLTE1KSktMTtcbiAgdGhpcy5tdDIgPSAyKm0udDtcbn1cblxuLy8geFIgbW9kIG1cbmZ1bmN0aW9uIG1vbnRDb252ZXJ0KHgpIHtcbiAgdmFyIHIgPSBuYmkoKTtcbiAgeC5hYnMoKS5kbFNoaWZ0VG8odGhpcy5tLnQscik7XG4gIHIuZGl2UmVtVG8odGhpcy5tLG51bGwscik7XG4gIGlmKHgucyA8IDAgJiYgci5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKSA+IDApIHRoaXMubS5zdWJUbyhyLHIpO1xuICByZXR1cm4gcjtcbn1cblxuLy8geC9SIG1vZCBtXG5mdW5jdGlvbiBtb250UmV2ZXJ0KHgpIHtcbiAgdmFyIHIgPSBuYmkoKTtcbiAgeC5jb3B5VG8ocik7XG4gIHRoaXMucmVkdWNlKHIpO1xuICByZXR1cm4gcjtcbn1cblxuLy8geCA9IHgvUiBtb2QgbSAoSEFDIDE0LjMyKVxuZnVuY3Rpb24gbW9udFJlZHVjZSh4KSB7XG4gIHdoaWxlKHgudCA8PSB0aGlzLm10MikgICAgLy8gcGFkIHggc28gYW0gaGFzIGVub3VnaCByb29tIGxhdGVyXG4gICAgeFt4LnQrK10gPSAwO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5tLnQ7ICsraSkge1xuICAgIC8vIGZhc3RlciB3YXkgb2YgY2FsY3VsYXRpbmcgdTAgPSB4W2ldKm1wIG1vZCBEVlxuICAgIHZhciBqID0geFtpXSYweDdmZmY7XG4gICAgdmFyIHUwID0gKGoqdGhpcy5tcGwrKCgoaip0aGlzLm1waCsoeFtpXT4+MTUpKnRoaXMubXBsKSZ0aGlzLnVtKTw8MTUpKSZ4LkRNO1xuICAgIC8vIHVzZSBhbSB0byBjb21iaW5lIHRoZSBtdWx0aXBseS1zaGlmdC1hZGQgaW50byBvbmUgY2FsbFxuICAgIGogPSBpK3RoaXMubS50O1xuICAgIHhbal0gKz0gdGhpcy5tLmFtKDAsdTAseCxpLDAsdGhpcy5tLnQpO1xuICAgIC8vIHByb3BhZ2F0ZSBjYXJyeVxuICAgIHdoaWxlKHhbal0gPj0geC5EVikgeyB4W2pdIC09IHguRFY7IHhbKytqXSsrOyB9XG4gIH1cbiAgeC5jbGFtcCgpO1xuICB4LmRyU2hpZnRUbyh0aGlzLm0udCx4KTtcbiAgaWYoeC5jb21wYXJlVG8odGhpcy5tKSA+PSAwKSB4LnN1YlRvKHRoaXMubSx4KTtcbn1cblxuLy8gciA9IFwieF4yL1IgbW9kIG1cIjsgeCAhPSByXG5mdW5jdGlvbiBtb250U3FyVG8oeCxyKSB7IHguc3F1YXJlVG8ocik7IHRoaXMucmVkdWNlKHIpOyB9XG5cbi8vIHIgPSBcInh5L1IgbW9kIG1cIjsgeCx5ICE9IHJcbmZ1bmN0aW9uIG1vbnRNdWxUbyh4LHkscikgeyB4Lm11bHRpcGx5VG8oeSxyKTsgdGhpcy5yZWR1Y2Uocik7IH1cblxuTW9udGdvbWVyeS5wcm90b3R5cGUuY29udmVydCA9IG1vbnRDb252ZXJ0O1xuTW9udGdvbWVyeS5wcm90b3R5cGUucmV2ZXJ0ID0gbW9udFJldmVydDtcbk1vbnRnb21lcnkucHJvdG90eXBlLnJlZHVjZSA9IG1vbnRSZWR1Y2U7XG5Nb250Z29tZXJ5LnByb3RvdHlwZS5tdWxUbyA9IG1vbnRNdWxUbztcbk1vbnRnb21lcnkucHJvdG90eXBlLnNxclRvID0gbW9udFNxclRvO1xuXG4vLyAocHJvdGVjdGVkKSB0cnVlIGlmZiB0aGlzIGlzIGV2ZW5cbmZ1bmN0aW9uIGJucElzRXZlbigpIHsgcmV0dXJuICgodGhpcy50PjApPyh0aGlzWzBdJjEpOnRoaXMucykgPT0gMDsgfVxuXG4vLyAocHJvdGVjdGVkKSB0aGlzXmUsIGUgPCAyXjMyLCBkb2luZyBzcXIgYW5kIG11bCB3aXRoIFwiclwiIChIQUMgMTQuNzkpXG5mdW5jdGlvbiBibnBFeHAoZSx6KSB7XG4gIGlmKGUgPiAweGZmZmZmZmZmIHx8IGUgPCAxKSByZXR1cm4gQmlnSW50ZWdlci5PTkU7XG4gIHZhciByID0gbmJpKCksIHIyID0gbmJpKCksIGcgPSB6LmNvbnZlcnQodGhpcyksIGkgPSBuYml0cyhlKS0xO1xuICBnLmNvcHlUbyhyKTtcbiAgd2hpbGUoLS1pID49IDApIHtcbiAgICB6LnNxclRvKHIscjIpO1xuICAgIGlmKChlJigxPDxpKSkgPiAwKSB6Lm11bFRvKHIyLGcscik7XG4gICAgZWxzZSB7IHZhciB0ID0gcjsgciA9IHIyOyByMiA9IHQ7IH1cbiAgfVxuICByZXR1cm4gei5yZXZlcnQocik7XG59XG5cbi8vIChwdWJsaWMpIHRoaXNeZSAlIG0sIDAgPD0gZSA8IDJeMzJcbmZ1bmN0aW9uIGJuTW9kUG93SW50KGUsbSkge1xuICB2YXIgejtcbiAgaWYoZSA8IDI1NiB8fCBtLmlzRXZlbigpKSB6ID0gbmV3IENsYXNzaWMobSk7IGVsc2UgeiA9IG5ldyBNb250Z29tZXJ5KG0pO1xuICByZXR1cm4gdGhpcy5leHAoZSx6KTtcbn1cblxuLy8gcHJvdGVjdGVkXG5wcm90by5jb3B5VG8gPSBibnBDb3B5VG87XG5wcm90by5mcm9tSW50ID0gYm5wRnJvbUludDtcbnByb3RvLmZyb21TdHJpbmcgPSBibnBGcm9tU3RyaW5nO1xucHJvdG8uY2xhbXAgPSBibnBDbGFtcDtcbnByb3RvLmRsU2hpZnRUbyA9IGJucERMU2hpZnRUbztcbnByb3RvLmRyU2hpZnRUbyA9IGJucERSU2hpZnRUbztcbnByb3RvLmxTaGlmdFRvID0gYm5wTFNoaWZ0VG87XG5wcm90by5yU2hpZnRUbyA9IGJucFJTaGlmdFRvO1xucHJvdG8uc3ViVG8gPSBibnBTdWJUbztcbnByb3RvLm11bHRpcGx5VG8gPSBibnBNdWx0aXBseVRvO1xucHJvdG8uc3F1YXJlVG8gPSBibnBTcXVhcmVUbztcbnByb3RvLmRpdlJlbVRvID0gYm5wRGl2UmVtVG87XG5wcm90by5pbnZEaWdpdCA9IGJucEludkRpZ2l0O1xucHJvdG8uaXNFdmVuID0gYm5wSXNFdmVuO1xucHJvdG8uZXhwID0gYm5wRXhwO1xuXG4vLyBwdWJsaWNcbnByb3RvLnRvU3RyaW5nID0gYm5Ub1N0cmluZztcbnByb3RvLm5lZ2F0ZSA9IGJuTmVnYXRlO1xucHJvdG8uYWJzID0gYm5BYnM7XG5wcm90by5jb21wYXJlVG8gPSBibkNvbXBhcmVUbztcbnByb3RvLmJpdExlbmd0aCA9IGJuQml0TGVuZ3RoO1xucHJvdG8ubW9kID0gYm5Nb2Q7XG5wcm90by5tb2RQb3dJbnQgPSBibk1vZFBvd0ludDtcblxuLy8vLyBqc2JuMlxuXG5mdW5jdGlvbiBuYmkoKSB7IHJldHVybiBuZXcgQmlnSW50ZWdlcihudWxsKTsgfVxuXG4vLyAocHVibGljKVxuZnVuY3Rpb24gYm5DbG9uZSgpIHsgdmFyIHIgPSBuYmkoKTsgdGhpcy5jb3B5VG8ocik7IHJldHVybiByOyB9XG5cbi8vIChwdWJsaWMpIHJldHVybiB2YWx1ZSBhcyBpbnRlZ2VyXG5mdW5jdGlvbiBibkludFZhbHVlKCkge1xuICBpZih0aGlzLnMgPCAwKSB7XG4gICAgaWYodGhpcy50ID09IDEpIHJldHVybiB0aGlzWzBdLXRoaXMuRFY7XG4gICAgZWxzZSBpZih0aGlzLnQgPT0gMCkgcmV0dXJuIC0xO1xuICB9XG4gIGVsc2UgaWYodGhpcy50ID09IDEpIHJldHVybiB0aGlzWzBdO1xuICBlbHNlIGlmKHRoaXMudCA9PSAwKSByZXR1cm4gMDtcbiAgLy8gYXNzdW1lcyAxNiA8IERCIDwgMzJcbiAgcmV0dXJuICgodGhpc1sxXSYoKDE8PCgzMi10aGlzLkRCKSktMSkpPDx0aGlzLkRCKXx0aGlzWzBdO1xufVxuXG4vLyAocHVibGljKSByZXR1cm4gdmFsdWUgYXMgYnl0ZVxuZnVuY3Rpb24gYm5CeXRlVmFsdWUoKSB7IHJldHVybiAodGhpcy50PT0wKT90aGlzLnM6KHRoaXNbMF08PDI0KT4+MjQ7IH1cblxuLy8gKHB1YmxpYykgcmV0dXJuIHZhbHVlIGFzIHNob3J0IChhc3N1bWVzIERCPj0xNilcbmZ1bmN0aW9uIGJuU2hvcnRWYWx1ZSgpIHsgcmV0dXJuICh0aGlzLnQ9PTApP3RoaXMuczoodGhpc1swXTw8MTYpPj4xNjsgfVxuXG4vLyAocHJvdGVjdGVkKSByZXR1cm4geCBzLnQuIHJeeCA8IERWXG5mdW5jdGlvbiBibnBDaHVua1NpemUocikgeyByZXR1cm4gTWF0aC5mbG9vcihNYXRoLkxOMip0aGlzLkRCL01hdGgubG9nKHIpKTsgfVxuXG4vLyAocHVibGljKSAwIGlmIHRoaXMgPT0gMCwgMSBpZiB0aGlzID4gMFxuZnVuY3Rpb24gYm5TaWdOdW0oKSB7XG4gIGlmKHRoaXMucyA8IDApIHJldHVybiAtMTtcbiAgZWxzZSBpZih0aGlzLnQgPD0gMCB8fCAodGhpcy50ID09IDEgJiYgdGhpc1swXSA8PSAwKSkgcmV0dXJuIDA7XG4gIGVsc2UgcmV0dXJuIDE7XG59XG5cbi8vIChwcm90ZWN0ZWQpIGNvbnZlcnQgdG8gcmFkaXggc3RyaW5nXG5mdW5jdGlvbiBibnBUb1JhZGl4KGIpIHtcbiAgaWYoYiA9PSBudWxsKSBiID0gMTA7XG4gIGlmKHRoaXMuc2lnbnVtKCkgPT0gMCB8fCBiIDwgMiB8fCBiID4gMzYpIHJldHVybiBcIjBcIjtcbiAgdmFyIGNzID0gdGhpcy5jaHVua1NpemUoYik7XG4gIHZhciBhID0gTWF0aC5wb3coYixjcyk7XG4gIHZhciBkID0gbmJ2KGEpLCB5ID0gbmJpKCksIHogPSBuYmkoKSwgciA9IFwiXCI7XG4gIHRoaXMuZGl2UmVtVG8oZCx5LHopO1xuICB3aGlsZSh5LnNpZ251bSgpID4gMCkge1xuICAgIHIgPSAoYSt6LmludFZhbHVlKCkpLnRvU3RyaW5nKGIpLnN1YnN0cigxKSArIHI7XG4gICAgeS5kaXZSZW1UbyhkLHkseik7XG4gIH1cbiAgcmV0dXJuIHouaW50VmFsdWUoKS50b1N0cmluZyhiKSArIHI7XG59XG5cbi8vIChwcm90ZWN0ZWQpIGNvbnZlcnQgZnJvbSByYWRpeCBzdHJpbmdcbmZ1bmN0aW9uIGJucEZyb21SYWRpeChzLGIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzZWxmLmZyb21JbnQoMCk7XG4gIGlmKGIgPT0gbnVsbCkgYiA9IDEwO1xuICB2YXIgY3MgPSBzZWxmLmNodW5rU2l6ZShiKTtcbiAgdmFyIGQgPSBNYXRoLnBvdyhiLGNzKSwgbWkgPSBmYWxzZSwgaiA9IDAsIHcgPSAwO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgcy5sZW5ndGg7ICsraSkge1xuICAgIHZhciB4ID0gaW50QXQocyxpKTtcbiAgICBpZih4IDwgMCkge1xuICAgICAgaWYocy5jaGFyQXQoaSkgPT0gXCItXCIgJiYgc2VsZi5zaWdudW0oKSA9PSAwKSBtaSA9IHRydWU7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdyA9IGIqdyt4O1xuICAgIGlmKCsraiA+PSBjcykge1xuICAgICAgc2VsZi5kTXVsdGlwbHkoZCk7XG4gICAgICBzZWxmLmRBZGRPZmZzZXQodywwKTtcbiAgICAgIGogPSAwO1xuICAgICAgdyA9IDA7XG4gICAgfVxuICB9XG4gIGlmKGogPiAwKSB7XG4gICAgc2VsZi5kTXVsdGlwbHkoTWF0aC5wb3coYixqKSk7XG4gICAgc2VsZi5kQWRkT2Zmc2V0KHcsMCk7XG4gIH1cbiAgaWYobWkpIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyhzZWxmLHNlbGYpO1xufVxuXG4vLyAocHJvdGVjdGVkKSBhbHRlcm5hdGUgY29uc3RydWN0b3JcbmZ1bmN0aW9uIGJucEZyb21OdW1iZXIoYSxiLGMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZihcIm51bWJlclwiID09IHR5cGVvZiBiKSB7XG4gICAgLy8gbmV3IEJpZ0ludGVnZXIoaW50LGludCxSTkcpXG4gICAgaWYoYSA8IDIpIHNlbGYuZnJvbUludCgxKTtcbiAgICBlbHNlIHtcbiAgICAgIHNlbGYuZnJvbU51bWJlcihhLGMpO1xuICAgICAgaWYoIXNlbGYudGVzdEJpdChhLTEpKSAgICAvLyBmb3JjZSBNU0Igc2V0XG4gICAgICAgIHNlbGYuYml0d2lzZVRvKEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChhLTEpLG9wX29yLHNlbGYpO1xuICAgICAgaWYoc2VsZi5pc0V2ZW4oKSkgc2VsZi5kQWRkT2Zmc2V0KDEsMCk7IC8vIGZvcmNlIG9kZFxuICAgICAgd2hpbGUoIXNlbGYuaXNQcm9iYWJsZVByaW1lKGIpKSB7XG4gICAgICAgIHNlbGYuZEFkZE9mZnNldCgyLDApO1xuICAgICAgICBpZihzZWxmLmJpdExlbmd0aCgpID4gYSkgc2VsZi5zdWJUbyhCaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQoYS0xKSxzZWxmKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gbmV3IEJpZ0ludGVnZXIoaW50LFJORylcbiAgICB2YXIgeCA9IG5ldyBBcnJheSgpLCB0ID0gYSY3O1xuICAgIHgubGVuZ3RoID0gKGE+PjMpKzE7XG4gICAgYi5uZXh0Qnl0ZXMoeCk7XG4gICAgaWYodCA+IDApIHhbMF0gJj0gKCgxPDx0KS0xKTsgZWxzZSB4WzBdID0gMDtcbiAgICBzZWxmLmZyb21TdHJpbmcoeCwyNTYpO1xuICB9XG59XG5cbi8vIChwdWJsaWMpIGNvbnZlcnQgdG8gYmlnZW5kaWFuIGJ5dGUgYXJyYXlcbmZ1bmN0aW9uIGJuVG9CeXRlQXJyYXkoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGkgPSBzZWxmLnQsIHIgPSBuZXcgQXJyYXkoKTtcbiAgclswXSA9IHNlbGYucztcbiAgdmFyIHAgPSBzZWxmLkRCLShpKnNlbGYuREIpJTgsIGQsIGsgPSAwO1xuICBpZihpLS0gPiAwKSB7XG4gICAgaWYocCA8IHNlbGYuREIgJiYgKGQgPSBzZWxmW2ldPj5wKSAhPSAoc2VsZi5zJnNlbGYuRE0pPj5wKVxuICAgICAgcltrKytdID0gZHwoc2VsZi5zPDwoc2VsZi5EQi1wKSk7XG4gICAgd2hpbGUoaSA+PSAwKSB7XG4gICAgICBpZihwIDwgOCkge1xuICAgICAgICBkID0gKHNlbGZbaV0mKCgxPDxwKS0xKSk8PCg4LXApO1xuICAgICAgICBkIHw9IHNlbGZbLS1pXT4+KHArPXNlbGYuREItOCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZCA9IChzZWxmW2ldPj4ocC09OCkpJjB4ZmY7XG4gICAgICAgIGlmKHAgPD0gMCkgeyBwICs9IHNlbGYuREI7IC0taTsgfVxuICAgICAgfVxuICAgICAgaWYoKGQmMHg4MCkgIT0gMCkgZCB8PSAtMjU2O1xuICAgICAgaWYoayA9PT0gMCAmJiAoc2VsZi5zJjB4ODApICE9IChkJjB4ODApKSArK2s7XG4gICAgICBpZihrID4gMCB8fCBkICE9IHNlbGYucykgcltrKytdID0gZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGJuRXF1YWxzKGEpIHsgcmV0dXJuKHRoaXMuY29tcGFyZVRvKGEpPT0wKTsgfVxuZnVuY3Rpb24gYm5NaW4oYSkgeyByZXR1cm4odGhpcy5jb21wYXJlVG8oYSk8MCk/dGhpczphOyB9XG5mdW5jdGlvbiBibk1heChhKSB7IHJldHVybih0aGlzLmNvbXBhcmVUbyhhKT4wKT90aGlzOmE7IH1cblxuLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgb3AgYSAoYml0d2lzZSlcbmZ1bmN0aW9uIGJucEJpdHdpc2VUbyhhLG9wLHIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgaSwgZiwgbSA9IE1hdGgubWluKGEudCxzZWxmLnQpO1xuICBmb3IoaSA9IDA7IGkgPCBtOyArK2kpIHJbaV0gPSBvcChzZWxmW2ldLGFbaV0pO1xuICBpZihhLnQgPCBzZWxmLnQpIHtcbiAgICBmID0gYS5zJnNlbGYuRE07XG4gICAgZm9yKGkgPSBtOyBpIDwgc2VsZi50OyArK2kpIHJbaV0gPSBvcChzZWxmW2ldLGYpO1xuICAgIHIudCA9IHNlbGYudDtcbiAgfVxuICBlbHNlIHtcbiAgICBmID0gc2VsZi5zJnNlbGYuRE07XG4gICAgZm9yKGkgPSBtOyBpIDwgYS50OyArK2kpIHJbaV0gPSBvcChmLGFbaV0pO1xuICAgIHIudCA9IGEudDtcbiAgfVxuICByLnMgPSBvcChzZWxmLnMsYS5zKTtcbiAgci5jbGFtcCgpO1xufVxuXG4vLyAocHVibGljKSB0aGlzICYgYVxuZnVuY3Rpb24gb3BfYW5kKHgseSkgeyByZXR1cm4geCZ5OyB9XG5mdW5jdGlvbiBibkFuZChhKSB7IHZhciByID0gbmJpKCk7IHRoaXMuYml0d2lzZVRvKGEsb3BfYW5kLHIpOyByZXR1cm4gcjsgfVxuXG4vLyAocHVibGljKSB0aGlzIHwgYVxuZnVuY3Rpb24gb3Bfb3IoeCx5KSB7IHJldHVybiB4fHk7IH1cbmZ1bmN0aW9uIGJuT3IoYSkgeyB2YXIgciA9IG5iaSgpOyB0aGlzLmJpdHdpc2VUbyhhLG9wX29yLHIpOyByZXR1cm4gcjsgfVxuXG4vLyAocHVibGljKSB0aGlzIF4gYVxuZnVuY3Rpb24gb3BfeG9yKHgseSkgeyByZXR1cm4geF55OyB9XG5mdW5jdGlvbiBiblhvcihhKSB7IHZhciByID0gbmJpKCk7IHRoaXMuYml0d2lzZVRvKGEsb3BfeG9yLHIpOyByZXR1cm4gcjsgfVxuXG4vLyAocHVibGljKSB0aGlzICYgfmFcbmZ1bmN0aW9uIG9wX2FuZG5vdCh4LHkpIHsgcmV0dXJuIHgmfnk7IH1cbmZ1bmN0aW9uIGJuQW5kTm90KGEpIHsgdmFyIHIgPSBuYmkoKTsgdGhpcy5iaXR3aXNlVG8oYSxvcF9hbmRub3Qscik7IHJldHVybiByOyB9XG5cbi8vIChwdWJsaWMpIH50aGlzXG5mdW5jdGlvbiBibk5vdCgpIHtcbiAgdmFyIHIgPSBuYmkoKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMudDsgKytpKSByW2ldID0gdGhpcy5ETSZ+dGhpc1tpXTtcbiAgci50ID0gdGhpcy50O1xuICByLnMgPSB+dGhpcy5zO1xuICByZXR1cm4gcjtcbn1cblxuLy8gKHB1YmxpYykgdGhpcyA8PCBuXG5mdW5jdGlvbiBiblNoaWZ0TGVmdChuKSB7XG4gIHZhciByID0gbmJpKCk7XG4gIGlmKG4gPCAwKSB0aGlzLnJTaGlmdFRvKC1uLHIpOyBlbHNlIHRoaXMubFNoaWZ0VG8obixyKTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIChwdWJsaWMpIHRoaXMgPj4gblxuZnVuY3Rpb24gYm5TaGlmdFJpZ2h0KG4pIHtcbiAgdmFyIHIgPSBuYmkoKTtcbiAgaWYobiA8IDApIHRoaXMubFNoaWZ0VG8oLW4scik7IGVsc2UgdGhpcy5yU2hpZnRUbyhuLHIpO1xuICByZXR1cm4gcjtcbn1cblxuLy8gcmV0dXJuIGluZGV4IG9mIGxvd2VzdCAxLWJpdCBpbiB4LCB4IDwgMl4zMVxuZnVuY3Rpb24gbGJpdCh4KSB7XG4gIGlmKHggPT0gMCkgcmV0dXJuIC0xO1xuICB2YXIgciA9IDA7XG4gIGlmKCh4JjB4ZmZmZikgPT0gMCkgeyB4ID4+PSAxNjsgciArPSAxNjsgfVxuICBpZigoeCYweGZmKSA9PSAwKSB7IHggPj49IDg7IHIgKz0gODsgfVxuICBpZigoeCYweGYpID09IDApIHsgeCA+Pj0gNDsgciArPSA0OyB9XG4gIGlmKCh4JjMpID09IDApIHsgeCA+Pj0gMjsgciArPSAyOyB9XG4gIGlmKCh4JjEpID09IDApICsrcjtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIChwdWJsaWMpIHJldHVybnMgaW5kZXggb2YgbG93ZXN0IDEtYml0IChvciAtMSBpZiBub25lKVxuZnVuY3Rpb24gYm5HZXRMb3dlc3RTZXRCaXQoKSB7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLnQ7ICsraSlcbiAgICBpZih0aGlzW2ldICE9IDApIHJldHVybiBpKnRoaXMuREIrbGJpdCh0aGlzW2ldKTtcbiAgaWYodGhpcy5zIDwgMCkgcmV0dXJuIHRoaXMudCp0aGlzLkRCO1xuICByZXR1cm4gLTE7XG59XG5cbi8vIHJldHVybiBudW1iZXIgb2YgMSBiaXRzIGluIHhcbmZ1bmN0aW9uIGNiaXQoeCkge1xuICB2YXIgciA9IDA7XG4gIHdoaWxlKHggIT0gMCkgeyB4ICY9IHgtMTsgKytyOyB9XG4gIHJldHVybiByO1xufVxuXG4vLyAocHVibGljKSByZXR1cm4gbnVtYmVyIG9mIHNldCBiaXRzXG5mdW5jdGlvbiBibkJpdENvdW50KCkge1xuICB2YXIgciA9IDAsIHggPSB0aGlzLnMmdGhpcy5ETTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMudDsgKytpKSByICs9IGNiaXQodGhpc1tpXV54KTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIChwdWJsaWMpIHRydWUgaWZmIG50aCBiaXQgaXMgc2V0XG5mdW5jdGlvbiBiblRlc3RCaXQobikge1xuICB2YXIgaiA9IE1hdGguZmxvb3Iobi90aGlzLkRCKTtcbiAgaWYoaiA+PSB0aGlzLnQpIHJldHVybih0aGlzLnMhPTApO1xuICByZXR1cm4oKHRoaXNbal0mKDE8PChuJXRoaXMuREIpKSkhPTApO1xufVxuXG4vLyAocHJvdGVjdGVkKSB0aGlzIG9wICgxPDxuKVxuZnVuY3Rpb24gYm5wQ2hhbmdlQml0KG4sb3ApIHtcbiAgdmFyIHIgPSBCaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQobik7XG4gIHRoaXMuYml0d2lzZVRvKHIsb3Ascik7XG4gIHJldHVybiByO1xufVxuXG4vLyAocHVibGljKSB0aGlzIHwgKDE8PG4pXG5mdW5jdGlvbiBiblNldEJpdChuKSB7IHJldHVybiB0aGlzLmNoYW5nZUJpdChuLG9wX29yKTsgfVxuXG4vLyAocHVibGljKSB0aGlzICYgfigxPDxuKVxuZnVuY3Rpb24gYm5DbGVhckJpdChuKSB7IHJldHVybiB0aGlzLmNoYW5nZUJpdChuLG9wX2FuZG5vdCk7IH1cblxuLy8gKHB1YmxpYykgdGhpcyBeICgxPDxuKVxuZnVuY3Rpb24gYm5GbGlwQml0KG4pIHsgcmV0dXJuIHRoaXMuY2hhbmdlQml0KG4sb3BfeG9yKTsgfVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyArIGFcbmZ1bmN0aW9uIGJucEFkZFRvKGEscikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdmFyIGkgPSAwLCBjID0gMCwgbSA9IE1hdGgubWluKGEudCxzZWxmLnQpO1xuICB3aGlsZShpIDwgbSkge1xuICAgIGMgKz0gc2VsZltpXSthW2ldO1xuICAgIHJbaSsrXSA9IGMmc2VsZi5ETTtcbiAgICBjID4+PSBzZWxmLkRCO1xuICB9XG4gIGlmKGEudCA8IHNlbGYudCkge1xuICAgIGMgKz0gYS5zO1xuICAgIHdoaWxlKGkgPCBzZWxmLnQpIHtcbiAgICAgIGMgKz0gc2VsZltpXTtcbiAgICAgIHJbaSsrXSA9IGMmc2VsZi5ETTtcbiAgICAgIGMgPj49IHNlbGYuREI7XG4gICAgfVxuICAgIGMgKz0gc2VsZi5zO1xuICB9XG4gIGVsc2Uge1xuICAgIGMgKz0gc2VsZi5zO1xuICAgIHdoaWxlKGkgPCBhLnQpIHtcbiAgICAgIGMgKz0gYVtpXTtcbiAgICAgIHJbaSsrXSA9IGMmc2VsZi5ETTtcbiAgICAgIGMgPj49IHNlbGYuREI7XG4gICAgfVxuICAgIGMgKz0gYS5zO1xuICB9XG4gIHIucyA9IChjPDApPy0xOjA7XG4gIGlmKGMgPiAwKSByW2krK10gPSBjO1xuICBlbHNlIGlmKGMgPCAtMSkgcltpKytdID0gc2VsZi5EVitjO1xuICByLnQgPSBpO1xuICByLmNsYW1wKCk7XG59XG5cbi8vIChwdWJsaWMpIHRoaXMgKyBhXG5mdW5jdGlvbiBibkFkZChhKSB7IHZhciByID0gbmJpKCk7IHRoaXMuYWRkVG8oYSxyKTsgcmV0dXJuIHI7IH1cblxuLy8gKHB1YmxpYykgdGhpcyAtIGFcbmZ1bmN0aW9uIGJuU3VidHJhY3QoYSkgeyB2YXIgciA9IG5iaSgpOyB0aGlzLnN1YlRvKGEscik7IHJldHVybiByOyB9XG5cbi8vIChwdWJsaWMpIHRoaXMgKiBhXG5mdW5jdGlvbiBibk11bHRpcGx5KGEpIHsgdmFyIHIgPSBuYmkoKTsgdGhpcy5tdWx0aXBseVRvKGEscik7IHJldHVybiByOyB9XG5cbi8vIChwdWJsaWMpIHRoaXNeMlxuZnVuY3Rpb24gYm5TcXVhcmUoKSB7IHZhciByID0gbmJpKCk7IHRoaXMuc3F1YXJlVG8ocik7IHJldHVybiByOyB9XG5cbi8vIChwdWJsaWMpIHRoaXMgLyBhXG5mdW5jdGlvbiBibkRpdmlkZShhKSB7IHZhciByID0gbmJpKCk7IHRoaXMuZGl2UmVtVG8oYSxyLG51bGwpOyByZXR1cm4gcjsgfVxuXG4vLyAocHVibGljKSB0aGlzICUgYVxuZnVuY3Rpb24gYm5SZW1haW5kZXIoYSkgeyB2YXIgciA9IG5iaSgpOyB0aGlzLmRpdlJlbVRvKGEsbnVsbCxyKTsgcmV0dXJuIHI7IH1cblxuLy8gKHB1YmxpYykgW3RoaXMvYSx0aGlzJWFdXG5mdW5jdGlvbiBibkRpdmlkZUFuZFJlbWFpbmRlcihhKSB7XG4gIHZhciBxID0gbmJpKCksIHIgPSBuYmkoKTtcbiAgdGhpcy5kaXZSZW1UbyhhLHEscik7XG4gIHJldHVybiBuZXcgQXJyYXkocSxyKTtcbn1cblxuLy8gKHByb3RlY3RlZCkgdGhpcyAqPSBuLCB0aGlzID49IDAsIDEgPCBuIDwgRFZcbmZ1bmN0aW9uIGJucERNdWx0aXBseShuKSB7XG4gIHRoaXNbdGhpcy50XSA9IHRoaXMuYW0oMCxuLTEsdGhpcywwLDAsdGhpcy50KTtcbiAgKyt0aGlzLnQ7XG4gIHRoaXMuY2xhbXAoKTtcbn1cblxuLy8gKHByb3RlY3RlZCkgdGhpcyArPSBuIDw8IHcgd29yZHMsIHRoaXMgPj0gMFxuZnVuY3Rpb24gYm5wREFkZE9mZnNldChuLHcpIHtcbiAgaWYobiA9PSAwKSByZXR1cm47XG4gIHdoaWxlKHRoaXMudCA8PSB3KSB0aGlzW3RoaXMudCsrXSA9IDA7XG4gIHRoaXNbd10gKz0gbjtcbiAgd2hpbGUodGhpc1t3XSA+PSB0aGlzLkRWKSB7XG4gICAgdGhpc1t3XSAtPSB0aGlzLkRWO1xuICAgIGlmKCsrdyA+PSB0aGlzLnQpIHRoaXNbdGhpcy50KytdID0gMDtcbiAgICArK3RoaXNbd107XG4gIH1cbn1cblxuLy8gQSBcIm51bGxcIiByZWR1Y2VyXG5mdW5jdGlvbiBOdWxsRXhwKCkge31cbmZ1bmN0aW9uIG5Ob3AoeCkgeyByZXR1cm4geDsgfVxuZnVuY3Rpb24gbk11bFRvKHgseSxyKSB7IHgubXVsdGlwbHlUbyh5LHIpOyB9XG5mdW5jdGlvbiBuU3FyVG8oeCxyKSB7IHguc3F1YXJlVG8ocik7IH1cblxuTnVsbEV4cC5wcm90b3R5cGUuY29udmVydCA9IG5Ob3A7XG5OdWxsRXhwLnByb3RvdHlwZS5yZXZlcnQgPSBuTm9wO1xuTnVsbEV4cC5wcm90b3R5cGUubXVsVG8gPSBuTXVsVG87XG5OdWxsRXhwLnByb3RvdHlwZS5zcXJUbyA9IG5TcXJUbztcblxuLy8gKHB1YmxpYykgdGhpc15lXG5mdW5jdGlvbiBiblBvdyhlKSB7IHJldHVybiB0aGlzLmV4cChlLG5ldyBOdWxsRXhwKCkpOyB9XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSBsb3dlciBuIHdvcmRzIG9mIFwidGhpcyAqIGFcIiwgYS50IDw9IG5cbi8vIFwidGhpc1wiIHNob3VsZCBiZSB0aGUgbGFyZ2VyIG9uZSBpZiBhcHByb3ByaWF0ZS5cbmZ1bmN0aW9uIGJucE11bHRpcGx5TG93ZXJUbyhhLG4scikge1xuICB2YXIgaSA9IE1hdGgubWluKHRoaXMudCthLnQsbik7XG4gIHIucyA9IDA7IC8vIGFzc3VtZXMgYSx0aGlzID49IDBcbiAgci50ID0gaTtcbiAgd2hpbGUoaSA+IDApIHJbLS1pXSA9IDA7XG4gIHZhciBqO1xuICBmb3IoaiA9IHIudC10aGlzLnQ7IGkgPCBqOyArK2kpIHJbaSt0aGlzLnRdID0gdGhpcy5hbSgwLGFbaV0scixpLDAsdGhpcy50KTtcbiAgZm9yKGogPSBNYXRoLm1pbihhLnQsbik7IGkgPCBqOyArK2kpIHRoaXMuYW0oMCxhW2ldLHIsaSwwLG4taSk7XG4gIHIuY2xhbXAoKTtcbn1cblxuLy8gKHByb3RlY3RlZCkgciA9IFwidGhpcyAqIGFcIiB3aXRob3V0IGxvd2VyIG4gd29yZHMsIG4gPiAwXG4vLyBcInRoaXNcIiBzaG91bGQgYmUgdGhlIGxhcmdlciBvbmUgaWYgYXBwcm9wcmlhdGUuXG5mdW5jdGlvbiBibnBNdWx0aXBseVVwcGVyVG8oYSxuLHIpIHtcbiAgLS1uO1xuICB2YXIgaSA9IHIudCA9IHRoaXMudCthLnQtbjtcbiAgci5zID0gMDsgLy8gYXNzdW1lcyBhLHRoaXMgPj0gMFxuICB3aGlsZSgtLWkgPj0gMCkgcltpXSA9IDA7XG4gIGZvcihpID0gTWF0aC5tYXgobi10aGlzLnQsMCk7IGkgPCBhLnQ7ICsraSlcbiAgICByW3RoaXMudCtpLW5dID0gdGhpcy5hbShuLWksYVtpXSxyLDAsMCx0aGlzLnQraS1uKTtcbiAgci5jbGFtcCgpO1xuICByLmRyU2hpZnRUbygxLHIpO1xufVxuXG4vLyBCYXJyZXR0IG1vZHVsYXIgcmVkdWN0aW9uXG5mdW5jdGlvbiBCYXJyZXR0KG0pIHtcbiAgLy8gc2V0dXAgQmFycmV0dFxuICB0aGlzLnIyID0gbmJpKCk7XG4gIHRoaXMucTMgPSBuYmkoKTtcbiAgQmlnSW50ZWdlci5PTkUuZGxTaGlmdFRvKDIqbS50LHRoaXMucjIpO1xuICB0aGlzLm11ID0gdGhpcy5yMi5kaXZpZGUobSk7XG4gIHRoaXMubSA9IG07XG59XG5cbmZ1bmN0aW9uIGJhcnJldHRDb252ZXJ0KHgpIHtcbiAgaWYoeC5zIDwgMCB8fCB4LnQgPiAyKnRoaXMubS50KSByZXR1cm4geC5tb2QodGhpcy5tKTtcbiAgZWxzZSBpZih4LmNvbXBhcmVUbyh0aGlzLm0pIDwgMCkgcmV0dXJuIHg7XG4gIGVsc2UgeyB2YXIgciA9IG5iaSgpOyB4LmNvcHlUbyhyKTsgdGhpcy5yZWR1Y2Uocik7IHJldHVybiByOyB9XG59XG5cbmZ1bmN0aW9uIGJhcnJldHRSZXZlcnQoeCkgeyByZXR1cm4geDsgfVxuXG4vLyB4ID0geCBtb2QgbSAoSEFDIDE0LjQyKVxuZnVuY3Rpb24gYmFycmV0dFJlZHVjZSh4KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgeC5kclNoaWZ0VG8oc2VsZi5tLnQtMSxzZWxmLnIyKTtcbiAgaWYoeC50ID4gc2VsZi5tLnQrMSkgeyB4LnQgPSBzZWxmLm0udCsxOyB4LmNsYW1wKCk7IH1cbiAgc2VsZi5tdS5tdWx0aXBseVVwcGVyVG8oc2VsZi5yMixzZWxmLm0udCsxLHNlbGYucTMpO1xuICBzZWxmLm0ubXVsdGlwbHlMb3dlclRvKHNlbGYucTMsc2VsZi5tLnQrMSxzZWxmLnIyKTtcbiAgd2hpbGUoeC5jb21wYXJlVG8oc2VsZi5yMikgPCAwKSB4LmRBZGRPZmZzZXQoMSxzZWxmLm0udCsxKTtcbiAgeC5zdWJUbyhzZWxmLnIyLHgpO1xuICB3aGlsZSh4LmNvbXBhcmVUbyhzZWxmLm0pID49IDApIHguc3ViVG8oc2VsZi5tLHgpO1xufVxuXG4vLyByID0geF4yIG1vZCBtOyB4ICE9IHJcbmZ1bmN0aW9uIGJhcnJldHRTcXJUbyh4LHIpIHsgeC5zcXVhcmVUbyhyKTsgdGhpcy5yZWR1Y2Uocik7IH1cblxuLy8gciA9IHgqeSBtb2QgbTsgeCx5ICE9IHJcbmZ1bmN0aW9uIGJhcnJldHRNdWxUbyh4LHkscikgeyB4Lm11bHRpcGx5VG8oeSxyKTsgdGhpcy5yZWR1Y2Uocik7IH1cblxuQmFycmV0dC5wcm90b3R5cGUuY29udmVydCA9IGJhcnJldHRDb252ZXJ0O1xuQmFycmV0dC5wcm90b3R5cGUucmV2ZXJ0ID0gYmFycmV0dFJldmVydDtcbkJhcnJldHQucHJvdG90eXBlLnJlZHVjZSA9IGJhcnJldHRSZWR1Y2U7XG5CYXJyZXR0LnByb3RvdHlwZS5tdWxUbyA9IGJhcnJldHRNdWxUbztcbkJhcnJldHQucHJvdG90eXBlLnNxclRvID0gYmFycmV0dFNxclRvO1xuXG4vLyAocHVibGljKSB0aGlzXmUgJSBtIChIQUMgMTQuODUpXG5mdW5jdGlvbiBibk1vZFBvdyhlLG0pIHtcbiAgdmFyIGkgPSBlLmJpdExlbmd0aCgpLCBrLCByID0gbmJ2KDEpLCB6O1xuICBpZihpIDw9IDApIHJldHVybiByO1xuICBlbHNlIGlmKGkgPCAxOCkgayA9IDE7XG4gIGVsc2UgaWYoaSA8IDQ4KSBrID0gMztcbiAgZWxzZSBpZihpIDwgMTQ0KSBrID0gNDtcbiAgZWxzZSBpZihpIDwgNzY4KSBrID0gNTtcbiAgZWxzZSBrID0gNjtcbiAgaWYoaSA8IDgpXG4gICAgeiA9IG5ldyBDbGFzc2ljKG0pO1xuICBlbHNlIGlmKG0uaXNFdmVuKCkpXG4gICAgeiA9IG5ldyBCYXJyZXR0KG0pO1xuICBlbHNlXG4gICAgeiA9IG5ldyBNb250Z29tZXJ5KG0pO1xuXG4gIC8vIHByZWNvbXB1dGF0aW9uXG4gIHZhciBnID0gbmV3IEFycmF5KCksIG4gPSAzLCBrMSA9IGstMSwga20gPSAoMTw8ayktMTtcbiAgZ1sxXSA9IHouY29udmVydCh0aGlzKTtcbiAgaWYoayA+IDEpIHtcbiAgICB2YXIgZzIgPSBuYmkoKTtcbiAgICB6LnNxclRvKGdbMV0sZzIpO1xuICAgIHdoaWxlKG4gPD0ga20pIHtcbiAgICAgIGdbbl0gPSBuYmkoKTtcbiAgICAgIHoubXVsVG8oZzIsZ1tuLTJdLGdbbl0pO1xuICAgICAgbiArPSAyO1xuICAgIH1cbiAgfVxuXG4gIHZhciBqID0gZS50LTEsIHcsIGlzMSA9IHRydWUsIHIyID0gbmJpKCksIHQ7XG4gIGkgPSBuYml0cyhlW2pdKS0xO1xuICB3aGlsZShqID49IDApIHtcbiAgICBpZihpID49IGsxKSB3ID0gKGVbal0+PihpLWsxKSkma207XG4gICAgZWxzZSB7XG4gICAgICB3ID0gKGVbal0mKCgxPDwoaSsxKSktMSkpPDwoazEtaSk7XG4gICAgICBpZihqID4gMCkgdyB8PSBlW2otMV0+Pih0aGlzLkRCK2ktazEpO1xuICAgIH1cblxuICAgIG4gPSBrO1xuICAgIHdoaWxlKCh3JjEpID09IDApIHsgdyA+Pj0gMTsgLS1uOyB9XG4gICAgaWYoKGkgLT0gbikgPCAwKSB7IGkgKz0gdGhpcy5EQjsgLS1qOyB9XG4gICAgaWYoaXMxKSB7ICAgLy8gcmV0ID09IDEsIGRvbid0IGJvdGhlciBzcXVhcmluZyBvciBtdWx0aXBseWluZyBpdFxuICAgICAgZ1t3XS5jb3B5VG8ocik7XG4gICAgICBpczEgPSBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB3aGlsZShuID4gMSkgeyB6LnNxclRvKHIscjIpOyB6LnNxclRvKHIyLHIpOyBuIC09IDI7IH1cbiAgICAgIGlmKG4gPiAwKSB6LnNxclRvKHIscjIpOyBlbHNlIHsgdCA9IHI7IHIgPSByMjsgcjIgPSB0OyB9XG4gICAgICB6Lm11bFRvKHIyLGdbd10scik7XG4gICAgfVxuXG4gICAgd2hpbGUoaiA+PSAwICYmIChlW2pdJigxPDxpKSkgPT0gMCkge1xuICAgICAgei5zcXJUbyhyLHIyKTsgdCA9IHI7IHIgPSByMjsgcjIgPSB0O1xuICAgICAgaWYoLS1pIDwgMCkgeyBpID0gdGhpcy5EQi0xOyAtLWo7IH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHoucmV2ZXJ0KHIpO1xufVxuXG4vLyAocHVibGljKSBnY2QodGhpcyxhKSAoSEFDIDE0LjU0KVxuZnVuY3Rpb24gYm5HQ0QoYSkge1xuICB2YXIgeCA9ICh0aGlzLnM8MCk/dGhpcy5uZWdhdGUoKTp0aGlzLmNsb25lKCk7XG4gIHZhciB5ID0gKGEuczwwKT9hLm5lZ2F0ZSgpOmEuY2xvbmUoKTtcbiAgaWYoeC5jb21wYXJlVG8oeSkgPCAwKSB7IHZhciB0ID0geDsgeCA9IHk7IHkgPSB0OyB9XG4gIHZhciBpID0geC5nZXRMb3dlc3RTZXRCaXQoKSwgZyA9IHkuZ2V0TG93ZXN0U2V0Qml0KCk7XG4gIGlmKGcgPCAwKSByZXR1cm4geDtcbiAgaWYoaSA8IGcpIGcgPSBpO1xuICBpZihnID4gMCkge1xuICAgIHguclNoaWZ0VG8oZyx4KTtcbiAgICB5LnJTaGlmdFRvKGcseSk7XG4gIH1cbiAgd2hpbGUoeC5zaWdudW0oKSA+IDApIHtcbiAgICBpZigoaSA9IHguZ2V0TG93ZXN0U2V0Qml0KCkpID4gMCkgeC5yU2hpZnRUbyhpLHgpO1xuICAgIGlmKChpID0geS5nZXRMb3dlc3RTZXRCaXQoKSkgPiAwKSB5LnJTaGlmdFRvKGkseSk7XG4gICAgaWYoeC5jb21wYXJlVG8oeSkgPj0gMCkge1xuICAgICAgeC5zdWJUbyh5LHgpO1xuICAgICAgeC5yU2hpZnRUbygxLHgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHkuc3ViVG8oeCx5KTtcbiAgICAgIHkuclNoaWZ0VG8oMSx5KTtcbiAgICB9XG4gIH1cbiAgaWYoZyA+IDApIHkubFNoaWZ0VG8oZyx5KTtcbiAgcmV0dXJuIHk7XG59XG5cbi8vIChwcm90ZWN0ZWQpIHRoaXMgJSBuLCBuIDwgMl4yNlxuZnVuY3Rpb24gYm5wTW9kSW50KG4pIHtcbiAgaWYobiA8PSAwKSByZXR1cm4gMDtcbiAgdmFyIGQgPSB0aGlzLkRWJW4sIHIgPSAodGhpcy5zPDApP24tMTowO1xuICBpZih0aGlzLnQgPiAwKVxuICAgIGlmKGQgPT0gMCkgciA9IHRoaXNbMF0lbjtcbiAgICBlbHNlIGZvcih2YXIgaSA9IHRoaXMudC0xOyBpID49IDA7IC0taSkgciA9IChkKnIrdGhpc1tpXSklbjtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIChwdWJsaWMpIDEvdGhpcyAlIG0gKEhBQyAxNC42MSlcbmZ1bmN0aW9uIGJuTW9kSW52ZXJzZShtKSB7XG4gIHZhciBhYyA9IG0uaXNFdmVuKCk7XG4gIGlmKCh0aGlzLmlzRXZlbigpICYmIGFjKSB8fCBtLnNpZ251bSgpID09IDApIHJldHVybiBCaWdJbnRlZ2VyLlpFUk87XG4gIHZhciB1ID0gbS5jbG9uZSgpLCB2ID0gdGhpcy5jbG9uZSgpO1xuICB2YXIgYSA9IG5idigxKSwgYiA9IG5idigwKSwgYyA9IG5idigwKSwgZCA9IG5idigxKTtcbiAgd2hpbGUodS5zaWdudW0oKSAhPSAwKSB7XG4gICAgd2hpbGUodS5pc0V2ZW4oKSkge1xuICAgICAgdS5yU2hpZnRUbygxLHUpO1xuICAgICAgaWYoYWMpIHtcbiAgICAgICAgaWYoIWEuaXNFdmVuKCkgfHwgIWIuaXNFdmVuKCkpIHsgYS5hZGRUbyh0aGlzLGEpOyBiLnN1YlRvKG0sYik7IH1cbiAgICAgICAgYS5yU2hpZnRUbygxLGEpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZighYi5pc0V2ZW4oKSkgYi5zdWJUbyhtLGIpO1xuICAgICAgYi5yU2hpZnRUbygxLGIpO1xuICAgIH1cbiAgICB3aGlsZSh2LmlzRXZlbigpKSB7XG4gICAgICB2LnJTaGlmdFRvKDEsdik7XG4gICAgICBpZihhYykge1xuICAgICAgICBpZighYy5pc0V2ZW4oKSB8fCAhZC5pc0V2ZW4oKSkgeyBjLmFkZFRvKHRoaXMsYyk7IGQuc3ViVG8obSxkKTsgfVxuICAgICAgICBjLnJTaGlmdFRvKDEsYyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmKCFkLmlzRXZlbigpKSBkLnN1YlRvKG0sZCk7XG4gICAgICBkLnJTaGlmdFRvKDEsZCk7XG4gICAgfVxuICAgIGlmKHUuY29tcGFyZVRvKHYpID49IDApIHtcbiAgICAgIHUuc3ViVG8odix1KTtcbiAgICAgIGlmKGFjKSBhLnN1YlRvKGMsYSk7XG4gICAgICBiLnN1YlRvKGQsYik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdi5zdWJUbyh1LHYpO1xuICAgICAgaWYoYWMpIGMuc3ViVG8oYSxjKTtcbiAgICAgIGQuc3ViVG8oYixkKTtcbiAgICB9XG4gIH1cbiAgaWYodi5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpICE9IDApIHJldHVybiBCaWdJbnRlZ2VyLlpFUk87XG4gIGlmKGQuY29tcGFyZVRvKG0pID49IDApIHJldHVybiBkLnN1YnRyYWN0KG0pO1xuICBpZihkLnNpZ251bSgpIDwgMCkgZC5hZGRUbyhtLGQpOyBlbHNlIHJldHVybiBkO1xuICBpZihkLnNpZ251bSgpIDwgMCkgcmV0dXJuIGQuYWRkKG0pOyBlbHNlIHJldHVybiBkO1xufVxuXG4vLyBwcm90ZWN0ZWRcbnByb3RvLmNodW5rU2l6ZSA9IGJucENodW5rU2l6ZTtcbnByb3RvLnRvUmFkaXggPSBibnBUb1JhZGl4O1xucHJvdG8uZnJvbVJhZGl4ID0gYm5wRnJvbVJhZGl4O1xucHJvdG8uZnJvbU51bWJlciA9IGJucEZyb21OdW1iZXI7XG5wcm90by5iaXR3aXNlVG8gPSBibnBCaXR3aXNlVG87XG5wcm90by5jaGFuZ2VCaXQgPSBibnBDaGFuZ2VCaXQ7XG5wcm90by5hZGRUbyA9IGJucEFkZFRvO1xucHJvdG8uZE11bHRpcGx5ID0gYm5wRE11bHRpcGx5O1xucHJvdG8uZEFkZE9mZnNldCA9IGJucERBZGRPZmZzZXQ7XG5wcm90by5tdWx0aXBseUxvd2VyVG8gPSBibnBNdWx0aXBseUxvd2VyVG87XG5wcm90by5tdWx0aXBseVVwcGVyVG8gPSBibnBNdWx0aXBseVVwcGVyVG87XG5wcm90by5tb2RJbnQgPSBibnBNb2RJbnQ7XG5cbi8vIHB1YmxpY1xucHJvdG8uY2xvbmUgPSBibkNsb25lO1xucHJvdG8uaW50VmFsdWUgPSBibkludFZhbHVlO1xucHJvdG8uYnl0ZVZhbHVlID0gYm5CeXRlVmFsdWU7XG5wcm90by5zaG9ydFZhbHVlID0gYm5TaG9ydFZhbHVlO1xucHJvdG8uc2lnbnVtID0gYm5TaWdOdW07XG5wcm90by50b0J5dGVBcnJheSA9IGJuVG9CeXRlQXJyYXk7XG5wcm90by5lcXVhbHMgPSBibkVxdWFscztcbnByb3RvLm1pbiA9IGJuTWluO1xucHJvdG8ubWF4ID0gYm5NYXg7XG5wcm90by5hbmQgPSBibkFuZDtcbnByb3RvLm9yID0gYm5PcjtcbnByb3RvLnhvciA9IGJuWG9yO1xucHJvdG8uYW5kTm90ID0gYm5BbmROb3Q7XG5wcm90by5ub3QgPSBibk5vdDtcbnByb3RvLnNoaWZ0TGVmdCA9IGJuU2hpZnRMZWZ0O1xucHJvdG8uc2hpZnRSaWdodCA9IGJuU2hpZnRSaWdodDtcbnByb3RvLmdldExvd2VzdFNldEJpdCA9IGJuR2V0TG93ZXN0U2V0Qml0O1xucHJvdG8uYml0Q291bnQgPSBibkJpdENvdW50O1xucHJvdG8udGVzdEJpdCA9IGJuVGVzdEJpdDtcbnByb3RvLnNldEJpdCA9IGJuU2V0Qml0O1xucHJvdG8uY2xlYXJCaXQgPSBibkNsZWFyQml0O1xucHJvdG8uZmxpcEJpdCA9IGJuRmxpcEJpdDtcbnByb3RvLmFkZCA9IGJuQWRkO1xucHJvdG8uc3VidHJhY3QgPSBiblN1YnRyYWN0O1xucHJvdG8ubXVsdGlwbHkgPSBibk11bHRpcGx5O1xucHJvdG8uZGl2aWRlID0gYm5EaXZpZGU7XG5wcm90by5yZW1haW5kZXIgPSBiblJlbWFpbmRlcjtcbnByb3RvLmRpdmlkZUFuZFJlbWFpbmRlciA9IGJuRGl2aWRlQW5kUmVtYWluZGVyO1xucHJvdG8ubW9kUG93ID0gYm5Nb2RQb3c7XG5wcm90by5tb2RJbnZlcnNlID0gYm5Nb2RJbnZlcnNlO1xucHJvdG8ucG93ID0gYm5Qb3c7XG5wcm90by5nY2QgPSBibkdDRDtcblxuLy8gSlNCTi1zcGVjaWZpYyBleHRlbnNpb25cbnByb3RvLnNxdWFyZSA9IGJuU3F1YXJlO1xuXG4vLyBCaWdJbnRlZ2VyIGludGVyZmFjZXMgbm90IGltcGxlbWVudGVkIGluIGpzYm46XG5cbi8vIEJpZ0ludGVnZXIoaW50IHNpZ251bSwgYnl0ZVtdIG1hZ25pdHVkZSlcbi8vIGRvdWJsZSBkb3VibGVWYWx1ZSgpXG4vLyBmbG9hdCBmbG9hdFZhbHVlKClcbi8vIGludCBoYXNoQ29kZSgpXG4vLyBsb25nIGxvbmdWYWx1ZSgpXG4vLyBzdGF0aWMgQmlnSW50ZWdlciB2YWx1ZU9mKGxvbmcgdmFsKVxuXG4vLyBcImNvbnN0YW50c1wiXG5CaWdJbnRlZ2VyLlpFUk8gPSBuYnYoMCk7XG5CaWdJbnRlZ2VyLk9ORSA9IG5idigxKTtcbkJpZ0ludGVnZXIudmFsdWVPZiA9IG5idjtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvZGwvfi9iaWdpL2xpYi9iaWdpLmpzXG4gKiogbW9kdWxlIGlkID0gMTVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIEZJWE1FOiBLaW5kIG9mIGEgd2VpcmQgd2F5IHRvIHRocm93IGV4Y2VwdGlvbnMsIGNvbnNpZGVyIHJlbW92aW5nXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0JylcbnZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZSgnLi9iaWdpJylcblxuLyoqXG4gKiBUdXJucyBhIGJ5dGUgYXJyYXkgaW50byBhIGJpZyBpbnRlZ2VyLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBpbnRlcnByZXQgYSBieXRlIGFycmF5IGFzIGEgYmlnIGludGVnZXIgaW4gYmlnXG4gKiBlbmRpYW4gbm90YXRpb24uXG4gKi9cbkJpZ0ludGVnZXIuZnJvbUJ5dGVBcnJheVVuc2lnbmVkID0gZnVuY3Rpb24oYnl0ZUFycmF5KSB7XG4gIC8vIEJpZ0ludGVnZXIgZXhwZWN0cyBhIERFUiBpbnRlZ2VyIGNvbmZvcm1hbnQgYnl0ZSBhcnJheVxuICBpZiAoYnl0ZUFycmF5WzBdICYgMHg4MCkge1xuICAgIHJldHVybiBuZXcgQmlnSW50ZWdlcihbMF0uY29uY2F0KGJ5dGVBcnJheSkpXG4gIH1cblxuICByZXR1cm4gbmV3IEJpZ0ludGVnZXIoYnl0ZUFycmF5KVxufVxuXG4vKipcbiAqIFJldHVybnMgYSBieXRlIGFycmF5IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBiaWcgaW50ZWdlci5cbiAqXG4gKiBUaGlzIHJldHVybnMgdGhlIGFic29sdXRlIG9mIHRoZSBjb250YWluZWQgdmFsdWUgaW4gYmlnIGVuZGlhblxuICogZm9ybS4gQSB2YWx1ZSBvZiB6ZXJvIHJlc3VsdHMgaW4gYW4gZW1wdHkgYXJyYXkuXG4gKi9cbkJpZ0ludGVnZXIucHJvdG90eXBlLnRvQnl0ZUFycmF5VW5zaWduZWQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IHRoaXMudG9CeXRlQXJyYXkoKVxuICByZXR1cm4gYnl0ZUFycmF5WzBdID09PSAwID8gYnl0ZUFycmF5LnNsaWNlKDEpIDogYnl0ZUFycmF5XG59XG5cbkJpZ0ludGVnZXIuZnJvbURFUkludGVnZXIgPSBmdW5jdGlvbihieXRlQXJyYXkpIHtcbiAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGJ5dGVBcnJheSlcbn1cblxuLypcbiAqIENvbnZlcnRzIEJpZ0ludGVnZXIgdG8gYSBERVIgaW50ZWdlciByZXByZXNlbnRhdGlvbi5cbiAqXG4gKiBUaGUgZm9ybWF0IGZvciB0aGlzIHZhbHVlIHVzZXMgdGhlIG1vc3Qgc2lnbmlmaWNhbnQgYml0IGFzIGEgc2lnblxuICogYml0LiAgSWYgdGhlIG1vc3Qgc2lnbmlmaWNhbnQgYml0IGlzIGFscmVhZHkgc2V0IGFuZCB0aGUgaW50ZWdlciBpc1xuICogcG9zaXRpdmUsIGEgMHgwMCBpcyBwcmVwZW5kZWQuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgICAwID0+ICAgICAweDAwXG4gKiAgICAgIDEgPT4gICAgIDB4MDFcbiAqICAgICAtMSA9PiAgICAgMHg4MVxuICogICAgMTI3ID0+ICAgICAweDdmXG4gKiAgIC0xMjcgPT4gICAgIDB4ZmZcbiAqICAgIDEyOCA9PiAgIDB4MDA4MFxuICogICAtMTI4ID0+ICAgICAweDgwXG4gKiAgICAyNTUgPT4gICAweDAwZmZcbiAqICAgLTI1NSA9PiAgICAgMHhmZlxuICogIDE2MzAwID0+ICAgMHgzZmFjXG4gKiAtMTYzMDAgPT4gICAweGJmYWNcbiAqICA2MjMwMCA9PiAweDAwZjM1Y1xuICogLTYyMzAwID0+ICAgMHhmMzVjXG4qL1xuQmlnSW50ZWdlci5wcm90b3R5cGUudG9ERVJJbnRlZ2VyID0gQmlnSW50ZWdlci5wcm90b3R5cGUudG9CeXRlQXJyYXlcblxuQmlnSW50ZWdlci5mcm9tQnVmZmVyID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIC8vIEJpZ0ludGVnZXIgZXhwZWN0cyBhIERFUiBpbnRlZ2VyIGNvbmZvcm1hbnQgYnl0ZSBhcnJheVxuICBpZiAoYnVmZmVyWzBdICYgMHg4MCkge1xuICAgIHZhciBieXRlQXJyYXkgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChidWZmZXIpXG5cbiAgICByZXR1cm4gbmV3IEJpZ0ludGVnZXIoWzBdLmNvbmNhdChieXRlQXJyYXkpKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGJ1ZmZlcilcbn1cblxuQmlnSW50ZWdlci5mcm9tSGV4ID0gZnVuY3Rpb24oaGV4KSB7XG4gIGlmIChoZXggPT09ICcnKSByZXR1cm4gQmlnSW50ZWdlci5aRVJPXG5cbiAgYXNzZXJ0LmVxdWFsKGhleCwgaGV4Lm1hdGNoKC9eW0EtRmEtZjAtOV0rLyksICdJbnZhbGlkIGhleCBzdHJpbmcnKVxuICBhc3NlcnQuZXF1YWwoaGV4Lmxlbmd0aCAlIDIsIDAsICdJbmNvbXBsZXRlIGhleCcpXG4gIHJldHVybiBuZXcgQmlnSW50ZWdlcihoZXgsIDE2KVxufVxuXG5CaWdJbnRlZ2VyLnByb3RvdHlwZS50b0J1ZmZlciA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IHRoaXMudG9CeXRlQXJyYXlVbnNpZ25lZCgpXG4gIHZhciB6ZXJvcyA9IFtdXG5cbiAgdmFyIHBhZGRpbmcgPSBzaXplIC0gYnl0ZUFycmF5Lmxlbmd0aFxuICB3aGlsZSAoemVyb3MubGVuZ3RoIDwgcGFkZGluZykgemVyb3MucHVzaCgwKVxuXG4gIHJldHVybiBuZXcgQnVmZmVyKHplcm9zLmNvbmNhdChieXRlQXJyYXkpKVxufVxuXG5CaWdJbnRlZ2VyLnByb3RvdHlwZS50b0hleCA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgcmV0dXJuIHRoaXMudG9CdWZmZXIoc2l6ZSkudG9TdHJpbmcoJ2hleCcpXG59XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL2RsL34vYmlnaS9saWIvY29udmVydC5qc1xuICoqIG1vZHVsZSBpZCA9IDE2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0JylcbnZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZSgnYmlnaScpXG5cbnZhciBQb2ludCA9IHJlcXVpcmUoJy4vcG9pbnQnKVxuXG5mdW5jdGlvbiBDdXJ2ZShwLCBhLCBiLCBHeCwgR3ksIG4sIGgpIHtcbiAgdGhpcy5wID0gcFxuICB0aGlzLmEgPSBhXG4gIHRoaXMuYiA9IGJcbiAgdGhpcy5HID0gUG9pbnQuZnJvbUFmZmluZSh0aGlzLCBHeCwgR3kpXG4gIHRoaXMubiA9IG5cbiAgdGhpcy5oID0gaFxuXG4gIHRoaXMuaW5maW5pdHkgPSBuZXcgUG9pbnQodGhpcywgbnVsbCwgbnVsbCwgQmlnSW50ZWdlci5aRVJPKVxuXG4gIC8vIHJlc3VsdCBjYWNoaW5nXG4gIHRoaXMucE92ZXJGb3VyID0gcC5hZGQoQmlnSW50ZWdlci5PTkUpLnNoaWZ0UmlnaHQoMilcbn1cblxuQ3VydmUucHJvdG90eXBlLnBvaW50RnJvbVggPSBmdW5jdGlvbihpc09kZCwgeCkge1xuICB2YXIgYWxwaGEgPSB4LnBvdygzKS5hZGQodGhpcy5hLm11bHRpcGx5KHgpKS5hZGQodGhpcy5iKS5tb2QodGhpcy5wKVxuICB2YXIgYmV0YSA9IGFscGhhLm1vZFBvdyh0aGlzLnBPdmVyRm91ciwgdGhpcy5wKVxuXG4gIHZhciB5ID0gYmV0YVxuICBpZiAoYmV0YS5pc0V2ZW4oKSBeICFpc09kZCkge1xuICAgIHkgPSB0aGlzLnAuc3VidHJhY3QoeSkgLy8gLXkgJSBwXG4gIH1cblxuICByZXR1cm4gUG9pbnQuZnJvbUFmZmluZSh0aGlzLCB4LCB5KVxufVxuXG5DdXJ2ZS5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uKFEpIHtcbiAgaWYgKFEgPT09IHRoaXMuaW5maW5pdHkpIHJldHVybiB0cnVlXG5cbiAgcmV0dXJuIFEuei5zaWdudW0oKSA9PT0gMCAmJiBRLnkuc2lnbnVtKCkgIT09IDBcbn1cblxuQ3VydmUucHJvdG90eXBlLmlzT25DdXJ2ZSA9IGZ1bmN0aW9uKFEpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eShRKSkgcmV0dXJuIHRydWVcblxuICB2YXIgeCA9IFEuYWZmaW5lWFxuICB2YXIgeSA9IFEuYWZmaW5lWVxuICB2YXIgYSA9IHRoaXMuYVxuICB2YXIgYiA9IHRoaXMuYlxuICB2YXIgcCA9IHRoaXMucFxuXG4gIC8vIENoZWNrIHRoYXQgeFEgYW5kIHlRIGFyZSBpbnRlZ2VycyBpbiB0aGUgaW50ZXJ2YWwgWzAsIHAgLSAxXVxuICBpZiAoeC5zaWdudW0oKSA8IDAgfHwgeC5jb21wYXJlVG8ocCkgPj0gMCkgcmV0dXJuIGZhbHNlXG4gIGlmICh5LnNpZ251bSgpIDwgMCB8fCB5LmNvbXBhcmVUbyhwKSA+PSAwKSByZXR1cm4gZmFsc2VcblxuICAvLyBhbmQgY2hlY2sgdGhhdCB5XjIgPSB4XjMgKyBheCArIGIgKG1vZCBwKVxuICB2YXIgbGhzID0geS5zcXVhcmUoKS5tb2QocClcbiAgdmFyIHJocyA9IHgucG93KDMpLmFkZChhLm11bHRpcGx5KHgpKS5hZGQoYikubW9kKHApXG4gIHJldHVybiBsaHMuZXF1YWxzKHJocylcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSBhbiBlbGxpcHRpYyBjdXJ2ZSBwb2ludC5cbiAqXG4gKiBTZWUgU0VDIDEsIHNlY3Rpb24gMy4yLjIuMTogRWxsaXB0aWMgQ3VydmUgUHVibGljIEtleSBWYWxpZGF0aW9uIFByaW1pdGl2ZVxuICovXG5DdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbihRKSB7XG4gIC8vIENoZWNrIFEgIT0gT1xuICBhc3NlcnQoIXRoaXMuaXNJbmZpbml0eShRKSwgJ1BvaW50IGlzIGF0IGluZmluaXR5JylcbiAgYXNzZXJ0KHRoaXMuaXNPbkN1cnZlKFEpLCAnUG9pbnQgaXMgbm90IG9uIHRoZSBjdXJ2ZScpXG5cbiAgLy8gQ2hlY2sgblEgPSBPICh3aGVyZSBRIGlzIGEgc2NhbGFyIG11bHRpcGxlIG9mIEcpXG4gIHZhciBuUSA9IFEubXVsdGlwbHkodGhpcy5uKVxuICBhc3NlcnQodGhpcy5pc0luZmluaXR5KG5RKSwgJ1BvaW50IGlzIG5vdCBhIHNjYWxhciBtdWx0aXBsZSBvZiBHJylcblxuICByZXR1cm4gdHJ1ZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEN1cnZlXG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL2RsL34vZWN1cnZlL2xpYi9jdXJ2ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgQmlnSW50ZWdlciA9IHJlcXVpcmUoJ2JpZ2knKVxuXG52YXIgY3VydmVzID0gcmVxdWlyZSgnLi9jdXJ2ZXMnKVxudmFyIEN1cnZlID0gcmVxdWlyZSgnLi9jdXJ2ZScpXG5cbmZ1bmN0aW9uIGdldEN1cnZlQnlOYW1lKG5hbWUpIHtcbiAgdmFyIGN1cnZlID0gY3VydmVzW25hbWVdXG4gIGlmICghY3VydmUpIHJldHVybiBudWxsXG5cbiAgdmFyIHAgPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5wLCAxNilcbiAgdmFyIGEgPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5hLCAxNilcbiAgdmFyIGIgPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5iLCAxNilcbiAgdmFyIG4gPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5uLCAxNilcbiAgdmFyIGggPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5oLCAxNilcbiAgdmFyIEd4ID0gbmV3IEJpZ0ludGVnZXIoY3VydmUuR3gsIDE2KVxuICB2YXIgR3kgPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5HeSwgMTYpXG5cbiAgcmV0dXJuIG5ldyBDdXJ2ZShwLCBhLCBiLCBHeCwgR3ksIG4sIGgpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0Q3VydmVCeU5hbWVcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvZGwvfi9lY3VydmUvbGliL25hbWVzLmpzXG4gKiogbW9kdWxlIGlkID0gMThcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0ge1xuXHRcInNlY3AxMjhyMVwiOiB7XG5cdFx0XCJwXCI6IFwiZmZmZmZmZmRmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZcIixcblx0XHRcImFcIjogXCJmZmZmZmZmZGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmY1wiLFxuXHRcdFwiYlwiOiBcImU4NzU3OWMxMTA3OWY0M2RkODI0OTkzYzJjZWU1ZWQzXCIsXG5cdFx0XCJuXCI6IFwiZmZmZmZmZmUwMDAwMDAwMDc1YTMwZDFiOTAzOGExMTVcIixcblx0XHRcImhcIjogXCIwMVwiLFxuXHRcdFwiR3hcIjogXCIxNjFmZjc1MjhiODk5YjJkMGMyODYwN2NhNTJjNWI4NlwiLFxuXHRcdFwiR3lcIjogXCJjZjVhYzgzOTViYWZlYjEzYzAyZGEyOTJkZGVkN2E4M1wiXG5cdH0sXG5cdFwic2VjcDE2MGsxXCI6IHtcblx0XHRcInBcIjogXCJmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWZmZmZhYzczXCIsXG5cdFx0XCJhXCI6IFwiMDBcIixcblx0XHRcImJcIjogXCIwN1wiLFxuXHRcdFwiblwiOiBcIjAxMDAwMDAwMDAwMDAwMDAwMDAwMDFiOGZhMTZkZmFiOWFjYTE2YjZiM1wiLFxuXHRcdFwiaFwiOiBcIjAxXCIsXG5cdFx0XCJHeFwiOiBcIjNiNGMzODJjZTM3YWExOTJhNDAxOWU3NjMwMzZmNGY1ZGQ0ZDdlYmJcIixcblx0XHRcIkd5XCI6IFwiOTM4Y2Y5MzUzMThmZGNlZDZiYzI4Mjg2NTMxNzMzYzNmMDNjNGZlZVwiXG5cdH0sXG5cdFwic2VjcDE2MHIxXCI6IHtcblx0XHRcInBcIjogXCJmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjdmZmZmZmZmXCIsXG5cdFx0XCJhXCI6IFwiZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmY3ZmZmZmZmY1wiLFxuXHRcdFwiYlwiOiBcIjFjOTdiZWZjNTRiZDdhOGI2NWFjZjg5ZjgxZDRkNGFkYzU2NWZhNDVcIixcblx0XHRcIm5cIjogXCIwMTAwMDAwMDAwMDAwMDAwMDAwMDAxZjRjOGY5MjdhZWQzY2E3NTIyNTdcIixcblx0XHRcImhcIjogXCIwMVwiLFxuXHRcdFwiR3hcIjogXCI0YTk2YjU2ODhlZjU3MzI4NDY2NDY5ODk2OGMzOGJiOTEzY2JmYzgyXCIsXG5cdFx0XCJHeVwiOiBcIjIzYTYyODU1MzE2ODk0N2Q1OWRjYzkxMjA0MjM1MTM3N2FjNWZiMzJcIlxuXHR9LFxuXHRcInNlY3AxOTJrMVwiOiB7XG5cdFx0XCJwXCI6IFwiZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWZmZmZlZTM3XCIsXG5cdFx0XCJhXCI6IFwiMDBcIixcblx0XHRcImJcIjogXCIwM1wiLFxuXHRcdFwiblwiOiBcImZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZTI2ZjJmYzE3MGY2OTQ2NmE3NGRlZmQ4ZFwiLFxuXHRcdFwiaFwiOiBcIjAxXCIsXG5cdFx0XCJHeFwiOiBcImRiNGZmMTBlYzA1N2U5YWUyNmIwN2QwMjgwYjdmNDM0MWRhNWQxYjFlYWUwNmM3ZFwiLFxuXHRcdFwiR3lcIjogXCI5YjJmMmY2ZDljNTYyOGE3ODQ0MTYzZDAxNWJlODYzNDQwODJhYTg4ZDk1ZTJmOWRcIlxuXHR9LFxuXHRcInNlY3AxOTJyMVwiOiB7XG5cdFx0XCJwXCI6IFwiZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmVmZmZmZmZmZmZmZmZmZmZmXCIsXG5cdFx0XCJhXCI6IFwiZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmVmZmZmZmZmZmZmZmZmZmZjXCIsXG5cdFx0XCJiXCI6IFwiNjQyMTA1MTllNTljODBlNzBmYTdlOWFiNzIyNDMwNDlmZWI4ZGVlY2MxNDZiOWIxXCIsXG5cdFx0XCJuXCI6IFwiZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmOTlkZWY4MzYxNDZiYzliMWI0ZDIyODMxXCIsXG5cdFx0XCJoXCI6IFwiMDFcIixcblx0XHRcIkd4XCI6IFwiMTg4ZGE4MGViMDMwOTBmNjdjYmYyMGViNDNhMTg4MDBmNGZmMGFmZDgyZmYxMDEyXCIsXG5cdFx0XCJHeVwiOiBcIjA3MTkyYjk1ZmZjOGRhNzg2MzEwMTFlZDZiMjRjZGQ1NzNmOTc3YTExZTc5NDgxMVwiXG5cdH0sXG5cdFwic2VjcDI1NmsxXCI6IHtcblx0XHRcInBcIjogXCJmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWZmZmZmYzJmXCIsXG5cdFx0XCJhXCI6IFwiMDBcIixcblx0XHRcImJcIjogXCIwN1wiLFxuXHRcdFwiblwiOiBcImZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlYmFhZWRjZTZhZjQ4YTAzYmJmZDI1ZThjZDAzNjQxNDFcIixcblx0XHRcImhcIjogXCIwMVwiLFxuXHRcdFwiR3hcIjogXCI3OWJlNjY3ZWY5ZGNiYmFjNTVhMDYyOTVjZTg3MGIwNzAyOWJmY2RiMmRjZTI4ZDk1OWYyODE1YjE2ZjgxNzk4XCIsXG5cdFx0XCJHeVwiOiBcIjQ4M2FkYTc3MjZhM2M0NjU1ZGE0ZmJmYzBlMTEwOGE4ZmQxN2I0NDhhNjg1NTQxOTljNDdkMDhmZmIxMGQ0YjhcIlxuXHR9LFxuXHRcInNlY3AyNTZyMVwiOiB7XG5cdFx0XCJwXCI6IFwiZmZmZmZmZmYwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlwiLFxuXHRcdFwiYVwiOiBcImZmZmZmZmZmMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmNcIixcblx0XHRcImJcIjogXCI1YWM2MzVkOGFhM2E5M2U3YjNlYmJkNTU3Njk4ODZiYzY1MWQwNmIwY2M1M2IwZjYzYmNlM2MzZTI3ZDI2MDRiXCIsXG5cdFx0XCJuXCI6IFwiZmZmZmZmZmYwMDAwMDAwMGZmZmZmZmZmZmZmZmZmZmZiY2U2ZmFhZGE3MTc5ZTg0ZjNiOWNhYzJmYzYzMjU1MVwiLFxuXHRcdFwiaFwiOiBcIjAxXCIsXG5cdFx0XCJHeFwiOiBcIjZiMTdkMWYyZTEyYzQyNDdmOGJjZTZlNTYzYTQ0MGYyNzcwMzdkODEyZGViMzNhMGY0YTEzOTQ1ZDg5OGMyOTZcIixcblx0XHRcIkd5XCI6IFwiNGZlMzQyZTJmZTFhN2Y5YjhlZTdlYjRhN2MwZjllMTYyYmNlMzM1NzZiMzE1ZWNlY2JiNjQwNjgzN2JmNTFmNVwiXG5cdH1cbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9kbC9+L2VjdXJ2ZS9saWIvY3VydmVzLmpzb25cbiAqKiBtb2R1bGUgaWQgPSAxOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gQmFzZTU4IGVuY29kaW5nL2RlY29kaW5nXG4vLyBPcmlnaW5hbGx5IHdyaXR0ZW4gYnkgTWlrZSBIZWFybiBmb3IgQml0Y29pbkpcbi8vIENvcHlyaWdodCAoYykgMjAxMSBHb29nbGUgSW5jXG4vLyBQb3J0ZWQgdG8gSmF2YVNjcmlwdCBieSBTdGVmYW4gVGhvbWFzXG4vLyBNZXJnZWQgQnVmZmVyIHJlZmFjdG9yaW5ncyBmcm9tIGJhc2U1OC1uYXRpdmUgYnkgU3RlcGhlbiBQYWlyXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTMgQml0UGF5IEluY1xuXG52YXIgQUxQSEFCRVQgPSAnMTIzNDU2Nzg5QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5eidcbnZhciBBTFBIQUJFVF9NQVAgPSB7fVxuZm9yKHZhciBpID0gMDsgaSA8IEFMUEhBQkVULmxlbmd0aDsgaSsrKSB7XG4gIEFMUEhBQkVUX01BUFtBTFBIQUJFVC5jaGFyQXQoaSldID0gaVxufVxudmFyIEJBU0UgPSA1OFxuXG5mdW5jdGlvbiBlbmNvZGUoYnVmZmVyKSB7XG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gJydcblxuICB2YXIgaSwgaiwgZGlnaXRzID0gWzBdXG4gIGZvciAoaSA9IDA7IGkgPCBidWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKGogPSAwOyBqIDwgZGlnaXRzLmxlbmd0aDsgaisrKSBkaWdpdHNbal0gPDw9IDhcblxuICAgIGRpZ2l0c1swXSArPSBidWZmZXJbaV1cblxuICAgIHZhciBjYXJyeSA9IDBcbiAgICBmb3IgKGogPSAwOyBqIDwgZGlnaXRzLmxlbmd0aDsgKytqKSB7XG4gICAgICBkaWdpdHNbal0gKz0gY2FycnlcblxuICAgICAgY2FycnkgPSAoZGlnaXRzW2pdIC8gQkFTRSkgfCAwXG4gICAgICBkaWdpdHNbal0gJT0gQkFTRVxuICAgIH1cblxuICAgIHdoaWxlIChjYXJyeSkge1xuICAgICAgZGlnaXRzLnB1c2goY2FycnkgJSBCQVNFKVxuXG4gICAgICBjYXJyeSA9IChjYXJyeSAvIEJBU0UpIHwgMFxuICAgIH1cbiAgfVxuXG4gIC8vIGRlYWwgd2l0aCBsZWFkaW5nIHplcm9zXG4gIGZvciAoaSA9IDA7IGJ1ZmZlcltpXSA9PT0gMCAmJiBpIDwgYnVmZmVyLmxlbmd0aCAtIDE7IGkrKykgZGlnaXRzLnB1c2goMClcblxuICByZXR1cm4gZGlnaXRzLnJldmVyc2UoKS5tYXAoZnVuY3Rpb24oZGlnaXQpIHsgcmV0dXJuIEFMUEhBQkVUW2RpZ2l0XSB9KS5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBkZWNvZGUoc3RyaW5nKSB7XG4gIGlmIChzdHJpbmcubGVuZ3RoID09PSAwKSByZXR1cm4gW11cblxuICB2YXIgaSwgaiwgYnl0ZXMgPSBbMF1cbiAgZm9yIChpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjID0gc3RyaW5nW2ldXG4gICAgaWYgKCEoYyBpbiBBTFBIQUJFVF9NQVApKSB0aHJvdyBuZXcgRXJyb3IoJ05vbi1iYXNlNTggY2hhcmFjdGVyJylcblxuICAgIGZvciAoaiA9IDA7IGogPCBieXRlcy5sZW5ndGg7IGorKykgYnl0ZXNbal0gKj0gQkFTRVxuICAgIGJ5dGVzWzBdICs9IEFMUEhBQkVUX01BUFtjXVxuXG4gICAgdmFyIGNhcnJ5ID0gMFxuICAgIGZvciAoaiA9IDA7IGogPCBieXRlcy5sZW5ndGg7ICsraikge1xuICAgICAgYnl0ZXNbal0gKz0gY2FycnlcblxuICAgICAgY2FycnkgPSBieXRlc1tqXSA+PiA4XG4gICAgICBieXRlc1tqXSAmPSAweGZmXG4gICAgfVxuXG4gICAgd2hpbGUgKGNhcnJ5KSB7XG4gICAgICBieXRlcy5wdXNoKGNhcnJ5ICYgMHhmZilcblxuICAgICAgY2FycnkgPj49IDhcbiAgICB9XG4gIH1cblxuICAvLyBkZWFsIHdpdGggbGVhZGluZyB6ZXJvc1xuICBmb3IgKGkgPSAwOyBzdHJpbmdbaV0gPT09ICcxJyAmJiBpIDwgc3RyaW5nLmxlbmd0aCAtIDE7IGkrKykgYnl0ZXMucHVzaCgwKVxuXG4gIHJldHVybiBieXRlcy5yZXZlcnNlKClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGVuY29kZTogZW5jb2RlLFxuICBkZWNvZGU6IGRlY29kZVxufVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9kbC9+L2JzNTgvbGliL2JzNTguanNcbiAqKiBtb2R1bGUgaWQgPSAyMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpIC8vIGRlcml2ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbmpzL2JpdGNvaW5qcy1saWJcclxuXHJcbmZ1bmN0aW9uIGhhc2gxNjAoYnVmZmVyKSB7XHJcbiAgcmV0dXJuIHJpcGVtZDE2MChzaGEyNTYoYnVmZmVyKSlcclxufVxyXG5cclxuZnVuY3Rpb24gaGFzaDI1NihidWZmZXIpIHtcclxuICByZXR1cm4gc2hhMjU2KHNoYTI1NihidWZmZXIpKVxyXG59XHJcblxyXG5mdW5jdGlvbiByaXBlbWQxNjAoYnVmZmVyKSB7XHJcbiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdybWQxNjAnKS51cGRhdGUoYnVmZmVyKS5kaWdlc3QoKVxyXG59XHJcblxyXG5mdW5jdGlvbiBzaGExKGJ1ZmZlcikge1xyXG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShidWZmZXIpLmRpZ2VzdCgpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNoYTI1NihidWZmZXIpIHtcclxuICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShidWZmZXIpLmRpZ2VzdCgpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNoYTUxMihidWZmZXIpIHtcclxuICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTUxMicpLnVwZGF0ZShidWZmZXIpLmRpZ2VzdCgpXHJcbn1cclxuXHJcbi8vIEZJWE1FOiBOYW1lIG5vdCBjb25zaXN0ZW50IHdpdGggb3RoZXJzXHJcbmZ1bmN0aW9uIEhtYWNTSEEyNTYoYnVmZmVyLCBzZWNyZXQpIHtcclxuICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhtYWMoJ3NoYTI1NicsIHNlY3JldCkudXBkYXRlKGJ1ZmZlcikuZGlnZXN0KClcclxufVxyXG5cclxuZnVuY3Rpb24gSG1hY1NIQTUxMihidWZmZXIsIHNlY3JldCkge1xyXG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSG1hYygnc2hhNTEyJywgc2VjcmV0KS51cGRhdGUoYnVmZmVyKS5kaWdlc3QoKVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICByaXBlbWQxNjA6IHJpcGVtZDE2MCxcclxuICBzaGExOiBzaGExLFxyXG4gIHNoYTI1Njogc2hhMjU2LFxyXG4gIHNoYTUxMjogc2hhNTEyLFxyXG4gIGhhc2gxNjA6IGhhc2gxNjAsXHJcbiAgaGFzaDI1NjogaGFzaDI1NixcclxuICBIbWFjU0hBMjU2OiBIbWFjU0hBMjU2LFxyXG4gIEhtYWNTSEE1MTI6IEhtYWNTSEE1MTJcclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBjOi9iaXRzaGFyZXN3YWxsZXQvd3d3L2FwcC9kbC9zcmMvY29tbW9uL2hhc2guanNcbiAqKi8iLCJ2YXIgcm5nID0gcmVxdWlyZSgnLi9ybmcnKVxuXG5mdW5jdGlvbiBlcnJvciAoKSB7XG4gIHZhciBtID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpLmpvaW4oJyAnKVxuICB0aHJvdyBuZXcgRXJyb3IoW1xuICAgIG0sXG4gICAgJ3dlIGFjY2VwdCBwdWxsIHJlcXVlc3RzJyxcbiAgICAnaHR0cDovL2dpdGh1Yi5jb20vZG9taW5pY3RhcnIvY3J5cHRvLWJyb3dzZXJpZnknXG4gICAgXS5qb2luKCdcXG4nKSlcbn1cblxuZXhwb3J0cy5jcmVhdGVIYXNoID0gcmVxdWlyZSgnLi9jcmVhdGUtaGFzaCcpXG5cbmV4cG9ydHMuY3JlYXRlSG1hYyA9IHJlcXVpcmUoJy4vY3JlYXRlLWhtYWMnKVxuXG5leHBvcnRzLnJhbmRvbUJ5dGVzID0gZnVuY3Rpb24oc2l6ZSwgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrICYmIGNhbGxiYWNrLmNhbGwpIHtcbiAgICB0cnkge1xuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCB1bmRlZmluZWQsIG5ldyBCdWZmZXIocm5nKHNpemUpKSlcbiAgICB9IGNhdGNoIChlcnIpIHsgY2FsbGJhY2soZXJyKSB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIocm5nKHNpemUpKVxuICB9XG59XG5cbmZ1bmN0aW9uIGVhY2goYSwgZikge1xuICBmb3IodmFyIGkgaW4gYSlcbiAgICBmKGFbaV0sIGkpXG59XG5cbmV4cG9ydHMuZ2V0SGFzaGVzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gWydzaGExJywgJ3NoYTI1NicsICdzaGE1MTInLCAnbWQ1JywgJ3JtZDE2MCddXG59XG5cbnZhciBwID0gcmVxdWlyZSgnLi9wYmtkZjInKShleHBvcnRzKVxuZXhwb3J0cy5wYmtkZjIgPSBwLnBia2RmMlxuZXhwb3J0cy5wYmtkZjJTeW5jID0gcC5wYmtkZjJTeW5jXG5cblxuLy8gdGhlIGxlYXN0IEkgY2FuIGRvIGlzIG1ha2UgZXJyb3IgbWVzc2FnZXMgZm9yIHRoZSByZXN0IG9mIHRoZSBub2RlLmpzL2NyeXB0byBhcGkuXG5lYWNoKFsnY3JlYXRlQ3JlZGVudGlhbHMnXG4sICdjcmVhdGVDaXBoZXInXG4sICdjcmVhdGVDaXBoZXJpdidcbiwgJ2NyZWF0ZURlY2lwaGVyJ1xuLCAnY3JlYXRlRGVjaXBoZXJpdidcbiwgJ2NyZWF0ZVNpZ24nXG4sICdjcmVhdGVWZXJpZnknXG4sICdjcmVhdGVEaWZmaWVIZWxsbWFuJ1xuXSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgZXhwb3J0c1tuYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICBlcnJvcignc29ycnksJywgbmFtZSwgJ2lzIG5vdCBpbXBsZW1lbnRlZCB5ZXQnKVxuICB9XG59KVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2NyeXB0by1icm93c2VyaWZ5L2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gMjJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIihmdW5jdGlvbigpIHtcbiAgdmFyIGcgPSAoJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiB3aW5kb3cgPyBnbG9iYWwgOiB3aW5kb3cpIHx8IHt9XG4gIF9jcnlwdG8gPSAoXG4gICAgZy5jcnlwdG8gfHwgZy5tc0NyeXB0byB8fCByZXF1aXJlKCdjcnlwdG8nKVxuICApXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc2l6ZSkge1xuICAgIC8vIE1vZGVybiBCcm93c2Vyc1xuICAgIGlmKF9jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBuZXcgQnVmZmVyKHNpemUpOyAvL2luIGJyb3dzZXJpZnksIHRoaXMgaXMgYW4gZXh0ZW5kZWQgVWludDhBcnJheVxuICAgICAgLyogVGhpcyB3aWxsIG5vdCB3b3JrIGluIG9sZGVyIGJyb3dzZXJzLlxuICAgICAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS93aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlc1xuICAgICAgICovXG4gICAgXG4gICAgICBfY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhieXRlcyk7XG4gICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfVxuICAgIGVsc2UgaWYgKF9jcnlwdG8ucmFuZG9tQnl0ZXMpIHtcbiAgICAgIHJldHVybiBfY3J5cHRvLnJhbmRvbUJ5dGVzKHNpemUpXG4gICAgfVxuICAgIGVsc2VcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ3NlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24gbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXJcXG4nK1xuICAgICAgICAndXNlIGNocm9tZSwgRmlyZUZveCBvciBJbnRlcm5ldCBFeHBsb3JlciAxMSdcbiAgICAgIClcbiAgfVxufSgpKVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2NyeXB0by1icm93c2VyaWZ5L3JuZy5qc1xuICoqIG1vZHVsZSBpZCA9IDIzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKiAoaWdub3JlZCkgKi9cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIGNyeXB0byAoaWdub3JlZClcbiAqKiBtb2R1bGUgaWQgPSAyNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdzaGEuanMnKVxuXG52YXIgbWQ1ID0gdG9Db25zdHJ1Y3RvcihyZXF1aXJlKCcuL21kNScpKVxudmFyIHJtZDE2MCA9IHRvQ29uc3RydWN0b3IocmVxdWlyZSgncmlwZW1kMTYwJykpXG5cbmZ1bmN0aW9uIHRvQ29uc3RydWN0b3IgKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJ1ZmZlcnMgPSBbXVxuICAgIHZhciBtPSB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIChkYXRhLCBlbmMpIHtcbiAgICAgICAgaWYoIUJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgZW5jKVxuICAgICAgICBidWZmZXJzLnB1c2goZGF0YSlcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgIH0sXG4gICAgICBkaWdlc3Q6IGZ1bmN0aW9uIChlbmMpIHtcbiAgICAgICAgdmFyIGJ1ZiA9IEJ1ZmZlci5jb25jYXQoYnVmZmVycylcbiAgICAgICAgdmFyIHIgPSBmbihidWYpXG4gICAgICAgIGJ1ZmZlcnMgPSBudWxsXG4gICAgICAgIHJldHVybiBlbmMgPyByLnRvU3RyaW5nKGVuYykgOiByXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYWxnKSB7XG4gIGlmKCdtZDUnID09PSBhbGcpIHJldHVybiBuZXcgbWQ1KClcbiAgaWYoJ3JtZDE2MCcgPT09IGFsZykgcmV0dXJuIG5ldyBybWQxNjAoKVxuICByZXR1cm4gY3JlYXRlSGFzaChhbGcpXG59XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqICh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vY3J5cHRvLWJyb3dzZXJpZnkvY3JlYXRlLWhhc2guanNcbiAqKiBtb2R1bGUgaWQgPSAyNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhbGcpIHtcbiAgdmFyIEFsZyA9IGV4cG9ydHNbYWxnXVxuICBpZighQWxnKSB0aHJvdyBuZXcgRXJyb3IoYWxnICsgJyBpcyBub3Qgc3VwcG9ydGVkICh3ZSBhY2NlcHQgcHVsbCByZXF1ZXN0cyknKVxuICByZXR1cm4gbmV3IEFsZygpXG59XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXJcbnZhciBIYXNoICAgPSByZXF1aXJlKCcuL2hhc2gnKShCdWZmZXIpXG5cbmV4cG9ydHMuc2hhMSA9IHJlcXVpcmUoJy4vc2hhMScpKEJ1ZmZlciwgSGFzaClcbmV4cG9ydHMuc2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEyNTYnKShCdWZmZXIsIEhhc2gpXG5leHBvcnRzLnNoYTUxMiA9IHJlcXVpcmUoJy4vc2hhNTEyJykoQnVmZmVyLCBIYXNoKVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2NyeXB0by1icm93c2VyaWZ5L34vc2hhLmpzL2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gMjZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJ1ZmZlcikge1xuXG4gIC8vcHJvdG90eXBlIGNsYXNzIGZvciBoYXNoIGZ1bmN0aW9uc1xuICBmdW5jdGlvbiBIYXNoIChibG9ja1NpemUsIGZpbmFsU2l6ZSkge1xuICAgIHRoaXMuX2Jsb2NrID0gbmV3IEJ1ZmZlcihibG9ja1NpemUpIC8vbmV3IFVpbnQzMkFycmF5KGJsb2NrU2l6ZS80KVxuICAgIHRoaXMuX2ZpbmFsU2l6ZSA9IGZpbmFsU2l6ZVxuICAgIHRoaXMuX2Jsb2NrU2l6ZSA9IGJsb2NrU2l6ZVxuICAgIHRoaXMuX2xlbiA9IDBcbiAgICB0aGlzLl9zID0gMFxuICB9XG5cbiAgSGFzaC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9zID0gMFxuICAgIHRoaXMuX2xlbiA9IDBcbiAgfVxuXG4gIEhhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmMpIHtcbiAgICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGRhdGEpIHtcbiAgICAgIGVuYyA9IGVuYyB8fCBcInV0ZjhcIlxuICAgICAgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgZW5jKVxuICAgIH1cblxuICAgIHZhciBsID0gdGhpcy5fbGVuICs9IGRhdGEubGVuZ3RoXG4gICAgdmFyIHMgPSB0aGlzLl9zID0gKHRoaXMuX3MgfHwgMClcbiAgICB2YXIgZiA9IDBcbiAgICB2YXIgYnVmZmVyID0gdGhpcy5fYmxvY2tcblxuICAgIHdoaWxlIChzIDwgbCkge1xuICAgICAgdmFyIHQgPSBNYXRoLm1pbihkYXRhLmxlbmd0aCwgZiArIHRoaXMuX2Jsb2NrU2l6ZSAtIChzICUgdGhpcy5fYmxvY2tTaXplKSlcbiAgICAgIHZhciBjaCA9ICh0IC0gZilcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaDsgaSsrKSB7XG4gICAgICAgIGJ1ZmZlclsocyAlIHRoaXMuX2Jsb2NrU2l6ZSkgKyBpXSA9IGRhdGFbaSArIGZdXG4gICAgICB9XG5cbiAgICAgIHMgKz0gY2hcbiAgICAgIGYgKz0gY2hcblxuICAgICAgaWYgKChzICUgdGhpcy5fYmxvY2tTaXplKSA9PT0gMCkge1xuICAgICAgICB0aGlzLl91cGRhdGUoYnVmZmVyKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9zID0gc1xuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIEhhc2gucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgICAvLyBTdXBwb3NlIHRoZSBsZW5ndGggb2YgdGhlIG1lc3NhZ2UgTSwgaW4gYml0cywgaXMgbFxuICAgIHZhciBsID0gdGhpcy5fbGVuICogOFxuXG4gICAgLy8gQXBwZW5kIHRoZSBiaXQgMSB0byB0aGUgZW5kIG9mIHRoZSBtZXNzYWdlXG4gICAgdGhpcy5fYmxvY2tbdGhpcy5fbGVuICUgdGhpcy5fYmxvY2tTaXplXSA9IDB4ODBcblxuICAgIC8vIGFuZCB0aGVuIGsgemVybyBiaXRzLCB3aGVyZSBrIGlzIHRoZSBzbWFsbGVzdCBub24tbmVnYXRpdmUgc29sdXRpb24gdG8gdGhlIGVxdWF0aW9uIChsICsgMSArIGspID09PSBmaW5hbFNpemUgbW9kIGJsb2NrU2l6ZVxuICAgIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fbGVuICUgdGhpcy5fYmxvY2tTaXplICsgMSlcblxuICAgIGlmIChsICUgKHRoaXMuX2Jsb2NrU2l6ZSAqIDgpID49IHRoaXMuX2ZpbmFsU2l6ZSAqIDgpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jaylcbiAgICAgIHRoaXMuX2Jsb2NrLmZpbGwoMClcbiAgICB9XG5cbiAgICAvLyB0byB0aGlzIGFwcGVuZCB0aGUgYmxvY2sgd2hpY2ggaXMgZXF1YWwgdG8gdGhlIG51bWJlciBsIHdyaXR0ZW4gaW4gYmluYXJ5XG4gICAgLy8gVE9ETzogaGFuZGxlIGNhc2Ugd2hlcmUgbCBpcyA+IE1hdGgucG93KDIsIDI5KVxuICAgIHRoaXMuX2Jsb2NrLndyaXRlSW50MzJCRShsLCB0aGlzLl9ibG9ja1NpemUgLSA0KVxuXG4gICAgdmFyIGhhc2ggPSB0aGlzLl91cGRhdGUodGhpcy5fYmxvY2spIHx8IHRoaXMuX2hhc2goKVxuXG4gICAgcmV0dXJuIGVuYyA/IGhhc2gudG9TdHJpbmcoZW5jKSA6IGhhc2hcbiAgfVxuXG4gIEhhc2gucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdfdXBkYXRlIG11c3QgYmUgaW1wbGVtZW50ZWQgYnkgc3ViY2xhc3MnKVxuICB9XG5cbiAgcmV0dXJuIEhhc2hcbn1cblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9jcnlwdG8tYnJvd3NlcmlmeS9+L3NoYS5qcy9oYXNoLmpzXG4gKiogbW9kdWxlIGlkID0gMjdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTEsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBWZXJzaW9uIDIuMWEgQ29weXJpZ2h0IFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDIuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBkZXRhaWxzLlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ3V0aWwnKS5pbmhlcml0c1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCdWZmZXIsIEhhc2gpIHtcblxuICB2YXIgQSA9IDB8MFxuICB2YXIgQiA9IDR8MFxuICB2YXIgQyA9IDh8MFxuICB2YXIgRCA9IDEyfDBcbiAgdmFyIEUgPSAxNnwwXG5cbiAgdmFyIFcgPSBuZXcgKHR5cGVvZiBJbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IEFycmF5IDogSW50MzJBcnJheSkoODApXG5cbiAgdmFyIFBPT0wgPSBbXVxuXG4gIGZ1bmN0aW9uIFNoYTEgKCkge1xuICAgIGlmKFBPT0wubGVuZ3RoKVxuICAgICAgcmV0dXJuIFBPT0wucG9wKCkuaW5pdCgpXG5cbiAgICBpZighKHRoaXMgaW5zdGFuY2VvZiBTaGExKSkgcmV0dXJuIG5ldyBTaGExKClcbiAgICB0aGlzLl93ID0gV1xuICAgIEhhc2guY2FsbCh0aGlzLCAxNio0LCAxNCo0KVxuXG4gICAgdGhpcy5faCA9IG51bGxcbiAgICB0aGlzLmluaXQoKVxuICB9XG5cbiAgaW5oZXJpdHMoU2hhMSwgSGFzaClcblxuICBTaGExLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gICAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICAgIHRoaXMuX2QgPSAweDEwMzI1NDc2XG4gICAgdGhpcy5fZSA9IDB4YzNkMmUxZjBcblxuICAgIEhhc2gucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBTaGExLnByb3RvdHlwZS5fUE9PTCA9IFBPT0xcbiAgU2hhMS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChYKSB7XG5cbiAgICB2YXIgYSwgYiwgYywgZCwgZSwgX2EsIF9iLCBfYywgX2QsIF9lXG5cbiAgICBhID0gX2EgPSB0aGlzLl9hXG4gICAgYiA9IF9iID0gdGhpcy5fYlxuICAgIGMgPSBfYyA9IHRoaXMuX2NcbiAgICBkID0gX2QgPSB0aGlzLl9kXG4gICAgZSA9IF9lID0gdGhpcy5fZVxuXG4gICAgdmFyIHcgPSB0aGlzLl93XG5cbiAgICBmb3IodmFyIGogPSAwOyBqIDwgODA7IGorKykge1xuICAgICAgdmFyIFcgPSB3W2pdID0gaiA8IDE2ID8gWC5yZWFkSW50MzJCRShqKjQpXG4gICAgICAgIDogcm9sKHdbaiAtIDNdIF4gd1tqIC0gIDhdIF4gd1tqIC0gMTRdIF4gd1tqIC0gMTZdLCAxKVxuXG4gICAgICB2YXIgdCA9IGFkZChcbiAgICAgICAgYWRkKHJvbChhLCA1KSwgc2hhMV9mdChqLCBiLCBjLCBkKSksXG4gICAgICAgIGFkZChhZGQoZSwgVyksIHNoYTFfa3QoaikpXG4gICAgICApXG5cbiAgICAgIGUgPSBkXG4gICAgICBkID0gY1xuICAgICAgYyA9IHJvbChiLCAzMClcbiAgICAgIGIgPSBhXG4gICAgICBhID0gdFxuICAgIH1cblxuICAgIHRoaXMuX2EgPSBhZGQoYSwgX2EpXG4gICAgdGhpcy5fYiA9IGFkZChiLCBfYilcbiAgICB0aGlzLl9jID0gYWRkKGMsIF9jKVxuICAgIHRoaXMuX2QgPSBhZGQoZCwgX2QpXG4gICAgdGhpcy5fZSA9IGFkZChlLCBfZSlcbiAgfVxuXG4gIFNoYTEucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICAgIGlmKFBPT0wubGVuZ3RoIDwgMTAwKSBQT09MLnB1c2godGhpcylcbiAgICB2YXIgSCA9IG5ldyBCdWZmZXIoMjApXG4gICAgLy9jb25zb2xlLmxvZyh0aGlzLl9hfDAsIHRoaXMuX2J8MCwgdGhpcy5fY3wwLCB0aGlzLl9kfDAsIHRoaXMuX2V8MClcbiAgICBILndyaXRlSW50MzJCRSh0aGlzLl9hfDAsIEEpXG4gICAgSC53cml0ZUludDMyQkUodGhpcy5fYnwwLCBCKVxuICAgIEgud3JpdGVJbnQzMkJFKHRoaXMuX2N8MCwgQylcbiAgICBILndyaXRlSW50MzJCRSh0aGlzLl9kfDAsIEQpXG4gICAgSC53cml0ZUludDMyQkUodGhpcy5fZXwwLCBFKVxuICAgIHJldHVybiBIXG4gIH1cblxuICAvKlxuICAgKiBQZXJmb3JtIHRoZSBhcHByb3ByaWF0ZSB0cmlwbGV0IGNvbWJpbmF0aW9uIGZ1bmN0aW9uIGZvciB0aGUgY3VycmVudFxuICAgKiBpdGVyYXRpb25cbiAgICovXG4gIGZ1bmN0aW9uIHNoYTFfZnQodCwgYiwgYywgZCkge1xuICAgIGlmKHQgPCAyMCkgcmV0dXJuIChiICYgYykgfCAoKH5iKSAmIGQpO1xuICAgIGlmKHQgPCA0MCkgcmV0dXJuIGIgXiBjIF4gZDtcbiAgICBpZih0IDwgNjApIHJldHVybiAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZCk7XG4gICAgcmV0dXJuIGIgXiBjIF4gZDtcbiAgfVxuXG4gIC8qXG4gICAqIERldGVybWluZSB0aGUgYXBwcm9wcmlhdGUgYWRkaXRpdmUgY29uc3RhbnQgZm9yIHRoZSBjdXJyZW50IGl0ZXJhdGlvblxuICAgKi9cbiAgZnVuY3Rpb24gc2hhMV9rdCh0KSB7XG4gICAgcmV0dXJuICh0IDwgMjApID8gIDE1MTg1MDAyNDkgOiAodCA8IDQwKSA/ICAxODU5Nzc1MzkzIDpcbiAgICAgICAgICAgKHQgPCA2MCkgPyAtMTg5NDAwNzU4OCA6IC04OTk0OTc1MTQ7XG4gIH1cblxuICAvKlxuICAgKiBBZGQgaW50ZWdlcnMsIHdyYXBwaW5nIGF0IDJeMzIuIFRoaXMgdXNlcyAxNi1iaXQgb3BlcmF0aW9ucyBpbnRlcm5hbGx5XG4gICAqIHRvIHdvcmsgYXJvdW5kIGJ1Z3MgaW4gc29tZSBKUyBpbnRlcnByZXRlcnMuXG4gICAqIC8vZG9taW5pY3RhcnI6IHRoaXMgaXMgMTAgeWVhcnMgb2xkLCBzbyBtYXliZSB0aGlzIGNhbiBiZSBkcm9wcGVkPylcbiAgICpcbiAgICovXG4gIGZ1bmN0aW9uIGFkZCh4LCB5KSB7XG4gICAgcmV0dXJuICh4ICsgeSApIHwgMFxuICAvL2xldHMgc2VlIGhvdyB0aGlzIGdvZXMgb24gdGVzdGxpbmcuXG4gIC8vICB2YXIgbHN3ID0gKHggJiAweEZGRkYpICsgKHkgJiAweEZGRkYpO1xuICAvLyAgdmFyIG1zdyA9ICh4ID4+IDE2KSArICh5ID4+IDE2KSArIChsc3cgPj4gMTYpO1xuICAvLyAgcmV0dXJuIChtc3cgPDwgMTYpIHwgKGxzdyAmIDB4RkZGRik7XG4gIH1cblxuICAvKlxuICAgKiBCaXR3aXNlIHJvdGF0ZSBhIDMyLWJpdCBudW1iZXIgdG8gdGhlIGxlZnQuXG4gICAqL1xuICBmdW5jdGlvbiByb2wobnVtLCBjbnQpIHtcbiAgICByZXR1cm4gKG51bSA8PCBjbnQpIHwgKG51bSA+Pj4gKDMyIC0gY250KSk7XG4gIH1cblxuICByZXR1cm4gU2hhMVxufVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2NyeXB0by1icm93c2VyaWZ5L34vc2hhLmpzL3NoYTEuanNcbiAqKiBtb2R1bGUgaWQgPSAyOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXG4vKipcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMjU2LCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIDE4MC0yXG4gKiBWZXJzaW9uIDIuMi1iZXRhIENvcHlyaWdodCBBbmdlbCBNYXJpbiwgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwOS5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgndXRpbCcpLmluaGVyaXRzXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJ1ZmZlciwgSGFzaCkge1xuXG4gIHZhciBLID0gW1xuICAgICAgMHg0MjhBMkY5OCwgMHg3MTM3NDQ5MSwgMHhCNUMwRkJDRiwgMHhFOUI1REJBNSxcbiAgICAgIDB4Mzk1NkMyNUIsIDB4NTlGMTExRjEsIDB4OTIzRjgyQTQsIDB4QUIxQzVFRDUsXG4gICAgICAweEQ4MDdBQTk4LCAweDEyODM1QjAxLCAweDI0MzE4NUJFLCAweDU1MEM3REMzLFxuICAgICAgMHg3MkJFNUQ3NCwgMHg4MERFQjFGRSwgMHg5QkRDMDZBNywgMHhDMTlCRjE3NCxcbiAgICAgIDB4RTQ5QjY5QzEsIDB4RUZCRTQ3ODYsIDB4MEZDMTlEQzYsIDB4MjQwQ0ExQ0MsXG4gICAgICAweDJERTkyQzZGLCAweDRBNzQ4NEFBLCAweDVDQjBBOURDLCAweDc2Rjk4OERBLFxuICAgICAgMHg5ODNFNTE1MiwgMHhBODMxQzY2RCwgMHhCMDAzMjdDOCwgMHhCRjU5N0ZDNyxcbiAgICAgIDB4QzZFMDBCRjMsIDB4RDVBNzkxNDcsIDB4MDZDQTYzNTEsIDB4MTQyOTI5NjcsXG4gICAgICAweDI3QjcwQTg1LCAweDJFMUIyMTM4LCAweDREMkM2REZDLCAweDUzMzgwRDEzLFxuICAgICAgMHg2NTBBNzM1NCwgMHg3NjZBMEFCQiwgMHg4MUMyQzkyRSwgMHg5MjcyMkM4NSxcbiAgICAgIDB4QTJCRkU4QTEsIDB4QTgxQTY2NEIsIDB4QzI0QjhCNzAsIDB4Qzc2QzUxQTMsXG4gICAgICAweEQxOTJFODE5LCAweEQ2OTkwNjI0LCAweEY0MEUzNTg1LCAweDEwNkFBMDcwLFxuICAgICAgMHgxOUE0QzExNiwgMHgxRTM3NkMwOCwgMHgyNzQ4Nzc0QywgMHgzNEIwQkNCNSxcbiAgICAgIDB4MzkxQzBDQjMsIDB4NEVEOEFBNEEsIDB4NUI5Q0NBNEYsIDB4NjgyRTZGRjMsXG4gICAgICAweDc0OEY4MkVFLCAweDc4QTU2MzZGLCAweDg0Qzg3ODE0LCAweDhDQzcwMjA4LFxuICAgICAgMHg5MEJFRkZGQSwgMHhBNDUwNkNFQiwgMHhCRUY5QTNGNywgMHhDNjcxNzhGMlxuICAgIF1cblxuICB2YXIgVyA9IG5ldyBBcnJheSg2NClcblxuICBmdW5jdGlvbiBTaGEyNTYoKSB7XG4gICAgdGhpcy5pbml0KClcblxuICAgIHRoaXMuX3cgPSBXIC8vbmV3IEFycmF5KDY0KVxuXG4gICAgSGFzaC5jYWxsKHRoaXMsIDE2KjQsIDE0KjQpXG4gIH1cblxuICBpbmhlcml0cyhTaGEyNTYsIEhhc2gpXG5cbiAgU2hhMjU2LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdGhpcy5fYSA9IDB4NmEwOWU2Njd8MFxuICAgIHRoaXMuX2IgPSAweGJiNjdhZTg1fDBcbiAgICB0aGlzLl9jID0gMHgzYzZlZjM3MnwwXG4gICAgdGhpcy5fZCA9IDB4YTU0ZmY1M2F8MFxuICAgIHRoaXMuX2UgPSAweDUxMGU1MjdmfDBcbiAgICB0aGlzLl9mID0gMHg5YjA1Njg4Y3wwXG4gICAgdGhpcy5fZyA9IDB4MWY4M2Q5YWJ8MFxuICAgIHRoaXMuX2ggPSAweDViZTBjZDE5fDBcblxuICAgIHRoaXMuX2xlbiA9IHRoaXMuX3MgPSAwXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgZnVuY3Rpb24gUyAoWCwgbikge1xuICAgIHJldHVybiAoWCA+Pj4gbikgfCAoWCA8PCAoMzIgLSBuKSk7XG4gIH1cblxuICBmdW5jdGlvbiBSIChYLCBuKSB7XG4gICAgcmV0dXJuIChYID4+PiBuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIENoICh4LCB5LCB6KSB7XG4gICAgcmV0dXJuICgoeCAmIHkpIF4gKCh+eCkgJiB6KSk7XG4gIH1cblxuICBmdW5jdGlvbiBNYWogKHgsIHksIHopIHtcbiAgICByZXR1cm4gKCh4ICYgeSkgXiAoeCAmIHopIF4gKHkgJiB6KSk7XG4gIH1cblxuICBmdW5jdGlvbiBTaWdtYTAyNTYgKHgpIHtcbiAgICByZXR1cm4gKFMoeCwgMikgXiBTKHgsIDEzKSBeIFMoeCwgMjIpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFNpZ21hMTI1NiAoeCkge1xuICAgIHJldHVybiAoUyh4LCA2KSBeIFMoeCwgMTEpIF4gUyh4LCAyNSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gR2FtbWEwMjU2ICh4KSB7XG4gICAgcmV0dXJuIChTKHgsIDcpIF4gUyh4LCAxOCkgXiBSKHgsIDMpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEdhbW1hMTI1NiAoeCkge1xuICAgIHJldHVybiAoUyh4LCAxNykgXiBTKHgsIDE5KSBeIFIoeCwgMTApKTtcbiAgfVxuXG4gIFNoYTI1Ni5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uKE0pIHtcblxuICAgIHZhciBXID0gdGhpcy5fd1xuICAgIHZhciBhLCBiLCBjLCBkLCBlLCBmLCBnLCBoXG4gICAgdmFyIFQxLCBUMlxuXG4gICAgYSA9IHRoaXMuX2EgfCAwXG4gICAgYiA9IHRoaXMuX2IgfCAwXG4gICAgYyA9IHRoaXMuX2MgfCAwXG4gICAgZCA9IHRoaXMuX2QgfCAwXG4gICAgZSA9IHRoaXMuX2UgfCAwXG4gICAgZiA9IHRoaXMuX2YgfCAwXG4gICAgZyA9IHRoaXMuX2cgfCAwXG4gICAgaCA9IHRoaXMuX2ggfCAwXG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IDY0OyBqKyspIHtcbiAgICAgIHZhciB3ID0gV1tqXSA9IGogPCAxNlxuICAgICAgICA/IE0ucmVhZEludDMyQkUoaiAqIDQpXG4gICAgICAgIDogR2FtbWExMjU2KFdbaiAtIDJdKSArIFdbaiAtIDddICsgR2FtbWEwMjU2KFdbaiAtIDE1XSkgKyBXW2ogLSAxNl1cblxuICAgICAgVDEgPSBoICsgU2lnbWExMjU2KGUpICsgQ2goZSwgZiwgZykgKyBLW2pdICsgd1xuXG4gICAgICBUMiA9IFNpZ21hMDI1NihhKSArIE1haihhLCBiLCBjKTtcbiAgICAgIGggPSBnOyBnID0gZjsgZiA9IGU7IGUgPSBkICsgVDE7IGQgPSBjOyBjID0gYjsgYiA9IGE7IGEgPSBUMSArIFQyO1xuICAgIH1cblxuICAgIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICAgIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICAgIHRoaXMuX2MgPSAoYyArIHRoaXMuX2MpIHwgMFxuICAgIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICAgIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxuICAgIHRoaXMuX2YgPSAoZiArIHRoaXMuX2YpIHwgMFxuICAgIHRoaXMuX2cgPSAoZyArIHRoaXMuX2cpIHwgMFxuICAgIHRoaXMuX2ggPSAoaCArIHRoaXMuX2gpIHwgMFxuXG4gIH07XG5cbiAgU2hhMjU2LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgSCA9IG5ldyBCdWZmZXIoMzIpXG5cbiAgICBILndyaXRlSW50MzJCRSh0aGlzLl9hLCAgMClcbiAgICBILndyaXRlSW50MzJCRSh0aGlzLl9iLCAgNClcbiAgICBILndyaXRlSW50MzJCRSh0aGlzLl9jLCAgOClcbiAgICBILndyaXRlSW50MzJCRSh0aGlzLl9kLCAxMilcbiAgICBILndyaXRlSW50MzJCRSh0aGlzLl9lLCAxNilcbiAgICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgICBILndyaXRlSW50MzJCRSh0aGlzLl9nLCAyNClcbiAgICBILndyaXRlSW50MzJCRSh0aGlzLl9oLCAyOClcblxuICAgIHJldHVybiBIXG4gIH1cblxuICByZXR1cm4gU2hhMjU2XG5cbn1cblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9jcnlwdG8tYnJvd3NlcmlmeS9+L3NoYS5qcy9zaGEyNTYuanNcbiAqKiBtb2R1bGUgaWQgPSAyOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgndXRpbCcpLmluaGVyaXRzXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJ1ZmZlciwgSGFzaCkge1xuICB2YXIgSyA9IFtcbiAgICAweDQyOGEyZjk4LCAweGQ3MjhhZTIyLCAweDcxMzc0NDkxLCAweDIzZWY2NWNkLFxuICAgIDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYsIDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMsXG4gICAgMHgzOTU2YzI1YiwgMHhmMzQ4YjUzOCwgMHg1OWYxMTFmMSwgMHhiNjA1ZDAxOSxcbiAgICAweDkyM2Y4MmE0LCAweGFmMTk0ZjliLCAweGFiMWM1ZWQ1LCAweGRhNmQ4MTE4LFxuICAgIDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIsIDB4MTI4MzViMDEsIDB4NDU3MDZmYmUsXG4gICAgMHgyNDMxODViZSwgMHg0ZWU0YjI4YywgMHg1NTBjN2RjMywgMHhkNWZmYjRlMixcbiAgICAweDcyYmU1ZDc0LCAweGYyN2I4OTZmLCAweDgwZGViMWZlLCAweDNiMTY5NmIxLFxuICAgIDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUsIDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQsXG4gICAgMHhlNDliNjljMSwgMHg5ZWYxNGFkMiwgMHhlZmJlNDc4NiwgMHgzODRmMjVlMyxcbiAgICAweDBmYzE5ZGM2LCAweDhiOGNkNWI1LCAweDI0MGNhMWNjLCAweDc3YWM5YzY1LFxuICAgIDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUsIDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMsXG4gICAgMHg1Y2IwYTlkYywgMHhiZDQxZmJkNCwgMHg3NmY5ODhkYSwgMHg4MzExNTNiNSxcbiAgICAweDk4M2U1MTUyLCAweGVlNjZkZmFiLCAweGE4MzFjNjZkLCAweDJkYjQzMjEwLFxuICAgIDB4YjAwMzI3YzgsIDB4OThmYjIxM2YsIDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQsXG4gICAgMHhjNmUwMGJmMywgMHgzZGE4OGZjMiwgMHhkNWE3OTE0NywgMHg5MzBhYTcyNSxcbiAgICAweDA2Y2E2MzUxLCAweGUwMDM4MjZmLCAweDE0MjkyOTY3LCAweDBhMGU2ZTcwLFxuICAgIDB4MjdiNzBhODUsIDB4NDZkMjJmZmMsIDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYsXG4gICAgMHg0ZDJjNmRmYywgMHg1YWM0MmFlZCwgMHg1MzM4MGQxMywgMHg5ZDk1YjNkZixcbiAgICAweDY1MGE3MzU0LCAweDhiYWY2M2RlLCAweDc2NmEwYWJiLCAweDNjNzdiMmE4LFxuICAgIDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYsIDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IsXG4gICAgMHhhMmJmZThhMSwgMHg0Y2YxMDM2NCwgMHhhODFhNjY0YiwgMHhiYzQyMzAwMSxcbiAgICAweGMyNGI4YjcwLCAweGQwZjg5NzkxLCAweGM3NmM1MWEzLCAweDA2NTRiZTMwLFxuICAgIDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgsIDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTAsXG4gICAgMHhmNDBlMzU4NSwgMHg1NzcxMjAyYSwgMHgxMDZhYTA3MCwgMHgzMmJiZDFiOCxcbiAgICAweDE5YTRjMTE2LCAweGI4ZDJkMGM4LCAweDFlMzc2YzA4LCAweDUxNDFhYjUzLFxuICAgIDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTksIDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgsXG4gICAgMHgzOTFjMGNiMywgMHhjNWM5NWE2MywgMHg0ZWQ4YWE0YSwgMHhlMzQxOGFjYixcbiAgICAweDViOWNjYTRmLCAweDc3NjNlMzczLCAweDY4MmU2ZmYzLCAweGQ2YjJiOGEzLFxuICAgIDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMsIDB4NzhhNTYzNmYsIDB4NDMxNzJmNjAsXG4gICAgMHg4NGM4NzgxNCwgMHhhMWYwYWI3MiwgMHg4Y2M3MDIwOCwgMHgxYTY0MzllYyxcbiAgICAweDkwYmVmZmZhLCAweDIzNjMxZTI4LCAweGE0NTA2Y2ViLCAweGRlODJiZGU5LFxuICAgIDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUsIDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIsXG4gICAgMHhjYTI3M2VjZSwgMHhlYTI2NjE5YywgMHhkMTg2YjhjNywgMHgyMWMwYzIwNyxcbiAgICAweGVhZGE3ZGQ2LCAweGNkZTBlYjFlLCAweGY1N2Q0ZjdmLCAweGVlNmVkMTc4LFxuICAgIDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEsIDB4MGE2MzdkYzUsIDB4YTJjODk4YTYsXG4gICAgMHgxMTNmOTgwNCwgMHhiZWY5MGRhZSwgMHgxYjcxMGIzNSwgMHgxMzFjNDcxYixcbiAgICAweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0LCAweDMyY2FhYjdiLCAweDQwYzcyNDkzLFxuICAgIDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMsIDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMsXG4gICAgMHg0Y2M1ZDRiZSwgMHhjYjNlNDJiNiwgMHg1OTdmMjk5YywgMHhmYzY1N2UyYSxcbiAgICAweDVmY2I2ZmFiLCAweDNhZDZmYWVjLCAweDZjNDQxOThjLCAweDRhNDc1ODE3XG4gIF1cblxuICB2YXIgVyA9IG5ldyBBcnJheSgxNjApXG5cbiAgZnVuY3Rpb24gU2hhNTEyKCkge1xuICAgIHRoaXMuaW5pdCgpXG4gICAgdGhpcy5fdyA9IFdcblxuICAgIEhhc2guY2FsbCh0aGlzLCAxMjgsIDExMilcbiAgfVxuXG4gIGluaGVyaXRzKFNoYTUxMiwgSGFzaClcblxuICBTaGE1MTIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICB0aGlzLl9hID0gMHg2YTA5ZTY2N3wwXG4gICAgdGhpcy5fYiA9IDB4YmI2N2FlODV8MFxuICAgIHRoaXMuX2MgPSAweDNjNmVmMzcyfDBcbiAgICB0aGlzLl9kID0gMHhhNTRmZjUzYXwwXG4gICAgdGhpcy5fZSA9IDB4NTEwZTUyN2Z8MFxuICAgIHRoaXMuX2YgPSAweDliMDU2ODhjfDBcbiAgICB0aGlzLl9nID0gMHgxZjgzZDlhYnwwXG4gICAgdGhpcy5faCA9IDB4NWJlMGNkMTl8MFxuXG4gICAgdGhpcy5fYWwgPSAweGYzYmNjOTA4fDBcbiAgICB0aGlzLl9ibCA9IDB4ODRjYWE3M2J8MFxuICAgIHRoaXMuX2NsID0gMHhmZTk0ZjgyYnwwXG4gICAgdGhpcy5fZGwgPSAweDVmMWQzNmYxfDBcbiAgICB0aGlzLl9lbCA9IDB4YWRlNjgyZDF8MFxuICAgIHRoaXMuX2ZsID0gMHgyYjNlNmMxZnwwXG4gICAgdGhpcy5fZ2wgPSAweGZiNDFiZDZifDBcbiAgICB0aGlzLl9obCA9IDB4MTM3ZTIxNzl8MFxuXG4gICAgdGhpcy5fbGVuID0gdGhpcy5fcyA9IDBcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBmdW5jdGlvbiBTIChYLCBYbCwgbikge1xuICAgIHJldHVybiAoWCA+Pj4gbikgfCAoWGwgPDwgKDMyIC0gbikpXG4gIH1cblxuICBmdW5jdGlvbiBDaCAoeCwgeSwgeikge1xuICAgIHJldHVybiAoKHggJiB5KSBeICgofngpICYgeikpO1xuICB9XG5cbiAgZnVuY3Rpb24gTWFqICh4LCB5LCB6KSB7XG4gICAgcmV0dXJuICgoeCAmIHkpIF4gKHggJiB6KSBeICh5ICYgeikpO1xuICB9XG5cbiAgU2hhNTEyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24oTSkge1xuXG4gICAgdmFyIFcgPSB0aGlzLl93XG4gICAgdmFyIGEsIGIsIGMsIGQsIGUsIGYsIGcsIGhcbiAgICB2YXIgYWwsIGJsLCBjbCwgZGwsIGVsLCBmbCwgZ2wsIGhsXG5cbiAgICBhID0gdGhpcy5fYSB8IDBcbiAgICBiID0gdGhpcy5fYiB8IDBcbiAgICBjID0gdGhpcy5fYyB8IDBcbiAgICBkID0gdGhpcy5fZCB8IDBcbiAgICBlID0gdGhpcy5fZSB8IDBcbiAgICBmID0gdGhpcy5fZiB8IDBcbiAgICBnID0gdGhpcy5fZyB8IDBcbiAgICBoID0gdGhpcy5faCB8IDBcblxuICAgIGFsID0gdGhpcy5fYWwgfCAwXG4gICAgYmwgPSB0aGlzLl9ibCB8IDBcbiAgICBjbCA9IHRoaXMuX2NsIHwgMFxuICAgIGRsID0gdGhpcy5fZGwgfCAwXG4gICAgZWwgPSB0aGlzLl9lbCB8IDBcbiAgICBmbCA9IHRoaXMuX2ZsIHwgMFxuICAgIGdsID0gdGhpcy5fZ2wgfCAwXG4gICAgaGwgPSB0aGlzLl9obCB8IDBcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkrKykge1xuICAgICAgdmFyIGogPSBpICogMlxuXG4gICAgICB2YXIgV2ksIFdpbFxuXG4gICAgICBpZiAoaSA8IDE2KSB7XG4gICAgICAgIFdpID0gV1tqXSA9IE0ucmVhZEludDMyQkUoaiAqIDQpXG4gICAgICAgIFdpbCA9IFdbaiArIDFdID0gTS5yZWFkSW50MzJCRShqICogNCArIDQpXG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB4ICA9IFdbaiAtIDE1KjJdXG4gICAgICAgIHZhciB4bCA9IFdbaiAtIDE1KjIgKyAxXVxuICAgICAgICB2YXIgZ2FtbWEwICA9IFMoeCwgeGwsIDEpIF4gUyh4LCB4bCwgOCkgXiAoeCA+Pj4gNylcbiAgICAgICAgdmFyIGdhbW1hMGwgPSBTKHhsLCB4LCAxKSBeIFMoeGwsIHgsIDgpIF4gUyh4bCwgeCwgNylcblxuICAgICAgICB4ICA9IFdbaiAtIDIqMl1cbiAgICAgICAgeGwgPSBXW2ogLSAyKjIgKyAxXVxuICAgICAgICB2YXIgZ2FtbWExICA9IFMoeCwgeGwsIDE5KSBeIFMoeGwsIHgsIDI5KSBeICh4ID4+PiA2KVxuICAgICAgICB2YXIgZ2FtbWExbCA9IFMoeGwsIHgsIDE5KSBeIFMoeCwgeGwsIDI5KSBeIFMoeGwsIHgsIDYpXG5cbiAgICAgICAgLy8gV1tpXSA9IGdhbW1hMCArIFdbaSAtIDddICsgZ2FtbWExICsgV1tpIC0gMTZdXG4gICAgICAgIHZhciBXaTcgID0gV1tqIC0gNyoyXVxuICAgICAgICB2YXIgV2k3bCA9IFdbaiAtIDcqMiArIDFdXG5cbiAgICAgICAgdmFyIFdpMTYgID0gV1tqIC0gMTYqMl1cbiAgICAgICAgdmFyIFdpMTZsID0gV1tqIC0gMTYqMiArIDFdXG5cbiAgICAgICAgV2lsID0gZ2FtbWEwbCArIFdpN2xcbiAgICAgICAgV2kgID0gZ2FtbWEwICArIFdpNyArICgoV2lsID4+PiAwKSA8IChnYW1tYTBsID4+PiAwKSA/IDEgOiAwKVxuICAgICAgICBXaWwgPSBXaWwgKyBnYW1tYTFsXG4gICAgICAgIFdpICA9IFdpICArIGdhbW1hMSAgKyAoKFdpbCA+Pj4gMCkgPCAoZ2FtbWExbCA+Pj4gMCkgPyAxIDogMClcbiAgICAgICAgV2lsID0gV2lsICsgV2kxNmxcbiAgICAgICAgV2kgID0gV2kgICsgV2kxNiArICgoV2lsID4+PiAwKSA8IChXaTE2bCA+Pj4gMCkgPyAxIDogMClcblxuICAgICAgICBXW2pdID0gV2lcbiAgICAgICAgV1tqICsgMV0gPSBXaWxcbiAgICAgIH1cblxuICAgICAgdmFyIG1haiA9IE1haihhLCBiLCBjKVxuICAgICAgdmFyIG1hamwgPSBNYWooYWwsIGJsLCBjbClcblxuICAgICAgdmFyIHNpZ21hMGggPSBTKGEsIGFsLCAyOCkgXiBTKGFsLCBhLCAyKSBeIFMoYWwsIGEsIDcpXG4gICAgICB2YXIgc2lnbWEwbCA9IFMoYWwsIGEsIDI4KSBeIFMoYSwgYWwsIDIpIF4gUyhhLCBhbCwgNylcbiAgICAgIHZhciBzaWdtYTFoID0gUyhlLCBlbCwgMTQpIF4gUyhlLCBlbCwgMTgpIF4gUyhlbCwgZSwgOSlcbiAgICAgIHZhciBzaWdtYTFsID0gUyhlbCwgZSwgMTQpIF4gUyhlbCwgZSwgMTgpIF4gUyhlLCBlbCwgOSlcblxuICAgICAgLy8gdDEgPSBoICsgc2lnbWExICsgY2ggKyBLW2ldICsgV1tpXVxuICAgICAgdmFyIEtpID0gS1tqXVxuICAgICAgdmFyIEtpbCA9IEtbaiArIDFdXG5cbiAgICAgIHZhciBjaCA9IENoKGUsIGYsIGcpXG4gICAgICB2YXIgY2hsID0gQ2goZWwsIGZsLCBnbClcblxuICAgICAgdmFyIHQxbCA9IGhsICsgc2lnbWExbFxuICAgICAgdmFyIHQxID0gaCArIHNpZ21hMWggKyAoKHQxbCA+Pj4gMCkgPCAoaGwgPj4+IDApID8gMSA6IDApXG4gICAgICB0MWwgPSB0MWwgKyBjaGxcbiAgICAgIHQxID0gdDEgKyBjaCArICgodDFsID4+PiAwKSA8IChjaGwgPj4+IDApID8gMSA6IDApXG4gICAgICB0MWwgPSB0MWwgKyBLaWxcbiAgICAgIHQxID0gdDEgKyBLaSArICgodDFsID4+PiAwKSA8IChLaWwgPj4+IDApID8gMSA6IDApXG4gICAgICB0MWwgPSB0MWwgKyBXaWxcbiAgICAgIHQxID0gdDEgKyBXaSArICgodDFsID4+PiAwKSA8IChXaWwgPj4+IDApID8gMSA6IDApXG5cbiAgICAgIC8vIHQyID0gc2lnbWEwICsgbWFqXG4gICAgICB2YXIgdDJsID0gc2lnbWEwbCArIG1hamxcbiAgICAgIHZhciB0MiA9IHNpZ21hMGggKyBtYWogKyAoKHQybCA+Pj4gMCkgPCAoc2lnbWEwbCA+Pj4gMCkgPyAxIDogMClcblxuICAgICAgaCAgPSBnXG4gICAgICBobCA9IGdsXG4gICAgICBnICA9IGZcbiAgICAgIGdsID0gZmxcbiAgICAgIGYgID0gZVxuICAgICAgZmwgPSBlbFxuICAgICAgZWwgPSAoZGwgKyB0MWwpIHwgMFxuICAgICAgZSAgPSAoZCArIHQxICsgKChlbCA+Pj4gMCkgPCAoZGwgPj4+IDApID8gMSA6IDApKSB8IDBcbiAgICAgIGQgID0gY1xuICAgICAgZGwgPSBjbFxuICAgICAgYyAgPSBiXG4gICAgICBjbCA9IGJsXG4gICAgICBiICA9IGFcbiAgICAgIGJsID0gYWxcbiAgICAgIGFsID0gKHQxbCArIHQybCkgfCAwXG4gICAgICBhICA9ICh0MSArIHQyICsgKChhbCA+Pj4gMCkgPCAodDFsID4+PiAwKSA/IDEgOiAwKSkgfCAwXG4gICAgfVxuXG4gICAgdGhpcy5fYWwgPSAodGhpcy5fYWwgKyBhbCkgfCAwXG4gICAgdGhpcy5fYmwgPSAodGhpcy5fYmwgKyBibCkgfCAwXG4gICAgdGhpcy5fY2wgPSAodGhpcy5fY2wgKyBjbCkgfCAwXG4gICAgdGhpcy5fZGwgPSAodGhpcy5fZGwgKyBkbCkgfCAwXG4gICAgdGhpcy5fZWwgPSAodGhpcy5fZWwgKyBlbCkgfCAwXG4gICAgdGhpcy5fZmwgPSAodGhpcy5fZmwgKyBmbCkgfCAwXG4gICAgdGhpcy5fZ2wgPSAodGhpcy5fZ2wgKyBnbCkgfCAwXG4gICAgdGhpcy5faGwgPSAodGhpcy5faGwgKyBobCkgfCAwXG5cbiAgICB0aGlzLl9hID0gKHRoaXMuX2EgKyBhICsgKCh0aGlzLl9hbCA+Pj4gMCkgPCAoYWwgPj4+IDApID8gMSA6IDApKSB8IDBcbiAgICB0aGlzLl9iID0gKHRoaXMuX2IgKyBiICsgKCh0aGlzLl9ibCA+Pj4gMCkgPCAoYmwgPj4+IDApID8gMSA6IDApKSB8IDBcbiAgICB0aGlzLl9jID0gKHRoaXMuX2MgKyBjICsgKCh0aGlzLl9jbCA+Pj4gMCkgPCAoY2wgPj4+IDApID8gMSA6IDApKSB8IDBcbiAgICB0aGlzLl9kID0gKHRoaXMuX2QgKyBkICsgKCh0aGlzLl9kbCA+Pj4gMCkgPCAoZGwgPj4+IDApID8gMSA6IDApKSB8IDBcbiAgICB0aGlzLl9lID0gKHRoaXMuX2UgKyBlICsgKCh0aGlzLl9lbCA+Pj4gMCkgPCAoZWwgPj4+IDApID8gMSA6IDApKSB8IDBcbiAgICB0aGlzLl9mID0gKHRoaXMuX2YgKyBmICsgKCh0aGlzLl9mbCA+Pj4gMCkgPCAoZmwgPj4+IDApID8gMSA6IDApKSB8IDBcbiAgICB0aGlzLl9nID0gKHRoaXMuX2cgKyBnICsgKCh0aGlzLl9nbCA+Pj4gMCkgPCAoZ2wgPj4+IDApID8gMSA6IDApKSB8IDBcbiAgICB0aGlzLl9oID0gKHRoaXMuX2ggKyBoICsgKCh0aGlzLl9obCA+Pj4gMCkgPCAoaGwgPj4+IDApID8gMSA6IDApKSB8IDBcbiAgfVxuXG4gIFNoYTUxMi5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIEggPSBuZXcgQnVmZmVyKDY0KVxuXG4gICAgZnVuY3Rpb24gd3JpdGVJbnQ2NEJFKGgsIGwsIG9mZnNldCkge1xuICAgICAgSC53cml0ZUludDMyQkUoaCwgb2Zmc2V0KVxuICAgICAgSC53cml0ZUludDMyQkUobCwgb2Zmc2V0ICsgNClcbiAgICB9XG5cbiAgICB3cml0ZUludDY0QkUodGhpcy5fYSwgdGhpcy5fYWwsIDApXG4gICAgd3JpdGVJbnQ2NEJFKHRoaXMuX2IsIHRoaXMuX2JsLCA4KVxuICAgIHdyaXRlSW50NjRCRSh0aGlzLl9jLCB0aGlzLl9jbCwgMTYpXG4gICAgd3JpdGVJbnQ2NEJFKHRoaXMuX2QsIHRoaXMuX2RsLCAyNClcbiAgICB3cml0ZUludDY0QkUodGhpcy5fZSwgdGhpcy5fZWwsIDMyKVxuICAgIHdyaXRlSW50NjRCRSh0aGlzLl9mLCB0aGlzLl9mbCwgNDApXG4gICAgd3JpdGVJbnQ2NEJFKHRoaXMuX2csIHRoaXMuX2dsLCA0OClcbiAgICB3cml0ZUludDY0QkUodGhpcy5faCwgdGhpcy5faGwsIDU2KVxuXG4gICAgcmV0dXJuIEhcbiAgfVxuXG4gIHJldHVybiBTaGE1MTJcblxufVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2NyeXB0by1icm93c2VyaWZ5L34vc2hhLmpzL3NoYTUxMi5qc1xuICoqIG1vZHVsZSBpZCA9IDMwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBSU0EgRGF0YSBTZWN1cml0eSwgSW5jLiBNRDUgTWVzc2FnZVxuICogRGlnZXN0IEFsZ29yaXRobSwgYXMgZGVmaW5lZCBpbiBSRkMgMTMyMS5cbiAqIFZlcnNpb24gMi4xIENvcHlyaWdodCAoQykgUGF1bCBKb2huc3RvbiAxOTk5IC0gMjAwMi5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZVxuICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIG1vcmUgaW5mby5cbiAqL1xuXG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xuXG4vKlxuICogQ2FsY3VsYXRlIHRoZSBNRDUgb2YgYW4gYXJyYXkgb2YgbGl0dGxlLWVuZGlhbiB3b3JkcywgYW5kIGEgYml0IGxlbmd0aFxuICovXG5mdW5jdGlvbiBjb3JlX21kNSh4LCBsZW4pXG57XG4gIC8qIGFwcGVuZCBwYWRkaW5nICovXG4gIHhbbGVuID4+IDVdIHw9IDB4ODAgPDwgKChsZW4pICUgMzIpO1xuICB4WygoKGxlbiArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSBsZW47XG5cbiAgdmFyIGEgPSAgMTczMjU4NDE5MztcbiAgdmFyIGIgPSAtMjcxNzMzODc5O1xuICB2YXIgYyA9IC0xNzMyNTg0MTk0O1xuICB2YXIgZCA9ICAyNzE3MzM4Nzg7XG5cbiAgZm9yKHZhciBpID0gMDsgaSA8IHgubGVuZ3RoOyBpICs9IDE2KVxuICB7XG4gICAgdmFyIG9sZGEgPSBhO1xuICAgIHZhciBvbGRiID0gYjtcbiAgICB2YXIgb2xkYyA9IGM7XG4gICAgdmFyIG9sZGQgPSBkO1xuXG4gICAgYSA9IG1kNV9mZihhLCBiLCBjLCBkLCB4W2krIDBdLCA3ICwgLTY4MDg3NjkzNik7XG4gICAgZCA9IG1kNV9mZihkLCBhLCBiLCBjLCB4W2krIDFdLCAxMiwgLTM4OTU2NDU4Nik7XG4gICAgYyA9IG1kNV9mZihjLCBkLCBhLCBiLCB4W2krIDJdLCAxNywgIDYwNjEwNTgxOSk7XG4gICAgYiA9IG1kNV9mZihiLCBjLCBkLCBhLCB4W2krIDNdLCAyMiwgLTEwNDQ1MjUzMzApO1xuICAgIGEgPSBtZDVfZmYoYSwgYiwgYywgZCwgeFtpKyA0XSwgNyAsIC0xNzY0MTg4OTcpO1xuICAgIGQgPSBtZDVfZmYoZCwgYSwgYiwgYywgeFtpKyA1XSwgMTIsICAxMjAwMDgwNDI2KTtcbiAgICBjID0gbWQ1X2ZmKGMsIGQsIGEsIGIsIHhbaSsgNl0sIDE3LCAtMTQ3MzIzMTM0MSk7XG4gICAgYiA9IG1kNV9mZihiLCBjLCBkLCBhLCB4W2krIDddLCAyMiwgLTQ1NzA1OTgzKTtcbiAgICBhID0gbWQ1X2ZmKGEsIGIsIGMsIGQsIHhbaSsgOF0sIDcgLCAgMTc3MDAzNTQxNik7XG4gICAgZCA9IG1kNV9mZihkLCBhLCBiLCBjLCB4W2krIDldLCAxMiwgLTE5NTg0MTQ0MTcpO1xuICAgIGMgPSBtZDVfZmYoYywgZCwgYSwgYiwgeFtpKzEwXSwgMTcsIC00MjA2Myk7XG4gICAgYiA9IG1kNV9mZihiLCBjLCBkLCBhLCB4W2krMTFdLCAyMiwgLTE5OTA0MDQxNjIpO1xuICAgIGEgPSBtZDVfZmYoYSwgYiwgYywgZCwgeFtpKzEyXSwgNyAsICAxODA0NjAzNjgyKTtcbiAgICBkID0gbWQ1X2ZmKGQsIGEsIGIsIGMsIHhbaSsxM10sIDEyLCAtNDAzNDExMDEpO1xuICAgIGMgPSBtZDVfZmYoYywgZCwgYSwgYiwgeFtpKzE0XSwgMTcsIC0xNTAyMDAyMjkwKTtcbiAgICBiID0gbWQ1X2ZmKGIsIGMsIGQsIGEsIHhbaSsxNV0sIDIyLCAgMTIzNjUzNTMyOSk7XG5cbiAgICBhID0gbWQ1X2dnKGEsIGIsIGMsIGQsIHhbaSsgMV0sIDUgLCAtMTY1Nzk2NTEwKTtcbiAgICBkID0gbWQ1X2dnKGQsIGEsIGIsIGMsIHhbaSsgNl0sIDkgLCAtMTA2OTUwMTYzMik7XG4gICAgYyA9IG1kNV9nZyhjLCBkLCBhLCBiLCB4W2krMTFdLCAxNCwgIDY0MzcxNzcxMyk7XG4gICAgYiA9IG1kNV9nZyhiLCBjLCBkLCBhLCB4W2krIDBdLCAyMCwgLTM3Mzg5NzMwMik7XG4gICAgYSA9IG1kNV9nZyhhLCBiLCBjLCBkLCB4W2krIDVdLCA1ICwgLTcwMTU1ODY5MSk7XG4gICAgZCA9IG1kNV9nZyhkLCBhLCBiLCBjLCB4W2krMTBdLCA5ICwgIDM4MDE2MDgzKTtcbiAgICBjID0gbWQ1X2dnKGMsIGQsIGEsIGIsIHhbaSsxNV0sIDE0LCAtNjYwNDc4MzM1KTtcbiAgICBiID0gbWQ1X2dnKGIsIGMsIGQsIGEsIHhbaSsgNF0sIDIwLCAtNDA1NTM3ODQ4KTtcbiAgICBhID0gbWQ1X2dnKGEsIGIsIGMsIGQsIHhbaSsgOV0sIDUgLCAgNTY4NDQ2NDM4KTtcbiAgICBkID0gbWQ1X2dnKGQsIGEsIGIsIGMsIHhbaSsxNF0sIDkgLCAtMTAxOTgwMzY5MCk7XG4gICAgYyA9IG1kNV9nZyhjLCBkLCBhLCBiLCB4W2krIDNdLCAxNCwgLTE4NzM2Mzk2MSk7XG4gICAgYiA9IG1kNV9nZyhiLCBjLCBkLCBhLCB4W2krIDhdLCAyMCwgIDExNjM1MzE1MDEpO1xuICAgIGEgPSBtZDVfZ2coYSwgYiwgYywgZCwgeFtpKzEzXSwgNSAsIC0xNDQ0NjgxNDY3KTtcbiAgICBkID0gbWQ1X2dnKGQsIGEsIGIsIGMsIHhbaSsgMl0sIDkgLCAtNTE0MDM3ODQpO1xuICAgIGMgPSBtZDVfZ2coYywgZCwgYSwgYiwgeFtpKyA3XSwgMTQsICAxNzM1MzI4NDczKTtcbiAgICBiID0gbWQ1X2dnKGIsIGMsIGQsIGEsIHhbaSsxMl0sIDIwLCAtMTkyNjYwNzczNCk7XG5cbiAgICBhID0gbWQ1X2hoKGEsIGIsIGMsIGQsIHhbaSsgNV0sIDQgLCAtMzc4NTU4KTtcbiAgICBkID0gbWQ1X2hoKGQsIGEsIGIsIGMsIHhbaSsgOF0sIDExLCAtMjAyMjU3NDQ2Myk7XG4gICAgYyA9IG1kNV9oaChjLCBkLCBhLCBiLCB4W2krMTFdLCAxNiwgIDE4MzkwMzA1NjIpO1xuICAgIGIgPSBtZDVfaGgoYiwgYywgZCwgYSwgeFtpKzE0XSwgMjMsIC0zNTMwOTU1Nik7XG4gICAgYSA9IG1kNV9oaChhLCBiLCBjLCBkLCB4W2krIDFdLCA0ICwgLTE1MzA5OTIwNjApO1xuICAgIGQgPSBtZDVfaGgoZCwgYSwgYiwgYywgeFtpKyA0XSwgMTEsICAxMjcyODkzMzUzKTtcbiAgICBjID0gbWQ1X2hoKGMsIGQsIGEsIGIsIHhbaSsgN10sIDE2LCAtMTU1NDk3NjMyKTtcbiAgICBiID0gbWQ1X2hoKGIsIGMsIGQsIGEsIHhbaSsxMF0sIDIzLCAtMTA5NDczMDY0MCk7XG4gICAgYSA9IG1kNV9oaChhLCBiLCBjLCBkLCB4W2krMTNdLCA0ICwgIDY4MTI3OTE3NCk7XG4gICAgZCA9IG1kNV9oaChkLCBhLCBiLCBjLCB4W2krIDBdLCAxMSwgLTM1ODUzNzIyMik7XG4gICAgYyA9IG1kNV9oaChjLCBkLCBhLCBiLCB4W2krIDNdLCAxNiwgLTcyMjUyMTk3OSk7XG4gICAgYiA9IG1kNV9oaChiLCBjLCBkLCBhLCB4W2krIDZdLCAyMywgIDc2MDI5MTg5KTtcbiAgICBhID0gbWQ1X2hoKGEsIGIsIGMsIGQsIHhbaSsgOV0sIDQgLCAtNjQwMzY0NDg3KTtcbiAgICBkID0gbWQ1X2hoKGQsIGEsIGIsIGMsIHhbaSsxMl0sIDExLCAtNDIxODE1ODM1KTtcbiAgICBjID0gbWQ1X2hoKGMsIGQsIGEsIGIsIHhbaSsxNV0sIDE2LCAgNTMwNzQyNTIwKTtcbiAgICBiID0gbWQ1X2hoKGIsIGMsIGQsIGEsIHhbaSsgMl0sIDIzLCAtOTk1MzM4NjUxKTtcblxuICAgIGEgPSBtZDVfaWkoYSwgYiwgYywgZCwgeFtpKyAwXSwgNiAsIC0xOTg2MzA4NDQpO1xuICAgIGQgPSBtZDVfaWkoZCwgYSwgYiwgYywgeFtpKyA3XSwgMTAsICAxMTI2ODkxNDE1KTtcbiAgICBjID0gbWQ1X2lpKGMsIGQsIGEsIGIsIHhbaSsxNF0sIDE1LCAtMTQxNjM1NDkwNSk7XG4gICAgYiA9IG1kNV9paShiLCBjLCBkLCBhLCB4W2krIDVdLCAyMSwgLTU3NDM0MDU1KTtcbiAgICBhID0gbWQ1X2lpKGEsIGIsIGMsIGQsIHhbaSsxMl0sIDYgLCAgMTcwMDQ4NTU3MSk7XG4gICAgZCA9IG1kNV9paShkLCBhLCBiLCBjLCB4W2krIDNdLCAxMCwgLTE4OTQ5ODY2MDYpO1xuICAgIGMgPSBtZDVfaWkoYywgZCwgYSwgYiwgeFtpKzEwXSwgMTUsIC0xMDUxNTIzKTtcbiAgICBiID0gbWQ1X2lpKGIsIGMsIGQsIGEsIHhbaSsgMV0sIDIxLCAtMjA1NDkyMjc5OSk7XG4gICAgYSA9IG1kNV9paShhLCBiLCBjLCBkLCB4W2krIDhdLCA2ICwgIDE4NzMzMTMzNTkpO1xuICAgIGQgPSBtZDVfaWkoZCwgYSwgYiwgYywgeFtpKzE1XSwgMTAsIC0zMDYxMTc0NCk7XG4gICAgYyA9IG1kNV9paShjLCBkLCBhLCBiLCB4W2krIDZdLCAxNSwgLTE1NjAxOTgzODApO1xuICAgIGIgPSBtZDVfaWkoYiwgYywgZCwgYSwgeFtpKzEzXSwgMjEsICAxMzA5MTUxNjQ5KTtcbiAgICBhID0gbWQ1X2lpKGEsIGIsIGMsIGQsIHhbaSsgNF0sIDYgLCAtMTQ1NTIzMDcwKTtcbiAgICBkID0gbWQ1X2lpKGQsIGEsIGIsIGMsIHhbaSsxMV0sIDEwLCAtMTEyMDIxMDM3OSk7XG4gICAgYyA9IG1kNV9paShjLCBkLCBhLCBiLCB4W2krIDJdLCAxNSwgIDcxODc4NzI1OSk7XG4gICAgYiA9IG1kNV9paShiLCBjLCBkLCBhLCB4W2krIDldLCAyMSwgLTM0MzQ4NTU1MSk7XG5cbiAgICBhID0gc2FmZV9hZGQoYSwgb2xkYSk7XG4gICAgYiA9IHNhZmVfYWRkKGIsIG9sZGIpO1xuICAgIGMgPSBzYWZlX2FkZChjLCBvbGRjKTtcbiAgICBkID0gc2FmZV9hZGQoZCwgb2xkZCk7XG4gIH1cbiAgcmV0dXJuIEFycmF5KGEsIGIsIGMsIGQpO1xuXG59XG5cbi8qXG4gKiBUaGVzZSBmdW5jdGlvbnMgaW1wbGVtZW50IHRoZSBmb3VyIGJhc2ljIG9wZXJhdGlvbnMgdGhlIGFsZ29yaXRobSB1c2VzLlxuICovXG5mdW5jdGlvbiBtZDVfY21uKHEsIGEsIGIsIHgsIHMsIHQpXG57XG4gIHJldHVybiBzYWZlX2FkZChiaXRfcm9sKHNhZmVfYWRkKHNhZmVfYWRkKGEsIHEpLCBzYWZlX2FkZCh4LCB0KSksIHMpLGIpO1xufVxuZnVuY3Rpb24gbWQ1X2ZmKGEsIGIsIGMsIGQsIHgsIHMsIHQpXG57XG4gIHJldHVybiBtZDVfY21uKChiICYgYykgfCAoKH5iKSAmIGQpLCBhLCBiLCB4LCBzLCB0KTtcbn1cbmZ1bmN0aW9uIG1kNV9nZyhhLCBiLCBjLCBkLCB4LCBzLCB0KVxue1xuICByZXR1cm4gbWQ1X2NtbigoYiAmIGQpIHwgKGMgJiAofmQpKSwgYSwgYiwgeCwgcywgdCk7XG59XG5mdW5jdGlvbiBtZDVfaGgoYSwgYiwgYywgZCwgeCwgcywgdClcbntcbiAgcmV0dXJuIG1kNV9jbW4oYiBeIGMgXiBkLCBhLCBiLCB4LCBzLCB0KTtcbn1cbmZ1bmN0aW9uIG1kNV9paShhLCBiLCBjLCBkLCB4LCBzLCB0KVxue1xuICByZXR1cm4gbWQ1X2NtbihjIF4gKGIgfCAofmQpKSwgYSwgYiwgeCwgcywgdCk7XG59XG5cbi8qXG4gKiBBZGQgaW50ZWdlcnMsIHdyYXBwaW5nIGF0IDJeMzIuIFRoaXMgdXNlcyAxNi1iaXQgb3BlcmF0aW9ucyBpbnRlcm5hbGx5XG4gKiB0byB3b3JrIGFyb3VuZCBidWdzIGluIHNvbWUgSlMgaW50ZXJwcmV0ZXJzLlxuICovXG5mdW5jdGlvbiBzYWZlX2FkZCh4LCB5KVxue1xuICB2YXIgbHN3ID0gKHggJiAweEZGRkYpICsgKHkgJiAweEZGRkYpO1xuICB2YXIgbXN3ID0gKHggPj4gMTYpICsgKHkgPj4gMTYpICsgKGxzdyA+PiAxNik7XG4gIHJldHVybiAobXN3IDw8IDE2KSB8IChsc3cgJiAweEZGRkYpO1xufVxuXG4vKlxuICogQml0d2lzZSByb3RhdGUgYSAzMi1iaXQgbnVtYmVyIHRvIHRoZSBsZWZ0LlxuICovXG5mdW5jdGlvbiBiaXRfcm9sKG51bSwgY250KVxue1xuICByZXR1cm4gKG51bSA8PCBjbnQpIHwgKG51bSA+Pj4gKDMyIC0gY250KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWQ1KGJ1Zikge1xuICByZXR1cm4gaGVscGVycy5oYXNoKGJ1ZiwgY29yZV9tZDUsIDE2KTtcbn07XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqICh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vY3J5cHRvLWJyb3dzZXJpZnkvbWQ1LmpzXG4gKiogbW9kdWxlIGlkID0gMzFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBpbnRTaXplID0gNDtcbnZhciB6ZXJvQnVmZmVyID0gbmV3IEJ1ZmZlcihpbnRTaXplKTsgemVyb0J1ZmZlci5maWxsKDApO1xudmFyIGNocnN6ID0gODtcblxuZnVuY3Rpb24gdG9BcnJheShidWYsIGJpZ0VuZGlhbikge1xuICBpZiAoKGJ1Zi5sZW5ndGggJSBpbnRTaXplKSAhPT0gMCkge1xuICAgIHZhciBsZW4gPSBidWYubGVuZ3RoICsgKGludFNpemUgLSAoYnVmLmxlbmd0aCAlIGludFNpemUpKTtcbiAgICBidWYgPSBCdWZmZXIuY29uY2F0KFtidWYsIHplcm9CdWZmZXJdLCBsZW4pO1xuICB9XG5cbiAgdmFyIGFyciA9IFtdO1xuICB2YXIgZm4gPSBiaWdFbmRpYW4gPyBidWYucmVhZEludDMyQkUgOiBidWYucmVhZEludDMyTEU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSArPSBpbnRTaXplKSB7XG4gICAgYXJyLnB1c2goZm4uY2FsbChidWYsIGkpKTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiB0b0J1ZmZlcihhcnIsIHNpemUsIGJpZ0VuZGlhbikge1xuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihzaXplKTtcbiAgdmFyIGZuID0gYmlnRW5kaWFuID8gYnVmLndyaXRlSW50MzJCRSA6IGJ1Zi53cml0ZUludDMyTEU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgZm4uY2FsbChidWYsIGFycltpXSwgaSAqIDQsIHRydWUpO1xuICB9XG4gIHJldHVybiBidWY7XG59XG5cbmZ1bmN0aW9uIGhhc2goYnVmLCBmbiwgaGFzaFNpemUsIGJpZ0VuZGlhbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSBidWYgPSBuZXcgQnVmZmVyKGJ1Zik7XG4gIHZhciBhcnIgPSBmbih0b0FycmF5KGJ1ZiwgYmlnRW5kaWFuKSwgYnVmLmxlbmd0aCAqIGNocnN6KTtcbiAgcmV0dXJuIHRvQnVmZmVyKGFyciwgaGFzaFNpemUsIGJpZ0VuZGlhbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBoYXNoOiBoYXNoIH07XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqICh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vY3J5cHRvLWJyb3dzZXJpZnkvaGVscGVycy5qc1xuICoqIG1vZHVsZSBpZCA9IDMyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcbm1vZHVsZS5leHBvcnRzID0gcmlwZW1kMTYwXG5cblxuXG4vKlxuQ3J5cHRvSlMgdjMuMS4yXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcbihjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxuKi9cbi8qKiBAcHJlc2VydmVcbihjKSAyMDEyIGJ5IEPDqWRyaWMgTWVzbmlsLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG5SZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAgICAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAgICAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuLy8gQ29uc3RhbnRzIHRhYmxlXG52YXIgemwgPSBbXG4gICAgMCwgIDEsICAyLCAgMywgIDQsICA1LCAgNiwgIDcsICA4LCAgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcbiAgICA3LCAgNCwgMTMsICAxLCAxMCwgIDYsIDE1LCAgMywgMTIsICAwLCAgOSwgIDUsICAyLCAxNCwgMTEsICA4LFxuICAgIDMsIDEwLCAxNCwgIDQsICA5LCAxNSwgIDgsICAxLCAgMiwgIDcsICAwLCAgNiwgMTMsIDExLCAgNSwgMTIsXG4gICAgMSwgIDksIDExLCAxMCwgIDAsICA4LCAxMiwgIDQsIDEzLCAgMywgIDcsIDE1LCAxNCwgIDUsICA2LCAgMixcbiAgICA0LCAgMCwgIDUsICA5LCAgNywgMTIsICAyLCAxMCwgMTQsICAxLCAgMywgIDgsIDExLCAgNiwgMTUsIDEzXTtcbnZhciB6ciA9IFtcbiAgICA1LCAxNCwgIDcsICAwLCAgOSwgIDIsIDExLCAgNCwgMTMsICA2LCAxNSwgIDgsICAxLCAxMCwgIDMsIDEyLFxuICAgIDYsIDExLCAgMywgIDcsICAwLCAxMywgIDUsIDEwLCAxNCwgMTUsICA4LCAxMiwgIDQsICA5LCAgMSwgIDIsXG4gICAgMTUsICA1LCAgMSwgIDMsICA3LCAxNCwgIDYsICA5LCAxMSwgIDgsIDEyLCAgMiwgMTAsICAwLCAgNCwgMTMsXG4gICAgOCwgIDYsICA0LCAgMSwgIDMsIDExLCAxNSwgIDAsICA1LCAxMiwgIDIsIDEzLCAgOSwgIDcsIDEwLCAxNCxcbiAgICAxMiwgMTUsIDEwLCAgNCwgIDEsICA1LCAgOCwgIDcsICA2LCAgMiwgMTMsIDE0LCAgMCwgIDMsICA5LCAxMV07XG52YXIgc2wgPSBbXG4gICAgIDExLCAxNCwgMTUsIDEyLCAgNSwgIDgsICA3LCAgOSwgMTEsIDEzLCAxNCwgMTUsICA2LCAgNywgIDksICA4LFxuICAgIDcsIDYsICAgOCwgMTMsIDExLCAgOSwgIDcsIDE1LCAgNywgMTIsIDE1LCAgOSwgMTEsICA3LCAxMywgMTIsXG4gICAgMTEsIDEzLCAgNiwgIDcsIDE0LCAgOSwgMTMsIDE1LCAxNCwgIDgsIDEzLCAgNiwgIDUsIDEyLCAgNywgIDUsXG4gICAgICAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCAgOSwgIDgsICA5LCAxNCwgIDUsICA2LCAgOCwgIDYsICA1LCAxMixcbiAgICA5LCAxNSwgIDUsIDExLCAgNiwgIDgsIDEzLCAxMiwgIDUsIDEyLCAxMywgMTQsIDExLCAgOCwgIDUsICA2IF07XG52YXIgc3IgPSBbXG4gICAgOCwgIDksICA5LCAxMSwgMTMsIDE1LCAxNSwgIDUsICA3LCAgNywgIDgsIDExLCAxNCwgMTQsIDEyLCAgNixcbiAgICA5LCAxMywgMTUsICA3LCAxMiwgIDgsICA5LCAxMSwgIDcsICA3LCAxMiwgIDcsICA2LCAxNSwgMTMsIDExLFxuICAgIDksICA3LCAxNSwgMTEsICA4LCAgNiwgIDYsIDE0LCAxMiwgMTMsICA1LCAxNCwgMTMsIDEzLCAgNywgIDUsXG4gICAgMTUsICA1LCAgOCwgMTEsIDE0LCAxNCwgIDYsIDE0LCAgNiwgIDksIDEyLCAgOSwgMTIsICA1LCAxNSwgIDgsXG4gICAgOCwgIDUsIDEyLCAgOSwgMTIsICA1LCAxNCwgIDYsICA4LCAxMywgIDYsICA1LCAxNSwgMTMsIDExLCAxMSBdO1xuXG52YXIgaGwgPSAgWyAweDAwMDAwMDAwLCAweDVBODI3OTk5LCAweDZFRDlFQkExLCAweDhGMUJCQ0RDLCAweEE5NTNGRDRFXTtcbnZhciBociA9ICBbIDB4NTBBMjhCRTYsIDB4NUM0REQxMjQsIDB4NkQ3MDNFRjMsIDB4N0E2RDc2RTksIDB4MDAwMDAwMDBdO1xuXG52YXIgYnl0ZXNUb1dvcmRzID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gIHZhciB3b3JkcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgYiA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKywgYiArPSA4KSB7XG4gICAgd29yZHNbYiA+Pj4gNV0gfD0gYnl0ZXNbaV0gPDwgKDI0IC0gYiAlIDMyKTtcbiAgfVxuICByZXR1cm4gd29yZHM7XG59O1xuXG52YXIgd29yZHNUb0J5dGVzID0gZnVuY3Rpb24gKHdvcmRzKSB7XG4gIHZhciBieXRlcyA9IFtdO1xuICBmb3IgKHZhciBiID0gMDsgYiA8IHdvcmRzLmxlbmd0aCAqIDMyOyBiICs9IDgpIHtcbiAgICBieXRlcy5wdXNoKCh3b3Jkc1tiID4+PiA1XSA+Pj4gKDI0IC0gYiAlIDMyKSkgJiAweEZGKTtcbiAgfVxuICByZXR1cm4gYnl0ZXM7XG59O1xuXG52YXIgcHJvY2Vzc0Jsb2NrID0gZnVuY3Rpb24gKEgsIE0sIG9mZnNldCkge1xuXG4gIC8vIFN3YXAgZW5kaWFuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgIHZhciBvZmZzZXRfaSA9IG9mZnNldCArIGk7XG4gICAgdmFyIE1fb2Zmc2V0X2kgPSBNW29mZnNldF9pXTtcblxuICAgIC8vIFN3YXBcbiAgICBNW29mZnNldF9pXSA9IChcbiAgICAgICAgKCgoTV9vZmZzZXRfaSA8PCA4KSAgfCAoTV9vZmZzZXRfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcbiAgICAgICAgKCgoTV9vZmZzZXRfaSA8PCAyNCkgfCAoTV9vZmZzZXRfaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG4gICAgKTtcbiAgfVxuXG4gIC8vIFdvcmtpbmcgdmFyaWFibGVzXG4gIHZhciBhbCwgYmwsIGNsLCBkbCwgZWw7XG4gIHZhciBhciwgYnIsIGNyLCBkciwgZXI7XG5cbiAgYXIgPSBhbCA9IEhbMF07XG4gIGJyID0gYmwgPSBIWzFdO1xuICBjciA9IGNsID0gSFsyXTtcbiAgZHIgPSBkbCA9IEhbM107XG4gIGVyID0gZWwgPSBIWzRdO1xuICAvLyBDb21wdXRhdGlvblxuICB2YXIgdDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSArPSAxKSB7XG4gICAgdCA9IChhbCArICBNW29mZnNldCt6bFtpXV0pfDA7XG4gICAgaWYgKGk8MTYpe1xuICAgICAgICB0ICs9ICBmMShibCxjbCxkbCkgKyBobFswXTtcbiAgICB9IGVsc2UgaWYgKGk8MzIpIHtcbiAgICAgICAgdCArPSAgZjIoYmwsY2wsZGwpICsgaGxbMV07XG4gICAgfSBlbHNlIGlmIChpPDQ4KSB7XG4gICAgICAgIHQgKz0gIGYzKGJsLGNsLGRsKSArIGhsWzJdO1xuICAgIH0gZWxzZSBpZiAoaTw2NCkge1xuICAgICAgICB0ICs9ICBmNChibCxjbCxkbCkgKyBobFszXTtcbiAgICB9IGVsc2Ugey8vIGlmIChpPDgwKSB7XG4gICAgICAgIHQgKz0gIGY1KGJsLGNsLGRsKSArIGhsWzRdO1xuICAgIH1cbiAgICB0ID0gdHwwO1xuICAgIHQgPSAgcm90bCh0LHNsW2ldKTtcbiAgICB0ID0gKHQrZWwpfDA7XG4gICAgYWwgPSBlbDtcbiAgICBlbCA9IGRsO1xuICAgIGRsID0gcm90bChjbCwgMTApO1xuICAgIGNsID0gYmw7XG4gICAgYmwgPSB0O1xuXG4gICAgdCA9IChhciArIE1bb2Zmc2V0K3pyW2ldXSl8MDtcbiAgICBpZiAoaTwxNil7XG4gICAgICAgIHQgKz0gIGY1KGJyLGNyLGRyKSArIGhyWzBdO1xuICAgIH0gZWxzZSBpZiAoaTwzMikge1xuICAgICAgICB0ICs9ICBmNChicixjcixkcikgKyBoclsxXTtcbiAgICB9IGVsc2UgaWYgKGk8NDgpIHtcbiAgICAgICAgdCArPSAgZjMoYnIsY3IsZHIpICsgaHJbMl07XG4gICAgfSBlbHNlIGlmIChpPDY0KSB7XG4gICAgICAgIHQgKz0gIGYyKGJyLGNyLGRyKSArIGhyWzNdO1xuICAgIH0gZWxzZSB7Ly8gaWYgKGk8ODApIHtcbiAgICAgICAgdCArPSAgZjEoYnIsY3IsZHIpICsgaHJbNF07XG4gICAgfVxuICAgIHQgPSB0fDA7XG4gICAgdCA9ICByb3RsKHQsc3JbaV0pIDtcbiAgICB0ID0gKHQrZXIpfDA7XG4gICAgYXIgPSBlcjtcbiAgICBlciA9IGRyO1xuICAgIGRyID0gcm90bChjciwgMTApO1xuICAgIGNyID0gYnI7XG4gICAgYnIgPSB0O1xuICB9XG4gIC8vIEludGVybWVkaWF0ZSBoYXNoIHZhbHVlXG4gIHQgICAgPSAoSFsxXSArIGNsICsgZHIpfDA7XG4gIEhbMV0gPSAoSFsyXSArIGRsICsgZXIpfDA7XG4gIEhbMl0gPSAoSFszXSArIGVsICsgYXIpfDA7XG4gIEhbM10gPSAoSFs0XSArIGFsICsgYnIpfDA7XG4gIEhbNF0gPSAoSFswXSArIGJsICsgY3IpfDA7XG4gIEhbMF0gPSAgdDtcbn07XG5cbmZ1bmN0aW9uIGYxKHgsIHksIHopIHtcbiAgcmV0dXJuICgoeCkgXiAoeSkgXiAoeikpO1xufVxuXG5mdW5jdGlvbiBmMih4LCB5LCB6KSB7XG4gIHJldHVybiAoKCh4KSYoeSkpIHwgKCh+eCkmKHopKSk7XG59XG5cbmZ1bmN0aW9uIGYzKHgsIHksIHopIHtcbiAgcmV0dXJuICgoKHgpIHwgKH4oeSkpKSBeICh6KSk7XG59XG5cbmZ1bmN0aW9uIGY0KHgsIHksIHopIHtcbiAgcmV0dXJuICgoKHgpICYgKHopKSB8ICgoeSkmKH4oeikpKSk7XG59XG5cbmZ1bmN0aW9uIGY1KHgsIHksIHopIHtcbiAgcmV0dXJuICgoeCkgXiAoKHkpIHwofih6KSkpKTtcbn1cblxuZnVuY3Rpb24gcm90bCh4LG4pIHtcbiAgcmV0dXJuICh4PDxuKSB8ICh4Pj4+KDMyLW4pKTtcbn1cblxuZnVuY3Rpb24gcmlwZW1kMTYwKG1lc3NhZ2UpIHtcbiAgdmFyIEggPSBbMHg2NzQ1MjMwMSwgMHhFRkNEQUI4OSwgMHg5OEJBRENGRSwgMHgxMDMyNTQ3NiwgMHhDM0QyRTFGMF07XG5cbiAgaWYgKHR5cGVvZiBtZXNzYWdlID09ICdzdHJpbmcnKVxuICAgIG1lc3NhZ2UgPSBuZXcgQnVmZmVyKG1lc3NhZ2UsICd1dGY4Jyk7XG5cbiAgdmFyIG0gPSBieXRlc1RvV29yZHMobWVzc2FnZSk7XG5cbiAgdmFyIG5CaXRzTGVmdCA9IG1lc3NhZ2UubGVuZ3RoICogODtcbiAgdmFyIG5CaXRzVG90YWwgPSBtZXNzYWdlLmxlbmd0aCAqIDg7XG5cbiAgLy8gQWRkIHBhZGRpbmdcbiAgbVtuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpO1xuICBtWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSAoXG4gICAgICAoKChuQml0c1RvdGFsIDw8IDgpICB8IChuQml0c1RvdGFsID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuICAgICAgKCgobkJpdHNUb3RhbCA8PCAyNCkgfCAobkJpdHNUb3RhbCA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG4gICk7XG5cbiAgZm9yICh2YXIgaT0wIDsgaTxtLmxlbmd0aDsgaSArPSAxNikge1xuICAgIHByb2Nlc3NCbG9jayhILCBtLCBpKTtcbiAgfVxuXG4gIC8vIFN3YXAgZW5kaWFuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICAvLyBTaG9ydGN1dFxuICAgIHZhciBIX2kgPSBIW2ldO1xuXG4gICAgLy8gU3dhcFxuICAgIEhbaV0gPSAoKChIX2kgPDwgOCkgIHwgKEhfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcbiAgICAgICAgICAoKChIX2kgPDwgMjQpIHwgKEhfaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApO1xuICB9XG5cbiAgdmFyIGRpZ2VzdGJ5dGVzID0gd29yZHNUb0J5dGVzKEgpO1xuICByZXR1cm4gbmV3IEJ1ZmZlcihkaWdlc3RieXRlcyk7XG59XG5cblxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2NyeXB0by1icm93c2VyaWZ5L34vcmlwZW1kMTYwL2xpYi9yaXBlbWQxNjAuanNcbiAqKiBtb2R1bGUgaWQgPSAzM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCcuL2NyZWF0ZS1oYXNoJylcblxudmFyIHplcm9CdWZmZXIgPSBuZXcgQnVmZmVyKDEyOClcbnplcm9CdWZmZXIuZmlsbCgwKVxuXG5tb2R1bGUuZXhwb3J0cyA9IEhtYWNcblxuZnVuY3Rpb24gSG1hYyAoYWxnLCBrZXkpIHtcbiAgaWYoISh0aGlzIGluc3RhbmNlb2YgSG1hYykpIHJldHVybiBuZXcgSG1hYyhhbGcsIGtleSlcbiAgdGhpcy5fb3BhZCA9IG9wYWRcbiAgdGhpcy5fYWxnID0gYWxnXG5cbiAgdmFyIGJsb2Nrc2l6ZSA9IChhbGcgPT09ICdzaGE1MTInKSA/IDEyOCA6IDY0XG5cbiAga2V5ID0gdGhpcy5fa2V5ID0gIUJ1ZmZlci5pc0J1ZmZlcihrZXkpID8gbmV3IEJ1ZmZlcihrZXkpIDoga2V5XG5cbiAgaWYoa2V5Lmxlbmd0aCA+IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IGNyZWF0ZUhhc2goYWxnKS51cGRhdGUoa2V5KS5kaWdlc3QoKVxuICB9IGVsc2UgaWYoa2V5Lmxlbmd0aCA8IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwgemVyb0J1ZmZlcl0sIGJsb2Nrc2l6ZSlcbiAgfVxuXG4gIHZhciBpcGFkID0gdGhpcy5faXBhZCA9IG5ldyBCdWZmZXIoYmxvY2tzaXplKVxuICB2YXIgb3BhZCA9IHRoaXMuX29wYWQgPSBuZXcgQnVmZmVyKGJsb2Nrc2l6ZSlcblxuICBmb3IodmFyIGkgPSAwOyBpIDwgYmxvY2tzaXplOyBpKyspIHtcbiAgICBpcGFkW2ldID0ga2V5W2ldIF4gMHgzNlxuICAgIG9wYWRbaV0gPSBrZXlbaV0gXiAweDVDXG4gIH1cblxuICB0aGlzLl9oYXNoID0gY3JlYXRlSGFzaChhbGcpLnVwZGF0ZShpcGFkKVxufVxuXG5IbWFjLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEsIGVuYylcbiAgcmV0dXJuIHRoaXNcbn1cblxuSG1hYy5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuYykge1xuICB2YXIgaCA9IHRoaXMuX2hhc2guZGlnZXN0KClcbiAgcmV0dXJuIGNyZWF0ZUhhc2godGhpcy5fYWxnKS51cGRhdGUodGhpcy5fb3BhZCkudXBkYXRlKGgpLmRpZ2VzdChlbmMpXG59XG5cblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9jcnlwdG8tYnJvd3NlcmlmeS9jcmVhdGUtaG1hYy5qc1xuICoqIG1vZHVsZSBpZCA9IDM0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgcGJrZGYyRXhwb3J0ID0gcmVxdWlyZSgncGJrZGYyLWNvbXBhdC9wYmtkZjInKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjcnlwdG8sIGV4cG9ydHMpIHtcbiAgZXhwb3J0cyA9IGV4cG9ydHMgfHwge31cblxuICB2YXIgZXhwb3J0ZWQgPSBwYmtkZjJFeHBvcnQoY3J5cHRvKVxuXG4gIGV4cG9ydHMucGJrZGYyID0gZXhwb3J0ZWQucGJrZGYyXG4gIGV4cG9ydHMucGJrZGYyU3luYyA9IGV4cG9ydGVkLnBia2RmMlN5bmNcblxuICByZXR1cm4gZXhwb3J0c1xufVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2NyeXB0by1icm93c2VyaWZ5L3Bia2RmMi5qc1xuICoqIG1vZHVsZSBpZCA9IDM1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGNyeXB0bykge1xuICBmdW5jdGlvbiBwYmtkZjIocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0LCBjYWxsYmFjaykge1xuICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZGlnZXN0KSB7XG4gICAgICBjYWxsYmFjayA9IGRpZ2VzdFxuICAgICAgZGlnZXN0ID0gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgaWYgKCdmdW5jdGlvbicgIT09IHR5cGVvZiBjYWxsYmFjaylcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gY2FsbGJhY2sgcHJvdmlkZWQgdG8gcGJrZGYyJylcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVzdWx0XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc3VsdCA9IHBia2RmMlN5bmMocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0KVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZSlcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCByZXN1bHQpXG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHBia2RmMlN5bmMocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0KSB7XG4gICAgaWYgKCdudW1iZXInICE9PSB0eXBlb2YgaXRlcmF0aW9ucylcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0l0ZXJhdGlvbnMgbm90IGEgbnVtYmVyJylcblxuICAgIGlmIChpdGVyYXRpb25zIDwgMClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBpdGVyYXRpb25zJylcblxuICAgIGlmICgnbnVtYmVyJyAhPT0gdHlwZW9mIGtleWxlbilcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0tleSBsZW5ndGggbm90IGEgbnVtYmVyJylcblxuICAgIGlmIChrZXlsZW4gPCAwKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFkIGtleSBsZW5ndGgnKVxuXG4gICAgZGlnZXN0ID0gZGlnZXN0IHx8ICdzaGExJ1xuXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFzc3dvcmQpKSBwYXNzd29yZCA9IG5ldyBCdWZmZXIocGFzc3dvcmQpXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoc2FsdCkpIHNhbHQgPSBuZXcgQnVmZmVyKHNhbHQpXG5cbiAgICB2YXIgaExlbiwgbCA9IDEsIHIsIFRcbiAgICB2YXIgREsgPSBuZXcgQnVmZmVyKGtleWxlbilcbiAgICB2YXIgYmxvY2sxID0gbmV3IEJ1ZmZlcihzYWx0Lmxlbmd0aCArIDQpXG4gICAgc2FsdC5jb3B5KGJsb2NrMSwgMCwgMCwgc2FsdC5sZW5ndGgpXG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBsOyBpKyspIHtcbiAgICAgIGJsb2NrMS53cml0ZVVJbnQzMkJFKGksIHNhbHQubGVuZ3RoKVxuXG4gICAgICB2YXIgVSA9IGNyeXB0by5jcmVhdGVIbWFjKGRpZ2VzdCwgcGFzc3dvcmQpLnVwZGF0ZShibG9jazEpLmRpZ2VzdCgpXG5cbiAgICAgIGlmICghaExlbikge1xuICAgICAgICBoTGVuID0gVS5sZW5ndGhcbiAgICAgICAgVCA9IG5ldyBCdWZmZXIoaExlbilcbiAgICAgICAgbCA9IE1hdGguY2VpbChrZXlsZW4gLyBoTGVuKVxuICAgICAgICByID0ga2V5bGVuIC0gKGwgLSAxKSAqIGhMZW5cblxuICAgICAgICBpZiAoa2V5bGVuID4gKE1hdGgucG93KDIsIDMyKSAtIDEpICogaExlbilcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdrZXlsZW4gZXhjZWVkcyBtYXhpbXVtIGxlbmd0aCcpXG4gICAgICB9XG5cbiAgICAgIFUuY29weShULCAwLCAwLCBoTGVuKVxuXG4gICAgICBmb3IgKHZhciBqID0gMTsgaiA8IGl0ZXJhdGlvbnM7IGorKykge1xuICAgICAgICBVID0gY3J5cHRvLmNyZWF0ZUhtYWMoZGlnZXN0LCBwYXNzd29yZCkudXBkYXRlKFUpLmRpZ2VzdCgpXG5cbiAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBoTGVuOyBrKyspIHtcbiAgICAgICAgICBUW2tdIF49IFVba11cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZGVzdFBvcyA9IChpIC0gMSkgKiBoTGVuXG4gICAgICB2YXIgbGVuID0gKGkgPT0gbCA/IHIgOiBoTGVuKVxuICAgICAgVC5jb3B5KERLLCBkZXN0UG9zLCAwLCBsZW4pXG4gICAgfVxuXG4gICAgcmV0dXJuIERLXG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBia2RmMjogcGJrZGYyLFxuICAgIHBia2RmMlN5bmM6IHBia2RmMlN5bmNcbiAgfVxufVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2NyeXB0by1icm93c2VyaWZ5L34vcGJrZGYyLWNvbXBhdC9wYmtkZjIuanNcbiAqKiBtb2R1bGUgaWQgPSAzNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiQmlnSW50ZWdlciA9IHJlcXVpcmUgJ2JpZ2knXHJcbmVjdXJ2ZSA9IHJlcXVpcmUoJ2VjdXJ2ZScpXHJcbnNlY3AyNTZrMSA9IGVjdXJ2ZS5nZXRDdXJ2ZUJ5TmFtZSAnc2VjcDI1NmsxJ1xyXG5CaWdJbnRlZ2VyID0gcmVxdWlyZSAnYmlnaSdcclxuYmFzZTU4ID0gcmVxdWlyZSAnYnM1OCdcclxuaGFzaCA9IHJlcXVpcmUgJy4uL2NvbW1vbi9oYXNoJ1xyXG5jb25maWcgPSByZXF1aXJlICcuLi9jaGFpbi9jb25maWcnXHJcbmFzc2VydCA9IHJlcXVpcmUgJ2Fzc2VydCdcclxuXHJcbiMgISEhIEltcG9ydGluZyBBZGRyZXNzIGhlcmUgd2lsbCBicmVhayB0cmFuc2FjdGlvbnMgaW46IG5wbSB0ZXN0XHJcbiN7QWRkcmVzc30gPSByZXF1aXJlICcuL2FkZHJlc3MnXHJcblxyXG5jbGFzcyBQdWJsaWNLZXlcclxuXHJcbiAgICAjIyMqIEBwYXJhbSB7ZWN1cnZlLlBvaW50fSBwdWJsaWMga2V5ICMjI1xyXG4gICAgY29uc3RydWN0b3I6IChAUSkgLT5cclxuICAgIFxyXG4gICAgUHVibGljS2V5LmZyb21CaW5hcnkgPSAoYmluKSAtPlxyXG4gICAgICAgIFB1YmxpY0tleS5mcm9tQnVmZmVyIG5ldyBCdWZmZXIgYmluLCAnYmluYXJ5J1xyXG5cclxuICAgIFB1YmxpY0tleS5mcm9tQnVmZmVyID0gKGJ1ZmZlcikgLT5cclxuICAgICAgICBuZXcgUHVibGljS2V5IGVjdXJ2ZS5Qb2ludC5kZWNvZGVGcm9tIHNlY3AyNTZrMSwgYnVmZmVyXHJcblxyXG4gICAgdG9CdWZmZXI6KGNvbXByZXNzZWQgPSBAUS5jb21wcmVzc2VkKSAtPlxyXG4gICAgICAgIEBRLmdldEVuY29kZWQgY29tcHJlc3NlZFxyXG4gICAgICAgIFxyXG4gICAgUHVibGljS2V5LmZyb21Qb2ludCA9IChwb2ludCkgLT5cclxuICAgICAgICBuZXcgUHVibGljS2V5IHBvaW50XHJcblxyXG4gICAgdG9VbmNvbXByZXNzZWQ6IC0+XHJcbiAgICAgICAgYnVmID0gQFEuZ2V0RW5jb2RlZChmYWxzZSlcclxuICAgICAgICBwb2ludCA9IGVjdXJ2ZS5Qb2ludC5kZWNvZGVGcm9tIHNlY3AyNTZrMSwgYnVmXHJcbiAgICAgICAgUHVibGljS2V5LmZyb21Qb2ludCBwb2ludFxyXG4gICAgXHJcbiAgICAjIyMqIGJ0czo6YmxvY2tjaGFpbjo6YWRkcmVzcyAodW5pcXVlIGJ1dCBub3QgYSBmdWxsIHB1YmxpYyBrZXkpICMjI1xyXG4gICAgdG9CbG9ja2NoYWluQWRkcmVzczogLT5cclxuICAgICAgICAjYWRkcmVzcyA9IEFkZHJlc3MuZnJvbUJ1ZmZlcihAdG9CdWZmZXIoKSlcclxuICAgICAgICAjYXNzZXJ0LmRlZXBFcXVhbCBhZGRyZXNzLnRvQnVmZmVyKCksIGhcclxuICAgICAgICBwdWJfYnVmID0gQHRvQnVmZmVyKClcclxuICAgICAgICBwdWJfc2hhID0gaGFzaC5zaGE1MTIgcHViX2J1ZlxyXG4gICAgICAgIGhhc2gucmlwZW1kMTYwIHB1Yl9zaGFcclxuICAgIFxyXG4gICAgIyMjKlxyXG4gICAgRnVsbCBwdWJsaWMga2V5IFxyXG4gICAge3JldHVybn0gc3RyaW5nXHJcbiAgICAjIyNcclxuICAgIHRvUHVibGljS2V5U3RyaW5nOiAoYWRkcmVzc19wcmVmaXggPSBjb25maWcuYWRkcmVzc19wcmVmaXgpIC0+XHJcbiAgICAgICAgcHViX2J1ZiA9IEB0b0J1ZmZlcigpXHJcbiAgICAgICAgY2hlY2tzdW0gPSBoYXNoLnJpcGVtZDE2MCBwdWJfYnVmXHJcbiAgICAgICAgYWRkeSA9IEJ1ZmZlci5jb25jYXQgW3B1Yl9idWYsIGNoZWNrc3VtLnNsaWNlIDAsIDRdXHJcbiAgICAgICAgYWRkcmVzc19wcmVmaXggKyBiYXNlNTguZW5jb2RlIGFkZHlcclxuICAgIFxyXG4gICAgIyMjKlxyXG4gICAge3BhcmFtMX0gcHVibGljX2tleSBzdHJpbmdcclxuICAgIHtyZXR1cm59IFB1YmxpY0tleVxyXG4gICAgIyMjXHJcbiAgICBQdWJsaWNLZXkuZnJvbVB1YmxpY0tleVN0cmluZyA9IChwdWJsaWNfa2V5LCBhZGRyZXNzX3ByZWZpeCA9IGNvbmZpZy5hZGRyZXNzX3ByZWZpeCkgLT5cclxuICAgICAgICB0cnkgXHJcbiAgICAgICAgICAgcHJlZml4ID0gcHVibGljX2tleS5zbGljZSAwLCBhZGRyZXNzX3ByZWZpeC5sZW5ndGhcclxuICAgICAgICAgICBhc3NlcnQuZXF1YWwgYWRkcmVzc19wcmVmaXgsIHByZWZpeCwgXCJFeHBlY3Rpbmcga2V5IHRvIGJlZ2luIHdpdGggI3thZGRyZXNzX3ByZWZpeH0sIGluc3RlYWQgZ290ICN7cHJlZml4fVwiXHJcbiAgICAgICAgICAgcHVibGljX2tleSA9IHB1YmxpY19rZXkuc2xpY2UgYWRkcmVzc19wcmVmaXgubGVuZ3RoXHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgcHVibGljX2tleSA9IG5ldyBCdWZmZXIoYmFzZTU4LmRlY29kZShwdWJsaWNfa2V5KSwgJ2JpbmFyeScpXHJcbiAgICAgICAgICAgY2hlY2tzdW0gPSBwdWJsaWNfa2V5LnNsaWNlIC00XHJcbiAgICAgICAgICAgcHVibGljX2tleSA9IHB1YmxpY19rZXkuc2xpY2UgMCwgLTRcclxuICAgICAgICAgICBuZXdfY2hlY2tzdW0gPSBoYXNoLnJpcGVtZDE2MCBwdWJsaWNfa2V5XHJcbiAgICAgICAgICAgbmV3X2NoZWNrc3VtID0gbmV3X2NoZWNrc3VtLnNsaWNlIDAsIDRcclxuICAgICAgICAgICBhc3NlcnQuZGVlcEVxdWFsIGNoZWNrc3VtLCBuZXdfY2hlY2tzdW0sICdDaGVja3N1bSBkaWQgbm90IG1hdGNoJ1xyXG4gICAgICAgICAgIFB1YmxpY0tleS5mcm9tQnVmZmVyIHB1YmxpY19rZXlcclxuICAgICAgICBjYXRjaCBlXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IgJ1B1YmxpY0tleS5mcm9tUHVibGljS2V5U3RyaW5nJywgZVxyXG4gICAgICAgICAgICBudWxsXHJcbiAgICAgICAgXHJcbiAgICBcclxuICAgIHRvQWRkcmVzc1N0cmluZzogKGFkZHJlc3NfcHJlZml4ID0gY29uZmlnLmFkZHJlc3NfcHJlZml4KSAtPlxyXG4gICAgICAgIHB1Yl9idWYgPSBAdG9CdWZmZXIoKVxyXG4gICAgICAgIHB1Yl9zaGEgPSBoYXNoLnNoYTUxMiBwdWJfYnVmXHJcbiAgICAgICAgYWRkeSA9IGhhc2gucmlwZW1kMTYwIHB1Yl9zaGFcclxuICAgICAgICBjaGVja3N1bSA9IGhhc2gucmlwZW1kMTYwIGFkZHlcclxuICAgICAgICBhZGR5ID0gQnVmZmVyLmNvbmNhdCBbYWRkeSwgY2hlY2tzdW0uc2xpY2UgMCwgNF1cclxuICAgICAgICBhZGRyZXNzX3ByZWZpeCArIGJhc2U1OC5lbmNvZGUgYWRkeVxyXG4gICAgICAgIFxyXG4gICAgdG9QdHNBZGR5OiAtPlxyXG4gICAgICAgIHB1Yl9idWYgPSBAdG9CdWZmZXIoKVxyXG4gICAgICAgIHB1Yl9zaGEgPSBoYXNoLnNoYTI1NiBwdWJfYnVmXHJcbiAgICAgICAgYWRkeSA9IGhhc2gucmlwZW1kMTYwIHB1Yl9zaGFcclxuICAgICAgICBhZGR5ID0gQnVmZmVyLmNvbmNhdCBbbmV3IEJ1ZmZlcihbMHgzOF0pLCBhZGR5XSAjdmVyc2lvbiA1NihkZWNpbWFsKVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNoZWNrc3VtID0gaGFzaC5zaGEyNTYgYWRkeVxyXG4gICAgICAgIGNoZWNrc3VtID0gaGFzaC5zaGEyNTYgY2hlY2tzdW1cclxuICAgICAgICBcclxuICAgICAgICBhZGR5ID0gQnVmZmVyLmNvbmNhdCBbYWRkeSwgY2hlY2tzdW0uc2xpY2UgMCwgNF1cclxuICAgICAgICBiYXNlNTguZW5jb2RlIGFkZHlcclxuICAgICAgICBcclxuXHJcbiAgICAjIyMgPEhFWD4gIyMjXHJcbiAgICBcclxuICAgIHRvQnl0ZUJ1ZmZlcjogKCkgLT5cclxuICAgICAgICBiID0gbmV3IEJ5dGVCdWZmZXIoQnl0ZUJ1ZmZlci5ERUZBVUxUX0NBUEFDSVRZLCBCeXRlQnVmZmVyLkxJVFRMRV9FTkRJQU4pXHJcbiAgICAgICAgQGFwcGVuZEJ5dGVCdWZmZXIoYilcclxuICAgICAgICBiLmNvcHkgMCwgYi5vZmZzZXRcclxuICAgIFxyXG4gICAgUHVibGljS2V5LmZyb21IZXggPSAoaGV4KSAtPlxyXG4gICAgICAgIFB1YmxpY0tleS5mcm9tQnVmZmVyIG5ldyBCdWZmZXIgaGV4LCAnaGV4J1xyXG5cclxuICAgIHRvSGV4OiAtPlxyXG4gICAgICAgIEB0b0J1ZmZlcigpLnRvU3RyaW5nICdoZXgnXHJcbiAgICAgICAgXHJcbiAgICBQdWJsaWNLZXkuZnJvbVB1YmxpY0tleVN0cmluZ0hleCA9IChoZXgpIC0+XHJcbiAgICAgICAgUHVibGljS2V5LmZyb21QdWJsaWNLZXlTdHJpbmcgbmV3IEJ1ZmZlciBoZXgsICdoZXgnXHJcbiAgICAgICAgXHJcbiAgICAjIyMgPC9IRVg+ICMjI1xyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUHVibGljS2V5XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL2RsL3NyYy9lY2Mva2V5X3B1YmxpYy5jb2ZmZWVcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IF90aGlzID1cclxuICAgIGNvcmVfYXNzZXQ6IFwiQ09SRVwiXHJcbiAgICBhZGRyZXNzX3ByZWZpeDogXCJHUEhcIlxyXG4gICAgZXhwaXJlX2luX3NlY3M6IDE1XHJcbiAgICBleHBpcmVfaW5fc2Vjc19wcm9wb3NhbDogMjQgKiA2MCAqIDYwXHJcbiAgICBuZXR3b3JrczpcclxuICAgICAgICBCaXRTaGFyZXM6XHJcbiAgICAgICAgICAgIGNvcmVfYXNzZXQ6IFwiQlRTXCJcclxuICAgICAgICAgICAgYWRkcmVzc19wcmVmaXg6IFwiQlRTXCJcclxuICAgICAgICAgICAgY2hhaW5faWQ6IFwiNDAxOGQ3ODQ0Yzc4ZjZhNmM0MWM2YTU1MmI4OTgwMjIzMTBmYzVkZWMwNmRhNDY3ZWU3OTA1YThkYWQ1MTJjOFwiXHJcbiAgICAgICAgTXVzZTpcclxuICAgICAgICAgICAgY29yZV9hc3NldDogXCJNVVNFXCJcclxuICAgICAgICAgICAgYWRkcmVzc19wcmVmaXg6IFwiTVVTRVwiXHJcbiAgICAgICAgICAgIGNoYWluX2lkOiBcIjQ1YWQyZDNmOWVmOTJhNDliNTVjMjIyN2ViMDYxMjNmNjEzYmIzNWRkMDhiZDg3NmYyYWVhMjE5MjVhNjdhNjdcIlxyXG4gICAgXHJcbiAgICAjIEF1dG8tY29uZmlndXJlIGlmIGEgbWF0Y2hpbmcgY2hhaW4gSUQgaXMgZm91bmRcclxuICAgIHNldENoYWluSWQ6IChjaGFpbl9pZCkgLT5cclxuICAgICAgICBmb3IgbmV0d29ya19uYW1lIGluIE9iamVjdC5rZXlzKF90aGlzLm5ldHdvcmtzKVxyXG4gICAgICAgICAgICBuZXR3b3JrID0gX3RoaXMubmV0d29ya3NbbmV0d29ya19uYW1lXVxyXG4gICAgICAgICAgICBpZiggbmV0d29yay5jaGFpbl9pZCA9PSBjaGFpbl9pZCApXHJcbiAgICAgICAgICAgICAgICBfdGhpcy5uZXR3b3JrX25hbWUgPSBuZXR3b3JrX25hbWVcclxuICAgICAgICAgICAgICAgIF90aGlzLmFkZHJlc3NfcHJlZml4ID0gbmV0d29yay5hZGRyZXNzX3ByZWZpeCBpZihuZXR3b3JrLmFkZHJlc3NfcHJlZml4KVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cgXCJDb25maWd1cmVkIGZvclwiLCBuZXR3b3JrX25hbWUsIG5ldHdvcmtcclxuICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgdW5sZXNzIF90aGlzLm5ldHdvcmtfbmFtZVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyBcIlVua25vd24gY2hhaW4gaWRcIiwgY2hhaW5faWRcclxuICAgICAgICByZXR1cm5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9kbC9zcmMvY2hhaW4vY29uZmlnLmNvZmZlZVxuICoqLyIsIiMgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcclxuQ3J5cHRvSlMgPSByZXF1aXJlKFwiY3J5cHRvLWpzXCIpXHJcbmFzc2VydCA9IHJlcXVpcmUoXCJhc3NlcnRcIilcclxuQnl0ZUJ1ZmZlciA9IHJlcXVpcmUoXCIuLi9jb21tb24vYnl0ZWJ1ZmZlclwiKVxyXG5Mb25nID0gQnl0ZUJ1ZmZlci5Mb25nXHJcbmhhc2ggPSByZXF1aXJlKFwiLi4vY29tbW9uL2hhc2hcIilcclxuXHJcbmNsYXNzIEFlc1xyXG5cclxuICAgIGNvbnN0cnVjdG9yOiAoQGl2LCBAa2V5KSAtPlxyXG4gICAgICAgIFxyXG4gICAgY2xlYXI6LT5AaXYgPSBAa2V5ID0gdW5kZWZpbmVkXHJcbiAgICBcclxuICAgICMgVE9ETyBhcmcgc2hvdWxkIGJlIGEgYmluYXJ5IHR5cGUuLi4gSEVYIHdvcmtzIGJlc3Qgd2l0aCBjcnlwdG8tanNcclxuICAgIEFlcy5mcm9tU2hhNTEyID0gKGhhc2gpIC0+XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsIGhhc2gubGVuZ3RoLCAxMjgsIFwiQSBTaGE1MTIgaW4gSEVYIHNob3VsZCBiZSAxMjggY2hhcmFjdGVycyBsb25nLCBpbnN0ZWFkIGdvdCAje2hhc2gubGVuZ3RofVwiXHJcbiAgICAgICAgaXYgPSBDcnlwdG9KUy5lbmMuSGV4LnBhcnNlKGhhc2guc3Vic3RyaW5nKDY0LCA5NikpXHJcbiAgICAgICAga2V5ID0gQ3J5cHRvSlMuZW5jLkhleC5wYXJzZShoYXNoLnN1YnN0cmluZygwLCA2NCkpXHJcbiAgICAgICAgbmV3IEFlcyhpdiwga2V5KVxyXG4gICAgXHJcbiAgICBBZXMuZnJvbVNlZWQgPSAoc2VlZCkgLT5cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZWVkIGlzIHJlcXVpcmVkXCIpIGlmIHNlZWQgaXMgdW5kZWZpbmVkXHJcbiAgICAgICAgX2hhc2ggPSBoYXNoLnNoYTUxMiBzZWVkXHJcbiAgICAgICAgX2hhc2ggPSBfaGFzaC50b1N0cmluZygnaGV4JylcclxuICAgICAgICAjIERFQlVHIGNvbnNvbGUubG9nKCcuLi4gQWVzLmZyb21TZWVkIF9oYXNoJyxfaGFzaClcclxuICAgICAgICBBZXMuZnJvbVNoYTUxMihfaGFzaClcclxuICAgIFxyXG4gICAgIyMqIG5vbmNlIGlzIG9wdGlvbmFsIChudWxsIG9yIGVtcHR5IHN0cmluZylcclxuICAgIEFlcy5kZWNyeXB0X3dpdGhfY2hlY2tzdW0gPSAocHJpdmF0ZV9rZXksIHB1YmxpY19rZXksIG5vbmNlID0gXCJcIiwgbWVzc2FnZSkgLT5cclxuICAgICAgICBcclxuICAgICAgICB1bmxlc3MgQnVmZmVyLmlzQnVmZmVyIG1lc3NhZ2VcclxuICAgICAgICAgICAgbWVzc2FnZSA9IG5ldyBCdWZmZXIgbWVzc2FnZSwgJ2hleCdcclxuICAgICAgICBcclxuICAgICAgICBTID0gcHJpdmF0ZV9rZXkuZ2V0X3NoYXJlZF9zZWNyZXQgcHVibGljX2tleVxyXG4gICAgICAgIFxyXG4gICAgICAgICMgRCBFIEIgVSBHXHJcbiAgICAgICAgIyBjb25zb2xlLmxvZygnZGVjcnlwdF93aXRoX2NoZWNrc3VtJywge1xyXG4gICAgICAgICMgICAgIHByaXZfdG9fcHViOiBwcml2YXRlX2tleS50b1B1YmxpY0tleSgpLnRvUHVibGljS2V5U3RyaW5nKClcclxuICAgICAgICAjICAgICBwdWI6IHB1YmxpY19rZXkudG9QdWJsaWNLZXlTdHJpbmcoKVxyXG4gICAgICAgICMgICAgIG5vbmNlOiBub25jZVxyXG4gICAgICAgICMgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcclxuICAgICAgICAjICAgICBTOiBTXHJcbiAgICAgICAgIyB9KVxyXG4gICAgICAgIFxyXG4gICAgICAgIGFlcyA9IEFlcy5mcm9tU2VlZCBCdWZmZXIuY29uY2F0IFtcclxuICAgICAgICAgICAgIyBBIG51bGwgb3IgZW1wdHkgc3RyaW5nIG5vbmNlIHdpbGwgbm90IGVmZmVjdCB0aGUgaGFzaFxyXG4gICAgICAgICAgICBuZXcgQnVmZmVyKFwiXCIrbm9uY2UpIFxyXG4gICAgICAgICAgICBuZXcgQnVmZmVyKFMudG9TdHJpbmcoJ2hleCcpKVxyXG4gICAgICAgIF1cclxuICAgICAgICBwbGFuZWJ1ZmZlciA9IGFlcy5kZWNyeXB0IG1lc3NhZ2VcclxuICAgICAgICB1bmxlc3MgcGxhbmVidWZmZXIubGVuZ3RoID49IDRcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yIFwiSW52YWxpZCBrZXksIGNvdWxkIG5vdCBkZWNyeXB0IG1lc3NhZ2UoMSlcIlxyXG4gICAgICAgIFxyXG4gICAgICAgICMgREVCVUcgY29uc29sZS5sb2coJy4uLiBwbGFuZWJ1ZmZlcicscGxhbmVidWZmZXIpXHJcbiAgICAgICAgY2hlY2tzdW0gPSBwbGFuZWJ1ZmZlci5zbGljZSAwLCA0XHJcbiAgICAgICAgcGxhaW50ZXh0ID0gcGxhbmVidWZmZXIuc2xpY2UoNClcclxuICAgICAgICBcclxuICAgICAgICAjIERFQlVHIGNvbnNvbGUubG9nKCcuLi4gY2hlY2tzdW0nLGNoZWNrc3VtLnRvU3RyaW5nKCdoZXgnKSlcclxuICAgICAgICAjIERFQlVHIGNvbnNvbGUubG9nKCcuLi4gcGxhaW50ZXh0JyxwbGFpbnRleHQpXHJcbiAgICAgICAgXHJcbiAgICAgICAgbmV3X2NoZWNrc3VtID0gaGFzaC5zaGEyNTYgcGxhaW50ZXh0XHJcbiAgICAgICAgbmV3X2NoZWNrc3VtID0gbmV3X2NoZWNrc3VtLnNsaWNlIDAsIDRcclxuICAgICAgICBuZXdfY2hlY2tzdW0gPSBuZXdfY2hlY2tzdW0udG9TdHJpbmcoJ2hleCcpXHJcbiAgICAgICAgXHJcbiAgICAgICAgdW5sZXNzIGNoZWNrc3VtLnRvU3RyaW5nKCdoZXgnKSBpcyBuZXdfY2hlY2tzdW1cclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yIFwiSW52YWxpZCBrZXksIGNvdWxkIG5vdCBkZWNyeXB0IG1lc3NhZ2UoMilcIlxyXG4gICAgICAgIFxyXG4gICAgICAgIHBsYWludGV4dFxyXG4gICAgXHJcbiAgICBBZXMuZW5jcnlwdF93aXRoX2NoZWNrc3VtID0gKHByaXZhdGVfa2V5LCBwdWJsaWNfa2V5LCBub25jZSA9IFwiXCIsIG1lc3NhZ2UpIC0+XHJcbiAgICAgICAgXHJcbiAgICAgICAgdW5sZXNzIEJ1ZmZlci5pc0J1ZmZlciBtZXNzYWdlXHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBuZXcgQnVmZmVyIG1lc3NhZ2UsICdiaW5hcnknXHJcbiAgICAgICAgXHJcbiAgICAgICAgUyA9IHByaXZhdGVfa2V5LmdldF9zaGFyZWRfc2VjcmV0IHB1YmxpY19rZXlcclxuICAgICAgICBcclxuICAgICAgICAjIEQgRSBCIFUgR1xyXG4gICAgICAgICMgY29uc29sZS5sb2coJ2VuY3J5cHRfd2l0aF9jaGVja3N1bScsIHtcclxuICAgICAgICAjICAgICBwcml2X3RvX3B1YjogcHJpdmF0ZV9rZXkudG9QdWJsaWNLZXkoKS50b1B1YmxpY0tleVN0cmluZygpXHJcbiAgICAgICAgIyAgICAgcHViOiBwdWJsaWNfa2V5LnRvUHVibGljS2V5U3RyaW5nKClcclxuICAgICAgICAjICAgICBub25jZTogbm9uY2VcclxuICAgICAgICAjICAgICBtZXNzYWdlOiBtZXNzYWdlXHJcbiAgICAgICAgIyAgICAgUzogU1xyXG4gICAgICAgICMgfSlcclxuICAgICAgICBcclxuICAgICAgICBhZXMgPSBBZXMuZnJvbVNlZWQgQnVmZmVyLmNvbmNhdCBbXHJcbiAgICAgICAgICAgICMgQSBudWxsIG9yIGVtcHR5IHN0cmluZyBub25jZSB3aWxsIG5vdCBlZmZlY3QgdGhlIGhhc2hcclxuICAgICAgICAgICAgbmV3IEJ1ZmZlcihcIlwiK25vbmNlKVxyXG4gICAgICAgICAgICBuZXcgQnVmZmVyKFMudG9TdHJpbmcoJ2hleCcpKVxyXG4gICAgICAgIF1cclxuICAgICAgICAjIERFQlVHIGNvbnNvbGUubG9nKCcuLi4gUycsUy50b1N0cmluZygnaGV4JykpXHJcbiAgICAgICAgY2hlY2tzdW0gPSBoYXNoLnNoYTI1NihtZXNzYWdlKS5zbGljZSAwLDRcclxuICAgICAgICBwYXlsb2FkID0gQnVmZmVyLmNvbmNhdCBbY2hlY2tzdW0sIG1lc3NhZ2VdXHJcbiAgICAgICAgIyBERUJVRyBjb25zb2xlLmxvZygnLi4uIHBheWxvYWQnLHBheWxvYWQudG9TdHJpbmcoKSlcclxuICAgICAgICBhZXMuZW5jcnlwdCBwYXlsb2FkXHJcbiAgICBcclxuICAgIF9kZWNyeXB0X3dvcmRfYXJyYXk6IChjaXBoZXIpIC0+XHJcbiAgICAgICAgIyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy8jQ3VzdG9tX0tleV9hbmRfSVZcclxuICAgICAgICAjIHNlZSB3YWxsZXRfcmVjb3Jkcy5jcHAgbWFzdGVyX2tleTo6ZGVjcnlwdF9rZXlcclxuICAgICAgICBDcnlwdG9KUy5BRVMuZGVjcnlwdChcclxuICAgICAgICAgIGNpcGhlcnRleHQ6IGNpcGhlclxyXG4gICAgICAgICAgc2FsdDogbnVsbFxyXG4gICAgICAgICwgQGtleSxcclxuICAgICAgICAgIGl2OiBAaXZcclxuICAgICAgICApXHJcbiAgICBcclxuICAgIF9lbmNyeXB0X3dvcmRfYXJyYXk6IChwbGFpbnRleHQpIC0+XHJcbiAgICAgICAgI2h0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL2lzc3Vlcy9kZXRhaWw/aWQ9ODVcclxuICAgICAgICBjaXBoZXIgPSBDcnlwdG9KUy5BRVMuZW5jcnlwdCBwbGFpbnRleHQsIEBrZXksIHtpdjogQGl2fVxyXG4gICAgICAgIENyeXB0b0pTLmVuYy5CYXNlNjQucGFyc2UgY2lwaGVyLnRvU3RyaW5nKClcclxuXHJcbiAgICBkZWNyeXB0OiAoY2lwaGVyX2J1ZmZlcikgLT5cclxuICAgICAgICBpZiB0eXBlb2YgY2lwaGVyX2J1ZmZlciBpcyBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgIGNpcGhlcl9idWZmZXIgPSBuZXcgQnVmZmVyKGNpcGhlcl9idWZmZXIsICdiaW5hcnknKVxyXG4gICAgICAgIHVubGVzcyBCdWZmZXIuaXNCdWZmZXIgY2lwaGVyX2J1ZmZlclxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IgXCJidWZmZXIgcmVxdWlyZWRcIlxyXG4gICAgICAgIGFzc2VydCBjaXBoZXJfYnVmZmVyLCBcIk1pc3NpbmcgY2lwaGVyIHRleHRcIlxyXG4gICAgICAgICMgaGV4IGlzIHRoZSBvbmx5IGNvbW1vbiBmb3JtYXRcclxuICAgICAgICBoZXggPSBAZGVjcnlwdEhleChjaXBoZXJfYnVmZmVyLnRvU3RyaW5nKCdoZXgnKSlcclxuICAgICAgICBuZXcgQnVmZmVyKGhleCwgJ2hleCcpXHJcbiAgICAgICAgXHJcbiAgICBlbmNyeXB0OiAocGxhaW50ZXh0KSAtPlxyXG4gICAgICAgIGlmIHR5cGVvZiBwbGFpbnRleHQgaXMgXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICBwbGFpbnRleHQgPSBuZXcgQnVmZmVyKHBsYWludGV4dCwgJ2JpbmFyeScpXHJcbiAgICAgICAgdW5sZXNzIEJ1ZmZlci5pc0J1ZmZlciBwbGFpbnRleHRcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yIFwiYnVmZmVyIHJlcXVpcmVkXCJcclxuICAgICAgICAjYXNzZXJ0IHBsYWludGV4dCwgXCJNaXNzaW5nIHBsYWluIHRleHRcIlxyXG4gICAgICAgICMgaGV4IGlzIHRoZSBvbmx5IGNvbW1vbiBmb3JtYXRcclxuICAgICAgICBoZXggPSBAZW5jcnlwdEhleChwbGFpbnRleHQudG9TdHJpbmcoJ2hleCcpKVxyXG4gICAgICAgIG5ldyBCdWZmZXIoaGV4LCAnaGV4JylcclxuXHJcbiAgICBlbmNyeXB0VG9IZXg6IChwbGFpbnRleHQpIC0+XHJcbiAgICAgICAgaWYgdHlwZW9mIHBsYWludGV4dCBpcyBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgIHBsYWludGV4dCA9IG5ldyBCdWZmZXIocGxhaW50ZXh0LCAnYmluYXJ5JylcclxuICAgICAgICB1bmxlc3MgQnVmZmVyLmlzQnVmZmVyIHBsYWludGV4dFxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IgXCJidWZmZXIgcmVxdWlyZWRcIlxyXG4gICAgICAgICNhc3NlcnQgcGxhaW50ZXh0LCBcIk1pc3NpbmcgcGxhaW4gdGV4dFwiXHJcbiAgICAgICAgIyBoZXggaXMgdGhlIG9ubHkgY29tbW9uIGZvcm1hdFxyXG4gICAgICAgIEBlbmNyeXB0SGV4KHBsYWludGV4dC50b1N0cmluZygnaGV4JykpXHJcbiAgICAgICAgXHJcbiAgICBkZWNyeXB0SGV4OiAoY2lwaGVyKSAtPlxyXG4gICAgICAgIGFzc2VydCBjaXBoZXIsIFwiTWlzc2luZyBjaXBoZXIgdGV4dFwiXHJcbiAgICAgICAgIyBDb252ZXJ0IGRhdGEgaW50byB3b3JkIGFycmF5cyAodXNlZCBieSBDcnlwdG8pXHJcbiAgICAgICAgY2lwaGVyX2FycmF5ID0gQ3J5cHRvSlMuZW5jLkhleC5wYXJzZSBjaXBoZXJcclxuICAgICAgICBwbGFpbndvcmRzID0gQF9kZWNyeXB0X3dvcmRfYXJyYXkgY2lwaGVyX2FycmF5XHJcbiAgICAgICAgQ3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkgcGxhaW53b3Jkc1xyXG4gICAgXHJcbiAgICBkZWNyeXB0SGV4VG9CdWZmZXI6IChjaXBoZXIpIC0+XHJcbiAgICAgICAgYXNzZXJ0IGNpcGhlciwgXCJNaXNzaW5nIGNpcGhlciB0ZXh0XCJcclxuICAgICAgICAjIENvbnZlcnQgZGF0YSBpbnRvIHdvcmQgYXJyYXlzICh1c2VkIGJ5IENyeXB0bylcclxuICAgICAgICBjaXBoZXJfYXJyYXkgPSBDcnlwdG9KUy5lbmMuSGV4LnBhcnNlIGNpcGhlclxyXG4gICAgICAgIHBsYWlud29yZHMgPSBAX2RlY3J5cHRfd29yZF9hcnJheSBjaXBoZXJfYXJyYXlcclxuICAgICAgICBwbGFpbmhleCA9IENyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5IHBsYWlud29yZHNcclxuICAgICAgICBuZXcgQnVmZmVyKHBsYWluaGV4LCAnaGV4JylcclxuICAgIFxyXG4gICAgZGVjcnlwdEhleFRvVGV4dDogKGNpcGhlcikgLT5cclxuICAgICAgICBAZGVjcnlwdEhleFRvQnVmZmVyKGNpcGhlcikudG9TdHJpbmcgJ2JpbmFyeSdcclxuICAgIFxyXG4gICAgZW5jcnlwdEhleDogKHBsYWluaGV4KSAtPlxyXG4gICAgICAgICNhc3NlcnQgcGxhaW5oZXgsIFwiTWlzc2luZyBwbGFpbiB0ZXh0XCJcclxuICAgICAgICAjY29uc29sZS5sb2coJy4uLiBwbGFpbmhleCcscGxhaW5oZXgpXHJcbiAgICAgICAgcGxhaW5fYXJyYXkgPSBDcnlwdG9KUy5lbmMuSGV4LnBhcnNlIHBsYWluaGV4XHJcbiAgICAgICAgY2lwaGVyX2FycmF5ID0gQF9lbmNyeXB0X3dvcmRfYXJyYXkgcGxhaW5fYXJyYXlcclxuICAgICAgICBDcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeSBjaXBoZXJfYXJyYXlcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQWVzXHJcblxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9kbC9zcmMvZWNjL2Flcy5jb2ZmZWVcbiAqKi8iLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4veDY0LWNvcmVcIiksIHJlcXVpcmUoXCIuL2xpYi10eXBlZGFycmF5c1wiKSwgcmVxdWlyZShcIi4vZW5jLXV0ZjE2XCIpLCByZXF1aXJlKFwiLi9lbmMtYmFzZTY0XCIpLCByZXF1aXJlKFwiLi9tZDVcIiksIHJlcXVpcmUoXCIuL3NoYTFcIiksIHJlcXVpcmUoXCIuL3NoYTI1NlwiKSwgcmVxdWlyZShcIi4vc2hhMjI0XCIpLCByZXF1aXJlKFwiLi9zaGE1MTJcIiksIHJlcXVpcmUoXCIuL3NoYTM4NFwiKSwgcmVxdWlyZShcIi4vc2hhM1wiKSwgcmVxdWlyZShcIi4vcmlwZW1kMTYwXCIpLCByZXF1aXJlKFwiLi9obWFjXCIpLCByZXF1aXJlKFwiLi9wYmtkZjJcIiksIHJlcXVpcmUoXCIuL2V2cGtkZlwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIiksIHJlcXVpcmUoXCIuL21vZGUtY2ZiXCIpLCByZXF1aXJlKFwiLi9tb2RlLWN0clwiKSwgcmVxdWlyZShcIi4vbW9kZS1jdHItZ2xhZG1hblwiKSwgcmVxdWlyZShcIi4vbW9kZS1vZmJcIiksIHJlcXVpcmUoXCIuL21vZGUtZWNiXCIpLCByZXF1aXJlKFwiLi9wYWQtYW5zaXg5MjNcIiksIHJlcXVpcmUoXCIuL3BhZC1pc28xMDEyNlwiKSwgcmVxdWlyZShcIi4vcGFkLWlzbzk3OTcxXCIpLCByZXF1aXJlKFwiLi9wYWQtemVyb3BhZGRpbmdcIiksIHJlcXVpcmUoXCIuL3BhZC1ub3BhZGRpbmdcIiksIHJlcXVpcmUoXCIuL2Zvcm1hdC1oZXhcIiksIHJlcXVpcmUoXCIuL2Flc1wiKSwgcmVxdWlyZShcIi4vdHJpcGxlZGVzXCIpLCByZXF1aXJlKFwiLi9yYzRcIiksIHJlcXVpcmUoXCIuL3JhYmJpdFwiKSwgcmVxdWlyZShcIi4vcmFiYml0LWxlZ2FjeVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi94NjQtY29yZVwiLCBcIi4vbGliLXR5cGVkYXJyYXlzXCIsIFwiLi9lbmMtdXRmMTZcIiwgXCIuL2VuYy1iYXNlNjRcIiwgXCIuL21kNVwiLCBcIi4vc2hhMVwiLCBcIi4vc2hhMjU2XCIsIFwiLi9zaGEyMjRcIiwgXCIuL3NoYTUxMlwiLCBcIi4vc2hhMzg0XCIsIFwiLi9zaGEzXCIsIFwiLi9yaXBlbWQxNjBcIiwgXCIuL2htYWNcIiwgXCIuL3Bia2RmMlwiLCBcIi4vZXZwa2RmXCIsIFwiLi9jaXBoZXItY29yZVwiLCBcIi4vbW9kZS1jZmJcIiwgXCIuL21vZGUtY3RyXCIsIFwiLi9tb2RlLWN0ci1nbGFkbWFuXCIsIFwiLi9tb2RlLW9mYlwiLCBcIi4vbW9kZS1lY2JcIiwgXCIuL3BhZC1hbnNpeDkyM1wiLCBcIi4vcGFkLWlzbzEwMTI2XCIsIFwiLi9wYWQtaXNvOTc5NzFcIiwgXCIuL3BhZC16ZXJvcGFkZGluZ1wiLCBcIi4vcGFkLW5vcGFkZGluZ1wiLCBcIi4vZm9ybWF0LWhleFwiLCBcIi4vYWVzXCIsIFwiLi90cmlwbGVkZXNcIiwgXCIuL3JjNFwiLCBcIi4vcmFiYml0XCIsIFwiLi9yYWJiaXQtbGVnYWN5XCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHRyZXR1cm4gQ3J5cHRvSlM7XG5cbn0pKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL2RsL34vY3J5cHRvLWpzL2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gNDBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRyb290LkNyeXB0b0pTID0gZmFjdG9yeSgpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcblxuXHQvKipcblx0ICogQ3J5cHRvSlMgY29yZSBjb21wb25lbnRzLlxuXHQgKi9cblx0dmFyIENyeXB0b0pTID0gQ3J5cHRvSlMgfHwgKGZ1bmN0aW9uIChNYXRoLCB1bmRlZmluZWQpIHtcblx0ICAgIC8qKlxuXHQgICAgICogQ3J5cHRvSlMgbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQyA9IHt9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIExpYnJhcnkgbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYiA9IHt9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEJhc2Ugb2JqZWN0IGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQmFzZSA9IENfbGliLkJhc2UgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGZ1bmN0aW9uIEYoKSB7fVxuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGlzIG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG92ZXJyaWRlcyBQcm9wZXJ0aWVzIHRvIGNvcHkgaW50byB0aGUgbmV3IG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgbmV3IG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgdmFyIE15VHlwZSA9IENyeXB0b0pTLmxpYi5CYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgZmllbGQ6ICd2YWx1ZScsXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICAgICAgbWV0aG9kOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgfVxuXHQgICAgICAgICAgICAgKiAgICAgfSk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBleHRlbmQ6IGZ1bmN0aW9uIChvdmVycmlkZXMpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNwYXduXG5cdCAgICAgICAgICAgICAgICBGLnByb3RvdHlwZSA9IHRoaXM7XG5cdCAgICAgICAgICAgICAgICB2YXIgc3VidHlwZSA9IG5ldyBGKCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEF1Z21lbnRcblx0ICAgICAgICAgICAgICAgIGlmIChvdmVycmlkZXMpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdWJ0eXBlLm1peEluKG92ZXJyaWRlcyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBkZWZhdWx0IGluaXRpYWxpemVyXG5cdCAgICAgICAgICAgICAgICBpZiAoIXN1YnR5cGUuaGFzT3duUHJvcGVydHkoJ2luaXQnKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHN1YnR5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3VidHlwZS4kc3VwZXIuaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemVyJ3MgcHJvdG90eXBlIGlzIHRoZSBzdWJ0eXBlIG9iamVjdFxuXHQgICAgICAgICAgICAgICAgc3VidHlwZS5pbml0LnByb3RvdHlwZSA9IHN1YnR5cGU7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlZmVyZW5jZSBzdXBlcnR5cGVcblx0ICAgICAgICAgICAgICAgIHN1YnR5cGUuJHN1cGVyID0gdGhpcztcblxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHN1YnR5cGU7XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIEV4dGVuZHMgdGhpcyBvYmplY3QgYW5kIHJ1bnMgdGhlIGluaXQgbWV0aG9kLlxuXHQgICAgICAgICAgICAgKiBBcmd1bWVudHMgdG8gY3JlYXRlKCkgd2lsbCBiZSBwYXNzZWQgdG8gaW5pdCgpLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBuZXcgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICB2YXIgaW5zdGFuY2UgPSBNeVR5cGUuY3JlYXRlKCk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuZXh0ZW5kKCk7XG5cdCAgICAgICAgICAgICAgICBpbnN0YW5jZS5pbml0LmFwcGx5KGluc3RhbmNlLCBhcmd1bWVudHMpO1xuXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBvYmplY3QuXG5cdCAgICAgICAgICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGFkZCBzb21lIGxvZ2ljIHdoZW4geW91ciBvYmplY3RzIGFyZSBjcmVhdGVkLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgdmFyIE15VHlwZSA9IENyeXB0b0pTLmxpYi5CYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgKiAgICAgICAgICAgICAvLyAuLi5cblx0ICAgICAgICAgICAgICogICAgICAgICB9XG5cdCAgICAgICAgICAgICAqICAgICB9KTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgfSxcblxuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogQ29waWVzIHByb3BlcnRpZXMgaW50byB0aGlzIG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgVGhlIHByb3BlcnRpZXMgdG8gbWl4IGluLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgTXlUeXBlLm1peEluKHtcblx0ICAgICAgICAgICAgICogICAgICAgICBmaWVsZDogJ3ZhbHVlJ1xuXHQgICAgICAgICAgICAgKiAgICAgfSk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBtaXhJbjogZnVuY3Rpb24gKHByb3BlcnRpZXMpIHtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5TmFtZSBpbiBwcm9wZXJ0aWVzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHlOYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV07XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBJRSB3b24ndCBjb3B5IHRvU3RyaW5nIHVzaW5nIHRoZSBsb29wIGFib3ZlXG5cdCAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eSgndG9TdHJpbmcnKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudG9TdHJpbmcgPSBwcm9wZXJ0aWVzLnRvU3RyaW5nO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgY2xvbmUuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICB2YXIgY2xvbmUgPSBpbnN0YW5jZS5jbG9uZSgpO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH07XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFuIGFycmF5IG9mIDMyLWJpdCB3b3Jkcy5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge0FycmF5fSB3b3JkcyBUaGUgYXJyYXkgb2YgMzItYml0IHdvcmRzLlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHNpZ0J5dGVzIFRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgYnl0ZXMgaW4gdGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICovXG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5ID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgKE9wdGlvbmFsKSBBbiBhcnJheSBvZiAzMi1iaXQgd29yZHMuXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNpZ0J5dGVzIChPcHRpb25hbCkgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGUgd29yZHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoWzB4MDAwMTAyMDMsIDB4MDQwNTA2MDddKTtcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKFsweDAwMDEwMjAzLCAweDA0MDUwNjA3XSwgNik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKHdvcmRzLCBzaWdCeXRlcykge1xuXHQgICAgICAgICAgICB3b3JkcyA9IHRoaXMud29yZHMgPSB3b3JkcyB8fCBbXTtcblxuXHQgICAgICAgICAgICBpZiAoc2lnQnl0ZXMgIT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gc2lnQnl0ZXM7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gd29yZHMubGVuZ3RoICogNDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIHdvcmQgYXJyYXkgdG8gYSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXIgKE9wdGlvbmFsKSBUaGUgZW5jb2Rpbmcgc3RyYXRlZ3kgdG8gdXNlLiBEZWZhdWx0OiBDcnlwdG9KUy5lbmMuSGV4XG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmdpZmllZCB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gd29yZEFycmF5ICsgJyc7XG5cdCAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSB3b3JkQXJyYXkudG9TdHJpbmcoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IHdvcmRBcnJheS50b1N0cmluZyhDcnlwdG9KUy5lbmMuVXRmOCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIChlbmNvZGVyKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAoZW5jb2RlciB8fCBIZXgpLnN0cmluZ2lmeSh0aGlzKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uY2F0ZW5hdGVzIGEgd29yZCBhcnJheSB0byB0aGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5IHRvIGFwcGVuZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB3b3JkQXJyYXkxLmNvbmNhdCh3b3JkQXJyYXkyKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjb25jYXQ6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB0aGlzV29yZHMgPSB0aGlzLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgdGhhdFdvcmRzID0gd29yZEFycmF5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgdGhpc1NpZ0J5dGVzID0gdGhpcy5zaWdCeXRlcztcblx0ICAgICAgICAgICAgdmFyIHRoYXRTaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDbGFtcCBleGNlc3MgYml0c1xuXHQgICAgICAgICAgICB0aGlzLmNsYW1wKCk7XG5cblx0ICAgICAgICAgICAgLy8gQ29uY2F0XG5cdCAgICAgICAgICAgIGlmICh0aGlzU2lnQnl0ZXMgJSA0KSB7XG5cdCAgICAgICAgICAgICAgICAvLyBDb3B5IG9uZSBieXRlIGF0IGEgdGltZVxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGF0U2lnQnl0ZXM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0aGF0Qnl0ZSA9ICh0aGF0V29yZHNbaSA+Pj4gMl0gPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgJiAweGZmO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXNXb3Jkc1sodGhpc1NpZ0J5dGVzICsgaSkgPj4+IDJdIHw9IHRoYXRCeXRlIDw8ICgyNCAtICgodGhpc1NpZ0J5dGVzICsgaSkgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHRoYXRXb3Jkcy5sZW5ndGggPiAweGZmZmYpIHtcblx0ICAgICAgICAgICAgICAgIC8vIENvcHkgb25lIHdvcmQgYXQgYSB0aW1lXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoYXRTaWdCeXRlczsgaSArPSA0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpc1dvcmRzWyh0aGlzU2lnQnl0ZXMgKyBpKSA+Pj4gMl0gPSB0aGF0V29yZHNbaSA+Pj4gMl07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAvLyBDb3B5IGFsbCB3b3JkcyBhdCBvbmNlXG5cdCAgICAgICAgICAgICAgICB0aGlzV29yZHMucHVzaC5hcHBseSh0aGlzV29yZHMsIHRoYXRXb3Jkcyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5zaWdCeXRlcyArPSB0aGF0U2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ2hhaW5hYmxlXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSZW1vdmVzIGluc2lnbmlmaWNhbnQgYml0cy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgd29yZEFycmF5LmNsYW1wKCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2xhbXA6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHRoaXMud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHRoaXMuc2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ2xhbXBcblx0ICAgICAgICAgICAgd29yZHNbc2lnQnl0ZXMgPj4+IDJdICY9IDB4ZmZmZmZmZmYgPDwgKDMyIC0gKHNpZ0J5dGVzICUgNCkgKiA4KTtcblx0ICAgICAgICAgICAgd29yZHMubGVuZ3RoID0gTWF0aC5jZWlsKHNpZ0J5dGVzIC8gNCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGNsb25lLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2xvbmUgPSB3b3JkQXJyYXkuY2xvbmUoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBCYXNlLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLndvcmRzID0gdGhpcy53b3Jkcy5zbGljZSgwKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSB3b3JkIGFycmF5IGZpbGxlZCB3aXRoIHJhbmRvbSBieXRlcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuQnl0ZXMgVGhlIG51bWJlciBvZiByYW5kb20gYnl0ZXMgdG8gZ2VuZXJhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSByYW5kb20gd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkucmFuZG9tKDE2KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICByYW5kb206IGZ1bmN0aW9uIChuQnl0ZXMpIHtcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbkJ5dGVzOyBpICs9IDQpIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzLnB1c2goKE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCkgfCAwKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQod29yZHMsIG5CeXRlcyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogRW5jb2RlciBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2VuYyA9IEMuZW5jID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogSGV4IGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgSGV4ID0gQ19lbmMuSGV4ID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIGhleCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgaGV4IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhleFN0cmluZyA9IENyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciBoZXhDaGFycyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBiaXRlID0gKHdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZjtcblx0ICAgICAgICAgICAgICAgIGhleENoYXJzLnB1c2goKGJpdGUgPj4+IDQpLnRvU3RyaW5nKDE2KSk7XG5cdCAgICAgICAgICAgICAgICBoZXhDaGFycy5wdXNoKChiaXRlICYgMHgwZikudG9TdHJpbmcoMTYpKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBoZXhDaGFycy5qb2luKCcnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBoZXggc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBoZXhTdHIgVGhlIGhleCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLkhleC5wYXJzZShoZXhTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAoaGV4U3RyKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBoZXhTdHJMZW5ndGggPSBoZXhTdHIubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGV4U3RyTGVuZ3RoOyBpICs9IDIpIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW2kgPj4+IDNdIHw9IHBhcnNlSW50KGhleFN0ci5zdWJzdHIoaSwgMiksIDE2KSA8PCAoMjQgLSAoaSAlIDgpICogNCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHdvcmRzLCBoZXhTdHJMZW5ndGggLyAyKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIExhdGluMSBlbmNvZGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgdmFyIExhdGluMSA9IENfZW5jLkxhdGluMSA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBMYXRpbjEgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIExhdGluMSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBsYXRpbjFTdHJpbmcgPSBDcnlwdG9KUy5lbmMuTGF0aW4xLnN0cmluZ2lmeSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gd29yZEFycmF5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgbGF0aW4xQ2hhcnMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgYml0ZSA9ICh3b3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmY7XG5cdCAgICAgICAgICAgICAgICBsYXRpbjFDaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYml0ZSkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGxhdGluMUNoYXJzLmpvaW4oJycpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIExhdGluMSBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGxhdGluMVN0ciBUaGUgTGF0aW4xIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuTGF0aW4xLnBhcnNlKGxhdGluMVN0cmluZyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIChsYXRpbjFTdHIpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGxhdGluMVN0ckxlbmd0aCA9IGxhdGluMVN0ci5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXRpbjFTdHJMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMl0gfD0gKGxhdGluMVN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZikgPDwgKDI0IC0gKGkgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdCh3b3JkcywgbGF0aW4xU3RyTGVuZ3RoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIFVURi04IGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgVXRmOCA9IENfZW5jLlV0ZjggPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgVVRGLTggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVURi04IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHV0ZjhTdHJpbmcgPSBDcnlwdG9KUy5lbmMuVXRmOC5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKExhdGluMS5zdHJpbmdpZnkod29yZEFycmF5KSkpO1xuXHQgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hbGZvcm1lZCBVVEYtOCBkYXRhJyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBVVEYtOCBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHV0ZjhTdHIgVGhlIFVURi04IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZSh1dGY4U3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHV0ZjhTdHIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIExhdGluMS5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQodXRmOFN0cikpKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGJ1ZmZlcmVkIGJsb2NrIGFsZ29yaXRobSB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBUaGUgcHJvcGVydHkgYmxvY2tTaXplIG11c3QgYmUgaW1wbGVtZW50ZWQgaW4gYSBjb25jcmV0ZSBzdWJ0eXBlLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBfbWluQnVmZmVyU2l6ZSBUaGUgbnVtYmVyIG9mIGJsb2NrcyB0aGF0IHNob3VsZCBiZSBrZXB0IHVucHJvY2Vzc2VkIGluIHRoZSBidWZmZXIuIERlZmF1bHQ6IDBcblx0ICAgICAqL1xuXHQgICAgdmFyIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0gPSBDX2xpYi5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlc2V0cyB0aGlzIGJsb2NrIGFsZ29yaXRobSdzIGRhdGEgYnVmZmVyIHRvIGl0cyBpbml0aWFsIHN0YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLnJlc2V0KCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gSW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICAgICAgdGhpcy5fZGF0YSA9IG5ldyBXb3JkQXJyYXkuaW5pdCgpO1xuXHQgICAgICAgICAgICB0aGlzLl9uRGF0YUJ5dGVzID0gMDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQWRkcyBuZXcgZGF0YSB0byB0aGlzIGJsb2NrIGFsZ29yaXRobSdzIGJ1ZmZlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBhcHBlbmQuIFN0cmluZ3MgYXJlIGNvbnZlcnRlZCB0byBhIFdvcmRBcnJheSB1c2luZyBVVEYtOC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fYXBwZW5kKCdkYXRhJyk7XG5cdCAgICAgICAgICogICAgIGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX2FwcGVuZCh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9hcHBlbmQ6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIFdvcmRBcnJheSwgZWxzZSBhc3N1bWUgV29yZEFycmF5IGFscmVhZHlcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgICAgICBkYXRhID0gVXRmOC5wYXJzZShkYXRhKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEFwcGVuZFxuXHQgICAgICAgICAgICB0aGlzLl9kYXRhLmNvbmNhdChkYXRhKTtcblx0ICAgICAgICAgICAgdGhpcy5fbkRhdGFCeXRlcyArPSBkYXRhLnNpZ0J5dGVzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBQcm9jZXNzZXMgYXZhaWxhYmxlIGRhdGEgYmxvY2tzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogVGhpcyBtZXRob2QgaW52b2tlcyBfZG9Qcm9jZXNzQmxvY2sob2Zmc2V0KSwgd2hpY2ggbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBhIGNvbmNyZXRlIHN1YnR5cGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRvRmx1c2ggV2hldGhlciBhbGwgYmxvY2tzIGFuZCBwYXJ0aWFsIGJsb2NrcyBzaG91bGQgYmUgcHJvY2Vzc2VkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcHJvY2Vzc2VkIGRhdGEuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBwcm9jZXNzZWREYXRhID0gYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fcHJvY2VzcygpO1xuXHQgICAgICAgICAqICAgICB2YXIgcHJvY2Vzc2VkRGF0YSA9IGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX3Byb2Nlc3MoISEnZmx1c2gnKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfcHJvY2VzczogZnVuY3Rpb24gKGRvRmx1c2gpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBkYXRhU2lnQnl0ZXMgPSBkYXRhLnNpZ0J5dGVzO1xuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gdGhpcy5ibG9ja1NpemU7XG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gQ291bnQgYmxvY2tzIHJlYWR5XG5cdCAgICAgICAgICAgIHZhciBuQmxvY2tzUmVhZHkgPSBkYXRhU2lnQnl0ZXMgLyBibG9ja1NpemVCeXRlcztcblx0ICAgICAgICAgICAgaWYgKGRvRmx1c2gpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFJvdW5kIHVwIHRvIGluY2x1ZGUgcGFydGlhbCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIG5CbG9ja3NSZWFkeSA9IE1hdGguY2VpbChuQmxvY2tzUmVhZHkpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgLy8gUm91bmQgZG93biB0byBpbmNsdWRlIG9ubHkgZnVsbCBibG9ja3MsXG5cdCAgICAgICAgICAgICAgICAvLyBsZXNzIHRoZSBudW1iZXIgb2YgYmxvY2tzIHRoYXQgbXVzdCByZW1haW4gaW4gdGhlIGJ1ZmZlclxuXHQgICAgICAgICAgICAgICAgbkJsb2Nrc1JlYWR5ID0gTWF0aC5tYXgoKG5CbG9ja3NSZWFkeSB8IDApIC0gdGhpcy5fbWluQnVmZmVyU2l6ZSwgMCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBDb3VudCB3b3JkcyByZWFkeVxuXHQgICAgICAgICAgICB2YXIgbldvcmRzUmVhZHkgPSBuQmxvY2tzUmVhZHkgKiBibG9ja1NpemU7XG5cblx0ICAgICAgICAgICAgLy8gQ291bnQgYnl0ZXMgcmVhZHlcblx0ICAgICAgICAgICAgdmFyIG5CeXRlc1JlYWR5ID0gTWF0aC5taW4obldvcmRzUmVhZHkgKiA0LCBkYXRhU2lnQnl0ZXMpO1xuXG5cdCAgICAgICAgICAgIC8vIFByb2Nlc3MgYmxvY2tzXG5cdCAgICAgICAgICAgIGlmIChuV29yZHNSZWFkeSkge1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgbldvcmRzUmVhZHk7IG9mZnNldCArPSBibG9ja1NpemUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBQZXJmb3JtIGNvbmNyZXRlLWFsZ29yaXRobSBsb2dpY1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RvUHJvY2Vzc0Jsb2NrKGRhdGFXb3Jkcywgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHByb2Nlc3NlZCB3b3Jkc1xuXHQgICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NlZFdvcmRzID0gZGF0YVdvcmRzLnNwbGljZSgwLCBuV29yZHNSZWFkeSk7XG5cdCAgICAgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzIC09IG5CeXRlc1JlYWR5O1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIHByb2Nlc3NlZCB3b3Jkc1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHByb2Nlc3NlZFdvcmRzLCBuQnl0ZXNSZWFkeSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgY2xvbmUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjbG9uZSA9IGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uY2xvbmUoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBCYXNlLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLl9kYXRhID0gdGhpcy5fZGF0YS5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX21pbkJ1ZmZlclNpemU6IDBcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGhhc2hlciB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYmxvY2tTaXplIFRoZSBudW1iZXIgb2YgMzItYml0IHdvcmRzIHRoaXMgaGFzaGVyIG9wZXJhdGVzIG9uLiBEZWZhdWx0OiAxNiAoNTEyIGJpdHMpXG5cdCAgICAgKi9cblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXIgPSBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogQmFzZS5leHRlbmQoKSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBoYXNoZXIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgaGFzaCBjb21wdXRhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2hlciA9IENyeXB0b0pTLmFsZ28uU0hBMjU2LmNyZWF0ZSgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIHRoaXMuY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gU2V0IGluaXRpYWwgdmFsdWVzXG5cdCAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUmVzZXRzIHRoaXMgaGFzaGVyIHRvIGl0cyBpbml0aWFsIHN0YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBoYXNoZXIucmVzZXQoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBSZXNldCBkYXRhIGJ1ZmZlclxuXHQgICAgICAgICAgICBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtLnJlc2V0LmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1oYXNoZXIgbG9naWNcblx0ICAgICAgICAgICAgdGhpcy5fZG9SZXNldCgpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBVcGRhdGVzIHRoaXMgaGFzaGVyIHdpdGggYSBtZXNzYWdlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlVXBkYXRlIFRoZSBtZXNzYWdlIHRvIGFwcGVuZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0hhc2hlcn0gVGhpcyBoYXNoZXIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGhhc2hlci51cGRhdGUoJ21lc3NhZ2UnKTtcblx0ICAgICAgICAgKiAgICAgaGFzaGVyLnVwZGF0ZSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gQXBwZW5kXG5cdCAgICAgICAgICAgIHRoaXMuX2FwcGVuZChtZXNzYWdlVXBkYXRlKTtcblxuXHQgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGhhc2hcblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIENoYWluYWJsZVxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRmluYWxpemVzIHRoZSBoYXNoIGNvbXB1dGF0aW9uLlxuXHQgICAgICAgICAqIE5vdGUgdGhhdCB0aGUgZmluYWxpemUgb3BlcmF0aW9uIGlzIGVmZmVjdGl2ZWx5IGEgZGVzdHJ1Y3RpdmUsIHJlYWQtb25jZSBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgKE9wdGlvbmFsKSBBIGZpbmFsIG1lc3NhZ2UgdXBkYXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUoJ21lc3NhZ2UnKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBmaW5hbGl6ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gRmluYWwgbWVzc2FnZSB1cGRhdGVcblx0ICAgICAgICAgICAgaWYgKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2FwcGVuZChtZXNzYWdlVXBkYXRlKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtaGFzaGVyIGxvZ2ljXG5cdCAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5fZG9GaW5hbGl6ZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBibG9ja1NpemU6IDUxMi8zMixcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBzaG9ydGN1dCBmdW5jdGlvbiB0byBhIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoZXIgdG8gY3JlYXRlIGEgaGVscGVyIGZvci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgc2hvcnRjdXQgZnVuY3Rpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBTSEEyNTYgPSBDcnlwdG9KUy5saWIuSGFzaGVyLl9jcmVhdGVIZWxwZXIoQ3J5cHRvSlMuYWxnby5TSEEyNTYpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9jcmVhdGVIZWxwZXI6IGZ1bmN0aW9uIChoYXNoZXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlLCBjZmcpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXcgaGFzaGVyLmluaXQoY2ZnKS5maW5hbGl6ZShtZXNzYWdlKTtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIHNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2hlciB0byB1c2UgaW4gdGhpcyBITUFDIGhlbHBlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgc2hvcnRjdXQgZnVuY3Rpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBIbWFjU0hBMjU2ID0gQ3J5cHRvSlMubGliLkhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihDcnlwdG9KUy5hbGdvLlNIQTI1Nik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgX2NyZWF0ZUhtYWNIZWxwZXI6IGZ1bmN0aW9uIChoYXNoZXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlLCBrZXkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ19hbGdvLkhNQUMuaW5pdChoYXNoZXIsIGtleSkuZmluYWxpemUobWVzc2FnZSk7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWxnb3JpdGhtIG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbyA9IHt9O1xuXG5cdCAgICByZXR1cm4gQztcblx0fShNYXRoKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlM7XG5cbn0pKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL2RsL34vY3J5cHRvLWpzL2NvcmUuanNcbiAqKiBtb2R1bGUgaWQgPSA0MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKHVuZGVmaW5lZCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQmFzZSA9IENfbGliLkJhc2U7XG5cdCAgICB2YXIgWDMyV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXG5cdCAgICAvKipcblx0ICAgICAqIHg2NCBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX3g2NCA9IEMueDY0ID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogQSA2NC1iaXQgd29yZC5cblx0ICAgICAqL1xuXHQgICAgdmFyIFg2NFdvcmQgPSBDX3g2NC5Xb3JkID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCA2NC1iaXQgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoIFRoZSBoaWdoIDMyIGJpdHMuXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGxvdyBUaGUgbG93IDMyIGJpdHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB4NjRXb3JkID0gQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MDAwMTAyMDMsIDB4MDQwNTA2MDcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChoaWdoLCBsb3cpIHtcblx0ICAgICAgICAgICAgdGhpcy5oaWdoID0gaGlnaDtcblx0ICAgICAgICAgICAgdGhpcy5sb3cgPSBsb3c7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQml0d2lzZSBOT1RzIHRoaXMgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBuZWdhdGluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIG5lZ2F0ZWQgPSB4NjRXb3JkLm5vdCgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIG5vdDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IH50aGlzLmhpZ2g7XG5cdCAgICAgICAgICAgIC8vIHZhciBsb3cgPSB+dGhpcy5sb3c7XG5cblx0ICAgICAgICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7XG5cdCAgICAgICAgLy8gfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEJpdHdpc2UgQU5EcyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIEFORCB3aXRoIHRoaXMgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBBTkRpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBhbmRlZCA9IHg2NFdvcmQuYW5kKGFub3RoZXJYNjRXb3JkKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyBhbmQ6IGZ1bmN0aW9uICh3b3JkKSB7XG5cdCAgICAgICAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5oaWdoICYgd29yZC5oaWdoO1xuXHQgICAgICAgICAgICAvLyB2YXIgbG93ID0gdGhpcy5sb3cgJiB3b3JkLmxvdztcblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQml0d2lzZSBPUnMgdGhpcyB3b3JkIHdpdGggdGhlIHBhc3NlZCB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtYNjRXb3JkfSB3b3JkIFRoZSB4NjQtV29yZCB0byBPUiB3aXRoIHRoaXMgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBPUmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIG9yZWQgPSB4NjRXb3JkLm9yKGFub3RoZXJYNjRXb3JkKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyBvcjogZnVuY3Rpb24gKHdvcmQpIHtcblx0ICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSB0aGlzLmhpZ2ggfCB3b3JkLmhpZ2g7XG5cdCAgICAgICAgICAgIC8vIHZhciBsb3cgPSB0aGlzLmxvdyB8IHdvcmQubG93O1xuXG5cdCAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBCaXR3aXNlIFhPUnMgdGhpcyB3b3JkIHdpdGggdGhlIHBhc3NlZCB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtYNjRXb3JkfSB3b3JkIFRoZSB4NjQtV29yZCB0byBYT1Igd2l0aCB0aGlzIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgWE9SaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgeG9yZWQgPSB4NjRXb3JkLnhvcihhbm90aGVyWDY0V29yZCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8geG9yOiBmdW5jdGlvbiAod29yZCkge1xuXHQgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IHRoaXMuaGlnaCBeIHdvcmQuaGlnaDtcblx0ICAgICAgICAgICAgLy8gdmFyIGxvdyA9IHRoaXMubG93IF4gd29yZC5sb3c7XG5cblx0ICAgICAgICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7XG5cdCAgICAgICAgLy8gfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFNoaWZ0cyB0aGlzIHdvcmQgbiBiaXRzIHRvIHRoZSBsZWZ0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHNoaWZ0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIHNoaWZ0aW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgc2hpZnRlZCA9IHg2NFdvcmQuc2hpZnRMKDI1KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyBzaGlmdEw6IGZ1bmN0aW9uIChuKSB7XG5cdCAgICAgICAgICAgIC8vIGlmIChuIDwgMzIpIHtcblx0ICAgICAgICAgICAgICAgIC8vIHZhciBoaWdoID0gKHRoaXMuaGlnaCA8PCBuKSB8ICh0aGlzLmxvdyA+Pj4gKDMyIC0gbikpO1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGxvdyA9IHRoaXMubG93IDw8IG47XG5cdCAgICAgICAgICAgIC8vIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IHRoaXMubG93IDw8IChuIC0gMzIpO1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGxvdyA9IDA7XG5cdCAgICAgICAgICAgIC8vIH1cblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogU2hpZnRzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIHJpZ2h0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHNoaWZ0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIHNoaWZ0aW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgc2hpZnRlZCA9IHg2NFdvcmQuc2hpZnRSKDcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIHNoaWZ0UjogZnVuY3Rpb24gKG4pIHtcblx0ICAgICAgICAgICAgLy8gaWYgKG4gPCAzMikge1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGxvdyA9ICh0aGlzLmxvdyA+Pj4gbikgfCAodGhpcy5oaWdoIDw8ICgzMiAtIG4pKTtcblx0ICAgICAgICAgICAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5oaWdoID4+PiBuO1xuXHQgICAgICAgICAgICAvLyB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGxvdyA9IHRoaXMuaGlnaCA+Pj4gKG4gLSAzMik7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IDA7XG5cdCAgICAgICAgICAgIC8vIH1cblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUm90YXRlcyB0aGlzIHdvcmQgbiBiaXRzIHRvIHRoZSBsZWZ0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHJvdGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciByb3RhdGluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHJvdGF0ZWQgPSB4NjRXb3JkLnJvdEwoMjUpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIHJvdEw6IGZ1bmN0aW9uIChuKSB7XG5cdCAgICAgICAgICAgIC8vIHJldHVybiB0aGlzLnNoaWZ0TChuKS5vcih0aGlzLnNoaWZ0Uig2NCAtIG4pKTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUm90YXRlcyB0aGlzIHdvcmQgbiBiaXRzIHRvIHRoZSByaWdodC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgYml0cyB0byByb3RhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgcm90YXRpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciByb3RhdGVkID0geDY0V29yZC5yb3RSKDcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIHJvdFI6IGZ1bmN0aW9uIChuKSB7XG5cdCAgICAgICAgICAgIC8vIHJldHVybiB0aGlzLnNoaWZ0UihuKS5vcih0aGlzLnNoaWZ0TCg2NCAtIG4pKTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQWRkcyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIGFkZCB3aXRoIHRoaXMgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBhZGRpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBhZGRlZCA9IHg2NFdvcmQuYWRkKGFub3RoZXJYNjRXb3JkKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyBhZGQ6IGZ1bmN0aW9uICh3b3JkKSB7XG5cdCAgICAgICAgICAgIC8vIHZhciBsb3cgPSAodGhpcy5sb3cgKyB3b3JkLmxvdykgfCAwO1xuXHQgICAgICAgICAgICAvLyB2YXIgY2FycnkgPSAobG93ID4+PiAwKSA8ICh0aGlzLmxvdyA+Pj4gMCkgPyAxIDogMDtcblx0ICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSAodGhpcy5oaWdoICsgd29yZC5oaWdoICsgY2FycnkpIHwgMDtcblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBbiBhcnJheSBvZiA2NC1iaXQgd29yZHMuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtBcnJheX0gd29yZHMgVGhlIGFycmF5IG9mIENyeXB0b0pTLng2NC5Xb3JkIG9iamVjdHMuXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gc2lnQnl0ZXMgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgKi9cblx0ICAgIHZhciBYNjRXb3JkQXJyYXkgPSBDX3g2NC5Xb3JkQXJyYXkgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSB3b3JkcyAoT3B0aW9uYWwpIEFuIGFycmF5IG9mIENyeXB0b0pTLng2NC5Xb3JkIG9iamVjdHMuXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNpZ0J5dGVzIChPcHRpb25hbCkgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGUgd29yZHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy54NjQuV29yZEFycmF5LmNyZWF0ZSgpO1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy54NjQuV29yZEFycmF5LmNyZWF0ZShbXG5cdCAgICAgICAgICogICAgICAgICBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgwMDAxMDIwMywgMHgwNDA1MDYwNyksXG5cdCAgICAgICAgICogICAgICAgICBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgxODE5MWExYiwgMHgxYzFkMWUxZilcblx0ICAgICAgICAgKiAgICAgXSk7XG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLng2NC5Xb3JkQXJyYXkuY3JlYXRlKFtcblx0ICAgICAgICAgKiAgICAgICAgIENyeXB0b0pTLng2NC5Xb3JkLmNyZWF0ZSgweDAwMDEwMjAzLCAweDA0MDUwNjA3KSxcblx0ICAgICAgICAgKiAgICAgICAgIENyeXB0b0pTLng2NC5Xb3JkLmNyZWF0ZSgweDE4MTkxYTFiLCAweDFjMWQxZTFmKVxuXHQgICAgICAgICAqICAgICBdLCAxMCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKHdvcmRzLCBzaWdCeXRlcykge1xuXHQgICAgICAgICAgICB3b3JkcyA9IHRoaXMud29yZHMgPSB3b3JkcyB8fCBbXTtcblxuXHQgICAgICAgICAgICBpZiAoc2lnQnl0ZXMgIT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gc2lnQnl0ZXM7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gd29yZHMubGVuZ3RoICogODtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIDY0LWJpdCB3b3JkIGFycmF5IHRvIGEgMzItYml0IHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDcnlwdG9KUy5saWIuV29yZEFycmF5fSBUaGlzIHdvcmQgYXJyYXkncyBkYXRhIGFzIGEgMzItYml0IHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB4MzJXb3JkQXJyYXkgPSB4NjRXb3JkQXJyYXkudG9YMzIoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB0b1gzMjogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHg2NFdvcmRzID0gdGhpcy53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHg2NFdvcmRzTGVuZ3RoID0geDY0V29yZHMubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHgzMldvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeDY0V29yZHNMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIHg2NFdvcmQgPSB4NjRXb3Jkc1tpXTtcblx0ICAgICAgICAgICAgICAgIHgzMldvcmRzLnB1c2goeDY0V29yZC5oaWdoKTtcblx0ICAgICAgICAgICAgICAgIHgzMldvcmRzLnB1c2goeDY0V29yZC5sb3cpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIFgzMldvcmRBcnJheS5jcmVhdGUoeDMyV29yZHMsIHRoaXMuc2lnQnl0ZXMpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkQXJyYXl9IFRoZSBjbG9uZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNsb25lID0geDY0V29yZEFycmF5LmNsb25lKCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gQmFzZS5jbG9uZS5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIENsb25lIFwid29yZHNcIiBhcnJheVxuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBjbG9uZS53b3JkcyA9IHRoaXMud29yZHMuc2xpY2UoMCk7XG5cblx0ICAgICAgICAgICAgLy8gQ2xvbmUgZWFjaCBYNjRXb3JkIG9iamVjdFxuXHQgICAgICAgICAgICB2YXIgd29yZHNMZW5ndGggPSB3b3Jkcy5sZW5ndGg7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd29yZHNMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaV0gPSB3b3Jkc1tpXS5jbG9uZSgpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTO1xuXG59KSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9kbC9+L2NyeXB0by1qcy94NjQtY29yZS5qc1xuICoqIG1vZHVsZSBpZCA9IDQyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBDaGVjayBpZiB0eXBlZCBhcnJheXMgYXJlIHN1cHBvcnRlZFxuXHQgICAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cblx0ICAgIC8vIFJlZmVyZW5jZSBvcmlnaW5hbCBpbml0XG5cdCAgICB2YXIgc3VwZXJJbml0ID0gV29yZEFycmF5LmluaXQ7XG5cblx0ICAgIC8vIEF1Z21lbnQgV29yZEFycmF5LmluaXQgdG8gaGFuZGxlIHR5cGVkIGFycmF5c1xuXHQgICAgdmFyIHN1YkluaXQgPSBXb3JkQXJyYXkuaW5pdCA9IGZ1bmN0aW9uICh0eXBlZEFycmF5KSB7XG5cdCAgICAgICAgLy8gQ29udmVydCBidWZmZXJzIHRvIHVpbnQ4XG5cdCAgICAgICAgaWYgKHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuXHQgICAgICAgICAgICB0eXBlZEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodHlwZWRBcnJheSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ29udmVydCBvdGhlciBhcnJheSB2aWV3cyB0byB1aW50OFxuXHQgICAgICAgIGlmIChcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIEludDhBcnJheSB8fFxuXHQgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXkgfHxcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIEludDE2QXJyYXkgfHxcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIFVpbnQxNkFycmF5IHx8XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBJbnQzMkFycmF5IHx8XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBVaW50MzJBcnJheSB8fFxuXHQgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5IHx8XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXlcblx0ICAgICAgICApIHtcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSA9IG5ldyBVaW50OEFycmF5KHR5cGVkQXJyYXkuYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkuYnl0ZUxlbmd0aCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gSGFuZGxlIFVpbnQ4QXJyYXlcblx0ICAgICAgICBpZiAodHlwZWRBcnJheSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIHR5cGVkQXJyYXlCeXRlTGVuZ3RoID0gdHlwZWRBcnJheS5ieXRlTGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIEV4dHJhY3QgYnl0ZXNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWRBcnJheUJ5dGVMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMl0gfD0gdHlwZWRBcnJheVtpXSA8PCAoMjQgLSAoaSAlIDQpICogOCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoaXMgd29yZCBhcnJheVxuXHQgICAgICAgICAgICBzdXBlckluaXQuY2FsbCh0aGlzLCB3b3JkcywgdHlwZWRBcnJheUJ5dGVMZW5ndGgpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIC8vIEVsc2UgY2FsbCBub3JtYWwgaW5pdFxuXHQgICAgICAgICAgICBzdXBlckluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICBzdWJJbml0LnByb3RvdHlwZSA9IFdvcmRBcnJheTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5saWIuV29yZEFycmF5O1xuXG59KSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9kbC9+L2NyeXB0by1qcy9saWItdHlwZWRhcnJheXMuanNcbiAqKiBtb2R1bGUgaWQgPSA0M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIENfZW5jID0gQy5lbmM7XG5cblx0ICAgIC8qKlxuXHQgICAgICogVVRGLTE2IEJFIGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgVXRmMTZCRSA9IENfZW5jLlV0ZjE2ID0gQ19lbmMuVXRmMTZCRSA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBVVEYtMTYgQkUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVURi0xNiBCRSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB1dGYxNlN0cmluZyA9IENyeXB0b0pTLmVuYy5VdGYxNi5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHV0ZjE2Q2hhcnMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSArPSAyKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gKHdvcmRzW2kgPj4+IDJdID4+PiAoMTYgLSAoaSAlIDQpICogOCkpICYgMHhmZmZmO1xuXHQgICAgICAgICAgICAgICAgdXRmMTZDaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gdXRmMTZDaGFycy5qb2luKCcnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBVVEYtMTYgQkUgc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1dGYxNlN0ciBUaGUgVVRGLTE2IEJFIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuVXRmMTYucGFyc2UodXRmMTZTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAodXRmMTZTdHIpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIHV0ZjE2U3RyTGVuZ3RoID0gdXRmMTZTdHIubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXRmMTZTdHJMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMV0gfD0gdXRmMTZTdHIuY2hhckNvZGVBdChpKSA8PCAoMTYgLSAoaSAlIDIpICogMTYpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIFdvcmRBcnJheS5jcmVhdGUod29yZHMsIHV0ZjE2U3RyTGVuZ3RoICogMik7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBVVEYtMTYgTEUgZW5jb2Rpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIENfZW5jLlV0ZjE2TEUgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgVVRGLTE2IExFIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVVEYtMTYgTEUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgdXRmMTZTdHIgPSBDcnlwdG9KUy5lbmMuVXRmMTZMRS5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHV0ZjE2Q2hhcnMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSArPSAyKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gc3dhcEVuZGlhbigod29yZHNbaSA+Pj4gMl0gPj4+ICgxNiAtIChpICUgNCkgKiA4KSkgJiAweGZmZmYpO1xuXHQgICAgICAgICAgICAgICAgdXRmMTZDaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gdXRmMTZDaGFycy5qb2luKCcnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBVVEYtMTYgTEUgc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1dGYxNlN0ciBUaGUgVVRGLTE2IExFIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuVXRmMTZMRS5wYXJzZSh1dGYxNlN0cik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uICh1dGYxNlN0cikge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgdXRmMTZTdHJMZW5ndGggPSB1dGYxNlN0ci5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1dGYxNlN0ckxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tpID4+PiAxXSB8PSBzd2FwRW5kaWFuKHV0ZjE2U3RyLmNoYXJDb2RlQXQoaSkgPDwgKDE2IC0gKGkgJSAyKSAqIDE2KSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gV29yZEFycmF5LmNyZWF0ZSh3b3JkcywgdXRmMTZTdHJMZW5ndGggKiAyKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICBmdW5jdGlvbiBzd2FwRW5kaWFuKHdvcmQpIHtcblx0ICAgICAgICByZXR1cm4gKCh3b3JkIDw8IDgpICYgMHhmZjAwZmYwMCkgfCAoKHdvcmQgPj4+IDgpICYgMHgwMGZmMDBmZik7XG5cdCAgICB9XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuZW5jLlV0ZjE2O1xuXG59KSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9kbC9+L2NyeXB0by1qcy9lbmMtdXRmMTYuanNcbiAqKiBtb2R1bGUgaWQgPSA0NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIENfZW5jID0gQy5lbmM7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQmFzZTY0IGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgQmFzZTY0ID0gQ19lbmMuQmFzZTY0ID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIEJhc2U2NCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgQmFzZTY0IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGJhc2U2NFN0cmluZyA9IENyeXB0b0pTLmVuYy5CYXNlNjQuc3RyaW5naWZ5KHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblx0ICAgICAgICAgICAgdmFyIG1hcCA9IHRoaXMuX21hcDtcblxuXHQgICAgICAgICAgICAvLyBDbGFtcCBleGNlc3MgYml0c1xuXHQgICAgICAgICAgICB3b3JkQXJyYXkuY2xhbXAoKTtcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciBiYXNlNjRDaGFycyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpICs9IDMpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBieXRlMSA9ICh3b3Jkc1tpID4+PiAyXSAgICAgICA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAgICAgICAmIDB4ZmY7XG5cdCAgICAgICAgICAgICAgICB2YXIgYnl0ZTIgPSAod29yZHNbKGkgKyAxKSA+Pj4gMl0gPj4+ICgyNCAtICgoaSArIDEpICUgNCkgKiA4KSkgJiAweGZmO1xuXHQgICAgICAgICAgICAgICAgdmFyIGJ5dGUzID0gKHdvcmRzWyhpICsgMikgPj4+IDJdID4+PiAoMjQgLSAoKGkgKyAyKSAlIDQpICogOCkpICYgMHhmZjtcblxuXHQgICAgICAgICAgICAgICAgdmFyIHRyaXBsZXQgPSAoYnl0ZTEgPDwgMTYpIHwgKGJ5dGUyIDw8IDgpIHwgYnl0ZTM7XG5cblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyAoaiA8IDQpICYmIChpICsgaiAqIDAuNzUgPCBzaWdCeXRlcyk7IGorKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGJhc2U2NENoYXJzLnB1c2gobWFwLmNoYXJBdCgodHJpcGxldCA+Pj4gKDYgKiAoMyAtIGopKSkgJiAweDNmKSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBBZGQgcGFkZGluZ1xuXHQgICAgICAgICAgICB2YXIgcGFkZGluZ0NoYXIgPSBtYXAuY2hhckF0KDY0KTtcblx0ICAgICAgICAgICAgaWYgKHBhZGRpbmdDaGFyKSB7XG5cdCAgICAgICAgICAgICAgICB3aGlsZSAoYmFzZTY0Q2hhcnMubGVuZ3RoICUgNCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGJhc2U2NENoYXJzLnB1c2gocGFkZGluZ0NoYXIpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGJhc2U2NENoYXJzLmpvaW4oJycpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIEJhc2U2NCBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2U2NFN0ciBUaGUgQmFzZTY0IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuQmFzZTY0LnBhcnNlKGJhc2U2NFN0cmluZyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIChiYXNlNjRTdHIpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBiYXNlNjRTdHJMZW5ndGggPSBiYXNlNjRTdHIubGVuZ3RoO1xuXHQgICAgICAgICAgICB2YXIgbWFwID0gdGhpcy5fbWFwO1xuXG5cdCAgICAgICAgICAgIC8vIElnbm9yZSBwYWRkaW5nXG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nQ2hhciA9IG1hcC5jaGFyQXQoNjQpO1xuXHQgICAgICAgICAgICBpZiAocGFkZGluZ0NoYXIpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBwYWRkaW5nSW5kZXggPSBiYXNlNjRTdHIuaW5kZXhPZihwYWRkaW5nQ2hhcik7XG5cdCAgICAgICAgICAgICAgICBpZiAocGFkZGluZ0luZGV4ICE9IC0xKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYmFzZTY0U3RyTGVuZ3RoID0gcGFkZGluZ0luZGV4O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgdmFyIG5CeXRlcyA9IDA7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmFzZTY0U3RyTGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChpICUgNCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBiaXRzMSA9IG1hcC5pbmRleE9mKGJhc2U2NFN0ci5jaGFyQXQoaSAtIDEpKSA8PCAoKGkgJSA0KSAqIDIpO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBiaXRzMiA9IG1hcC5pbmRleE9mKGJhc2U2NFN0ci5jaGFyQXQoaSkpID4+PiAoNiAtIChpICUgNCkgKiAyKTtcblx0ICAgICAgICAgICAgICAgICAgICB3b3Jkc1tuQnl0ZXMgPj4+IDJdIHw9IChiaXRzMSB8IGJpdHMyKSA8PCAoMjQgLSAobkJ5dGVzICUgNCkgKiA4KTtcblx0ICAgICAgICAgICAgICAgICAgICBuQnl0ZXMrKztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBXb3JkQXJyYXkuY3JlYXRlKHdvcmRzLCBuQnl0ZXMpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfbWFwOiAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nXG5cdCAgICB9O1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLmVuYy5CYXNlNjQ7XG5cbn0pKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL2RsL34vY3J5cHRvLWpzL2VuYy1iYXNlNjQuanNcbiAqKiBtb2R1bGUgaWQgPSA0NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKE1hdGgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBDb25zdGFudHMgdGFibGVcblx0ICAgIHZhciBUID0gW107XG5cblx0ICAgIC8vIENvbXB1dGUgY29uc3RhbnRzXG5cdCAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjQ7IGkrKykge1xuXHQgICAgICAgICAgICBUW2ldID0gKE1hdGguYWJzKE1hdGguc2luKGkgKyAxKSkgKiAweDEwMDAwMDAwMCkgfCAwO1xuXHQgICAgICAgIH1cblx0ICAgIH0oKSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogTUQ1IGhhc2ggYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgTUQ1ID0gQ19hbGdvLk1ENSA9IEhhc2hlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgV29yZEFycmF5LmluaXQoW1xuXHQgICAgICAgICAgICAgICAgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSxcblx0ICAgICAgICAgICAgICAgIDB4OThiYWRjZmUsIDB4MTAzMjU0NzZcblx0ICAgICAgICAgICAgXSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIG9mZnNldF9pID0gb2Zmc2V0ICsgaTtcblx0ICAgICAgICAgICAgICAgIHZhciBNX29mZnNldF9pID0gTVtvZmZzZXRfaV07XG5cblx0ICAgICAgICAgICAgICAgIE1bb2Zmc2V0X2ldID0gKFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE1fb2Zmc2V0X2kgPDwgOCkgIHwgKE1fb2Zmc2V0X2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgKCgoTV9vZmZzZXRfaSA8PCAyNCkgfCAoTV9vZmZzZXRfaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMCAgPSBNW29mZnNldCArIDBdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMSAgPSBNW29mZnNldCArIDFdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMiAgPSBNW29mZnNldCArIDJdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMyAgPSBNW29mZnNldCArIDNdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNCAgPSBNW29mZnNldCArIDRdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNSAgPSBNW29mZnNldCArIDVdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNiAgPSBNW29mZnNldCArIDZdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNyAgPSBNW29mZnNldCArIDddO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfOCAgPSBNW29mZnNldCArIDhdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfOSAgPSBNW29mZnNldCArIDldO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTAgPSBNW29mZnNldCArIDEwXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzExID0gTVtvZmZzZXQgKyAxMV07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xMiA9IE1bb2Zmc2V0ICsgMTJdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTMgPSBNW29mZnNldCArIDEzXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzE0ID0gTVtvZmZzZXQgKyAxNF07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xNSA9IE1bb2Zmc2V0ICsgMTVdO1xuXG5cdCAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFsYmVzXG5cdCAgICAgICAgICAgIHZhciBhID0gSFswXTtcblx0ICAgICAgICAgICAgdmFyIGIgPSBIWzFdO1xuXHQgICAgICAgICAgICB2YXIgYyA9IEhbMl07XG5cdCAgICAgICAgICAgIHZhciBkID0gSFszXTtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRhdGlvblxuXHQgICAgICAgICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfMCwgIDcsICBUWzBdKTtcblx0ICAgICAgICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEsICAxMiwgVFsxXSk7XG5cdCAgICAgICAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBNX29mZnNldF8yLCAgMTcsIFRbMl0pO1xuXHQgICAgICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfMywgIDIyLCBUWzNdKTtcblx0ICAgICAgICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzQsICA3LCAgVFs0XSk7XG5cdCAgICAgICAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF81LCAgMTIsIFRbNV0pO1xuXHQgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfNiwgIDE3LCBUWzZdKTtcblx0ICAgICAgICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzcsICAyMiwgVFs3XSk7XG5cdCAgICAgICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF84LCAgNywgIFRbOF0pO1xuXHQgICAgICAgICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfOSwgIDEyLCBUWzldKTtcblx0ICAgICAgICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzEwLCAxNywgVFsxMF0pO1xuXHQgICAgICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTEsIDIyLCBUWzExXSk7XG5cdCAgICAgICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF8xMiwgNywgIFRbMTJdKTtcblx0ICAgICAgICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEzLCAxMiwgVFsxM10pO1xuXHQgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTQsIDE3LCBUWzE0XSk7XG5cdCAgICAgICAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBNX29mZnNldF8xNSwgMjIsIFRbMTVdKTtcblxuXHQgICAgICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfMSwgIDUsICBUWzE2XSk7XG5cdCAgICAgICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF82LCAgOSwgIFRbMTddKTtcblx0ICAgICAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzExLCAxNCwgVFsxOF0pO1xuXHQgICAgICAgICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfMCwgIDIwLCBUWzE5XSk7XG5cdCAgICAgICAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBNX29mZnNldF81LCAgNSwgIFRbMjBdKTtcblx0ICAgICAgICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEwLCA5LCAgVFsyMV0pO1xuXHQgICAgICAgICAgICBjID0gR0coYywgZCwgYSwgYiwgTV9vZmZzZXRfMTUsIDE0LCBUWzIyXSk7XG5cdCAgICAgICAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBNX29mZnNldF80LCAgMjAsIFRbMjNdKTtcblx0ICAgICAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzksICA1LCAgVFsyNF0pO1xuXHQgICAgICAgICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfMTQsIDksICBUWzI1XSk7XG5cdCAgICAgICAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF8zLCAgMTQsIFRbMjZdKTtcblx0ICAgICAgICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzgsICAyMCwgVFsyN10pO1xuXHQgICAgICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfMTMsIDUsICBUWzI4XSk7XG5cdCAgICAgICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF8yLCAgOSwgIFRbMjldKTtcblx0ICAgICAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzcsICAxNCwgVFszMF0pO1xuXHQgICAgICAgICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfMTIsIDIwLCBUWzMxXSk7XG5cblx0ICAgICAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzUsICA0LCAgVFszMl0pO1xuXHQgICAgICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfOCwgIDExLCBUWzMzXSk7XG5cdCAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF8xMSwgMTYsIFRbMzRdKTtcblx0ICAgICAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzE0LCAyMywgVFszNV0pO1xuXHQgICAgICAgICAgICBhID0gSEgoYSwgYiwgYywgZCwgTV9vZmZzZXRfMSwgIDQsICBUWzM2XSk7XG5cdCAgICAgICAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBNX29mZnNldF80LCAgMTEsIFRbMzddKTtcblx0ICAgICAgICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzcsICAxNiwgVFszOF0pO1xuXHQgICAgICAgICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTAsIDIzLCBUWzM5XSk7XG5cdCAgICAgICAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBNX29mZnNldF8xMywgNCwgIFRbNDBdKTtcblx0ICAgICAgICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzAsICAxMSwgVFs0MV0pO1xuXHQgICAgICAgICAgICBjID0gSEgoYywgZCwgYSwgYiwgTV9vZmZzZXRfMywgIDE2LCBUWzQyXSk7XG5cdCAgICAgICAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBNX29mZnNldF82LCAgMjMsIFRbNDNdKTtcblx0ICAgICAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzksICA0LCAgVFs0NF0pO1xuXHQgICAgICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTIsIDExLCBUWzQ1XSk7XG5cdCAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF8xNSwgMTYsIFRbNDZdKTtcblx0ICAgICAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzIsICAyMywgVFs0N10pO1xuXG5cdCAgICAgICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF8wLCAgNiwgIFRbNDhdKTtcblx0ICAgICAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzcsICAxMCwgVFs0OV0pO1xuXHQgICAgICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTQsIDE1LCBUWzUwXSk7XG5cdCAgICAgICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF81LCAgMjEsIFRbNTFdKTtcblx0ICAgICAgICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEyLCA2LCAgVFs1Ml0pO1xuXHQgICAgICAgICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfMywgIDEwLCBUWzUzXSk7XG5cdCAgICAgICAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBNX29mZnNldF8xMCwgMTUsIFRbNTRdKTtcblx0ICAgICAgICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEsICAyMSwgVFs1NV0pO1xuXHQgICAgICAgICAgICBhID0gSUkoYSwgYiwgYywgZCwgTV9vZmZzZXRfOCwgIDYsICBUWzU2XSk7XG5cdCAgICAgICAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBNX29mZnNldF8xNSwgMTAsIFRbNTddKTtcblx0ICAgICAgICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzYsICAxNSwgVFs1OF0pO1xuXHQgICAgICAgICAgICBiID0gSUkoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTMsIDIxLCBUWzU5XSk7XG5cdCAgICAgICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF80LCAgNiwgIFRbNjBdKTtcblx0ICAgICAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzExLCAxMCwgVFs2MV0pO1xuXHQgICAgICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfMiwgIDE1LCBUWzYyXSk7XG5cdCAgICAgICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF85LCAgMjEsIFRbNjNdKTtcblxuXHQgICAgICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxuXHQgICAgICAgICAgICBIWzBdID0gKEhbMF0gKyBhKSB8IDA7XG5cdCAgICAgICAgICAgIEhbMV0gPSAoSFsxXSArIGIpIHwgMDtcblx0ICAgICAgICAgICAgSFsyXSA9IChIWzJdICsgYykgfCAwO1xuXHQgICAgICAgICAgICBIWzNdID0gKEhbM10gKyBkKSB8IDA7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cdCAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzO1xuXG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7XG5cdCAgICAgICAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODtcblxuXHQgICAgICAgICAgICAvLyBBZGQgcGFkZGluZ1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDgwIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKTtcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbEggPSBNYXRoLmZsb29yKG5CaXRzVG90YWwgLyAweDEwMDAwMDAwMCk7XG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsTCA9IG5CaXRzVG90YWw7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTVdID0gKFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEggPDwgOCkgIHwgKG5CaXRzVG90YWxIID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEggPDwgMjQpIHwgKG5CaXRzVG90YWxIID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSAoXG5cdCAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsTCA8PCA4KSAgfCAobkJpdHNUb3RhbEwgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsTCA8PCAyNCkgfCAobkJpdHNUb3RhbEwgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICApO1xuXG5cdCAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSAoZGF0YVdvcmRzLmxlbmd0aCArIDEpICogNDtcblxuXHQgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5faGFzaDtcblx0ICAgICAgICAgICAgdmFyIEggPSBoYXNoLndvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICAgICAgdmFyIEhfaSA9IEhbaV07XG5cblx0ICAgICAgICAgICAgICAgIEhbaV0gPSAoKChIX2kgPDwgOCkgIHwgKEhfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAgICAoKChIX2kgPDwgMjQpIHwgKEhfaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2hcblx0ICAgICAgICAgICAgcmV0dXJuIGhhc2g7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICBjbG9uZS5faGFzaCA9IHRoaXMuX2hhc2guY2xvbmUoKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIGZ1bmN0aW9uIEZGKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoKGIgJiBjKSB8ICh+YiAmIGQpKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIEdHKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoKGIgJiBkKSB8IChjICYgfmQpKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIEhIKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoYiBeIGMgXiBkKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIElJKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoYyBeIChiIHwgfmQpKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5NRDUoJ21lc3NhZ2UnKTtcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLk1ENSh3b3JkQXJyYXkpO1xuXHQgICAgICovXG5cdCAgICBDLk1ENSA9IEhhc2hlci5fY3JlYXRlSGVscGVyKE1ENSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjTUQ1KG1lc3NhZ2UsIGtleSk7XG5cdCAgICAgKi9cblx0ICAgIEMuSG1hY01ENSA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihNRDUpO1xuXHR9KE1hdGgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5NRDU7XG5cbn0pKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL2RsL34vY3J5cHRvLWpzL21kNS5qc1xuICoqIG1vZHVsZSBpZCA9IDQ2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLy8gUmV1c2FibGUgb2JqZWN0XG5cdCAgICB2YXIgVyA9IFtdO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNIQS0xIGhhc2ggYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgU0hBMSA9IENfYWxnby5TSEExID0gSGFzaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdGhpcy5faGFzaCA9IG5ldyBXb3JkQXJyYXkuaW5pdChbXG5cdCAgICAgICAgICAgICAgICAweDY3NDUyMzAxLCAweGVmY2RhYjg5LFxuXHQgICAgICAgICAgICAgICAgMHg5OGJhZGNmZSwgMHgxMDMyNTQ3Nixcblx0ICAgICAgICAgICAgICAgIDB4YzNkMmUxZjBcblx0ICAgICAgICAgICAgXSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgSCA9IHRoaXMuX2hhc2gud29yZHM7XG5cblx0ICAgICAgICAgICAgLy8gV29ya2luZyB2YXJpYWJsZXNcblx0ICAgICAgICAgICAgdmFyIGEgPSBIWzBdO1xuXHQgICAgICAgICAgICB2YXIgYiA9IEhbMV07XG5cdCAgICAgICAgICAgIHZhciBjID0gSFsyXTtcblx0ICAgICAgICAgICAgdmFyIGQgPSBIWzNdO1xuXHQgICAgICAgICAgICB2YXIgZSA9IEhbNF07XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0YXRpb25cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoaSA8IDE2KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgV1tpXSA9IE1bb2Zmc2V0ICsgaV0gfCAwO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl07XG5cdCAgICAgICAgICAgICAgICAgICAgV1tpXSA9IChuIDw8IDEpIHwgKG4gPj4+IDMxKTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgdmFyIHQgPSAoKGEgPDwgNSkgfCAoYSA+Pj4gMjcpKSArIGUgKyBXW2ldO1xuXHQgICAgICAgICAgICAgICAgaWYgKGkgPCAyMCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHQgKz0gKChiICYgYykgfCAofmIgJiBkKSkgKyAweDVhODI3OTk5O1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpIDwgNDApIHtcblx0ICAgICAgICAgICAgICAgICAgICB0ICs9IChiIF4gYyBeIGQpICsgMHg2ZWQ5ZWJhMTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA8IDYwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdCArPSAoKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpKSAtIDB4NzBlNDQzMjQ7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgLyogaWYgKGkgPCA4MCkgKi8ge1xuXHQgICAgICAgICAgICAgICAgICAgIHQgKz0gKGIgXiBjIF4gZCkgLSAweDM1OWQzZTJhO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICBlID0gZDtcblx0ICAgICAgICAgICAgICAgIGQgPSBjO1xuXHQgICAgICAgICAgICAgICAgYyA9IChiIDw8IDMwKSB8IChiID4+PiAyKTtcblx0ICAgICAgICAgICAgICAgIGIgPSBhO1xuXHQgICAgICAgICAgICAgICAgYSA9IHQ7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxuXHQgICAgICAgICAgICBIWzBdID0gKEhbMF0gKyBhKSB8IDA7XG5cdCAgICAgICAgICAgIEhbMV0gPSAoSFsxXSArIGIpIHwgMDtcblx0ICAgICAgICAgICAgSFsyXSA9IChIWzJdICsgYykgfCAwO1xuXHQgICAgICAgICAgICBIWzNdID0gKEhbM10gKyBkKSB8IDA7XG5cdCAgICAgICAgICAgIEhbNF0gPSAoSFs0XSArIGUpIHwgMDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4O1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IE1hdGguZmxvb3IobkJpdHNUb3RhbCAvIDB4MTAwMDAwMDAwKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNV0gPSBuQml0c1RvdGFsO1xuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gZGF0YVdvcmRzLmxlbmd0aCAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMSgnbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMSh3b3JkQXJyYXkpO1xuXHQgICAgICovXG5cdCAgICBDLlNIQTEgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihTSEExKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNTSEExKG1lc3NhZ2UsIGtleSk7XG5cdCAgICAgKi9cblx0ICAgIEMuSG1hY1NIQTEgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMSk7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuU0hBMTtcblxufSkpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvZGwvfi9jcnlwdG8tanMvc2hhMS5qc1xuICoqIG1vZHVsZSBpZCA9IDQ3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoTWF0aCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIEluaXRpYWxpemF0aW9uIGFuZCByb3VuZCBjb25zdGFudHMgdGFibGVzXG5cdCAgICB2YXIgSCA9IFtdO1xuXHQgICAgdmFyIEsgPSBbXTtcblxuXHQgICAgLy8gQ29tcHV0ZSBjb25zdGFudHNcblx0ICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgZnVuY3Rpb24gaXNQcmltZShuKSB7XG5cdCAgICAgICAgICAgIHZhciBzcXJ0TiA9IE1hdGguc3FydChuKTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgZmFjdG9yID0gMjsgZmFjdG9yIDw9IHNxcnROOyBmYWN0b3IrKykge1xuXHQgICAgICAgICAgICAgICAgaWYgKCEobiAlIGZhY3RvcikpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBmdW5jdGlvbiBnZXRGcmFjdGlvbmFsQml0cyhuKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAoKG4gLSAobiB8IDApKSAqIDB4MTAwMDAwMDAwKSB8IDA7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdmFyIG4gPSAyO1xuXHQgICAgICAgIHZhciBuUHJpbWUgPSAwO1xuXHQgICAgICAgIHdoaWxlIChuUHJpbWUgPCA2NCkge1xuXHQgICAgICAgICAgICBpZiAoaXNQcmltZShuKSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKG5QcmltZSA8IDgpIHtcblx0ICAgICAgICAgICAgICAgICAgICBIW25QcmltZV0gPSBnZXRGcmFjdGlvbmFsQml0cyhNYXRoLnBvdyhuLCAxIC8gMikpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgS1tuUHJpbWVdID0gZ2V0RnJhY3Rpb25hbEJpdHMoTWF0aC5wb3cobiwgMSAvIDMpKTtcblxuXHQgICAgICAgICAgICAgICAgblByaW1lKys7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBuKys7XG5cdCAgICAgICAgfVxuXHQgICAgfSgpKTtcblxuXHQgICAgLy8gUmV1c2FibGUgb2JqZWN0XG5cdCAgICB2YXIgVyA9IFtdO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNIQS0yNTYgaGFzaCBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBTSEEyNTYgPSBDX2FsZ28uU0hBMjU2ID0gSGFzaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdGhpcy5faGFzaCA9IG5ldyBXb3JkQXJyYXkuaW5pdChILnNsaWNlKDApKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlc1xuXHQgICAgICAgICAgICB2YXIgYSA9IEhbMF07XG5cdCAgICAgICAgICAgIHZhciBiID0gSFsxXTtcblx0ICAgICAgICAgICAgdmFyIGMgPSBIWzJdO1xuXHQgICAgICAgICAgICB2YXIgZCA9IEhbM107XG5cdCAgICAgICAgICAgIHZhciBlID0gSFs0XTtcblx0ICAgICAgICAgICAgdmFyIGYgPSBIWzVdO1xuXHQgICAgICAgICAgICB2YXIgZyA9IEhbNl07XG5cdCAgICAgICAgICAgIHZhciBoID0gSFs3XTtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRhdGlvblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChpIDwgMTYpIHtcblx0ICAgICAgICAgICAgICAgICAgICBXW2ldID0gTVtvZmZzZXQgKyBpXSB8IDA7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTB4ID0gV1tpIC0gMTVdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTAgID0gKChnYW1tYTB4IDw8IDI1KSB8IChnYW1tYTB4ID4+PiA3KSkgIF5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoZ2FtbWEweCA8PCAxNCkgfCAoZ2FtbWEweCA+Pj4gMTgpKSBeXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGdhbW1hMHggPj4+IDMpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMXggPSBXW2kgLSAyXTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWExICA9ICgoZ2FtbWExeCA8PCAxNSkgfCAoZ2FtbWExeCA+Pj4gMTcpKSBeXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGdhbW1hMXggPDwgMTMpIHwgKGdhbW1hMXggPj4+IDE5KSkgXlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChnYW1tYTF4ID4+PiAxMCk7XG5cblx0ICAgICAgICAgICAgICAgICAgICBXW2ldID0gZ2FtbWEwICsgV1tpIC0gN10gKyBnYW1tYTEgKyBXW2kgLSAxNl07XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIHZhciBjaCAgPSAoZSAmIGYpIF4gKH5lICYgZyk7XG5cdCAgICAgICAgICAgICAgICB2YXIgbWFqID0gKGEgJiBiKSBeIChhICYgYykgXiAoYiAmIGMpO1xuXG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWEwID0gKChhIDw8IDMwKSB8IChhID4+PiAyKSkgXiAoKGEgPDwgMTkpIHwgKGEgPj4+IDEzKSkgXiAoKGEgPDwgMTApIHwgKGEgPj4+IDIyKSk7XG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWExID0gKChlIDw8IDI2KSB8IChlID4+PiA2KSkgXiAoKGUgPDwgMjEpIHwgKGUgPj4+IDExKSkgXiAoKGUgPDwgNykgIHwgKGUgPj4+IDI1KSk7XG5cblx0ICAgICAgICAgICAgICAgIHZhciB0MSA9IGggKyBzaWdtYTEgKyBjaCArIEtbaV0gKyBXW2ldO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQyID0gc2lnbWEwICsgbWFqO1xuXG5cdCAgICAgICAgICAgICAgICBoID0gZztcblx0ICAgICAgICAgICAgICAgIGcgPSBmO1xuXHQgICAgICAgICAgICAgICAgZiA9IGU7XG5cdCAgICAgICAgICAgICAgICBlID0gKGQgKyB0MSkgfCAwO1xuXHQgICAgICAgICAgICAgICAgZCA9IGM7XG5cdCAgICAgICAgICAgICAgICBjID0gYjtcblx0ICAgICAgICAgICAgICAgIGIgPSBhO1xuXHQgICAgICAgICAgICAgICAgYSA9ICh0MSArIHQyKSB8IDA7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxuXHQgICAgICAgICAgICBIWzBdID0gKEhbMF0gKyBhKSB8IDA7XG5cdCAgICAgICAgICAgIEhbMV0gPSAoSFsxXSArIGIpIHwgMDtcblx0ICAgICAgICAgICAgSFsyXSA9IChIWzJdICsgYykgfCAwO1xuXHQgICAgICAgICAgICBIWzNdID0gKEhbM10gKyBkKSB8IDA7XG5cdCAgICAgICAgICAgIEhbNF0gPSAoSFs0XSArIGUpIHwgMDtcblx0ICAgICAgICAgICAgSFs1XSA9IChIWzVdICsgZikgfCAwO1xuXHQgICAgICAgICAgICBIWzZdID0gKEhbNl0gKyBnKSB8IDA7XG5cdCAgICAgICAgICAgIEhbN10gPSAoSFs3XSArIGgpIHwgMDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4O1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IE1hdGguZmxvb3IobkJpdHNUb3RhbCAvIDB4MTAwMDAwMDAwKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNV0gPSBuQml0c1RvdGFsO1xuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gZGF0YVdvcmRzLmxlbmd0aCAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMjU2KCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEyNTYod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5TSEEyNTYgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihTSEEyNTYpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTI1NihtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNTSEEyNTYgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMjU2KTtcblx0fShNYXRoKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuU0hBMjU2O1xuXG59KSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9kbC9+L2NyeXB0by1qcy9zaGEyNTYuanNcbiAqKiBtb2R1bGUgaWQgPSA0OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL3NoYTI1NlwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9zaGEyNTZcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXHQgICAgdmFyIFNIQTI1NiA9IENfYWxnby5TSEEyNTY7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU0hBLTIyNCBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFNIQTIyNCA9IENfYWxnby5TSEEyMjQgPSBTSEEyNTYuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KFtcblx0ICAgICAgICAgICAgICAgIDB4YzEwNTllZDgsIDB4MzY3Y2Q1MDcsIDB4MzA3MGRkMTcsIDB4ZjcwZTU5MzksXG5cdCAgICAgICAgICAgICAgICAweGZmYzAwYjMxLCAweDY4NTgxNTExLCAweDY0Zjk4ZmE3LCAweGJlZmE0ZmE0XG5cdCAgICAgICAgICAgIF0pO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IFNIQTI1Ni5fZG9GaW5hbGl6ZS5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIGhhc2guc2lnQnl0ZXMgLT0gNDtcblxuXHQgICAgICAgICAgICByZXR1cm4gaGFzaDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTIyNCgnbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMjI0KHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuU0hBMjI0ID0gU0hBMjU2Ll9jcmVhdGVIZWxwZXIoU0hBMjI0KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNTSEEyMjQobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjU0hBMjI0ID0gU0hBMjU2Ll9jcmVhdGVIbWFjSGVscGVyKFNIQTIyNCk7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuU0hBMjI0O1xuXG59KSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9kbC9+L2NyeXB0by1qcy9zaGEyMjQuanNcbiAqKiBtb2R1bGUgaWQgPSA0OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL3g2NC1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL3g2NC1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyO1xuXHQgICAgdmFyIENfeDY0ID0gQy54NjQ7XG5cdCAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmQ7XG5cdCAgICB2YXIgWDY0V29yZEFycmF5ID0gQ194NjQuV29yZEFycmF5O1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgZnVuY3Rpb24gWDY0V29yZF9jcmVhdGUoKSB7XG5cdCAgICAgICAgcmV0dXJuIFg2NFdvcmQuY3JlYXRlLmFwcGx5KFg2NFdvcmQsIGFyZ3VtZW50cyk7XG5cdCAgICB9XG5cblx0ICAgIC8vIENvbnN0YW50c1xuXHQgICAgdmFyIEsgPSBbXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg0MjhhMmY5OCwgMHhkNzI4YWUyMiksIFg2NFdvcmRfY3JlYXRlKDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYpLCBYNjRXb3JkX2NyZWF0ZSgweGU5YjVkYmE1LCAweDgxODlkYmJjKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDM5NTZjMjViLCAweGYzNDhiNTM4KSwgWDY0V29yZF9jcmVhdGUoMHg1OWYxMTFmMSwgMHhiNjA1ZDAxOSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg5MjNmODJhNCwgMHhhZjE5NGY5YiksIFg2NFdvcmRfY3JlYXRlKDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIpLCBYNjRXb3JkX2NyZWF0ZSgweDEyODM1YjAxLCAweDQ1NzA2ZmJlKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDI0MzE4NWJlLCAweDRlZTRiMjhjKSwgWDY0V29yZF9jcmVhdGUoMHg1NTBjN2RjMywgMHhkNWZmYjRlMiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg3MmJlNWQ3NCwgMHhmMjdiODk2ZiksIFg2NFdvcmRfY3JlYXRlKDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUpLCBYNjRXb3JkX2NyZWF0ZSgweGMxOWJmMTc0LCAweGNmNjkyNjk0KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGU0OWI2OWMxLCAweDllZjE0YWQyKSwgWDY0V29yZF9jcmVhdGUoMHhlZmJlNDc4NiwgMHgzODRmMjVlMyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgwZmMxOWRjNiwgMHg4YjhjZDViNSksIFg2NFdvcmRfY3JlYXRlKDB4MjQwY2ExY2MsIDB4NzdhYzljNjUpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUpLCBYNjRXb3JkX2NyZWF0ZSgweDRhNzQ4NGFhLCAweDZlYTZlNDgzKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDVjYjBhOWRjLCAweGJkNDFmYmQ0KSwgWDY0V29yZF9jcmVhdGUoMHg3NmY5ODhkYSwgMHg4MzExNTNiNSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg5ODNlNTE1MiwgMHhlZTY2ZGZhYiksIFg2NFdvcmRfY3JlYXRlKDB4YTgzMWM2NmQsIDB4MmRiNDMyMTApLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YjAwMzI3YzgsIDB4OThmYjIxM2YpLCBYNjRXb3JkX2NyZWF0ZSgweGJmNTk3ZmM3LCAweGJlZWYwZWU0KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGM2ZTAwYmYzLCAweDNkYTg4ZmMyKSwgWDY0V29yZF9jcmVhdGUoMHhkNWE3OTE0NywgMHg5MzBhYTcyNSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgwNmNhNjM1MSwgMHhlMDAzODI2ZiksIFg2NFdvcmRfY3JlYXRlKDB4MTQyOTI5NjcsIDB4MGEwZTZlNzApLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MjdiNzBhODUsIDB4NDZkMjJmZmMpLCBYNjRXb3JkX2NyZWF0ZSgweDJlMWIyMTM4LCAweDVjMjZjOTI2KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDRkMmM2ZGZjLCAweDVhYzQyYWVkKSwgWDY0V29yZF9jcmVhdGUoMHg1MzM4MGQxMywgMHg5ZDk1YjNkZiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg2NTBhNzM1NCwgMHg4YmFmNjNkZSksIFg2NFdvcmRfY3JlYXRlKDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYpLCBYNjRXb3JkX2NyZWF0ZSgweDkyNzIyYzg1LCAweDE0ODIzNTNiKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGEyYmZlOGExLCAweDRjZjEwMzY0KSwgWDY0V29yZF9jcmVhdGUoMHhhODFhNjY0YiwgMHhiYzQyMzAwMSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhjMjRiOGI3MCwgMHhkMGY4OTc5MSksIFg2NFdvcmRfY3JlYXRlKDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzApLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgpLCBYNjRXb3JkX2NyZWF0ZSgweGQ2OTkwNjI0LCAweDU1NjVhOTEwKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGY0MGUzNTg1LCAweDU3NzEyMDJhKSwgWDY0V29yZF9jcmVhdGUoMHgxMDZhYTA3MCwgMHgzMmJiZDFiOCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgxOWE0YzExNiwgMHhiOGQyZDBjOCksIFg2NFdvcmRfY3JlYXRlKDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTkpLCBYNjRXb3JkX2NyZWF0ZSgweDM0YjBiY2I1LCAweGUxOWI0OGE4KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDM5MWMwY2IzLCAweGM1Yzk1YTYzKSwgWDY0V29yZF9jcmVhdGUoMHg0ZWQ4YWE0YSwgMHhlMzQxOGFjYiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg1YjljY2E0ZiwgMHg3NzYzZTM3MyksIFg2NFdvcmRfY3JlYXRlKDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMpLCBYNjRXb3JkX2NyZWF0ZSgweDc4YTU2MzZmLCAweDQzMTcyZjYwKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDg0Yzg3ODE0LCAweGExZjBhYjcyKSwgWDY0V29yZF9jcmVhdGUoMHg4Y2M3MDIwOCwgMHgxYTY0MzllYyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg5MGJlZmZmYSwgMHgyMzYzMWUyOCksIFg2NFdvcmRfY3JlYXRlKDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTkpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUpLCBYNjRXb3JkX2NyZWF0ZSgweGM2NzE3OGYyLCAweGUzNzI1MzJiKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGNhMjczZWNlLCAweGVhMjY2MTljKSwgWDY0V29yZF9jcmVhdGUoMHhkMTg2YjhjNywgMHgyMWMwYzIwNyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhlYWRhN2RkNiwgMHhjZGUwZWIxZSksIFg2NFdvcmRfY3JlYXRlKDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEpLCBYNjRXb3JkX2NyZWF0ZSgweDBhNjM3ZGM1LCAweGEyYzg5OGE2KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDExM2Y5ODA0LCAweGJlZjkwZGFlKSwgWDY0V29yZF9jcmVhdGUoMHgxYjcxMGIzNSwgMHgxMzFjNDcxYiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgyOGRiNzdmNSwgMHgyMzA0N2Q4NCksIFg2NFdvcmRfY3JlYXRlKDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMpLCBYNjRXb3JkX2NyZWF0ZSgweDQzMWQ2N2M0LCAweDljMTAwZDRjKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDRjYzVkNGJlLCAweGNiM2U0MmI2KSwgWDY0V29yZF9jcmVhdGUoMHg1OTdmMjk5YywgMHhmYzY1N2UyYSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg1ZmNiNmZhYiwgMHgzYWQ2ZmFlYyksIFg2NFdvcmRfY3JlYXRlKDB4NmM0NDE5OGMsIDB4NGE0NzU4MTcpXG5cdCAgICBdO1xuXG5cdCAgICAvLyBSZXVzYWJsZSBvYmplY3RzXG5cdCAgICB2YXIgVyA9IFtdO1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHtcblx0ICAgICAgICAgICAgV1tpXSA9IFg2NFdvcmRfY3JlYXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSgpKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTSEEtNTEyIGhhc2ggYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgU0hBNTEyID0gQ19hbGdvLlNIQTUxMiA9IEhhc2hlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgWDY0V29yZEFycmF5LmluaXQoW1xuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDZhMDllNjY3LCAweGYzYmNjOTA4KSwgbmV3IFg2NFdvcmQuaW5pdCgweGJiNjdhZTg1LCAweDg0Y2FhNzNiKSxcblx0ICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHgzYzZlZjM3MiwgMHhmZTk0ZjgyYiksIG5ldyBYNjRXb3JkLmluaXQoMHhhNTRmZjUzYSwgMHg1ZjFkMzZmMSksXG5cdCAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4NTEwZTUyN2YsIDB4YWRlNjgyZDEpLCBuZXcgWDY0V29yZC5pbml0KDB4OWIwNTY4OGMsIDB4MmIzZTZjMWYpLFxuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDFmODNkOWFiLCAweGZiNDFiZDZiKSwgbmV3IFg2NFdvcmQuaW5pdCgweDViZTBjZDE5LCAweDEzN2UyMTc5KVxuXHQgICAgICAgICAgICBdKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgSCA9IHRoaXMuX2hhc2gud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIEgwID0gSFswXTtcblx0ICAgICAgICAgICAgdmFyIEgxID0gSFsxXTtcblx0ICAgICAgICAgICAgdmFyIEgyID0gSFsyXTtcblx0ICAgICAgICAgICAgdmFyIEgzID0gSFszXTtcblx0ICAgICAgICAgICAgdmFyIEg0ID0gSFs0XTtcblx0ICAgICAgICAgICAgdmFyIEg1ID0gSFs1XTtcblx0ICAgICAgICAgICAgdmFyIEg2ID0gSFs2XTtcblx0ICAgICAgICAgICAgdmFyIEg3ID0gSFs3XTtcblxuXHQgICAgICAgICAgICB2YXIgSDBoID0gSDAuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEgwbCA9IEgwLmxvdztcblx0ICAgICAgICAgICAgdmFyIEgxaCA9IEgxLmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBIMWwgPSBIMS5sb3c7XG5cdCAgICAgICAgICAgIHZhciBIMmggPSBIMi5oaWdoO1xuXHQgICAgICAgICAgICB2YXIgSDJsID0gSDIubG93O1xuXHQgICAgICAgICAgICB2YXIgSDNoID0gSDMuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEgzbCA9IEgzLmxvdztcblx0ICAgICAgICAgICAgdmFyIEg0aCA9IEg0LmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBINGwgPSBINC5sb3c7XG5cdCAgICAgICAgICAgIHZhciBINWggPSBINS5oaWdoO1xuXHQgICAgICAgICAgICB2YXIgSDVsID0gSDUubG93O1xuXHQgICAgICAgICAgICB2YXIgSDZoID0gSDYuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEg2bCA9IEg2Lmxvdztcblx0ICAgICAgICAgICAgdmFyIEg3aCA9IEg3LmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBIN2wgPSBINy5sb3c7XG5cblx0ICAgICAgICAgICAgLy8gV29ya2luZyB2YXJpYWJsZXNcblx0ICAgICAgICAgICAgdmFyIGFoID0gSDBoO1xuXHQgICAgICAgICAgICB2YXIgYWwgPSBIMGw7XG5cdCAgICAgICAgICAgIHZhciBiaCA9IEgxaDtcblx0ICAgICAgICAgICAgdmFyIGJsID0gSDFsO1xuXHQgICAgICAgICAgICB2YXIgY2ggPSBIMmg7XG5cdCAgICAgICAgICAgIHZhciBjbCA9IEgybDtcblx0ICAgICAgICAgICAgdmFyIGRoID0gSDNoO1xuXHQgICAgICAgICAgICB2YXIgZGwgPSBIM2w7XG5cdCAgICAgICAgICAgIHZhciBlaCA9IEg0aDtcblx0ICAgICAgICAgICAgdmFyIGVsID0gSDRsO1xuXHQgICAgICAgICAgICB2YXIgZmggPSBINWg7XG5cdCAgICAgICAgICAgIHZhciBmbCA9IEg1bDtcblx0ICAgICAgICAgICAgdmFyIGdoID0gSDZoO1xuXHQgICAgICAgICAgICB2YXIgZ2wgPSBINmw7XG5cdCAgICAgICAgICAgIHZhciBoaCA9IEg3aDtcblx0ICAgICAgICAgICAgdmFyIGhsID0gSDdsO1xuXG5cdCAgICAgICAgICAgIC8vIFJvdW5kc1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgICAgICB2YXIgV2kgPSBXW2ldO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBFeHRlbmQgbWVzc2FnZVxuXHQgICAgICAgICAgICAgICAgaWYgKGkgPCAxNikge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaWggPSBXaS5oaWdoID0gTVtvZmZzZXQgKyBpICogMl0gICAgIHwgMDtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2lsID0gV2kubG93ICA9IE1bb2Zmc2V0ICsgaSAqIDIgKyAxXSB8IDA7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIEdhbW1hMFxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTB4ICA9IFdbaSAtIDE1XTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEweGggPSBnYW1tYTB4LmhpZ2g7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMHhsID0gZ2FtbWEweC5sb3c7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMGggID0gKChnYW1tYTB4aCA+Pj4gMSkgfCAoZ2FtbWEweGwgPDwgMzEpKSBeICgoZ2FtbWEweGggPj4+IDgpIHwgKGdhbW1hMHhsIDw8IDI0KSkgXiAoZ2FtbWEweGggPj4+IDcpO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTBsICA9ICgoZ2FtbWEweGwgPj4+IDEpIHwgKGdhbW1hMHhoIDw8IDMxKSkgXiAoKGdhbW1hMHhsID4+PiA4KSB8IChnYW1tYTB4aCA8PCAyNCkpIF4gKChnYW1tYTB4bCA+Pj4gNykgfCAoZ2FtbWEweGggPDwgMjUpKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIC8vIEdhbW1hMVxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTF4ICA9IFdbaSAtIDJdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTF4aCA9IGdhbW1hMXguaGlnaDtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWExeGwgPSBnYW1tYTF4Lmxvdztcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWExaCAgPSAoKGdhbW1hMXhoID4+PiAxOSkgfCAoZ2FtbWExeGwgPDwgMTMpKSBeICgoZ2FtbWExeGggPDwgMykgfCAoZ2FtbWExeGwgPj4+IDI5KSkgXiAoZ2FtbWExeGggPj4+IDYpO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTFsICA9ICgoZ2FtbWExeGwgPj4+IDE5KSB8IChnYW1tYTF4aCA8PCAxMykpIF4gKChnYW1tYTF4bCA8PCAzKSB8IChnYW1tYTF4aCA+Pj4gMjkpKSBeICgoZ2FtbWExeGwgPj4+IDYpIHwgKGdhbW1hMXhoIDw8IDI2KSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBXW2ldID0gZ2FtbWEwICsgV1tpIC0gN10gKyBnYW1tYTEgKyBXW2kgLSAxNl1cblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2k3ICA9IFdbaSAtIDddO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaTdoID0gV2k3LmhpZ2g7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpN2wgPSBXaTcubG93O1xuXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpMTYgID0gV1tpIC0gMTZdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaTE2aCA9IFdpMTYuaGlnaDtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2kxNmwgPSBXaTE2LmxvdztcblxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaWwgPSBnYW1tYTBsICsgV2k3bDtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2loID0gZ2FtbWEwaCArIFdpN2ggKyAoKFdpbCA+Pj4gMCkgPCAoZ2FtbWEwbCA+Pj4gMCkgPyAxIDogMCk7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpbCA9IFdpbCArIGdhbW1hMWw7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpaCA9IFdpaCArIGdhbW1hMWggKyAoKFdpbCA+Pj4gMCkgPCAoZ2FtbWExbCA+Pj4gMCkgPyAxIDogMCk7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpbCA9IFdpbCArIFdpMTZsO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaWggPSBXaWggKyBXaTE2aCArICgoV2lsID4+PiAwKSA8IChXaTE2bCA+Pj4gMCkgPyAxIDogMCk7XG5cblx0ICAgICAgICAgICAgICAgICAgICBXaS5oaWdoID0gV2loO1xuXHQgICAgICAgICAgICAgICAgICAgIFdpLmxvdyAgPSBXaWw7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIHZhciBjaGggID0gKGVoICYgZmgpIF4gKH5laCAmIGdoKTtcblx0ICAgICAgICAgICAgICAgIHZhciBjaGwgID0gKGVsICYgZmwpIF4gKH5lbCAmIGdsKTtcblx0ICAgICAgICAgICAgICAgIHZhciBtYWpoID0gKGFoICYgYmgpIF4gKGFoICYgY2gpIF4gKGJoICYgY2gpO1xuXHQgICAgICAgICAgICAgICAgdmFyIG1hamwgPSAoYWwgJiBibCkgXiAoYWwgJiBjbCkgXiAoYmwgJiBjbCk7XG5cblx0ICAgICAgICAgICAgICAgIHZhciBzaWdtYTBoID0gKChhaCA+Pj4gMjgpIHwgKGFsIDw8IDQpKSAgXiAoKGFoIDw8IDMwKSAgfCAoYWwgPj4+IDIpKSBeICgoYWggPDwgMjUpIHwgKGFsID4+PiA3KSk7XG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWEwbCA9ICgoYWwgPj4+IDI4KSB8IChhaCA8PCA0KSkgIF4gKChhbCA8PCAzMCkgIHwgKGFoID4+PiAyKSkgXiAoKGFsIDw8IDI1KSB8IChhaCA+Pj4gNykpO1xuXHQgICAgICAgICAgICAgICAgdmFyIHNpZ21hMWggPSAoKGVoID4+PiAxNCkgfCAoZWwgPDwgMTgpKSBeICgoZWggPj4+IDE4KSB8IChlbCA8PCAxNCkpIF4gKChlaCA8PCAyMykgfCAoZWwgPj4+IDkpKTtcblx0ICAgICAgICAgICAgICAgIHZhciBzaWdtYTFsID0gKChlbCA+Pj4gMTQpIHwgKGVoIDw8IDE4KSkgXiAoKGVsID4+PiAxOCkgfCAoZWggPDwgMTQpKSBeICgoZWwgPDwgMjMpIHwgKGVoID4+PiA5KSk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIHQxID0gaCArIHNpZ21hMSArIGNoICsgS1tpXSArIFdbaV1cblx0ICAgICAgICAgICAgICAgIHZhciBLaSAgPSBLW2ldO1xuXHQgICAgICAgICAgICAgICAgdmFyIEtpaCA9IEtpLmhpZ2g7XG5cdCAgICAgICAgICAgICAgICB2YXIgS2lsID0gS2kubG93O1xuXG5cdCAgICAgICAgICAgICAgICB2YXIgdDFsID0gaGwgKyBzaWdtYTFsO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxaCA9IGhoICsgc2lnbWExaCArICgodDFsID4+PiAwKSA8IChobCA+Pj4gMCkgPyAxIDogMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDFsID0gdDFsICsgY2hsO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxaCA9IHQxaCArIGNoaCArICgodDFsID4+PiAwKSA8IChjaGwgPj4+IDApID8gMSA6IDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxbCA9IHQxbCArIEtpbDtcblx0ICAgICAgICAgICAgICAgIHZhciB0MWggPSB0MWggKyBLaWggKyAoKHQxbCA+Pj4gMCkgPCAoS2lsID4+PiAwKSA/IDEgOiAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciB0MWwgPSB0MWwgKyBXaWw7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDFoID0gdDFoICsgV2loICsgKCh0MWwgPj4+IDApIDwgKFdpbCA+Pj4gMCkgPyAxIDogMCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIHQyID0gc2lnbWEwICsgbWFqXG5cdCAgICAgICAgICAgICAgICB2YXIgdDJsID0gc2lnbWEwbCArIG1hamw7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDJoID0gc2lnbWEwaCArIG1hamggKyAoKHQybCA+Pj4gMCkgPCAoc2lnbWEwbCA+Pj4gMCkgPyAxIDogMCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB3b3JraW5nIHZhcmlhYmxlc1xuXHQgICAgICAgICAgICAgICAgaGggPSBnaDtcblx0ICAgICAgICAgICAgICAgIGhsID0gZ2w7XG5cdCAgICAgICAgICAgICAgICBnaCA9IGZoO1xuXHQgICAgICAgICAgICAgICAgZ2wgPSBmbDtcblx0ICAgICAgICAgICAgICAgIGZoID0gZWg7XG5cdCAgICAgICAgICAgICAgICBmbCA9IGVsO1xuXHQgICAgICAgICAgICAgICAgZWwgPSAoZGwgKyB0MWwpIHwgMDtcblx0ICAgICAgICAgICAgICAgIGVoID0gKGRoICsgdDFoICsgKChlbCA+Pj4gMCkgPCAoZGwgPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgICAgICAgICBkaCA9IGNoO1xuXHQgICAgICAgICAgICAgICAgZGwgPSBjbDtcblx0ICAgICAgICAgICAgICAgIGNoID0gYmg7XG5cdCAgICAgICAgICAgICAgICBjbCA9IGJsO1xuXHQgICAgICAgICAgICAgICAgYmggPSBhaDtcblx0ICAgICAgICAgICAgICAgIGJsID0gYWw7XG5cdCAgICAgICAgICAgICAgICBhbCA9ICh0MWwgKyB0MmwpIHwgMDtcblx0ICAgICAgICAgICAgICAgIGFoID0gKHQxaCArIHQyaCArICgoYWwgPj4+IDApIDwgKHQxbCA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEludGVybWVkaWF0ZSBoYXNoIHZhbHVlXG5cdCAgICAgICAgICAgIEgwbCA9IEgwLmxvdyAgPSAoSDBsICsgYWwpO1xuXHQgICAgICAgICAgICBIMC5oaWdoID0gKEgwaCArIGFoICsgKChIMGwgPj4+IDApIDwgKGFsID4+PiAwKSA/IDEgOiAwKSk7XG5cdCAgICAgICAgICAgIEgxbCA9IEgxLmxvdyAgPSAoSDFsICsgYmwpO1xuXHQgICAgICAgICAgICBIMS5oaWdoID0gKEgxaCArIGJoICsgKChIMWwgPj4+IDApIDwgKGJsID4+PiAwKSA/IDEgOiAwKSk7XG5cdCAgICAgICAgICAgIEgybCA9IEgyLmxvdyAgPSAoSDJsICsgY2wpO1xuXHQgICAgICAgICAgICBIMi5oaWdoID0gKEgyaCArIGNoICsgKChIMmwgPj4+IDApIDwgKGNsID4+PiAwKSA/IDEgOiAwKSk7XG5cdCAgICAgICAgICAgIEgzbCA9IEgzLmxvdyAgPSAoSDNsICsgZGwpO1xuXHQgICAgICAgICAgICBIMy5oaWdoID0gKEgzaCArIGRoICsgKChIM2wgPj4+IDApIDwgKGRsID4+PiAwKSA/IDEgOiAwKSk7XG5cdCAgICAgICAgICAgIEg0bCA9IEg0LmxvdyAgPSAoSDRsICsgZWwpO1xuXHQgICAgICAgICAgICBINC5oaWdoID0gKEg0aCArIGVoICsgKChINGwgPj4+IDApIDwgKGVsID4+PiAwKSA/IDEgOiAwKSk7XG5cdCAgICAgICAgICAgIEg1bCA9IEg1LmxvdyAgPSAoSDVsICsgZmwpO1xuXHQgICAgICAgICAgICBINS5oaWdoID0gKEg1aCArIGZoICsgKChINWwgPj4+IDApIDwgKGZsID4+PiAwKSA/IDEgOiAwKSk7XG5cdCAgICAgICAgICAgIEg2bCA9IEg2LmxvdyAgPSAoSDZsICsgZ2wpO1xuXHQgICAgICAgICAgICBINi5oaWdoID0gKEg2aCArIGdoICsgKChINmwgPj4+IDApIDwgKGdsID4+PiAwKSA/IDEgOiAwKSk7XG5cdCAgICAgICAgICAgIEg3bCA9IEg3LmxvdyAgPSAoSDdsICsgaGwpO1xuXHQgICAgICAgICAgICBINy5oaWdoID0gKEg3aCArIGhoICsgKChIN2wgPj4+IDApIDwgKGhsID4+PiAwKSA/IDEgOiAwKSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cdCAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzO1xuXG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7XG5cdCAgICAgICAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODtcblxuXHQgICAgICAgICAgICAvLyBBZGQgcGFkZGluZ1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDgwIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDEyOCkgPj4+IDEwKSA8PCA1KSArIDMwXSA9IE1hdGguZmxvb3IobkJpdHNUb3RhbCAvIDB4MTAwMDAwMDAwKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDEyOCkgPj4+IDEwKSA8PCA1KSArIDMxXSA9IG5CaXRzVG90YWw7XG5cdCAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSBkYXRhV29yZHMubGVuZ3RoICogNDtcblxuXHQgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydCBoYXNoIHRvIDMyLWJpdCB3b3JkIGFycmF5IGJlZm9yZSByZXR1cm5pbmdcblx0ICAgICAgICAgICAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoLnRvWDMyKCk7XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2hcblx0ICAgICAgICAgICAgcmV0dXJuIGhhc2g7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICBjbG9uZS5faGFzaCA9IHRoaXMuX2hhc2guY2xvbmUoKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGJsb2NrU2l6ZTogMTAyNC8zMlxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEE1MTIoJ21lc3NhZ2UnKTtcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTUxMih3b3JkQXJyYXkpO1xuXHQgICAgICovXG5cdCAgICBDLlNIQTUxMiA9IEhhc2hlci5fY3JlYXRlSGVscGVyKFNIQTUxMik7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBNTEyKG1lc3NhZ2UsIGtleSk7XG5cdCAgICAgKi9cblx0ICAgIEMuSG1hY1NIQTUxMiA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihTSEE1MTIpO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLlNIQTUxMjtcblxufSkpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvZGwvfi9jcnlwdG8tanMvc2hhNTEyLmpzXG4gKiogbW9kdWxlIGlkID0gNTBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi94NjQtY29yZVwiKSwgcmVxdWlyZShcIi4vc2hhNTEyXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL3g2NC1jb3JlXCIsIFwiLi9zaGE1MTJcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ194NjQgPSBDLng2NDtcblx0ICAgIHZhciBYNjRXb3JkID0gQ194NjQuV29yZDtcblx0ICAgIHZhciBYNjRXb3JkQXJyYXkgPSBDX3g2NC5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXHQgICAgdmFyIFNIQTUxMiA9IENfYWxnby5TSEE1MTI7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU0hBLTM4NCBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFNIQTM4NCA9IENfYWxnby5TSEEzODQgPSBTSEE1MTIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFg2NFdvcmRBcnJheS5pbml0KFtcblx0ICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHhjYmJiOWQ1ZCwgMHhjMTA1OWVkOCksIG5ldyBYNjRXb3JkLmluaXQoMHg2MjlhMjkyYSwgMHgzNjdjZDUwNyksXG5cdCAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4OTE1OTAxNWEsIDB4MzA3MGRkMTcpLCBuZXcgWDY0V29yZC5pbml0KDB4MTUyZmVjZDgsIDB4ZjcwZTU5MzkpLFxuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDY3MzMyNjY3LCAweGZmYzAwYjMxKSwgbmV3IFg2NFdvcmQuaW5pdCgweDhlYjQ0YTg3LCAweDY4NTgxNTExKSxcblx0ICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHhkYjBjMmUwZCwgMHg2NGY5OGZhNyksIG5ldyBYNjRXb3JkLmluaXQoMHg0N2I1NDgxZCwgMHhiZWZhNGZhNClcblx0ICAgICAgICAgICAgXSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBoYXNoID0gU0hBNTEyLl9kb0ZpbmFsaXplLmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgaGFzaC5zaWdCeXRlcyAtPSAxNjtcblxuXHQgICAgICAgICAgICByZXR1cm4gaGFzaDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTM4NCgnbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMzg0KHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuU0hBMzg0ID0gU0hBNTEyLl9jcmVhdGVIZWxwZXIoU0hBMzg0KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNTSEEzODQobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjU0hBMzg0ID0gU0hBNTEyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTM4NCk7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuU0hBMzg0O1xuXG59KSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9kbC9+L2NyeXB0by1qcy9zaGEzODQuanNcbiAqKiBtb2R1bGUgaWQgPSA1MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL3g2NC1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL3g2NC1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKE1hdGgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXI7XG5cdCAgICB2YXIgQ194NjQgPSBDLng2NDtcblx0ICAgIHZhciBYNjRXb3JkID0gQ194NjQuV29yZDtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIENvbnN0YW50cyB0YWJsZXNcblx0ICAgIHZhciBSSE9fT0ZGU0VUUyA9IFtdO1xuXHQgICAgdmFyIFBJX0lOREVYRVMgID0gW107XG5cdCAgICB2YXIgUk9VTkRfQ09OU1RBTlRTID0gW107XG5cblx0ICAgIC8vIENvbXB1dGUgQ29uc3RhbnRzXG5cdCAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIC8vIENvbXB1dGUgcmhvIG9mZnNldCBjb25zdGFudHNcblx0ICAgICAgICB2YXIgeCA9IDEsIHkgPSAwO1xuXHQgICAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgMjQ7IHQrKykge1xuXHQgICAgICAgICAgICBSSE9fT0ZGU0VUU1t4ICsgNSAqIHldID0gKCh0ICsgMSkgKiAodCArIDIpIC8gMikgJSA2NDtcblxuXHQgICAgICAgICAgICB2YXIgbmV3WCA9IHkgJSA1O1xuXHQgICAgICAgICAgICB2YXIgbmV3WSA9ICgyICogeCArIDMgKiB5KSAlIDU7XG5cdCAgICAgICAgICAgIHggPSBuZXdYO1xuXHQgICAgICAgICAgICB5ID0gbmV3WTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBDb21wdXRlIHBpIGluZGV4IGNvbnN0YW50c1xuXHQgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgNTsgeCsrKSB7XG5cdCAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgNTsgeSsrKSB7XG5cdCAgICAgICAgICAgICAgICBQSV9JTkRFWEVTW3ggKyA1ICogeV0gPSB5ICsgKCgyICogeCArIDMgKiB5KSAlIDUpICogNTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIENvbXB1dGUgcm91bmQgY29uc3RhbnRzXG5cdCAgICAgICAgdmFyIExGU1IgPSAweDAxO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuXHQgICAgICAgICAgICB2YXIgcm91bmRDb25zdGFudE1zdyA9IDA7XG5cdCAgICAgICAgICAgIHZhciByb3VuZENvbnN0YW50THN3ID0gMDtcblxuXHQgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDc7IGorKykge1xuXHQgICAgICAgICAgICAgICAgaWYgKExGU1IgJiAweDAxKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGJpdFBvc2l0aW9uID0gKDEgPDwgaikgLSAxO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChiaXRQb3NpdGlvbiA8IDMyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJvdW5kQ29uc3RhbnRMc3cgXj0gMSA8PCBiaXRQb3NpdGlvbjtcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2UgLyogaWYgKGJpdFBvc2l0aW9uID49IDMyKSAqLyB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJvdW5kQ29uc3RhbnRNc3cgXj0gMSA8PCAoYml0UG9zaXRpb24gLSAzMik7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBDb21wdXRlIG5leHQgTEZTUlxuXHQgICAgICAgICAgICAgICAgaWYgKExGU1IgJiAweDgwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gUHJpbWl0aXZlIHBvbHlub21pYWwgb3ZlciBHRigyKTogeF44ICsgeF42ICsgeF41ICsgeF40ICsgMVxuXHQgICAgICAgICAgICAgICAgICAgIExGU1IgPSAoTEZTUiA8PCAxKSBeIDB4NzE7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIExGU1IgPDw9IDE7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBST1VORF9DT05TVEFOVFNbaV0gPSBYNjRXb3JkLmNyZWF0ZShyb3VuZENvbnN0YW50TXN3LCByb3VuZENvbnN0YW50THN3KTtcblx0ICAgICAgICB9XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvLyBSZXVzYWJsZSBvYmplY3RzIGZvciB0ZW1wb3JhcnkgdmFsdWVzXG5cdCAgICB2YXIgVCA9IFtdO1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1OyBpKyspIHtcblx0ICAgICAgICAgICAgVFtpXSA9IFg2NFdvcmQuY3JlYXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSgpKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTSEEtMyBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFNIQTMgPSBDX2FsZ28uU0hBMyA9IEhhc2hlci5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBvdXRwdXRMZW5ndGhcblx0ICAgICAgICAgKiAgIFRoZSBkZXNpcmVkIG51bWJlciBvZiBiaXRzIGluIHRoZSBvdXRwdXQgaGFzaC5cblx0ICAgICAgICAgKiAgIE9ubHkgdmFsdWVzIHBlcm1pdHRlZCBhcmU6IDIyNCwgMjU2LCAzODQsIDUxMi5cblx0ICAgICAgICAgKiAgIERlZmF1bHQ6IDUxMlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogSGFzaGVyLmNmZy5leHRlbmQoe1xuXHQgICAgICAgICAgICBvdXRwdXRMZW5ndGg6IDUxMlxuXHQgICAgICAgIH0pLFxuXG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGUgPSBbXVxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHN0YXRlW2ldID0gbmV3IFg2NFdvcmQuaW5pdCgpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgdGhpcy5ibG9ja1NpemUgPSAoMTYwMCAtIDIgKiB0aGlzLmNmZy5vdXRwdXRMZW5ndGgpIC8gMzI7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGU7XG5cdCAgICAgICAgICAgIHZhciBuQmxvY2tTaXplTGFuZXMgPSB0aGlzLmJsb2NrU2l6ZSAvIDI7XG5cblx0ICAgICAgICAgICAgLy8gQWJzb3JiXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbkJsb2NrU2l6ZUxhbmVzOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIE0yaSAgPSBNW29mZnNldCArIDIgKiBpXTtcblx0ICAgICAgICAgICAgICAgIHZhciBNMmkxID0gTVtvZmZzZXQgKyAyICogaSArIDFdO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICAgICAgTTJpID0gKFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE0yaSA8PCA4KSAgfCAoTTJpID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE0yaSA8PCAyNCkgfCAoTTJpID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgICAgICBNMmkxID0gKFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE0yaTEgPDwgOCkgIHwgKE0yaTEgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgKCgoTTJpMSA8PCAyNCkgfCAoTTJpMSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICAgICApO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBBYnNvcmIgbWVzc2FnZSBpbnRvIHN0YXRlXG5cdCAgICAgICAgICAgICAgICB2YXIgbGFuZSA9IHN0YXRlW2ldO1xuXHQgICAgICAgICAgICAgICAgbGFuZS5oaWdoIF49IE0yaTE7XG5cdCAgICAgICAgICAgICAgICBsYW5lLmxvdyAgXj0gTTJpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUm91bmRzXG5cdCAgICAgICAgICAgIGZvciAodmFyIHJvdW5kID0gMDsgcm91bmQgPCAyNDsgcm91bmQrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gVGhldGFcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgNTsgeCsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gTWl4IGNvbHVtbiBsYW5lc1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0TXN3ID0gMCwgdExzdyA9IDA7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCA1OyB5KyspIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVt4ICsgNSAqIHldO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0TXN3IF49IGxhbmUuaGlnaDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdExzdyBePSBsYW5lLmxvdztcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBUZW1wb3JhcnkgdmFsdWVzXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFR4ID0gVFt4XTtcblx0ICAgICAgICAgICAgICAgICAgICBUeC5oaWdoID0gdE1zdztcblx0ICAgICAgICAgICAgICAgICAgICBUeC5sb3cgID0gdExzdztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgNTsgeCsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFR4NCA9IFRbKHggKyA0KSAlIDVdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBUeDEgPSBUWyh4ICsgMSkgJSA1XTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgVHgxTXN3ID0gVHgxLmhpZ2g7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFR4MUxzdyA9IFR4MS5sb3c7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBNaXggc3Vycm91bmRpbmcgY29sdW1uc1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0TXN3ID0gVHg0LmhpZ2ggXiAoKFR4MU1zdyA8PCAxKSB8IChUeDFMc3cgPj4+IDMxKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRMc3cgPSBUeDQubG93ICBeICgoVHgxTHN3IDw8IDEpIHwgKFR4MU1zdyA+Pj4gMzEpKTtcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IDU7IHkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZSA9IHN0YXRlW3ggKyA1ICogeV07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxhbmUuaGlnaCBePSB0TXN3O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBsYW5lLmxvdyAgXj0gdExzdztcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJobyBQaVxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgbGFuZUluZGV4ID0gMTsgbGFuZUluZGV4IDwgMjU7IGxhbmVJbmRleCsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVtsYW5lSW5kZXhdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lTXN3ID0gbGFuZS5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lTHN3ID0gbGFuZS5sb3c7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHJob09mZnNldCA9IFJIT19PRkZTRVRTW2xhbmVJbmRleF07XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBSb3RhdGUgbGFuZXNcblx0ICAgICAgICAgICAgICAgICAgICBpZiAocmhvT2Zmc2V0IDwgMzIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRNc3cgPSAobGFuZU1zdyA8PCByaG9PZmZzZXQpIHwgKGxhbmVMc3cgPj4+ICgzMiAtIHJob09mZnNldCkpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdExzdyA9IChsYW5lTHN3IDw8IHJob09mZnNldCkgfCAobGFuZU1zdyA+Pj4gKDMyIC0gcmhvT2Zmc2V0KSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIC8qIGlmIChyaG9PZmZzZXQgPj0gMzIpICovIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRNc3cgPSAobGFuZUxzdyA8PCAocmhvT2Zmc2V0IC0gMzIpKSB8IChsYW5lTXN3ID4+PiAoNjQgLSByaG9PZmZzZXQpKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRMc3cgPSAobGFuZU1zdyA8PCAocmhvT2Zmc2V0IC0gMzIpKSB8IChsYW5lTHN3ID4+PiAoNjQgLSByaG9PZmZzZXQpKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBUcmFuc3Bvc2UgbGFuZXNcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgVFBpTGFuZSA9IFRbUElfSU5ERVhFU1tsYW5lSW5kZXhdXTtcblx0ICAgICAgICAgICAgICAgICAgICBUUGlMYW5lLmhpZ2ggPSB0TXN3O1xuXHQgICAgICAgICAgICAgICAgICAgIFRQaUxhbmUubG93ICA9IHRMc3c7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJobyBwaSBhdCB4ID0geSA9IDBcblx0ICAgICAgICAgICAgICAgIHZhciBUMCA9IFRbMF07XG5cdCAgICAgICAgICAgICAgICB2YXIgc3RhdGUwID0gc3RhdGVbMF07XG5cdCAgICAgICAgICAgICAgICBUMC5oaWdoID0gc3RhdGUwLmhpZ2g7XG5cdCAgICAgICAgICAgICAgICBUMC5sb3cgID0gc3RhdGUwLmxvdztcblxuXHQgICAgICAgICAgICAgICAgLy8gQ2hpXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7IHgrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgNTsgeSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZUluZGV4ID0geCArIDUgKiB5O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZSA9IHN0YXRlW2xhbmVJbmRleF07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBUTGFuZSA9IFRbbGFuZUluZGV4XTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFR4MUxhbmUgPSBUWygoeCArIDEpICUgNSkgKyA1ICogeV07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBUeDJMYW5lID0gVFsoKHggKyAyKSAlIDUpICsgNSAqIHldO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1peCByb3dzXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxhbmUuaGlnaCA9IFRMYW5lLmhpZ2ggXiAoflR4MUxhbmUuaGlnaCAmIFR4MkxhbmUuaGlnaCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxhbmUubG93ICA9IFRMYW5lLmxvdyAgXiAoflR4MUxhbmUubG93ICAmIFR4MkxhbmUubG93KTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIElvdGFcblx0ICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbMF07XG5cdCAgICAgICAgICAgICAgICB2YXIgcm91bmRDb25zdGFudCA9IFJPVU5EX0NPTlNUQU5UU1tyb3VuZF07XG5cdCAgICAgICAgICAgICAgICBsYW5lLmhpZ2ggXj0gcm91bmRDb25zdGFudC5oaWdoO1xuXHQgICAgICAgICAgICAgICAgbGFuZS5sb3cgIF49IHJvdW5kQ29uc3RhbnQubG93Oztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4O1xuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplQml0cyA9IHRoaXMuYmxvY2tTaXplICogMzI7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHgxIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoTWF0aC5jZWlsKChuQml0c0xlZnQgKyAxKSAvIGJsb2NrU2l6ZUJpdHMpICogYmxvY2tTaXplQml0cykgPj4+IDUpIC0gMV0gfD0gMHg4MDtcblx0ICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyA9IGRhdGFXb3Jkcy5sZW5ndGggKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzXG5cdCAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MoKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGU7XG5cdCAgICAgICAgICAgIHZhciBvdXRwdXRMZW5ndGhCeXRlcyA9IHRoaXMuY2ZnLm91dHB1dExlbmd0aCAvIDg7XG5cdCAgICAgICAgICAgIHZhciBvdXRwdXRMZW5ndGhMYW5lcyA9IG91dHB1dExlbmd0aEJ5dGVzIC8gODtcblxuXHQgICAgICAgICAgICAvLyBTcXVlZXplXG5cdCAgICAgICAgICAgIHZhciBoYXNoV29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRwdXRMZW5ndGhMYW5lczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbaV07XG5cdCAgICAgICAgICAgICAgICB2YXIgbGFuZU1zdyA9IGxhbmUuaGlnaDtcblx0ICAgICAgICAgICAgICAgIHZhciBsYW5lTHN3ID0gbGFuZS5sb3c7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXG5cdCAgICAgICAgICAgICAgICBsYW5lTXN3ID0gKFxuXHQgICAgICAgICAgICAgICAgICAgICgoKGxhbmVNc3cgPDwgOCkgIHwgKGxhbmVNc3cgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgKCgobGFuZU1zdyA8PCAyNCkgfCAobGFuZU1zdyA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICAgICAgbGFuZUxzdyA9IChcblx0ICAgICAgICAgICAgICAgICAgICAoKChsYW5lTHN3IDw8IDgpICB8IChsYW5lTHN3ID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICgoKGxhbmVMc3cgPDwgMjQpIHwgKGxhbmVMc3cgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICAgICAgKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gU3F1ZWV6ZSBzdGF0ZSB0byByZXRyaWV2ZSBoYXNoXG5cdCAgICAgICAgICAgICAgICBoYXNoV29yZHMucHVzaChsYW5lTHN3KTtcblx0ICAgICAgICAgICAgICAgIGhhc2hXb3Jkcy5wdXNoKGxhbmVNc3cpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2hcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdChoYXNoV29yZHMsIG91dHB1dExlbmd0aEJ5dGVzKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgdmFyIHN0YXRlID0gY2xvbmUuX3N0YXRlID0gdGhpcy5fc3RhdGUuc2xpY2UoMCk7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgc3RhdGVbaV0gPSBzdGF0ZVtpXS5jbG9uZSgpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMygnbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMyh3b3JkQXJyYXkpO1xuXHQgICAgICovXG5cdCAgICBDLlNIQTMgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihTSEEzKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNTSEEzKG1lc3NhZ2UsIGtleSk7XG5cdCAgICAgKi9cblx0ICAgIEMuSG1hY1NIQTMgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMyk7XG5cdH0oTWF0aCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLlNIQTM7XG5cbn0pKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL2RsL34vY3J5cHRvLWpzL3NoYTMuanNcbiAqKiBtb2R1bGUgaWQgPSA1MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQvKiogQHByZXNlcnZlXG5cdChjKSAyMDEyIGJ5IEPDqWRyaWMgTWVzbmlsLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG5cdFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuXHQgICAgLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cdCAgICAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuXHRUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cdCovXG5cblx0KGZ1bmN0aW9uIChNYXRoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLy8gQ29uc3RhbnRzIHRhYmxlXG5cdCAgICB2YXIgX3psID0gV29yZEFycmF5LmNyZWF0ZShbXG5cdCAgICAgICAgMCwgIDEsICAyLCAgMywgIDQsICA1LCAgNiwgIDcsICA4LCAgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcblx0ICAgICAgICA3LCAgNCwgMTMsICAxLCAxMCwgIDYsIDE1LCAgMywgMTIsICAwLCAgOSwgIDUsICAyLCAxNCwgMTEsICA4LFxuXHQgICAgICAgIDMsIDEwLCAxNCwgIDQsICA5LCAxNSwgIDgsICAxLCAgMiwgIDcsICAwLCAgNiwgMTMsIDExLCAgNSwgMTIsXG5cdCAgICAgICAgMSwgIDksIDExLCAxMCwgIDAsICA4LCAxMiwgIDQsIDEzLCAgMywgIDcsIDE1LCAxNCwgIDUsICA2LCAgMixcblx0ICAgICAgICA0LCAgMCwgIDUsICA5LCAgNywgMTIsICAyLCAxMCwgMTQsICAxLCAgMywgIDgsIDExLCAgNiwgMTUsIDEzXSk7XG5cdCAgICB2YXIgX3pyID0gV29yZEFycmF5LmNyZWF0ZShbXG5cdCAgICAgICAgNSwgMTQsICA3LCAgMCwgIDksICAyLCAxMSwgIDQsIDEzLCAgNiwgMTUsICA4LCAgMSwgMTAsICAzLCAxMixcblx0ICAgICAgICA2LCAxMSwgIDMsICA3LCAgMCwgMTMsICA1LCAxMCwgMTQsIDE1LCAgOCwgMTIsICA0LCAgOSwgIDEsICAyLFxuXHQgICAgICAgIDE1LCAgNSwgIDEsICAzLCAgNywgMTQsICA2LCAgOSwgMTEsICA4LCAxMiwgIDIsIDEwLCAgMCwgIDQsIDEzLFxuXHQgICAgICAgIDgsICA2LCAgNCwgIDEsICAzLCAxMSwgMTUsICAwLCAgNSwgMTIsICAyLCAxMywgIDksICA3LCAxMCwgMTQsXG5cdCAgICAgICAgMTIsIDE1LCAxMCwgIDQsICAxLCAgNSwgIDgsICA3LCAgNiwgIDIsIDEzLCAxNCwgIDAsICAzLCAgOSwgMTFdKTtcblx0ICAgIHZhciBfc2wgPSBXb3JkQXJyYXkuY3JlYXRlKFtcblx0ICAgICAgICAgMTEsIDE0LCAxNSwgMTIsICA1LCAgOCwgIDcsICA5LCAxMSwgMTMsIDE0LCAxNSwgIDYsICA3LCAgOSwgIDgsXG5cdCAgICAgICAgNywgNiwgICA4LCAxMywgMTEsICA5LCAgNywgMTUsICA3LCAxMiwgMTUsICA5LCAxMSwgIDcsIDEzLCAxMixcblx0ICAgICAgICAxMSwgMTMsICA2LCAgNywgMTQsICA5LCAxMywgMTUsIDE0LCAgOCwgMTMsICA2LCAgNSwgMTIsICA3LCAgNSxcblx0ICAgICAgICAgIDExLCAxMiwgMTQsIDE1LCAxNCwgMTUsICA5LCAgOCwgIDksIDE0LCAgNSwgIDYsICA4LCAgNiwgIDUsIDEyLFxuXHQgICAgICAgIDksIDE1LCAgNSwgMTEsICA2LCAgOCwgMTMsIDEyLCAgNSwgMTIsIDEzLCAxNCwgMTEsICA4LCAgNSwgIDYgXSk7XG5cdCAgICB2YXIgX3NyID0gV29yZEFycmF5LmNyZWF0ZShbXG5cdCAgICAgICAgOCwgIDksICA5LCAxMSwgMTMsIDE1LCAxNSwgIDUsICA3LCAgNywgIDgsIDExLCAxNCwgMTQsIDEyLCAgNixcblx0ICAgICAgICA5LCAxMywgMTUsICA3LCAxMiwgIDgsICA5LCAxMSwgIDcsICA3LCAxMiwgIDcsICA2LCAxNSwgMTMsIDExLFxuXHQgICAgICAgIDksICA3LCAxNSwgMTEsICA4LCAgNiwgIDYsIDE0LCAxMiwgMTMsICA1LCAxNCwgMTMsIDEzLCAgNywgIDUsXG5cdCAgICAgICAgMTUsICA1LCAgOCwgMTEsIDE0LCAxNCwgIDYsIDE0LCAgNiwgIDksIDEyLCAgOSwgMTIsICA1LCAxNSwgIDgsXG5cdCAgICAgICAgOCwgIDUsIDEyLCAgOSwgMTIsICA1LCAxNCwgIDYsICA4LCAxMywgIDYsICA1LCAxNSwgMTMsIDExLCAxMSBdKTtcblxuXHQgICAgdmFyIF9obCA9ICBXb3JkQXJyYXkuY3JlYXRlKFsgMHgwMDAwMDAwMCwgMHg1QTgyNzk5OSwgMHg2RUQ5RUJBMSwgMHg4RjFCQkNEQywgMHhBOTUzRkQ0RV0pO1xuXHQgICAgdmFyIF9ociA9ICBXb3JkQXJyYXkuY3JlYXRlKFsgMHg1MEEyOEJFNiwgMHg1QzRERDEyNCwgMHg2RDcwM0VGMywgMHg3QTZENzZFOSwgMHgwMDAwMDAwMF0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFJJUEVNRDE2MCBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFJJUEVNRDE2MCA9IENfYWxnby5SSVBFTUQxNjAgPSBIYXNoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoICA9IFdvcmRBcnJheS5jcmVhdGUoWzB4Njc0NTIzMDEsIDB4RUZDREFCODksIDB4OThCQURDRkUsIDB4MTAzMjU0NzYsIDB4QzNEMkUxRjBdKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cblx0ICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBvZmZzZXRfaSA9IG9mZnNldCArIGk7XG5cdCAgICAgICAgICAgICAgICB2YXIgTV9vZmZzZXRfaSA9IE1bb2Zmc2V0X2ldO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTd2FwXG5cdCAgICAgICAgICAgICAgICBNW29mZnNldF9pXSA9IChcblx0ICAgICAgICAgICAgICAgICAgICAoKChNX29mZnNldF9pIDw8IDgpICB8IChNX29mZnNldF9pID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE1fb2Zmc2V0X2kgPDwgMjQpIHwgKE1fb2Zmc2V0X2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgSCAgPSB0aGlzLl9oYXNoLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgaGwgPSBfaGwud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBociA9IF9oci53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHpsID0gX3psLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgenIgPSBfenIud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzbCA9IF9zbC53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNyID0gX3NyLndvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFibGVzXG5cdCAgICAgICAgICAgIHZhciBhbCwgYmwsIGNsLCBkbCwgZWw7XG5cdCAgICAgICAgICAgIHZhciBhciwgYnIsIGNyLCBkciwgZXI7XG5cblx0ICAgICAgICAgICAgYXIgPSBhbCA9IEhbMF07XG5cdCAgICAgICAgICAgIGJyID0gYmwgPSBIWzFdO1xuXHQgICAgICAgICAgICBjciA9IGNsID0gSFsyXTtcblx0ICAgICAgICAgICAgZHIgPSBkbCA9IEhbM107XG5cdCAgICAgICAgICAgIGVyID0gZWwgPSBIWzRdO1xuXHQgICAgICAgICAgICAvLyBDb21wdXRhdGlvblxuXHQgICAgICAgICAgICB2YXIgdDtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSArPSAxKSB7XG5cdCAgICAgICAgICAgICAgICB0ID0gKGFsICsgIE1bb2Zmc2V0K3psW2ldXSl8MDtcblx0ICAgICAgICAgICAgICAgIGlmIChpPDE2KXtcblx0XHQgICAgICAgICAgICB0ICs9ICBmMShibCxjbCxkbCkgKyBobFswXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaTwzMikge1xuXHRcdCAgICAgICAgICAgIHQgKz0gIGYyKGJsLGNsLGRsKSArIGhsWzFdO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpPDQ4KSB7XG5cdFx0ICAgICAgICAgICAgdCArPSAgZjMoYmwsY2wsZGwpICsgaGxbMl07XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGk8NjQpIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmNChibCxjbCxkbCkgKyBobFszXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7Ly8gaWYgKGk8ODApIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmNShibCxjbCxkbCkgKyBobFs0XTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHQgPSB0fDA7XG5cdCAgICAgICAgICAgICAgICB0ID0gIHJvdGwodCxzbFtpXSk7XG5cdCAgICAgICAgICAgICAgICB0ID0gKHQrZWwpfDA7XG5cdCAgICAgICAgICAgICAgICBhbCA9IGVsO1xuXHQgICAgICAgICAgICAgICAgZWwgPSBkbDtcblx0ICAgICAgICAgICAgICAgIGRsID0gcm90bChjbCwgMTApO1xuXHQgICAgICAgICAgICAgICAgY2wgPSBibDtcblx0ICAgICAgICAgICAgICAgIGJsID0gdDtcblxuXHQgICAgICAgICAgICAgICAgdCA9IChhciArIE1bb2Zmc2V0K3pyW2ldXSl8MDtcblx0ICAgICAgICAgICAgICAgIGlmIChpPDE2KXtcblx0XHQgICAgICAgICAgICB0ICs9ICBmNShicixjcixkcikgKyBoclswXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaTwzMikge1xuXHRcdCAgICAgICAgICAgIHQgKz0gIGY0KGJyLGNyLGRyKSArIGhyWzFdO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpPDQ4KSB7XG5cdFx0ICAgICAgICAgICAgdCArPSAgZjMoYnIsY3IsZHIpICsgaHJbMl07XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGk8NjQpIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmMihicixjcixkcikgKyBoclszXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7Ly8gaWYgKGk8ODApIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmMShicixjcixkcikgKyBocls0XTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHQgPSB0fDA7XG5cdCAgICAgICAgICAgICAgICB0ID0gIHJvdGwodCxzcltpXSkgO1xuXHQgICAgICAgICAgICAgICAgdCA9ICh0K2VyKXwwO1xuXHQgICAgICAgICAgICAgICAgYXIgPSBlcjtcblx0ICAgICAgICAgICAgICAgIGVyID0gZHI7XG5cdCAgICAgICAgICAgICAgICBkciA9IHJvdGwoY3IsIDEwKTtcblx0ICAgICAgICAgICAgICAgIGNyID0gYnI7XG5cdCAgICAgICAgICAgICAgICBiciA9IHQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWVcblx0ICAgICAgICAgICAgdCAgICA9IChIWzFdICsgY2wgKyBkcil8MDtcblx0ICAgICAgICAgICAgSFsxXSA9IChIWzJdICsgZGwgKyBlcil8MDtcblx0ICAgICAgICAgICAgSFsyXSA9IChIWzNdICsgZWwgKyBhcil8MDtcblx0ICAgICAgICAgICAgSFszXSA9IChIWzRdICsgYWwgKyBicil8MDtcblx0ICAgICAgICAgICAgSFs0XSA9IChIWzBdICsgYmwgKyBjcil8MDtcblx0ICAgICAgICAgICAgSFswXSA9ICB0O1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4O1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gKFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbCA8PCA4KSAgfCAobkJpdHNUb3RhbCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICgoKG5CaXRzVG90YWwgPDwgMjQpIHwgKG5CaXRzVG90YWwgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gKGRhdGFXb3Jkcy5sZW5ndGggKyAxKSAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2hhc2g7XG5cdCAgICAgICAgICAgIHZhciBIID0gaGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDU7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgICAgIHZhciBIX2kgPSBIW2ldO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTd2FwXG5cdCAgICAgICAgICAgICAgICBIW2ldID0gKCgoSF9pIDw8IDgpICB8IChIX2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgICAgKCgoSF9pIDw8IDI0KSB8IChIX2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cblx0ICAgIGZ1bmN0aW9uIGYxKHgsIHksIHopIHtcblx0ICAgICAgICByZXR1cm4gKCh4KSBeICh5KSBeICh6KSk7XG5cblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gZjIoeCwgeSwgeikge1xuXHQgICAgICAgIHJldHVybiAoKCh4KSYoeSkpIHwgKCh+eCkmKHopKSk7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGYzKHgsIHksIHopIHtcblx0ICAgICAgICByZXR1cm4gKCgoeCkgfCAofih5KSkpIF4gKHopKTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gZjQoeCwgeSwgeikge1xuXHQgICAgICAgIHJldHVybiAoKCh4KSAmICh6KSkgfCAoKHkpJih+KHopKSkpO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBmNSh4LCB5LCB6KSB7XG5cdCAgICAgICAgcmV0dXJuICgoeCkgXiAoKHkpIHwofih6KSkpKTtcblxuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiByb3RsKHgsbikge1xuXHQgICAgICAgIHJldHVybiAoeDw8bikgfCAoeD4+PigzMi1uKSk7XG5cdCAgICB9XG5cblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlJJUEVNRDE2MCgnbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuUklQRU1EMTYwKHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuUklQRU1EMTYwID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoUklQRU1EMTYwKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNSSVBFTUQxNjAobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjUklQRU1EMTYwID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFJJUEVNRDE2MCk7XG5cdH0oTWF0aCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLlJJUEVNRDE2MDtcblxufSkpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvZGwvfi9jcnlwdG8tanMvcmlwZW1kMTYwLmpzXG4gKiogbW9kdWxlIGlkID0gNTNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlO1xuXHQgICAgdmFyIENfZW5jID0gQy5lbmM7XG5cdCAgICB2YXIgVXRmOCA9IENfZW5jLlV0Zjg7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEhNQUMgYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgSE1BQyA9IENfYWxnby5ITUFDID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBITUFDLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtIYXNoZXJ9IGhhc2hlciBUaGUgaGFzaCBhbGdvcml0aG0gdG8gdXNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgaG1hY0hhc2hlciA9IENyeXB0b0pTLmFsZ28uSE1BQy5jcmVhdGUoQ3J5cHRvSlMuYWxnby5TSEEyNTYsIGtleSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKGhhc2hlciwga2V5KSB7XG5cdCAgICAgICAgICAgIC8vIEluaXQgaGFzaGVyXG5cdCAgICAgICAgICAgIGhhc2hlciA9IHRoaXMuX2hhc2hlciA9IG5ldyBoYXNoZXIuaW5pdCgpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIFdvcmRBcnJheSwgZWxzZSBhc3N1bWUgV29yZEFycmF5IGFscmVhZHlcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgICAgICAgIGtleSA9IFV0ZjgucGFyc2Uoa2V5KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgaGFzaGVyQmxvY2tTaXplID0gaGFzaGVyLmJsb2NrU2l6ZTtcblx0ICAgICAgICAgICAgdmFyIGhhc2hlckJsb2NrU2l6ZUJ5dGVzID0gaGFzaGVyQmxvY2tTaXplICogNDtcblxuXHQgICAgICAgICAgICAvLyBBbGxvdyBhcmJpdHJhcnkgbGVuZ3RoIGtleXNcblx0ICAgICAgICAgICAgaWYgKGtleS5zaWdCeXRlcyA+IGhhc2hlckJsb2NrU2l6ZUJ5dGVzKSB7XG5cdCAgICAgICAgICAgICAgICBrZXkgPSBoYXNoZXIuZmluYWxpemUoa2V5KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENsYW1wIGV4Y2VzcyBiaXRzXG5cdCAgICAgICAgICAgIGtleS5jbGFtcCgpO1xuXG5cdCAgICAgICAgICAgIC8vIENsb25lIGtleSBmb3IgaW5uZXIgYW5kIG91dGVyIHBhZHNcblx0ICAgICAgICAgICAgdmFyIG9LZXkgPSB0aGlzLl9vS2V5ID0ga2V5LmNsb25lKCk7XG5cdCAgICAgICAgICAgIHZhciBpS2V5ID0gdGhpcy5faUtleSA9IGtleS5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgb0tleVdvcmRzID0gb0tleS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGlLZXlXb3JkcyA9IGlLZXkud29yZHM7XG5cblx0ICAgICAgICAgICAgLy8gWE9SIGtleXMgd2l0aCBwYWQgY29uc3RhbnRzXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFzaGVyQmxvY2tTaXplOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIG9LZXlXb3Jkc1tpXSBePSAweDVjNWM1YzVjO1xuXHQgICAgICAgICAgICAgICAgaUtleVdvcmRzW2ldIF49IDB4MzYzNjM2MzY7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgb0tleS5zaWdCeXRlcyA9IGlLZXkuc2lnQnl0ZXMgPSBoYXNoZXJCbG9ja1NpemVCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBTZXQgaW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSZXNldHMgdGhpcyBITUFDIHRvIGl0cyBpbml0aWFsIHN0YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBobWFjSGFzaGVyLnJlc2V0KCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGhhc2hlciA9IHRoaXMuX2hhc2hlcjtcblxuXHQgICAgICAgICAgICAvLyBSZXNldFxuXHQgICAgICAgICAgICBoYXNoZXIucmVzZXQoKTtcblx0ICAgICAgICAgICAgaGFzaGVyLnVwZGF0ZSh0aGlzLl9pS2V5KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogVXBkYXRlcyB0aGlzIEhNQUMgd2l0aCBhIG1lc3NhZ2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgVGhlIG1lc3NhZ2UgdG8gYXBwZW5kLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7SE1BQ30gVGhpcyBITUFDIGluc3RhbmNlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBobWFjSGFzaGVyLnVwZGF0ZSgnbWVzc2FnZScpO1xuXHQgICAgICAgICAqICAgICBobWFjSGFzaGVyLnVwZGF0ZSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5faGFzaGVyLnVwZGF0ZShtZXNzYWdlVXBkYXRlKTtcblxuXHQgICAgICAgICAgICAvLyBDaGFpbmFibGVcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEZpbmFsaXplcyB0aGUgSE1BQyBjb21wdXRhdGlvbi5cblx0ICAgICAgICAgKiBOb3RlIHRoYXQgdGhlIGZpbmFsaXplIG9wZXJhdGlvbiBpcyBlZmZlY3RpdmVseSBhIGRlc3RydWN0aXZlLCByZWFkLW9uY2Ugb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlVXBkYXRlIChPcHRpb25hbCkgQSBmaW5hbCBtZXNzYWdlIHVwZGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBobWFjID0gaG1hY0hhc2hlci5maW5hbGl6ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIgaG1hYyA9IGhtYWNIYXNoZXIuZmluYWxpemUoJ21lc3NhZ2UnKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGhtYWMgPSBobWFjSGFzaGVyLmZpbmFsaXplKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZmluYWxpemU6IGZ1bmN0aW9uIChtZXNzYWdlVXBkYXRlKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBoYXNoZXIgPSB0aGlzLl9oYXNoZXI7XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBITUFDXG5cdCAgICAgICAgICAgIHZhciBpbm5lckhhc2ggPSBoYXNoZXIuZmluYWxpemUobWVzc2FnZVVwZGF0ZSk7XG5cdCAgICAgICAgICAgIGhhc2hlci5yZXNldCgpO1xuXHQgICAgICAgICAgICB2YXIgaG1hYyA9IGhhc2hlci5maW5hbGl6ZSh0aGlzLl9vS2V5LmNsb25lKCkuY29uY2F0KGlubmVySGFzaCkpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBobWFjO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHR9KCkpO1xuXG5cbn0pKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL2RsL34vY3J5cHRvLWpzL2htYWMuanNcbiAqKiBtb2R1bGUgaWQgPSA1NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL3NoYTFcIiksIHJlcXVpcmUoXCIuL2htYWNcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vc2hhMVwiLCBcIi4vaG1hY1wiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cdCAgICB2YXIgU0hBMSA9IENfYWxnby5TSEExO1xuXHQgICAgdmFyIEhNQUMgPSBDX2FsZ28uSE1BQztcblxuXHQgICAgLyoqXG5cdCAgICAgKiBQYXNzd29yZC1CYXNlZCBLZXkgRGVyaXZhdGlvbiBGdW5jdGlvbiAyIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFBCS0RGMiA9IENfYWxnby5QQktERjIgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGtleVNpemUgVGhlIGtleSBzaXplIGluIHdvcmRzIHRvIGdlbmVyYXRlLiBEZWZhdWx0OiA0ICgxMjggYml0cylcblx0ICAgICAgICAgKiBAcHJvcGVydHkge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoZXIgdG8gdXNlLiBEZWZhdWx0OiBTSEExXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGl0ZXJhdGlvbnMgVGhlIG51bWJlciBvZiBpdGVyYXRpb25zIHRvIHBlcmZvcm0uIERlZmF1bHQ6IDFcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjZmc6IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAgICAga2V5U2l6ZTogMTI4LzMyLFxuXHQgICAgICAgICAgICBoYXNoZXI6IFNIQTEsXG5cdCAgICAgICAgICAgIGl0ZXJhdGlvbnM6IDFcblx0ICAgICAgICB9KSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhlIGRlcml2YXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBrZGYgPSBDcnlwdG9KUy5hbGdvLlBCS0RGMi5jcmVhdGUoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uUEJLREYyLmNyZWF0ZSh7IGtleVNpemU6IDggfSk7XG5cdCAgICAgICAgICogICAgIHZhciBrZGYgPSBDcnlwdG9KUy5hbGdvLlBCS0RGMi5jcmVhdGUoeyBrZXlTaXplOiA4LCBpdGVyYXRpb25zOiAxMDAwIH0pO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjZmcpIHtcblx0ICAgICAgICAgICAgdGhpcy5jZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29tcHV0ZXMgdGhlIFBhc3N3b3JkLUJhc2VkIEtleSBEZXJpdmF0aW9uIEZ1bmN0aW9uIDIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgQSBzYWx0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGVyaXZlZCBrZXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBrZXkgPSBrZGYuY29tcHV0ZShwYXNzd29yZCwgc2FsdCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY29tcHV0ZTogZnVuY3Rpb24gKHBhc3N3b3JkLCBzYWx0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBjZmcgPSB0aGlzLmNmZztcblxuXHQgICAgICAgICAgICAvLyBJbml0IEhNQUNcblx0ICAgICAgICAgICAgdmFyIGhtYWMgPSBITUFDLmNyZWF0ZShjZmcuaGFzaGVyLCBwYXNzd29yZCk7XG5cblx0ICAgICAgICAgICAgLy8gSW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICAgICAgdmFyIGRlcml2ZWRLZXkgPSBXb3JkQXJyYXkuY3JlYXRlKCk7XG5cdCAgICAgICAgICAgIHZhciBibG9ja0luZGV4ID0gV29yZEFycmF5LmNyZWF0ZShbMHgwMDAwMDAwMV0pO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGVyaXZlZEtleVdvcmRzID0gZGVyaXZlZEtleS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGJsb2NrSW5kZXhXb3JkcyA9IGJsb2NrSW5kZXgud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBrZXlTaXplID0gY2ZnLmtleVNpemU7XG5cdCAgICAgICAgICAgIHZhciBpdGVyYXRpb25zID0gY2ZnLml0ZXJhdGlvbnM7XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUga2V5XG5cdCAgICAgICAgICAgIHdoaWxlIChkZXJpdmVkS2V5V29yZHMubGVuZ3RoIDwga2V5U2l6ZSkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrID0gaG1hYy51cGRhdGUoc2FsdCkuZmluYWxpemUoYmxvY2tJbmRleCk7XG5cdCAgICAgICAgICAgICAgICBobWFjLnJlc2V0KCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrV29yZHMgPSBibG9jay53b3Jkcztcblx0ICAgICAgICAgICAgICAgIHZhciBibG9ja1dvcmRzTGVuZ3RoID0gYmxvY2tXb3Jkcy5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGlvbnNcblx0ICAgICAgICAgICAgICAgIHZhciBpbnRlcm1lZGlhdGUgPSBibG9jaztcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgaXRlcmF0aW9uczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaW50ZXJtZWRpYXRlID0gaG1hYy5maW5hbGl6ZShpbnRlcm1lZGlhdGUpO1xuXHQgICAgICAgICAgICAgICAgICAgIGhtYWMucmVzZXQoKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGludGVybWVkaWF0ZVdvcmRzID0gaW50ZXJtZWRpYXRlLndvcmRzO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gWE9SIGludGVybWVkaWF0ZSB3aXRoIGJsb2NrXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBibG9ja1dvcmRzTGVuZ3RoOyBqKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tXb3Jkc1tqXSBePSBpbnRlcm1lZGlhdGVXb3Jkc1tqXTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGRlcml2ZWRLZXkuY29uY2F0KGJsb2NrKTtcblx0ICAgICAgICAgICAgICAgIGJsb2NrSW5kZXhXb3Jkc1swXSsrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGRlcml2ZWRLZXkuc2lnQnl0ZXMgPSBrZXlTaXplICogNDtcblxuXHQgICAgICAgICAgICByZXR1cm4gZGVyaXZlZEtleTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBDb21wdXRlcyB0aGUgUGFzc3dvcmQtQmFzZWQgS2V5IERlcml2YXRpb24gRnVuY3Rpb24gMi5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gc2FsdCBBIHNhbHQuXG5cdCAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgY29tcHV0YXRpb24uXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGVyaXZlZCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBrZXkgPSBDcnlwdG9KUy5QQktERjIocGFzc3dvcmQsIHNhbHQpO1xuXHQgICAgICogICAgIHZhciBrZXkgPSBDcnlwdG9KUy5QQktERjIocGFzc3dvcmQsIHNhbHQsIHsga2V5U2l6ZTogOCB9KTtcblx0ICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuUEJLREYyKHBhc3N3b3JkLCBzYWx0LCB7IGtleVNpemU6IDgsIGl0ZXJhdGlvbnM6IDEwMDAgfSk7XG5cdCAgICAgKi9cblx0ICAgIEMuUEJLREYyID0gZnVuY3Rpb24gKHBhc3N3b3JkLCBzYWx0LCBjZmcpIHtcblx0ICAgICAgICByZXR1cm4gUEJLREYyLmNyZWF0ZShjZmcpLmNvbXB1dGUocGFzc3dvcmQsIHNhbHQpO1xuXHQgICAgfTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5QQktERjI7XG5cbn0pKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL2RsL34vY3J5cHRvLWpzL3Bia2RmMi5qc1xuICoqIG1vZHVsZSBpZCA9IDU1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vc2hhMVwiKSwgcmVxdWlyZShcIi4vaG1hY1wiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9zaGExXCIsIFwiLi9obWFjXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQmFzZSA9IENfbGliLkJhc2U7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblx0ICAgIHZhciBNRDUgPSBDX2FsZ28uTUQ1O1xuXG5cdCAgICAvKipcblx0ICAgICAqIFRoaXMga2V5IGRlcml2YXRpb24gZnVuY3Rpb24gaXMgbWVhbnQgdG8gY29uZm9ybSB3aXRoIEVWUF9CeXRlc1RvS2V5LlxuXHQgICAgICogd3d3Lm9wZW5zc2wub3JnL2RvY3MvY3J5cHRvL0VWUF9CeXRlc1RvS2V5Lmh0bWxcblx0ICAgICAqL1xuXHQgICAgdmFyIEV2cEtERiA9IENfYWxnby5FdnBLREYgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGtleVNpemUgVGhlIGtleSBzaXplIGluIHdvcmRzIHRvIGdlbmVyYXRlLiBEZWZhdWx0OiA0ICgxMjggYml0cylcblx0ICAgICAgICAgKiBAcHJvcGVydHkge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoIGFsZ29yaXRobSB0byB1c2UuIERlZmF1bHQ6IE1ENVxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpdGVyYXRpb25zIFRoZSBudW1iZXIgb2YgaXRlcmF0aW9ucyB0byBwZXJmb3JtLiBEZWZhdWx0OiAxXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgICAgIGtleVNpemU6IDEyOC8zMixcblx0ICAgICAgICAgICAgaGFzaGVyOiBNRDUsXG5cdCAgICAgICAgICAgIGl0ZXJhdGlvbnM6IDFcblx0ICAgICAgICB9KSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhlIGRlcml2YXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBrZGYgPSBDcnlwdG9KUy5hbGdvLkV2cEtERi5jcmVhdGUoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uRXZwS0RGLmNyZWF0ZSh7IGtleVNpemU6IDggfSk7XG5cdCAgICAgICAgICogICAgIHZhciBrZGYgPSBDcnlwdG9KUy5hbGdvLkV2cEtERi5jcmVhdGUoeyBrZXlTaXplOiA4LCBpdGVyYXRpb25zOiAxMDAwIH0pO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjZmcpIHtcblx0ICAgICAgICAgICAgdGhpcy5jZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRGVyaXZlcyBhIGtleSBmcm9tIGEgcGFzc3dvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgQSBzYWx0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGVyaXZlZCBrZXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBrZXkgPSBrZGYuY29tcHV0ZShwYXNzd29yZCwgc2FsdCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY29tcHV0ZTogZnVuY3Rpb24gKHBhc3N3b3JkLCBzYWx0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBjZmcgPSB0aGlzLmNmZztcblxuXHQgICAgICAgICAgICAvLyBJbml0IGhhc2hlclxuXHQgICAgICAgICAgICB2YXIgaGFzaGVyID0gY2ZnLmhhc2hlci5jcmVhdGUoKTtcblxuXHQgICAgICAgICAgICAvLyBJbml0aWFsIHZhbHVlc1xuXHQgICAgICAgICAgICB2YXIgZGVyaXZlZEtleSA9IFdvcmRBcnJheS5jcmVhdGUoKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRlcml2ZWRLZXlXb3JkcyA9IGRlcml2ZWRLZXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBrZXlTaXplID0gY2ZnLmtleVNpemU7XG5cdCAgICAgICAgICAgIHZhciBpdGVyYXRpb25zID0gY2ZnLml0ZXJhdGlvbnM7XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUga2V5XG5cdCAgICAgICAgICAgIHdoaWxlIChkZXJpdmVkS2V5V29yZHMubGVuZ3RoIDwga2V5U2l6ZSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKGJsb2NrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaGFzaGVyLnVwZGF0ZShibG9jayk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB2YXIgYmxvY2sgPSBoYXNoZXIudXBkYXRlKHBhc3N3b3JkKS5maW5hbGl6ZShzYWx0KTtcblx0ICAgICAgICAgICAgICAgIGhhc2hlci5yZXNldCgpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBJdGVyYXRpb25zXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGl0ZXJhdGlvbnM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGJsb2NrID0gaGFzaGVyLmZpbmFsaXplKGJsb2NrKTtcblx0ICAgICAgICAgICAgICAgICAgICBoYXNoZXIucmVzZXQoKTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgZGVyaXZlZEtleS5jb25jYXQoYmxvY2spO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGRlcml2ZWRLZXkuc2lnQnl0ZXMgPSBrZXlTaXplICogNDtcblxuXHQgICAgICAgICAgICByZXR1cm4gZGVyaXZlZEtleTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBEZXJpdmVzIGEga2V5IGZyb20gYSBwYXNzd29yZC5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gc2FsdCBBIHNhbHQuXG5cdCAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgY29tcHV0YXRpb24uXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGVyaXZlZCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBrZXkgPSBDcnlwdG9KUy5FdnBLREYocGFzc3dvcmQsIHNhbHQpO1xuXHQgICAgICogICAgIHZhciBrZXkgPSBDcnlwdG9KUy5FdnBLREYocGFzc3dvcmQsIHNhbHQsIHsga2V5U2l6ZTogOCB9KTtcblx0ICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuRXZwS0RGKHBhc3N3b3JkLCBzYWx0LCB7IGtleVNpemU6IDgsIGl0ZXJhdGlvbnM6IDEwMDAgfSk7XG5cdCAgICAgKi9cblx0ICAgIEMuRXZwS0RGID0gZnVuY3Rpb24gKHBhc3N3b3JkLCBzYWx0LCBjZmcpIHtcblx0ICAgICAgICByZXR1cm4gRXZwS0RGLmNyZWF0ZShjZmcpLmNvbXB1dGUocGFzc3dvcmQsIHNhbHQpO1xuXHQgICAgfTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5FdnBLREY7XG5cbn0pKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL2RsL34vY3J5cHRvLWpzL2V2cGtkZi5qc1xuICoqIG1vZHVsZSBpZCA9IDU2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKlxuXHQgKiBDaXBoZXIgY29yZSBjb21wb25lbnRzLlxuXHQgKi9cblx0Q3J5cHRvSlMubGliLkNpcGhlciB8fCAoZnVuY3Rpb24gKHVuZGVmaW5lZCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQmFzZSA9IENfbGliLkJhc2U7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0gPSBDX2xpYi5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtO1xuXHQgICAgdmFyIENfZW5jID0gQy5lbmM7XG5cdCAgICB2YXIgVXRmOCA9IENfZW5jLlV0Zjg7XG5cdCAgICB2YXIgQmFzZTY0ID0gQ19lbmMuQmFzZTY0O1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblx0ICAgIHZhciBFdnBLREYgPSBDX2FsZ28uRXZwS0RGO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGJhc2UgY2lwaGVyIHRlbXBsYXRlLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBrZXlTaXplIFRoaXMgY2lwaGVyJ3Mga2V5IHNpemUuIERlZmF1bHQ6IDQgKDEyOCBiaXRzKVxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGl2U2l6ZSBUaGlzIGNpcGhlcidzIElWIHNpemUuIERlZmF1bHQ6IDQgKDEyOCBiaXRzKVxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IF9FTkNfWEZPUk1fTU9ERSBBIGNvbnN0YW50IHJlcHJlc2VudGluZyBlbmNyeXB0aW9uIG1vZGUuXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gX0RFQ19YRk9STV9NT0RFIEEgY29uc3RhbnQgcmVwcmVzZW50aW5nIGRlY3J5cHRpb24gbW9kZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENpcGhlciA9IENfbGliLkNpcGhlciA9IEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0gaXYgVGhlIElWIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBCYXNlLmV4dGVuZCgpLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyB0aGlzIGNpcGhlciBpbiBlbmNyeXB0aW9uIG1vZGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlcn0gQSBjaXBoZXIgaW5zdGFuY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXIgPSBDcnlwdG9KUy5hbGdvLkFFUy5jcmVhdGVFbmNyeXB0b3Ioa2V5V29yZEFycmF5LCB7IGl2OiBpdldvcmRBcnJheSB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjcmVhdGVFbmNyeXB0b3I6IGZ1bmN0aW9uIChrZXksIGNmZykge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGUodGhpcy5fRU5DX1hGT1JNX01PREUsIGtleSwgY2ZnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyB0aGlzIGNpcGhlciBpbiBkZWNyeXB0aW9uIG1vZGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlcn0gQSBjaXBoZXIgaW5zdGFuY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXIgPSBDcnlwdG9KUy5hbGdvLkFFUy5jcmVhdGVEZWNyeXB0b3Ioa2V5V29yZEFycmF5LCB7IGl2OiBpdldvcmRBcnJheSB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjcmVhdGVEZWNyeXB0b3I6IGZ1bmN0aW9uIChrZXksIGNmZykge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGUodGhpcy5fREVDX1hGT1JNX01PREUsIGtleSwgY2ZnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGNpcGhlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4Zm9ybU1vZGUgRWl0aGVyIHRoZSBlbmNyeXB0aW9uIG9yIGRlY3J5cHRpb24gdHJhbnNvcm1hdGlvbiBtb2RlIGNvbnN0YW50LlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBrZXkgVGhlIGtleS5cblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVyID0gQ3J5cHRvSlMuYWxnby5BRVMuY3JlYXRlKENyeXB0b0pTLmFsZ28uQUVTLl9FTkNfWEZPUk1fTU9ERSwga2V5V29yZEFycmF5LCB7IGl2OiBpdldvcmRBcnJheSB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoeGZvcm1Nb2RlLCBrZXksIGNmZykge1xuXHQgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcblx0ICAgICAgICAgICAgdGhpcy5jZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTtcblxuXHQgICAgICAgICAgICAvLyBTdG9yZSB0cmFuc2Zvcm0gbW9kZSBhbmQga2V5XG5cdCAgICAgICAgICAgIHRoaXMuX3hmb3JtTW9kZSA9IHhmb3JtTW9kZTtcblx0ICAgICAgICAgICAgdGhpcy5fa2V5ID0ga2V5O1xuXG5cdCAgICAgICAgICAgIC8vIFNldCBpbml0aWFsIHZhbHVlc1xuXHQgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlc2V0cyB0aGlzIGNpcGhlciB0byBpdHMgaW5pdGlhbCBzdGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgY2lwaGVyLnJlc2V0KCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gUmVzZXQgZGF0YSBidWZmZXJcblx0ICAgICAgICAgICAgQnVmZmVyZWRCbG9ja0FsZ29yaXRobS5yZXNldC5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtY2lwaGVyIGxvZ2ljXG5cdCAgICAgICAgICAgIHRoaXMuX2RvUmVzZXQoKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQWRkcyBkYXRhIHRvIGJlIGVuY3J5cHRlZCBvciBkZWNyeXB0ZWQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGRhdGFVcGRhdGUgVGhlIGRhdGEgdG8gZW5jcnlwdCBvciBkZWNyeXB0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGF0YSBhZnRlciBwcm9jZXNzaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLnByb2Nlc3MoJ2RhdGEnKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGVuY3J5cHRlZCA9IGNpcGhlci5wcm9jZXNzKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcHJvY2VzczogZnVuY3Rpb24gKGRhdGFVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gQXBwZW5kXG5cdCAgICAgICAgICAgIHRoaXMuX2FwcGVuZChkYXRhVXBkYXRlKTtcblxuXHQgICAgICAgICAgICAvLyBQcm9jZXNzIGF2YWlsYWJsZSBibG9ja3Ncblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3MoKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRmluYWxpemVzIHRoZSBlbmNyeXB0aW9uIG9yIGRlY3J5cHRpb24gcHJvY2Vzcy5cblx0ICAgICAgICAgKiBOb3RlIHRoYXQgdGhlIGZpbmFsaXplIG9wZXJhdGlvbiBpcyBlZmZlY3RpdmVseSBhIGRlc3RydWN0aXZlLCByZWFkLW9uY2Ugb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBkYXRhVXBkYXRlIFRoZSBmaW5hbCBkYXRhIHRvIGVuY3J5cHQgb3IgZGVjcnlwdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRhdGEgYWZ0ZXIgZmluYWwgcHJvY2Vzc2luZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGVuY3J5cHRlZCA9IGNpcGhlci5maW5hbGl6ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLmZpbmFsaXplKCdkYXRhJyk7XG5cdCAgICAgICAgICogICAgIHZhciBlbmNyeXB0ZWQgPSBjaXBoZXIuZmluYWxpemUod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBmaW5hbGl6ZTogZnVuY3Rpb24gKGRhdGFVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gRmluYWwgZGF0YSB1cGRhdGVcblx0ICAgICAgICAgICAgaWYgKGRhdGFVcGRhdGUpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2FwcGVuZChkYXRhVXBkYXRlKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtY2lwaGVyIGxvZ2ljXG5cdCAgICAgICAgICAgIHZhciBmaW5hbFByb2Nlc3NlZERhdGEgPSB0aGlzLl9kb0ZpbmFsaXplKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGZpbmFsUHJvY2Vzc2VkRGF0YTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAga2V5U2l6ZTogMTI4LzMyLFxuXG5cdCAgICAgICAgaXZTaXplOiAxMjgvMzIsXG5cblx0ICAgICAgICBfRU5DX1hGT1JNX01PREU6IDEsXG5cblx0ICAgICAgICBfREVDX1hGT1JNX01PREU6IDIsXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIHNob3J0Y3V0IGZ1bmN0aW9ucyB0byBhIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgdG8gY3JlYXRlIGEgaGVscGVyIGZvci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gQW4gb2JqZWN0IHdpdGggZW5jcnlwdCBhbmQgZGVjcnlwdCBzaG9ydGN1dCBmdW5jdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBBRVMgPSBDcnlwdG9KUy5saWIuQ2lwaGVyLl9jcmVhdGVIZWxwZXIoQ3J5cHRvSlMuYWxnby5BRVMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9jcmVhdGVIZWxwZXI6IChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIHNlbGVjdENpcGhlclN0cmF0ZWd5KGtleSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGFzc3dvcmRCYXNlZENpcGhlcjtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNlcmlhbGl6YWJsZUNpcGhlcjtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2lwaGVyKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAgICAgICAgIGVuY3J5cHQ6IGZ1bmN0aW9uIChtZXNzYWdlLCBrZXksIGNmZykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0Q2lwaGVyU3RyYXRlZ3koa2V5KS5lbmNyeXB0KGNpcGhlciwgbWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgICAgICAgICBkZWNyeXB0OiBmdW5jdGlvbiAoY2lwaGVydGV4dCwga2V5LCBjZmcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdENpcGhlclN0cmF0ZWd5KGtleSkuZGVjcnlwdChjaXBoZXIsIGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH0oKSlcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGJhc2Ugc3RyZWFtIGNpcGhlciB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYmxvY2tTaXplIFRoZSBudW1iZXIgb2YgMzItYml0IHdvcmRzIHRoaXMgY2lwaGVyIG9wZXJhdGVzIG9uLiBEZWZhdWx0OiAxICgzMiBiaXRzKVxuXHQgICAgICovXG5cdCAgICB2YXIgU3RyZWFtQ2lwaGVyID0gQ19saWIuU3RyZWFtQ2lwaGVyID0gQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gUHJvY2VzcyBwYXJ0aWFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB2YXIgZmluYWxQcm9jZXNzZWRCbG9ja3MgPSB0aGlzLl9wcm9jZXNzKCEhJ2ZsdXNoJyk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGZpbmFsUHJvY2Vzc2VkQmxvY2tzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBibG9ja1NpemU6IDFcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIE1vZGUgbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ19tb2RlID0gQy5tb2RlID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWJzdHJhY3QgYmFzZSBibG9jayBjaXBoZXIgbW9kZSB0ZW1wbGF0ZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIEJsb2NrQ2lwaGVyTW9kZSA9IENfbGliLkJsb2NrQ2lwaGVyTW9kZSA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIHRoaXMgbW9kZSBmb3IgZW5jcnlwdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgQSBibG9jayBjaXBoZXIgaW5zdGFuY2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtBcnJheX0gaXYgVGhlIElWIHdvcmRzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgbW9kZSA9IENyeXB0b0pTLm1vZGUuQ0JDLmNyZWF0ZUVuY3J5cHRvcihjaXBoZXIsIGl2LndvcmRzKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjcmVhdGVFbmNyeXB0b3I6IGZ1bmN0aW9uIChjaXBoZXIsIGl2KSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLkVuY3J5cHRvci5jcmVhdGUoY2lwaGVyLCBpdik7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgdGhpcyBtb2RlIGZvciBkZWNyeXB0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBBIGJsb2NrIGNpcGhlciBpbnN0YW5jZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBpdiBUaGUgSVYgd29yZHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBtb2RlID0gQ3J5cHRvSlMubW9kZS5DQkMuY3JlYXRlRGVjcnlwdG9yKGNpcGhlciwgaXYud29yZHMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNyZWF0ZURlY3J5cHRvcjogZnVuY3Rpb24gKGNpcGhlciwgaXYpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuRGVjcnlwdG9yLmNyZWF0ZShjaXBoZXIsIGl2KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIG1vZGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIEEgYmxvY2sgY2lwaGVyIGluc3RhbmNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGl2IFRoZSBJViB3b3Jkcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIG1vZGUgPSBDcnlwdG9KUy5tb2RlLkNCQy5FbmNyeXB0b3IuY3JlYXRlKGNpcGhlciwgaXYud29yZHMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjaXBoZXIsIGl2KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2NpcGhlciA9IGNpcGhlcjtcblx0ICAgICAgICAgICAgdGhpcy5faXYgPSBpdjtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBDaXBoZXIgQmxvY2sgQ2hhaW5pbmcgbW9kZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENCQyA9IENfbW9kZS5DQkMgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEFic3RyYWN0IGJhc2UgQ0JDIG1vZGUuXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdmFyIENCQyA9IEJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTtcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENCQyBlbmNyeXB0b3IuXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgQ0JDLkVuY3J5cHRvciA9IENCQy5leHRlbmQoe1xuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogUHJvY2Vzc2VzIHRoZSBkYXRhIGJsb2NrIGF0IG9mZnNldC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgVGhlIGRhdGEgd29yZHMgdG8gb3BlcmF0ZSBvbi5cblx0ICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCBUaGUgb2Zmc2V0IHdoZXJlIHRoZSBibG9jayBzdGFydHMuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICBtb2RlLnByb2Nlc3NCbG9jayhkYXRhLndvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyO1xuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFhPUiBhbmQgZW5jcnlwdFxuXHQgICAgICAgICAgICAgICAgeG9yQmxvY2suY2FsbCh0aGlzLCB3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUpO1xuXHQgICAgICAgICAgICAgICAgY2lwaGVyLmVuY3J5cHRCbG9jayh3b3Jkcywgb2Zmc2V0KTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtZW1iZXIgdGhpcyBibG9jayB0byB1c2Ugd2l0aCBuZXh0IGJsb2NrXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9wcmV2QmxvY2sgPSB3b3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGJsb2NrU2l6ZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENCQyBkZWNyeXB0b3IuXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgQ0JDLkRlY3J5cHRvciA9IENCQy5leHRlbmQoe1xuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogUHJvY2Vzc2VzIHRoZSBkYXRhIGJsb2NrIGF0IG9mZnNldC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgVGhlIGRhdGEgd29yZHMgdG8gb3BlcmF0ZSBvbi5cblx0ICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCBUaGUgb2Zmc2V0IHdoZXJlIHRoZSBibG9jayBzdGFydHMuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICBtb2RlLnByb2Nlc3NCbG9jayhkYXRhLndvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyO1xuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbWVtYmVyIHRoaXMgYmxvY2sgdG8gdXNlIHdpdGggbmV4dCBibG9ja1xuXHQgICAgICAgICAgICAgICAgdmFyIHRoaXNCbG9jayA9IHdvcmRzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgYmxvY2tTaXplKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gRGVjcnlwdCBhbmQgWE9SXG5cdCAgICAgICAgICAgICAgICBjaXBoZXIuZGVjcnlwdEJsb2NrKHdvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICAgICAgeG9yQmxvY2suY2FsbCh0aGlzLCB3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBUaGlzIGJsb2NrIGJlY29tZXMgdGhlIHByZXZpb3VzIGJsb2NrXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9wcmV2QmxvY2sgPSB0aGlzQmxvY2s7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgIGZ1bmN0aW9uIHhvckJsb2NrKHdvcmRzLCBvZmZzZXQsIGJsb2NrU2l6ZSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgaXYgPSB0aGlzLl9pdjtcblxuXHQgICAgICAgICAgICAvLyBDaG9vc2UgbWl4aW5nIGJsb2NrXG5cdCAgICAgICAgICAgIGlmIChpdikge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrID0gaXY7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBJViBmb3Igc3Vic2VxdWVudCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrID0gdGhpcy5fcHJldkJsb2NrO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gWE9SIGJsb2Nrc1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBibG9ja1tpXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBDQkM7XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFBhZGRpbmcgbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ19wYWQgPSBDLnBhZCA9IHt9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIFBLQ1MgIzUvNyBwYWRkaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgUGtjczcgPSBDX3BhZC5Qa2NzNyA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBQYWRzIGRhdGEgdXNpbmcgdGhlIGFsZ29yaXRobSBkZWZpbmVkIGluIFBLQ1MgIzUvNy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBkYXRhIFRoZSBkYXRhIHRvIHBhZC5cblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gYmxvY2tTaXplIFRoZSBtdWx0aXBsZSB0aGF0IHRoZSBkYXRhIHNob3VsZCBiZSBwYWRkZWQgdG8uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIENyeXB0b0pTLnBhZC5Qa2NzNy5wYWQod29yZEFycmF5LCA0KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYWQ6IGZ1bmN0aW9uIChkYXRhLCBibG9ja1NpemUpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNDtcblxuXHQgICAgICAgICAgICAvLyBDb3VudCBwYWRkaW5nIGJ5dGVzXG5cdCAgICAgICAgICAgIHZhciBuUGFkZGluZ0J5dGVzID0gYmxvY2tTaXplQnl0ZXMgLSBkYXRhLnNpZ0J5dGVzICUgYmxvY2tTaXplQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ3JlYXRlIHBhZGRpbmcgd29yZFxuXHQgICAgICAgICAgICB2YXIgcGFkZGluZ1dvcmQgPSAoblBhZGRpbmdCeXRlcyA8PCAyNCkgfCAoblBhZGRpbmdCeXRlcyA8PCAxNikgfCAoblBhZGRpbmdCeXRlcyA8PCA4KSB8IG5QYWRkaW5nQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ3JlYXRlIHBhZGRpbmdcblx0ICAgICAgICAgICAgdmFyIHBhZGRpbmdXb3JkcyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5QYWRkaW5nQnl0ZXM7IGkgKz0gNCkge1xuXHQgICAgICAgICAgICAgICAgcGFkZGluZ1dvcmRzLnB1c2gocGFkZGluZ1dvcmQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nID0gV29yZEFycmF5LmNyZWF0ZShwYWRkaW5nV29yZHMsIG5QYWRkaW5nQnl0ZXMpO1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGEuY29uY2F0KHBhZGRpbmcpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBVbnBhZHMgZGF0YSB0aGF0IGhhZCBiZWVuIHBhZGRlZCB1c2luZyB0aGUgYWxnb3JpdGhtIGRlZmluZWQgaW4gUEtDUyAjNS83LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGRhdGEgVGhlIGRhdGEgdG8gdW5wYWQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIENyeXB0b0pTLnBhZC5Qa2NzNy51bnBhZCh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHVucGFkOiBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgICAgICAvLyBHZXQgbnVtYmVyIG9mIHBhZGRpbmcgYnl0ZXMgZnJvbSBsYXN0IGJ5dGVcblx0ICAgICAgICAgICAgdmFyIG5QYWRkaW5nQnl0ZXMgPSBkYXRhLndvcmRzWyhkYXRhLnNpZ0J5dGVzIC0gMSkgPj4+IDJdICYgMHhmZjtcblxuXHQgICAgICAgICAgICAvLyBSZW1vdmUgcGFkZGluZ1xuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzIC09IG5QYWRkaW5nQnl0ZXM7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBYnN0cmFjdCBiYXNlIGJsb2NrIGNpcGhlciB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYmxvY2tTaXplIFRoZSBudW1iZXIgb2YgMzItYml0IHdvcmRzIHRoaXMgY2lwaGVyIG9wZXJhdGVzIG9uLiBEZWZhdWx0OiA0ICgxMjggYml0cylcblx0ICAgICAqL1xuXHQgICAgdmFyIEJsb2NrQ2lwaGVyID0gQ19saWIuQmxvY2tDaXBoZXIgPSBDaXBoZXIuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge01vZGV9IG1vZGUgVGhlIGJsb2NrIG1vZGUgdG8gdXNlLiBEZWZhdWx0OiBDQkNcblx0ICAgICAgICAgKiBAcHJvcGVydHkge1BhZGRpbmd9IHBhZGRpbmcgVGhlIHBhZGRpbmcgc3RyYXRlZ3kgdG8gdXNlLiBEZWZhdWx0OiBQa2NzN1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogQ2lwaGVyLmNmZy5leHRlbmQoe1xuXHQgICAgICAgICAgICBtb2RlOiBDQkMsXG5cdCAgICAgICAgICAgIHBhZGRpbmc6IFBrY3M3XG5cdCAgICAgICAgfSksXG5cblx0ICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBSZXNldCBjaXBoZXJcblx0ICAgICAgICAgICAgQ2lwaGVyLnJlc2V0LmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBjZmcgPSB0aGlzLmNmZztcblx0ICAgICAgICAgICAgdmFyIGl2ID0gY2ZnLml2O1xuXHQgICAgICAgICAgICB2YXIgbW9kZSA9IGNmZy5tb2RlO1xuXG5cdCAgICAgICAgICAgIC8vIFJlc2V0IGJsb2NrIG1vZGVcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX3hmb3JtTW9kZSA9PSB0aGlzLl9FTkNfWEZPUk1fTU9ERSkge1xuXHQgICAgICAgICAgICAgICAgdmFyIG1vZGVDcmVhdG9yID0gbW9kZS5jcmVhdGVFbmNyeXB0b3I7XG5cdCAgICAgICAgICAgIH0gZWxzZSAvKiBpZiAodGhpcy5feGZvcm1Nb2RlID09IHRoaXMuX0RFQ19YRk9STV9NT0RFKSAqLyB7XG5cdCAgICAgICAgICAgICAgICB2YXIgbW9kZUNyZWF0b3IgPSBtb2RlLmNyZWF0ZURlY3J5cHRvcjtcblxuXHQgICAgICAgICAgICAgICAgLy8gS2VlcCBhdCBsZWFzdCBvbmUgYmxvY2sgaW4gdGhlIGJ1ZmZlciBmb3IgdW5wYWRkaW5nXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9taW5CdWZmZXJTaXplID0gMTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLl9tb2RlID0gbW9kZUNyZWF0b3IuY2FsbChtb2RlLCB0aGlzLCBpdiAmJiBpdi53b3Jkcyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fbW9kZS5wcm9jZXNzQmxvY2sod29yZHMsIG9mZnNldCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nID0gdGhpcy5jZmcucGFkZGluZztcblxuXHQgICAgICAgICAgICAvLyBGaW5hbGl6ZVxuXHQgICAgICAgICAgICBpZiAodGhpcy5feGZvcm1Nb2RlID09IHRoaXMuX0VOQ19YRk9STV9NT0RFKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBQYWQgZGF0YVxuXHQgICAgICAgICAgICAgICAgcGFkZGluZy5wYWQodGhpcy5fZGF0YSwgdGhpcy5ibG9ja1NpemUpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBQcm9jZXNzIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICAgICAgdmFyIGZpbmFsUHJvY2Vzc2VkQmxvY2tzID0gdGhpcy5fcHJvY2VzcyghISdmbHVzaCcpO1xuXHQgICAgICAgICAgICB9IGVsc2UgLyogaWYgKHRoaXMuX3hmb3JtTW9kZSA9PSB0aGlzLl9ERUNfWEZPUk1fTU9ERSkgKi8ge1xuXHQgICAgICAgICAgICAgICAgLy8gUHJvY2VzcyBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIHZhciBmaW5hbFByb2Nlc3NlZEJsb2NrcyA9IHRoaXMuX3Byb2Nlc3MoISEnZmx1c2gnKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gVW5wYWQgZGF0YVxuXHQgICAgICAgICAgICAgICAgcGFkZGluZy51bnBhZChmaW5hbFByb2Nlc3NlZEJsb2Nrcyk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gZmluYWxQcm9jZXNzZWRCbG9ja3M7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGJsb2NrU2l6ZTogMTI4LzMyXG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBIGNvbGxlY3Rpb24gb2YgY2lwaGVyIHBhcmFtZXRlcnMuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtXb3JkQXJyYXl9IGNpcGhlcnRleHQgVGhlIHJhdyBjaXBoZXJ0ZXh0LlxuXHQgICAgICogQHByb3BlcnR5IHtXb3JkQXJyYXl9IGtleSBUaGUga2V5IHRvIHRoaXMgY2lwaGVydGV4dC5cblx0ICAgICAqIEBwcm9wZXJ0eSB7V29yZEFycmF5fSBpdiBUaGUgSVYgdXNlZCBpbiB0aGUgY2lwaGVyaW5nIG9wZXJhdGlvbi5cblx0ICAgICAqIEBwcm9wZXJ0eSB7V29yZEFycmF5fSBzYWx0IFRoZSBzYWx0IHVzZWQgd2l0aCBhIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uLlxuXHQgICAgICogQHByb3BlcnR5IHtDaXBoZXJ9IGFsZ29yaXRobSBUaGUgY2lwaGVyIGFsZ29yaXRobS5cblx0ICAgICAqIEBwcm9wZXJ0eSB7TW9kZX0gbW9kZSBUaGUgYmxvY2sgbW9kZSB1c2VkIGluIHRoZSBjaXBoZXJpbmcgb3BlcmF0aW9uLlxuXHQgICAgICogQHByb3BlcnR5IHtQYWRkaW5nfSBwYWRkaW5nIFRoZSBwYWRkaW5nIHNjaGVtZSB1c2VkIGluIHRoZSBjaXBoZXJpbmcgb3BlcmF0aW9uLlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGJsb2NrU2l6ZSBUaGUgYmxvY2sgc2l6ZSBvZiB0aGUgY2lwaGVyLlxuXHQgICAgICogQHByb3BlcnR5IHtGb3JtYXR9IGZvcm1hdHRlciBUaGUgZGVmYXVsdCBmb3JtYXR0aW5nIHN0cmF0ZWd5IHRvIGNvbnZlcnQgdGhpcyBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhIHN0cmluZy5cblx0ICAgICAqL1xuXHQgICAgdmFyIENpcGhlclBhcmFtcyA9IENfbGliLkNpcGhlclBhcmFtcyA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2lwaGVyUGFyYW1zIEFuIG9iamVjdCB3aXRoIGFueSBvZiB0aGUgcG9zc2libGUgY2lwaGVyIHBhcmFtZXRlcnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJQYXJhbXMgPSBDcnlwdG9KUy5saWIuQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7XG5cdCAgICAgICAgICogICAgICAgICBjaXBoZXJ0ZXh0OiBjaXBoZXJ0ZXh0V29yZEFycmF5LFxuXHQgICAgICAgICAqICAgICAgICAga2V5OiBrZXlXb3JkQXJyYXksXG5cdCAgICAgICAgICogICAgICAgICBpdjogaXZXb3JkQXJyYXksXG5cdCAgICAgICAgICogICAgICAgICBzYWx0OiBzYWx0V29yZEFycmF5LFxuXHQgICAgICAgICAqICAgICAgICAgYWxnb3JpdGhtOiBDcnlwdG9KUy5hbGdvLkFFUyxcblx0ICAgICAgICAgKiAgICAgICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuQ0JDLFxuXHQgICAgICAgICAqICAgICAgICAgcGFkZGluZzogQ3J5cHRvSlMucGFkLlBLQ1M3LFxuXHQgICAgICAgICAqICAgICAgICAgYmxvY2tTaXplOiA0LFxuXHQgICAgICAgICAqICAgICAgICAgZm9ybWF0dGVyOiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTFxuXHQgICAgICAgICAqICAgICB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2lwaGVyUGFyYW1zKSB7XG5cdCAgICAgICAgICAgIHRoaXMubWl4SW4oY2lwaGVyUGFyYW1zKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgdGhpcyBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Rm9ybWF0fSBmb3JtYXR0ZXIgKE9wdGlvbmFsKSBUaGUgZm9ybWF0dGluZyBzdHJhdGVneSB0byB1c2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmdpZmllZCBjaXBoZXIgcGFyYW1zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHRocm93cyBFcnJvciBJZiBuZWl0aGVyIHRoZSBmb3JtYXR0ZXIgbm9yIHRoZSBkZWZhdWx0IGZvcm1hdHRlciBpcyBzZXQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSBjaXBoZXJQYXJhbXMgKyAnJztcblx0ICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IGNpcGhlclBhcmFtcy50b1N0cmluZygpO1xuXHQgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gY2lwaGVyUGFyYW1zLnRvU3RyaW5nKENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gKGZvcm1hdHRlcikge1xuXHQgICAgICAgICAgICByZXR1cm4gKGZvcm1hdHRlciB8fCB0aGlzLmZvcm1hdHRlcikuc3RyaW5naWZ5KHRoaXMpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEZvcm1hdCBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2Zvcm1hdCA9IEMuZm9ybWF0ID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogT3BlblNTTCBmb3JtYXR0aW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgT3BlblNTTEZvcm1hdHRlciA9IENfZm9ybWF0Lk9wZW5TU0wgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhbiBPcGVuU1NMLWNvbXBhdGlibGUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN9IGNpcGhlclBhcmFtcyBUaGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBPcGVuU1NMLWNvbXBhdGlibGUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgb3BlblNTTFN0cmluZyA9IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMLnN0cmluZ2lmeShjaXBoZXJQYXJhbXMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKGNpcGhlclBhcmFtcykge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBjaXBoZXJQYXJhbXMuY2lwaGVydGV4dDtcblx0ICAgICAgICAgICAgdmFyIHNhbHQgPSBjaXBoZXJQYXJhbXMuc2FsdDtcblxuXHQgICAgICAgICAgICAvLyBGb3JtYXRcblx0ICAgICAgICAgICAgaWYgKHNhbHQpIHtcblx0ICAgICAgICAgICAgICAgIHZhciB3b3JkQXJyYXkgPSBXb3JkQXJyYXkuY3JlYXRlKFsweDUzNjE2Yzc0LCAweDY1NjQ1ZjVmXSkuY29uY2F0KHNhbHQpLmNvbmNhdChjaXBoZXJ0ZXh0KTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHZhciB3b3JkQXJyYXkgPSBjaXBoZXJ0ZXh0O1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIHdvcmRBcnJheS50b1N0cmluZyhCYXNlNjQpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhbiBPcGVuU1NMLWNvbXBhdGlibGUgc3RyaW5nIHRvIGEgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3BlblNTTFN0ciBUaGUgT3BlblNTTC1jb21wYXRpYmxlIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gVGhlIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVyUGFyYW1zID0gQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wucGFyc2Uob3BlblNTTFN0cmluZyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIChvcGVuU1NMU3RyKSB7XG5cdCAgICAgICAgICAgIC8vIFBhcnNlIGJhc2U2NFxuXHQgICAgICAgICAgICB2YXIgY2lwaGVydGV4dCA9IEJhc2U2NC5wYXJzZShvcGVuU1NMU3RyKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgY2lwaGVydGV4dFdvcmRzID0gY2lwaGVydGV4dC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBUZXN0IGZvciBzYWx0XG5cdCAgICAgICAgICAgIGlmIChjaXBoZXJ0ZXh0V29yZHNbMF0gPT0gMHg1MzYxNmM3NCAmJiBjaXBoZXJ0ZXh0V29yZHNbMV0gPT0gMHg2NTY0NWY1Zikge1xuXHQgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBzYWx0XG5cdCAgICAgICAgICAgICAgICB2YXIgc2FsdCA9IFdvcmRBcnJheS5jcmVhdGUoY2lwaGVydGV4dFdvcmRzLnNsaWNlKDIsIDQpKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHNhbHQgZnJvbSBjaXBoZXJ0ZXh0XG5cdCAgICAgICAgICAgICAgICBjaXBoZXJ0ZXh0V29yZHMuc3BsaWNlKDAsIDQpO1xuXHQgICAgICAgICAgICAgICAgY2lwaGVydGV4dC5zaWdCeXRlcyAtPSAxNjtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBDaXBoZXJQYXJhbXMuY3JlYXRlKHsgY2lwaGVydGV4dDogY2lwaGVydGV4dCwgc2FsdDogc2FsdCB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEEgY2lwaGVyIHdyYXBwZXIgdGhhdCByZXR1cm5zIGNpcGhlcnRleHQgYXMgYSBzZXJpYWxpemFibGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgKi9cblx0ICAgIHZhciBTZXJpYWxpemFibGVDaXBoZXIgPSBDX2xpYi5TZXJpYWxpemFibGVDaXBoZXIgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtGb3JtYXR0ZXJ9IGZvcm1hdCBUaGUgZm9ybWF0dGluZyBzdHJhdGVneSB0byBjb252ZXJ0IGNpcGhlciBwYXJhbSBvYmplY3RzIHRvIGFuZCBmcm9tIGEgc3RyaW5nLiBEZWZhdWx0OiBPcGVuU1NMXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgICAgIGZvcm1hdDogT3BlblNTTEZvcm1hdHRlclxuXHQgICAgICAgIH0pLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRW5jcnlwdHMgYSBtZXNzYWdlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIGFsZ29yaXRobSB0byB1c2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGVuY3J5cHQuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IEEgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlNlcmlhbGl6YWJsZUNpcGhlci5lbmNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBtZXNzYWdlLCBrZXkpO1xuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwga2V5LCB7IGl2OiBpdiB9KTtcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuU2VyaWFsaXphYmxlQ2lwaGVyLmVuY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIG1lc3NhZ2UsIGtleSwgeyBpdjogaXYsIGZvcm1hdDogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZW5jcnlwdDogZnVuY3Rpb24gKGNpcGhlciwgbWVzc2FnZSwga2V5LCBjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIGNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXG5cdCAgICAgICAgICAgIC8vIEVuY3J5cHRcblx0ICAgICAgICAgICAgdmFyIGVuY3J5cHRvciA9IGNpcGhlci5jcmVhdGVFbmNyeXB0b3Ioa2V5LCBjZmcpO1xuXHQgICAgICAgICAgICB2YXIgY2lwaGVydGV4dCA9IGVuY3J5cHRvci5maW5hbGl6ZShtZXNzYWdlKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgY2lwaGVyQ2ZnID0gZW5jcnlwdG9yLmNmZztcblxuXHQgICAgICAgICAgICAvLyBDcmVhdGUgYW5kIHJldHVybiBzZXJpYWxpemFibGUgY2lwaGVyIHBhcmFtc1xuXHQgICAgICAgICAgICByZXR1cm4gQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7XG5cdCAgICAgICAgICAgICAgICBjaXBoZXJ0ZXh0OiBjaXBoZXJ0ZXh0LFxuXHQgICAgICAgICAgICAgICAga2V5OiBrZXksXG5cdCAgICAgICAgICAgICAgICBpdjogY2lwaGVyQ2ZnLml2LFxuXHQgICAgICAgICAgICAgICAgYWxnb3JpdGhtOiBjaXBoZXIsXG5cdCAgICAgICAgICAgICAgICBtb2RlOiBjaXBoZXJDZmcubW9kZSxcblx0ICAgICAgICAgICAgICAgIHBhZGRpbmc6IGNpcGhlckNmZy5wYWRkaW5nLFxuXHQgICAgICAgICAgICAgICAgYmxvY2tTaXplOiBjaXBoZXIuYmxvY2tTaXplLFxuXHQgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBjZmcuZm9ybWF0XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBEZWNyeXB0cyBzZXJpYWxpemVkIGNpcGhlcnRleHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgYWxnb3JpdGhtIHRvIHVzZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlclBhcmFtc3xzdHJpbmd9IGNpcGhlcnRleHQgVGhlIGNpcGhlcnRleHQgdG8gZGVjcnlwdC5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHBsYWludGV4dC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgZm9ybWF0dGVkQ2lwaGVydGV4dCwga2V5LCB7IGl2OiBpdiwgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTtcblx0ICAgICAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgY2lwaGVydGV4dFBhcmFtcywga2V5LCB7IGl2OiBpdiwgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBkZWNyeXB0OiBmdW5jdGlvbiAoY2lwaGVyLCBjaXBoZXJ0ZXh0LCBrZXksIGNmZykge1xuXHQgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcblx0ICAgICAgICAgICAgY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydCBzdHJpbmcgdG8gQ2lwaGVyUGFyYW1zXG5cdCAgICAgICAgICAgIGNpcGhlcnRleHQgPSB0aGlzLl9wYXJzZShjaXBoZXJ0ZXh0LCBjZmcuZm9ybWF0KTtcblxuXHQgICAgICAgICAgICAvLyBEZWNyeXB0XG5cdCAgICAgICAgICAgIHZhciBwbGFpbnRleHQgPSBjaXBoZXIuY3JlYXRlRGVjcnlwdG9yKGtleSwgY2ZnKS5maW5hbGl6ZShjaXBoZXJ0ZXh0LmNpcGhlcnRleHQpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBwbGFpbnRleHQ7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIHNlcmlhbGl6ZWQgY2lwaGVydGV4dCB0byBDaXBoZXJQYXJhbXMsXG5cdCAgICAgICAgICogZWxzZSBhc3N1bWVkIENpcGhlclBhcmFtcyBhbHJlYWR5IGFuZCByZXR1cm5zIGNpcGhlcnRleHQgdW5jaGFuZ2VkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN8c3RyaW5nfSBjaXBoZXJ0ZXh0IFRoZSBjaXBoZXJ0ZXh0LlxuXHQgICAgICAgICAqIEBwYXJhbSB7Rm9ybWF0dGVyfSBmb3JtYXQgVGhlIGZvcm1hdHRpbmcgc3RyYXRlZ3kgdG8gdXNlIHRvIHBhcnNlIHNlcmlhbGl6ZWQgY2lwaGVydGV4dC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gVGhlIHVuc2VyaWFsaXplZCBjaXBoZXJ0ZXh0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuX3BhcnNlKGNpcGhlcnRleHRTdHJpbmdPclBhcmFtcywgZm9ybWF0KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfcGFyc2U6IGZ1bmN0aW9uIChjaXBoZXJ0ZXh0LCBmb3JtYXQpIHtcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBjaXBoZXJ0ZXh0ID09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0LnBhcnNlKGNpcGhlcnRleHQsIHRoaXMpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGNpcGhlcnRleHQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBLZXkgZGVyaXZhdGlvbiBmdW5jdGlvbiBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2tkZiA9IEMua2RmID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogT3BlblNTTCBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbi5cblx0ICAgICAqL1xuXHQgICAgdmFyIE9wZW5TU0xLZGYgPSBDX2tkZi5PcGVuU1NMID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIERlcml2ZXMgYSBrZXkgYW5kIElWIGZyb20gYSBwYXNzd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQgdG8gZGVyaXZlIGZyb20uXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGtleVNpemUgVGhlIHNpemUgaW4gd29yZHMgb2YgdGhlIGtleSB0byBnZW5lcmF0ZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gaXZTaXplIFRoZSBzaXplIGluIHdvcmRzIG9mIHRoZSBJViB0byBnZW5lcmF0ZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgKE9wdGlvbmFsKSBBIDY0LWJpdCBzYWx0IHRvIHVzZS4gSWYgb21pdHRlZCwgYSBzYWx0IHdpbGwgYmUgZ2VuZXJhdGVkIHJhbmRvbWx5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBBIGNpcGhlciBwYXJhbXMgb2JqZWN0IHdpdGggdGhlIGtleSwgSVYsIGFuZCBzYWx0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IENyeXB0b0pTLmtkZi5PcGVuU1NMLmV4ZWN1dGUoJ1Bhc3N3b3JkJywgMjU2LzMyLCAxMjgvMzIpO1xuXHQgICAgICAgICAqICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IENyeXB0b0pTLmtkZi5PcGVuU1NMLmV4ZWN1dGUoJ1Bhc3N3b3JkJywgMjU2LzMyLCAxMjgvMzIsICdzYWx0c2FsdCcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGV4ZWN1dGU6IGZ1bmN0aW9uIChwYXNzd29yZCwga2V5U2l6ZSwgaXZTaXplLCBzYWx0KSB7XG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIHJhbmRvbSBzYWx0XG5cdCAgICAgICAgICAgIGlmICghc2FsdCkge1xuXHQgICAgICAgICAgICAgICAgc2FsdCA9IFdvcmRBcnJheS5yYW5kb20oNjQvOCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBEZXJpdmUga2V5IGFuZCBJVlxuXHQgICAgICAgICAgICB2YXIga2V5ID0gRXZwS0RGLmNyZWF0ZSh7IGtleVNpemU6IGtleVNpemUgKyBpdlNpemUgfSkuY29tcHV0ZShwYXNzd29yZCwgc2FsdCk7XG5cblx0ICAgICAgICAgICAgLy8gU2VwYXJhdGUga2V5IGFuZCBJVlxuXHQgICAgICAgICAgICB2YXIgaXYgPSBXb3JkQXJyYXkuY3JlYXRlKGtleS53b3Jkcy5zbGljZShrZXlTaXplKSwgaXZTaXplICogNCk7XG5cdCAgICAgICAgICAgIGtleS5zaWdCeXRlcyA9IGtleVNpemUgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBwYXJhbXNcblx0ICAgICAgICAgICAgcmV0dXJuIENpcGhlclBhcmFtcy5jcmVhdGUoeyBrZXk6IGtleSwgaXY6IGl2LCBzYWx0OiBzYWx0IH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qKlxuXHQgICAgICogQSBzZXJpYWxpemFibGUgY2lwaGVyIHdyYXBwZXIgdGhhdCBkZXJpdmVzIHRoZSBrZXkgZnJvbSBhIHBhc3N3b3JkLFxuXHQgICAgICogYW5kIHJldHVybnMgY2lwaGVydGV4dCBhcyBhIHNlcmlhbGl6YWJsZSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAqL1xuXHQgICAgdmFyIFBhc3N3b3JkQmFzZWRDaXBoZXIgPSBDX2xpYi5QYXNzd29yZEJhc2VkQ2lwaGVyID0gU2VyaWFsaXphYmxlQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtLREZ9IGtkZiBUaGUga2V5IGRlcml2YXRpb24gZnVuY3Rpb24gdG8gdXNlIHRvIGdlbmVyYXRlIGEga2V5IGFuZCBJViBmcm9tIGEgcGFzc3dvcmQuIERlZmF1bHQ6IE9wZW5TU0xcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjZmc6IFNlcmlhbGl6YWJsZUNpcGhlci5jZmcuZXh0ZW5kKHtcblx0ICAgICAgICAgICAga2RmOiBPcGVuU1NMS2RmXG5cdCAgICAgICAgfSksXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBFbmNyeXB0cyBhIG1lc3NhZ2UgdXNpbmcgYSBwYXNzd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgVGhlIGNpcGhlciBhbGdvcml0aG0gdG8gdXNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBlbmNyeXB0LlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gQSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuUGFzc3dvcmRCYXNlZENpcGhlci5lbmNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBtZXNzYWdlLCAncGFzc3dvcmQnKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuUGFzc3dvcmRCYXNlZENpcGhlci5lbmNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBtZXNzYWdlLCAncGFzc3dvcmQnLCB7IGZvcm1hdDogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZW5jcnlwdDogZnVuY3Rpb24gKGNpcGhlciwgbWVzc2FnZSwgcGFzc3dvcmQsIGNmZykge1xuXHQgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcblx0ICAgICAgICAgICAgY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gRGVyaXZlIGtleSBhbmQgb3RoZXIgcGFyYW1zXG5cdCAgICAgICAgICAgIHZhciBkZXJpdmVkUGFyYW1zID0gY2ZnLmtkZi5leGVjdXRlKHBhc3N3b3JkLCBjaXBoZXIua2V5U2l6ZSwgY2lwaGVyLml2U2l6ZSk7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIElWIHRvIGNvbmZpZ1xuXHQgICAgICAgICAgICBjZmcuaXYgPSBkZXJpdmVkUGFyYW1zLml2O1xuXG5cdCAgICAgICAgICAgIC8vIEVuY3J5cHRcblx0ICAgICAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBTZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdC5jYWxsKHRoaXMsIGNpcGhlciwgbWVzc2FnZSwgZGVyaXZlZFBhcmFtcy5rZXksIGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gTWl4IGluIGRlcml2ZWQgcGFyYW1zXG5cdCAgICAgICAgICAgIGNpcGhlcnRleHQubWl4SW4oZGVyaXZlZFBhcmFtcyk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNpcGhlcnRleHQ7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIERlY3J5cHRzIHNlcmlhbGl6ZWQgY2lwaGVydGV4dCB1c2luZyBhIHBhc3N3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIGFsZ29yaXRobSB0byB1c2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN8c3RyaW5nfSBjaXBoZXJ0ZXh0IFRoZSBjaXBoZXJ0ZXh0IHRvIGRlY3J5cHQuXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC5cblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcGxhaW50ZXh0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgcGxhaW50ZXh0ID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgZm9ybWF0dGVkQ2lwaGVydGV4dCwgJ3Bhc3N3b3JkJywgeyBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pO1xuXHQgICAgICAgICAqICAgICB2YXIgcGxhaW50ZXh0ID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgY2lwaGVydGV4dFBhcmFtcywgJ3Bhc3N3b3JkJywgeyBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGRlY3J5cHQ6IGZ1bmN0aW9uIChjaXBoZXIsIGNpcGhlcnRleHQsIHBhc3N3b3JkLCBjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIGNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIENpcGhlclBhcmFtc1xuXHQgICAgICAgICAgICBjaXBoZXJ0ZXh0ID0gdGhpcy5fcGFyc2UoY2lwaGVydGV4dCwgY2ZnLmZvcm1hdCk7XG5cblx0ICAgICAgICAgICAgLy8gRGVyaXZlIGtleSBhbmQgb3RoZXIgcGFyYW1zXG5cdCAgICAgICAgICAgIHZhciBkZXJpdmVkUGFyYW1zID0gY2ZnLmtkZi5leGVjdXRlKHBhc3N3b3JkLCBjaXBoZXIua2V5U2l6ZSwgY2lwaGVyLml2U2l6ZSwgY2lwaGVydGV4dC5zYWx0KTtcblxuXHQgICAgICAgICAgICAvLyBBZGQgSVYgdG8gY29uZmlnXG5cdCAgICAgICAgICAgIGNmZy5pdiA9IGRlcml2ZWRQYXJhbXMuaXY7XG5cblx0ICAgICAgICAgICAgLy8gRGVjcnlwdFxuXHQgICAgICAgICAgICB2YXIgcGxhaW50ZXh0ID0gU2VyaWFsaXphYmxlQ2lwaGVyLmRlY3J5cHQuY2FsbCh0aGlzLCBjaXBoZXIsIGNpcGhlcnRleHQsIGRlcml2ZWRQYXJhbXMua2V5LCBjZmcpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBwbGFpbnRleHQ7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdH0oKSk7XG5cblxufSkpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvZGwvfi9jcnlwdG8tanMvY2lwaGVyLWNvcmUuanNcbiAqKiBtb2R1bGUgaWQgPSA1N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2NpcGhlci1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQvKipcblx0ICogQ2lwaGVyIEZlZWRiYWNrIGJsb2NrIG1vZGUuXG5cdCAqL1xuXHRDcnlwdG9KUy5tb2RlLkNGQiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgQ0ZCID0gQ3J5cHRvSlMubGliLkJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTtcblxuXHQgICAgQ0ZCLkVuY3J5cHRvciA9IENGQi5leHRlbmQoe1xuXHQgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXI7XG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplO1xuXG5cdCAgICAgICAgICAgIGdlbmVyYXRlS2V5c3RyZWFtQW5kRW5jcnlwdC5jYWxsKHRoaXMsIHdvcmRzLCBvZmZzZXQsIGJsb2NrU2l6ZSwgY2lwaGVyKTtcblxuXHQgICAgICAgICAgICAvLyBSZW1lbWJlciB0aGlzIGJsb2NrIHRvIHVzZSB3aXRoIG5leHQgYmxvY2tcblx0ICAgICAgICAgICAgdGhpcy5fcHJldkJsb2NrID0gd29yZHMuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBibG9ja1NpemUpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBDRkIuRGVjcnlwdG9yID0gQ0ZCLmV4dGVuZCh7XG5cdCAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlcjtcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cblx0ICAgICAgICAgICAgLy8gUmVtZW1iZXIgdGhpcyBibG9jayB0byB1c2Ugd2l0aCBuZXh0IGJsb2NrXG5cdCAgICAgICAgICAgIHZhciB0aGlzQmxvY2sgPSB3b3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGJsb2NrU2l6ZSk7XG5cblx0ICAgICAgICAgICAgZ2VuZXJhdGVLZXlzdHJlYW1BbmRFbmNyeXB0LmNhbGwodGhpcywgd29yZHMsIG9mZnNldCwgYmxvY2tTaXplLCBjaXBoZXIpO1xuXG5cdCAgICAgICAgICAgIC8vIFRoaXMgYmxvY2sgYmVjb21lcyB0aGUgcHJldmlvdXMgYmxvY2tcblx0ICAgICAgICAgICAgdGhpcy5fcHJldkJsb2NrID0gdGhpc0Jsb2NrO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBmdW5jdGlvbiBnZW5lcmF0ZUtleXN0cmVhbUFuZEVuY3J5cHQod29yZHMsIG9mZnNldCwgYmxvY2tTaXplLCBjaXBoZXIpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgIHZhciBpdiA9IHRoaXMuX2l2O1xuXG5cdCAgICAgICAgLy8gR2VuZXJhdGUga2V5c3RyZWFtXG5cdCAgICAgICAgaWYgKGl2KSB7XG5cdCAgICAgICAgICAgIHZhciBrZXlzdHJlYW0gPSBpdi5zbGljZSgwKTtcblxuXHQgICAgICAgICAgICAvLyBSZW1vdmUgSVYgZm9yIHN1YnNlcXVlbnQgYmxvY2tzXG5cdCAgICAgICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHZhciBrZXlzdHJlYW0gPSB0aGlzLl9wcmV2QmxvY2s7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2soa2V5c3RyZWFtLCAwKTtcblxuXHQgICAgICAgIC8vIEVuY3J5cHRcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XG5cdCAgICAgICAgICAgIHdvcmRzW29mZnNldCArIGldIF49IGtleXN0cmVhbVtpXTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBDRkI7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMubW9kZS5DRkI7XG5cbn0pKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL2RsL34vY3J5cHRvLWpzL21vZGUtY2ZiLmpzXG4gKiogbW9kdWxlIGlkID0gNThcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9jaXBoZXItY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0LyoqXG5cdCAqIENvdW50ZXIgYmxvY2sgbW9kZS5cblx0ICovXG5cdENyeXB0b0pTLm1vZGUuQ1RSID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBDVFIgPSBDcnlwdG9KUy5saWIuQmxvY2tDaXBoZXJNb2RlLmV4dGVuZCgpO1xuXG5cdCAgICB2YXIgRW5jcnlwdG9yID0gQ1RSLkVuY3J5cHRvciA9IENUUi5leHRlbmQoe1xuXHQgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXJcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cdCAgICAgICAgICAgIHZhciBpdiA9IHRoaXMuX2l2O1xuXHQgICAgICAgICAgICB2YXIgY291bnRlciA9IHRoaXMuX2NvdW50ZXI7XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUga2V5c3RyZWFtXG5cdCAgICAgICAgICAgIGlmIChpdikge1xuXHQgICAgICAgICAgICAgICAgY291bnRlciA9IHRoaXMuX2NvdW50ZXIgPSBpdi5zbGljZSgwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2Nrc1xuXHQgICAgICAgICAgICAgICAgdGhpcy5faXYgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdmFyIGtleXN0cmVhbSA9IGNvdW50ZXIuc2xpY2UoMCk7XG5cdCAgICAgICAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2soa2V5c3RyZWFtLCAwKTtcblxuXHQgICAgICAgICAgICAvLyBJbmNyZW1lbnQgY291bnRlclxuXHQgICAgICAgICAgICBjb3VudGVyW2Jsb2NrU2l6ZSAtIDFdID0gKGNvdW50ZXJbYmxvY2tTaXplIC0gMV0gKyAxKSB8IDBcblxuXHQgICAgICAgICAgICAvLyBFbmNyeXB0XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW29mZnNldCArIGldIF49IGtleXN0cmVhbVtpXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBDVFIuRGVjcnlwdG9yID0gRW5jcnlwdG9yO1xuXG5cdCAgICByZXR1cm4gQ1RSO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLm1vZGUuQ1RSO1xuXG59KSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9kbC9+L2NyeXB0by1qcy9tb2RlLWN0ci5qc1xuICoqIG1vZHVsZSBpZCA9IDU5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKiBAcHJlc2VydmVcblx0ICogQ291bnRlciBibG9jayBtb2RlIGNvbXBhdGlibGUgd2l0aCAgRHIgQnJpYW4gR2xhZG1hbiBmaWxlZW5jLmNcblx0ICogZGVyaXZlZCBmcm9tIENyeXB0b0pTLm1vZGUuQ1RSXG5cdCAqIEphbiBIcnVieSBqaHJ1Ynkud2ViQGdtYWlsLmNvbVxuXHQgKi9cblx0Q3J5cHRvSlMubW9kZS5DVFJHbGFkbWFuID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBDVFJHbGFkbWFuID0gQ3J5cHRvSlMubGliLkJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTtcblxuXHRcdGZ1bmN0aW9uIGluY1dvcmQod29yZClcblx0XHR7XG5cdFx0XHRpZiAoKCh3b3JkID4+IDI0KSAmIDB4ZmYpID09PSAweGZmKSB7IC8vb3ZlcmZsb3dcblx0XHRcdHZhciBiMSA9ICh3b3JkID4+IDE2KSYweGZmO1xuXHRcdFx0dmFyIGIyID0gKHdvcmQgPj4gOCkmMHhmZjtcblx0XHRcdHZhciBiMyA9IHdvcmQgJiAweGZmO1xuXG5cdFx0XHRpZiAoYjEgPT09IDB4ZmYpIC8vIG92ZXJmbG93IGIxXG5cdFx0XHR7XG5cdFx0XHRiMSA9IDA7XG5cdFx0XHRpZiAoYjIgPT09IDB4ZmYpXG5cdFx0XHR7XG5cdFx0XHRcdGIyID0gMDtcblx0XHRcdFx0aWYgKGIzID09PSAweGZmKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0YjMgPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdCsrYjM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0KytiMjtcblx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdCsrYjE7XG5cdFx0XHR9XG5cblx0XHRcdHdvcmQgPSAwO1xuXHRcdFx0d29yZCArPSAoYjEgPDwgMTYpO1xuXHRcdFx0d29yZCArPSAoYjIgPDwgOCk7XG5cdFx0XHR3b3JkICs9IGIzO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0d29yZCArPSAoMHgwMSA8PCAyNCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gd29yZDtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBpbmNDb3VudGVyKGNvdW50ZXIpXG5cdFx0e1xuXHRcdFx0aWYgKChjb3VudGVyWzBdID0gaW5jV29yZChjb3VudGVyWzBdKSkgPT09IDApXG5cdFx0XHR7XG5cdFx0XHRcdC8vIGVuY3JfZGF0YSBpbiBmaWxlZW5jLmMgZnJvbSAgRHIgQnJpYW4gR2xhZG1hbidzIGNvdW50cyBvbmx5IHdpdGggRFdPUkQgaiA8IDhcblx0XHRcdFx0Y291bnRlclsxXSA9IGluY1dvcmQoY291bnRlclsxXSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY291bnRlcjtcblx0XHR9XG5cblx0ICAgIHZhciBFbmNyeXB0b3IgPSBDVFJHbGFkbWFuLkVuY3J5cHRvciA9IENUUkdsYWRtYW4uZXh0ZW5kKHtcblx0ICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyXG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplO1xuXHQgICAgICAgICAgICB2YXIgaXYgPSB0aGlzLl9pdjtcblx0ICAgICAgICAgICAgdmFyIGNvdW50ZXIgPSB0aGlzLl9jb3VudGVyO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbVxuXHQgICAgICAgICAgICBpZiAoaXYpIHtcblx0ICAgICAgICAgICAgICAgIGNvdW50ZXIgPSB0aGlzLl9jb3VudGVyID0gaXYuc2xpY2UoMCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBJViBmb3Igc3Vic2VxdWVudCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkO1xuXHQgICAgICAgICAgICB9XG5cblx0XHRcdFx0aW5jQ291bnRlcihjb3VudGVyKTtcblxuXHRcdFx0XHR2YXIga2V5c3RyZWFtID0gY291bnRlci5zbGljZSgwKTtcblx0ICAgICAgICAgICAgY2lwaGVyLmVuY3J5cHRCbG9jayhrZXlzdHJlYW0sIDApO1xuXG5cdCAgICAgICAgICAgIC8vIEVuY3J5cHRcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja1NpemU7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbb2Zmc2V0ICsgaV0gXj0ga2V5c3RyZWFtW2ldO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIENUUkdsYWRtYW4uRGVjcnlwdG9yID0gRW5jcnlwdG9yO1xuXG5cdCAgICByZXR1cm4gQ1RSR2xhZG1hbjtcblx0fSgpKTtcblxuXG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMubW9kZS5DVFJHbGFkbWFuO1xuXG59KSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9kbC9+L2NyeXB0by1qcy9tb2RlLWN0ci1nbGFkbWFuLmpzXG4gKiogbW9kdWxlIGlkID0gNjBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9jaXBoZXItY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0LyoqXG5cdCAqIE91dHB1dCBGZWVkYmFjayBibG9jayBtb2RlLlxuXHQgKi9cblx0Q3J5cHRvSlMubW9kZS5PRkIgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIE9GQiA9IENyeXB0b0pTLmxpYi5CbG9ja0NpcGhlck1vZGUuZXh0ZW5kKCk7XG5cblx0ICAgIHZhciBFbmNyeXB0b3IgPSBPRkIuRW5jcnlwdG9yID0gT0ZCLmV4dGVuZCh7XG5cdCAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlclxuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZTtcblx0ICAgICAgICAgICAgdmFyIGl2ID0gdGhpcy5faXY7XG5cdCAgICAgICAgICAgIHZhciBrZXlzdHJlYW0gPSB0aGlzLl9rZXlzdHJlYW07XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUga2V5c3RyZWFtXG5cdCAgICAgICAgICAgIGlmIChpdikge1xuXHQgICAgICAgICAgICAgICAga2V5c3RyZWFtID0gdGhpcy5fa2V5c3RyZWFtID0gaXYuc2xpY2UoMCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBJViBmb3Igc3Vic2VxdWVudCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2soa2V5c3RyZWFtLCAwKTtcblxuXHQgICAgICAgICAgICAvLyBFbmNyeXB0XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW29mZnNldCArIGldIF49IGtleXN0cmVhbVtpXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBPRkIuRGVjcnlwdG9yID0gRW5jcnlwdG9yO1xuXG5cdCAgICByZXR1cm4gT0ZCO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLm1vZGUuT0ZCO1xuXG59KSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9kbC9+L2NyeXB0by1qcy9tb2RlLW9mYi5qc1xuICoqIG1vZHVsZSBpZCA9IDYxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKlxuXHQgKiBFbGVjdHJvbmljIENvZGVib29rIGJsb2NrIG1vZGUuXG5cdCAqL1xuXHRDcnlwdG9KUy5tb2RlLkVDQiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgRUNCID0gQ3J5cHRvSlMubGliLkJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTtcblxuXHQgICAgRUNCLkVuY3J5cHRvciA9IEVDQi5leHRlbmQoe1xuXHQgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayh3b3Jkcywgb2Zmc2V0KTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgRUNCLkRlY3J5cHRvciA9IEVDQi5leHRlbmQoe1xuXHQgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fY2lwaGVyLmRlY3J5cHRCbG9jayh3b3Jkcywgb2Zmc2V0KTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgcmV0dXJuIEVDQjtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5tb2RlLkVDQjtcblxufSkpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvZGwvfi9jcnlwdG8tanMvbW9kZS1lY2IuanNcbiAqKiBtb2R1bGUgaWQgPSA2MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2NpcGhlci1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQvKipcblx0ICogQU5TSSBYLjkyMyBwYWRkaW5nIHN0cmF0ZWd5LlxuXHQgKi9cblx0Q3J5cHRvSlMucGFkLkFuc2lYOTIzID0ge1xuXHQgICAgcGFkOiBmdW5jdGlvbiAoZGF0YSwgYmxvY2tTaXplKSB7XG5cdCAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgdmFyIGRhdGFTaWdCeXRlcyA9IGRhdGEuc2lnQnl0ZXM7XG5cdCAgICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNDtcblxuXHQgICAgICAgIC8vIENvdW50IHBhZGRpbmcgYnl0ZXNcblx0ICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGJsb2NrU2l6ZUJ5dGVzIC0gZGF0YVNpZ0J5dGVzICUgYmxvY2tTaXplQnl0ZXM7XG5cblx0ICAgICAgICAvLyBDb21wdXRlIGxhc3QgYnl0ZSBwb3NpdGlvblxuXHQgICAgICAgIHZhciBsYXN0Qnl0ZVBvcyA9IGRhdGFTaWdCeXRlcyArIG5QYWRkaW5nQnl0ZXMgLSAxO1xuXG5cdCAgICAgICAgLy8gUGFkXG5cdCAgICAgICAgZGF0YS5jbGFtcCgpO1xuXHQgICAgICAgIGRhdGEud29yZHNbbGFzdEJ5dGVQb3MgPj4+IDJdIHw9IG5QYWRkaW5nQnl0ZXMgPDwgKDI0IC0gKGxhc3RCeXRlUG9zICUgNCkgKiA4KTtcblx0ICAgICAgICBkYXRhLnNpZ0J5dGVzICs9IG5QYWRkaW5nQnl0ZXM7XG5cdCAgICB9LFxuXG5cdCAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgICAvLyBHZXQgbnVtYmVyIG9mIHBhZGRpbmcgYnl0ZXMgZnJvbSBsYXN0IGJ5dGVcblx0ICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGRhdGEud29yZHNbKGRhdGEuc2lnQnl0ZXMgLSAxKSA+Pj4gMl0gJiAweGZmO1xuXG5cdCAgICAgICAgLy8gUmVtb3ZlIHBhZGRpbmdcblx0ICAgICAgICBkYXRhLnNpZ0J5dGVzIC09IG5QYWRkaW5nQnl0ZXM7XG5cdCAgICB9XG5cdH07XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMucGFkLkFuc2l4OTIzO1xuXG59KSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9kbC9+L2NyeXB0by1qcy9wYWQtYW5zaXg5MjMuanNcbiAqKiBtb2R1bGUgaWQgPSA2M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2NpcGhlci1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQvKipcblx0ICogSVNPIDEwMTI2IHBhZGRpbmcgc3RyYXRlZ3kuXG5cdCAqL1xuXHRDcnlwdG9KUy5wYWQuSXNvMTAxMjYgPSB7XG5cdCAgICBwYWQ6IGZ1bmN0aW9uIChkYXRhLCBibG9ja1NpemUpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDQ7XG5cblx0ICAgICAgICAvLyBDb3VudCBwYWRkaW5nIGJ5dGVzXG5cdCAgICAgICAgdmFyIG5QYWRkaW5nQnl0ZXMgPSBibG9ja1NpemVCeXRlcyAtIGRhdGEuc2lnQnl0ZXMgJSBibG9ja1NpemVCeXRlcztcblxuXHQgICAgICAgIC8vIFBhZFxuXHQgICAgICAgIGRhdGEuY29uY2F0KENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkucmFuZG9tKG5QYWRkaW5nQnl0ZXMgLSAxKSkuXG5cdCAgICAgICAgICAgICBjb25jYXQoQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoW25QYWRkaW5nQnl0ZXMgPDwgMjRdLCAxKSk7XG5cdCAgICB9LFxuXG5cdCAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgICAvLyBHZXQgbnVtYmVyIG9mIHBhZGRpbmcgYnl0ZXMgZnJvbSBsYXN0IGJ5dGVcblx0ICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGRhdGEud29yZHNbKGRhdGEuc2lnQnl0ZXMgLSAxKSA+Pj4gMl0gJiAweGZmO1xuXG5cdCAgICAgICAgLy8gUmVtb3ZlIHBhZGRpbmdcblx0ICAgICAgICBkYXRhLnNpZ0J5dGVzIC09IG5QYWRkaW5nQnl0ZXM7XG5cdCAgICB9XG5cdH07XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMucGFkLklzbzEwMTI2O1xuXG59KSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9kbC9+L2NyeXB0by1qcy9wYWQtaXNvMTAxMjYuanNcbiAqKiBtb2R1bGUgaWQgPSA2NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2NpcGhlci1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQvKipcblx0ICogSVNPL0lFQyA5Nzk3LTEgUGFkZGluZyBNZXRob2QgMi5cblx0ICovXG5cdENyeXB0b0pTLnBhZC5Jc285Nzk3MSA9IHtcblx0ICAgIHBhZDogZnVuY3Rpb24gKGRhdGEsIGJsb2NrU2l6ZSkge1xuXHQgICAgICAgIC8vIEFkZCAweDgwIGJ5dGVcblx0ICAgICAgICBkYXRhLmNvbmNhdChDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZShbMHg4MDAwMDAwMF0sIDEpKTtcblxuXHQgICAgICAgIC8vIFplcm8gcGFkIHRoZSByZXN0XG5cdCAgICAgICAgQ3J5cHRvSlMucGFkLlplcm9QYWRkaW5nLnBhZChkYXRhLCBibG9ja1NpemUpO1xuXHQgICAgfSxcblxuXHQgICAgdW5wYWQ6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgLy8gUmVtb3ZlIHplcm8gcGFkZGluZ1xuXHQgICAgICAgIENyeXB0b0pTLnBhZC5aZXJvUGFkZGluZy51bnBhZChkYXRhKTtcblxuXHQgICAgICAgIC8vIFJlbW92ZSBvbmUgbW9yZSBieXRlIC0tIHRoZSAweDgwIGJ5dGVcblx0ICAgICAgICBkYXRhLnNpZ0J5dGVzLS07XG5cdCAgICB9XG5cdH07XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMucGFkLklzbzk3OTcxO1xuXG59KSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9kbC9+L2NyeXB0by1qcy9wYWQtaXNvOTc5NzEuanNcbiAqKiBtb2R1bGUgaWQgPSA2NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2NpcGhlci1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQvKipcblx0ICogWmVybyBwYWRkaW5nIHN0cmF0ZWd5LlxuXHQgKi9cblx0Q3J5cHRvSlMucGFkLlplcm9QYWRkaW5nID0ge1xuXHQgICAgcGFkOiBmdW5jdGlvbiAoZGF0YSwgYmxvY2tTaXplKSB7XG5cdCAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICB2YXIgYmxvY2tTaXplQnl0ZXMgPSBibG9ja1NpemUgKiA0O1xuXG5cdCAgICAgICAgLy8gUGFkXG5cdCAgICAgICAgZGF0YS5jbGFtcCgpO1xuXHQgICAgICAgIGRhdGEuc2lnQnl0ZXMgKz0gYmxvY2tTaXplQnl0ZXMgLSAoKGRhdGEuc2lnQnl0ZXMgJSBibG9ja1NpemVCeXRlcykgfHwgYmxvY2tTaXplQnl0ZXMpO1xuXHQgICAgfSxcblxuXHQgICAgdW5wYWQ6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkcztcblxuXHQgICAgICAgIC8vIFVucGFkXG5cdCAgICAgICAgdmFyIGkgPSBkYXRhLnNpZ0J5dGVzIC0gMTtcblx0ICAgICAgICB3aGlsZSAoISgoZGF0YVdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZikpIHtcblx0ICAgICAgICAgICAgaS0tO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBkYXRhLnNpZ0J5dGVzID0gaSArIDE7XG5cdCAgICB9XG5cdH07XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMucGFkLlplcm9QYWRkaW5nO1xuXG59KSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9kbC9+L2NyeXB0by1qcy9wYWQtemVyb3BhZGRpbmcuanNcbiAqKiBtb2R1bGUgaWQgPSA2NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2NpcGhlci1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQvKipcblx0ICogQSBub29wIHBhZGRpbmcgc3RyYXRlZ3kuXG5cdCAqL1xuXHRDcnlwdG9KUy5wYWQuTm9QYWRkaW5nID0ge1xuXHQgICAgcGFkOiBmdW5jdGlvbiAoKSB7XG5cdCAgICB9LFxuXG5cdCAgICB1bnBhZDogZnVuY3Rpb24gKCkge1xuXHQgICAgfVxuXHR9O1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLnBhZC5Ob1BhZGRpbmc7XG5cbn0pKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL2RsL34vY3J5cHRvLWpzL3BhZC1ub3BhZGRpbmcuanNcbiAqKiBtb2R1bGUgaWQgPSA2N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2NpcGhlci1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKHVuZGVmaW5lZCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQ2lwaGVyUGFyYW1zID0gQ19saWIuQ2lwaGVyUGFyYW1zO1xuXHQgICAgdmFyIENfZW5jID0gQy5lbmM7XG5cdCAgICB2YXIgSGV4ID0gQ19lbmMuSGV4O1xuXHQgICAgdmFyIENfZm9ybWF0ID0gQy5mb3JtYXQ7XG5cblx0ICAgIHZhciBIZXhGb3JtYXR0ZXIgPSBDX2Zvcm1hdC5IZXggPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgdGhlIGNpcGhlcnRleHQgb2YgYSBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhIGhleGFkZWNpbWFsbHkgZW5jb2RlZCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlclBhcmFtc30gY2lwaGVyUGFyYW1zIFRoZSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGhleGFkZWNpbWFsbHkgZW5jb2RlZCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBoZXhTdHJpbmcgPSBDcnlwdG9KUy5mb3JtYXQuSGV4LnN0cmluZ2lmeShjaXBoZXJQYXJhbXMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKGNpcGhlclBhcmFtcykge1xuXHQgICAgICAgICAgICByZXR1cm4gY2lwaGVyUGFyYW1zLmNpcGhlcnRleHQudG9TdHJpbmcoSGV4KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBoZXhhZGVjaW1hbGx5IGVuY29kZWQgY2lwaGVydGV4dCBzdHJpbmcgdG8gYSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCBUaGUgaGV4YWRlY2ltYWxseSBlbmNvZGVkIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gVGhlIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVyUGFyYW1zID0gQ3J5cHRvSlMuZm9ybWF0LkhleC5wYXJzZShoZXhTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAoaW5wdXQpIHtcblx0ICAgICAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBIZXgucGFyc2UoaW5wdXQpO1xuXHQgICAgICAgICAgICByZXR1cm4gQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7IGNpcGhlcnRleHQ6IGNpcGhlcnRleHQgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5mb3JtYXQuSGV4O1xuXG59KSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9kbC9+L2NyeXB0by1qcy9mb3JtYXQtaGV4LmpzXG4gKiogbW9kdWxlIGlkID0gNjhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9lbmMtYmFzZTY0XCIpLCByZXF1aXJlKFwiLi9tZDVcIiksIHJlcXVpcmUoXCIuL2V2cGtkZlwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vZW5jLWJhc2U2NFwiLCBcIi4vbWQ1XCIsIFwiLi9ldnBrZGZcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQmxvY2tDaXBoZXIgPSBDX2xpYi5CbG9ja0NpcGhlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIExvb2t1cCB0YWJsZXNcblx0ICAgIHZhciBTQk9YID0gW107XG5cdCAgICB2YXIgSU5WX1NCT1ggPSBbXTtcblx0ICAgIHZhciBTVUJfTUlYXzAgPSBbXTtcblx0ICAgIHZhciBTVUJfTUlYXzEgPSBbXTtcblx0ICAgIHZhciBTVUJfTUlYXzIgPSBbXTtcblx0ICAgIHZhciBTVUJfTUlYXzMgPSBbXTtcblx0ICAgIHZhciBJTlZfU1VCX01JWF8wID0gW107XG5cdCAgICB2YXIgSU5WX1NVQl9NSVhfMSA9IFtdO1xuXHQgICAgdmFyIElOVl9TVUJfTUlYXzIgPSBbXTtcblx0ICAgIHZhciBJTlZfU1VCX01JWF8zID0gW107XG5cblx0ICAgIC8vIENvbXB1dGUgbG9va3VwIHRhYmxlc1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAvLyBDb21wdXRlIGRvdWJsZSB0YWJsZVxuXHQgICAgICAgIHZhciBkID0gW107XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuXHQgICAgICAgICAgICBpZiAoaSA8IDEyOCkge1xuXHQgICAgICAgICAgICAgICAgZFtpXSA9IGkgPDwgMTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGRbaV0gPSAoaSA8PCAxKSBeIDB4MTFiO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gV2FsayBHRigyXjgpXG5cdCAgICAgICAgdmFyIHggPSAwO1xuXHQgICAgICAgIHZhciB4aSA9IDA7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuXHQgICAgICAgICAgICAvLyBDb21wdXRlIHNib3hcblx0ICAgICAgICAgICAgdmFyIHN4ID0geGkgXiAoeGkgPDwgMSkgXiAoeGkgPDwgMikgXiAoeGkgPDwgMykgXiAoeGkgPDwgNCk7XG5cdCAgICAgICAgICAgIHN4ID0gKHN4ID4+PiA4KSBeIChzeCAmIDB4ZmYpIF4gMHg2Mztcblx0ICAgICAgICAgICAgU0JPWFt4XSA9IHN4O1xuXHQgICAgICAgICAgICBJTlZfU0JPWFtzeF0gPSB4O1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgbXVsdGlwbGljYXRpb25cblx0ICAgICAgICAgICAgdmFyIHgyID0gZFt4XTtcblx0ICAgICAgICAgICAgdmFyIHg0ID0gZFt4Ml07XG5cdCAgICAgICAgICAgIHZhciB4OCA9IGRbeDRdO1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgc3ViIGJ5dGVzLCBtaXggY29sdW1ucyB0YWJsZXNcblx0ICAgICAgICAgICAgdmFyIHQgPSAoZFtzeF0gKiAweDEwMSkgXiAoc3ggKiAweDEwMTAxMDApO1xuXHQgICAgICAgICAgICBTVUJfTUlYXzBbeF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOCk7XG5cdCAgICAgICAgICAgIFNVQl9NSVhfMVt4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNik7XG5cdCAgICAgICAgICAgIFNVQl9NSVhfMlt4XSA9ICh0IDw8IDgpICB8ICh0ID4+PiAyNCk7XG5cdCAgICAgICAgICAgIFNVQl9NSVhfM1t4XSA9IHQ7XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBpbnYgc3ViIGJ5dGVzLCBpbnYgbWl4IGNvbHVtbnMgdGFibGVzXG5cdCAgICAgICAgICAgIHZhciB0ID0gKHg4ICogMHgxMDEwMTAxKSBeICh4NCAqIDB4MTAwMDEpIF4gKHgyICogMHgxMDEpIF4gKHggKiAweDEwMTAxMDApO1xuXHQgICAgICAgICAgICBJTlZfU1VCX01JWF8wW3N4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KTtcblx0ICAgICAgICAgICAgSU5WX1NVQl9NSVhfMVtzeF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpO1xuXHQgICAgICAgICAgICBJTlZfU1VCX01JWF8yW3N4XSA9ICh0IDw8IDgpICB8ICh0ID4+PiAyNCk7XG5cdCAgICAgICAgICAgIElOVl9TVUJfTUlYXzNbc3hdID0gdDtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIG5leHQgY291bnRlclxuXHQgICAgICAgICAgICBpZiAoIXgpIHtcblx0ICAgICAgICAgICAgICAgIHggPSB4aSA9IDE7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB4ID0geDIgXiBkW2RbZFt4OCBeIHgyXV1dO1xuXHQgICAgICAgICAgICAgICAgeGkgXj0gZFtkW3hpXV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvLyBQcmVjb21wdXRlZCBSY29uIGxvb2t1cFxuXHQgICAgdmFyIFJDT04gPSBbMHgwMCwgMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNl07XG5cblx0ICAgIC8qKlxuXHQgICAgICogQUVTIGJsb2NrIGNpcGhlciBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBBRVMgPSBDX2FsZ28uQUVTID0gQmxvY2tDaXBoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGtleSA9IHRoaXMuX2tleTtcblx0ICAgICAgICAgICAgdmFyIGtleVdvcmRzID0ga2V5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIga2V5U2l6ZSA9IGtleS5zaWdCeXRlcyAvIDQ7XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBudW1iZXIgb2Ygcm91bmRzXG5cdCAgICAgICAgICAgIHZhciBuUm91bmRzID0gdGhpcy5fblJvdW5kcyA9IGtleVNpemUgKyA2XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBudW1iZXIgb2Yga2V5IHNjaGVkdWxlIHJvd3Ncblx0ICAgICAgICAgICAgdmFyIGtzUm93cyA9IChuUm91bmRzICsgMSkgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUga2V5IHNjaGVkdWxlXG5cdCAgICAgICAgICAgIHZhciBrZXlTY2hlZHVsZSA9IHRoaXMuX2tleVNjaGVkdWxlID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGtzUm93ID0gMDsga3NSb3cgPCBrc1Jvd3M7IGtzUm93KyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChrc1JvdyA8IGtleVNpemUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBrZXlTY2hlZHVsZVtrc1Jvd10gPSBrZXlXb3Jkc1trc1Jvd107XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ga2V5U2NoZWR1bGVba3NSb3cgLSAxXTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghKGtzUm93ICUga2V5U2l6ZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gUm90IHdvcmRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdCA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWIgd29yZFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0ID0gKFNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsodCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbdCAmIDB4ZmZdO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1peCBSY29uXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHQgXj0gUkNPTlsoa3NSb3cgLyBrZXlTaXplKSB8IDBdIDw8IDI0O1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5U2l6ZSA+IDYgJiYga3NSb3cgJSBrZXlTaXplID09IDQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3ViIHdvcmRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdCA9IChTQk9YW3QgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsodCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3QgJiAweGZmXTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICBrZXlTY2hlZHVsZVtrc1Jvd10gPSBrZXlTY2hlZHVsZVtrc1JvdyAtIGtleVNpemVdIF4gdDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgaW52IGtleSBzY2hlZHVsZVxuXHQgICAgICAgICAgICB2YXIgaW52S2V5U2NoZWR1bGUgPSB0aGlzLl9pbnZLZXlTY2hlZHVsZSA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpbnZLc1JvdyA9IDA7IGludktzUm93IDwga3NSb3dzOyBpbnZLc1JvdysrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIga3NSb3cgPSBrc1Jvd3MgLSBpbnZLc1JvdztcblxuXHQgICAgICAgICAgICAgICAgaWYgKGludktzUm93ICUgNCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ga2V5U2NoZWR1bGVba3NSb3ddO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGtleVNjaGVkdWxlW2tzUm93IC0gNF07XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGlmIChpbnZLc1JvdyA8IDQgfHwga3NSb3cgPD0gNCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGludktleVNjaGVkdWxlW2ludktzUm93XSA9IHQ7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIGludktleVNjaGVkdWxlW2ludktzUm93XSA9IElOVl9TVUJfTUlYXzBbU0JPWFt0ID4+PiAyNF1dIF4gSU5WX1NVQl9NSVhfMVtTQk9YWyh0ID4+PiAxNikgJiAweGZmXV0gXlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElOVl9TVUJfTUlYXzJbU0JPWFsodCA+Pj4gOCkgJiAweGZmXV0gXiBJTlZfU1VCX01JWF8zW1NCT1hbdCAmIDB4ZmZdXTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBlbmNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5fa2V5U2NoZWR1bGUsIFNVQl9NSVhfMCwgU1VCX01JWF8xLCBTVUJfTUlYXzIsIFNVQl9NSVhfMywgU0JPWCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGRlY3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTd2FwIDJuZCBhbmQgNHRoIHJvd3Ncblx0ICAgICAgICAgICAgdmFyIHQgPSBNW29mZnNldCArIDFdO1xuXHQgICAgICAgICAgICBNW29mZnNldCArIDFdID0gTVtvZmZzZXQgKyAzXTtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAzXSA9IHQ7XG5cblx0ICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5faW52S2V5U2NoZWR1bGUsIElOVl9TVUJfTUlYXzAsIElOVl9TVUJfTUlYXzEsIElOVl9TVUJfTUlYXzIsIElOVl9TVUJfTUlYXzMsIElOVl9TQk9YKTtcblxuXHQgICAgICAgICAgICAvLyBJbnYgc3dhcCAybmQgYW5kIDR0aCByb3dzXG5cdCAgICAgICAgICAgIHZhciB0ID0gTVtvZmZzZXQgKyAxXTtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAxXSA9IE1bb2Zmc2V0ICsgM107XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0ICsgM10gPSB0O1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9DcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0LCBrZXlTY2hlZHVsZSwgU1VCX01JWF8wLCBTVUJfTUlYXzEsIFNVQl9NSVhfMiwgU1VCX01JWF8zLCBTQk9YKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBuUm91bmRzID0gdGhpcy5fblJvdW5kcztcblxuXHQgICAgICAgICAgICAvLyBHZXQgaW5wdXQsIGFkZCByb3VuZCBrZXlcblx0ICAgICAgICAgICAgdmFyIHMwID0gTVtvZmZzZXRdICAgICBeIGtleVNjaGVkdWxlWzBdO1xuXHQgICAgICAgICAgICB2YXIgczEgPSBNW29mZnNldCArIDFdIF4ga2V5U2NoZWR1bGVbMV07XG5cdCAgICAgICAgICAgIHZhciBzMiA9IE1bb2Zmc2V0ICsgMl0gXiBrZXlTY2hlZHVsZVsyXTtcblx0ICAgICAgICAgICAgdmFyIHMzID0gTVtvZmZzZXQgKyAzXSBeIGtleVNjaGVkdWxlWzNdO1xuXG5cdCAgICAgICAgICAgIC8vIEtleSBzY2hlZHVsZSByb3cgY291bnRlclxuXHQgICAgICAgICAgICB2YXIga3NSb3cgPSA0O1xuXG5cdCAgICAgICAgICAgIC8vIFJvdW5kc1xuXHQgICAgICAgICAgICBmb3IgKHZhciByb3VuZCA9IDE7IHJvdW5kIDwgblJvdW5kczsgcm91bmQrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hpZnQgcm93cywgc3ViIGJ5dGVzLCBtaXggY29sdW1ucywgYWRkIHJvdW5kIGtleVxuXHQgICAgICAgICAgICAgICAgdmFyIHQwID0gU1VCX01JWF8wW3MwID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMxID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczIgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczMgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxID0gU1VCX01JWF8wW3MxID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMyID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczMgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczAgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQyID0gU1VCX01JWF8wW3MyID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMzID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczAgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczEgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQzID0gU1VCX01JWF8wW3MzID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMwID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczEgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczIgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBVcGRhdGUgc3RhdGVcblx0ICAgICAgICAgICAgICAgIHMwID0gdDA7XG5cdCAgICAgICAgICAgICAgICBzMSA9IHQxO1xuXHQgICAgICAgICAgICAgICAgczIgPSB0Mjtcblx0ICAgICAgICAgICAgICAgIHMzID0gdDM7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBTaGlmdCByb3dzLCBzdWIgYnl0ZXMsIGFkZCByb3VuZCBrZXlcblx0ICAgICAgICAgICAgdmFyIHQwID0gKChTQk9YW3MwID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMxID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczIgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MzICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK107XG5cdCAgICAgICAgICAgIHZhciB0MSA9ICgoU0JPWFtzMSA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMiA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMzID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMCAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICB2YXIgdDIgPSAoKFNCT1hbczIgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczMgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczEgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXTtcblx0ICAgICAgICAgICAgdmFyIHQzID0gKChTQk9YW3MzID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMwID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczEgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MyICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK107XG5cblx0ICAgICAgICAgICAgLy8gU2V0IG91dHB1dFxuXHQgICAgICAgICAgICBNW29mZnNldF0gICAgID0gdDA7XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0ICsgMV0gPSB0MTtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAyXSA9IHQyO1xuXHQgICAgICAgICAgICBNW29mZnNldCArIDNdID0gdDM7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGtleVNpemU6IDI1Ni8zMlxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuQUVTLmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuQUVTLmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpO1xuXHQgICAgICovXG5cdCAgICBDLkFFUyA9IEJsb2NrQ2lwaGVyLl9jcmVhdGVIZWxwZXIoQUVTKTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5BRVM7XG5cbn0pKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL2RsL34vY3J5cHRvLWpzL2Flcy5qc1xuICoqIG1vZHVsZSBpZCA9IDY5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vZW5jLWJhc2U2NFwiKSwgcmVxdWlyZShcIi4vbWQ1XCIpLCByZXF1aXJlKFwiLi9ldnBrZGZcIiksIHJlcXVpcmUoXCIuL2NpcGhlci1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL2VuYy1iYXNlNjRcIiwgXCIuL21kNVwiLCBcIi4vZXZwa2RmXCIsIFwiLi9jaXBoZXItY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBCbG9ja0NpcGhlciA9IENfbGliLkJsb2NrQ2lwaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLy8gUGVybXV0ZWQgQ2hvaWNlIDEgY29uc3RhbnRzXG5cdCAgICB2YXIgUEMxID0gW1xuXHQgICAgICAgIDU3LCA0OSwgNDEsIDMzLCAyNSwgMTcsIDksICAxLFxuXHQgICAgICAgIDU4LCA1MCwgNDIsIDM0LCAyNiwgMTgsIDEwLCAyLFxuXHQgICAgICAgIDU5LCA1MSwgNDMsIDM1LCAyNywgMTksIDExLCAzLFxuXHQgICAgICAgIDYwLCA1MiwgNDQsIDM2LCA2MywgNTUsIDQ3LCAzOSxcblx0ICAgICAgICAzMSwgMjMsIDE1LCA3LCAgNjIsIDU0LCA0NiwgMzgsXG5cdCAgICAgICAgMzAsIDIyLCAxNCwgNiwgIDYxLCA1MywgNDUsIDM3LFxuXHQgICAgICAgIDI5LCAyMSwgMTMsIDUsICAyOCwgMjAsIDEyLCA0XG5cdCAgICBdO1xuXG5cdCAgICAvLyBQZXJtdXRlZCBDaG9pY2UgMiBjb25zdGFudHNcblx0ICAgIHZhciBQQzIgPSBbXG5cdCAgICAgICAgMTQsIDE3LCAxMSwgMjQsIDEsICA1LFxuXHQgICAgICAgIDMsICAyOCwgMTUsIDYsICAyMSwgMTAsXG5cdCAgICAgICAgMjMsIDE5LCAxMiwgNCwgIDI2LCA4LFxuXHQgICAgICAgIDE2LCA3LCAgMjcsIDIwLCAxMywgMixcblx0ICAgICAgICA0MSwgNTIsIDMxLCAzNywgNDcsIDU1LFxuXHQgICAgICAgIDMwLCA0MCwgNTEsIDQ1LCAzMywgNDgsXG5cdCAgICAgICAgNDQsIDQ5LCAzOSwgNTYsIDM0LCA1Myxcblx0ICAgICAgICA0NiwgNDIsIDUwLCAzNiwgMjksIDMyXG5cdCAgICBdO1xuXG5cdCAgICAvLyBDdW11bGF0aXZlIGJpdCBzaGlmdCBjb25zdGFudHNcblx0ICAgIHZhciBCSVRfU0hJRlRTID0gWzEsICAyLCAgNCwgIDYsICA4LCAgMTAsIDEyLCAxNCwgMTUsIDE3LCAxOSwgMjEsIDIzLCAyNSwgMjcsIDI4XTtcblxuXHQgICAgLy8gU0JPWGVzIGFuZCByb3VuZCBwZXJtdXRhdGlvbiBjb25zdGFudHNcblx0ICAgIHZhciBTQk9YX1AgPSBbXG5cdCAgICAgICAge1xuXHQgICAgICAgICAgICAweDA6IDB4ODA4MjAwLFxuXHQgICAgICAgICAgICAweDEwMDAwMDAwOiAweDgwMDAsXG5cdCAgICAgICAgICAgIDB4MjAwMDAwMDA6IDB4ODA4MDAyLFxuXHQgICAgICAgICAgICAweDMwMDAwMDAwOiAweDIsXG5cdCAgICAgICAgICAgIDB4NDAwMDAwMDA6IDB4MjAwLFxuXHQgICAgICAgICAgICAweDUwMDAwMDAwOiAweDgwODIwMixcblx0ICAgICAgICAgICAgMHg2MDAwMDAwMDogMHg4MDAyMDIsXG5cdCAgICAgICAgICAgIDB4NzAwMDAwMDA6IDB4ODAwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDAwOiAweDIwMixcblx0ICAgICAgICAgICAgMHg5MDAwMDAwMDogMHg4MDAyMDAsXG5cdCAgICAgICAgICAgIDB4YTAwMDAwMDA6IDB4ODIwMCxcblx0ICAgICAgICAgICAgMHhiMDAwMDAwMDogMHg4MDgwMDAsXG5cdCAgICAgICAgICAgIDB4YzAwMDAwMDA6IDB4ODAwMixcblx0ICAgICAgICAgICAgMHhkMDAwMDAwMDogMHg4MDAwMDIsXG5cdCAgICAgICAgICAgIDB4ZTAwMDAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHhmMDAwMDAwMDogMHg4MjAyLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxODAwMDAwMDogMHg4MDgyMDIsXG5cdCAgICAgICAgICAgIDB4MjgwMDAwMDA6IDB4ODIwMixcblx0ICAgICAgICAgICAgMHgzODAwMDAwMDogMHg4MDAwLFxuXHQgICAgICAgICAgICAweDQ4MDAwMDAwOiAweDgwODIwMCxcblx0ICAgICAgICAgICAgMHg1ODAwMDAwMDogMHgyMDAsXG5cdCAgICAgICAgICAgIDB4NjgwMDAwMDA6IDB4ODA4MDAyLFxuXHQgICAgICAgICAgICAweDc4MDAwMDAwOiAweDIsXG5cdCAgICAgICAgICAgIDB4ODgwMDAwMDA6IDB4ODAwMjAwLFxuXHQgICAgICAgICAgICAweDk4MDAwMDAwOiAweDgyMDAsXG5cdCAgICAgICAgICAgIDB4YTgwMDAwMDA6IDB4ODA4MDAwLFxuXHQgICAgICAgICAgICAweGI4MDAwMDAwOiAweDgwMDIwMixcblx0ICAgICAgICAgICAgMHhjODAwMDAwMDogMHg4MDAwMDIsXG5cdCAgICAgICAgICAgIDB4ZDgwMDAwMDA6IDB4ODAwMixcblx0ICAgICAgICAgICAgMHhlODAwMDAwMDogMHgyMDIsXG5cdCAgICAgICAgICAgIDB4ZjgwMDAwMDA6IDB4ODAwMDAwLFxuXHQgICAgICAgICAgICAweDE6IDB4ODAwMCxcblx0ICAgICAgICAgICAgMHgxMDAwMDAwMTogMHgyLFxuXHQgICAgICAgICAgICAweDIwMDAwMDAxOiAweDgwODIwMCxcblx0ICAgICAgICAgICAgMHgzMDAwMDAwMTogMHg4MDAwMDAsXG5cdCAgICAgICAgICAgIDB4NDAwMDAwMDE6IDB4ODA4MDAyLFxuXHQgICAgICAgICAgICAweDUwMDAwMDAxOiAweDgyMDAsXG5cdCAgICAgICAgICAgIDB4NjAwMDAwMDE6IDB4MjAwLFxuXHQgICAgICAgICAgICAweDcwMDAwMDAxOiAweDgwMDIwMixcblx0ICAgICAgICAgICAgMHg4MDAwMDAwMTogMHg4MDgyMDIsXG5cdCAgICAgICAgICAgIDB4OTAwMDAwMDE6IDB4ODA4MDAwLFxuXHQgICAgICAgICAgICAweGEwMDAwMDAxOiAweDgwMDAwMixcblx0ICAgICAgICAgICAgMHhiMDAwMDAwMTogMHg4MjAyLFxuXHQgICAgICAgICAgICAweGMwMDAwMDAxOiAweDIwMixcblx0ICAgICAgICAgICAgMHhkMDAwMDAwMTogMHg4MDAyMDAsXG5cdCAgICAgICAgICAgIDB4ZTAwMDAwMDE6IDB4ODAwMixcblx0ICAgICAgICAgICAgMHhmMDAwMDAwMTogMHgwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDE6IDB4ODA4MjAyLFxuXHQgICAgICAgICAgICAweDE4MDAwMDAxOiAweDgwODAwMCxcblx0ICAgICAgICAgICAgMHgyODAwMDAwMTogMHg4MDAwMDAsXG5cdCAgICAgICAgICAgIDB4MzgwMDAwMDE6IDB4MjAwLFxuXHQgICAgICAgICAgICAweDQ4MDAwMDAxOiAweDgwMDAsXG5cdCAgICAgICAgICAgIDB4NTgwMDAwMDE6IDB4ODAwMDAyLFxuXHQgICAgICAgICAgICAweDY4MDAwMDAxOiAweDIsXG5cdCAgICAgICAgICAgIDB4NzgwMDAwMDE6IDB4ODIwMixcblx0ICAgICAgICAgICAgMHg4ODAwMDAwMTogMHg4MDAyLFxuXHQgICAgICAgICAgICAweDk4MDAwMDAxOiAweDgwMDIwMixcblx0ICAgICAgICAgICAgMHhhODAwMDAwMTogMHgyMDIsXG5cdCAgICAgICAgICAgIDB4YjgwMDAwMDE6IDB4ODA4MjAwLFxuXHQgICAgICAgICAgICAweGM4MDAwMDAxOiAweDgwMDIwMCxcblx0ICAgICAgICAgICAgMHhkODAwMDAwMTogMHgwLFxuXHQgICAgICAgICAgICAweGU4MDAwMDAxOiAweDgyMDAsXG5cdCAgICAgICAgICAgIDB4ZjgwMDAwMDE6IDB4ODA4MDAyXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHg0MDA4NDAxMCxcblx0ICAgICAgICAgICAgMHgxMDAwMDAwOiAweDQwMDAsXG5cdCAgICAgICAgICAgIDB4MjAwMDAwMDogMHg4MDAwMCxcblx0ICAgICAgICAgICAgMHgzMDAwMDAwOiAweDQwMDgwMDEwLFxuXHQgICAgICAgICAgICAweDQwMDAwMDA6IDB4NDAwMDAwMTAsXG5cdCAgICAgICAgICAgIDB4NTAwMDAwMDogMHg0MDA4NDAwMCxcblx0ICAgICAgICAgICAgMHg2MDAwMDAwOiAweDQwMDA0MDAwLFxuXHQgICAgICAgICAgICAweDcwMDAwMDA6IDB4MTAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDogMHg4NDAwMCxcblx0ICAgICAgICAgICAgMHg5MDAwMDAwOiAweDQwMDA0MDEwLFxuXHQgICAgICAgICAgICAweGEwMDAwMDA6IDB4NDAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4YjAwMDAwMDogMHg4NDAxMCxcblx0ICAgICAgICAgICAgMHhjMDAwMDAwOiAweDgwMDEwLFxuXHQgICAgICAgICAgICAweGQwMDAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHhlMDAwMDAwOiAweDQwMTAsXG5cdCAgICAgICAgICAgIDB4ZjAwMDAwMDogMHg0MDA4MDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDA6IDB4NDAwMDQwMDAsXG5cdCAgICAgICAgICAgIDB4MTgwMDAwMDogMHg4NDAxMCxcblx0ICAgICAgICAgICAgMHgyODAwMDAwOiAweDEwLFxuXHQgICAgICAgICAgICAweDM4MDAwMDA6IDB4NDAwMDQwMTAsXG5cdCAgICAgICAgICAgIDB4NDgwMDAwMDogMHg0MDA4NDAxMCxcblx0ICAgICAgICAgICAgMHg1ODAwMDAwOiAweDQwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDY4MDAwMDA6IDB4ODAwMDAsXG5cdCAgICAgICAgICAgIDB4NzgwMDAwMDogMHg0MDA4MDAxMCxcblx0ICAgICAgICAgICAgMHg4ODAwMDAwOiAweDgwMDEwLFxuXHQgICAgICAgICAgICAweDk4MDAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHhhODAwMDAwOiAweDQwMDAsXG5cdCAgICAgICAgICAgIDB4YjgwMDAwMDogMHg0MDA4MDAwMCxcblx0ICAgICAgICAgICAgMHhjODAwMDAwOiAweDQwMDAwMDEwLFxuXHQgICAgICAgICAgICAweGQ4MDAwMDA6IDB4ODQwMDAsXG5cdCAgICAgICAgICAgIDB4ZTgwMDAwMDogMHg0MDA4NDAwMCxcblx0ICAgICAgICAgICAgMHhmODAwMDAwOiAweDQwMTAsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxMTAwMDAwMDogMHg0MDA4MDAxMCxcblx0ICAgICAgICAgICAgMHgxMjAwMDAwMDogMHg0MDAwNDAxMCxcblx0ICAgICAgICAgICAgMHgxMzAwMDAwMDogMHg0MDA4NDAwMCxcblx0ICAgICAgICAgICAgMHgxNDAwMDAwMDogMHg0MDA4MDAwMCxcblx0ICAgICAgICAgICAgMHgxNTAwMDAwMDogMHgxMCxcblx0ICAgICAgICAgICAgMHgxNjAwMDAwMDogMHg4NDAxMCxcblx0ICAgICAgICAgICAgMHgxNzAwMDAwMDogMHg0MDAwLFxuXHQgICAgICAgICAgICAweDE4MDAwMDAwOiAweDQwMTAsXG5cdCAgICAgICAgICAgIDB4MTkwMDAwMDA6IDB4ODAwMDAsXG5cdCAgICAgICAgICAgIDB4MWEwMDAwMDA6IDB4ODAwMTAsXG5cdCAgICAgICAgICAgIDB4MWIwMDAwMDA6IDB4NDAwMDAwMTAsXG5cdCAgICAgICAgICAgIDB4MWMwMDAwMDA6IDB4ODQwMDAsXG5cdCAgICAgICAgICAgIDB4MWQwMDAwMDA6IDB4NDAwMDQwMDAsXG5cdCAgICAgICAgICAgIDB4MWUwMDAwMDA6IDB4NDAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWYwMDAwMDA6IDB4NDAwODQwMTAsXG5cdCAgICAgICAgICAgIDB4MTA4MDAwMDA6IDB4ODQwMTAsXG5cdCAgICAgICAgICAgIDB4MTE4MDAwMDA6IDB4ODAwMDAsXG5cdCAgICAgICAgICAgIDB4MTI4MDAwMDA6IDB4NDAwODAwMDAsXG5cdCAgICAgICAgICAgIDB4MTM4MDAwMDA6IDB4NDAwMCxcblx0ICAgICAgICAgICAgMHgxNDgwMDAwMDogMHg0MDAwNDAwMCxcblx0ICAgICAgICAgICAgMHgxNTgwMDAwMDogMHg0MDA4NDAxMCxcblx0ICAgICAgICAgICAgMHgxNjgwMDAwMDogMHgxMCxcblx0ICAgICAgICAgICAgMHgxNzgwMDAwMDogMHg0MDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxODgwMDAwMDogMHg0MDA4NDAwMCxcblx0ICAgICAgICAgICAgMHgxOTgwMDAwMDogMHg0MDAwMDAxMCxcblx0ICAgICAgICAgICAgMHgxYTgwMDAwMDogMHg0MDAwNDAxMCxcblx0ICAgICAgICAgICAgMHgxYjgwMDAwMDogMHg4MDAxMCxcblx0ICAgICAgICAgICAgMHgxYzgwMDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDFkODAwMDAwOiAweDQwMTAsXG5cdCAgICAgICAgICAgIDB4MWU4MDAwMDA6IDB4NDAwODAwMTAsXG5cdCAgICAgICAgICAgIDB4MWY4MDAwMDA6IDB4ODQwMDBcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHtcblx0ICAgICAgICAgICAgMHgwOiAweDEwNCxcblx0ICAgICAgICAgICAgMHgxMDAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgyMDAwMDA6IDB4NDAwMDEwMCxcblx0ICAgICAgICAgICAgMHgzMDAwMDA6IDB4MTAxMDQsXG5cdCAgICAgICAgICAgIDB4NDAwMDAwOiAweDEwMDA0LFxuXHQgICAgICAgICAgICAweDUwMDAwMDogMHg0MDAwMDA0LFxuXHQgICAgICAgICAgICAweDYwMDAwMDogMHg0MDEwMTA0LFxuXHQgICAgICAgICAgICAweDcwMDAwMDogMHg0MDEwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDogMHg0MDAwMDAwLFxuXHQgICAgICAgICAgICAweDkwMDAwMDogMHg0MDEwMTAwLFxuXHQgICAgICAgICAgICAweGEwMDAwMDogMHgxMDEwMCxcblx0ICAgICAgICAgICAgMHhiMDAwMDA6IDB4NDAxMDAwNCxcblx0ICAgICAgICAgICAgMHhjMDAwMDA6IDB4NDAwMDEwNCxcblx0ICAgICAgICAgICAgMHhkMDAwMDA6IDB4MTAwMDAsXG5cdCAgICAgICAgICAgIDB4ZTAwMDAwOiAweDQsXG5cdCAgICAgICAgICAgIDB4ZjAwMDAwOiAweDEwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDogMHg0MDEwMTAwLFxuXHQgICAgICAgICAgICAweDE4MDAwMDogMHg0MDEwMDA0LFxuXHQgICAgICAgICAgICAweDI4MDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDM4MDAwMDogMHg0MDAwMTAwLFxuXHQgICAgICAgICAgICAweDQ4MDAwMDogMHg0MDAwMDA0LFxuXHQgICAgICAgICAgICAweDU4MDAwMDogMHgxMDAwMCxcblx0ICAgICAgICAgICAgMHg2ODAwMDA6IDB4MTAwMDQsXG5cdCAgICAgICAgICAgIDB4NzgwMDAwOiAweDEwNCxcblx0ICAgICAgICAgICAgMHg4ODAwMDA6IDB4NCxcblx0ICAgICAgICAgICAgMHg5ODAwMDA6IDB4MTAwLFxuXHQgICAgICAgICAgICAweGE4MDAwMDogMHg0MDEwMDAwLFxuXHQgICAgICAgICAgICAweGI4MDAwMDogMHgxMDEwNCxcblx0ICAgICAgICAgICAgMHhjODAwMDA6IDB4MTAxMDAsXG5cdCAgICAgICAgICAgIDB4ZDgwMDAwOiAweDQwMDAxMDQsXG5cdCAgICAgICAgICAgIDB4ZTgwMDAwOiAweDQwMTAxMDQsXG5cdCAgICAgICAgICAgIDB4ZjgwMDAwOiAweDQwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwMDogMHg0MDEwMTAwLFxuXHQgICAgICAgICAgICAweDExMDAwMDA6IDB4MTAwMDQsXG5cdCAgICAgICAgICAgIDB4MTIwMDAwMDogMHgxMDAwMCxcblx0ICAgICAgICAgICAgMHgxMzAwMDAwOiAweDQwMDAxMDAsXG5cdCAgICAgICAgICAgIDB4MTQwMDAwMDogMHgxMDAsXG5cdCAgICAgICAgICAgIDB4MTUwMDAwMDogMHg0MDEwMTA0LFxuXHQgICAgICAgICAgICAweDE2MDAwMDA6IDB4NDAwMDAwNCxcblx0ICAgICAgICAgICAgMHgxNzAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MTgwMDAwMDogMHg0MDAwMTA0LFxuXHQgICAgICAgICAgICAweDE5MDAwMDA6IDB4NDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxYTAwMDAwOiAweDQsXG5cdCAgICAgICAgICAgIDB4MWIwMDAwMDogMHgxMDEwMCxcblx0ICAgICAgICAgICAgMHgxYzAwMDAwOiAweDQwMTAwMDAsXG5cdCAgICAgICAgICAgIDB4MWQwMDAwMDogMHgxMDQsXG5cdCAgICAgICAgICAgIDB4MWUwMDAwMDogMHgxMDEwNCxcblx0ICAgICAgICAgICAgMHgxZjAwMDAwOiAweDQwMTAwMDQsXG5cdCAgICAgICAgICAgIDB4MTA4MDAwMDogMHg0MDAwMDAwLFxuXHQgICAgICAgICAgICAweDExODAwMDA6IDB4MTA0LFxuXHQgICAgICAgICAgICAweDEyODAwMDA6IDB4NDAxMDEwMCxcblx0ICAgICAgICAgICAgMHgxMzgwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MTQ4MDAwMDogMHgxMDAwNCxcblx0ICAgICAgICAgICAgMHgxNTgwMDAwOiAweDQwMDAxMDAsXG5cdCAgICAgICAgICAgIDB4MTY4MDAwMDogMHgxMDAsXG5cdCAgICAgICAgICAgIDB4MTc4MDAwMDogMHg0MDEwMDA0LFxuXHQgICAgICAgICAgICAweDE4ODAwMDA6IDB4MTAwMDAsXG5cdCAgICAgICAgICAgIDB4MTk4MDAwMDogMHg0MDEwMTA0LFxuXHQgICAgICAgICAgICAweDFhODAwMDA6IDB4MTAxMDQsXG5cdCAgICAgICAgICAgIDB4MWI4MDAwMDogMHg0MDAwMDA0LFxuXHQgICAgICAgICAgICAweDFjODAwMDA6IDB4NDAwMDEwNCxcblx0ICAgICAgICAgICAgMHgxZDgwMDAwOiAweDQwMTAwMDAsXG5cdCAgICAgICAgICAgIDB4MWU4MDAwMDogMHg0LFxuXHQgICAgICAgICAgICAweDFmODAwMDA6IDB4MTAxMDBcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHtcblx0ICAgICAgICAgICAgMHgwOiAweDgwNDAxMDAwLFxuXHQgICAgICAgICAgICAweDEwMDAwOiAweDgwMDAxMDQwLFxuXHQgICAgICAgICAgICAweDIwMDAwOiAweDQwMTA0MCxcblx0ICAgICAgICAgICAgMHgzMDAwMDogMHg4MDQwMDAwMCxcblx0ICAgICAgICAgICAgMHg0MDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDUwMDAwOiAweDQwMTAwMCxcblx0ICAgICAgICAgICAgMHg2MDAwMDogMHg4MDAwMDA0MCxcblx0ICAgICAgICAgICAgMHg3MDAwMDogMHg0MDAwNDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDA6IDB4ODAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4OTAwMDA6IDB4NDAwMDAwLFxuXHQgICAgICAgICAgICAweGEwMDAwOiAweDQwLFxuXHQgICAgICAgICAgICAweGIwMDAwOiAweDgwMDAxMDAwLFxuXHQgICAgICAgICAgICAweGMwMDAwOiAweDgwNDAwMDQwLFxuXHQgICAgICAgICAgICAweGQwMDAwOiAweDEwNDAsXG5cdCAgICAgICAgICAgIDB4ZTAwMDA6IDB4MTAwMCxcblx0ICAgICAgICAgICAgMHhmMDAwMDogMHg4MDQwMTA0MCxcblx0ICAgICAgICAgICAgMHg4MDAwOiAweDgwMDAxMDQwLFxuXHQgICAgICAgICAgICAweDE4MDAwOiAweDQwLFxuXHQgICAgICAgICAgICAweDI4MDAwOiAweDgwNDAwMDQwLFxuXHQgICAgICAgICAgICAweDM4MDAwOiAweDgwMDAxMDAwLFxuXHQgICAgICAgICAgICAweDQ4MDAwOiAweDQwMTAwMCxcblx0ICAgICAgICAgICAgMHg1ODAwMDogMHg4MDQwMTA0MCxcblx0ICAgICAgICAgICAgMHg2ODAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDc4MDAwOiAweDgwNDAwMDAwLFxuXHQgICAgICAgICAgICAweDg4MDAwOiAweDEwMDAsXG5cdCAgICAgICAgICAgIDB4OTgwMDA6IDB4ODA0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4YTgwMDA6IDB4NDAwMDAwLFxuXHQgICAgICAgICAgICAweGI4MDAwOiAweDEwNDAsXG5cdCAgICAgICAgICAgIDB4YzgwMDA6IDB4ODAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ZDgwMDA6IDB4NDAwMDQwLFxuXHQgICAgICAgICAgICAweGU4MDAwOiAweDQwMTA0MCxcblx0ICAgICAgICAgICAgMHhmODAwMDogMHg4MDAwMDA0MCxcblx0ICAgICAgICAgICAgMHgxMDAwMDA6IDB4NDAwMDQwLFxuXHQgICAgICAgICAgICAweDExMDAwMDogMHg0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4MTIwMDAwOiAweDgwMDAwMDQwLFxuXHQgICAgICAgICAgICAweDEzMDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDE0MDAwMDogMHgxMDQwLFxuXHQgICAgICAgICAgICAweDE1MDAwMDogMHg4MDQwMDA0MCxcblx0ICAgICAgICAgICAgMHgxNjAwMDA6IDB4ODA0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4MTcwMDAwOiAweDgwMDAxMDQwLFxuXHQgICAgICAgICAgICAweDE4MDAwMDogMHg4MDQwMTA0MCxcblx0ICAgICAgICAgICAgMHgxOTAwMDA6IDB4ODAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWEwMDAwOiAweDgwNDAwMDAwLFxuXHQgICAgICAgICAgICAweDFiMDAwMDogMHg0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4MWMwMDAwOiAweDgwMDAxMDAwLFxuXHQgICAgICAgICAgICAweDFkMDAwMDogMHg0MDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWUwMDAwOiAweDQwLFxuXHQgICAgICAgICAgICAweDFmMDAwMDogMHgxMDAwLFxuXHQgICAgICAgICAgICAweDEwODAwMDogMHg4MDQwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMTgwMDA6IDB4ODA0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4MTI4MDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MTM4MDAwOiAweDQwMTAwMCxcblx0ICAgICAgICAgICAgMHgxNDgwMDA6IDB4NDAwMDQwLFxuXHQgICAgICAgICAgICAweDE1ODAwMDogMHg4MDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxNjgwMDA6IDB4ODAwMDEwNDAsXG5cdCAgICAgICAgICAgIDB4MTc4MDAwOiAweDQwLFxuXHQgICAgICAgICAgICAweDE4ODAwMDogMHg4MDAwMDA0MCxcblx0ICAgICAgICAgICAgMHgxOTgwMDA6IDB4MTAwMCxcblx0ICAgICAgICAgICAgMHgxYTgwMDA6IDB4ODAwMDEwMDAsXG5cdCAgICAgICAgICAgIDB4MWI4MDAwOiAweDgwNDAwMDQwLFxuXHQgICAgICAgICAgICAweDFjODAwMDogMHgxMDQwLFxuXHQgICAgICAgICAgICAweDFkODAwMDogMHg4MDQwMTAwMCxcblx0ICAgICAgICAgICAgMHgxZTgwMDA6IDB4NDAwMDAwLFxuXHQgICAgICAgICAgICAweDFmODAwMDogMHg0MDEwNDBcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHtcblx0ICAgICAgICAgICAgMHgwOiAweDgwLFxuXHQgICAgICAgICAgICAweDEwMDA6IDB4MTA0MDAwMCxcblx0ICAgICAgICAgICAgMHgyMDAwOiAweDQwMDAwLFxuXHQgICAgICAgICAgICAweDMwMDA6IDB4MjAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4NDAwMDogMHgyMDA0MDA4MCxcblx0ICAgICAgICAgICAgMHg1MDAwOiAweDEwMDAwODAsXG5cdCAgICAgICAgICAgIDB4NjAwMDogMHgyMTAwMDA4MCxcblx0ICAgICAgICAgICAgMHg3MDAwOiAweDQwMDgwLFxuXHQgICAgICAgICAgICAweDgwMDA6IDB4MTAwMDAwMCxcblx0ICAgICAgICAgICAgMHg5MDAwOiAweDIwMDQwMDAwLFxuXHQgICAgICAgICAgICAweGEwMDA6IDB4MjAwMDAwODAsXG5cdCAgICAgICAgICAgIDB4YjAwMDogMHgyMTA0MDA4MCxcblx0ICAgICAgICAgICAgMHhjMDAwOiAweDIxMDQwMDAwLFxuXHQgICAgICAgICAgICAweGQwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHhlMDAwOiAweDEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4ZjAwMDogMHgyMTAwMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDA6IDB4MTA0MDA4MCxcblx0ICAgICAgICAgICAgMHgxODAwOiAweDIxMDAwMDgwLFxuXHQgICAgICAgICAgICAweDI4MDA6IDB4ODAsXG5cdCAgICAgICAgICAgIDB4MzgwMDogMHgxMDQwMDAwLFxuXHQgICAgICAgICAgICAweDQ4MDA6IDB4NDAwMDAsXG5cdCAgICAgICAgICAgIDB4NTgwMDogMHgyMDA0MDA4MCxcblx0ICAgICAgICAgICAgMHg2ODAwOiAweDIxMDQwMDAwLFxuXHQgICAgICAgICAgICAweDc4MDA6IDB4MjAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ODgwMDogMHgyMDA0MDAwMCxcblx0ICAgICAgICAgICAgMHg5ODAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4YTgwMDogMHgyMTA0MDA4MCxcblx0ICAgICAgICAgICAgMHhiODAwOiAweDEwMDAwODAsXG5cdCAgICAgICAgICAgIDB4YzgwMDogMHgyMDAwMDA4MCxcblx0ICAgICAgICAgICAgMHhkODAwOiAweDIxMDAwMDAwLFxuXHQgICAgICAgICAgICAweGU4MDA6IDB4MTAwMDAwMCxcblx0ICAgICAgICAgICAgMHhmODAwOiAweDQwMDgwLFxuXHQgICAgICAgICAgICAweDEwMDAwOiAweDQwMDAwLFxuXHQgICAgICAgICAgICAweDExMDAwOiAweDgwLFxuXHQgICAgICAgICAgICAweDEyMDAwOiAweDIwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDEzMDAwOiAweDIxMDAwMDgwLFxuXHQgICAgICAgICAgICAweDE0MDAwOiAweDEwMDAwODAsXG5cdCAgICAgICAgICAgIDB4MTUwMDA6IDB4MjEwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTYwMDA6IDB4MjAwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MTcwMDA6IDB4MTAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxODAwMDogMHgyMTA0MDA4MCxcblx0ICAgICAgICAgICAgMHgxOTAwMDogMHgyMTAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxYTAwMDogMHgxMDQwMDAwLFxuXHQgICAgICAgICAgICAweDFiMDAwOiAweDIwMDQwMDAwLFxuXHQgICAgICAgICAgICAweDFjMDAwOiAweDQwMDgwLFxuXHQgICAgICAgICAgICAweDFkMDAwOiAweDIwMDAwMDgwLFxuXHQgICAgICAgICAgICAweDFlMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MWYwMDA6IDB4MTA0MDA4MCxcblx0ICAgICAgICAgICAgMHgxMDgwMDogMHgyMTAwMDA4MCxcblx0ICAgICAgICAgICAgMHgxMTgwMDogMHgxMDAwMDAwLFxuXHQgICAgICAgICAgICAweDEyODAwOiAweDEwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTM4MDA6IDB4MjAwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MTQ4MDA6IDB4MjAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTU4MDA6IDB4MTA0MDA4MCxcblx0ICAgICAgICAgICAgMHgxNjgwMDogMHg4MCxcblx0ICAgICAgICAgICAgMHgxNzgwMDogMHgyMTA0MDAwMCxcblx0ICAgICAgICAgICAgMHgxODgwMDogMHg0MDA4MCxcblx0ICAgICAgICAgICAgMHgxOTgwMDogMHgyMTA0MDA4MCxcblx0ICAgICAgICAgICAgMHgxYTgwMDogMHgwLFxuXHQgICAgICAgICAgICAweDFiODAwOiAweDIxMDAwMDAwLFxuXHQgICAgICAgICAgICAweDFjODAwOiAweDEwMDAwODAsXG5cdCAgICAgICAgICAgIDB4MWQ4MDA6IDB4NDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWU4MDA6IDB4MjAwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWY4MDA6IDB4MjAwMDAwODBcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHtcblx0ICAgICAgICAgICAgMHgwOiAweDEwMDAwMDA4LFxuXHQgICAgICAgICAgICAweDEwMDogMHgyMDAwLFxuXHQgICAgICAgICAgICAweDIwMDogMHgxMDIwMDAwMCxcblx0ICAgICAgICAgICAgMHgzMDA6IDB4MTAyMDIwMDgsXG5cdCAgICAgICAgICAgIDB4NDAwOiAweDEwMDAyMDAwLFxuXHQgICAgICAgICAgICAweDUwMDogMHgyMDAwMDAsXG5cdCAgICAgICAgICAgIDB4NjAwOiAweDIwMDAwOCxcblx0ICAgICAgICAgICAgMHg3MDA6IDB4MTAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4OTAwOiAweDEwMDAyMDA4LFxuXHQgICAgICAgICAgICAweGEwMDogMHgyMDIwMDAsXG5cdCAgICAgICAgICAgIDB4YjAwOiAweDgsXG5cdCAgICAgICAgICAgIDB4YzAwOiAweDEwMjAwMDA4LFxuXHQgICAgICAgICAgICAweGQwMDogMHgyMDIwMDgsXG5cdCAgICAgICAgICAgIDB4ZTAwOiAweDIwMDgsXG5cdCAgICAgICAgICAgIDB4ZjAwOiAweDEwMjAyMDAwLFxuXHQgICAgICAgICAgICAweDgwOiAweDEwMjAwMDAwLFxuXHQgICAgICAgICAgICAweDE4MDogMHgxMDIwMjAwOCxcblx0ICAgICAgICAgICAgMHgyODA6IDB4OCxcblx0ICAgICAgICAgICAgMHgzODA6IDB4MjAwMDAwLFxuXHQgICAgICAgICAgICAweDQ4MDogMHgyMDIwMDgsXG5cdCAgICAgICAgICAgIDB4NTgwOiAweDEwMDAwMDA4LFxuXHQgICAgICAgICAgICAweDY4MDogMHgxMDAwMjAwMCxcblx0ICAgICAgICAgICAgMHg3ODA6IDB4MjAwOCxcblx0ICAgICAgICAgICAgMHg4ODA6IDB4MjAwMDA4LFxuXHQgICAgICAgICAgICAweDk4MDogMHgyMDAwLFxuXHQgICAgICAgICAgICAweGE4MDogMHgxMDAwMjAwOCxcblx0ICAgICAgICAgICAgMHhiODA6IDB4MTAyMDAwMDgsXG5cdCAgICAgICAgICAgIDB4YzgwOiAweDAsXG5cdCAgICAgICAgICAgIDB4ZDgwOiAweDEwMjAyMDAwLFxuXHQgICAgICAgICAgICAweGU4MDogMHgyMDIwMDAsXG5cdCAgICAgICAgICAgIDB4ZjgwOiAweDEwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDEwMDA6IDB4MTAwMDIwMDAsXG5cdCAgICAgICAgICAgIDB4MTEwMDogMHgxMDIwMDAwOCxcblx0ICAgICAgICAgICAgMHgxMjAwOiAweDEwMjAyMDA4LFxuXHQgICAgICAgICAgICAweDEzMDA6IDB4MjAwOCxcblx0ICAgICAgICAgICAgMHgxNDAwOiAweDIwMDAwMCxcblx0ICAgICAgICAgICAgMHgxNTAwOiAweDEwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDE2MDA6IDB4MTAwMDAwMDgsXG5cdCAgICAgICAgICAgIDB4MTcwMDogMHgyMDIwMDAsXG5cdCAgICAgICAgICAgIDB4MTgwMDogMHgyMDIwMDgsXG5cdCAgICAgICAgICAgIDB4MTkwMDogMHgwLFxuXHQgICAgICAgICAgICAweDFhMDA6IDB4OCxcblx0ICAgICAgICAgICAgMHgxYjAwOiAweDEwMjAwMDAwLFxuXHQgICAgICAgICAgICAweDFjMDA6IDB4MjAwMCxcblx0ICAgICAgICAgICAgMHgxZDAwOiAweDEwMDAyMDA4LFxuXHQgICAgICAgICAgICAweDFlMDA6IDB4MTAyMDIwMDAsXG5cdCAgICAgICAgICAgIDB4MWYwMDogMHgyMDAwMDgsXG5cdCAgICAgICAgICAgIDB4MTA4MDogMHg4LFxuXHQgICAgICAgICAgICAweDExODA6IDB4MjAyMDAwLFxuXHQgICAgICAgICAgICAweDEyODA6IDB4MjAwMDAwLFxuXHQgICAgICAgICAgICAweDEzODA6IDB4MTAwMDAwMDgsXG5cdCAgICAgICAgICAgIDB4MTQ4MDogMHgxMDAwMjAwMCxcblx0ICAgICAgICAgICAgMHgxNTgwOiAweDIwMDgsXG5cdCAgICAgICAgICAgIDB4MTY4MDogMHgxMDIwMjAwOCxcblx0ICAgICAgICAgICAgMHgxNzgwOiAweDEwMjAwMDAwLFxuXHQgICAgICAgICAgICAweDE4ODA6IDB4MTAyMDIwMDAsXG5cdCAgICAgICAgICAgIDB4MTk4MDogMHgxMDIwMDAwOCxcblx0ICAgICAgICAgICAgMHgxYTgwOiAweDIwMDAsXG5cdCAgICAgICAgICAgIDB4MWI4MDogMHgyMDIwMDgsXG5cdCAgICAgICAgICAgIDB4MWM4MDogMHgyMDAwMDgsXG5cdCAgICAgICAgICAgIDB4MWQ4MDogMHgwLFxuXHQgICAgICAgICAgICAweDFlODA6IDB4MTAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWY4MDogMHgxMDAwMjAwOFxuXHQgICAgICAgIH0sXG5cdCAgICAgICAge1xuXHQgICAgICAgICAgICAweDA6IDB4MTAwMDAwLFxuXHQgICAgICAgICAgICAweDEwOiAweDIwMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MjA6IDB4NDAwLFxuXHQgICAgICAgICAgICAweDMwOiAweDEwMDQwMSxcblx0ICAgICAgICAgICAgMHg0MDogMHgyMTAwNDAxLFxuXHQgICAgICAgICAgICAweDUwOiAweDAsXG5cdCAgICAgICAgICAgIDB4NjA6IDB4MSxcblx0ICAgICAgICAgICAgMHg3MDogMHgyMTAwMDAxLFxuXHQgICAgICAgICAgICAweDgwOiAweDIwMDA0MDAsXG5cdCAgICAgICAgICAgIDB4OTA6IDB4MTAwMDAxLFxuXHQgICAgICAgICAgICAweGEwOiAweDIwMDAwMDEsXG5cdCAgICAgICAgICAgIDB4YjA6IDB4MjEwMDQwMCxcblx0ICAgICAgICAgICAgMHhjMDogMHgyMTAwMDAwLFxuXHQgICAgICAgICAgICAweGQwOiAweDQwMSxcblx0ICAgICAgICAgICAgMHhlMDogMHgxMDA0MDAsXG5cdCAgICAgICAgICAgIDB4ZjA6IDB4MjAwMDAwMCxcblx0ICAgICAgICAgICAgMHg4OiAweDIxMDAwMDEsXG5cdCAgICAgICAgICAgIDB4MTg6IDB4MCxcblx0ICAgICAgICAgICAgMHgyODogMHgyMDAwNDAxLFxuXHQgICAgICAgICAgICAweDM4OiAweDIxMDA0MDAsXG5cdCAgICAgICAgICAgIDB4NDg6IDB4MTAwMDAwLFxuXHQgICAgICAgICAgICAweDU4OiAweDIwMDAwMDEsXG5cdCAgICAgICAgICAgIDB4Njg6IDB4MjAwMDAwMCxcblx0ICAgICAgICAgICAgMHg3ODogMHg0MDEsXG5cdCAgICAgICAgICAgIDB4ODg6IDB4MTAwNDAxLFxuXHQgICAgICAgICAgICAweDk4OiAweDIwMDA0MDAsXG5cdCAgICAgICAgICAgIDB4YTg6IDB4MjEwMDAwMCxcblx0ICAgICAgICAgICAgMHhiODogMHgxMDAwMDEsXG5cdCAgICAgICAgICAgIDB4Yzg6IDB4NDAwLFxuXHQgICAgICAgICAgICAweGQ4OiAweDIxMDA0MDEsXG5cdCAgICAgICAgICAgIDB4ZTg6IDB4MSxcblx0ICAgICAgICAgICAgMHhmODogMHgxMDA0MDAsXG5cdCAgICAgICAgICAgIDB4MTAwOiAweDIwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTEwOiAweDEwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMjA6IDB4MjAwMDQwMSxcblx0ICAgICAgICAgICAgMHgxMzA6IDB4MjEwMDAwMSxcblx0ICAgICAgICAgICAgMHgxNDA6IDB4MTAwMDAxLFxuXHQgICAgICAgICAgICAweDE1MDogMHgyMDAwNDAwLFxuXHQgICAgICAgICAgICAweDE2MDogMHgyMTAwNDAwLFxuXHQgICAgICAgICAgICAweDE3MDogMHgxMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MTgwOiAweDQwMSxcblx0ICAgICAgICAgICAgMHgxOTA6IDB4MjEwMDQwMSxcblx0ICAgICAgICAgICAgMHgxYTA6IDB4MTAwNDAwLFxuXHQgICAgICAgICAgICAweDFiMDogMHgxLFxuXHQgICAgICAgICAgICAweDFjMDogMHgwLFxuXHQgICAgICAgICAgICAweDFkMDogMHgyMTAwMDAwLFxuXHQgICAgICAgICAgICAweDFlMDogMHgyMDAwMDAxLFxuXHQgICAgICAgICAgICAweDFmMDogMHg0MDAsXG5cdCAgICAgICAgICAgIDB4MTA4OiAweDEwMDQwMCxcblx0ICAgICAgICAgICAgMHgxMTg6IDB4MjAwMDQwMSxcblx0ICAgICAgICAgICAgMHgxMjg6IDB4MjEwMDAwMSxcblx0ICAgICAgICAgICAgMHgxMzg6IDB4MSxcblx0ICAgICAgICAgICAgMHgxNDg6IDB4MjAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxNTg6IDB4MTAwMDAwLFxuXHQgICAgICAgICAgICAweDE2ODogMHg0MDEsXG5cdCAgICAgICAgICAgIDB4MTc4OiAweDIxMDA0MDAsXG5cdCAgICAgICAgICAgIDB4MTg4OiAweDIwMDAwMDEsXG5cdCAgICAgICAgICAgIDB4MTk4OiAweDIxMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWE4OiAweDAsXG5cdCAgICAgICAgICAgIDB4MWI4OiAweDIxMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MWM4OiAweDEwMDQwMSxcblx0ICAgICAgICAgICAgMHgxZDg6IDB4NDAwLFxuXHQgICAgICAgICAgICAweDFlODogMHgyMDAwNDAwLFxuXHQgICAgICAgICAgICAweDFmODogMHgxMDAwMDFcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHtcblx0ICAgICAgICAgICAgMHgwOiAweDgwMDA4MjAsXG5cdCAgICAgICAgICAgIDB4MTogMHgyMDAwMCxcblx0ICAgICAgICAgICAgMHgyOiAweDgwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MzogMHgyMCxcblx0ICAgICAgICAgICAgMHg0OiAweDIwMDIwLFxuXHQgICAgICAgICAgICAweDU6IDB4ODAyMDgyMCxcblx0ICAgICAgICAgICAgMHg2OiAweDgwMjA4MDAsXG5cdCAgICAgICAgICAgIDB4NzogMHg4MDAsXG5cdCAgICAgICAgICAgIDB4ODogMHg4MDIwMDAwLFxuXHQgICAgICAgICAgICAweDk6IDB4ODAwMDgwMCxcblx0ICAgICAgICAgICAgMHhhOiAweDIwODAwLFxuXHQgICAgICAgICAgICAweGI6IDB4ODAyMDAyMCxcblx0ICAgICAgICAgICAgMHhjOiAweDgyMCxcblx0ICAgICAgICAgICAgMHhkOiAweDAsXG5cdCAgICAgICAgICAgIDB4ZTogMHg4MDAwMDIwLFxuXHQgICAgICAgICAgICAweGY6IDB4MjA4MjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDA6IDB4ODAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDAxOiAweDgwMjA4MjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDI6IDB4ODAwMDgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwMzogMHg4MDAwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA0OiAweDgwMjAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDU6IDB4MjA4MDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDY6IDB4MjA4MjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDc6IDB4MjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDg6IDB4ODAwMDAyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwOTogMHg4MjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMGE6IDB4MjAwMjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMGI6IDB4ODAyMDgwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwYzogMHgwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDBkOiAweDgwMjAwMjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMGU6IDB4ODAwMDgwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwZjogMHgyMDAwMCxcblx0ICAgICAgICAgICAgMHgxMDogMHgyMDgyMCxcblx0ICAgICAgICAgICAgMHgxMTogMHg4MDIwODAwLFxuXHQgICAgICAgICAgICAweDEyOiAweDIwLFxuXHQgICAgICAgICAgICAweDEzOiAweDgwMCxcblx0ICAgICAgICAgICAgMHgxNDogMHg4MDAwODAwLFxuXHQgICAgICAgICAgICAweDE1OiAweDgwMDAwMjAsXG5cdCAgICAgICAgICAgIDB4MTY6IDB4ODAyMDAyMCxcblx0ICAgICAgICAgICAgMHgxNzogMHgyMDAwMCxcblx0ICAgICAgICAgICAgMHgxODogMHgwLFxuXHQgICAgICAgICAgICAweDE5OiAweDIwMDIwLFxuXHQgICAgICAgICAgICAweDFhOiAweDgwMjAwMDAsXG5cdCAgICAgICAgICAgIDB4MWI6IDB4ODAwMDgyMCxcblx0ICAgICAgICAgICAgMHgxYzogMHg4MDIwODIwLFxuXHQgICAgICAgICAgICAweDFkOiAweDIwODAwLFxuXHQgICAgICAgICAgICAweDFlOiAweDgyMCxcblx0ICAgICAgICAgICAgMHgxZjogMHg4MDAwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDEwOiAweDIwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDExOiAweDgwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxMjogMHg4MDIwMDIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDEzOiAweDIwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDE0OiAweDIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDE1OiAweDgwMjAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMTY6IDB4ODAwMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxNzogMHg4MDAwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDE4OiAweDgwMjA4MjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMTk6IDB4ODAwMDAyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxYTogMHg4MDAwODAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDFiOiAweDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMWM6IDB4MjA4MDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMWQ6IDB4ODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDFlOiAweDIwMDIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDFmOiAweDgwMjA4MDBcblx0ICAgICAgICB9XG5cdCAgICBdO1xuXG5cdCAgICAvLyBNYXNrcyB0aGF0IHNlbGVjdCB0aGUgU0JPWCBpbnB1dFxuXHQgICAgdmFyIFNCT1hfTUFTSyA9IFtcblx0ICAgICAgICAweGY4MDAwMDAxLCAweDFmODAwMDAwLCAweDAxZjgwMDAwLCAweDAwMWY4MDAwLFxuXHQgICAgICAgIDB4MDAwMWY4MDAsIDB4MDAwMDFmODAsIDB4MDAwMDAxZjgsIDB4ODAwMDAwMWZcblx0ICAgIF07XG5cblx0ICAgIC8qKlxuXHQgICAgICogREVTIGJsb2NrIGNpcGhlciBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBERVMgPSBDX2FsZ28uREVTID0gQmxvY2tDaXBoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGtleSA9IHRoaXMuX2tleTtcblx0ICAgICAgICAgICAgdmFyIGtleVdvcmRzID0ga2V5LndvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFNlbGVjdCA1NiBiaXRzIGFjY29yZGluZyB0byBQQzFcblx0ICAgICAgICAgICAgdmFyIGtleUJpdHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA1NjsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIga2V5Qml0UG9zID0gUEMxW2ldIC0gMTtcblx0ICAgICAgICAgICAgICAgIGtleUJpdHNbaV0gPSAoa2V5V29yZHNba2V5Qml0UG9zID4+PiA1XSA+Pj4gKDMxIC0ga2V5Qml0UG9zICUgMzIpKSAmIDE7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBBc3NlbWJsZSAxNiBzdWJrZXlzXG5cdCAgICAgICAgICAgIHZhciBzdWJLZXlzID0gdGhpcy5fc3ViS2V5cyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBuU3ViS2V5ID0gMDsgblN1YktleSA8IDE2OyBuU3ViS2V5KyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBzdWJrZXlcblx0ICAgICAgICAgICAgICAgIHZhciBzdWJLZXkgPSBzdWJLZXlzW25TdWJLZXldID0gW107XG5cblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgICAgICB2YXIgYml0U2hpZnQgPSBCSVRfU0hJRlRTW25TdWJLZXldO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTZWxlY3QgNDggYml0cyBhY2NvcmRpbmcgdG8gUEMyXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBTZWxlY3QgZnJvbSB0aGUgbGVmdCAyOCBrZXkgYml0c1xuXHQgICAgICAgICAgICAgICAgICAgIHN1YktleVsoaSAvIDYpIHwgMF0gfD0ga2V5Qml0c1soKFBDMltpXSAtIDEpICsgYml0U2hpZnQpICUgMjhdIDw8ICgzMSAtIGkgJSA2KTtcblxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFNlbGVjdCBmcm9tIHRoZSByaWdodCAyOCBrZXkgYml0c1xuXHQgICAgICAgICAgICAgICAgICAgIHN1YktleVs0ICsgKChpIC8gNikgfCAwKV0gfD0ga2V5Qml0c1syOCArICgoKFBDMltpICsgMjRdIC0gMSkgKyBiaXRTaGlmdCkgJSAyOCldIDw8ICgzMSAtIGkgJSA2KTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gU2luY2UgZWFjaCBzdWJrZXkgaXMgYXBwbGllZCB0byBhbiBleHBhbmRlZCAzMi1iaXQgaW5wdXQsXG5cdCAgICAgICAgICAgICAgICAvLyB0aGUgc3Via2V5IGNhbiBiZSBicm9rZW4gaW50byA4IHZhbHVlcyBzY2FsZWQgdG8gMzItYml0cyxcblx0ICAgICAgICAgICAgICAgIC8vIHdoaWNoIGFsbG93cyB0aGUga2V5IHRvIGJlIHVzZWQgd2l0aG91dCBleHBhbnNpb25cblx0ICAgICAgICAgICAgICAgIHN1YktleVswXSA9IChzdWJLZXlbMF0gPDwgMSkgfCAoc3ViS2V5WzBdID4+PiAzMSk7XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IDc7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHN1YktleVtpXSA9IHN1YktleVtpXSA+Pj4gKChpIC0gMSkgKiA0ICsgMyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBzdWJLZXlbN10gPSAoc3ViS2V5WzddIDw8IDUpIHwgKHN1YktleVs3XSA+Pj4gMjcpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBpbnZlcnNlIHN1YmtleXNcblx0ICAgICAgICAgICAgdmFyIGludlN1YktleXMgPSB0aGlzLl9pbnZTdWJLZXlzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgaW52U3ViS2V5c1tpXSA9IHN1YktleXNbMTUgLSBpXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBlbmNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5fc3ViS2V5cyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGRlY3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICB0aGlzLl9kb0NyeXB0QmxvY2soTSwgb2Zmc2V0LCB0aGlzLl9pbnZTdWJLZXlzKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvQ3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCwgc3ViS2V5cykge1xuXHQgICAgICAgICAgICAvLyBHZXQgaW5wdXRcblx0ICAgICAgICAgICAgdGhpcy5fbEJsb2NrID0gTVtvZmZzZXRdO1xuXHQgICAgICAgICAgICB0aGlzLl9yQmxvY2sgPSBNW29mZnNldCArIDFdO1xuXG5cdCAgICAgICAgICAgIC8vIEluaXRpYWwgcGVybXV0YXRpb25cblx0ICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDQsICAweDBmMGYwZjBmKTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDE2LCAweDAwMDBmZmZmKTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VSTC5jYWxsKHRoaXMsIDIsICAweDMzMzMzMzMzKTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VSTC5jYWxsKHRoaXMsIDgsICAweDAwZmYwMGZmKTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDEsICAweDU1NTU1NTU1KTtcblxuXHQgICAgICAgICAgICAvLyBSb3VuZHNcblx0ICAgICAgICAgICAgZm9yICh2YXIgcm91bmQgPSAwOyByb3VuZCA8IDE2OyByb3VuZCsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBzdWJLZXkgPSBzdWJLZXlzW3JvdW5kXTtcblx0ICAgICAgICAgICAgICAgIHZhciBsQmxvY2sgPSB0aGlzLl9sQmxvY2s7XG5cdCAgICAgICAgICAgICAgICB2YXIgckJsb2NrID0gdGhpcy5fckJsb2NrO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBGZWlzdGVsIGZ1bmN0aW9uXG5cdCAgICAgICAgICAgICAgICB2YXIgZiA9IDA7XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGYgfD0gU0JPWF9QW2ldWygockJsb2NrIF4gc3ViS2V5W2ldKSAmIFNCT1hfTUFTS1tpXSkgPj4+IDBdO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgdGhpcy5fbEJsb2NrID0gckJsb2NrO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fckJsb2NrID0gbEJsb2NrIF4gZjtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFVuZG8gc3dhcCBmcm9tIGxhc3Qgcm91bmRcblx0ICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl9sQmxvY2s7XG5cdCAgICAgICAgICAgIHRoaXMuX2xCbG9jayA9IHRoaXMuX3JCbG9jaztcblx0ICAgICAgICAgICAgdGhpcy5fckJsb2NrID0gdDtcblxuXHQgICAgICAgICAgICAvLyBGaW5hbCBwZXJtdXRhdGlvblxuXHQgICAgICAgICAgICBleGNoYW5nZUxSLmNhbGwodGhpcywgMSwgIDB4NTU1NTU1NTUpO1xuXHQgICAgICAgICAgICBleGNoYW5nZVJMLmNhbGwodGhpcywgOCwgIDB4MDBmZjAwZmYpO1xuXHQgICAgICAgICAgICBleGNoYW5nZVJMLmNhbGwodGhpcywgMiwgIDB4MzMzMzMzMzMpO1xuXHQgICAgICAgICAgICBleGNoYW5nZUxSLmNhbGwodGhpcywgMTYsIDB4MDAwMGZmZmYpO1xuXHQgICAgICAgICAgICBleGNoYW5nZUxSLmNhbGwodGhpcywgNCwgIDB4MGYwZjBmMGYpO1xuXG5cdCAgICAgICAgICAgIC8vIFNldCBvdXRwdXRcblx0ICAgICAgICAgICAgTVtvZmZzZXRdID0gdGhpcy5fbEJsb2NrO1xuXHQgICAgICAgICAgICBNW29mZnNldCArIDFdID0gdGhpcy5fckJsb2NrO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBrZXlTaXplOiA2NC8zMixcblxuXHQgICAgICAgIGl2U2l6ZTogNjQvMzIsXG5cblx0ICAgICAgICBibG9ja1NpemU6IDY0LzMyXG5cdCAgICB9KTtcblxuXHQgICAgLy8gU3dhcCBiaXRzIGFjcm9zcyB0aGUgbGVmdCBhbmQgcmlnaHQgd29yZHNcblx0ICAgIGZ1bmN0aW9uIGV4Y2hhbmdlTFIob2Zmc2V0LCBtYXNrKSB7XG5cdCAgICAgICAgdmFyIHQgPSAoKHRoaXMuX2xCbG9jayA+Pj4gb2Zmc2V0KSBeIHRoaXMuX3JCbG9jaykgJiBtYXNrO1xuXHQgICAgICAgIHRoaXMuX3JCbG9jayBePSB0O1xuXHQgICAgICAgIHRoaXMuX2xCbG9jayBePSB0IDw8IG9mZnNldDtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gZXhjaGFuZ2VSTChvZmZzZXQsIG1hc2spIHtcblx0ICAgICAgICB2YXIgdCA9ICgodGhpcy5fckJsb2NrID4+PiBvZmZzZXQpIF4gdGhpcy5fbEJsb2NrKSAmIG1hc2s7XG5cdCAgICAgICAgdGhpcy5fbEJsb2NrIF49IHQ7XG5cdCAgICAgICAgdGhpcy5fckJsb2NrIF49IHQgPDwgb2Zmc2V0O1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9ucyB0byB0aGUgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgY2lwaGVydGV4dCA9IENyeXB0b0pTLkRFUy5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTtcblx0ICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLkRFUy5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcblx0ICAgICAqL1xuXHQgICAgQy5ERVMgPSBCbG9ja0NpcGhlci5fY3JlYXRlSGVscGVyKERFUyk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogVHJpcGxlLURFUyBibG9jayBjaXBoZXIgYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgVHJpcGxlREVTID0gQ19hbGdvLlRyaXBsZURFUyA9IEJsb2NrQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXk7XG5cdCAgICAgICAgICAgIHZhciBrZXlXb3JkcyA9IGtleS53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBDcmVhdGUgREVTIGluc3RhbmNlc1xuXHQgICAgICAgICAgICB0aGlzLl9kZXMxID0gREVTLmNyZWF0ZUVuY3J5cHRvcihXb3JkQXJyYXkuY3JlYXRlKGtleVdvcmRzLnNsaWNlKDAsIDIpKSk7XG5cdCAgICAgICAgICAgIHRoaXMuX2RlczIgPSBERVMuY3JlYXRlRW5jcnlwdG9yKFdvcmRBcnJheS5jcmVhdGUoa2V5V29yZHMuc2xpY2UoMiwgNCkpKTtcblx0ICAgICAgICAgICAgdGhpcy5fZGVzMyA9IERFUy5jcmVhdGVFbmNyeXB0b3IoV29yZEFycmF5LmNyZWF0ZShrZXlXb3Jkcy5zbGljZSg0LCA2KSkpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBlbmNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZGVzMS5lbmNyeXB0QmxvY2soTSwgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgdGhpcy5fZGVzMi5kZWNyeXB0QmxvY2soTSwgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgdGhpcy5fZGVzMy5lbmNyeXB0QmxvY2soTSwgb2Zmc2V0KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgZGVjcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2RlczMuZGVjcnlwdEJsb2NrKE0sIG9mZnNldCk7XG5cdCAgICAgICAgICAgIHRoaXMuX2RlczIuZW5jcnlwdEJsb2NrKE0sIG9mZnNldCk7XG5cdCAgICAgICAgICAgIHRoaXMuX2RlczEuZGVjcnlwdEJsb2NrKE0sIG9mZnNldCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGtleVNpemU6IDE5Mi8zMixcblxuXHQgICAgICAgIGl2U2l6ZTogNjQvMzIsXG5cblx0ICAgICAgICBibG9ja1NpemU6IDY0LzMyXG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5UcmlwbGVERVMuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7XG5cdCAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5UcmlwbGVERVMuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XG5cdCAgICAgKi9cblx0ICAgIEMuVHJpcGxlREVTID0gQmxvY2tDaXBoZXIuX2NyZWF0ZUhlbHBlcihUcmlwbGVERVMpO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLlRyaXBsZURFUztcblxufSkpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvZGwvfi9jcnlwdG8tanMvdHJpcGxlZGVzLmpzXG4gKiogbW9kdWxlIGlkID0gNzBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9lbmMtYmFzZTY0XCIpLCByZXF1aXJlKFwiLi9tZDVcIiksIHJlcXVpcmUoXCIuL2V2cGtkZlwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vZW5jLWJhc2U2NFwiLCBcIi4vbWQ1XCIsIFwiLi9ldnBrZGZcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgU3RyZWFtQ2lwaGVyID0gQ19saWIuU3RyZWFtQ2lwaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLyoqXG5cdCAgICAgKiBSQzQgc3RyZWFtIGNpcGhlciBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBSQzQgPSBDX2FsZ28uUkM0ID0gU3RyZWFtQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXk7XG5cdCAgICAgICAgICAgIHZhciBrZXlXb3JkcyA9IGtleS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGtleVNpZ0J5dGVzID0ga2V5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIEluaXQgc2JveFxuXHQgICAgICAgICAgICB2YXIgUyA9IHRoaXMuX1MgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgU1tpXSA9IGk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBLZXkgc2V0dXBcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSAwOyBpIDwgMjU2OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBrZXlCeXRlSW5kZXggPSBpICUga2V5U2lnQnl0ZXM7XG5cdCAgICAgICAgICAgICAgICB2YXIga2V5Qnl0ZSA9IChrZXlXb3Jkc1trZXlCeXRlSW5kZXggPj4+IDJdID4+PiAoMjQgLSAoa2V5Qnl0ZUluZGV4ICUgNCkgKiA4KSkgJiAweGZmO1xuXG5cdCAgICAgICAgICAgICAgICBqID0gKGogKyBTW2ldICsga2V5Qnl0ZSkgJSAyNTY7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFN3YXBcblx0ICAgICAgICAgICAgICAgIHZhciB0ID0gU1tpXTtcblx0ICAgICAgICAgICAgICAgIFNbaV0gPSBTW2pdO1xuXHQgICAgICAgICAgICAgICAgU1tqXSA9IHQ7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBDb3VudGVyc1xuXHQgICAgICAgICAgICB0aGlzLl9pID0gdGhpcy5faiA9IDA7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICBNW29mZnNldF0gXj0gZ2VuZXJhdGVLZXlzdHJlYW1Xb3JkLmNhbGwodGhpcyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGtleVNpemU6IDI1Ni8zMixcblxuXHQgICAgICAgIGl2U2l6ZTogMFxuXHQgICAgfSk7XG5cblx0ICAgIGZ1bmN0aW9uIGdlbmVyYXRlS2V5c3RyZWFtV29yZCgpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICB2YXIgUyA9IHRoaXMuX1M7XG5cdCAgICAgICAgdmFyIGkgPSB0aGlzLl9pO1xuXHQgICAgICAgIHZhciBqID0gdGhpcy5fajtcblxuXHQgICAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbSB3b3JkXG5cdCAgICAgICAgdmFyIGtleXN0cmVhbVdvcmQgPSAwO1xuXHQgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgNDsgbisrKSB7XG5cdCAgICAgICAgICAgIGkgPSAoaSArIDEpICUgMjU2O1xuXHQgICAgICAgICAgICBqID0gKGogKyBTW2ldKSAlIDI1NjtcblxuXHQgICAgICAgICAgICAvLyBTd2FwXG5cdCAgICAgICAgICAgIHZhciB0ID0gU1tpXTtcblx0ICAgICAgICAgICAgU1tpXSA9IFNbal07XG5cdCAgICAgICAgICAgIFNbal0gPSB0O1xuXG5cdCAgICAgICAgICAgIGtleXN0cmVhbVdvcmQgfD0gU1soU1tpXSArIFNbal0pICUgMjU2XSA8PCAoMjQgLSBuICogOCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gVXBkYXRlIGNvdW50ZXJzXG5cdCAgICAgICAgdGhpcy5faSA9IGk7XG5cdCAgICAgICAgdGhpcy5faiA9IGo7XG5cblx0ICAgICAgICByZXR1cm4ga2V5c3RyZWFtV29yZDtcblx0ICAgIH1cblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5SQzQuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7XG5cdCAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5SQzQuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XG5cdCAgICAgKi9cblx0ICAgIEMuUkM0ID0gU3RyZWFtQ2lwaGVyLl9jcmVhdGVIZWxwZXIoUkM0KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBNb2RpZmllZCBSQzQgc3RyZWFtIGNpcGhlciBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBSQzREcm9wID0gQ19hbGdvLlJDNERyb3AgPSBSQzQuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gZHJvcCBUaGUgbnVtYmVyIG9mIGtleXN0cmVhbSB3b3JkcyB0byBkcm9wLiBEZWZhdWx0IDE5MlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogUkM0LmNmZy5leHRlbmQoe1xuXHQgICAgICAgICAgICBkcm9wOiAxOTJcblx0ICAgICAgICB9KSxcblxuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIFJDNC5fZG9SZXNldC5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIERyb3Bcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuY2ZnLmRyb3A7IGkgPiAwOyBpLS0pIHtcblx0ICAgICAgICAgICAgICAgIGdlbmVyYXRlS2V5c3RyZWFtV29yZC5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuUkM0RHJvcC5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTtcblx0ICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlJDNERyb3AuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XG5cdCAgICAgKi9cblx0ICAgIEMuUkM0RHJvcCA9IFN0cmVhbUNpcGhlci5fY3JlYXRlSGVscGVyKFJDNERyb3ApO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLlJDNDtcblxufSkpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvZGwvfi9jcnlwdG8tanMvcmM0LmpzXG4gKiogbW9kdWxlIGlkID0gNzFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9lbmMtYmFzZTY0XCIpLCByZXF1aXJlKFwiLi9tZDVcIiksIHJlcXVpcmUoXCIuL2V2cGtkZlwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vZW5jLWJhc2U2NFwiLCBcIi4vbWQ1XCIsIFwiLi9ldnBrZGZcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgU3RyZWFtQ2lwaGVyID0gQ19saWIuU3RyZWFtQ2lwaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLy8gUmV1c2FibGUgb2JqZWN0c1xuXHQgICAgdmFyIFMgID0gW107XG5cdCAgICB2YXIgQ18gPSBbXTtcblx0ICAgIHZhciBHICA9IFtdO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFJhYmJpdCBzdHJlYW0gY2lwaGVyIGFsZ29yaXRobVxuXHQgICAgICovXG5cdCAgICB2YXIgUmFiYml0ID0gQ19hbGdvLlJhYmJpdCA9IFN0cmVhbUNpcGhlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgSyA9IHRoaXMuX2tleS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGl2ID0gdGhpcy5jZmcuaXY7XG5cblx0ICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIEtbaV0gPSAoKChLW2ldIDw8IDgpICB8IChLW2ldID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICAgICgoKEtbaV0gPDwgMjQpIHwgKEtbaV0gPj4+IDgpKSAgJiAweGZmMDBmZjAwKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGluaXRpYWwgc3RhdGUgdmFsdWVzXG5cdCAgICAgICAgICAgIHZhciBYID0gdGhpcy5fWCA9IFtcblx0ICAgICAgICAgICAgICAgIEtbMF0sIChLWzNdIDw8IDE2KSB8IChLWzJdID4+PiAxNiksXG5cdCAgICAgICAgICAgICAgICBLWzFdLCAoS1swXSA8PCAxNikgfCAoS1szXSA+Pj4gMTYpLFxuXHQgICAgICAgICAgICAgICAgS1syXSwgKEtbMV0gPDwgMTYpIHwgKEtbMF0gPj4+IDE2KSxcblx0ICAgICAgICAgICAgICAgIEtbM10sIChLWzJdIDw8IDE2KSB8IChLWzFdID4+PiAxNilcblx0ICAgICAgICAgICAgXTtcblxuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSBpbml0aWFsIGNvdW50ZXIgdmFsdWVzXG5cdCAgICAgICAgICAgIHZhciBDID0gdGhpcy5fQyA9IFtcblx0ICAgICAgICAgICAgICAgIChLWzJdIDw8IDE2KSB8IChLWzJdID4+PiAxNiksIChLWzBdICYgMHhmZmZmMDAwMCkgfCAoS1sxXSAmIDB4MDAwMGZmZmYpLFxuXHQgICAgICAgICAgICAgICAgKEtbM10gPDwgMTYpIHwgKEtbM10gPj4+IDE2KSwgKEtbMV0gJiAweGZmZmYwMDAwKSB8IChLWzJdICYgMHgwMDAwZmZmZiksXG5cdCAgICAgICAgICAgICAgICAoS1swXSA8PCAxNikgfCAoS1swXSA+Pj4gMTYpLCAoS1syXSAmIDB4ZmZmZjAwMDApIHwgKEtbM10gJiAweDAwMDBmZmZmKSxcblx0ICAgICAgICAgICAgICAgIChLWzFdIDw8IDE2KSB8IChLWzFdID4+PiAxNiksIChLWzNdICYgMHhmZmZmMDAwMCkgfCAoS1swXSAmIDB4MDAwMGZmZmYpXG5cdCAgICAgICAgICAgIF07XG5cblx0ICAgICAgICAgICAgLy8gQ2FycnkgYml0XG5cdCAgICAgICAgICAgIHRoaXMuX2IgPSAwO1xuXG5cdCAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIHN5c3RlbSBmb3VyIHRpbWVzXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBuZXh0U3RhdGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIE1vZGlmeSB0aGUgY291bnRlcnNcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIENbaV0gXj0gWFsoaSArIDQpICYgN107XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJViBzZXR1cFxuXHQgICAgICAgICAgICBpZiAoaXYpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIElWID0gaXYud29yZHM7XG5cdCAgICAgICAgICAgICAgICB2YXIgSVZfMCA9IElWWzBdO1xuXHQgICAgICAgICAgICAgICAgdmFyIElWXzEgPSBJVlsxXTtcblxuXHQgICAgICAgICAgICAgICAgLy8gR2VuZXJhdGUgZm91ciBzdWJ2ZWN0b3JzXG5cdCAgICAgICAgICAgICAgICB2YXIgaTAgPSAoKChJVl8wIDw8IDgpIHwgKElWXzAgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8ICgoKElWXzAgPDwgMjQpIHwgKElWXzAgPj4+IDgpKSAmIDB4ZmYwMGZmMDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIGkyID0gKCgoSVZfMSA8PCA4KSB8IChJVl8xID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfCAoKChJVl8xIDw8IDI0KSB8IChJVl8xID4+PiA4KSkgJiAweGZmMDBmZjAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciBpMSA9IChpMCA+Pj4gMTYpIHwgKGkyICYgMHhmZmZmMDAwMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgaTMgPSAoaTIgPDwgMTYpICB8IChpMCAmIDB4MDAwMGZmZmYpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBNb2RpZnkgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICAgICAgICAgIENbMF0gXj0gaTA7XG5cdCAgICAgICAgICAgICAgICBDWzFdIF49IGkxO1xuXHQgICAgICAgICAgICAgICAgQ1syXSBePSBpMjtcblx0ICAgICAgICAgICAgICAgIENbM10gXj0gaTM7XG5cdCAgICAgICAgICAgICAgICBDWzRdIF49IGkwO1xuXHQgICAgICAgICAgICAgICAgQ1s1XSBePSBpMTtcblx0ICAgICAgICAgICAgICAgIENbNl0gXj0gaTI7XG5cdCAgICAgICAgICAgICAgICBDWzddIF49IGkzO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIHRoZSBzeXN0ZW0gZm91ciB0aW1lc1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBuZXh0U3RhdGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIFggPSB0aGlzLl9YO1xuXG5cdCAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIHN5c3RlbVxuXHQgICAgICAgICAgICBuZXh0U3RhdGUuY2FsbCh0aGlzKTtcblxuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSBmb3VyIGtleXN0cmVhbSB3b3Jkc1xuXHQgICAgICAgICAgICBTWzBdID0gWFswXSBeIChYWzVdID4+PiAxNikgXiAoWFszXSA8PCAxNik7XG5cdCAgICAgICAgICAgIFNbMV0gPSBYWzJdIF4gKFhbN10gPj4+IDE2KSBeIChYWzVdIDw8IDE2KTtcblx0ICAgICAgICAgICAgU1syXSA9IFhbNF0gXiAoWFsxXSA+Pj4gMTYpIF4gKFhbN10gPDwgMTYpO1xuXHQgICAgICAgICAgICBTWzNdID0gWFs2XSBeIChYWzNdID4+PiAxNikgXiAoWFsxXSA8PCAxNik7XG5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXG5cdCAgICAgICAgICAgICAgICBTW2ldID0gKCgoU1tpXSA8PCA4KSAgfCAoU1tpXSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAgICAoKChTW2ldIDw8IDI0KSB8IChTW2ldID4+PiA4KSkgICYgMHhmZjAwZmYwMCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEVuY3J5cHRcblx0ICAgICAgICAgICAgICAgIE1bb2Zmc2V0ICsgaV0gXj0gU1tpXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBibG9ja1NpemU6IDEyOC8zMixcblxuXHQgICAgICAgIGl2U2l6ZTogNjQvMzJcblx0ICAgIH0pO1xuXG5cdCAgICBmdW5jdGlvbiBuZXh0U3RhdGUoKSB7XG5cdCAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgdmFyIFggPSB0aGlzLl9YO1xuXHQgICAgICAgIHZhciBDID0gdGhpcy5fQztcblxuXHQgICAgICAgIC8vIFNhdmUgb2xkIGNvdW50ZXIgdmFsdWVzXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0ICAgICAgICAgICAgQ19baV0gPSBDW2ldO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIENhbGN1bGF0ZSBuZXcgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICBDWzBdID0gKENbMF0gKyAweDRkMzRkMzRkICsgdGhpcy5fYikgfCAwO1xuXHQgICAgICAgIENbMV0gPSAoQ1sxXSArIDB4ZDM0ZDM0ZDMgKyAoKENbMF0gPj4+IDApIDwgKENfWzBdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbMl0gPSAoQ1syXSArIDB4MzRkMzRkMzQgKyAoKENbMV0gPj4+IDApIDwgKENfWzFdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbM10gPSAoQ1szXSArIDB4NGQzNGQzNGQgKyAoKENbMl0gPj4+IDApIDwgKENfWzJdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbNF0gPSAoQ1s0XSArIDB4ZDM0ZDM0ZDMgKyAoKENbM10gPj4+IDApIDwgKENfWzNdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbNV0gPSAoQ1s1XSArIDB4MzRkMzRkMzQgKyAoKENbNF0gPj4+IDApIDwgKENfWzRdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbNl0gPSAoQ1s2XSArIDB4NGQzNGQzNGQgKyAoKENbNV0gPj4+IDApIDwgKENfWzVdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbN10gPSAoQ1s3XSArIDB4ZDM0ZDM0ZDMgKyAoKENbNl0gPj4+IDApIDwgKENfWzZdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIHRoaXMuX2IgPSAoQ1s3XSA+Pj4gMCkgPCAoQ19bN10gPj4+IDApID8gMSA6IDA7XG5cblx0ICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGctdmFsdWVzXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIGd4ID0gWFtpXSArIENbaV07XG5cblx0ICAgICAgICAgICAgLy8gQ29uc3RydWN0IGhpZ2ggYW5kIGxvdyBhcmd1bWVudCBmb3Igc3F1YXJpbmdcblx0ICAgICAgICAgICAgdmFyIGdhID0gZ3ggJiAweGZmZmY7XG5cdCAgICAgICAgICAgIHZhciBnYiA9IGd4ID4+PiAxNjtcblxuXHQgICAgICAgICAgICAvLyBDYWxjdWxhdGUgaGlnaCBhbmQgbG93IHJlc3VsdCBvZiBzcXVhcmluZ1xuXHQgICAgICAgICAgICB2YXIgZ2ggPSAoKCgoZ2EgKiBnYSkgPj4+IDE3KSArIGdhICogZ2IpID4+PiAxNSkgKyBnYiAqIGdiO1xuXHQgICAgICAgICAgICB2YXIgZ2wgPSAoKChneCAmIDB4ZmZmZjAwMDApICogZ3gpIHwgMCkgKyAoKChneCAmIDB4MDAwMGZmZmYpICogZ3gpIHwgMCk7XG5cblx0ICAgICAgICAgICAgLy8gSGlnaCBYT1IgbG93XG5cdCAgICAgICAgICAgIEdbaV0gPSBnaCBeIGdsO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIENhbGN1bGF0ZSBuZXcgc3RhdGUgdmFsdWVzXG5cdCAgICAgICAgWFswXSA9IChHWzBdICsgKChHWzddIDw8IDE2KSB8IChHWzddID4+PiAxNikpICsgKChHWzZdIDw8IDE2KSB8IChHWzZdID4+PiAxNikpKSB8IDA7XG5cdCAgICAgICAgWFsxXSA9IChHWzFdICsgKChHWzBdIDw8IDgpICB8IChHWzBdID4+PiAyNCkpICsgR1s3XSkgfCAwO1xuXHQgICAgICAgIFhbMl0gPSAoR1syXSArICgoR1sxXSA8PCAxNikgfCAoR1sxXSA+Pj4gMTYpKSArICgoR1swXSA8PCAxNikgfCAoR1swXSA+Pj4gMTYpKSkgfCAwO1xuXHQgICAgICAgIFhbM10gPSAoR1szXSArICgoR1syXSA8PCA4KSAgfCAoR1syXSA+Pj4gMjQpKSArIEdbMV0pIHwgMDtcblx0ICAgICAgICBYWzRdID0gKEdbNF0gKyAoKEdbM10gPDwgMTYpIHwgKEdbM10gPj4+IDE2KSkgKyAoKEdbMl0gPDwgMTYpIHwgKEdbMl0gPj4+IDE2KSkpIHwgMDtcblx0ICAgICAgICBYWzVdID0gKEdbNV0gKyAoKEdbNF0gPDwgOCkgIHwgKEdbNF0gPj4+IDI0KSkgKyBHWzNdKSB8IDA7XG5cdCAgICAgICAgWFs2XSA9IChHWzZdICsgKChHWzVdIDw8IDE2KSB8IChHWzVdID4+PiAxNikpICsgKChHWzRdIDw8IDE2KSB8IChHWzRdID4+PiAxNikpKSB8IDA7XG5cdCAgICAgICAgWFs3XSA9IChHWzddICsgKChHWzZdIDw8IDgpICB8IChHWzZdID4+PiAyNCkpICsgR1s1XSkgfCAwO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9ucyB0byB0aGUgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgY2lwaGVydGV4dCA9IENyeXB0b0pTLlJhYmJpdC5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTtcblx0ICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlJhYmJpdC5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcblx0ICAgICAqL1xuXHQgICAgQy5SYWJiaXQgPSBTdHJlYW1DaXBoZXIuX2NyZWF0ZUhlbHBlcihSYWJiaXQpO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLlJhYmJpdDtcblxufSkpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvZGwvfi9jcnlwdG8tanMvcmFiYml0LmpzXG4gKiogbW9kdWxlIGlkID0gNzJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9lbmMtYmFzZTY0XCIpLCByZXF1aXJlKFwiLi9tZDVcIiksIHJlcXVpcmUoXCIuL2V2cGtkZlwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vZW5jLWJhc2U2NFwiLCBcIi4vbWQ1XCIsIFwiLi9ldnBrZGZcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgU3RyZWFtQ2lwaGVyID0gQ19saWIuU3RyZWFtQ2lwaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLy8gUmV1c2FibGUgb2JqZWN0c1xuXHQgICAgdmFyIFMgID0gW107XG5cdCAgICB2YXIgQ18gPSBbXTtcblx0ICAgIHZhciBHICA9IFtdO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFJhYmJpdCBzdHJlYW0gY2lwaGVyIGFsZ29yaXRobS5cblx0ICAgICAqXG5cdCAgICAgKiBUaGlzIGlzIGEgbGVnYWN5IHZlcnNpb24gdGhhdCBuZWdsZWN0ZWQgdG8gY29udmVydCB0aGUga2V5IHRvIGxpdHRsZS1lbmRpYW4uXG5cdCAgICAgKiBUaGlzIGVycm9yIGRvZXNuJ3QgYWZmZWN0IHRoZSBjaXBoZXIncyBzZWN1cml0eSxcblx0ICAgICAqIGJ1dCBpdCBkb2VzIGFmZmVjdCBpdHMgY29tcGF0aWJpbGl0eSB3aXRoIG90aGVyIGltcGxlbWVudGF0aW9ucy5cblx0ICAgICAqL1xuXHQgICAgdmFyIFJhYmJpdExlZ2FjeSA9IENfYWxnby5SYWJiaXRMZWdhY3kgPSBTdHJlYW1DaXBoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIEsgPSB0aGlzLl9rZXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBpdiA9IHRoaXMuY2ZnLml2O1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGluaXRpYWwgc3RhdGUgdmFsdWVzXG5cdCAgICAgICAgICAgIHZhciBYID0gdGhpcy5fWCA9IFtcblx0ICAgICAgICAgICAgICAgIEtbMF0sIChLWzNdIDw8IDE2KSB8IChLWzJdID4+PiAxNiksXG5cdCAgICAgICAgICAgICAgICBLWzFdLCAoS1swXSA8PCAxNikgfCAoS1szXSA+Pj4gMTYpLFxuXHQgICAgICAgICAgICAgICAgS1syXSwgKEtbMV0gPDwgMTYpIHwgKEtbMF0gPj4+IDE2KSxcblx0ICAgICAgICAgICAgICAgIEtbM10sIChLWzJdIDw8IDE2KSB8IChLWzFdID4+PiAxNilcblx0ICAgICAgICAgICAgXTtcblxuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSBpbml0aWFsIGNvdW50ZXIgdmFsdWVzXG5cdCAgICAgICAgICAgIHZhciBDID0gdGhpcy5fQyA9IFtcblx0ICAgICAgICAgICAgICAgIChLWzJdIDw8IDE2KSB8IChLWzJdID4+PiAxNiksIChLWzBdICYgMHhmZmZmMDAwMCkgfCAoS1sxXSAmIDB4MDAwMGZmZmYpLFxuXHQgICAgICAgICAgICAgICAgKEtbM10gPDwgMTYpIHwgKEtbM10gPj4+IDE2KSwgKEtbMV0gJiAweGZmZmYwMDAwKSB8IChLWzJdICYgMHgwMDAwZmZmZiksXG5cdCAgICAgICAgICAgICAgICAoS1swXSA8PCAxNikgfCAoS1swXSA+Pj4gMTYpLCAoS1syXSAmIDB4ZmZmZjAwMDApIHwgKEtbM10gJiAweDAwMDBmZmZmKSxcblx0ICAgICAgICAgICAgICAgIChLWzFdIDw8IDE2KSB8IChLWzFdID4+PiAxNiksIChLWzNdICYgMHhmZmZmMDAwMCkgfCAoS1swXSAmIDB4MDAwMGZmZmYpXG5cdCAgICAgICAgICAgIF07XG5cblx0ICAgICAgICAgICAgLy8gQ2FycnkgYml0XG5cdCAgICAgICAgICAgIHRoaXMuX2IgPSAwO1xuXG5cdCAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIHN5c3RlbSBmb3VyIHRpbWVzXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBuZXh0U3RhdGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIE1vZGlmeSB0aGUgY291bnRlcnNcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIENbaV0gXj0gWFsoaSArIDQpICYgN107XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJViBzZXR1cFxuXHQgICAgICAgICAgICBpZiAoaXYpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIElWID0gaXYud29yZHM7XG5cdCAgICAgICAgICAgICAgICB2YXIgSVZfMCA9IElWWzBdO1xuXHQgICAgICAgICAgICAgICAgdmFyIElWXzEgPSBJVlsxXTtcblxuXHQgICAgICAgICAgICAgICAgLy8gR2VuZXJhdGUgZm91ciBzdWJ2ZWN0b3JzXG5cdCAgICAgICAgICAgICAgICB2YXIgaTAgPSAoKChJVl8wIDw8IDgpIHwgKElWXzAgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8ICgoKElWXzAgPDwgMjQpIHwgKElWXzAgPj4+IDgpKSAmIDB4ZmYwMGZmMDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIGkyID0gKCgoSVZfMSA8PCA4KSB8IChJVl8xID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfCAoKChJVl8xIDw8IDI0KSB8IChJVl8xID4+PiA4KSkgJiAweGZmMDBmZjAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciBpMSA9IChpMCA+Pj4gMTYpIHwgKGkyICYgMHhmZmZmMDAwMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgaTMgPSAoaTIgPDwgMTYpICB8IChpMCAmIDB4MDAwMGZmZmYpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBNb2RpZnkgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICAgICAgICAgIENbMF0gXj0gaTA7XG5cdCAgICAgICAgICAgICAgICBDWzFdIF49IGkxO1xuXHQgICAgICAgICAgICAgICAgQ1syXSBePSBpMjtcblx0ICAgICAgICAgICAgICAgIENbM10gXj0gaTM7XG5cdCAgICAgICAgICAgICAgICBDWzRdIF49IGkwO1xuXHQgICAgICAgICAgICAgICAgQ1s1XSBePSBpMTtcblx0ICAgICAgICAgICAgICAgIENbNl0gXj0gaTI7XG5cdCAgICAgICAgICAgICAgICBDWzddIF49IGkzO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIHRoZSBzeXN0ZW0gZm91ciB0aW1lc1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBuZXh0U3RhdGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIFggPSB0aGlzLl9YO1xuXG5cdCAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIHN5c3RlbVxuXHQgICAgICAgICAgICBuZXh0U3RhdGUuY2FsbCh0aGlzKTtcblxuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSBmb3VyIGtleXN0cmVhbSB3b3Jkc1xuXHQgICAgICAgICAgICBTWzBdID0gWFswXSBeIChYWzVdID4+PiAxNikgXiAoWFszXSA8PCAxNik7XG5cdCAgICAgICAgICAgIFNbMV0gPSBYWzJdIF4gKFhbN10gPj4+IDE2KSBeIChYWzVdIDw8IDE2KTtcblx0ICAgICAgICAgICAgU1syXSA9IFhbNF0gXiAoWFsxXSA+Pj4gMTYpIF4gKFhbN10gPDwgMTYpO1xuXHQgICAgICAgICAgICBTWzNdID0gWFs2XSBeIChYWzNdID4+PiAxNikgXiAoWFsxXSA8PCAxNik7XG5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXG5cdCAgICAgICAgICAgICAgICBTW2ldID0gKCgoU1tpXSA8PCA4KSAgfCAoU1tpXSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAgICAoKChTW2ldIDw8IDI0KSB8IChTW2ldID4+PiA4KSkgICYgMHhmZjAwZmYwMCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEVuY3J5cHRcblx0ICAgICAgICAgICAgICAgIE1bb2Zmc2V0ICsgaV0gXj0gU1tpXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBibG9ja1NpemU6IDEyOC8zMixcblxuXHQgICAgICAgIGl2U2l6ZTogNjQvMzJcblx0ICAgIH0pO1xuXG5cdCAgICBmdW5jdGlvbiBuZXh0U3RhdGUoKSB7XG5cdCAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgdmFyIFggPSB0aGlzLl9YO1xuXHQgICAgICAgIHZhciBDID0gdGhpcy5fQztcblxuXHQgICAgICAgIC8vIFNhdmUgb2xkIGNvdW50ZXIgdmFsdWVzXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0ICAgICAgICAgICAgQ19baV0gPSBDW2ldO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIENhbGN1bGF0ZSBuZXcgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICBDWzBdID0gKENbMF0gKyAweDRkMzRkMzRkICsgdGhpcy5fYikgfCAwO1xuXHQgICAgICAgIENbMV0gPSAoQ1sxXSArIDB4ZDM0ZDM0ZDMgKyAoKENbMF0gPj4+IDApIDwgKENfWzBdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbMl0gPSAoQ1syXSArIDB4MzRkMzRkMzQgKyAoKENbMV0gPj4+IDApIDwgKENfWzFdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbM10gPSAoQ1szXSArIDB4NGQzNGQzNGQgKyAoKENbMl0gPj4+IDApIDwgKENfWzJdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbNF0gPSAoQ1s0XSArIDB4ZDM0ZDM0ZDMgKyAoKENbM10gPj4+IDApIDwgKENfWzNdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbNV0gPSAoQ1s1XSArIDB4MzRkMzRkMzQgKyAoKENbNF0gPj4+IDApIDwgKENfWzRdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbNl0gPSAoQ1s2XSArIDB4NGQzNGQzNGQgKyAoKENbNV0gPj4+IDApIDwgKENfWzVdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIENbN10gPSAoQ1s3XSArIDB4ZDM0ZDM0ZDMgKyAoKENbNl0gPj4+IDApIDwgKENfWzZdID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgIHRoaXMuX2IgPSAoQ1s3XSA+Pj4gMCkgPCAoQ19bN10gPj4+IDApID8gMSA6IDA7XG5cblx0ICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGctdmFsdWVzXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIGd4ID0gWFtpXSArIENbaV07XG5cblx0ICAgICAgICAgICAgLy8gQ29uc3RydWN0IGhpZ2ggYW5kIGxvdyBhcmd1bWVudCBmb3Igc3F1YXJpbmdcblx0ICAgICAgICAgICAgdmFyIGdhID0gZ3ggJiAweGZmZmY7XG5cdCAgICAgICAgICAgIHZhciBnYiA9IGd4ID4+PiAxNjtcblxuXHQgICAgICAgICAgICAvLyBDYWxjdWxhdGUgaGlnaCBhbmQgbG93IHJlc3VsdCBvZiBzcXVhcmluZ1xuXHQgICAgICAgICAgICB2YXIgZ2ggPSAoKCgoZ2EgKiBnYSkgPj4+IDE3KSArIGdhICogZ2IpID4+PiAxNSkgKyBnYiAqIGdiO1xuXHQgICAgICAgICAgICB2YXIgZ2wgPSAoKChneCAmIDB4ZmZmZjAwMDApICogZ3gpIHwgMCkgKyAoKChneCAmIDB4MDAwMGZmZmYpICogZ3gpIHwgMCk7XG5cblx0ICAgICAgICAgICAgLy8gSGlnaCBYT1IgbG93XG5cdCAgICAgICAgICAgIEdbaV0gPSBnaCBeIGdsO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIENhbGN1bGF0ZSBuZXcgc3RhdGUgdmFsdWVzXG5cdCAgICAgICAgWFswXSA9IChHWzBdICsgKChHWzddIDw8IDE2KSB8IChHWzddID4+PiAxNikpICsgKChHWzZdIDw8IDE2KSB8IChHWzZdID4+PiAxNikpKSB8IDA7XG5cdCAgICAgICAgWFsxXSA9IChHWzFdICsgKChHWzBdIDw8IDgpICB8IChHWzBdID4+PiAyNCkpICsgR1s3XSkgfCAwO1xuXHQgICAgICAgIFhbMl0gPSAoR1syXSArICgoR1sxXSA8PCAxNikgfCAoR1sxXSA+Pj4gMTYpKSArICgoR1swXSA8PCAxNikgfCAoR1swXSA+Pj4gMTYpKSkgfCAwO1xuXHQgICAgICAgIFhbM10gPSAoR1szXSArICgoR1syXSA8PCA4KSAgfCAoR1syXSA+Pj4gMjQpKSArIEdbMV0pIHwgMDtcblx0ICAgICAgICBYWzRdID0gKEdbNF0gKyAoKEdbM10gPDwgMTYpIHwgKEdbM10gPj4+IDE2KSkgKyAoKEdbMl0gPDwgMTYpIHwgKEdbMl0gPj4+IDE2KSkpIHwgMDtcblx0ICAgICAgICBYWzVdID0gKEdbNV0gKyAoKEdbNF0gPDwgOCkgIHwgKEdbNF0gPj4+IDI0KSkgKyBHWzNdKSB8IDA7XG5cdCAgICAgICAgWFs2XSA9IChHWzZdICsgKChHWzVdIDw8IDE2KSB8IChHWzVdID4+PiAxNikpICsgKChHWzRdIDw8IDE2KSB8IChHWzRdID4+PiAxNikpKSB8IDA7XG5cdCAgICAgICAgWFs3XSA9IChHWzddICsgKChHWzZdIDw8IDgpICB8IChHWzZdID4+PiAyNCkpICsgR1s1XSkgfCAwO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9ucyB0byB0aGUgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgY2lwaGVydGV4dCA9IENyeXB0b0pTLlJhYmJpdExlZ2FjeS5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTtcblx0ICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlJhYmJpdExlZ2FjeS5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcblx0ICAgICAqL1xuXHQgICAgQy5SYWJiaXRMZWdhY3kgPSBTdHJlYW1DaXBoZXIuX2NyZWF0ZUhlbHBlcihSYWJiaXRMZWdhY3kpO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLlJhYmJpdExlZ2FjeTtcblxufSkpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvZGwvfi9jcnlwdG8tanMvcmFiYml0LWxlZ2FjeS5qc1xuICoqIG1vZHVsZSBpZCA9IDczXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvL0Zyb20gYnl0ZWJ1ZmZlciAzLjUuNCBpbmRleC5qcywgcmVtb3ZlZCB1c2VkIG9mIF9fZGlybmFtZS4gIFdlYnBhY2sncyBlbnZpcm9ubWVudCBjaGFuZ2VzIF9fZGlybmFtZS4gXHJcbi8qdmFyIHBhdGggPSByZXF1aXJlKFwicGF0aFwiKSxcclxuICAgIEJ5dGVCdWZmZXJOQiA9IHJlcXVpcmUoIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2J5dGVidWZmZXIvZGlzdC9CeXRlQnVmZmVyTkIuanNcIiksXHJcbiAgICBCeXRlQnVmZmVyQUIgPSByZXF1aXJlKCBcIi4uLy4uL25vZGVfbW9kdWxlcy9ieXRlYnVmZmVyL2Rpc3QvQnl0ZUJ1ZmZlckFCLmpzXCIpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCeXRlQnVmZmVyTkI7XHJcbm1vZHVsZS5leHBvcnRzLkJ5dGVCdWZmZXJOQiA9IEJ5dGVCdWZmZXJOQjsgLy8gbm9kZSBCdWZmZXIgYmFja2VkXHJcbm1vZHVsZS5leHBvcnRzLkJ5dGVCdWZmZXJBQiA9IEJ5dGVCdWZmZXJBQjsgLy8gQXJyYXlCdWZmZXIgYmFja2VkXHJcbiovXHJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbGliL2J5dGVidWZmZXJfMy41LjQuanMnKVxyXG4vL21vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnYnl0ZWJ1ZmZlcicpXHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIGM6L2JpdHNoYXJlc3dhbGxldC93d3cvYXBwL2RsL3NyYy9jb21tb24vYnl0ZWJ1ZmZlci5qc1xuICoqLyIsIihmdW5jdGlvbihmKXtpZih0eXBlb2YgZXhwb3J0cz09PVwib2JqZWN0XCImJnR5cGVvZiBtb2R1bGUhPT1cInVuZGVmaW5lZFwiKXttb2R1bGUuZXhwb3J0cz1mKCl9ZWxzZSBpZih0eXBlb2YgZGVmaW5lPT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoW10sZil9ZWxzZXt2YXIgZztpZih0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIil7Zz1nbG9iYWx9ZWxzZSBpZih0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCIpe2c9c2VsZn1lbHNle2c9dGhpc31nLmJ5dGVidWZmZXIgPSBmKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XHJcbi8qXHJcbiBDb3B5cmlnaHQgMjAxMy0yMDE0IERhbmllbCBXaXJ0eiA8ZGNvZGVAZGNvZGUuaW8+XHJcblxyXG4gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBsaWNlbnNlIEJ5dGVCdWZmZXIuanMgKGMpIDIwMTMtMjAxNCBEYW5pZWwgV2lydHogPGRjb2RlQGRjb2RlLmlvPlxyXG4gKiBUaGlzIHZlcnNpb24gb2YgQnl0ZUJ1ZmZlci5qcyB1c2VzIGFuIEFycmF5QnVmZmVyIChBQikgYXMgaXRzIGJhY2tpbmcgYnVmZmVyIGFuZCBpcyBjb21wYXRpYmxlIHdpdGggbW9kZXJuIGJyb3dzZXJzLlxyXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wXHJcbiAqIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Rjb2RlSU8vQnl0ZUJ1ZmZlci5qcyBmb3IgZGV0YWlsc1xyXG4gKi8gLy9cclxuKGZ1bmN0aW9uKGdsb2JhbCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzogTG9uZywgbnVtYmVyLCBudW1iZXIsIGJvb2xlYW49KT19IExvbmdcclxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihuZXc6IEJ5dGVCdWZmZXIsIG51bWJlcj0sIGJvb2xlYW49LCBib29sZWFuPSl9fVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGxvYWRCeXRlQnVmZmVyKExvbmcpIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBCeXRlQnVmZmVyLlxyXG4gICAgICAgICAqIEBjbGFzcyBUaGUgc3dpc3MgYXJteSBrbmlmZSBmb3IgYmluYXJ5IGRhdGEgaW4gSmF2YVNjcmlwdC5cclxuICAgICAgICAgKiBAZXhwb3J0cyBCeXRlQnVmZmVyXHJcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBjYXBhY2l0eSBJbml0aWFsIGNhcGFjaXR5LiBEZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX0NBUEFDSVRZfS5cclxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBsaXR0bGVFbmRpYW4gV2hldGhlciB0byB1c2UgbGl0dGxlIG9yIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci4gRGVmYXVsdHMgdG9cclxuICAgICAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9FTkRJQU59LlxyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG5vQXNzZXJ0IFdoZXRoZXIgdG8gc2tpcCBhc3NlcnRpb25zIG9mIG9mZnNldHMgYW5kIHZhbHVlcy4gRGVmYXVsdHMgdG9cclxuICAgICAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9OT0FTU0VSVH0uXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZhciBCeXRlQnVmZmVyID0gZnVuY3Rpb24oY2FwYWNpdHksIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYXBhY2l0eSAgICAgPT09ICd1bmRlZmluZWQnKSBjYXBhY2l0eSAgICAgPSBCeXRlQnVmZmVyLkRFRkFVTFRfQ0FQQUNJVFk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAndW5kZWZpbmVkJykgbGl0dGxlRW5kaWFuID0gQnl0ZUJ1ZmZlci5ERUZBVUxUX0VORElBTjtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBub0Fzc2VydCAgICAgPT09ICd1bmRlZmluZWQnKSBub0Fzc2VydCAgICAgPSBCeXRlQnVmZmVyLkRFRkFVTFRfTk9BU1NFUlQ7XHJcbiAgICAgICAgICAgIGlmICghbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGNhcGFjaXR5ID0gY2FwYWNpdHkgfCAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhcGFjaXR5IDwgMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBjYXBhY2l0eVwiKTtcclxuICAgICAgICAgICAgICAgIGxpdHRsZUVuZGlhbiA9ICEhbGl0dGxlRW5kaWFuO1xyXG4gICAgICAgICAgICAgICAgbm9Bc3NlcnQgPSAhIW5vQXNzZXJ0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQmFja2luZyBidWZmZXIuXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHshQXJyYXlCdWZmZXJ9XHJcbiAgICAgICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gY2FwYWNpdHkgPT09IDAgPyBFTVBUWV9CVUZGRVIgOiBuZXcgQXJyYXlCdWZmZXIoY2FwYWNpdHkpO1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIERhdGEgdmlldyB0byBtYW5pcHVsYXRlIHRoZSBiYWNraW5nIGJ1ZmZlci4gQmVjb21lcyBgbnVsbGAgaWYgdGhlIGJhY2tpbmcgYnVmZmVyIGhhcyBhIGNhcGFjaXR5IG9mIGAwYC5cclxuICAgICAgICAgICAgICogQHR5cGUgez9EYXRhVmlld31cclxuICAgICAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdGhpcy52aWV3ID0gY2FwYWNpdHkgPT09IDAgPyBudWxsIDogbmV3IERhdGFWaWV3KHRoaXMuYnVmZmVyKTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBBYnNvbHV0ZSByZWFkL3dyaXRlIG9mZnNldC5cclxuICAgICAgICAgICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAgICAgKiBAc2VlIEJ5dGVCdWZmZXIjZmxpcFxyXG4gICAgICAgICAgICAgKiBAc2VlIEJ5dGVCdWZmZXIjY2xlYXJcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBNYXJrZWQgb2Zmc2V0LlxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNtYXJrXHJcbiAgICAgICAgICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNyZXNldFxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdGhpcy5tYXJrZWRPZmZzZXQgPSAtMTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBBYnNvbHV0ZSBsaW1pdCBvZiB0aGUgY29udGFpbmVkIGRhdGEuIFNldCB0byB0aGUgYmFja2luZyBidWZmZXIncyBjYXBhY2l0eSB1cG9uIGFsbG9jYXRpb24uXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgICAgICogQHNlZSBCeXRlQnVmZmVyI2ZsaXBcclxuICAgICAgICAgICAgICogQHNlZSBCeXRlQnVmZmVyI2NsZWFyXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB0aGlzLmxpbWl0ID0gY2FwYWNpdHk7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogV2hldGhlciB0byB1c2UgbGl0dGxlIGVuZGlhbiBieXRlIG9yZGVyLCBkZWZhdWx0cyB0byBgZmFsc2VgIGZvciBiaWcgZW5kaWFuLlxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdGhpcy5saXR0bGVFbmRpYW4gPSB0eXBlb2YgbGl0dGxlRW5kaWFuICE9PSAndW5kZWZpbmVkJyA/ICEhbGl0dGxlRW5kaWFuIDogZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogV2hldGhlciB0byBza2lwIGFzc2VydGlvbnMgb2Ygb2Zmc2V0cyBhbmQgdmFsdWVzLCBkZWZhdWx0cyB0byBgZmFsc2VgLlxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdGhpcy5ub0Fzc2VydCA9ICEhbm9Bc3NlcnQ7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQnl0ZUJ1ZmZlciB2ZXJzaW9uLlxyXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgICAgICogQGNvbnN0XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXIuVkVSU0lPTiA9IFwiMy41LjRcIjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTGl0dGxlIGVuZGlhbiBjb25zdGFudCB0aGF0IGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgaXRzIGJvb2xlYW4gdmFsdWUuIEV2YWx1YXRlcyB0byBgdHJ1ZWAuXHJcbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgICAgICogQGNvbnN0XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXIuTElUVExFX0VORElBTiA9IHRydWU7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEJpZyBlbmRpYW4gY29uc3RhbnQgdGhhdCBjYW4gYmUgdXNlZCBpbnN0ZWFkIG9mIGl0cyBib29sZWFuIHZhbHVlLiBFdmFsdWF0ZXMgdG8gYGZhbHNlYC5cclxuICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAgICAgKiBAY29uc3RcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlci5CSUdfRU5ESUFOID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlZmF1bHQgaW5pdGlhbCBjYXBhY2l0eSBvZiBgMTZgLlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXIuREVGQVVMVF9DQVBBQ0lUWSA9IDE2O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZWZhdWx0IGVuZGlhbmVzcyBvZiBgZmFsc2VgIGZvciBiaWcgZW5kaWFuLlxyXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyLkRFRkFVTFRfRU5ESUFOID0gQnl0ZUJ1ZmZlci5CSUdfRU5ESUFOO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZWZhdWx0IG5vIGFzc2VydGlvbnMgZmxhZyBvZiBgZmFsc2VgLlxyXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyLkRFRkFVTFRfTk9BU1NFUlQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBgTG9uZ2AgY2xhc3MgZm9yIHJlcHJlc2VudGluZyBhIDY0LWJpdCB0d28ncy1jb21wbGVtZW50IGludGVnZXIgdmFsdWUuIE1heSBiZSBgbnVsbGAgaWYgTG9uZy5qcyBoYXMgbm90IGJlZW4gbG9hZGVkXHJcbiAgICAgICAgICogIGFuZCBpbnQ2NCBzdXBwb3J0IGlzIG5vdCBhdmFpbGFibGUuXHJcbiAgICAgICAgICogQHR5cGUgez9Mb25nfVxyXG4gICAgICAgICAqIEBjb25zdFxyXG4gICAgICAgICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2Rjb2RlSU8vTG9uZy5qc1xyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyLkxvbmcgPSBMb25nIHx8IG51bGw7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBhbGlhcyBCeXRlQnVmZmVyLnByb3RvdHlwZVxyXG4gICAgICAgICAqIEBpbm5lclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZhciBCeXRlQnVmZmVyUHJvdG90eXBlID0gQnl0ZUJ1ZmZlci5wcm90b3R5cGU7XHJcblxyXG4gICAgICAgIC8vIGhlbHBlcnNcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUgeyFBcnJheUJ1ZmZlcn1cclxuICAgICAgICAgKiBAaW5uZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICB2YXIgRU1QVFlfQlVGRkVSID0gbmV3IEFycmF5QnVmZmVyKDApO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTdHJpbmcuZnJvbUNoYXJDb2RlIHJlZmVyZW5jZSBmb3IgY29tcGlsZS10aW1lIHJlbmFtaW5nLlxyXG4gICAgICAgICAqIEB0eXBlIHtmdW5jdGlvbiguLi5udW1iZXIpOnN0cmluZ31cclxuICAgICAgICAgKiBAaW5uZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICB2YXIgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhIHNvdXJjZSBmdW5jdGlvbiBmb3IgYSBzdHJpbmcuXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHMgU3RyaW5nIHRvIHJlYWQgZnJvbVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpOm51bWJlcnxudWxsfSBTb3VyY2UgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGNoYXIgY29kZSByZXNwZWN0aXZlbHkgYG51bGxgIGlmIHRoZXJlIGFyZVxyXG4gICAgICAgICAqICBubyBtb3JlIGNoYXJhY3RlcnMgbGVmdC5cclxuICAgICAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIHRoZSBhcmd1bWVudCBpcyBpbnZhbGlkXHJcbiAgICAgICAgICogQGlubmVyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc3RyaW5nU291cmNlKHMpIHtcclxuICAgICAgICAgICAgdmFyIGk9MDsgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgPCBzLmxlbmd0aCA/IHMuY2hhckNvZGVBdChpKyspIDogbnVsbDtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYSBkZXN0aW5hdGlvbiBmdW5jdGlvbiBmb3IgYSBzdHJpbmcuXHJcbiAgICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKG51bWJlcj0pOnVuZGVmaW5lZHxzdHJpbmd9IERlc3RpbmF0aW9uIGZ1bmN0aW9uIHN1Y2Nlc3NpdmVseSBjYWxsZWQgd2l0aCB0aGUgbmV4dCBjaGFyIGNvZGUuXHJcbiAgICAgICAgICogIFJldHVybnMgdGhlIGZpbmFsIHN0cmluZyB3aGVuIGNhbGxlZCB3aXRob3V0IGFyZ3VtZW50cy5cclxuICAgICAgICAgKiBAaW5uZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBzdHJpbmdEZXN0aW5hdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGNzID0gW10sIHBzID0gW107IHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcy5qb2luKCcnKStzdHJpbmdGcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3MubGVuZ3RoICsgYXJndW1lbnRzLmxlbmd0aCA+IDEwMjQpXHJcbiAgICAgICAgICAgICAgICAgICAgcHMucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjcykpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoY3MsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbGxvY2F0ZXMgYSBuZXcgQnl0ZUJ1ZmZlciBiYWNrZWQgYnkgYSBidWZmZXIgb2YgdGhlIHNwZWNpZmllZCBjYXBhY2l0eS5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IGNhcGFjaXR5IEluaXRpYWwgY2FwYWNpdHkuIERlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfQ0FQQUNJVFl9LlxyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGxpdHRsZUVuZGlhbiBXaGV0aGVyIHRvIHVzZSBsaXR0bGUgb3IgYmlnIGVuZGlhbiBieXRlIG9yZGVyLiBEZWZhdWx0cyB0b1xyXG4gICAgICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX0VORElBTn0uXHJcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gbm9Bc3NlcnQgV2hldGhlciB0byBza2lwIGFzc2VydGlvbnMgb2Ygb2Zmc2V0cyBhbmQgdmFsdWVzLiBEZWZhdWx0cyB0b1xyXG4gICAgICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX05PQVNTRVJUfS5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXIuYWxsb2NhdGUgPSBmdW5jdGlvbihjYXBhY2l0eSwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEJ5dGVCdWZmZXIoY2FwYWNpdHksIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbmNhdGVuYXRlcyBtdWx0aXBsZSBCeXRlQnVmZmVycyBpbnRvIG9uZS5cclxuICAgICAgICAgKiBAcGFyYW0geyFBcnJheS48IUJ5dGVCdWZmZXJ8IUFycmF5QnVmZmVyfCFVaW50OEFycmF5fHN0cmluZz59IGJ1ZmZlcnMgQnVmZmVycyB0byBjb25jYXRlbmF0ZVxyXG4gICAgICAgICAqIEBwYXJhbSB7KHN0cmluZ3xib29sZWFuKT19IGVuY29kaW5nIFN0cmluZyBlbmNvZGluZyBpZiBgYnVmZmVyc2AgY29udGFpbnMgYSBzdHJpbmcgKFwiYmFzZTY0XCIsIFwiaGV4XCIsIFwiYmluYXJ5XCIsXHJcbiAgICAgICAgICogIGRlZmF1bHRzIHRvIFwidXRmOFwiKVxyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGxpdHRsZUVuZGlhbiBXaGV0aGVyIHRvIHVzZSBsaXR0bGUgb3IgYmlnIGVuZGlhbiBieXRlIG9yZGVyIGZvciB0aGUgcmVzdWx0aW5nIEJ5dGVCdWZmZXIuIERlZmF1bHRzXHJcbiAgICAgICAgICogIHRvIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfRU5ESUFOfS5cclxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBub0Fzc2VydCBXaGV0aGVyIHRvIHNraXAgYXNzZXJ0aW9ucyBvZiBvZmZzZXRzIGFuZCB2YWx1ZXMgZm9yIHRoZSByZXN1bHRpbmcgQnl0ZUJ1ZmZlci4gRGVmYXVsdHMgdG9cclxuICAgICAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9OT0FTU0VSVH0uXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSBDb25jYXRlbmF0ZWQgQnl0ZUJ1ZmZlclxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uKGJ1ZmZlcnMsIGVuY29kaW5nLCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdib29sZWFuJyB8fCB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBub0Fzc2VydCA9IGxpdHRsZUVuZGlhbjtcclxuICAgICAgICAgICAgICAgIGxpdHRsZUVuZGlhbiA9IGVuY29kaW5nO1xyXG4gICAgICAgICAgICAgICAgZW5jb2RpbmcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGNhcGFjaXR5ID0gMDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaT0wLCBrPWJ1ZmZlcnMubGVuZ3RoLCBsZW5ndGg7IGk8azsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIUJ5dGVCdWZmZXIuaXNCeXRlQnVmZmVyKGJ1ZmZlcnNbaV0pKVxyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlcnNbaV0gPSBCeXRlQnVmZmVyLndyYXAoYnVmZmVyc1tpXSwgZW5jb2RpbmcpO1xyXG4gICAgICAgICAgICAgICAgbGVuZ3RoID0gYnVmZmVyc1tpXS5saW1pdCAtIGJ1ZmZlcnNbaV0ub2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA+IDApIGNhcGFjaXR5ICs9IGxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2FwYWNpdHkgPT09IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEJ5dGVCdWZmZXIoMCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCk7XHJcbiAgICAgICAgICAgIHZhciBiYiA9IG5ldyBCeXRlQnVmZmVyKGNhcGFjaXR5LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSxcclxuICAgICAgICAgICAgICAgIGJpO1xyXG4gICAgICAgICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJiLmJ1ZmZlcik7XHJcbiAgICAgICAgICAgIGk9MDsgd2hpbGUgKGk8aykge1xyXG4gICAgICAgICAgICAgICAgYmkgPSBidWZmZXJzW2krK107XHJcbiAgICAgICAgICAgICAgICBsZW5ndGggPSBiaS5saW1pdCAtIGJpLm9mZnNldDtcclxuICAgICAgICAgICAgICAgIGlmIChsZW5ndGggPD0gMCkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShiaS5idWZmZXIpLnN1YmFycmF5KGJpLm9mZnNldCwgYmkubGltaXQpLCBiYi5vZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgYmIub2Zmc2V0ICs9IGxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBiYi5saW1pdCA9IGJiLm9mZnNldDtcclxuICAgICAgICAgICAgYmIub2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgcmV0dXJuIGJiO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgdHlwZSBpcyBhIEJ5dGVCdWZmZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBiYiBCeXRlQnVmZmVyIHRvIHRlc3RcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIGl0IGlzIGEgQnl0ZUJ1ZmZlciwgb3RoZXJ3aXNlIGBmYWxzZWBcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlci5pc0J5dGVCdWZmZXIgPSBmdW5jdGlvbihiYikge1xyXG4gICAgICAgICAgICByZXR1cm4gKGJiICYmIGJiIGluc3RhbmNlb2YgQnl0ZUJ1ZmZlcikgPT09IHRydWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHZXRzIHRoZSBiYWNraW5nIGJ1ZmZlciB0eXBlLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYEJ1ZmZlcmAgZm9yIE5CIGJ1aWxkcywgYEFycmF5QnVmZmVyYCBmb3IgQUIgYnVpbGRzIChjbGFzc2VzKVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyLnR5cGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEFycmF5QnVmZmVyO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyYXBzIGEgYnVmZmVyIG9yIGEgc3RyaW5nLiBTZXRzIHRoZSBhbGxvY2F0ZWQgQnl0ZUJ1ZmZlcidzIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gdG8gYDBgIGFuZCBpdHNcclxuICAgICAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9IHRvIHRoZSBsZW5ndGggb2YgdGhlIHdyYXBwZWQgZGF0YS5cclxuICAgICAgICAgKiBAcGFyYW0geyFCeXRlQnVmZmVyfCFBcnJheUJ1ZmZlcnwhVWludDhBcnJheXxzdHJpbmd8IUFycmF5LjxudW1iZXI+fSBidWZmZXIgQW55dGhpbmcgdGhhdCBjYW4gYmUgd3JhcHBlZFxyXG4gICAgICAgICAqIEBwYXJhbSB7KHN0cmluZ3xib29sZWFuKT19IGVuY29kaW5nIFN0cmluZyBlbmNvZGluZyBpZiBgYnVmZmVyYCBpcyBhIHN0cmluZyAoXCJiYXNlNjRcIiwgXCJoZXhcIiwgXCJiaW5hcnlcIiwgZGVmYXVsdHMgdG9cclxuICAgICAgICAgKiAgXCJ1dGY4XCIpXHJcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gbGl0dGxlRW5kaWFuIFdoZXRoZXIgdG8gdXNlIGxpdHRsZSBvciBiaWcgZW5kaWFuIGJ5dGUgb3JkZXIuIERlZmF1bHRzIHRvXHJcbiAgICAgICAgICogIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfRU5ESUFOfS5cclxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBub0Fzc2VydCBXaGV0aGVyIHRvIHNraXAgYXNzZXJ0aW9ucyBvZiBvZmZzZXRzIGFuZCB2YWx1ZXMuIERlZmF1bHRzIHRvXHJcbiAgICAgICAgICogIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfTk9BU1NFUlR9LlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gQSBCeXRlQnVmZmVyIHdyYXBwaW5nIGBidWZmZXJgXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXIud3JhcCA9IGZ1bmN0aW9uKGJ1ZmZlciwgZW5jb2RpbmcsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIG5vQXNzZXJ0ID0gbGl0dGxlRW5kaWFuO1xyXG4gICAgICAgICAgICAgICAgbGl0dGxlRW5kaWFuID0gZW5jb2Rpbmc7XHJcbiAgICAgICAgICAgICAgICBlbmNvZGluZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJ1ZmZlciA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgIGVuY29kaW5nID0gXCJ1dGY4XCI7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImJhc2U2NFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQnl0ZUJ1ZmZlci5mcm9tQmFzZTY0KGJ1ZmZlciwgbGl0dGxlRW5kaWFuKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaGV4XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBCeXRlQnVmZmVyLmZyb21IZXgoYnVmZmVyLCBsaXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJiaW5hcnlcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJ5dGVCdWZmZXIuZnJvbUJpbmFyeShidWZmZXIsIGxpdHRsZUVuZGlhbik7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInV0ZjhcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJ5dGVCdWZmZXIuZnJvbVVURjgoYnVmZmVyLCBsaXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkZWJ1Z1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQnl0ZUJ1ZmZlci5mcm9tRGVidWcoYnVmZmVyLCBsaXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiVW5zdXBwb3J0ZWQgZW5jb2Rpbmc6IFwiK2VuY29kaW5nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYnVmZmVyID09PSBudWxsIHx8IHR5cGVvZiBidWZmZXIgIT09ICdvYmplY3QnKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBidWZmZXJcIik7XHJcbiAgICAgICAgICAgIHZhciBiYjtcclxuICAgICAgICAgICAgaWYgKEJ5dGVCdWZmZXIuaXNCeXRlQnVmZmVyKGJ1ZmZlcikpIHtcclxuICAgICAgICAgICAgICAgIGJiID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS5jbG9uZS5jYWxsKGJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICBiYi5tYXJrZWRPZmZzZXQgPSAtMTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBiYjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYnVmZmVyIGluc3RhbmNlb2YgVWludDhBcnJheSkgeyAvLyBFeHRyYWN0IEFycmF5QnVmZmVyIGZyb20gVWludDhBcnJheVxyXG4gICAgICAgICAgICAgICAgYmIgPSBuZXcgQnl0ZUJ1ZmZlcigwLCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KTtcclxuICAgICAgICAgICAgICAgIGlmIChidWZmZXIubGVuZ3RoID4gMCkgeyAvLyBBdm9pZCByZWZlcmVuY2VzIHRvIG1vcmUgdGhhbiBvbmUgRU1QVFlfQlVGRkVSXHJcbiAgICAgICAgICAgICAgICAgICAgYmIuYnVmZmVyID0gYnVmZmVyLmJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICBiYi5vZmZzZXQgPSBidWZmZXIuYnl0ZU9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICBiYi5saW1pdCA9IGJ1ZmZlci5ieXRlT2Zmc2V0ICsgYnVmZmVyLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBiYi52aWV3ID0gYnVmZmVyLmxlbmd0aCA+IDAgPyBuZXcgRGF0YVZpZXcoYnVmZmVyLmJ1ZmZlcikgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7IC8vIFJldXNlIEFycmF5QnVmZmVyXHJcbiAgICAgICAgICAgICAgICBiYiA9IG5ldyBCeXRlQnVmZmVyKDAsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ1ZmZlci5ieXRlTGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJiLmJ1ZmZlciA9IGJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICBiYi5vZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGJiLmxpbWl0ID0gYnVmZmVyLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgYmIudmlldyA9IGJ1ZmZlci5ieXRlTGVuZ3RoID4gMCA/IG5ldyBEYXRhVmlldyhidWZmZXIpIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYnVmZmVyKSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiKSB7IC8vIENyZWF0ZSBmcm9tIG9jdGV0c1xyXG4gICAgICAgICAgICAgICAgYmIgPSBuZXcgQnl0ZUJ1ZmZlcihidWZmZXIubGVuZ3RoLCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KTtcclxuICAgICAgICAgICAgICAgIGJiLmxpbWl0ID0gYnVmZmVyLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGZvciAoaT0wOyBpPGJ1ZmZlci5sZW5ndGg7ICsraSlcclxuICAgICAgICAgICAgICAgICAgICBiYi52aWV3LnNldFVpbnQ4KGksIGJ1ZmZlcltpXSk7XHJcbiAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBidWZmZXJcIik7IC8vIE90aGVyd2lzZSBmYWlsXHJcbiAgICAgICAgICAgIHJldHVybiBiYjtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyB0eXBlcy9pbnRzL2ludDhcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV3JpdGVzIGFuIDhiaXQgc2lnbmVkIGludGVnZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAxYCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQpIHtcclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicgfHwgdmFsdWUgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgdmFsdWU6IFwiK3ZhbHVlK1wiIChub3QgYW4gaW50ZWdlcilcIik7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSB8PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvZmZzZXQgKz0gMTtcclxuICAgICAgICAgICAgdmFyIGNhcGFjaXR5MCA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTApXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkwICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHkwIDogb2Zmc2V0KTtcclxuICAgICAgICAgICAgb2Zmc2V0IC09IDE7XHJcbiAgICAgICAgICAgIHRoaXMudmlldy5zZXRJbnQ4KG9mZnNldCwgdmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDE7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyaXRlcyBhbiA4Yml0IHNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3dyaXRlSW50OH0uXHJcbiAgICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAxYCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlQnl0ZSA9IEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVJbnQ4O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWFkcyBhbiA4Yml0IHNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBhZHZhbmNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDFgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMStcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52aWV3LmdldEludDgob2Zmc2V0KTtcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSAxO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVhZHMgYW4gOGJpdCBzaWduZWQgaW50ZWdlci4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciNyZWFkSW50OH0uXHJcbiAgICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMWAgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZEJ5dGUgPSBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRJbnQ4O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXcml0ZXMgYW4gOGJpdCB1bnNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMWAgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVVpbnQ4ID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJyB8fCB2YWx1ZSAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcclxuICAgICAgICAgICAgICAgIHZhbHVlID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb2Zmc2V0ICs9IDE7XHJcbiAgICAgICAgICAgIHZhciBjYXBhY2l0eTEgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHkxKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5MSAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5MSA6IG9mZnNldCk7XHJcbiAgICAgICAgICAgIG9mZnNldCAtPSAxO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXcuc2V0VWludDgob2Zmc2V0LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gMTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVhZHMgYW4gOGJpdCB1bnNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBhZHZhbmNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDFgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVaW50OCA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMSA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzErXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmlldy5nZXRVaW50OChvZmZzZXQpO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDE7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyB0eXBlcy9pbnRzL2ludDE2XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyaXRlcyBhIDE2Yml0IHNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMmAgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGBvZmZzZXRgIG9yIGB2YWx1ZWAgaXMgbm90IGEgdmFsaWQgbnVtYmVyXHJcbiAgICAgICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYG9mZnNldGAgaXMgb3V0IG9mIGJvdW5kc1xyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlSW50MTYgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGFuIGludGVnZXIpXCIpO1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgfD0gMDtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb2Zmc2V0ICs9IDI7XHJcbiAgICAgICAgICAgIHZhciBjYXBhY2l0eTIgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHkyKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5MiAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5MiA6IG9mZnNldCk7XHJcbiAgICAgICAgICAgIG9mZnNldCAtPSAyO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXcuc2V0SW50MTYob2Zmc2V0LCB2YWx1ZSwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDI7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyaXRlcyBhIDE2Yml0IHNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3dyaXRlSW50MTZ9LlxyXG4gICAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMmAgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGBvZmZzZXRgIG9yIGB2YWx1ZWAgaXMgbm90IGEgdmFsaWQgbnVtYmVyXHJcbiAgICAgICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYG9mZnNldGAgaXMgb3V0IG9mIGJvdW5kc1xyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlU2hvcnQgPSBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlSW50MTY7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlYWRzIGEgMTZiaXQgc2lnbmVkIGludGVnZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMmAgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXHJcbiAgICAgICAgICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgb2Zmc2V0YCBpcyBub3QgYSB2YWxpZCBudW1iZXJcclxuICAgICAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBgb2Zmc2V0YCBpcyBvdXQgb2YgYm91bmRzXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZEludDE2ID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAyID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMitcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52aWV3LmdldEludDE2KG9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDI7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWFkcyBhIDE2Yml0IHNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3JlYWRJbnQxNn0uXHJcbiAgICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMmAgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXHJcbiAgICAgICAgICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgb2Zmc2V0YCBpcyBub3QgYSB2YWxpZCBudW1iZXJcclxuICAgICAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBgb2Zmc2V0YCBpcyBvdXQgb2YgYm91bmRzXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZFNob3J0ID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkSW50MTY7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyaXRlcyBhIDE2Yml0IHVuc2lnbmVkIGludGVnZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAyYCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYG9mZnNldGAgb3IgYHZhbHVlYCBpcyBub3QgYSB2YWxpZCBudW1iZXJcclxuICAgICAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBgb2Zmc2V0YCBpcyBvdXQgb2YgYm91bmRzXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVVaW50MTYgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGFuIGludGVnZXIpXCIpO1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvZmZzZXQgKz0gMjtcclxuICAgICAgICAgICAgdmFyIGNhcGFjaXR5MyA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTMpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkzICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHkzIDogb2Zmc2V0KTtcclxuICAgICAgICAgICAgb2Zmc2V0IC09IDI7XHJcbiAgICAgICAgICAgIHRoaXMudmlldy5zZXRVaW50MTYob2Zmc2V0LCB2YWx1ZSwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDI7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlYWRzIGEgMTZiaXQgdW5zaWduZWQgaW50ZWdlci5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAyYCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcclxuICAgICAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG5vdCBhIHZhbGlkIG51bWJlclxyXG4gICAgICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG91dCBvZiBib3VuZHNcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVWludDE2ID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAyID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMitcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52aWV3LmdldFVpbnQxNihvZmZzZXQsIHRoaXMubGl0dGxlRW5kaWFuKTtcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSAyO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gdHlwZXMvaW50cy9pbnQzMlxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXcml0ZXMgYSAzMmJpdCBzaWduZWQgaW50ZWdlci5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA0YCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlSW50MzIgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGFuIGludGVnZXIpXCIpO1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgfD0gMDtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgIHZhciBjYXBhY2l0eTQgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHk0KVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5NCAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5NCA6IG9mZnNldCk7XHJcbiAgICAgICAgICAgIG9mZnNldCAtPSA0O1xyXG4gICAgICAgICAgICB0aGlzLnZpZXcuc2V0SW50MzIob2Zmc2V0LCB2YWx1ZSwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyaXRlcyBhIDMyYml0IHNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3dyaXRlSW50MzJ9LlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDRgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVJbnQgPSBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlSW50MzI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlYWRzIGEgMzJiaXQgc2lnbmVkIGludGVnZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDRgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRJbnQzMiA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgNCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzQrXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmlldy5nZXRJbnQzMihvZmZzZXQsIHRoaXMubGl0dGxlRW5kaWFuKTtcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVhZHMgYSAzMmJpdCBzaWduZWQgaW50ZWdlci4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciNyZWFkSW50MzJ9LlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBhZHZhbmNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDRgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRJbnQgPSBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRJbnQzMjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV3JpdGVzIGEgMzJiaXQgdW5zaWduZWQgaW50ZWdlci5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA0YCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVWludDMyID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJyB8fCB2YWx1ZSAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcclxuICAgICAgICAgICAgICAgIHZhbHVlID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgIHZhciBjYXBhY2l0eTUgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHk1KVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5NSAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5NSA6IG9mZnNldCk7XHJcbiAgICAgICAgICAgIG9mZnNldCAtPSA0O1xyXG4gICAgICAgICAgICB0aGlzLnZpZXcuc2V0VWludDMyKG9mZnNldCwgdmFsdWUsIHRoaXMubGl0dGxlRW5kaWFuKTtcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWFkcyBhIDMyYml0IHVuc2lnbmVkIGludGVnZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDRgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVaW50MzIgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIis0K1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZpZXcuZ2V0VWludDMyKG9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyB0eXBlcy9pbnRzL2ludDY0XHJcblxyXG4gICAgICAgIGlmIChMb25nKSB7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogV3JpdGVzIGEgNjRiaXQgc2lnbmVkIGludGVnZXIuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA4YCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUludDY0ID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghKHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgTG9uZykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgdmFsdWU6IFwiK3ZhbHVlK1wiIChub3QgYW4gaW50ZWdlciBvciBMb25nKVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSA4O1xyXG4gICAgICAgICAgICAgICAgdmFyIGNhcGFjaXR5NiA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHk2KVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzaXplKChjYXBhY2l0eTYgKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTYgOiBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0IC09IDg7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5saXR0bGVFbmRpYW4pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2V0SW50MzIob2Zmc2V0ICAsIHZhbHVlLmxvdyAsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRJbnQzMihvZmZzZXQrNCwgdmFsdWUuaGlnaCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRJbnQzMihvZmZzZXQgICwgdmFsdWUuaGlnaCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRJbnQzMihvZmZzZXQrNCwgdmFsdWUubG93ICwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA4O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogV3JpdGVzIGEgNjRiaXQgc2lnbmVkIGludGVnZXIuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjd3JpdGVJbnQ2NH0uXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA4YCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUxvbmcgPSBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlSW50NjQ7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogUmVhZHMgYSA2NGJpdCBzaWduZWQgaW50ZWdlci5cclxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDhgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHshTG9uZ31cclxuICAgICAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkSW50NjQgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyA4ID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzgrXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5saXR0bGVFbmRpYW5cclxuICAgICAgICAgICAgICAgICAgICA/IG5ldyBMb25nKHRoaXMudmlldy5nZXRJbnQzMihvZmZzZXQgICwgdHJ1ZSApLCB0aGlzLnZpZXcuZ2V0SW50MzIob2Zmc2V0KzQsIHRydWUgKSwgZmFsc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBuZXcgTG9uZyh0aGlzLnZpZXcuZ2V0SW50MzIob2Zmc2V0KzQsIGZhbHNlKSwgdGhpcy52aWV3LmdldEludDMyKG9mZnNldCAgLCBmYWxzZSksIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gODtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBSZWFkcyBhIDY0Yml0IHNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3JlYWRJbnQ2NH0uXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA4YCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAgICAgICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZExvbmcgPSBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRJbnQ2NDtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBXcml0ZXMgYSA2NGJpdCB1bnNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgOGAgaWYgb21pdHRlZC5cclxuICAgICAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVVaW50NjQgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcclxuICAgICAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21OdW1iZXIodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCEodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBMb25nKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhbiBpbnRlZ2VyIG9yIExvbmcpXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21OdW1iZXIodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDg7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2FwYWNpdHk3ID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTcpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5NyAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5NyA6IG9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgLT0gODtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRJbnQzMihvZmZzZXQgICwgdmFsdWUubG93ICwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldEludDMyKG9mZnNldCs0LCB2YWx1ZS5oaWdoLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldEludDMyKG9mZnNldCAgLCB2YWx1ZS5oaWdoLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldEludDMyKG9mZnNldCs0LCB2YWx1ZS5sb3cgLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDg7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBSZWFkcyBhIDY0Yml0IHVuc2lnbmVkIGludGVnZXIuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA4YCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAgICAgICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZFVpbnQ2NCA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDggPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrOCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLmxpdHRsZUVuZGlhblxyXG4gICAgICAgICAgICAgICAgICAgID8gbmV3IExvbmcodGhpcy52aWV3LmdldEludDMyKG9mZnNldCAgLCB0cnVlICksIHRoaXMudmlldy5nZXRJbnQzMihvZmZzZXQrNCwgdHJ1ZSApLCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgICAgIDogbmV3IExvbmcodGhpcy52aWV3LmdldEludDMyKG9mZnNldCs0LCBmYWxzZSksIHRoaXMudmlldy5nZXRJbnQzMihvZmZzZXQgICwgZmFsc2UpLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gODtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgfSAvLyBMb25nXHJcblxyXG5cclxuICAgICAgICAvLyB0eXBlcy9mbG9hdHMvZmxvYXQzMlxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXcml0ZXMgYSAzMmJpdCBmbG9hdC5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA0YCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlRmxvYXQzMiA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQpIHtcclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhIG51bWJlcilcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICB2YXIgY2FwYWNpdHk4ID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5OClcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplKChjYXBhY2l0eTggKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTggOiBvZmZzZXQpO1xyXG4gICAgICAgICAgICBvZmZzZXQgLT0gNDtcclxuICAgICAgICAgICAgdGhpcy52aWV3LnNldEZsb2F0MzIob2Zmc2V0LCB2YWx1ZSwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyaXRlcyBhIDMyYml0IGZsb2F0LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3dyaXRlRmxvYXQzMn0uXHJcbiAgICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgNGAgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUZsb2F0ID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUZsb2F0MzI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlYWRzIGEgMzJiaXQgZmxvYXQuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDRgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkRmxvYXQzMiA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgNCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzQrXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmlldy5nZXRGbG9hdDMyKG9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWFkcyBhIDMyYml0IGZsb2F0LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3JlYWRGbG9hdDMyfS5cclxuICAgICAgICAgKiBAZnVuY3Rpb25cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgNGAgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRGbG9hdCA9IEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZEZsb2F0MzI7XHJcblxyXG4gICAgICAgIC8vIHR5cGVzL2Zsb2F0cy9mbG9hdDY0XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyaXRlcyBhIDY0Yml0IGZsb2F0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDhgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVGbG9hdDY0ID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGEgbnVtYmVyKVwiKTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb2Zmc2V0ICs9IDg7XHJcbiAgICAgICAgICAgIHZhciBjYXBhY2l0eTkgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHk5KVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5OSAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5OSA6IG9mZnNldCk7XHJcbiAgICAgICAgICAgIG9mZnNldCAtPSA4O1xyXG4gICAgICAgICAgICB0aGlzLnZpZXcuc2V0RmxvYXQ2NChvZmZzZXQsIHZhbHVlLCB0aGlzLmxpdHRsZUVuZGlhbik7XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gODtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV3JpdGVzIGEgNjRiaXQgZmxvYXQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjd3JpdGVGbG9hdDY0fS5cclxuICAgICAgICAgKiBAZnVuY3Rpb25cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA4YCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlRG91YmxlID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUZsb2F0NjQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlYWRzIGEgNjRiaXQgZmxvYXQuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDhgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkRmxvYXQ2NCA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgOCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzgrXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmlldy5nZXRGbG9hdDY0KG9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDg7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWFkcyBhIDY0Yml0IGZsb2F0LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3JlYWRGbG9hdDY0fS5cclxuICAgICAgICAgKiBAZnVuY3Rpb25cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgOGAgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWREb3VibGUgPSBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRGbG9hdDY0O1xyXG5cclxuXHJcbiAgICAgICAgLy8gdHlwZXMvdmFyaW50cy92YXJpbnQzMlxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNYXhpbXVtIG51bWJlciBvZiBieXRlcyByZXF1aXJlZCB0byBzdG9yZSBhIDMyYml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICogQGNvbnN0XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXIuTUFYX1ZBUklOVDMyX0JZVEVTID0gNTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FsY3VsYXRlcyB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZXF1aXJlZCB0byBzdG9yZSBhIDMyYml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byBlbmNvZGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBOdW1iZXIgb2YgYnl0ZXMgcmVxdWlyZWQuIENhcHBlZCB0byB7QGxpbmsgQnl0ZUJ1ZmZlci5NQVhfVkFSSU5UMzJfQllURVN9XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXIuY2FsY3VsYXRlVmFyaW50MzIgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAvLyByZWY6IHNyYy9nb29nbGUvcHJvdG9idWYvaW8vY29kZWRfc3RyZWFtLmNjXHJcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgPj4+IDA7XHJcbiAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgMSA8PCA3ICkgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlIDwgMSA8PCAxNCkgcmV0dXJuIDI7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlIDwgMSA8PCAyMSkgcmV0dXJuIDM7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlIDwgMSA8PCAyOCkgcmV0dXJuIDQ7XHJcbiAgICAgICAgICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDU7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogWmlnemFnIGVuY29kZXMgYSBzaWduZWQgMzJiaXQgaW50ZWdlciBzbyB0aGF0IGl0IGNhbiBiZSBlZmZlY3RpdmVseSB1c2VkIHdpdGggdmFyaW50IGVuY29kaW5nLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFNpZ25lZCAzMmJpdCBpbnRlZ2VyXHJcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn0gVW5zaWduZWQgemlnemFnIGVuY29kZWQgMzJiaXQgaW50ZWdlclxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyLnppZ1phZ0VuY29kZTMyID0gZnVuY3Rpb24obikge1xyXG4gICAgICAgICAgICByZXR1cm4gKCgobiB8PSAwKSA8PCAxKSBeIChuID4+IDMxKSkgPj4+IDA7IC8vIHJlZjogc3JjL2dvb2dsZS9wcm90b2J1Zi93aXJlX2Zvcm1hdF9saXRlLmhcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZWNvZGVzIGEgemlnemFnIGVuY29kZWQgc2lnbmVkIDMyYml0IGludGVnZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVW5zaWduZWQgemlnemFnIGVuY29kZWQgMzJiaXQgaW50ZWdlclxyXG4gICAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFNpZ25lZCAzMmJpdCBpbnRlZ2VyXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXIuemlnWmFnRGVjb2RlMzIgPSBmdW5jdGlvbihuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKG4gPj4+IDEpIF4gLShuICYgMSkpIHwgMDsgLy8gLy8gcmVmOiBzcmMvZ29vZ2xlL3Byb3RvYnVmL3dpcmVfZm9ybWF0X2xpdGUuaFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyaXRlcyBhIDMyYml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICAgICAqICB3cml0dGVuIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfG51bWJlcn0gdGhpcyBpZiBgb2Zmc2V0YCBpcyBvbWl0dGVkLCBlbHNlIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW5cclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVZhcmludDMyID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJyB8fCB2YWx1ZSAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcclxuICAgICAgICAgICAgICAgIHZhbHVlIHw9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBzaXplID0gQnl0ZUJ1ZmZlci5jYWxjdWxhdGVWYXJpbnQzMih2YWx1ZSksXHJcbiAgICAgICAgICAgICAgICBiO1xyXG4gICAgICAgICAgICBvZmZzZXQgKz0gc2l6ZTtcclxuICAgICAgICAgICAgdmFyIGNhcGFjaXR5MTAgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHkxMClcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplKChjYXBhY2l0eTEwICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHkxMCA6IG9mZnNldCk7XHJcbiAgICAgICAgICAgIG9mZnNldCAtPSBzaXplO1xyXG4gICAgICAgICAgICAvLyByZWY6IGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vc2VhcmNoZnJhbWUjV1RlaWJva0Y2Z0UvdHJ1bmsvc3JjL2dvb2dsZS9wcm90b2J1Zi9pby9jb2RlZF9zdHJlYW0uY2NcclxuICAgICAgICAgICAgdGhpcy52aWV3LnNldFVpbnQ4KG9mZnNldCwgYiA9IHZhbHVlIHwgMHg4MCk7XHJcbiAgICAgICAgICAgIHZhbHVlID4+Pj0gMDtcclxuICAgICAgICAgICAgaWYgKHZhbHVlID49IDEgPDwgNykge1xyXG4gICAgICAgICAgICAgICAgYiA9ICh2YWx1ZSA+PiA3KSB8IDB4ODA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2V0VWludDgob2Zmc2V0KzEsIGIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID49IDEgPDwgMTQpIHtcclxuICAgICAgICAgICAgICAgICAgICBiID0gKHZhbHVlID4+IDE0KSB8IDB4ODA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldFVpbnQ4KG9mZnNldCsyLCBiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPj0gMSA8PCAyMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiID0gKHZhbHVlID4+IDIxKSB8IDB4ODA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRVaW50OChvZmZzZXQrMywgYik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+PSAxIDw8IDI4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2V0VWludDgob2Zmc2V0KzQsICh2YWx1ZSA+PiAyOCkgJiAweDBGKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemUgPSA1O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldFVpbnQ4KG9mZnNldCszLCBiICYgMHg3Rik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplID0gNDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRVaW50OChvZmZzZXQrMiwgYiAmIDB4N0YpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplID0gMztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRVaW50OChvZmZzZXQrMSwgYiAmIDB4N0YpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpemUgPSAyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldFVpbnQ4KG9mZnNldCwgYiAmIDB4N0YpO1xyXG4gICAgICAgICAgICAgICAgc2l6ZSA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCArPSBzaXplO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHNpemU7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV3JpdGVzIGEgemlnLXphZyBlbmNvZGVkIDMyYml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICAgICAqICB3cml0dGVuIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfG51bWJlcn0gdGhpcyBpZiBgb2Zmc2V0YCBpcyBvbWl0dGVkLCBlbHNlIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW5cclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVZhcmludDMyWmlnWmFnID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy53cml0ZVZhcmludDMyKEJ5dGVCdWZmZXIuemlnWmFnRW5jb2RlMzIodmFsdWUpLCBvZmZzZXQpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlYWRzIGEgMzJiaXQgYmFzZSAxMjggdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICAgICAqICB3cml0dGVuIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMge251bWJlcnwhe3ZhbHVlOiBudW1iZXIsIGxlbmd0aDogbnVtYmVyfX0gVGhlIHZhbHVlIHJlYWQgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIHZhbHVlIHJlYWRcclxuICAgICAgICAgKiAgYW5kIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHJlYWQuXHJcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIGl0J3Mgbm90IGEgdmFsaWQgdmFyaW50LiBIYXMgYSBwcm9wZXJ0eSBgdHJ1bmNhdGVkID0gdHJ1ZWAgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBkYXRhIGF2YWlsYWJsZVxyXG4gICAgICAgICAqICB0byBmdWxseSBkZWNvZGUgdGhlIHZhcmludC5cclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVmFyaW50MzIgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDEgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIisxK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyByZWY6IHNyYy9nb29nbGUvcHJvdG9idWYvaW8vY29kZWRfc3RyZWFtLmNjXHJcbiAgICAgICAgICAgIHZhciBzaXplID0gMCxcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gMCA+Pj4gMCxcclxuICAgICAgICAgICAgICAgIHRlbXAsXHJcbiAgICAgICAgICAgICAgICBpb2Zmc2V0O1xyXG4gICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICBpb2Zmc2V0ID0gb2Zmc2V0K3NpemU7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQgJiYgaW9mZnNldCA+IHRoaXMubGltaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyID0gRXJyb3IoXCJUcnVuY2F0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyWyd0cnVuY2F0ZWQnXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGVtcCA9IHRoaXMudmlldy5nZXRVaW50OChpb2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgIGlmIChzaXplIDwgNSlcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSB8PSAoKHRlbXAmMHg3Rik8PCg3KnNpemUpKSA+Pj4gMDtcclxuICAgICAgICAgICAgICAgICsrc2l6ZTtcclxuICAgICAgICAgICAgfSB3aGlsZSAoKHRlbXAgJiAweDgwKSA9PT0gMHg4MCk7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgfCAwOyAvLyBNYWtlIHN1cmUgdG8gZGlzY2FyZCB0aGUgaGlnaGVyIG9yZGVyIGJpdHNcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCArPSBzaXplO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBcInZhbHVlXCI6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgXCJsZW5ndGhcIjogc2l6ZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlYWRzIGEgemlnLXphZyBlbmNvZGVkIDMyYml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAgICAgKiAgd3JpdHRlbiBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ8IXt2YWx1ZTogbnVtYmVyLCBsZW5ndGg6IG51bWJlcn19IFRoZSB2YWx1ZSByZWFkIGlmIG9mZnNldCBpcyBvbWl0dGVkLCBlbHNlIHRoZSB2YWx1ZSByZWFkXHJcbiAgICAgICAgICogIGFuZCB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZWFkLlxyXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBpdCdzIG5vdCBhIHZhbGlkIHZhcmludFxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRWYXJpbnQzMlppZ1phZyA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgdmFsID0gdGhpcy5yZWFkVmFyaW50MzIob2Zmc2V0KTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKVxyXG4gICAgICAgICAgICAgICAgdmFsW1widmFsdWVcIl0gPSBCeXRlQnVmZmVyLnppZ1phZ0RlY29kZTMyKHZhbFtcInZhbHVlXCJdKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdmFsID0gQnl0ZUJ1ZmZlci56aWdaYWdEZWNvZGUzMih2YWwpO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIHR5cGVzL3ZhcmludHMvdmFyaW50NjRcclxuXHJcbiAgICAgICAgaWYgKExvbmcpIHtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBNYXhpbXVtIG51bWJlciBvZiBieXRlcyByZXF1aXJlZCB0byBzdG9yZSBhIDY0Yml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAgICAgKiBAY29uc3RcclxuICAgICAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgQnl0ZUJ1ZmZlci5NQVhfVkFSSU5UNjRfQllURVMgPSAxMDtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBDYWxjdWxhdGVzIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHJlcXVpcmVkIHRvIHN0b3JlIGEgNjRiaXQgYmFzZSAxMjggdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSB2YWx1ZSBWYWx1ZSB0byBlbmNvZGVcclxuICAgICAgICAgICAgICogQHJldHVybnMge251bWJlcn0gTnVtYmVyIG9mIGJ5dGVzIHJlcXVpcmVkLiBDYXBwZWQgdG8ge0BsaW5rIEJ5dGVCdWZmZXIuTUFYX1ZBUklOVDY0X0JZVEVTfVxyXG4gICAgICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBCeXRlQnVmZmVyLmNhbGN1bGF0ZVZhcmludDY0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIC8vIHJlZjogc3JjL2dvb2dsZS9wcm90b2J1Zi9pby9jb2RlZF9zdHJlYW0uY2NcclxuICAgICAgICAgICAgICAgIHZhciBwYXJ0MCA9IHZhbHVlLnRvSW50KCkgPj4+IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFydDEgPSB2YWx1ZS5zaGlmdFJpZ2h0VW5zaWduZWQoMjgpLnRvSW50KCkgPj4+IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFydDIgPSB2YWx1ZS5zaGlmdFJpZ2h0VW5zaWduZWQoNTYpLnRvSW50KCkgPj4+IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFydDIgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0MSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0MCA8IDEgPDwgMTQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFydDAgPCAxIDw8IDcgPyAxIDogMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnQwIDwgMSA8PCAyMSA/IDMgOiA0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0MSA8IDEgPDwgMTQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFydDEgPCAxIDw8IDcgPyA1IDogNjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnQxIDwgMSA8PCAyMSA/IDcgOiA4O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJ0MiA8IDEgPDwgNyA/IDkgOiAxMDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBaaWd6YWcgZW5jb2RlcyBhIHNpZ25lZCA2NGJpdCBpbnRlZ2VyIHNvIHRoYXQgaXQgY2FuIGJlIGVmZmVjdGl2ZWx5IHVzZWQgd2l0aCB2YXJpbnQgZW5jb2RpbmcuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSB2YWx1ZSBTaWduZWQgbG9uZ1xyXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFVuc2lnbmVkIHppZ3phZyBlbmNvZGVkIGxvbmdcclxuICAgICAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgQnl0ZUJ1ZmZlci56aWdaYWdFbmNvZGU2NCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbU51bWJlcih2YWx1ZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUudW5zaWduZWQgIT09IGZhbHNlKSB2YWx1ZSA9IHZhbHVlLnRvU2lnbmVkKCk7XHJcbiAgICAgICAgICAgICAgICAvLyByZWY6IHNyYy9nb29nbGUvcHJvdG9idWYvd2lyZV9mb3JtYXRfbGl0ZS5oXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuc2hpZnRMZWZ0KDEpLnhvcih2YWx1ZS5zaGlmdFJpZ2h0KDYzKSkudG9VbnNpZ25lZCgpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIERlY29kZXMgYSB6aWd6YWcgZW5jb2RlZCBzaWduZWQgNjRiaXQgaW50ZWdlci5cclxuICAgICAgICAgICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ9IHZhbHVlIFVuc2lnbmVkIHppZ3phZyBlbmNvZGVkIGxvbmcgb3IgSmF2YVNjcmlwdCBudW1iZXJcclxuICAgICAgICAgICAgICogQHJldHVybnMgeyFMb25nfSBTaWduZWQgbG9uZ1xyXG4gICAgICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBCeXRlQnVmZmVyLnppZ1phZ0RlY29kZTY0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tTnVtYmVyKHZhbHVlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZS51bnNpZ25lZCAhPT0gZmFsc2UpIHZhbHVlID0gdmFsdWUudG9TaWduZWQoKTtcclxuICAgICAgICAgICAgICAgIC8vIHJlZjogc3JjL2dvb2dsZS9wcm90b2J1Zi93aXJlX2Zvcm1hdF9saXRlLmhcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5zaGlmdFJpZ2h0VW5zaWduZWQoMSkueG9yKHZhbHVlLmFuZChMb25nLk9ORSkudG9TaWduZWQoKS5uZWdhdGUoKSkudG9TaWduZWQoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBXcml0ZXMgYSA2NGJpdCBiYXNlIDEyOCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cclxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ8TG9uZ30gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgICAgICAgICAqICB3cml0dGVuIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcnxudW1iZXJ9IGB0aGlzYCBpZiBvZmZzZXQgaXMgb21pdHRlZCwgZWxzZSB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyB3cml0dGVuLlxyXG4gICAgICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVmFyaW50NjQgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcclxuICAgICAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21OdW1iZXIodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCEodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBMb25nKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhbiBpbnRlZ2VyIG9yIExvbmcpXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21OdW1iZXIodmFsdWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlLnVuc2lnbmVkICE9PSBmYWxzZSkgdmFsdWUgPSB2YWx1ZS50b1NpZ25lZCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNpemUgPSBCeXRlQnVmZmVyLmNhbGN1bGF0ZVZhcmludDY0KHZhbHVlKSxcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0MCA9IHZhbHVlLnRvSW50KCkgPj4+IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFydDEgPSB2YWx1ZS5zaGlmdFJpZ2h0VW5zaWduZWQoMjgpLnRvSW50KCkgPj4+IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFydDIgPSB2YWx1ZS5zaGlmdFJpZ2h0VW5zaWduZWQoNTYpLnRvSW50KCkgPj4+IDA7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gc2l6ZTtcclxuICAgICAgICAgICAgICAgIHZhciBjYXBhY2l0eTExID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTExKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzaXplKChjYXBhY2l0eTExICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHkxMSA6IG9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgLT0gc2l6ZTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoc2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6IHRoaXMudmlldy5zZXRVaW50OChvZmZzZXQrOSwgKHBhcnQyID4+PiAgNykgJiAweDAxKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDkgOiB0aGlzLnZpZXcuc2V0VWludDgob2Zmc2V0KzgsIHNpemUgIT09IDkgPyAocGFydDIgICAgICAgKSB8IDB4ODAgOiAocGFydDIgICAgICAgKSAmIDB4N0YpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOCA6IHRoaXMudmlldy5zZXRVaW50OChvZmZzZXQrNywgc2l6ZSAhPT0gOCA/IChwYXJ0MSA+Pj4gMjEpIHwgMHg4MCA6IChwYXJ0MSA+Pj4gMjEpICYgMHg3Rik7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3IDogdGhpcy52aWV3LnNldFVpbnQ4KG9mZnNldCs2LCBzaXplICE9PSA3ID8gKHBhcnQxID4+PiAxNCkgfCAweDgwIDogKHBhcnQxID4+PiAxNCkgJiAweDdGKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDYgOiB0aGlzLnZpZXcuc2V0VWludDgob2Zmc2V0KzUsIHNpemUgIT09IDYgPyAocGFydDEgPj4+ICA3KSB8IDB4ODAgOiAocGFydDEgPj4+ICA3KSAmIDB4N0YpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNSA6IHRoaXMudmlldy5zZXRVaW50OChvZmZzZXQrNCwgc2l6ZSAhPT0gNSA/IChwYXJ0MSAgICAgICApIHwgMHg4MCA6IChwYXJ0MSAgICAgICApICYgMHg3Rik7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0IDogdGhpcy52aWV3LnNldFVpbnQ4KG9mZnNldCszLCBzaXplICE9PSA0ID8gKHBhcnQwID4+PiAyMSkgfCAweDgwIDogKHBhcnQwID4+PiAyMSkgJiAweDdGKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDMgOiB0aGlzLnZpZXcuc2V0VWludDgob2Zmc2V0KzIsIHNpemUgIT09IDMgPyAocGFydDAgPj4+IDE0KSB8IDB4ODAgOiAocGFydDAgPj4+IDE0KSAmIDB4N0YpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMiA6IHRoaXMudmlldy5zZXRVaW50OChvZmZzZXQrMSwgc2l6ZSAhPT0gMiA/IChwYXJ0MCA+Pj4gIDcpIHwgMHg4MCA6IChwYXJ0MCA+Pj4gIDcpICYgMHg3Rik7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxIDogdGhpcy52aWV3LnNldFVpbnQ4KG9mZnNldCAgLCBzaXplICE9PSAxID8gKHBhcnQwICAgICAgICkgfCAweDgwIDogKHBhcnQwICAgICAgICkgJiAweDdGKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IHNpemU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaXplO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFdyaXRlcyBhIHppZy16YWcgZW5jb2RlZCA2NGJpdCBiYXNlIDEyOCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cclxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ8TG9uZ30gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgICAgICAgICAqICB3cml0dGVuIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcnxudW1iZXJ9IGB0aGlzYCBpZiBvZmZzZXQgaXMgb21pdHRlZCwgZWxzZSB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyB3cml0dGVuLlxyXG4gICAgICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVmFyaW50NjRaaWdaYWcgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy53cml0ZVZhcmludDY0KEJ5dGVCdWZmZXIuemlnWmFnRW5jb2RlNjQodmFsdWUpLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFJlYWRzIGEgNjRiaXQgYmFzZSAxMjggdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuIFJlcXVpcmVzIExvbmcuanMuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAgICAgICAgICogIHJlYWQgaWYgb21pdHRlZC5cclxuICAgICAgICAgICAgICogQHJldHVybnMgeyFMb25nfCF7dmFsdWU6IExvbmcsIGxlbmd0aDogbnVtYmVyfX0gVGhlIHZhbHVlIHJlYWQgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIHZhbHVlIHJlYWQgYW5kXHJcbiAgICAgICAgICAgICAqICB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZWFkLlxyXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgaXQncyBub3QgYSB2YWxpZCB2YXJpbnRcclxuICAgICAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVmFyaW50NjQgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzErXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gcmVmOiBzcmMvZ29vZ2xlL3Byb3RvYnVmL2lvL2NvZGVkX3N0cmVhbS5jY1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gb2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnQwID0gMCxcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0MSA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFydDIgPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGIgID0gMDtcclxuICAgICAgICAgICAgICAgIGIgPSB0aGlzLnZpZXcuZ2V0VWludDgob2Zmc2V0KyspOyBwYXJ0MCAgPSAoYiAmIDB4N0YpICAgICAgOyBpZiAoYiAmIDB4ODApIHtcclxuICAgICAgICAgICAgICAgIGIgPSB0aGlzLnZpZXcuZ2V0VWludDgob2Zmc2V0KyspOyBwYXJ0MCB8PSAoYiAmIDB4N0YpIDw8ICA3OyBpZiAoYiAmIDB4ODApIHtcclxuICAgICAgICAgICAgICAgIGIgPSB0aGlzLnZpZXcuZ2V0VWludDgob2Zmc2V0KyspOyBwYXJ0MCB8PSAoYiAmIDB4N0YpIDw8IDE0OyBpZiAoYiAmIDB4ODApIHtcclxuICAgICAgICAgICAgICAgIGIgPSB0aGlzLnZpZXcuZ2V0VWludDgob2Zmc2V0KyspOyBwYXJ0MCB8PSAoYiAmIDB4N0YpIDw8IDIxOyBpZiAoYiAmIDB4ODApIHtcclxuICAgICAgICAgICAgICAgIGIgPSB0aGlzLnZpZXcuZ2V0VWludDgob2Zmc2V0KyspOyBwYXJ0MSAgPSAoYiAmIDB4N0YpICAgICAgOyBpZiAoYiAmIDB4ODApIHtcclxuICAgICAgICAgICAgICAgIGIgPSB0aGlzLnZpZXcuZ2V0VWludDgob2Zmc2V0KyspOyBwYXJ0MSB8PSAoYiAmIDB4N0YpIDw8ICA3OyBpZiAoYiAmIDB4ODApIHtcclxuICAgICAgICAgICAgICAgIGIgPSB0aGlzLnZpZXcuZ2V0VWludDgob2Zmc2V0KyspOyBwYXJ0MSB8PSAoYiAmIDB4N0YpIDw8IDE0OyBpZiAoYiAmIDB4ODApIHtcclxuICAgICAgICAgICAgICAgIGIgPSB0aGlzLnZpZXcuZ2V0VWludDgob2Zmc2V0KyspOyBwYXJ0MSB8PSAoYiAmIDB4N0YpIDw8IDIxOyBpZiAoYiAmIDB4ODApIHtcclxuICAgICAgICAgICAgICAgIGIgPSB0aGlzLnZpZXcuZ2V0VWludDgob2Zmc2V0KyspOyBwYXJ0MiAgPSAoYiAmIDB4N0YpICAgICAgOyBpZiAoYiAmIDB4ODApIHtcclxuICAgICAgICAgICAgICAgIGIgPSB0aGlzLnZpZXcuZ2V0VWludDgob2Zmc2V0KyspOyBwYXJ0MiB8PSAoYiAmIDB4N0YpIDw8ICA3OyBpZiAoYiAmIDB4ODApIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiQnVmZmVyIG92ZXJydW5cIik7IH19fX19fX19fX1cclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IExvbmcuZnJvbUJpdHMocGFydDAgfCAocGFydDEgPDwgMjgpLCAocGFydDEgPj4+IDQpIHwgKHBhcnQyKSA8PCAyNCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAndmFsdWUnOiB2YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2xlbmd0aCc6IG9mZnNldC1zdGFydFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogUmVhZHMgYSB6aWctemFnIGVuY29kZWQgNjRiaXQgYmFzZSAxMjggdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuIFJlcXVpcmVzIExvbmcuanMuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAgICAgICAgICogIHJlYWQgaWYgb21pdHRlZC5cclxuICAgICAgICAgICAgICogQHJldHVybnMgeyFMb25nfCF7dmFsdWU6IExvbmcsIGxlbmd0aDogbnVtYmVyfX0gVGhlIHZhbHVlIHJlYWQgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIHZhbHVlIHJlYWQgYW5kXHJcbiAgICAgICAgICAgICAqICB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZWFkLlxyXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgaXQncyBub3QgYSB2YWxpZCB2YXJpbnRcclxuICAgICAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVmFyaW50NjRaaWdaYWcgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWwgPSB0aGlzLnJlYWRWYXJpbnQ2NChvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCAmJiB2YWxbJ3ZhbHVlJ10gaW5zdGFuY2VvZiBMb25nKVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbFtcInZhbHVlXCJdID0gQnl0ZUJ1ZmZlci56aWdaYWdEZWNvZGU2NCh2YWxbXCJ2YWx1ZVwiXSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gQnl0ZUJ1ZmZlci56aWdaYWdEZWNvZGU2NCh2YWwpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgfSAvLyBMb25nXHJcblxyXG5cclxuICAgICAgICAvLyB0eXBlcy9zdHJpbmdzL2NzdHJpbmdcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV3JpdGVzIGEgTlVMTC10ZXJtaW5hdGVkIFVURjggZW5jb2RlZCBzdHJpbmcuIEZvciB0aGlzIHRvIHdvcmsgdGhlIHNwZWNpZmllZCBzdHJpbmcgbXVzdCBub3QgY29udGFpbiBhbnkgTlVMTFxyXG4gICAgICAgICAqICBjaGFyYWN0ZXJzIGl0c2VsZi5cclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byB3cml0ZVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICAgICAqICBjb250YWluZWQgaW4gYHN0cmAgKyAxIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfG51bWJlcn0gdGhpcyBpZiBvZmZzZXQgaXMgb21pdHRlZCwgZWxzZSB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyB3cml0dGVuXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVDU3RyaW5nID0gZnVuY3Rpb24oc3RyLCBvZmZzZXQpIHtcclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgICAgIHZhciBpLFxyXG4gICAgICAgICAgICAgICAgayA9IHN0ci5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgc3RyOiBOb3QgYSBzdHJpbmdcIik7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGk9MDsgaTxrOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RyLmNoYXJDb2RlQXQoaSkgPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHN0cjogQ29udGFpbnMgTlVMTC1jaGFyYWN0ZXJzXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIC8vIFVURjggc3RyaW5ncyBkbyBub3QgY29udGFpbiB6ZXJvIGJ5dGVzIGluIGJldHdlZW4gZXhjZXB0IGZvciB0aGUgemVybyBjaGFyYWN0ZXIsIHNvOlxyXG4gICAgICAgICAgICBrID0gdXRmeC5jYWxjdWxhdGVVVEYxNmFzVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSlbMV07XHJcbiAgICAgICAgICAgIG9mZnNldCArPSBrKzE7XHJcbiAgICAgICAgICAgIHZhciBjYXBhY2l0eTEyID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5MTIpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkxMiAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5MTIgOiBvZmZzZXQpO1xyXG4gICAgICAgICAgICBvZmZzZXQgLT0gaysxO1xyXG4gICAgICAgICAgICB1dGZ4LmVuY29kZVVURjE2dG9VVEY4KHN0cmluZ1NvdXJjZShzdHIpLCBmdW5jdGlvbihiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2V0VWludDgob2Zmc2V0KyssIGIpO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXcuc2V0VWludDgob2Zmc2V0KyssIDApO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0IC0gc3RhcnQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWFkcyBhIE5VTEwtdGVybWluYXRlZCBVVEY4IGVuY29kZWQgc3RyaW5nLiBGb3IgdGhpcyB0byB3b3JrIHRoZSBzdHJpbmcgcmVhZCBtdXN0IG5vdCBjb250YWluIGFueSBOVUxMIGNoYXJhY3RlcnNcclxuICAgICAgICAgKiAgaXRzZWxmLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAgICAgKiAgcmVhZCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd8IXtzdHJpbmc6IHN0cmluZywgbGVuZ3RoOiBudW1iZXJ9fSBUaGUgc3RyaW5nIHJlYWQgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIHN0cmluZ1xyXG4gICAgICAgICAqICByZWFkIGFuZCB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZWFkLlxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRDU3RyaW5nID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMStcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gb2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgdGVtcDtcclxuICAgICAgICAgICAgLy8gVVRGOCBzdHJpbmdzIGRvIG5vdCBjb250YWluIHplcm8gYnl0ZXMgaW4gYmV0d2VlbiBleGNlcHQgZm9yIHRoZSB6ZXJvIGNoYXJhY3RlciBpdHNlbGYsIHNvOlxyXG4gICAgICAgICAgICB2YXIgc2QsIGIgPSAtMTtcclxuICAgICAgICAgICAgdXRmeC5kZWNvZGVVVEY4dG9VVEYxNihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmIChiID09PSAwKSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPj0gdGhpcy5saW1pdClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogVHJ1bmNhdGVkIGRhdGEsIFwiK29mZnNldCtcIiA8IFwiK3RoaXMubGltaXQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChiID0gdGhpcy52aWV3LmdldFVpbnQ4KG9mZnNldCsrKSkgPT09IDAgPyBudWxsIDogYjtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCBzZCA9IHN0cmluZ0Rlc3RpbmF0aW9uKCksIHRydWUpO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNkKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwic3RyaW5nXCI6IHNkKCksXHJcbiAgICAgICAgICAgICAgICAgICAgXCJsZW5ndGhcIjogb2Zmc2V0IC0gc3RhcnRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyB0eXBlcy9zdHJpbmdzL2lzdHJpbmdcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV3JpdGVzIGEgbGVuZ3RoIGFzIHVpbnQzMiBwcmVmaXhlZCBVVEY4IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIHdyaXRlXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgICAgICogIHdyaXR0ZW4gaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ8bnVtYmVyfSBgdGhpc2AgaWYgYG9mZnNldGAgaXMgb21pdHRlZCwgZWxzZSB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyB3cml0dGVuXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciN3cml0ZVZhcmludDMyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUlTdHJpbmcgPSBmdW5jdGlvbihzdHIsIG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBzdHI6IE5vdCBhIHN0cmluZ1wiKTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gb2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgaztcclxuICAgICAgICAgICAgayA9IHV0ZnguY2FsY3VsYXRlVVRGMTZhc1VURjgoc3RyaW5nU291cmNlKHN0ciksIHRoaXMubm9Bc3NlcnQpWzFdO1xyXG4gICAgICAgICAgICBvZmZzZXQgKz0gNCtrO1xyXG4gICAgICAgICAgICB2YXIgY2FwYWNpdHkxMyA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTEzKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5MTMgKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTEzIDogb2Zmc2V0KTtcclxuICAgICAgICAgICAgb2Zmc2V0IC09IDQraztcclxuICAgICAgICAgICAgdGhpcy52aWV3LnNldFVpbnQzMihvZmZzZXQsIGssIHRoaXMubGl0dGxlRW5kaWFuKTtcclxuICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgIHV0ZnguZW5jb2RlVVRGMTZ0b1VURjgoc3RyaW5nU291cmNlKHN0ciksIGZ1bmN0aW9uKGIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRVaW50OChvZmZzZXQrKywgYik7XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIGlmIChvZmZzZXQgIT09IHN0YXJ0ICsgNCArIGspXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogVHJ1bmNhdGVkIGRhdGEsIFwiK29mZnNldCtcIiA9PSBcIisob2Zmc2V0KzQraykpO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG9mZnNldCAtIHN0YXJ0O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlYWRzIGEgbGVuZ3RoIGFzIHVpbnQzMiBwcmVmaXhlZCBVVEY4IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAgICAgKiAgcmVhZCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd8IXtzdHJpbmc6IHN0cmluZywgbGVuZ3RoOiBudW1iZXJ9fSBUaGUgc3RyaW5nIHJlYWQgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIHN0cmluZ1xyXG4gICAgICAgICAqICByZWFkIGFuZCB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZWFkLlxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKiBAc2VlIEJ5dGVCdWZmZXIjcmVhZFZhcmludDMyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkSVN0cmluZyA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgNCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzQrXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB0ZW1wID0gMCxcclxuICAgICAgICAgICAgICAgIHN0YXJ0ID0gb2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgc3RyO1xyXG4gICAgICAgICAgICB0ZW1wID0gdGhpcy52aWV3LmdldFVpbnQzMihvZmZzZXQsIHRoaXMubGl0dGxlRW5kaWFuKTtcclxuICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgIHZhciBrID0gb2Zmc2V0ICsgdGVtcCxcclxuICAgICAgICAgICAgICAgIHNkO1xyXG4gICAgICAgICAgICB1dGZ4LmRlY29kZVVURjh0b1VURjE2KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9mZnNldCA8IGsgPyB0aGlzLnZpZXcuZ2V0VWludDgob2Zmc2V0KyspIDogbnVsbDtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCBzZCA9IHN0cmluZ0Rlc3RpbmF0aW9uKCksIHRoaXMubm9Bc3NlcnQpO1xyXG4gICAgICAgICAgICBzdHIgPSBzZCgpO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3N0cmluZyc6IHN0cixcclxuICAgICAgICAgICAgICAgICAgICAnbGVuZ3RoJzogb2Zmc2V0IC0gc3RhcnRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyB0eXBlcy9zdHJpbmdzL3V0ZjhzdHJpbmdcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTWV0cmljcyByZXByZXNlbnRpbmcgbnVtYmVyIG9mIFVURjggY2hhcmFjdGVycy4gRXZhbHVhdGVzIHRvIGBjYC5cclxuICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICAgICAqIEBjb25zdFxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyLk1FVFJJQ1NfQ0hBUlMgPSAnYyc7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1ldHJpY3MgcmVwcmVzZW50aW5nIG51bWJlciBvZiBieXRlcy4gRXZhbHVhdGVzIHRvIGBiYC5cclxuICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICAgICAqIEBjb25zdFxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyLk1FVFJJQ1NfQllURVMgPSAnYic7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyaXRlcyBhbiBVVEY4IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIHdyaXRlXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcnxudW1iZXJ9IHRoaXMgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgd3JpdHRlbi5cclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVVURjhTdHJpbmcgPSBmdW5jdGlvbihzdHIsIG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBrO1xyXG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIGsgPSB1dGZ4LmNhbGN1bGF0ZVVURjE2YXNVVEY4KHN0cmluZ1NvdXJjZShzdHIpKVsxXTtcclxuICAgICAgICAgICAgb2Zmc2V0ICs9IGs7XHJcbiAgICAgICAgICAgIHZhciBjYXBhY2l0eTE0ID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5MTQpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkxNCAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5MTQgOiBvZmZzZXQpO1xyXG4gICAgICAgICAgICBvZmZzZXQgLT0gaztcclxuICAgICAgICAgICAgdXRmeC5lbmNvZGVVVEYxNnRvVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSwgZnVuY3Rpb24oYikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBiKTtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBvZmZzZXQgLSBzdGFydDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXcml0ZXMgYW4gVVRGOCBlbmNvZGVkIHN0cmluZy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciN3cml0ZVVURjhTdHJpbmd9LlxyXG4gICAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIHdyaXRlXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcnxudW1iZXJ9IHRoaXMgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgd3JpdHRlbi5cclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVN0cmluZyA9IEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVVVEY4U3RyaW5nO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDYWxjdWxhdGVzIHRoZSBudW1iZXIgb2YgVVRGOCBjaGFyYWN0ZXJzIG9mIGEgc3RyaW5nLiBKYXZhU2NyaXB0IGl0c2VsZiB1c2VzIFVURi0xNiwgc28gdGhhdCBhIHN0cmluZydzXHJcbiAgICAgICAgICogIGBsZW5ndGhgIHByb3BlcnR5IGRvZXMgbm90IHJlZmxlY3QgaXRzIGFjdHVhbCBVVEY4IHNpemUgaWYgaXQgY29udGFpbnMgY29kZSBwb2ludHMgbGFyZ2VyIHRoYW4gMHhGRkZGLlxyXG4gICAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIGNhbGN1bGF0ZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IE51bWJlciBvZiBVVEY4IGNoYXJhY3RlcnNcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlci5jYWxjdWxhdGVVVEY4Q2hhcnMgPSBmdW5jdGlvbihzdHIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHV0ZnguY2FsY3VsYXRlVVRGMTZhc1VURjgoc3RyaW5nU291cmNlKHN0cikpWzBdO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiBVVEY4IGJ5dGVzIG9mIGEgc3RyaW5nLlxyXG4gICAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIGNhbGN1bGF0ZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IE51bWJlciBvZiBVVEY4IGJ5dGVzXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXIuY2FsY3VsYXRlVVRGOEJ5dGVzID0gZnVuY3Rpb24oc3RyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1dGZ4LmNhbGN1bGF0ZVVURjE2YXNVVEY4KHN0cmluZ1NvdXJjZShzdHIpKVsxXTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWFkcyBhbiBVVEY4IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggTnVtYmVyIG9mIGNoYXJhY3RlcnMgb3IgYnl0ZXMgdG8gcmVhZC5cclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZz19IG1ldHJpY3MgTWV0cmljcyBzcGVjaWZ5aW5nIHdoYXQgYGxlbmd0aGAgaXMgbWVhbnQgdG8gY291bnQuIERlZmF1bHRzIHRvXHJcbiAgICAgICAgICogIHtAbGluayBCeXRlQnVmZmVyLk1FVFJJQ1NfQ0hBUlN9LlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAgICAgKiAgcmVhZCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd8IXtzdHJpbmc6IHN0cmluZywgbGVuZ3RoOiBudW1iZXJ9fSBUaGUgc3RyaW5nIHJlYWQgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIHN0cmluZ1xyXG4gICAgICAgICAqICByZWFkIGFuZCB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZWFkLlxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVVEY4U3RyaW5nID0gZnVuY3Rpb24obGVuZ3RoLCBtZXRyaWNzLCBvZmZzZXQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXRyaWNzID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gbWV0cmljcztcclxuICAgICAgICAgICAgICAgIG1ldHJpY3MgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWV0cmljcyA9PT0gJ3VuZGVmaW5lZCcpIG1ldHJpY3MgPSBCeXRlQnVmZmVyLk1FVFJJQ1NfQ0hBUlM7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsZW5ndGggIT09ICdudW1iZXInIHx8IGxlbmd0aCAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBsZW5ndGg6IFwiK2xlbmd0aCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xyXG4gICAgICAgICAgICAgICAgbGVuZ3RoIHw9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBpID0gMCxcclxuICAgICAgICAgICAgICAgIHN0YXJ0ID0gb2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgc2Q7XHJcbiAgICAgICAgICAgIGlmIChtZXRyaWNzID09PSBCeXRlQnVmZmVyLk1FVFJJQ1NfQ0hBUlMpIHsgLy8gVGhlIHNhbWUgZm9yIG5vZGUgYW5kIHRoZSBicm93c2VyXHJcbiAgICAgICAgICAgICAgICBzZCA9IHN0cmluZ0Rlc3RpbmF0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB1dGZ4LmRlY29kZVVURjgoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPCBsZW5ndGggJiYgb2Zmc2V0IDwgdGhpcy5saW1pdCA/IHRoaXMudmlldy5nZXRVaW50OChvZmZzZXQrKykgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCBmdW5jdGlvbihjcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICsraTsgdXRmeC5VVEY4dG9VVEYxNihjcCwgc2QpO1xyXG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgIGlmIChpICE9PSBsZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgcmFuZ2U6IFRydW5jYXRlZCBkYXRhLCBcIitpK1wiID09IFwiK2xlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2QoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHJpbmdcIjogc2QoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJsZW5ndGhcIjogb2Zmc2V0IC0gc3RhcnRcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1ldHJpY3MgPT09IEJ5dGVCdWZmZXIuTUVUUklDU19CWVRFUykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIGxlbmd0aCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIitsZW5ndGgrXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGsgPSBvZmZzZXQgKyBsZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB1dGZ4LmRlY29kZVVURjh0b1VURjE2KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvZmZzZXQgPCBrID8gdGhpcy52aWV3LmdldFVpbnQ4KG9mZnNldCsrKSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyksIHNkID0gc3RyaW5nRGVzdGluYXRpb24oKSwgdGhpcy5ub0Fzc2VydCk7XHJcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0ICE9PSBrKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiBUcnVuY2F0ZWQgZGF0YSwgXCIrb2Zmc2V0K1wiID09IFwiK2spO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNkKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdzdHJpbmcnOiBzZCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbGVuZ3RoJzogb2Zmc2V0IC0gc3RhcnRcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIlVuc3VwcG9ydGVkIG1ldHJpY3M6IFwiK21ldHJpY3MpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlYWRzIGFuIFVURjggZW5jb2RlZCBzdHJpbmcuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjcmVhZFVURjhTdHJpbmd9LlxyXG4gICAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggTnVtYmVyIG9mIGNoYXJhY3RlcnMgb3IgYnl0ZXMgdG8gcmVhZFxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gbWV0cmljcyBNZXRyaWNzIHNwZWNpZnlpbmcgd2hhdCBgbmAgaXMgbWVhbnQgdG8gY291bnQuIERlZmF1bHRzIHRvXHJcbiAgICAgICAgICogIHtAbGluayBCeXRlQnVmZmVyLk1FVFJJQ1NfQ0hBUlN9LlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAgICAgKiAgcmVhZCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd8IXtzdHJpbmc6IHN0cmluZywgbGVuZ3RoOiBudW1iZXJ9fSBUaGUgc3RyaW5nIHJlYWQgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIHN0cmluZ1xyXG4gICAgICAgICAqICByZWFkIGFuZCB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZWFkLlxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRTdHJpbmcgPSBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVVEY4U3RyaW5nO1xyXG5cclxuICAgICAgICAvLyB0eXBlcy9zdHJpbmdzL3ZzdHJpbmdcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV3JpdGVzIGEgbGVuZ3RoIGFzIHZhcmludDMyIHByZWZpeGVkIFVURjggZW5jb2RlZCBzdHJpbmcuXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gd3JpdGVcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAgICAgKiAgd3JpdHRlbiBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcnxudW1iZXJ9IGB0aGlzYCBpZiBgb2Zmc2V0YCBpcyBvbWl0dGVkLCBlbHNlIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW5cclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICogQHNlZSBCeXRlQnVmZmVyI3dyaXRlVmFyaW50MzJcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVlN0cmluZyA9IGZ1bmN0aW9uKHN0ciwgb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogTm90IGEgc3RyaW5nXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBvZmZzZXQsXHJcbiAgICAgICAgICAgICAgICBrLCBsO1xyXG4gICAgICAgICAgICBrID0gdXRmeC5jYWxjdWxhdGVVVEYxNmFzVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSwgdGhpcy5ub0Fzc2VydClbMV07XHJcbiAgICAgICAgICAgIGwgPSBCeXRlQnVmZmVyLmNhbGN1bGF0ZVZhcmludDMyKGspO1xyXG4gICAgICAgICAgICBvZmZzZXQgKz0gbCtrO1xyXG4gICAgICAgICAgICB2YXIgY2FwYWNpdHkxNSA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTE1KVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5MTUgKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTE1IDogb2Zmc2V0KTtcclxuICAgICAgICAgICAgb2Zmc2V0IC09IGwraztcclxuICAgICAgICAgICAgb2Zmc2V0ICs9IHRoaXMud3JpdGVWYXJpbnQzMihrLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICB1dGZ4LmVuY29kZVVURjE2dG9VVEY4KHN0cmluZ1NvdXJjZShzdHIpLCBmdW5jdGlvbihiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2V0VWludDgob2Zmc2V0KyssIGIpO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICBpZiAob2Zmc2V0ICE9PSBzdGFydCtrK2wpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogVHJ1bmNhdGVkIGRhdGEsIFwiK29mZnNldCtcIiA9PSBcIisob2Zmc2V0K2srbCkpO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG9mZnNldCAtIHN0YXJ0O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlYWRzIGEgbGVuZ3RoIGFzIHZhcmludDMyIHByZWZpeGVkIFVURjggZW5jb2RlZCBzdHJpbmcuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICAgICAqICByZWFkIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ3whe3N0cmluZzogc3RyaW5nLCBsZW5ndGg6IG51bWJlcn19IFRoZSBzdHJpbmcgcmVhZCBpZiBvZmZzZXQgaXMgb21pdHRlZCwgZWxzZSB0aGUgc3RyaW5nXHJcbiAgICAgICAgICogIHJlYWQgYW5kIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHJlYWQuXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNyZWFkVmFyaW50MzJcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRWU3RyaW5nID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMStcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHRlbXAgPSB0aGlzLnJlYWRWYXJpbnQzMihvZmZzZXQpLFxyXG4gICAgICAgICAgICAgICAgc3RhcnQgPSBvZmZzZXQsXHJcbiAgICAgICAgICAgICAgICBzdHI7XHJcbiAgICAgICAgICAgIG9mZnNldCArPSB0ZW1wWydsZW5ndGgnXTtcclxuICAgICAgICAgICAgdGVtcCA9IHRlbXBbJ3ZhbHVlJ107XHJcbiAgICAgICAgICAgIHZhciBrID0gb2Zmc2V0ICsgdGVtcCxcclxuICAgICAgICAgICAgICAgIHNkID0gc3RyaW5nRGVzdGluYXRpb24oKTtcclxuICAgICAgICAgICAgdXRmeC5kZWNvZGVVVEY4dG9VVEYxNihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvZmZzZXQgPCBrID8gdGhpcy52aWV3LmdldFVpbnQ4KG9mZnNldCsrKSA6IG51bGw7XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSwgc2QsIHRoaXMubm9Bc3NlcnQpO1xyXG4gICAgICAgICAgICBzdHIgPSBzZCgpO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3N0cmluZyc6IHN0cixcclxuICAgICAgICAgICAgICAgICAgICAnbGVuZ3RoJzogb2Zmc2V0IC0gc3RhcnRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQXBwZW5kcyBzb21lIGRhdGEgdG8gdGhpcyBCeXRlQnVmZmVyLiBUaGlzIHdpbGwgb3ZlcndyaXRlIGFueSBjb250ZW50cyBiZWhpbmQgdGhlIHNwZWNpZmllZCBvZmZzZXQgdXAgdG8gdGhlIGFwcGVuZGVkXHJcbiAgICAgICAgICogIGRhdGEncyBsZW5ndGguXHJcbiAgICAgICAgICogQHBhcmFtIHshQnl0ZUJ1ZmZlcnwhQXJyYXlCdWZmZXJ8IVVpbnQ4QXJyYXl8c3RyaW5nfSBzb3VyY2UgRGF0YSB0byBhcHBlbmQuIElmIGBzb3VyY2VgIGlzIGEgQnl0ZUJ1ZmZlciwgaXRzIG9mZnNldHNcclxuICAgICAgICAgKiAgd2lsbCBiZSBtb2RpZmllZCBhY2NvcmRpbmcgdG8gdGhlIHBlcmZvcm1lZCByZWFkIG9wZXJhdGlvbi5cclxuICAgICAgICAgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKT19IGVuY29kaW5nIEVuY29kaW5nIGlmIGBkYXRhYCBpcyBhIHN0cmluZyAoXCJiYXNlNjRcIiwgXCJoZXhcIiwgXCJiaW5hcnlcIiwgZGVmYXVsdHMgdG8gXCJ1dGY4XCIpXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIGFwcGVuZCBhdC4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICAgICAqICByZWFkIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqIEBleGFtcGxlIEEgcmVsYXRpdmUgYDwwMSAwMj4wMy5hcHBlbmQoPDA0IDA1PilgIHdpbGwgcmVzdWx0IGluIGA8MDEgMDIgMDQgMDU+LCAwNCAwNXxgXHJcbiAgICAgICAgICogQGV4YW1wbGUgQW4gYWJzb2x1dGUgYDwwMSAwMj4wMy5hcHBlbmQoMDQgMDU+LCAxKWAgd2lsbCByZXN1bHQgaW4gYDwwMSAwND4wNSwgMDQgMDV8YFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24oc291cmNlLCBlbmNvZGluZywgb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdudW1iZXInIHx8IHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIG9mZnNldCA9IGVuY29kaW5nO1xyXG4gICAgICAgICAgICAgICAgZW5jb2RpbmcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIShzb3VyY2UgaW5zdGFuY2VvZiBCeXRlQnVmZmVyKSlcclxuICAgICAgICAgICAgICAgIHNvdXJjZSA9IEJ5dGVCdWZmZXIud3JhcChzb3VyY2UsIGVuY29kaW5nKTtcclxuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHNvdXJjZS5saW1pdCAtIHNvdXJjZS5vZmZzZXQ7XHJcbiAgICAgICAgICAgIGlmIChsZW5ndGggPD0gMCkgcmV0dXJuIHRoaXM7IC8vIE5vdGhpbmcgdG8gYXBwZW5kXHJcbiAgICAgICAgICAgIG9mZnNldCArPSBsZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciBjYXBhY2l0eTE2ID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5MTYpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkxNiAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5MTYgOiBvZmZzZXQpO1xyXG4gICAgICAgICAgICBvZmZzZXQgLT0gbGVuZ3RoO1xyXG4gICAgICAgICAgICBuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlciwgb2Zmc2V0KS5zZXQobmV3IFVpbnQ4QXJyYXkoc291cmNlLmJ1ZmZlcikuc3ViYXJyYXkoc291cmNlLm9mZnNldCwgc291cmNlLmxpbWl0KSk7XHJcbiAgICAgICAgICAgIHNvdXJjZS5vZmZzZXQgKz0gbGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IGxlbmd0aDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQXBwZW5kcyB0aGlzIEJ5dGVCdWZmZXIncyBjb250ZW50cyB0byBhbm90aGVyIEJ5dGVCdWZmZXIuIFRoaXMgd2lsbCBvdmVyd3JpdGUgYW55IGNvbnRlbnRzIGJlaGluZCB0aGUgc3BlY2lmaWVkXHJcbiAgICAgICAgICogIG9mZnNldCB1cCB0byB0aGUgbGVuZ3RoIG9mIHRoaXMgQnl0ZUJ1ZmZlcidzIGRhdGEuXHJcbiAgICAgICAgICogQHBhcmFtIHshQnl0ZUJ1ZmZlcn0gdGFyZ2V0IFRhcmdldCBCeXRlQnVmZmVyXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIGFwcGVuZCB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICAgICAqICByZWFkIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNhcHBlbmRcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLmFwcGVuZFRvID0gZnVuY3Rpb24odGFyZ2V0LCBvZmZzZXQpIHtcclxuICAgICAgICAgICAgdGFyZ2V0LmFwcGVuZCh0aGlzLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBFbmFibGVzIG9yIGRpc2FibGVzIGFzc2VydGlvbnMgb2YgYXJndW1lbnQgdHlwZXMgYW5kIG9mZnNldHMuIEFzc2VydGlvbnMgYXJlIGVuYWJsZWQgYnkgZGVmYXVsdCBidXQgeW91IGNhbiBvcHQgdG9cclxuICAgICAgICAgKiAgZGlzYWJsZSB0aGVtIGlmIHlvdXIgY29kZSBhbHJlYWR5IG1ha2VzIHN1cmUgdGhhdCBldmVyeXRoaW5nIGlzIHZhbGlkLlxyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYXNzZXJ0IGB0cnVlYCB0byBlbmFibGUgYXNzZXJ0aW9ucywgb3RoZXJ3aXNlIGBmYWxzZWBcclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5hc3NlcnQgPSBmdW5jdGlvbihhc3NlcnQpIHtcclxuICAgICAgICAgICAgdGhpcy5ub0Fzc2VydCA9ICFhc3NlcnQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdldHMgdGhlIGNhcGFjaXR5IG9mIHRoaXMgQnl0ZUJ1ZmZlcidzIGJhY2tpbmcgYnVmZmVyLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IENhcGFjaXR5IG9mIHRoZSBiYWNraW5nIGJ1ZmZlclxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLmNhcGFjaXR5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENsZWFycyB0aGlzIEJ5dGVCdWZmZXIncyBvZmZzZXRzIGJ5IHNldHRpbmcge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSB0byBgMGAgYW5kIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fSB0byB0aGVcclxuICAgICAgICAgKiAgYmFja2luZyBidWZmZXIncyBjYXBhY2l0eS4gRGlzY2FyZHMge0BsaW5rIEJ5dGVCdWZmZXIjbWFya2VkT2Zmc2V0fS5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMubGltaXQgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLm1hcmtlZE9mZnNldCA9IC0xO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGVzIGEgY2xvbmVkIGluc3RhbmNlIG9mIHRoaXMgQnl0ZUJ1ZmZlciwgcHJlc2V0IHdpdGggdGhpcyBCeXRlQnVmZmVyJ3MgdmFsdWVzIGZvciB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9LFxyXG4gICAgICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlciNtYXJrZWRPZmZzZXR9IGFuZCB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uXHJcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gY29weSBXaGV0aGVyIHRvIGNvcHkgdGhlIGJhY2tpbmcgYnVmZmVyIG9yIHRvIHJldHVybiBhbm90aGVyIHZpZXcgb24gdGhlIHNhbWUsIGRlZmF1bHRzIHRvIGBmYWxzZWBcclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IENsb25lZCBpbnN0YW5jZVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oY29weSkge1xyXG4gICAgICAgICAgICB2YXIgYmIgPSBuZXcgQnl0ZUJ1ZmZlcigwLCB0aGlzLmxpdHRsZUVuZGlhbiwgdGhpcy5ub0Fzc2VydCk7XHJcbiAgICAgICAgICAgIGlmIChjb3B5KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKS5zZXQodGhpcy5idWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgYmIuYnVmZmVyID0gYnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgYmIudmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYmIuYnVmZmVyID0gdGhpcy5idWZmZXI7XHJcbiAgICAgICAgICAgICAgICBiYi52aWV3ID0gdGhpcy52aWV3O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJiLm9mZnNldCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgICAgICBiYi5tYXJrZWRPZmZzZXQgPSB0aGlzLm1hcmtlZE9mZnNldDtcclxuICAgICAgICAgICAgYmIubGltaXQgPSB0aGlzLmxpbWl0O1xyXG4gICAgICAgICAgICByZXR1cm4gYmI7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29tcGFjdHMgdGhpcyBCeXRlQnVmZmVyIHRvIGJlIGJhY2tlZCBieSBhIHtAbGluayBCeXRlQnVmZmVyI2J1ZmZlcn0gb2YgaXRzIGNvbnRlbnRzJyBsZW5ndGguIENvbnRlbnRzIGFyZSB0aGUgYnl0ZXNcclxuICAgICAgICAgKiAgYmV0d2VlbiB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGFuZCB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uIFdpbGwgc2V0IGBvZmZzZXQgPSAwYCBhbmQgYGxpbWl0ID0gY2FwYWNpdHlgIGFuZFxyXG4gICAgICAgICAqICBhZGFwdCB7QGxpbmsgQnl0ZUJ1ZmZlciNtYXJrZWRPZmZzZXR9IHRvIHRoZSBzYW1lIHJlbGF0aXZlIHBvc2l0aW9uIGlmIHNldC5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IGJlZ2luIE9mZnNldCB0byBzdGFydCBhdCwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gZW5kIE9mZnNldCB0byBlbmQgYXQsIGRlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fVxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYmVnaW4gPT09ICd1bmRlZmluZWQnKSBiZWdpbiA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGVuZCA9PT0gJ3VuZGVmaW5lZCcpIGVuZCA9IHRoaXMubGltaXQ7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiAhPT0gJ251bWJlcicgfHwgYmVnaW4gJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgYmVnaW46IE5vdCBhbiBpbnRlZ2VyXCIpO1xyXG4gICAgICAgICAgICAgICAgYmVnaW4gPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbmQgIT09ICdudW1iZXInIHx8IGVuZCAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBlbmQ6IE5vdCBhbiBpbnRlZ2VyXCIpO1xyXG4gICAgICAgICAgICAgICAgZW5kID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChiZWdpbiA8IDAgfHwgYmVnaW4gPiBlbmQgfHwgZW5kID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogMCA8PSBcIitiZWdpbitcIiA8PSBcIitlbmQrXCIgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGJlZ2luID09PSAwICYmIGVuZCA9PT0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOyAvLyBBbHJlYWR5IGNvbXBhY3RlZFxyXG4gICAgICAgICAgICB2YXIgbGVuID0gZW5kIC0gYmVnaW47XHJcbiAgICAgICAgICAgIGlmIChsZW4gPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gRU1QVFlfQlVGRkVSO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hcmtlZE9mZnNldCA+PSAwKSB0aGlzLm1hcmtlZE9mZnNldCAtPSBiZWdpbjtcclxuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMubGltaXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihsZW4pO1xyXG4gICAgICAgICAgICBuZXcgVWludDhBcnJheShidWZmZXIpLnNldChuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlcikuc3ViYXJyYXkoYmVnaW4sIGVuZCkpO1xyXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcclxuICAgICAgICAgICAgdGhpcy52aWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1hcmtlZE9mZnNldCA+PSAwKSB0aGlzLm1hcmtlZE9mZnNldCAtPSBiZWdpbjtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmxpbWl0ID0gbGVuO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIEJ5dGVCdWZmZXIncyBjb250ZW50cy4gQ29udGVudHMgYXJlIHRoZSBieXRlcyBiZXR3ZWVuIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYW5kXHJcbiAgICAgICAgICogIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fS5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IGJlZ2luIEJlZ2luIG9mZnNldCwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fS5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IGVuZCBFbmQgb2Zmc2V0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSBDb3B5XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiA9PT0gJ3VuZGVmaW5lZCcpIGJlZ2luID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJykgZW5kID0gdGhpcy5saW1pdDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGJlZ2luICE9PSAnbnVtYmVyJyB8fCBiZWdpbiAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBiZWdpbjogTm90IGFuIGludGVnZXJcIik7XHJcbiAgICAgICAgICAgICAgICBiZWdpbiA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVuZCAhPT0gJ251bWJlcicgfHwgZW5kICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGVuZDogTm90IGFuIGludGVnZXJcIik7XHJcbiAgICAgICAgICAgICAgICBlbmQgPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJlZ2luIDwgMCB8fCBiZWdpbiA+IGVuZCB8fCBlbmQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiAwIDw9IFwiK2JlZ2luK1wiIDw9IFwiK2VuZCtcIiA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYmVnaW4gPT09IGVuZClcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQnl0ZUJ1ZmZlcigwLCB0aGlzLmxpdHRsZUVuZGlhbiwgdGhpcy5ub0Fzc2VydCk7XHJcbiAgICAgICAgICAgIHZhciBjYXBhY2l0eSA9IGVuZCAtIGJlZ2luLFxyXG4gICAgICAgICAgICAgICAgYmIgPSBuZXcgQnl0ZUJ1ZmZlcihjYXBhY2l0eSwgdGhpcy5saXR0bGVFbmRpYW4sIHRoaXMubm9Bc3NlcnQpO1xyXG4gICAgICAgICAgICBiYi5vZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICBiYi5saW1pdCA9IGNhcGFjaXR5O1xyXG4gICAgICAgICAgICBpZiAoYmIubWFya2VkT2Zmc2V0ID49IDApIGJiLm1hcmtlZE9mZnNldCAtPSBiZWdpbjtcclxuICAgICAgICAgICAgdGhpcy5jb3B5VG8oYmIsIDAsIGJlZ2luLCBlbmQpO1xyXG4gICAgICAgICAgICByZXR1cm4gYmI7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29waWVzIHRoaXMgQnl0ZUJ1ZmZlcidzIGNvbnRlbnRzIHRvIGFub3RoZXIgQnl0ZUJ1ZmZlci4gQ29udGVudHMgYXJlIHRoZSBieXRlcyBiZXR3ZWVuIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYW5kXHJcbiAgICAgICAgICogIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fS5cclxuICAgICAgICAgKiBAcGFyYW0geyFCeXRlQnVmZmVyfSB0YXJnZXQgVGFyZ2V0IEJ5dGVCdWZmZXJcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IHRhcmdldE9mZnNldCBPZmZzZXQgdG8gY29weSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHRoZSB0YXJnZXQncyB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9XHJcbiAgICAgICAgICogIGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXMgY29waWVkIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBzb3VyY2VPZmZzZXQgT2Zmc2V0IHRvIHN0YXJ0IGNvcHlpbmcgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlXHJcbiAgICAgICAgICogIG51bWJlciBvZiBieXRlcyBjb3BpZWQgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IHNvdXJjZUxpbWl0IE9mZnNldCB0byBlbmQgY29weWluZyBmcm9tLCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH1cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5jb3B5VG8gPSBmdW5jdGlvbih0YXJnZXQsIHRhcmdldE9mZnNldCwgc291cmNlT2Zmc2V0LCBzb3VyY2VMaW1pdCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUsXHJcbiAgICAgICAgICAgICAgICB0YXJnZXRSZWxhdGl2ZTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIUJ5dGVCdWZmZXIuaXNCeXRlQnVmZmVyKHRhcmdldCkpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB0YXJnZXQ6IE5vdCBhIEJ5dGVCdWZmZXJcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGFyZ2V0T2Zmc2V0ID0gKHRhcmdldFJlbGF0aXZlID0gdHlwZW9mIHRhcmdldE9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpID8gdGFyZ2V0Lm9mZnNldCA6IHRhcmdldE9mZnNldCB8IDA7XHJcbiAgICAgICAgICAgIHNvdXJjZU9mZnNldCA9IChyZWxhdGl2ZSA9IHR5cGVvZiBzb3VyY2VPZmZzZXQgPT09ICd1bmRlZmluZWQnKSA/IHRoaXMub2Zmc2V0IDogc291cmNlT2Zmc2V0IHwgMDtcclxuICAgICAgICAgICAgc291cmNlTGltaXQgPSB0eXBlb2Ygc291cmNlTGltaXQgPT09ICd1bmRlZmluZWQnID8gdGhpcy5saW1pdCA6IHNvdXJjZUxpbWl0IHwgMDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0YXJnZXRPZmZzZXQgPCAwIHx8IHRhcmdldE9mZnNldCA+IHRhcmdldC5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHRhcmdldCByYW5nZTogMCA8PSBcIit0YXJnZXRPZmZzZXQrXCIgPD0gXCIrdGFyZ2V0LmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgaWYgKHNvdXJjZU9mZnNldCA8IDAgfHwgc291cmNlTGltaXQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgc291cmNlIHJhbmdlOiAwIDw9IFwiK3NvdXJjZU9mZnNldCtcIiA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBsZW4gPSBzb3VyY2VMaW1pdCAtIHNvdXJjZU9mZnNldDtcclxuICAgICAgICAgICAgaWYgKGxlbiA9PT0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7IC8vIE5vdGhpbmcgdG8gY29weVxyXG5cclxuICAgICAgICAgICAgdGFyZ2V0LmVuc3VyZUNhcGFjaXR5KHRhcmdldE9mZnNldCArIGxlbik7XHJcblxyXG4gICAgICAgICAgICBuZXcgVWludDhBcnJheSh0YXJnZXQuYnVmZmVyKS5zZXQobmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIpLnN1YmFycmF5KHNvdXJjZU9mZnNldCwgc291cmNlTGltaXQpLCB0YXJnZXRPZmZzZXQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSBsZW47XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXRSZWxhdGl2ZSkgdGFyZ2V0Lm9mZnNldCArPSBsZW47XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNYWtlcyBzdXJlIHRoYXQgdGhpcyBCeXRlQnVmZmVyIGlzIGJhY2tlZCBieSBhIHtAbGluayBCeXRlQnVmZmVyI2J1ZmZlcn0gb2YgYXQgbGVhc3QgdGhlIHNwZWNpZmllZCBjYXBhY2l0eS4gSWYgdGhlXHJcbiAgICAgICAgICogIGN1cnJlbnQgY2FwYWNpdHkgaXMgZXhjZWVkZWQsIGl0IHdpbGwgYmUgZG91YmxlZC4gSWYgZG91YmxlIHRoZSBjdXJyZW50IGNhcGFjaXR5IGlzIGxlc3MgdGhhbiB0aGUgcmVxdWlyZWQgY2FwYWNpdHksXHJcbiAgICAgICAgICogIHRoZSByZXF1aXJlZCBjYXBhY2l0eSB3aWxsIGJlIHVzZWQgaW5zdGVhZC5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gY2FwYWNpdHkgUmVxdWlyZWQgY2FwYWNpdHlcclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5lbnN1cmVDYXBhY2l0eSA9IGZ1bmN0aW9uKGNhcGFjaXR5KSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnQgPCBjYXBhY2l0eSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc2l6ZSgoY3VycmVudCAqPSAyKSA+IGNhcGFjaXR5ID8gY3VycmVudCA6IGNhcGFjaXR5KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogT3ZlcndyaXRlcyB0aGlzIEJ5dGVCdWZmZXIncyBjb250ZW50cyB3aXRoIHRoZSBzcGVjaWZpZWQgdmFsdWUuIENvbnRlbnRzIGFyZSB0aGUgYnl0ZXMgYmV0d2VlblxyXG4gICAgICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGFuZCB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB2YWx1ZSBCeXRlIHZhbHVlIHRvIGZpbGwgd2l0aC4gSWYgZ2l2ZW4gYXMgYSBzdHJpbmcsIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaXMgdXNlZC5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IGJlZ2luIEJlZ2luIG9mZnNldC4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICAgICAqICB3cml0dGVuIGlmIG9taXR0ZWQuIGRlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0uXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBlbmQgRW5kIG9mZnNldCwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKiBAZXhhbXBsZSBgc29tZUJ5dGVCdWZmZXIuY2xlYXIoKS5maWxsKDApYCBmaWxscyB0aGUgZW50aXJlIGJhY2tpbmcgYnVmZmVyIHdpdGggemVyb2VzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24odmFsdWUsIGJlZ2luLCBlbmQpIHtcclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIGJlZ2luID09PSAndW5kZWZpbmVkJztcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSBiZWdpbiA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5jaGFyQ29kZUF0KDApO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJlZ2luID09PSAndW5kZWZpbmVkJykgYmVnaW4gPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbmQgPT09ICd1bmRlZmluZWQnKSBlbmQgPSB0aGlzLmxpbWl0O1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGFuIGludGVnZXIpXCIpO1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgfD0gMDtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYmVnaW4gIT09ICdudW1iZXInIHx8IGJlZ2luICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGJlZ2luOiBOb3QgYW4gaW50ZWdlclwiKTtcclxuICAgICAgICAgICAgICAgIGJlZ2luID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZW5kICE9PSAnbnVtYmVyJyB8fCBlbmQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgZW5kOiBOb3QgYW4gaW50ZWdlclwiKTtcclxuICAgICAgICAgICAgICAgIGVuZCA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmVnaW4gPCAwIHx8IGJlZ2luID4gZW5kIHx8IGVuZCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgcmFuZ2U6IDAgPD0gXCIrYmVnaW4rXCIgPD0gXCIrZW5kK1wiIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChiZWdpbiA+PSBlbmQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsgLy8gTm90aGluZyB0byBmaWxsXHJcbiAgICAgICAgICAgIHdoaWxlIChiZWdpbiA8IGVuZCkgdGhpcy52aWV3LnNldFVpbnQ4KGJlZ2luKyssIHZhbHVlKTtcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCA9IGJlZ2luO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNYWtlcyB0aGlzIEJ5dGVCdWZmZXIgcmVhZHkgZm9yIGEgbmV3IHNlcXVlbmNlIG9mIHdyaXRlIG9yIHJlbGF0aXZlIHJlYWQgb3BlcmF0aW9ucy4gU2V0cyBgbGltaXQgPSBvZmZzZXRgIGFuZFxyXG4gICAgICAgICAqICBgb2Zmc2V0ID0gMGAuIE1ha2Ugc3VyZSBhbHdheXMgdG8gZmxpcCBhIEJ5dGVCdWZmZXIgd2hlbiBhbGwgcmVsYXRpdmUgcmVhZCBvciB3cml0ZSBvcGVyYXRpb25zIGFyZSBjb21wbGV0ZS5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5mbGlwID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGltaXQgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1hcmtzIGFuIG9mZnNldCBvbiB0aGlzIEJ5dGVCdWZmZXIgdG8gYmUgdXNlZCBsYXRlci5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gbWFyay4gRGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fS5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG5vdCBhIHZhbGlkIG51bWJlclxyXG4gICAgICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG91dCBvZiBib3VuZHNcclxuICAgICAgICAgKiBAc2VlIEJ5dGVCdWZmZXIjcmVzZXRcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5tYXJrID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIG9mZnNldCA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnID8gdGhpcy5vZmZzZXQgOiBvZmZzZXQ7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm1hcmtlZE9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTZXRzIHRoZSBieXRlIG9yZGVyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gbGl0dGxlRW5kaWFuIGB0cnVlYCBmb3IgbGl0dGxlIGVuZGlhbiBieXRlIG9yZGVyLCBgZmFsc2VgIGZvciBiaWcgZW5kaWFuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUub3JkZXIgPSBmdW5jdGlvbihsaXR0bGVFbmRpYW4pIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxpdHRsZUVuZGlhbiAhPT0gJ2Jvb2xlYW4nKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgbGl0dGxlRW5kaWFuOiBOb3QgYSBib29sZWFuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubGl0dGxlRW5kaWFuID0gISFsaXR0bGVFbmRpYW47XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFN3aXRjaGVzICh0bykgbGl0dGxlIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGxpdHRsZUVuZGlhbiBEZWZhdWx0cyB0byBgdHJ1ZWAsIG90aGVyd2lzZSB1c2VzIGJpZyBlbmRpYW5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5MRSA9IGZ1bmN0aW9uKGxpdHRsZUVuZGlhbikge1xyXG4gICAgICAgICAgICB0aGlzLmxpdHRsZUVuZGlhbiA9IHR5cGVvZiBsaXR0bGVFbmRpYW4gIT09ICd1bmRlZmluZWQnID8gISFsaXR0bGVFbmRpYW4gOiB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTd2l0Y2hlcyAodG8pIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci5cclxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBiaWdFbmRpYW4gRGVmYXVsdHMgdG8gYHRydWVgLCBvdGhlcndpc2UgdXNlcyBsaXR0bGUgZW5kaWFuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuQkUgPSBmdW5jdGlvbihiaWdFbmRpYW4pIHtcclxuICAgICAgICAgICAgdGhpcy5saXR0bGVFbmRpYW4gPSB0eXBlb2YgYmlnRW5kaWFuICE9PSAndW5kZWZpbmVkJyA/ICFiaWdFbmRpYW4gOiBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBQcmVwZW5kcyBzb21lIGRhdGEgdG8gdGhpcyBCeXRlQnVmZmVyLiBUaGlzIHdpbGwgb3ZlcndyaXRlIGFueSBjb250ZW50cyBiZWZvcmUgdGhlIHNwZWNpZmllZCBvZmZzZXQgdXAgdG8gdGhlXHJcbiAgICAgICAgICogIHByZXBlbmRlZCBkYXRhJ3MgbGVuZ3RoLiBJZiB0aGVyZSBpcyBub3QgZW5vdWdoIHNwYWNlIGF2YWlsYWJsZSBiZWZvcmUgdGhlIHNwZWNpZmllZCBgb2Zmc2V0YCwgdGhlIGJhY2tpbmcgYnVmZmVyXHJcbiAgICAgICAgICogIHdpbGwgYmUgcmVzaXplZCBhbmQgaXRzIGNvbnRlbnRzIG1vdmVkIGFjY29yZGluZ2x5LlxyXG4gICAgICAgICAqIEBwYXJhbSB7IUJ5dGVCdWZmZXJ8c3RyaW5nfCFBcnJheUJ1ZmZlcn0gc291cmNlIERhdGEgdG8gcHJlcGVuZC4gSWYgYHNvdXJjZWAgaXMgYSBCeXRlQnVmZmVyLCBpdHMgb2Zmc2V0IHdpbGwgYmVcclxuICAgICAgICAgKiAgbW9kaWZpZWQgYWNjb3JkaW5nIHRvIHRoZSBwZXJmb3JtZWQgcmVhZCBvcGVyYXRpb24uXHJcbiAgICAgICAgICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcik9fSBlbmNvZGluZyBFbmNvZGluZyBpZiBgZGF0YWAgaXMgYSBzdHJpbmcgKFwiYmFzZTY0XCIsIFwiaGV4XCIsIFwiYmluYXJ5XCIsIGRlZmF1bHRzIHRvIFwidXRmOFwiKVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byBwcmVwZW5kIGF0LiBXaWxsIHVzZSBhbmQgZGVjcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgICAgICogIHByZXBlbmRlZCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKiBAZXhhbXBsZSBBIHJlbGF0aXZlIGAwMDwwMSAwMiAwMz4ucHJlcGVuZCg8MDQgMDU+KWAgcmVzdWx0cyBpbiBgPDA0IDA1IDAxIDAyIDAzPiwgMDQgMDV8YFxyXG4gICAgICAgICAqIEBleGFtcGxlIEFuIGFic29sdXRlIGAwMDwwMSAwMiAwMz4ucHJlcGVuZCg8MDQgMDU+LCAyKWAgcmVzdWx0cyBpbiBgMDQ8MDUgMDIgMDM+LCAwNCAwNXxgXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5wcmVwZW5kID0gZnVuY3Rpb24oc291cmNlLCBlbmNvZGluZywgb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdudW1iZXInIHx8IHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIG9mZnNldCA9IGVuY29kaW5nO1xyXG4gICAgICAgICAgICAgICAgZW5jb2RpbmcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIShzb3VyY2UgaW5zdGFuY2VvZiBCeXRlQnVmZmVyKSlcclxuICAgICAgICAgICAgICAgIHNvdXJjZSA9IEJ5dGVCdWZmZXIud3JhcChzb3VyY2UsIGVuY29kaW5nKTtcclxuICAgICAgICAgICAgdmFyIGxlbiA9IHNvdXJjZS5saW1pdCAtIHNvdXJjZS5vZmZzZXQ7XHJcbiAgICAgICAgICAgIGlmIChsZW4gPD0gMCkgcmV0dXJuIHRoaXM7IC8vIE5vdGhpbmcgdG8gcHJlcGVuZFxyXG4gICAgICAgICAgICB2YXIgZGlmZiA9IGxlbiAtIG9mZnNldDtcclxuICAgICAgICAgICAgdmFyIGFycmF5VmlldztcclxuICAgICAgICAgICAgaWYgKGRpZmYgPiAwKSB7IC8vIE5vdCBlbm91Z2ggc3BhY2UgYmVmb3JlIG9mZnNldCwgc28gcmVzaXplICsgbW92ZVxyXG4gICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcih0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoICsgZGlmZik7XHJcbiAgICAgICAgICAgICAgICBhcnJheVZpZXcgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgYXJyYXlWaWV3LnNldChuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlcikuc3ViYXJyYXkob2Zmc2V0LCB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKSwgbGVuKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCArPSBkaWZmO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWFya2VkT2Zmc2V0ID49IDApIHRoaXMubWFya2VkT2Zmc2V0ICs9IGRpZmY7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpbWl0ICs9IGRpZmY7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gZGlmZjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFycmF5VmlldyA9IG5ldyBVaW50OEFycmF5KHRoaXMuYnVmZmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhcnJheVZpZXcuc2V0KG5ldyBVaW50OEFycmF5KHNvdXJjZS5idWZmZXIpLnN1YmFycmF5KHNvdXJjZS5vZmZzZXQsIHNvdXJjZS5saW1pdCksIG9mZnNldCAtIGxlbik7XHJcbiAgICAgICAgICAgIHNvdXJjZS5vZmZzZXQgPSBzb3VyY2UubGltaXQ7XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSlcclxuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0IC09IGxlbjtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUHJlcGVuZHMgdGhpcyBCeXRlQnVmZmVyIHRvIGFub3RoZXIgQnl0ZUJ1ZmZlci4gVGhpcyB3aWxsIG92ZXJ3cml0ZSBhbnkgY29udGVudHMgYmVmb3JlIHRoZSBzcGVjaWZpZWQgb2Zmc2V0IHVwIHRvIHRoZVxyXG4gICAgICAgICAqICBwcmVwZW5kZWQgZGF0YSdzIGxlbmd0aC4gSWYgdGhlcmUgaXMgbm90IGVub3VnaCBzcGFjZSBhdmFpbGFibGUgYmVmb3JlIHRoZSBzcGVjaWZpZWQgYG9mZnNldGAsIHRoZSBiYWNraW5nIGJ1ZmZlclxyXG4gICAgICAgICAqICB3aWxsIGJlIHJlc2l6ZWQgYW5kIGl0cyBjb250ZW50cyBtb3ZlZCBhY2NvcmRpbmdseS5cclxuICAgICAgICAgKiBAcGFyYW0geyFCeXRlQnVmZmVyfSB0YXJnZXQgVGFyZ2V0IEJ5dGVCdWZmZXJcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcHJlcGVuZCBhdC4gV2lsbCB1c2UgYW5kIGRlY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICAgICAqICBwcmVwZW5kZWQgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICogQHNlZSBCeXRlQnVmZmVyI3ByZXBlbmRcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnByZXBlbmRUbyA9IGZ1bmN0aW9uKHRhcmdldCwgb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHRhcmdldC5wcmVwZW5kKHRoaXMsIG9mZnNldCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUHJpbnRzIGRlYnVnIGluZm9ybWF0aW9uIGFib3V0IHRoaXMgQnl0ZUJ1ZmZlcidzIGNvbnRlbnRzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nKT19IG91dCBPdXRwdXQgZnVuY3Rpb24gdG8gY2FsbCwgZGVmYXVsdHMgdG8gY29uc29sZS5sb2dcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5wcmludERlYnVnID0gZnVuY3Rpb24ob3V0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3V0ICE9PSAnZnVuY3Rpb24nKSBvdXQgPSBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xyXG4gICAgICAgICAgICBvdXQoXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvU3RyaW5nKCkrXCJcXG5cIitcclxuICAgICAgICAgICAgICAgIFwiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblwiK1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b0RlYnVnKC8qIGNvbHVtbnMgKi8gdHJ1ZSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgcmVtYWluaW5nIHJlYWRhYmxlIGJ5dGVzLiBDb250ZW50cyBhcmUgdGhlIGJ5dGVzIGJldHdlZW4ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBhbmRcclxuICAgICAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LCBzbyB0aGlzIHJldHVybnMgYGxpbWl0IC0gb2Zmc2V0YC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZW1haW5pbmcgcmVhZGFibGUgYnl0ZXMuIE1heSBiZSBuZWdhdGl2ZSBpZiBgb2Zmc2V0ID4gbGltaXRgLlxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlbWFpbmluZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saW1pdCAtIHRoaXMub2Zmc2V0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVzZXRzIHRoaXMgQnl0ZUJ1ZmZlcidzIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0uIElmIGFuIG9mZnNldCBoYXMgYmVlbiBtYXJrZWQgdGhyb3VnaCB7QGxpbmsgQnl0ZUJ1ZmZlciNtYXJrfVxyXG4gICAgICAgICAqICBiZWZvcmUsIGBvZmZzZXRgIHdpbGwgYmUgc2V0IHRvIHtAbGluayBCeXRlQnVmZmVyI21hcmtlZE9mZnNldH0sIHdoaWNoIHdpbGwgdGhlbiBiZSBkaXNjYXJkZWQuIElmIG5vIG9mZnNldCBoYXMgYmVlblxyXG4gICAgICAgICAqICBtYXJrZWQsIHNldHMgYG9mZnNldCA9IDBgLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNtYXJrXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubWFya2VkT2Zmc2V0ID49IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gdGhpcy5tYXJrZWRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hcmtlZE9mZnNldCA9IC0xO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVzaXplcyB0aGlzIEJ5dGVCdWZmZXIgdG8gYmUgYmFja2VkIGJ5IGEgYnVmZmVyIG9mIGF0IGxlYXN0IHRoZSBnaXZlbiBjYXBhY2l0eS4gV2lsbCBkbyBub3RoaW5nIGlmIGFscmVhZHkgdGhhdFxyXG4gICAgICAgICAqICBsYXJnZSBvciBsYXJnZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGNhcGFjaXR5IENhcGFjaXR5IHJlcXVpcmVkXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgICAgICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgY2FwYWNpdHlgIGlzIG5vdCBhIG51bWJlclxyXG4gICAgICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGBjYXBhY2l0eSA8IDBgXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24oY2FwYWNpdHkpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhcGFjaXR5ICE9PSAnbnVtYmVyJyB8fCBjYXBhY2l0eSAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBjYXBhY2l0eTogXCIrY2FwYWNpdHkrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcclxuICAgICAgICAgICAgICAgIGNhcGFjaXR5IHw9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FwYWNpdHkgPCAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIGNhcGFjaXR5OiAwIDw9IFwiK2NhcGFjaXR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5idWZmZXIuYnl0ZUxlbmd0aCA8IGNhcGFjaXR5KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGNhcGFjaXR5KTtcclxuICAgICAgICAgICAgICAgIG5ldyBVaW50OEFycmF5KGJ1ZmZlcikuc2V0KG5ldyBVaW50OEFycmF5KHRoaXMuYnVmZmVyKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV2ZXJzZXMgdGhpcyBCeXRlQnVmZmVyJ3MgY29udGVudHMuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBiZWdpbiBPZmZzZXQgdG8gc3RhcnQgYXQsIGRlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH1cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IGVuZCBPZmZzZXQgdG8gZW5kIGF0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH1cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZXZlcnNlID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJlZ2luID09PSAndW5kZWZpbmVkJykgYmVnaW4gPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbmQgPT09ICd1bmRlZmluZWQnKSBlbmQgPSB0aGlzLmxpbWl0O1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYmVnaW4gIT09ICdudW1iZXInIHx8IGJlZ2luICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGJlZ2luOiBOb3QgYW4gaW50ZWdlclwiKTtcclxuICAgICAgICAgICAgICAgIGJlZ2luID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZW5kICE9PSAnbnVtYmVyJyB8fCBlbmQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgZW5kOiBOb3QgYW4gaW50ZWdlclwiKTtcclxuICAgICAgICAgICAgICAgIGVuZCA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmVnaW4gPCAwIHx8IGJlZ2luID4gZW5kIHx8IGVuZCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgcmFuZ2U6IDAgPD0gXCIrYmVnaW4rXCIgPD0gXCIrZW5kK1wiIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChiZWdpbiA9PT0gZW5kKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7IC8vIE5vdGhpbmcgdG8gcmV2ZXJzZVxyXG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucmV2ZXJzZS5jYWxsKG5ldyBVaW50OEFycmF5KHRoaXMuYnVmZmVyKS5zdWJhcnJheShiZWdpbiwgZW5kKSk7XHJcbiAgICAgICAgICAgIHRoaXMudmlldyA9IG5ldyBEYXRhVmlldyh0aGlzLmJ1ZmZlcik7IC8vIEZJWE1FOiBXaHkgZXhhY3RseSBpcyB0aGlzIG5lY2Vzc2FyeT9cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTa2lwcyB0aGUgbmV4dCBgbGVuZ3RoYCBieXRlcy4gVGhpcyB3aWxsIGp1c3QgYWR2YW5jZVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggTnVtYmVyIG9mIGJ5dGVzIHRvIHNraXAuIE1heSBhbHNvIGJlIG5lZ2F0aXZlIHRvIG1vdmUgdGhlIG9mZnNldCBiYWNrLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnNraXAgPSBmdW5jdGlvbihsZW5ndGgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxlbmd0aCAhPT0gJ251bWJlcicgfHwgbGVuZ3RoICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGxlbmd0aDogXCIrbGVuZ3RoK1wiIChub3QgYW4gaW50ZWdlcilcIik7XHJcbiAgICAgICAgICAgICAgICBsZW5ndGggfD0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5vZmZzZXQgKyBsZW5ndGg7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBsZW5ndGg6IDAgPD0gXCIrdGhpcy5vZmZzZXQrXCIgKyBcIitsZW5ndGgrXCIgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNsaWNlcyB0aGlzIEJ5dGVCdWZmZXIgYnkgY3JlYXRpbmcgYSBjbG9uZWQgaW5zdGFuY2Ugd2l0aCBgb2Zmc2V0ID0gYmVnaW5gIGFuZCBgbGltaXQgPSBlbmRgLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gYmVnaW4gQmVnaW4gb2Zmc2V0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9LlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gZW5kIEVuZCBvZmZzZXQsIGRlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fS5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IENsb25lIG9mIHRoaXMgQnl0ZUJ1ZmZlciB3aXRoIHNsaWNpbmcgYXBwbGllZCwgYmFja2VkIGJ5IHRoZSBzYW1lIHtAbGluayBCeXRlQnVmZmVyI2J1ZmZlcn1cclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiA9PT0gJ3VuZGVmaW5lZCcpIGJlZ2luID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJykgZW5kID0gdGhpcy5saW1pdDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGJlZ2luICE9PSAnbnVtYmVyJyB8fCBiZWdpbiAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBiZWdpbjogTm90IGFuIGludGVnZXJcIik7XHJcbiAgICAgICAgICAgICAgICBiZWdpbiA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVuZCAhPT0gJ251bWJlcicgfHwgZW5kICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGVuZDogTm90IGFuIGludGVnZXJcIik7XHJcbiAgICAgICAgICAgICAgICBlbmQgPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJlZ2luIDwgMCB8fCBiZWdpbiA+IGVuZCB8fCBlbmQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiAwIDw9IFwiK2JlZ2luK1wiIDw9IFwiK2VuZCtcIiA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgYmIgPSB0aGlzLmNsb25lKCk7XHJcbiAgICAgICAgICAgIGJiLm9mZnNldCA9IGJlZ2luO1xyXG4gICAgICAgICAgICBiYi5saW1pdCA9IGVuZDtcclxuICAgICAgICAgICAgcmV0dXJuIGJiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhIGNvcHkgb2YgdGhlIGJhY2tpbmcgYnVmZmVyIHRoYXQgY29udGFpbnMgdGhpcyBCeXRlQnVmZmVyJ3MgY29udGVudHMuIENvbnRlbnRzIGFyZSB0aGUgYnl0ZXMgYmV0d2VlblxyXG4gICAgICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGFuZCB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uIFdpbGwgdHJhbnNwYXJlbnRseSB7QGxpbmsgQnl0ZUJ1ZmZlciNmbGlwfSB0aGlzXHJcbiAgICAgICAgICogIEJ5dGVCdWZmZXIgaWYgYG9mZnNldCA+IGxpbWl0YCBidXQgdGhlIGFjdHVhbCBvZmZzZXRzIHJlbWFpbiB1bnRvdWNoZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gZm9yY2VDb3B5IElmIGB0cnVlYCByZXR1cm5zIGEgY29weSwgb3RoZXJ3aXNlIHJldHVybnMgYSB2aWV3IHJlZmVyZW5jaW5nIHRoZSBzYW1lIG1lbW9yeSBpZlxyXG4gICAgICAgICAqICBwb3NzaWJsZS4gRGVmYXVsdHMgdG8gYGZhbHNlYFxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQXJyYXlCdWZmZXJ9IENvbnRlbnRzIGFzIGFuIEFycmF5QnVmZmVyXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbihmb3JjZUNvcHkpIHtcclxuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMub2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgbGltaXQgPSB0aGlzLmxpbWl0O1xyXG4gICAgICAgICAgICBpZiAob2Zmc2V0ID4gbGltaXQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0ID0gb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gbGltaXQ7XHJcbiAgICAgICAgICAgICAgICBsaW1pdCA9IHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogTm90IGFuIGludGVnZXJcIik7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsaW1pdCAhPT0gJ251bWJlcicgfHwgbGltaXQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgbGltaXQ6IE5vdCBhbiBpbnRlZ2VyXCIpO1xyXG4gICAgICAgICAgICAgICAgbGltaXQgPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gbGltaXQgfHwgbGltaXQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiAwIDw9IFwiK29mZnNldCtcIiA8PSBcIitsaW1pdCtcIiA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBOT1RFOiBJdCdzIG5vdCBwb3NzaWJsZSB0byBoYXZlIGFub3RoZXIgQXJyYXlCdWZmZXIgcmVmZXJlbmNlIHRoZSBzYW1lIG1lbW9yeSBhcyB0aGUgYmFja2luZyBidWZmZXIuIFRoaXMgaXNcclxuICAgICAgICAgICAgLy8gcG9zc2libGUgd2l0aCBVaW50OEFycmF5I3N1YmFycmF5IG9ubHksIGJ1dCB3ZSBoYXZlIHRvIHJldHVybiBhbiBBcnJheUJ1ZmZlciBieSBjb250cmFjdC4gU286XHJcbiAgICAgICAgICAgIGlmICghZm9yY2VDb3B5ICYmIG9mZnNldCA9PT0gMCAmJiBsaW1pdCA9PT0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPT09IGxpbWl0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRU1QVFlfQlVGRkVSO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIobGltaXQgLSBvZmZzZXQpO1xyXG4gICAgICAgICAgICBuZXcgVWludDhBcnJheShidWZmZXIpLnNldChuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlcikuc3ViYXJyYXkob2Zmc2V0LCBsaW1pdCksIDApO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVmZmVyO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgYSByYXcgYnVmZmVyIGNvbXBhY3RlZCB0byBjb250YWluIHRoaXMgQnl0ZUJ1ZmZlcidzIGNvbnRlbnRzLiBDb250ZW50cyBhcmUgdGhlIGJ5dGVzIGJldHdlZW5cclxuICAgICAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBhbmQge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LiBXaWxsIHRyYW5zcGFyZW50bHkge0BsaW5rIEJ5dGVCdWZmZXIjZmxpcH0gdGhpc1xyXG4gICAgICAgICAqICBCeXRlQnVmZmVyIGlmIGBvZmZzZXQgPiBsaW1pdGAgYnV0IHRoZSBhY3R1YWwgb2Zmc2V0cyByZW1haW4gdW50b3VjaGVkLiBUaGlzIGlzIGFuIGFsaWFzIG9mXHJcbiAgICAgICAgICogIHtAbGluayBCeXRlQnVmZmVyI3RvQnVmZmVyfS5cclxuICAgICAgICAgKiBAZnVuY3Rpb25cclxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBmb3JjZUNvcHkgSWYgYHRydWVgIHJldHVybnMgYSBjb3B5LCBvdGhlcndpc2UgcmV0dXJucyBhIHZpZXcgcmVmZXJlbmNpbmcgdGhlIHNhbWUgbWVtb3J5LlxyXG4gICAgICAgICAqICBEZWZhdWx0cyB0byBgZmFsc2VgXHJcbiAgICAgICAgICogQHJldHVybnMgeyFBcnJheUJ1ZmZlcn0gQ29udGVudHMgYXMgYW4gQXJyYXlCdWZmZXJcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS50b0FycmF5QnVmZmVyID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS50b0J1ZmZlcjtcclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbnZlcnRzIHRoZSBCeXRlQnVmZmVyJ3MgY29udGVudHMgdG8gYSBzdHJpbmcuXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmc9fSBlbmNvZGluZyBPdXRwdXQgZW5jb2RpbmcuIFJldHVybnMgYW4gaW5mb3JtYXRpdmUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIGlmIG9taXR0ZWQgYnV0IGFsc28gYWxsb3dzXHJcbiAgICAgICAgICogIGRpcmVjdCBjb252ZXJzaW9uIHRvIFwidXRmOFwiLCBcImhleFwiLCBcImJhc2U2NFwiIGFuZCBcImJpbmFyeVwiIGVuY29kaW5nLiBcImRlYnVnXCIgcmV0dXJucyBhIGhleCByZXByZXNlbnRhdGlvbiB3aXRoXHJcbiAgICAgICAgICogIGhpZ2hsaWdodGVkIG9mZnNldHMuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBiZWdpbiBPZmZzZXQgdG8gYmVnaW4gYXQsIGRlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH1cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IGVuZCBPZmZzZXQgdG8gZW5kIGF0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH1cclxuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBTdHJpbmcgcmVwcmVzZW50YXRpb25cclxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgYGVuY29kaW5nYCBpcyBpbnZhbGlkXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihlbmNvZGluZywgYmVnaW4sIGVuZCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkJ5dGVCdWZmZXJBQihvZmZzZXQ9XCIrdGhpcy5vZmZzZXQrXCIsbWFya2VkT2Zmc2V0PVwiK3RoaXMubWFya2VkT2Zmc2V0K1wiLGxpbWl0PVwiK3RoaXMubGltaXQrXCIsY2FwYWNpdHk9XCIrdGhpcy5jYXBhY2l0eSgpK1wiKVwiO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgIGVuY29kaW5nID0gXCJ1dGY4XCIsXHJcbiAgICAgICAgICAgICAgICBiZWdpbiA9IGVuY29kaW5nLFxyXG4gICAgICAgICAgICAgICAgZW5kID0gYmVnaW47XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJ1dGY4XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9VVEY4KGJlZ2luLCBlbmQpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImJhc2U2NFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvQmFzZTY0KGJlZ2luLCBlbmQpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImhleFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvSGV4KGJlZ2luLCBlbmQpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImJpbmFyeVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvQmluYXJ5KGJlZ2luLCBlbmQpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImRlYnVnXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9EZWJ1ZygpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImNvbHVtbnNcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0NvbHVtbnMoKTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJVbnN1cHBvcnRlZCBlbmNvZGluZzogXCIrZW5jb2RpbmcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gbHhpdi1lbWJlZGRhYmxlXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGx4aXYtZW1iZWRkYWJsZSAoYykgMjAxNCBEYW5pZWwgV2lydHogPGRjb2RlQGRjb2RlLmlvPlxyXG4gICAgICAgICAqIFJlbGVhc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjBcclxuICAgICAgICAgKiBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kY29kZUlPL2x4aXYgZm9yIGRldGFpbHNcclxuICAgICAgICAgKi9cclxuICAgICAgICB2YXIgbHhpdiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBseGl2IG5hbWVzcGFjZS5cclxuICAgICAgICAgICAgICogQHR5cGUgeyFPYmplY3QuPHN0cmluZywqPn1cclxuICAgICAgICAgICAgICogQGV4cG9ydHMgbHhpdlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdmFyIGx4aXYgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBDaGFyYWN0ZXIgY29kZXMgZm9yIG91dHB1dC5cclxuICAgICAgICAgICAgICogQHR5cGUgeyFBcnJheS48bnVtYmVyPn1cclxuICAgICAgICAgICAgICogQGlubmVyXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB2YXIgYW91dCA9IFtcclxuICAgICAgICAgICAgICAgIDY1LCA2NiwgNjcsIDY4LCA2OSwgNzAsIDcxLCA3MiwgNzMsIDc0LCA3NSwgNzYsIDc3LCA3OCwgNzksIDgwLFxyXG4gICAgICAgICAgICAgICAgODEsIDgyLCA4MywgODQsIDg1LCA4NiwgODcsIDg4LCA4OSwgOTAsIDk3LCA5OCwgOTksIDEwMCwgMTAxLCAxMDIsXHJcbiAgICAgICAgICAgICAgICAxMDMsIDEwNCwgMTA1LCAxMDYsIDEwNywgMTA4LCAxMDksIDExMCwgMTExLCAxMTIsIDExMywgMTE0LCAxMTUsIDExNiwgMTE3LCAxMTgsXHJcbiAgICAgICAgICAgICAgICAxMTksIDEyMCwgMTIxLCAxMjIsIDQ4LCA0OSwgNTAsIDUxLCA1MiwgNTMsIDU0LCA1NSwgNTYsIDU3LCA0MywgNDdcclxuICAgICAgICAgICAgXTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBDaGFyYWN0ZXIgY29kZXMgZm9yIGlucHV0LlxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7IUFycmF5LjxudW1iZXI+fVxyXG4gICAgICAgICAgICAgKiBAaW5uZXJcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHZhciBhaW4gPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaT0wLCBrPWFvdXQubGVuZ3RoOyBpPGs7ICsraSlcclxuICAgICAgICAgICAgICAgIGFpblthb3V0W2ldXSA9IGk7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogRW5jb2RlcyBieXRlcyB0byBiYXNlNjQgY2hhciBjb2Rlcy5cclxuICAgICAgICAgICAgICogQHBhcmFtIHshZnVuY3Rpb24oKTpudW1iZXJ8bnVsbH0gc3JjIEJ5dGVzIHNvdXJjZSBhcyBhIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgbmV4dCBieXRlIHJlc3BlY3RpdmVseSBgbnVsbGAgaWZcclxuICAgICAgICAgICAgICogIHRoZXJlIGFyZSBubyBtb3JlIGJ5dGVzIGxlZnQuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKG51bWJlcil9IGRzdCBDaGFyYWN0ZXJzIGRlc3RpbmF0aW9uIGFzIGEgZnVuY3Rpb24gc3VjY2Vzc2l2ZWx5IGNhbGxlZCB3aXRoIGVhY2ggZW5jb2RlZCBjaGFyXHJcbiAgICAgICAgICAgICAqICBjb2RlLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgbHhpdi5lbmNvZGUgPSBmdW5jdGlvbihzcmMsIGRzdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGIsIHQ7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoKGIgPSBzcmMoKSkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBkc3QoYW91dFsoYj4+MikmMHgzZl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHQgPSAoYiYweDMpPDw0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoYiA9IHNyYygpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0IHw9IChiPj40KSYweGY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzdChhb3V0Wyh0fCgoYj4+NCkmMHhmKSkmMHgzZl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gKGImMHhmKTw8MjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChiID0gc3JjKCkpICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHN0KGFvdXRbKHR8KChiPj42KSYweDMpKSYweDNmXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkc3QoYW91dFtiJjB4M2ZdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHN0KGFvdXRbdCYweDNmXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkc3QoNjEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkc3QoYW91dFt0JjB4M2ZdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN0KDYxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN0KDYxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGJhc2U2NCBjaGFyIGNvZGVzIHRvIGJ5dGVzLlxyXG4gICAgICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbigpOm51bWJlcnxudWxsfSBzcmMgQ2hhcmFjdGVycyBzb3VyY2UgYXMgYSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIG5leHQgY2hhciBjb2RlIHJlc3BlY3RpdmVseVxyXG4gICAgICAgICAgICAgKiAgYG51bGxgIGlmIHRoZXJlIGFyZSBubyBtb3JlIGNoYXJhY3RlcnMgbGVmdC5cclxuICAgICAgICAgICAgICogQHBhcmFtIHshZnVuY3Rpb24obnVtYmVyKX0gZHN0IEJ5dGVzIGRlc3RpbmF0aW9uIGFzIGEgZnVuY3Rpb24gc3VjY2Vzc2l2ZWx5IGNhbGxlZCB3aXRoIHRoZSBuZXh0IGJ5dGUuXHJcbiAgICAgICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBhIGNoYXJhY3RlciBjb2RlIGlzIGludmFsaWRcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGx4aXYuZGVjb2RlID0gZnVuY3Rpb24oc3JjLCBkc3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjLCB0MSwgdDI7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBmYWlsKGMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIklsbGVnYWwgY2hhcmFjdGVyIGNvZGU6IFwiK2MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKChjID0gc3JjKCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdDEgPSBhaW5bY107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0MSA9PT0gJ3VuZGVmaW5lZCcpIGZhaWwoYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChjID0gc3JjKCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQyID0gYWluW2NdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQyID09PSAndW5kZWZpbmVkJykgZmFpbChjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN0KCh0MTw8Mik+Pj4wfCh0MiYweDMwKT4+NCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoYyA9IHNyYygpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdDEgPSBhaW5bY107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQxID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYyA9PT0gNjEpIGJyZWFrOyBlbHNlIGZhaWwoYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkc3QoKCh0MiYweGYpPDw0KT4+PjB8KHQxJjB4M2MpPj4yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoYyA9IHNyYygpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQyID0gYWluW2NdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdDIgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYyA9PT0gNjEpIGJyZWFrOyBlbHNlIGZhaWwoYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHN0KCgodDEmMHgzKTw8Nik+Pj4wfHQyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBUZXN0cyBpZiBhIHN0cmluZyBpcyB2YWxpZCBiYXNlNjQuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIHRlc3RcclxuICAgICAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIGBmYWxzZWBcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGx4aXYudGVzdCA9IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC9eKD86W0EtWmEtejAtOSsvXXs0fSkqKD86W0EtWmEtejAtOSsvXXsyfT09fFtBLVphLXowLTkrL117M309KT8kLy50ZXN0KHN0cik7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbHhpdjtcclxuICAgICAgICB9KCk7XHJcblxyXG4gICAgICAgIC8vIGVuY29kaW5ncy9iYXNlNjRcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRW5jb2RlcyB0aGlzIEJ5dGVCdWZmZXIncyBjb250ZW50cyB0byBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IGJlZ2luIE9mZnNldCB0byBiZWdpbiBhdCwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fS5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IGVuZCBPZmZzZXQgdG8gZW5kIGF0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uXHJcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ30gQmFzZTY0IGVuY29kZWQgc3RyaW5nXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUudG9CYXNlNjQgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYmVnaW4gPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICAgICAgYmVnaW4gPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbmQgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICAgICAgZW5kID0gdGhpcy5saW1pdDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGJlZ2luICE9PSAnbnVtYmVyJyB8fCBiZWdpbiAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBiZWdpbjogTm90IGFuIGludGVnZXJcIik7XHJcbiAgICAgICAgICAgICAgICBiZWdpbiA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVuZCAhPT0gJ251bWJlcicgfHwgZW5kICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGVuZDogTm90IGFuIGludGVnZXJcIik7XHJcbiAgICAgICAgICAgICAgICBlbmQgPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJlZ2luIDwgMCB8fCBiZWdpbiA+IGVuZCB8fCBlbmQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiAwIDw9IFwiK2JlZ2luK1wiIDw9IFwiK2VuZCtcIiA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc2Q7IGx4aXYuZW5jb2RlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJlZ2luIDwgZW5kID8gdGhpcy52aWV3LmdldFVpbnQ4KGJlZ2luKyspIDogbnVsbDtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCBzZCA9IHN0cmluZ0Rlc3RpbmF0aW9uKCkpO1xyXG4gICAgICAgICAgICByZXR1cm4gc2QoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZWNvZGVzIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nIHRvIGEgQnl0ZUJ1ZmZlci5cclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBkZWNvZGVcclxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBsaXR0bGVFbmRpYW4gV2hldGhlciB0byB1c2UgbGl0dGxlIG9yIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci4gRGVmYXVsdHMgdG9cclxuICAgICAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9FTkRJQU59LlxyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG5vQXNzZXJ0IFdoZXRoZXIgdG8gc2tpcCBhc3NlcnRpb25zIG9mIG9mZnNldHMgYW5kIHZhbHVlcy4gRGVmYXVsdHMgdG9cclxuICAgICAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9OT0FTU0VSVH0uXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSBCeXRlQnVmZmVyXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXIuZnJvbUJhc2U2NCA9IGZ1bmN0aW9uKHN0ciwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBzdHI6IE5vdCBhIHN0cmluZ1wiKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdHIubGVuZ3RoICUgNCAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogTGVuZ3RoIG5vdCBhIG11bHRpcGxlIG9mIDRcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGJiID0gbmV3IEJ5dGVCdWZmZXIoc3RyLmxlbmd0aC80KjMsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpLFxyXG4gICAgICAgICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgICAgIGx4aXYuZGVjb2RlKHN0cmluZ1NvdXJjZShzdHIpLCBmdW5jdGlvbihiKSB7XHJcbiAgICAgICAgICAgICAgICBiYi52aWV3LnNldFVpbnQ4KGkrKywgYik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBiYi5saW1pdCA9IGk7XHJcbiAgICAgICAgICAgIHJldHVybiBiYjtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBFbmNvZGVzIGEgYmluYXJ5IHN0cmluZyB0byBiYXNlNjQgbGlrZSBgd2luZG93LmJ0b2FgIGRvZXMuXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBCaW5hcnkgc3RyaW5nXHJcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ30gQmFzZTY0IGVuY29kZWQgc3RyaW5nXHJcbiAgICAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93LmJ0b2FcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlci5idG9hID0gZnVuY3Rpb24oc3RyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBCeXRlQnVmZmVyLmZyb21CaW5hcnkoc3RyKS50b0Jhc2U2NCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlY29kZXMgYSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcgdG8gYmluYXJ5IGxpa2UgYHdpbmRvdy5hdG9iYCBkb2VzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBiNjQgQmFzZTY0IGVuY29kZWQgc3RyaW5nXHJcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ30gQmluYXJ5IHN0cmluZ1xyXG4gICAgICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvdy5hdG9iXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXIuYXRvYiA9IGZ1bmN0aW9uKGI2NCkge1xyXG4gICAgICAgICAgICByZXR1cm4gQnl0ZUJ1ZmZlci5mcm9tQmFzZTY0KGI2NCkudG9CaW5hcnkoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBlbmNvZGluZ3MvYmluYXJ5XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEVuY29kZXMgdGhpcyBCeXRlQnVmZmVyIHRvIGEgYmluYXJ5IGVuY29kZWQgc3RyaW5nLCB0aGF0IGlzIHVzaW5nIG9ubHkgY2hhcmFjdGVycyAweDAwLTB4RkYgYXMgYnl0ZXMuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBiZWdpbiBPZmZzZXQgdG8gYmVnaW4gYXQuIERlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0uXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBlbmQgT2Zmc2V0IHRvIGVuZCBhdC4gRGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEJpbmFyeSBlbmNvZGVkIHN0cmluZ1xyXG4gICAgICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGBvZmZzZXQgPiBsaW1pdGBcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS50b0JpbmFyeSA9IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcclxuICAgICAgICAgICAgYmVnaW4gPSB0eXBlb2YgYmVnaW4gPT09ICd1bmRlZmluZWQnID8gdGhpcy5vZmZzZXQgOiBiZWdpbjtcclxuICAgICAgICAgICAgZW5kID0gdHlwZW9mIGVuZCA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLmxpbWl0IDogZW5kO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYmVnaW4gIT09ICdudW1iZXInIHx8IGJlZ2luICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGJlZ2luOiBOb3QgYW4gaW50ZWdlclwiKTtcclxuICAgICAgICAgICAgICAgIGJlZ2luID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZW5kICE9PSAnbnVtYmVyJyB8fCBlbmQgJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgZW5kOiBOb3QgYW4gaW50ZWdlclwiKTtcclxuICAgICAgICAgICAgICAgIGVuZCA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmVnaW4gPCAwIHx8IGJlZ2luID4gZW5kIHx8IGVuZCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgcmFuZ2U6IDAgPD0gXCIrYmVnaW4rXCIgPD0gXCIrZW5kK1wiIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChiZWdpbiA9PT0gZW5kKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICAgIHZhciBjYyA9IFtdLCBwdCA9IFtdO1xyXG4gICAgICAgICAgICB3aGlsZSAoYmVnaW4gPCBlbmQpIHtcclxuICAgICAgICAgICAgICAgIGNjLnB1c2godGhpcy52aWV3LmdldFVpbnQ4KGJlZ2luKyspKTtcclxuICAgICAgICAgICAgICAgIGlmIChjYy5sZW5ndGggPj0gMTAyNClcclxuICAgICAgICAgICAgICAgICAgICBwdC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjYykpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNjID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHB0LmpvaW4oJycpICsgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNjKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZWNvZGVzIGEgYmluYXJ5IGVuY29kZWQgc3RyaW5nLCB0aGF0IGlzIHVzaW5nIG9ubHkgY2hhcmFjdGVycyAweDAwLTB4RkYgYXMgYnl0ZXMsIHRvIGEgQnl0ZUJ1ZmZlci5cclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBkZWNvZGVcclxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBsaXR0bGVFbmRpYW4gV2hldGhlciB0byB1c2UgbGl0dGxlIG9yIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci4gRGVmYXVsdHMgdG9cclxuICAgICAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9FTkRJQU59LlxyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG5vQXNzZXJ0IFdoZXRoZXIgdG8gc2tpcCBhc3NlcnRpb25zIG9mIG9mZnNldHMgYW5kIHZhbHVlcy4gRGVmYXVsdHMgdG9cclxuICAgICAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9OT0FTU0VSVH0uXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSBCeXRlQnVmZmVyXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXIuZnJvbUJpbmFyeSA9IGZ1bmN0aW9uKHN0ciwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBzdHI6IE5vdCBhIHN0cmluZ1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgaSA9IDAsIGsgPSBzdHIubGVuZ3RoLCBjaGFyQ29kZSxcclxuICAgICAgICAgICAgICAgIGJiID0gbmV3IEJ5dGVCdWZmZXIoaywgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCk7XHJcbiAgICAgICAgICAgIHdoaWxlIChpPGspIHtcclxuICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW5vQXNzZXJ0ICYmIGNoYXJDb2RlID4gMjU1KVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIGNoYXJDb2RlIGF0IFwiK2krXCI6IDAgPD0gXCIrY2hhckNvZGUrXCIgPD0gMjU1XCIpO1xyXG4gICAgICAgICAgICAgICAgYmIudmlldy5zZXRVaW50OChpKyssIGNoYXJDb2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBiYi5saW1pdCA9IGs7XHJcbiAgICAgICAgICAgIHJldHVybiBiYjtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBlbmNvZGluZ3MvZGVidWdcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRW5jb2RlcyB0aGlzIEJ5dGVCdWZmZXIgdG8gYSBoZXggZW5jb2RlZCBzdHJpbmcgd2l0aCBtYXJrZWQgb2Zmc2V0cy4gT2Zmc2V0IHN5bWJvbHMgYXJlOlxyXG4gICAgICAgICAqICogYDxgIDogb2Zmc2V0LFxyXG4gICAgICAgICAqICogYCdgIDogbWFya2VkT2Zmc2V0LFxyXG4gICAgICAgICAqICogYD5gIDogbGltaXQsXHJcbiAgICAgICAgICogKiBgfGAgOiBvZmZzZXQgYW5kIGxpbWl0LFxyXG4gICAgICAgICAqICogYFtgIDogb2Zmc2V0IGFuZCBtYXJrZWRPZmZzZXQsXHJcbiAgICAgICAgICogKiBgXWAgOiBtYXJrZWRPZmZzZXQgYW5kIGxpbWl0LFxyXG4gICAgICAgICAqICogYCFgIDogb2Zmc2V0LCBtYXJrZWRPZmZzZXQgYW5kIGxpbWl0XHJcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gY29sdW1ucyBJZiBgdHJ1ZWAgcmV0dXJucyB0d28gY29sdW1ucyBoZXggKyBhc2NpaSwgZGVmYXVsdHMgdG8gYGZhbHNlYFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd8IUFycmF5LjxzdHJpbmc+fSBEZWJ1ZyBzdHJpbmcgb3IgYXJyYXkgb2YgbGluZXMgaWYgYGFzQXJyYXkgPSB0cnVlYFxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKiBAZXhhbXBsZSBgPjAwJzAxIDAyPDAzYCBjb250YWlucyBmb3VyIGJ5dGVzIHdpdGggYGxpbWl0PTAsIG1hcmtlZE9mZnNldD0xLCBvZmZzZXQ9M2BcclxuICAgICAgICAgKiBAZXhhbXBsZSBgMDBbMDEgMDIgMDM+YCBjb250YWlucyBmb3VyIGJ5dGVzIHdpdGggYG9mZnNldD1tYXJrZWRPZmZzZXQ9MSwgbGltaXQ9NGBcclxuICAgICAgICAgKiBAZXhhbXBsZSBgMDB8MDEgMDIgMDNgIGNvbnRhaW5zIGZvdXIgYnl0ZXMgd2l0aCBgb2Zmc2V0PWxpbWl0PTEsIG1hcmtlZE9mZnNldD0tMWBcclxuICAgICAgICAgKiBAZXhhbXBsZSBgfGAgY29udGFpbnMgemVybyBieXRlcyB3aXRoIGBvZmZzZXQ9bGltaXQ9MCwgbWFya2VkT2Zmc2V0PS0xYFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUudG9EZWJ1ZyA9IGZ1bmN0aW9uKGNvbHVtbnMpIHtcclxuICAgICAgICAgICAgdmFyIGkgPSAtMSxcclxuICAgICAgICAgICAgICAgIGsgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgYixcclxuICAgICAgICAgICAgICAgIGhleCA9IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBhc2MgPSBcIlwiLFxyXG4gICAgICAgICAgICAgICAgb3V0ID0gXCJcIjtcclxuICAgICAgICAgICAgd2hpbGUgKGk8aykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYiA9IHRoaXMudmlldy5nZXRVaW50OChpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYiA8IDB4MTApIGhleCArPSBcIjBcIitiLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaGV4ICs9IGIudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXNjICs9IGIgPiAzMiAmJiBiIDwgMTI3ID8gU3RyaW5nLmZyb21DaGFyQ29kZShiKSA6ICcuJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID4gMCAmJiBpICUgMTYgPT09IDAgJiYgaSAhPT0gaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaGV4Lmxlbmd0aCA8IDMqMTYrMykgaGV4ICs9IFwiIFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQgKz0gaGV4K2FzYytcIlxcblwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZXggPSBhc2MgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpID09PSB0aGlzLm9mZnNldCAmJiBpID09PSB0aGlzLmxpbWl0KVxyXG4gICAgICAgICAgICAgICAgICAgIGhleCArPSBpID09PSB0aGlzLm1hcmtlZE9mZnNldCA/IFwiIVwiIDogXCJ8XCI7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpID09PSB0aGlzLm9mZnNldClcclxuICAgICAgICAgICAgICAgICAgICBoZXggKz0gaSA9PT0gdGhpcy5tYXJrZWRPZmZzZXQgPyBcIltcIiA6IFwiPFwiO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaSA9PT0gdGhpcy5saW1pdClcclxuICAgICAgICAgICAgICAgICAgICBoZXggKz0gaSA9PT0gdGhpcy5tYXJrZWRPZmZzZXQgPyBcIl1cIiA6IFwiPlwiO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGhleCArPSBpID09PSB0aGlzLm1hcmtlZE9mZnNldCA/IFwiJ1wiIDogKGNvbHVtbnMgfHwgKGkgIT09IDAgJiYgaSAhPT0gaykgPyBcIiBcIiA6IFwiXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjb2x1bW5zICYmIGhleCAhPT0gXCIgXCIpIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChoZXgubGVuZ3RoIDwgMyoxNiszKSBoZXggKz0gXCIgXCI7XHJcbiAgICAgICAgICAgICAgICBvdXQgKz0gaGV4K2FzYytcIlxcblwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjb2x1bW5zID8gb3V0IDogaGV4O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlY29kZXMgYSBoZXggZW5jb2RlZCBzdHJpbmcgd2l0aCBtYXJrZWQgb2Zmc2V0cyB0byBhIEJ5dGVCdWZmZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBEZWJ1ZyBzdHJpbmcgdG8gZGVjb2RlIChub3QgYmUgZ2VuZXJhdGVkIHdpdGggYGNvbHVtbnMgPSB0cnVlYClcclxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBsaXR0bGVFbmRpYW4gV2hldGhlciB0byB1c2UgbGl0dGxlIG9yIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci4gRGVmYXVsdHMgdG9cclxuICAgICAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9FTkRJQU59LlxyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG5vQXNzZXJ0IFdoZXRoZXIgdG8gc2tpcCBhc3NlcnRpb25zIG9mIG9mZnNldHMgYW5kIHZhbHVlcy4gRGVmYXVsdHMgdG9cclxuICAgICAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9OT0FTU0VSVH0uXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSBCeXRlQnVmZmVyXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciN0b0RlYnVnXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlci5mcm9tRGVidWcgPSBmdW5jdGlvbihzdHIsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgdmFyIGsgPSBzdHIubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgYmIgPSBuZXcgQnl0ZUJ1ZmZlcigoKGsrMSkvMyl8MCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCk7XHJcbiAgICAgICAgICAgIHZhciBpID0gMCwgaiA9IDAsIGNoLCBiLFxyXG4gICAgICAgICAgICAgICAgcnMgPSBmYWxzZSwgLy8gUmVxdWlyZSBzeW1ib2wgbmV4dFxyXG4gICAgICAgICAgICAgICAgaG8gPSBmYWxzZSwgaG0gPSBmYWxzZSwgaGwgPSBmYWxzZSwgLy8gQWxyZWFkeSBoYXMgb2Zmc2V0LCBtYXJrZWRPZmZzZXQsIGxpbWl0P1xyXG4gICAgICAgICAgICAgICAgZmFpbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB3aGlsZSAoaTxrKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoID0gc3RyLmNoYXJBdChpKyspKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnISc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChobyB8fCBobSB8fCBobCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwgPSB0cnVlOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvID0gaG0gPSBobCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYmIub2Zmc2V0ID0gYmIubWFya2VkT2Zmc2V0ID0gYmIubGltaXQgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICd8JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhvIHx8IGhsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbCA9IHRydWU7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG8gPSBobCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYmIub2Zmc2V0ID0gYmIubGltaXQgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdbJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhvIHx8IGhtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbCA9IHRydWU7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG8gPSBobSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYmIub2Zmc2V0ID0gYmIubWFya2VkT2Zmc2V0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnPCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChobykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwgPSB0cnVlOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYi5vZmZzZXQgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICddJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhsIHx8IGhtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbCA9IHRydWU7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGwgPSBobSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYmIubGltaXQgPSBiYi5tYXJrZWRPZmZzZXQgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICc+JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbCA9IHRydWU7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJiLmxpbWl0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIidcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbCA9IHRydWU7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJiLm1hcmtlZE9mZnNldCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJyAnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsID0gdHJ1ZTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYiA9IHBhcnNlSW50KGNoK3N0ci5jaGFyQXQoaSsrKSwgMTYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oYikgfHwgYiA8IDAgfHwgYiA+IDI1NSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogTm90IGEgZGVidWcgZW5jb2RlZCBzdHJpbmdcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYmIudmlldy5zZXRVaW50OChqKyssIGIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBycyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZmFpbClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogSW52YWxpZCBzeW1ib2wgYXQgXCIraSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFobyB8fCAhaGwpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBzdHI6IE1pc3Npbmcgb2Zmc2V0IG9yIGxpbWl0XCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGo8YmIuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBzdHI6IE5vdCBhIGRlYnVnIGVuY29kZWQgc3RyaW5nIChpcyBpdCBoZXg/KSBcIitqK1wiIDwgXCIrayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGJiO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIGVuY29kaW5ncy9oZXhcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRW5jb2RlcyB0aGlzIEJ5dGVCdWZmZXIncyBjb250ZW50cyB0byBhIGhleCBlbmNvZGVkIHN0cmluZy5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IGJlZ2luIE9mZnNldCB0byBiZWdpbiBhdC4gRGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fS5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IGVuZCBPZmZzZXQgdG8gZW5kIGF0LiBEZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uXHJcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ30gSGV4IGVuY29kZWQgc3RyaW5nXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUudG9IZXggPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XHJcbiAgICAgICAgICAgIGJlZ2luID0gdHlwZW9mIGJlZ2luID09PSAndW5kZWZpbmVkJyA/IHRoaXMub2Zmc2V0IDogYmVnaW47XHJcbiAgICAgICAgICAgIGVuZCA9IHR5cGVvZiBlbmQgPT09ICd1bmRlZmluZWQnID8gdGhpcy5saW1pdCA6IGVuZDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGJlZ2luICE9PSAnbnVtYmVyJyB8fCBiZWdpbiAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBiZWdpbjogTm90IGFuIGludGVnZXJcIik7XHJcbiAgICAgICAgICAgICAgICBiZWdpbiA+Pj49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVuZCAhPT0gJ251bWJlcicgfHwgZW5kICUgMSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGVuZDogTm90IGFuIGludGVnZXJcIik7XHJcbiAgICAgICAgICAgICAgICBlbmQgPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJlZ2luIDwgMCB8fCBiZWdpbiA+IGVuZCB8fCBlbmQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiAwIDw9IFwiK2JlZ2luK1wiIDw9IFwiK2VuZCtcIiA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgb3V0ID0gbmV3IEFycmF5KGVuZCAtIGJlZ2luKSxcclxuICAgICAgICAgICAgICAgIGI7XHJcbiAgICAgICAgICAgIHdoaWxlIChiZWdpbiA8IGVuZCkge1xyXG4gICAgICAgICAgICAgICAgYiA9IHRoaXMudmlldy5nZXRVaW50OChiZWdpbisrKTtcclxuICAgICAgICAgICAgICAgIGlmIChiIDwgMHgxMClcclxuICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChcIjBcIiwgYi50b1N0cmluZygxNikpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBvdXQucHVzaChiLnRvU3RyaW5nKDE2KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG91dC5qb2luKCcnKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZWNvZGVzIGEgaGV4IGVuY29kZWQgc3RyaW5nIHRvIGEgQnl0ZUJ1ZmZlci5cclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBkZWNvZGVcclxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBsaXR0bGVFbmRpYW4gV2hldGhlciB0byB1c2UgbGl0dGxlIG9yIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci4gRGVmYXVsdHMgdG9cclxuICAgICAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9FTkRJQU59LlxyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG5vQXNzZXJ0IFdoZXRoZXIgdG8gc2tpcCBhc3NlcnRpb25zIG9mIG9mZnNldHMgYW5kIHZhbHVlcy4gRGVmYXVsdHMgdG9cclxuICAgICAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9OT0FTU0VSVH0uXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSBCeXRlQnVmZmVyXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXIuZnJvbUhleCA9IGZ1bmN0aW9uKHN0ciwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBzdHI6IE5vdCBhIHN0cmluZ1wiKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdHIubGVuZ3RoICUgMiAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogTGVuZ3RoIG5vdCBhIG11bHRpcGxlIG9mIDJcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGsgPSBzdHIubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgYmIgPSBuZXcgQnl0ZUJ1ZmZlcigoayAvIDIpIHwgMCwgbGl0dGxlRW5kaWFuKSxcclxuICAgICAgICAgICAgICAgIGI7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGk9MCwgaj0wOyBpPGs7IGkrPTIpIHtcclxuICAgICAgICAgICAgICAgIGIgPSBwYXJzZUludChzdHIuc3Vic3RyaW5nKGksIGkrMiksIDE2KTtcclxuICAgICAgICAgICAgICAgIGlmICghbm9Bc3NlcnQpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0Zpbml0ZShiKSB8fCBiIDwgMCB8fCBiID4gMjU1KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogQ29udGFpbnMgbm9uLWhleCBjaGFyYWN0ZXJzXCIpO1xyXG4gICAgICAgICAgICAgICAgYmIudmlldy5zZXRVaW50OChqKyssIGIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJiLmxpbWl0ID0gajtcclxuICAgICAgICAgICAgcmV0dXJuIGJiO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIHV0ZngtZW1iZWRkYWJsZVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiB1dGZ4LWVtYmVkZGFibGUgKGMpIDIwMTQgRGFuaWVsIFdpcnR6IDxkY29kZUBkY29kZS5pbz5cclxuICAgICAgICAgKiBSZWxlYXNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wXHJcbiAgICAgICAgICogc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGNvZGVJTy91dGZ4IGZvciBkZXRhaWxzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmFyIHV0ZnggPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogdXRmeCBuYW1lc3BhY2UuXHJcbiAgICAgICAgICAgICAqIEBpbm5lclxyXG4gICAgICAgICAgICAgKiBAdHlwZSB7IU9iamVjdC48c3RyaW5nLCo+fVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdmFyIHV0ZnggPSB7fTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBNYXhpbXVtIHZhbGlkIGNvZGUgcG9pbnQuXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICAgICAqIEBjb25zdFxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdXRmeC5NQVhfQ09ERVBPSU5UID0gMHgxMEZGRkY7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogRW5jb2RlcyBVVEY4IGNvZGUgcG9pbnRzIHRvIFVURjggYnl0ZXMuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7KCFmdW5jdGlvbigpOm51bWJlcnxudWxsKSB8IG51bWJlcn0gc3JjIENvZGUgcG9pbnRzIHNvdXJjZSwgZWl0aGVyIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGNvZGUgcG9pbnRcclxuICAgICAgICAgICAgICogIHJlc3BlY3RpdmVseSBgbnVsbGAgaWYgdGhlcmUgYXJlIG5vIG1vcmUgY29kZSBwb2ludHMgbGVmdCBvciBhIHNpbmdsZSBudW1lcmljIGNvZGUgcG9pbnQuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKG51bWJlcil9IGRzdCBCeXRlcyBkZXN0aW5hdGlvbiBhcyBhIGZ1bmN0aW9uIHN1Y2Nlc3NpdmVseSBjYWxsZWQgd2l0aCB0aGUgbmV4dCBieXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB1dGZ4LmVuY29kZVVURjggPSBmdW5jdGlvbihzcmMsIGRzdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNwID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3JjID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgICAgICBjcCA9IHNyYyxcclxuICAgICAgICAgICAgICAgICAgICBzcmMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG51bGw7IH07XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoY3AgIT09IG51bGwgfHwgKGNwID0gc3JjKCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNwIDwgMHg4MClcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN0KGNwJjB4N0YpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNwIDwgMHg4MDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzdCgoKGNwPj42KSYweDFGKXwweEMwKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN0KChjcCYweDNGKXwweDgwKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjcCA8IDB4MTAwMDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzdCgoKGNwPj4xMikmMHgwRil8MHhFMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzdCgoKGNwPj42KSYweDNGKXwweDgwKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN0KChjcCYweDNGKXwweDgwKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzdCgoKGNwPj4xOCkmMHgwNyl8MHhGMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzdCgoKGNwPj4xMikmMHgzRil8MHg4MCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzdCgoKGNwPj42KSYweDNGKXwweDgwKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN0KChjcCYweDNGKXwweDgwKTtcclxuICAgICAgICAgICAgICAgICAgICBjcCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogRGVjb2RlcyBVVEY4IGJ5dGVzIHRvIFVURjggY29kZSBwb2ludHMuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKCk6bnVtYmVyfG51bGx9IHNyYyBCeXRlcyBzb3VyY2UgYXMgYSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIG5leHQgYnl0ZSByZXNwZWN0aXZlbHkgYG51bGxgIGlmIHRoZXJlXHJcbiAgICAgICAgICAgICAqICBhcmUgbm8gbW9yZSBieXRlcyBsZWZ0LlxyXG4gICAgICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbihudW1iZXIpfSBkc3QgQ29kZSBwb2ludHMgZGVzdGluYXRpb24gYXMgYSBmdW5jdGlvbiBzdWNjZXNzaXZlbHkgY2FsbGVkIHdpdGggZWFjaCBkZWNvZGVkIGNvZGUgcG9pbnQuXHJcbiAgICAgICAgICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGEgc3RhcnRpbmcgYnl0ZSBpcyBpbnZhbGlkIGluIFVURjhcclxuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBsYXN0IHNlcXVlbmNlIGlzIHRydW5jYXRlZC4gSGFzIGFuIGFycmF5IHByb3BlcnR5IGBieXRlc2AgaG9sZGluZyB0aGVcclxuICAgICAgICAgICAgICogIHJlbWFpbmluZyBieXRlcy5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHV0ZnguZGVjb2RlVVRGOCA9IGZ1bmN0aW9uKHNyYywgZHN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYSwgYiwgYywgZCwgZmFpbCA9IGZ1bmN0aW9uKGIpIHtcclxuICAgICAgICAgICAgICAgICAgICBiID0gYi5zbGljZSgwLCBiLmluZGV4T2YobnVsbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnIgPSBFcnJvcihiLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVyci5uYW1lID0gXCJUcnVuY2F0ZWRFcnJvclwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGVyclsnYnl0ZXMnXSA9IGI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHdoaWxlICgoYSA9IHNyYygpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoYSYweDgwKSA9PT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN0KGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKChhJjB4RTApID09PSAweEMwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoKGIgPSBzcmMoKSkgPT09IG51bGwpICYmIGZhaWwoW2EsIGJdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN0KCgoYSYweDFGKTw8NikgfCAoYiYweDNGKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKGEmMHhGMCkgPT09IDB4RTApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICgoYj1zcmMoKSkgPT09IG51bGwgfHwgKGM9c3JjKCkpID09PSBudWxsKSAmJiBmYWlsKFthLCBiLCBjXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzdCgoKGEmMHgwRik8PDEyKSB8ICgoYiYweDNGKTw8NikgfCAoYyYweDNGKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKGEmMHhGOCkgPT09IDB4RjApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICgoYj1zcmMoKSkgPT09IG51bGwgfHwgKGM9c3JjKCkpID09PSBudWxsIHx8IChkPXNyYygpKSA9PT0gbnVsbCkgJiYgZmFpbChbYSwgYiwgYyAsZF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkc3QoKChhJjB4MDcpPDwxOCkgfCAoKGImMHgzRik8PDEyKSB8ICgoYyYweDNGKTw8NikgfCAoZCYweDNGKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBzdGFydGluZyBieXRlOiBcIithKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyBVVEYxNiBjaGFyYWN0ZXJzIHRvIFVURjggY29kZSBwb2ludHMuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKCk6bnVtYmVyfG51bGx9IHNyYyBDaGFyYWN0ZXJzIHNvdXJjZSBhcyBhIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgbmV4dCBjaGFyIGNvZGUgcmVzcGVjdGl2ZWx5XHJcbiAgICAgICAgICAgICAqICBgbnVsbGAgaWYgdGhlcmUgYXJlIG5vIG1vcmUgY2hhcmFjdGVycyBsZWZ0LlxyXG4gICAgICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbihudW1iZXIpfSBkc3QgQ29kZSBwb2ludHMgZGVzdGluYXRpb24gYXMgYSBmdW5jdGlvbiBzdWNjZXNzaXZlbHkgY2FsbGVkIHdpdGggZWFjaCBjb252ZXJ0ZWQgY29kZVxyXG4gICAgICAgICAgICAgKiAgcG9pbnQuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB1dGZ4LlVURjE2dG9VVEY4ID0gZnVuY3Rpb24oc3JjLCBkc3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjMSwgYzIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKGMxID0gYzIgIT09IG51bGwgPyBjMiA6IHNyYygpKSA9PT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMxID49IDB4RDgwMCAmJiBjMSA8PSAweERGRkYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChjMiA9IHNyYygpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMyID49IDB4REMwMCAmJiBjMiA8PSAweERGRkYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkc3QoKGMxLTB4RDgwMCkqMHg0MDArYzItMHhEQzAwKzB4MTAwMDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyID0gbnVsbDsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KGMxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjMiAhPT0gbnVsbCkgZHN0KGMyKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyBVVEY4IGNvZGUgcG9pbnRzIHRvIFVURjE2IGNoYXJhY3RlcnMuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7KCFmdW5jdGlvbigpOm51bWJlcnxudWxsKSB8IG51bWJlcn0gc3JjIENvZGUgcG9pbnRzIHNvdXJjZSwgZWl0aGVyIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGNvZGUgcG9pbnRcclxuICAgICAgICAgICAgICogIHJlc3BlY3RpdmVseSBgbnVsbGAgaWYgdGhlcmUgYXJlIG5vIG1vcmUgY29kZSBwb2ludHMgbGVmdCBvciBhIHNpbmdsZSBudW1lcmljIGNvZGUgcG9pbnQuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKG51bWJlcil9IGRzdCBDaGFyYWN0ZXJzIGRlc3RpbmF0aW9uIGFzIGEgZnVuY3Rpb24gc3VjY2Vzc2l2ZWx5IGNhbGxlZCB3aXRoIGVhY2ggY29udmVydGVkIGNoYXIgY29kZS5cclxuICAgICAgICAgICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYSBjb2RlIHBvaW50IGlzIG91dCBvZiByYW5nZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdXRmeC5VVEY4dG9VVEYxNiA9IGZ1bmN0aW9uKHNyYywgZHN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3AgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzcmMgPT09ICdudW1iZXInKVxyXG4gICAgICAgICAgICAgICAgICAgIGNwID0gc3JjLCBzcmMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG51bGw7IH07XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoY3AgIT09IG51bGwgfHwgKGNwID0gc3JjKCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNwIDw9IDB4RkZGRilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN0KGNwKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNwIC09IDB4MTAwMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzdCgoY3A+PjEwKSsweEQ4MDApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkc3QoKGNwJTB4NDAwKSsweERDMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNwID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyBhbmQgZW5jb2RlcyBVVEYxNiBjaGFyYWN0ZXJzIHRvIFVURjggYnl0ZXMuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKCk6bnVtYmVyfG51bGx9IHNyYyBDaGFyYWN0ZXJzIHNvdXJjZSBhcyBhIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgbmV4dCBjaGFyIGNvZGUgcmVzcGVjdGl2ZWx5IGBudWxsYFxyXG4gICAgICAgICAgICAgKiAgaWYgdGhlcmUgYXJlIG5vIG1vcmUgY2hhcmFjdGVycyBsZWZ0LlxyXG4gICAgICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbihudW1iZXIpfSBkc3QgQnl0ZXMgZGVzdGluYXRpb24gYXMgYSBmdW5jdGlvbiBzdWNjZXNzaXZlbHkgY2FsbGVkIHdpdGggdGhlIG5leHQgYnl0ZS5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHV0ZnguZW5jb2RlVVRGMTZ0b1VURjggPSBmdW5jdGlvbihzcmMsIGRzdCkge1xyXG4gICAgICAgICAgICAgICAgdXRmeC5VVEYxNnRvVVRGOChzcmMsIGZ1bmN0aW9uKGNwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRmeC5lbmNvZGVVVEY4KGNwLCBkc3QpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogRGVjb2RlcyBhbmQgY29udmVydHMgVVRGOCBieXRlcyB0byBVVEYxNiBjaGFyYWN0ZXJzLlxyXG4gICAgICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbigpOm51bWJlcnxudWxsfSBzcmMgQnl0ZXMgc291cmNlIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGJ5dGUgcmVzcGVjdGl2ZWx5IGBudWxsYCBpZiB0aGVyZVxyXG4gICAgICAgICAgICAgKiAgYXJlIG5vIG1vcmUgYnl0ZXMgbGVmdC5cclxuICAgICAgICAgICAgICogQHBhcmFtIHshZnVuY3Rpb24obnVtYmVyKX0gZHN0IENoYXJhY3RlcnMgZGVzdGluYXRpb24gYXMgYSBmdW5jdGlvbiBzdWNjZXNzaXZlbHkgY2FsbGVkIHdpdGggZWFjaCBjb252ZXJ0ZWQgY2hhciBjb2RlLlxyXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBhIHN0YXJ0aW5nIGJ5dGUgaXMgaW52YWxpZCBpbiBVVEY4XHJcbiAgICAgICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgbGFzdCBzZXF1ZW5jZSBpcyB0cnVuY2F0ZWQuIEhhcyBhbiBhcnJheSBwcm9wZXJ0eSBgYnl0ZXNgIGhvbGRpbmcgdGhlIHJlbWFpbmluZyBieXRlcy5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHV0ZnguZGVjb2RlVVRGOHRvVVRGMTYgPSBmdW5jdGlvbihzcmMsIGRzdCkge1xyXG4gICAgICAgICAgICAgICAgdXRmeC5kZWNvZGVVVEY4KHNyYywgZnVuY3Rpb24oY3ApIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGZ4LlVURjh0b1VURjE2KGNwLCBkc3QpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQ2FsY3VsYXRlcyB0aGUgYnl0ZSBsZW5ndGggb2YgYW4gVVRGOCBjb2RlIHBvaW50LlxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gY3AgVVRGOCBjb2RlIHBvaW50XHJcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IEJ5dGUgbGVuZ3RoXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB1dGZ4LmNhbGN1bGF0ZUNvZGVQb2ludCA9IGZ1bmN0aW9uKGNwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGNwIDwgMHg4MCkgPyAxIDogKGNwIDwgMHg4MDApID8gMiA6IChjcCA8IDB4MTAwMDApID8gMyA6IDQ7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQ2FsY3VsYXRlcyB0aGUgbnVtYmVyIG9mIFVURjggYnl0ZXMgcmVxdWlyZWQgdG8gc3RvcmUgVVRGOCBjb2RlIHBvaW50cy5cclxuICAgICAgICAgICAgICogQHBhcmFtIHsoIWZ1bmN0aW9uKCk6bnVtYmVyfG51bGwpfSBzcmMgQ29kZSBwb2ludHMgc291cmNlIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGNvZGUgcG9pbnQgcmVzcGVjdGl2ZWx5XHJcbiAgICAgICAgICAgICAqICBgbnVsbGAgaWYgdGhlcmUgYXJlIG5vIG1vcmUgY29kZSBwb2ludHMgbGVmdC5cclxuICAgICAgICAgICAgICogQHJldHVybnMge251bWJlcn0gVGhlIG51bWJlciBvZiBVVEY4IGJ5dGVzIHJlcXVpcmVkXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB1dGZ4LmNhbGN1bGF0ZVVURjggPSBmdW5jdGlvbihzcmMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjcCwgbD0wO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKChjcCA9IHNyYygpKSAhPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBsICs9IHV0ZnguY2FsY3VsYXRlQ29kZVBvaW50KGNwKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIENhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiBVVEY4IGNvZGUgcG9pbnRzIHJlc3BlY3RpdmVseSBVVEY4IGJ5dGVzIHJlcXVpcmVkIHRvIHN0b3JlIFVURjE2IGNoYXIgY29kZXMuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7KCFmdW5jdGlvbigpOm51bWJlcnxudWxsKX0gc3JjIENoYXJhY3RlcnMgc291cmNlIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGNoYXIgY29kZSByZXNwZWN0aXZlbHlcclxuICAgICAgICAgICAgICogIGBudWxsYCBpZiB0aGVyZSBhcmUgbm8gbW9yZSBjaGFyYWN0ZXJzIGxlZnQuXHJcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHshQXJyYXkuPG51bWJlcj59IFRoZSBudW1iZXIgb2YgVVRGOCBjb2RlIHBvaW50cyBhdCBpbmRleCAwIGFuZCB0aGUgbnVtYmVyIG9mIFVURjggYnl0ZXMgcmVxdWlyZWQgYXQgaW5kZXggMS5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHV0ZnguY2FsY3VsYXRlVVRGMTZhc1VURjggPSBmdW5jdGlvbihzcmMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBuPTAsIGw9MDtcclxuICAgICAgICAgICAgICAgIHV0ZnguVVRGMTZ0b1VURjgoc3JjLCBmdW5jdGlvbihjcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICsrbjsgbCArPSB1dGZ4LmNhbGN1bGF0ZUNvZGVQb2ludChjcCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbbixsXTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB1dGZ4O1xyXG4gICAgICAgIH0oKTtcclxuXHJcbiAgICAgICAgLy8gZW5jb2RpbmdzL3V0ZjhcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRW5jb2RlcyB0aGlzIEJ5dGVCdWZmZXIncyBjb250ZW50cyBiZXR3ZWVuIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYW5kIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fSB0byBhbiBVVEY4IGVuY29kZWRcclxuICAgICAgICAgKiAgc3RyaW5nLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEhleCBlbmNvZGVkIHN0cmluZ1xyXG4gICAgICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGBvZmZzZXQgPiBsaW1pdGBcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS50b1VURjggPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYmVnaW4gPT09ICd1bmRlZmluZWQnKSBiZWdpbiA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGVuZCA9PT0gJ3VuZGVmaW5lZCcpIGVuZCA9IHRoaXMubGltaXQ7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiAhPT0gJ251bWJlcicgfHwgYmVnaW4gJSAxICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgYmVnaW46IE5vdCBhbiBpbnRlZ2VyXCIpO1xyXG4gICAgICAgICAgICAgICAgYmVnaW4gPj4+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbmQgIT09ICdudW1iZXInIHx8IGVuZCAlIDEgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBlbmQ6IE5vdCBhbiBpbnRlZ2VyXCIpO1xyXG4gICAgICAgICAgICAgICAgZW5kID4+Pj0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChiZWdpbiA8IDAgfHwgYmVnaW4gPiBlbmQgfHwgZW5kID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogMCA8PSBcIitiZWdpbitcIiA8PSBcIitlbmQrXCIgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHNkOyB0cnkge1xyXG4gICAgICAgICAgICAgICAgdXRmeC5kZWNvZGVVVEY4dG9VVEYxNihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmVnaW4gPCBlbmQgPyB0aGlzLnZpZXcuZ2V0VWludDgoYmVnaW4rKykgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCBzZCA9IHN0cmluZ0Rlc3RpbmF0aW9uKCkpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmVnaW4gIT09IGVuZClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogVHJ1bmNhdGVkIGRhdGEsIFwiK2JlZ2luK1wiICE9IFwiK2VuZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHNkKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGVjb2RlcyBhbiBVVEY4IGVuY29kZWQgc3RyaW5nIHRvIGEgQnl0ZUJ1ZmZlci5cclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBkZWNvZGVcclxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBsaXR0bGVFbmRpYW4gV2hldGhlciB0byB1c2UgbGl0dGxlIG9yIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci4gRGVmYXVsdHMgdG9cclxuICAgICAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9FTkRJQU59LlxyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG5vQXNzZXJ0IFdoZXRoZXIgdG8gc2tpcCBhc3NlcnRpb25zIG9mIG9mZnNldHMgYW5kIHZhbHVlcy4gRGVmYXVsdHMgdG9cclxuICAgICAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9OT0FTU0VSVH0uXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSBCeXRlQnVmZmVyXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXIuZnJvbVVURjggPSBmdW5jdGlvbihzdHIsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKCFub0Fzc2VydClcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogTm90IGEgc3RyaW5nXCIpO1xyXG4gICAgICAgICAgICB2YXIgYmIgPSBuZXcgQnl0ZUJ1ZmZlcih1dGZ4LmNhbGN1bGF0ZVVURjE2YXNVVEY4KHN0cmluZ1NvdXJjZShzdHIpLCB0cnVlKVsxXSwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCksXHJcbiAgICAgICAgICAgICAgICBpID0gMDtcclxuICAgICAgICAgICAgdXRmeC5lbmNvZGVVVEYxNnRvVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSwgZnVuY3Rpb24oYikge1xyXG4gICAgICAgICAgICAgICAgYmIudmlldy5zZXRVaW50OChpKyssIGIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYmIubGltaXQgPSBpO1xyXG4gICAgICAgICAgICByZXR1cm4gYmI7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHJldHVybiBCeXRlQnVmZmVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIENvbW1vbkpTICovIGlmICh0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIGV4cG9ydHMpXHJcbiAgICAgICAgbW9kdWxlWydleHBvcnRzJ10gPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBMb25nOyB0cnkgeyBMb25nID0gcmVxdWlyZShcImxvbmdcIik7IH0gY2F0Y2ggKGUpIHt9XHJcbiAgICAgICAgICAgIHJldHVybiBsb2FkQnl0ZUJ1ZmZlcihMb25nKTtcclxuICAgICAgICB9KSgpO1xyXG4gICAgLyogQU1EICovIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lW1wiYW1kXCJdKVxyXG4gICAgICAgIGRlZmluZShcIkJ5dGVCdWZmZXJcIiwgW1wiTG9uZ1wiXSwgZnVuY3Rpb24oTG9uZykgeyByZXR1cm4gbG9hZEJ5dGVCdWZmZXIoTG9uZyk7IH0pO1xyXG4gICAgLyogR2xvYmFsICovIGVsc2VcclxuICAgICAgICAoZ2xvYmFsW1wiZGNvZGVJT1wiXSA9IGdsb2JhbFtcImRjb2RlSU9cIl0gfHwge30pW1wiQnl0ZUJ1ZmZlclwiXSA9IGxvYWRCeXRlQnVmZmVyKGdsb2JhbFtcImRjb2RlSU9cIl1bXCJMb25nXCJdKTtcclxuXHJcbn0pKHRoaXMpO1xyXG5cclxufSx7XCJsb25nXCI6M31dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xyXG4vKlxyXG4gQ29weXJpZ2h0IDIwMTMgRGFuaWVsIFdpcnR6IDxkY29kZUBkY29kZS5pbz5cclxuIENvcHlyaWdodCAyMDA5IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcblxyXG4gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG4gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxyXG4gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG4vKipcclxuICogQGxpY2Vuc2UgTG9uZy5qcyAoYykgMjAxMyBEYW5pZWwgV2lydHogPGRjb2RlQGRjb2RlLmlvPlxyXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wXHJcbiAqIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Rjb2RlSU8vTG9uZy5qcyBmb3IgZGV0YWlsc1xyXG4gKi9cclxuKGZ1bmN0aW9uKGdsb2JhbCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RzIGEgNjQgYml0IHR3bydzLWNvbXBsZW1lbnQgaW50ZWdlciwgZ2l2ZW4gaXRzIGxvdyBhbmQgaGlnaCAzMiBiaXQgdmFsdWVzIGFzICpzaWduZWQqIGludGVnZXJzLlxyXG4gICAgICogIFNlZSB0aGUgZnJvbSogZnVuY3Rpb25zIGJlbG93IGZvciBtb3JlIGNvbnZlbmllbnQgd2F5cyBvZiBjb25zdHJ1Y3RpbmcgTG9uZ3MuXHJcbiAgICAgKiBAZXhwb3J0cyBMb25nXHJcbiAgICAgKiBAY2xhc3MgQSBMb25nIGNsYXNzIGZvciByZXByZXNlbnRpbmcgYSA2NCBiaXQgdHdvJ3MtY29tcGxlbWVudCBpbnRlZ2VyIHZhbHVlLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvdyBUaGUgbG93IChzaWduZWQpIDMyIGJpdHMgb2YgdGhlIGxvbmdcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoIFRoZSBoaWdoIChzaWduZWQpIDMyIGJpdHMgb2YgdGhlIGxvbmdcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBgZmFsc2VgIGZvciBzaWduZWRcclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICovXHJcbiAgICB2YXIgTG9uZyA9IGZ1bmN0aW9uKGxvdywgaGlnaCwgdW5zaWduZWQpIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGxvdyAzMiBiaXRzIGFzIGEgc2lnbmVkIHZhbHVlLlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubG93ID0gbG93fDA7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBoaWdoIDMyIGJpdHMgYXMgYSBzaWduZWQgdmFsdWUuXHJcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5oaWdoID0gaGlnaHwwO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdC5cclxuICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy51bnNpZ25lZCA9ICEhdW5zaWduZWQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiBvZiBhIGxvbmcgaXMgdGhlIHR3byBnaXZlbiBzaWduZWQsIDMyLWJpdCB2YWx1ZXMuXHJcbiAgICAvLyBXZSB1c2UgMzItYml0IHBpZWNlcyBiZWNhdXNlIHRoZXNlIGFyZSB0aGUgc2l6ZSBvZiBpbnRlZ2VycyBvbiB3aGljaFxyXG4gICAgLy8gSmF2YXNjcmlwdCBwZXJmb3JtcyBiaXQtb3BlcmF0aW9ucy4gIEZvciBvcGVyYXRpb25zIGxpa2UgYWRkaXRpb24gYW5kXHJcbiAgICAvLyBtdWx0aXBsaWNhdGlvbiwgd2Ugc3BsaXQgZWFjaCBudW1iZXIgaW50byAxNiBiaXQgcGllY2VzLCB3aGljaCBjYW4gZWFzaWx5IGJlXHJcbiAgICAvLyBtdWx0aXBsaWVkIHdpdGhpbiBKYXZhc2NyaXB0J3MgZmxvYXRpbmctcG9pbnQgcmVwcmVzZW50YXRpb24gd2l0aG91dCBvdmVyZmxvd1xyXG4gICAgLy8gb3IgY2hhbmdlIGluIHNpZ24uXHJcbiAgICAvL1xyXG4gICAgLy8gSW4gdGhlIGFsZ29yaXRobXMgYmVsb3csIHdlIGZyZXF1ZW50bHkgcmVkdWNlIHRoZSBuZWdhdGl2ZSBjYXNlIHRvIHRoZVxyXG4gICAgLy8gcG9zaXRpdmUgY2FzZSBieSBuZWdhdGluZyB0aGUgaW5wdXQocykgYW5kIHRoZW4gcG9zdC1wcm9jZXNzaW5nIHRoZSByZXN1bHQuXHJcbiAgICAvLyBOb3RlIHRoYXQgd2UgbXVzdCBBTFdBWVMgY2hlY2sgc3BlY2lhbGx5IHdoZXRoZXIgdGhvc2UgdmFsdWVzIGFyZSBNSU5fVkFMVUVcclxuICAgIC8vICgtMl42MykgYmVjYXVzZSAtTUlOX1ZBTFVFID09IE1JTl9WQUxVRSAoc2luY2UgMl42MyBjYW5ub3QgYmUgcmVwcmVzZW50ZWQgYXNcclxuICAgIC8vIGEgcG9zaXRpdmUgbnVtYmVyLCBpdCBvdmVyZmxvd3MgYmFjayBpbnRvIGEgbmVnYXRpdmUpLiAgTm90IGhhbmRsaW5nIHRoaXNcclxuICAgIC8vIGNhc2Ugd291bGQgb2Z0ZW4gcmVzdWx0IGluIGluZmluaXRlIHJlY3Vyc2lvbi5cclxuICAgIC8vXHJcbiAgICAvLyBDb21tb24gY29uc3RhbnQgdmFsdWVzIFpFUk8sIE9ORSwgTkVHX09ORSwgZXRjLiBhcmUgZGVmaW5lZCBiZWxvdyB0aGUgZnJvbSpcclxuICAgIC8vIG1ldGhvZHMgb24gd2hpY2ggdGhleSBkZXBlbmQuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGUgc3BlY2lmaWVkIG9iamVjdCBpcyBhIExvbmcuXHJcbiAgICAgKiBAcGFyYW0geyp9IG9iaiBPYmplY3RcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLmlzTG9uZyA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgIHJldHVybiAob2JqICYmIG9iaiBpbnN0YW5jZW9mIExvbmcpID09PSB0cnVlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgY2FjaGUgb2YgdGhlIExvbmcgcmVwcmVzZW50YXRpb25zIG9mIHNtYWxsIGludGVnZXIgdmFsdWVzLlxyXG4gICAgICogQHR5cGUgeyFPYmplY3R9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIElOVF9DQUNIRSA9IHt9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSBjYWNoZSBvZiB0aGUgTG9uZyByZXByZXNlbnRhdGlvbnMgb2Ygc21hbGwgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuXHJcbiAgICAgKiBAdHlwZSB7IU9iamVjdH1cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgVUlOVF9DQUNIRSA9IHt9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIExvbmcgcmVwcmVzZW50aW5nIHRoZSBnaXZlbiAzMiBiaXQgaW50ZWdlciB2YWx1ZS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgMzIgYml0IGludGVnZXIgaW4gcXVlc3Rpb25cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBgZmFsc2VgIGZvciBzaWduZWRcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gVGhlIGNvcnJlc3BvbmRpbmcgTG9uZyB2YWx1ZVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLmZyb21JbnQgPSBmdW5jdGlvbih2YWx1ZSwgdW5zaWduZWQpIHtcclxuICAgICAgICB2YXIgb2JqLCBjYWNoZWRPYmo7XHJcbiAgICAgICAgaWYgKCF1bnNpZ25lZCkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIHwgMDtcclxuICAgICAgICAgICAgaWYgKC0xMjggPD0gdmFsdWUgJiYgdmFsdWUgPCAxMjgpIHtcclxuICAgICAgICAgICAgICAgIGNhY2hlZE9iaiA9IElOVF9DQUNIRVt2YWx1ZV07XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FjaGVkT2JqKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWRPYmo7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb2JqID0gbmV3IExvbmcodmFsdWUsIHZhbHVlIDwgMCA/IC0xIDogMCwgZmFsc2UpO1xyXG4gICAgICAgICAgICBpZiAoLTEyOCA8PSB2YWx1ZSAmJiB2YWx1ZSA8IDEyOClcclxuICAgICAgICAgICAgICAgIElOVF9DQUNIRVt2YWx1ZV0gPSBvYmo7XHJcbiAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSA+Pj4gMDtcclxuICAgICAgICAgICAgaWYgKDAgPD0gdmFsdWUgJiYgdmFsdWUgPCAyNTYpIHtcclxuICAgICAgICAgICAgICAgIGNhY2hlZE9iaiA9IFVJTlRfQ0FDSEVbdmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlZE9iailcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkT2JqO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9iaiA9IG5ldyBMb25nKHZhbHVlLCAodmFsdWUgfCAwKSA8IDAgPyAtMSA6IDAsIHRydWUpO1xyXG4gICAgICAgICAgICBpZiAoMCA8PSB2YWx1ZSAmJiB2YWx1ZSA8IDI1NilcclxuICAgICAgICAgICAgICAgIFVJTlRfQ0FDSEVbdmFsdWVdID0gb2JqO1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgTG9uZyByZXByZXNlbnRpbmcgdGhlIGdpdmVuIHZhbHVlLCBwcm92aWRlZCB0aGF0IGl0IGlzIGEgZmluaXRlIG51bWJlci4gT3RoZXJ3aXNlLCB6ZXJvIGlzIHJldHVybmVkLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSBudW1iZXIgaW4gcXVlc3Rpb25cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBgZmFsc2VgIGZvciBzaWduZWRcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gVGhlIGNvcnJlc3BvbmRpbmcgTG9uZyB2YWx1ZVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLmZyb21OdW1iZXIgPSBmdW5jdGlvbih2YWx1ZSwgdW5zaWduZWQpIHtcclxuICAgICAgICB1bnNpZ25lZCA9ICEhdW5zaWduZWQ7XHJcbiAgICAgICAgaWYgKGlzTmFOKHZhbHVlKSB8fCAhaXNGaW5pdGUodmFsdWUpKVxyXG4gICAgICAgICAgICByZXR1cm4gTG9uZy5aRVJPO1xyXG4gICAgICAgIGlmICghdW5zaWduZWQgJiYgdmFsdWUgPD0gLVRXT19QV1JfNjNfREJMKVxyXG4gICAgICAgICAgICByZXR1cm4gTG9uZy5NSU5fVkFMVUU7XHJcbiAgICAgICAgaWYgKCF1bnNpZ25lZCAmJiB2YWx1ZSArIDEgPj0gVFdPX1BXUl82M19EQkwpXHJcbiAgICAgICAgICAgIHJldHVybiBMb25nLk1BWF9WQUxVRTtcclxuICAgICAgICBpZiAodW5zaWduZWQgJiYgdmFsdWUgPj0gVFdPX1BXUl82NF9EQkwpXHJcbiAgICAgICAgICAgIHJldHVybiBMb25nLk1BWF9VTlNJR05FRF9WQUxVRTtcclxuICAgICAgICBpZiAodmFsdWUgPCAwKVxyXG4gICAgICAgICAgICByZXR1cm4gTG9uZy5mcm9tTnVtYmVyKC12YWx1ZSwgdW5zaWduZWQpLm5lZ2F0ZSgpO1xyXG4gICAgICAgIHJldHVybiBuZXcgTG9uZygodmFsdWUgJSBUV09fUFdSXzMyX0RCTCkgfCAwLCAodmFsdWUgLyBUV09fUFdSXzMyX0RCTCkgfCAwLCB1bnNpZ25lZCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIExvbmcgcmVwcmVzZW50aW5nIHRoZSA2NCBiaXQgaW50ZWdlciB0aGF0IGNvbWVzIGJ5IGNvbmNhdGVuYXRpbmcgdGhlIGdpdmVuIGxvdyBhbmQgaGlnaCBiaXRzLiBFYWNoIGlzXHJcbiAgICAgKiAgYXNzdW1lZCB0byB1c2UgMzIgYml0cy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3dCaXRzIFRoZSBsb3cgMzIgYml0c1xyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhpZ2hCaXRzIFRoZSBoaWdoIDMyIGJpdHNcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBgZmFsc2VgIGZvciBzaWduZWRcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gVGhlIGNvcnJlc3BvbmRpbmcgTG9uZyB2YWx1ZVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLmZyb21CaXRzID0gZnVuY3Rpb24obG93Qml0cywgaGlnaEJpdHMsIHVuc2lnbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMb25nKGxvd0JpdHMsIGhpZ2hCaXRzLCB1bnNpZ25lZCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIExvbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIHN0cmluZywgd3JpdHRlbiB1c2luZyB0aGUgc3BlY2lmaWVkIHJhZGl4LlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgdGV4dHVhbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgTG9uZ1xyXG4gICAgICogQHBhcmFtIHsoYm9vbGVhbnxudW1iZXIpPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIGBmYWxzZWAgZm9yIHNpZ25lZFxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSByYWRpeCBUaGUgcmFkaXggaW4gd2hpY2ggdGhlIHRleHQgaXMgd3JpdHRlbiAoMi0zNiksIGRlZmF1bHRzIHRvIDEwXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgTG9uZy5mcm9tU3RyaW5nID0gZnVuY3Rpb24oc3RyLCB1bnNpZ25lZCwgcmFkaXgpIHtcclxuICAgICAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ251bWJlciBmb3JtYXQgZXJyb3I6IGVtcHR5IHN0cmluZycpO1xyXG4gICAgICAgIGlmIChzdHIgPT09IFwiTmFOXCIgfHwgc3RyID09PSBcIkluZmluaXR5XCIgfHwgc3RyID09PSBcIitJbmZpbml0eVwiIHx8IHN0ciA9PT0gXCItSW5maW5pdHlcIilcclxuICAgICAgICAgICAgcmV0dXJuIExvbmcuWkVSTztcclxuICAgICAgICBpZiAodHlwZW9mIHVuc2lnbmVkID09PSAnbnVtYmVyJykgLy8gRm9yIGdvb2cubWF0aC5sb25nIGNvbXBhdGliaWxpdHlcclxuICAgICAgICAgICAgcmFkaXggPSB1bnNpZ25lZCxcclxuICAgICAgICAgICAgdW5zaWduZWQgPSBmYWxzZTtcclxuICAgICAgICByYWRpeCA9IHJhZGl4IHx8IDEwO1xyXG4gICAgICAgIGlmIChyYWRpeCA8IDIgfHwgMzYgPCByYWRpeClcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ3JhZGl4IG91dCBvZiByYW5nZTogJyArIHJhZGl4KTtcclxuXHJcbiAgICAgICAgdmFyIHA7XHJcbiAgICAgICAgaWYgKChwID0gc3RyLmluZGV4T2YoJy0nKSkgPiAwKVxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignbnVtYmVyIGZvcm1hdCBlcnJvcjogaW50ZXJpb3IgXCItXCIgY2hhcmFjdGVyOiAnICsgc3RyKTtcclxuICAgICAgICBlbHNlIGlmIChwID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gTG9uZy5mcm9tU3RyaW5nKHN0ci5zdWJzdHJpbmcoMSksIHVuc2lnbmVkLCByYWRpeCkubmVnYXRlKCk7XHJcblxyXG4gICAgICAgIC8vIERvIHNldmVyYWwgKDgpIGRpZ2l0cyBlYWNoIHRpbWUgdGhyb3VnaCB0aGUgbG9vcCwgc28gYXMgdG9cclxuICAgICAgICAvLyBtaW5pbWl6ZSB0aGUgY2FsbHMgdG8gdGhlIHZlcnkgZXhwZW5zaXZlIGVtdWxhdGVkIGRpdi5cclxuICAgICAgICB2YXIgcmFkaXhUb1Bvd2VyID0gTG9uZy5mcm9tTnVtYmVyKE1hdGgucG93KHJhZGl4LCA4KSk7XHJcblxyXG4gICAgICAgIHZhciByZXN1bHQgPSBMb25nLlpFUk87XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpICs9IDgpIHtcclxuICAgICAgICAgICAgdmFyIHNpemUgPSBNYXRoLm1pbig4LCBzdHIubGVuZ3RoIC0gaSk7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHBhcnNlSW50KHN0ci5zdWJzdHJpbmcoaSwgaSArIHNpemUpLCByYWRpeCk7XHJcbiAgICAgICAgICAgIGlmIChzaXplIDwgOCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBvd2VyID0gTG9uZy5mcm9tTnVtYmVyKE1hdGgucG93KHJhZGl4LCBzaXplKSk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQubXVsdGlwbHkocG93ZXIpLmFkZChMb25nLmZyb21OdW1iZXIodmFsdWUpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5tdWx0aXBseShyYWRpeFRvUG93ZXIpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmFkZChMb25nLmZyb21OdW1iZXIodmFsdWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXN1bHQudW5zaWduZWQgPSB1bnNpZ25lZDtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoZSBzcGVjaWZpZWQgdmFsdWUgdG8gYSBMb25nLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfCF7bG93OiBudW1iZXIsIGhpZ2g6IG51bWJlciwgdW5zaWduZWQ6IGJvb2xlYW59fSB2YWwgVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ31cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgTG9uZy5mcm9tVmFsdWUgPSBmdW5jdGlvbih2YWwpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgIHJldHVybiBMb25nLmZyb21OdW1iZXIodmFsKTtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgIHJldHVybiBMb25nLmZyb21TdHJpbmcodmFsKTtcclxuICAgICAgICBpZiAoTG9uZy5pc0xvbmcodmFsKSlcclxuICAgICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgICAvLyBUaHJvd3MgZm9yIG5vdCBhbiBvYmplY3QgKHVuZGVmaW5lZCwgbnVsbCk6XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMb25nKHZhbC5sb3csIHZhbC5oaWdoLCB2YWwudW5zaWduZWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBOT1RFOiB0aGUgY29tcGlsZXIgc2hvdWxkIGlubGluZSB0aGVzZSBjb25zdGFudCB2YWx1ZXMgYmVsb3cgYW5kIHRoZW4gcmVtb3ZlIHRoZXNlIHZhcmlhYmxlcywgc28gdGhlcmUgc2hvdWxkIGJlXHJcbiAgICAvLyBubyBydW50aW1lIHBlbmFsdHkgZm9yIHRoZXNlLlxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBUV09fUFdSXzE2X0RCTCA9IDEgPDwgMTY7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIFRXT19QV1JfMjRfREJMID0gMSA8PCAyNDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKiBAY29uc3RcclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgVFdPX1BXUl8zMl9EQkwgPSBUV09fUFdSXzE2X0RCTCAqIFRXT19QV1JfMTZfREJMO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBUV09fUFdSXzY0X0RCTCA9IFRXT19QV1JfMzJfREJMICogVFdPX1BXUl8zMl9EQkw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIFRXT19QV1JfNjNfREJMID0gVFdPX1BXUl82NF9EQkwgLyAyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIFRXT19QV1JfMjQgPSBMb25nLmZyb21JbnQoVFdPX1BXUl8yNF9EQkwpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2lnbmVkIHplcm8uXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIExvbmcuWkVSTyA9IExvbmcuZnJvbUludCgwKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVuc2lnbmVkIHplcm8uXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIExvbmcuVVpFUk8gPSBMb25nLmZyb21JbnQoMCwgdHJ1ZSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaWduZWQgb25lLlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLk9ORSA9IExvbmcuZnJvbUludCgxKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVuc2lnbmVkIG9uZS5cclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgTG9uZy5VT05FID0gTG9uZy5mcm9tSW50KDEsIHRydWUpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2lnbmVkIG5lZ2F0aXZlIG9uZS5cclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgTG9uZy5ORUdfT05FID0gTG9uZy5mcm9tSW50KC0xKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1heGltdW0gc2lnbmVkIHZhbHVlLlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLk1BWF9WQUxVRSA9IExvbmcuZnJvbUJpdHMoMHhGRkZGRkZGRnwwLCAweDdGRkZGRkZGfDAsIGZhbHNlKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1heGltdW0gdW5zaWduZWQgdmFsdWUuXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIExvbmcuTUFYX1VOU0lHTkVEX1ZBTFVFID0gTG9uZy5mcm9tQml0cygweEZGRkZGRkZGfDAsIDB4RkZGRkZGRkZ8MCwgdHJ1ZSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNaW5pbXVtIHNpZ25lZCB2YWx1ZS5cclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgTG9uZy5NSU5fVkFMVUUgPSBMb25nLmZyb21CaXRzKDAsIDB4ODAwMDAwMDB8MCwgZmFsc2UpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgdGhlIExvbmcgdG8gYSAzMiBiaXQgaW50ZWdlciwgYXNzdW1pbmcgaXQgaXMgYSAzMiBiaXQgaW50ZWdlci5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIExvbmcucHJvdG90eXBlLnRvSW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudW5zaWduZWQgPyB0aGlzLmxvdyA+Pj4gMCA6IHRoaXMubG93O1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoZSBMb25nIHRvIGEgdGhlIG5lYXJlc3QgZmxvYXRpbmctcG9pbnQgcmVwcmVzZW50YXRpb24gb2YgdGhpcyB2YWx1ZSAoZG91YmxlLCA1MyBiaXQgbWFudGlzc2EpLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgTG9uZy5wcm90b3R5cGUudG9OdW1iZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy51bnNpZ25lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKCh0aGlzLmhpZ2ggPj4+IDApICogVFdPX1BXUl8zMl9EQkwpICsgKHRoaXMubG93ID4+PiAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlnaCAqIFRXT19QV1JfMzJfREJMICsgKHRoaXMubG93ID4+PiAwKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyB0aGUgTG9uZyB0byBhIHN0cmluZyB3cml0dGVuIGluIHRoZSBzcGVjaWZpZWQgcmFkaXguXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IHJhZGl4IFJhZGl4ICgyLTM2KSwgZGVmYXVsdHMgdG8gMTBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKiBAb3ZlcnJpZGVcclxuICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGByYWRpeGAgaXMgb3V0IG9mIHJhbmdlXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIExvbmcucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ocmFkaXgpIHtcclxuICAgICAgICByYWRpeCA9IHJhZGl4IHx8IDEwO1xyXG4gICAgICAgIGlmIChyYWRpeCA8IDIgfHwgMzYgPCByYWRpeClcclxuICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcigncmFkaXggb3V0IG9mIHJhbmdlOiAnICsgcmFkaXgpO1xyXG4gICAgICAgIGlmICh0aGlzLmlzWmVybygpKVxyXG4gICAgICAgICAgICByZXR1cm4gJzAnO1xyXG4gICAgICAgIHZhciByZW07XHJcbiAgICAgICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7IC8vIFVuc2lnbmVkIExvbmdzIGFyZSBuZXZlciBuZWdhdGl2ZVxyXG4gICAgICAgICAgICBpZiAodGhpcy5lcXVhbHMoTG9uZy5NSU5fVkFMVUUpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGNoYW5nZSB0aGUgTG9uZyB2YWx1ZSBiZWZvcmUgaXQgY2FuIGJlIG5lZ2F0ZWQsIHNvIHdlIHJlbW92ZVxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIGJvdHRvbS1tb3N0IGRpZ2l0IGluIHRoaXMgYmFzZSBhbmQgdGhlbiByZWN1cnNlIHRvIGRvIHRoZSByZXN0LlxyXG4gICAgICAgICAgICAgICAgdmFyIHJhZGl4TG9uZyA9IExvbmcuZnJvbU51bWJlcihyYWRpeCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGl2ID0gdGhpcy5kaXYocmFkaXhMb25nKTtcclxuICAgICAgICAgICAgICAgIHJlbSA9IGRpdi5tdWx0aXBseShyYWRpeExvbmcpLnN1YnRyYWN0KHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpdi50b1N0cmluZyhyYWRpeCkgKyByZW0udG9JbnQoKS50b1N0cmluZyhyYWRpeCk7XHJcbiAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICctJyArIHRoaXMubmVnYXRlKCkudG9TdHJpbmcocmFkaXgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRG8gc2V2ZXJhbCAoNikgZGlnaXRzIGVhY2ggdGltZSB0aHJvdWdoIHRoZSBsb29wLCBzbyBhcyB0b1xyXG4gICAgICAgIC8vIG1pbmltaXplIHRoZSBjYWxscyB0byB0aGUgdmVyeSBleHBlbnNpdmUgZW11bGF0ZWQgZGl2LlxyXG4gICAgICAgIHZhciByYWRpeFRvUG93ZXIgPSBMb25nLmZyb21OdW1iZXIoTWF0aC5wb3cocmFkaXgsIDYpLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgICAgICByZW0gPSB0aGlzO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSAnJztcclxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICB2YXIgcmVtRGl2ID0gcmVtLmRpdihyYWRpeFRvUG93ZXIpLFxyXG4gICAgICAgICAgICAgICAgaW50dmFsID0gcmVtLnN1YnRyYWN0KHJlbURpdi5tdWx0aXBseShyYWRpeFRvUG93ZXIpKS50b0ludCgpID4+PiAwLFxyXG4gICAgICAgICAgICAgICAgZGlnaXRzID0gaW50dmFsLnRvU3RyaW5nKHJhZGl4KTtcclxuICAgICAgICAgICAgcmVtID0gcmVtRGl2O1xyXG4gICAgICAgICAgICBpZiAocmVtLmlzWmVybygpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpZ2l0cyArIHJlc3VsdDtcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoZGlnaXRzLmxlbmd0aCA8IDYpXHJcbiAgICAgICAgICAgICAgICAgICAgZGlnaXRzID0gJzAnICsgZGlnaXRzO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gJycgKyBkaWdpdHMgKyByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgaGlnaCAzMiBiaXRzIGFzIGEgc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBTaWduZWQgaGlnaCBiaXRzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIExvbmcucHJvdG90eXBlLmdldEhpZ2hCaXRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlnaDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBoaWdoIDMyIGJpdHMgYXMgYW4gdW5zaWduZWQgaW50ZWdlci5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFVuc2lnbmVkIGhpZ2ggYml0c1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLnByb3RvdHlwZS5nZXRIaWdoQml0c1Vuc2lnbmVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlnaCA+Pj4gMDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBsb3cgMzIgYml0cyBhcyBhIHNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gU2lnbmVkIGxvdyBiaXRzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIExvbmcucHJvdG90eXBlLmdldExvd0JpdHMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb3c7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgbG93IDMyIGJpdHMgYXMgYW4gdW5zaWduZWQgaW50ZWdlci5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFVuc2lnbmVkIGxvdyBiaXRzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIExvbmcucHJvdG90eXBlLmdldExvd0JpdHNVbnNpZ25lZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxvdyA+Pj4gMDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgYml0cyBuZWVkZWQgdG8gcmVwcmVzZW50IHRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiB0aGlzIExvbmcuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLnByb3RvdHlwZS5nZXROdW1CaXRzQWJzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSAvLyBVbnNpZ25lZCBMb25ncyBhcmUgbmV2ZXIgbmVnYXRpdmVcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXF1YWxzKExvbmcuTUlOX1ZBTFVFKSA/IDY0IDogdGhpcy5uZWdhdGUoKS5nZXROdW1CaXRzQWJzKCk7XHJcbiAgICAgICAgdmFyIHZhbCA9IHRoaXMuaGlnaCAhPSAwID8gdGhpcy5oaWdoIDogdGhpcy5sb3c7XHJcbiAgICAgICAgZm9yICh2YXIgYml0ID0gMzE7IGJpdCA+IDA7IGJpdC0tKVxyXG4gICAgICAgICAgICBpZiAoKHZhbCAmICgxIDw8IGJpdCkpICE9IDApXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICByZXR1cm4gdGhpcy5oaWdoICE9IDAgPyBiaXQgKyAzMyA6IGJpdCArIDE7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZXF1YWxzIHplcm8uXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgTG9uZy5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlnaCA9PT0gMCAmJiB0aGlzLmxvdyA9PT0gMDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBuZWdhdGl2ZS5cclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLnByb3RvdHlwZS5pc05lZ2F0aXZlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLnVuc2lnbmVkICYmIHRoaXMuaGlnaCA8IDA7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgcG9zaXRpdmUuXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgTG9uZy5wcm90b3R5cGUuaXNQb3NpdGl2ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnVuc2lnbmVkIHx8IHRoaXMuaGlnaCA+PSAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIG9kZC5cclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5sb3cgJiAxKSA9PT0gMTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBldmVuLlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIExvbmcucHJvdG90eXBlLmlzRXZlbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5sb3cgJiAxKSA9PT0gMDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBlcXVhbHMgdGhlIHNwZWNpZmllZCdzLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIExvbmcucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKCFMb25nLmlzTG9uZyhvdGhlcikpXHJcbiAgICAgICAgICAgIG90aGVyID0gTG9uZy5mcm9tVmFsdWUob3RoZXIpO1xyXG4gICAgICAgIGlmICh0aGlzLnVuc2lnbmVkICE9PSBvdGhlci51bnNpZ25lZCAmJiAodGhpcy5oaWdoID4+PiAzMSkgPT09IDEgJiYgKG90aGVyLmhpZ2ggPj4+IDMxKSA9PT0gMSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhpZ2ggPT09IG90aGVyLmhpZ2ggJiYgdGhpcy5sb3cgPT09IG90aGVyLmxvdztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBkaWZmZXJzIGZyb20gdGhlIHNwZWNpZmllZCdzLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIExvbmcucHJvdG90eXBlLm5vdEVxdWFscyA9IGZ1bmN0aW9uKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKCFMb25nLmlzTG9uZyhvdGhlcikpXHJcbiAgICAgICAgICAgIG90aGVyID0gTG9uZy5mcm9tVmFsdWUob3RoZXIpO1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5lcXVhbHMob3RoZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGxlc3MgdGhhbiB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgTG9uZy5wcm90b3R5cGUubGVzc1RoYW4gPSBmdW5jdGlvbihvdGhlcikge1xyXG4gICAgICAgIGlmICghTG9uZy5pc0xvbmcob3RoZXIpKVxyXG4gICAgICAgICAgICBvdGhlciA9IExvbmcuZnJvbVZhbHVlKG90aGVyKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlKG90aGVyKSA8IDA7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRoZSBzcGVjaWZpZWQncy5cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLnByb3RvdHlwZS5sZXNzVGhhbk9yRXF1YWwgPSBmdW5jdGlvbihvdGhlcikge1xyXG4gICAgICAgIGlmICghTG9uZy5pc0xvbmcob3RoZXIpKVxyXG4gICAgICAgICAgICBvdGhlciA9IExvbmcuZnJvbVZhbHVlKG90aGVyKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlKG90aGVyKSA8PSAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgTG9uZy5wcm90b3R5cGUuZ3JlYXRlclRoYW4gPSBmdW5jdGlvbihvdGhlcikge1xyXG4gICAgICAgIGlmICghTG9uZy5pc0xvbmcob3RoZXIpKVxyXG4gICAgICAgICAgICBvdGhlciA9IExvbmcuZnJvbVZhbHVlKG90aGVyKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlKG90aGVyKSA+IDA7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRoZSBzcGVjaWZpZWQncy5cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLnByb3RvdHlwZS5ncmVhdGVyVGhhbk9yRXF1YWwgPSBmdW5jdGlvbihvdGhlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmUob3RoZXIpID49IDA7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29tcGFyZXMgdGhpcyBMb25nJ3MgdmFsdWUgd2l0aCB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSAwIGlmIHRoZXkgYXJlIHRoZSBzYW1lLCAxIGlmIHRoZSB0aGlzIGlzIGdyZWF0ZXIgYW5kIC0xXHJcbiAgICAgKiAgaWYgdGhlIGdpdmVuIG9uZSBpcyBncmVhdGVyXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIExvbmcucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbihvdGhlcikge1xyXG4gICAgICAgIGlmICh0aGlzLmVxdWFscyhvdGhlcikpXHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIHZhciB0aGlzTmVnID0gdGhpcy5pc05lZ2F0aXZlKCksXHJcbiAgICAgICAgICAgIG90aGVyTmVnID0gb3RoZXIuaXNOZWdhdGl2ZSgpO1xyXG4gICAgICAgIGlmICh0aGlzTmVnICYmICFvdGhlck5lZylcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIGlmICghdGhpc05lZyAmJiBvdGhlck5lZylcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgLy8gQXQgdGhpcyBwb2ludCB0aGUgc2lnbiBiaXRzIGFyZSB0aGUgc2FtZVxyXG4gICAgICAgIGlmICghdGhpcy51bnNpZ25lZClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3VidHJhY3Qob3RoZXIpLmlzTmVnYXRpdmUoKSA/IC0xIDogMTtcclxuICAgICAgICAvLyBCb3RoIGFyZSBwb3NpdGl2ZSBpZiBhdCBsZWFzdCBvbmUgaXMgdW5zaWduZWRcclxuICAgICAgICByZXR1cm4gKG90aGVyLmhpZ2ggPj4+IDApID4gKHRoaXMuaGlnaCA+Pj4gMCkgfHwgKG90aGVyLmhpZ2ggPT09IHRoaXMuaGlnaCAmJiAob3RoZXIubG93ID4+PiAwKSA+ICh0aGlzLmxvdyA+Pj4gMCkpID8gLTEgOiAxO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE5lZ2F0ZXMgdGhpcyBMb25nJ3MgdmFsdWUuXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IE5lZ2F0ZWQgTG9uZ1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLnByb3RvdHlwZS5uZWdhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRoaXMudW5zaWduZWQgJiYgdGhpcy5lcXVhbHMoTG9uZy5NSU5fVkFMVUUpKVxyXG4gICAgICAgICAgICByZXR1cm4gTG9uZy5NSU5fVkFMVUU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm90KCkuYWRkKExvbmcuT05FKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBzdW0gb2YgdGhpcyBhbmQgdGhlIHNwZWNpZmllZCBMb25nLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBhZGRlbmQgQWRkZW5kXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFN1bVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihhZGRlbmQpIHtcclxuICAgICAgICBpZiAoIUxvbmcuaXNMb25nKGFkZGVuZCkpXHJcbiAgICAgICAgICAgIGFkZGVuZCA9IExvbmcuZnJvbVZhbHVlKGFkZGVuZCk7XHJcblxyXG4gICAgICAgIC8vIERpdmlkZSBlYWNoIG51bWJlciBpbnRvIDQgY2h1bmtzIG9mIDE2IGJpdHMsIGFuZCB0aGVuIHN1bSB0aGUgY2h1bmtzLlxyXG5cclxuICAgICAgICB2YXIgYTQ4ID0gdGhpcy5oaWdoID4+PiAxNjtcclxuICAgICAgICB2YXIgYTMyID0gdGhpcy5oaWdoICYgMHhGRkZGO1xyXG4gICAgICAgIHZhciBhMTYgPSB0aGlzLmxvdyA+Pj4gMTY7XHJcbiAgICAgICAgdmFyIGEwMCA9IHRoaXMubG93ICYgMHhGRkZGO1xyXG5cclxuICAgICAgICB2YXIgYjQ4ID0gYWRkZW5kLmhpZ2ggPj4+IDE2O1xyXG4gICAgICAgIHZhciBiMzIgPSBhZGRlbmQuaGlnaCAmIDB4RkZGRjtcclxuICAgICAgICB2YXIgYjE2ID0gYWRkZW5kLmxvdyA+Pj4gMTY7XHJcbiAgICAgICAgdmFyIGIwMCA9IGFkZGVuZC5sb3cgJiAweEZGRkY7XHJcblxyXG4gICAgICAgIHZhciBjNDggPSAwLCBjMzIgPSAwLCBjMTYgPSAwLCBjMDAgPSAwO1xyXG4gICAgICAgIGMwMCArPSBhMDAgKyBiMDA7XHJcbiAgICAgICAgYzE2ICs9IGMwMCA+Pj4gMTY7XHJcbiAgICAgICAgYzAwICY9IDB4RkZGRjtcclxuICAgICAgICBjMTYgKz0gYTE2ICsgYjE2O1xyXG4gICAgICAgIGMzMiArPSBjMTYgPj4+IDE2O1xyXG4gICAgICAgIGMxNiAmPSAweEZGRkY7XHJcbiAgICAgICAgYzMyICs9IGEzMiArIGIzMjtcclxuICAgICAgICBjNDggKz0gYzMyID4+PiAxNjtcclxuICAgICAgICBjMzIgJj0gMHhGRkZGO1xyXG4gICAgICAgIGM0OCArPSBhNDggKyBiNDg7XHJcbiAgICAgICAgYzQ4ICY9IDB4RkZGRjtcclxuICAgICAgICByZXR1cm4gTG9uZy5mcm9tQml0cygoYzE2IDw8IDE2KSB8IGMwMCwgKGM0OCA8PCAxNikgfCBjMzIsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGRpZmZlcmVuY2Ugb2YgdGhpcyBhbmQgdGhlIHNwZWNpZmllZCBMb25nLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBzdWJ0cmFoZW5kIFN1YnRyYWhlbmRcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gRGlmZmVyZW5jZVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLnByb3RvdHlwZS5zdWJ0cmFjdCA9IGZ1bmN0aW9uKHN1YnRyYWhlbmQpIHtcclxuICAgICAgICBpZiAoIUxvbmcuaXNMb25nKHN1YnRyYWhlbmQpKVxyXG4gICAgICAgICAgICBzdWJ0cmFoZW5kID0gTG9uZy5mcm9tVmFsdWUoc3VidHJhaGVuZCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKHN1YnRyYWhlbmQubmVnYXRlKCkpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIHByb2R1Y3Qgb2YgdGhpcyBhbmQgdGhlIHNwZWNpZmllZCBMb25nLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBtdWx0aXBsaWVyIE11bHRpcGxpZXJcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gUHJvZHVjdFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLnByb3RvdHlwZS5tdWx0aXBseSA9IGZ1bmN0aW9uKG11bHRpcGxpZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1plcm8oKSlcclxuICAgICAgICAgICAgcmV0dXJuIExvbmcuWkVSTztcclxuICAgICAgICBpZiAoIUxvbmcuaXNMb25nKG11bHRpcGxpZXIpKVxyXG4gICAgICAgICAgICBtdWx0aXBsaWVyID0gTG9uZy5mcm9tVmFsdWUobXVsdGlwbGllcik7XHJcbiAgICAgICAgaWYgKG11bHRpcGxpZXIuaXNaZXJvKCkpXHJcbiAgICAgICAgICAgIHJldHVybiBMb25nLlpFUk87XHJcbiAgICAgICAgaWYgKHRoaXMuZXF1YWxzKExvbmcuTUlOX1ZBTFVFKSlcclxuICAgICAgICAgICAgcmV0dXJuIG11bHRpcGxpZXIuaXNPZGQoKSA/IExvbmcuTUlOX1ZBTFVFIDogTG9uZy5aRVJPO1xyXG4gICAgICAgIGlmIChtdWx0aXBsaWVyLmVxdWFscyhMb25nLk1JTl9WQUxVRSkpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzT2RkKCkgPyBMb25nLk1JTl9WQUxVRSA6IExvbmcuWkVSTztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgIGlmIChtdWx0aXBsaWVyLmlzTmVnYXRpdmUoKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5lZ2F0ZSgpLm11bHRpcGx5KG11bHRpcGxpZXIubmVnYXRlKCkpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uZWdhdGUoKS5tdWx0aXBseShtdWx0aXBsaWVyKS5uZWdhdGUoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG11bHRpcGxpZXIuaXNOZWdhdGl2ZSgpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tdWx0aXBseShtdWx0aXBsaWVyLm5lZ2F0ZSgpKS5uZWdhdGUoKTtcclxuXHJcbiAgICAgICAgLy8gSWYgYm90aCBsb25ncyBhcmUgc21hbGwsIHVzZSBmbG9hdCBtdWx0aXBsaWNhdGlvblxyXG4gICAgICAgIGlmICh0aGlzLmxlc3NUaGFuKFRXT19QV1JfMjQpICYmIG11bHRpcGxpZXIubGVzc1RoYW4oVFdPX1BXUl8yNCkpXHJcbiAgICAgICAgICAgIHJldHVybiBMb25nLmZyb21OdW1iZXIodGhpcy50b051bWJlcigpICogbXVsdGlwbGllci50b051bWJlcigpLCB0aGlzLnVuc2lnbmVkKTtcclxuXHJcbiAgICAgICAgLy8gRGl2aWRlIGVhY2ggbG9uZyBpbnRvIDQgY2h1bmtzIG9mIDE2IGJpdHMsIGFuZCB0aGVuIGFkZCB1cCA0eDQgcHJvZHVjdHMuXHJcbiAgICAgICAgLy8gV2UgY2FuIHNraXAgcHJvZHVjdHMgdGhhdCB3b3VsZCBvdmVyZmxvdy5cclxuXHJcbiAgICAgICAgdmFyIGE0OCA9IHRoaXMuaGlnaCA+Pj4gMTY7XHJcbiAgICAgICAgdmFyIGEzMiA9IHRoaXMuaGlnaCAmIDB4RkZGRjtcclxuICAgICAgICB2YXIgYTE2ID0gdGhpcy5sb3cgPj4+IDE2O1xyXG4gICAgICAgIHZhciBhMDAgPSB0aGlzLmxvdyAmIDB4RkZGRjtcclxuXHJcbiAgICAgICAgdmFyIGI0OCA9IG11bHRpcGxpZXIuaGlnaCA+Pj4gMTY7XHJcbiAgICAgICAgdmFyIGIzMiA9IG11bHRpcGxpZXIuaGlnaCAmIDB4RkZGRjtcclxuICAgICAgICB2YXIgYjE2ID0gbXVsdGlwbGllci5sb3cgPj4+IDE2O1xyXG4gICAgICAgIHZhciBiMDAgPSBtdWx0aXBsaWVyLmxvdyAmIDB4RkZGRjtcclxuXHJcbiAgICAgICAgdmFyIGM0OCA9IDAsIGMzMiA9IDAsIGMxNiA9IDAsIGMwMCA9IDA7XHJcbiAgICAgICAgYzAwICs9IGEwMCAqIGIwMDtcclxuICAgICAgICBjMTYgKz0gYzAwID4+PiAxNjtcclxuICAgICAgICBjMDAgJj0gMHhGRkZGO1xyXG4gICAgICAgIGMxNiArPSBhMTYgKiBiMDA7XHJcbiAgICAgICAgYzMyICs9IGMxNiA+Pj4gMTY7XHJcbiAgICAgICAgYzE2ICY9IDB4RkZGRjtcclxuICAgICAgICBjMTYgKz0gYTAwICogYjE2O1xyXG4gICAgICAgIGMzMiArPSBjMTYgPj4+IDE2O1xyXG4gICAgICAgIGMxNiAmPSAweEZGRkY7XHJcbiAgICAgICAgYzMyICs9IGEzMiAqIGIwMDtcclxuICAgICAgICBjNDggKz0gYzMyID4+PiAxNjtcclxuICAgICAgICBjMzIgJj0gMHhGRkZGO1xyXG4gICAgICAgIGMzMiArPSBhMTYgKiBiMTY7XHJcbiAgICAgICAgYzQ4ICs9IGMzMiA+Pj4gMTY7XHJcbiAgICAgICAgYzMyICY9IDB4RkZGRjtcclxuICAgICAgICBjMzIgKz0gYTAwICogYjMyO1xyXG4gICAgICAgIGM0OCArPSBjMzIgPj4+IDE2O1xyXG4gICAgICAgIGMzMiAmPSAweEZGRkY7XHJcbiAgICAgICAgYzQ4ICs9IGE0OCAqIGIwMCArIGEzMiAqIGIxNiArIGExNiAqIGIzMiArIGEwMCAqIGI0ODtcclxuICAgICAgICBjNDggJj0gMHhGRkZGO1xyXG4gICAgICAgIHJldHVybiBMb25nLmZyb21CaXRzKChjMTYgPDwgMTYpIHwgYzAwLCAoYzQ4IDw8IDE2KSB8IGMzMiwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGlzIExvbmcgZGl2aWRlZCBieSB0aGUgc3BlY2lmaWVkLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBkaXZpc29yIERpdmlzb3JcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gUXVvdGllbnRcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgTG9uZy5wcm90b3R5cGUuZGl2ID0gZnVuY3Rpb24oZGl2aXNvcikge1xyXG4gICAgICAgIGlmICghTG9uZy5pc0xvbmcoZGl2aXNvcikpXHJcbiAgICAgICAgICAgIGRpdmlzb3IgPSBMb25nLmZyb21WYWx1ZShkaXZpc29yKTtcclxuICAgICAgICBpZiAoZGl2aXNvci5pc1plcm8oKSlcclxuICAgICAgICAgICAgdGhyb3cobmV3IEVycm9yKCdkaXZpc2lvbiBieSB6ZXJvJykpO1xyXG4gICAgICAgIGlmICh0aGlzLmlzWmVybygpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy51bnNpZ25lZCA/IExvbmcuVVpFUk8gOiBMb25nLlpFUk87XHJcbiAgICAgICAgdmFyIGFwcHJveCwgcmVtLCByZXM7XHJcbiAgICAgICAgaWYgKHRoaXMuZXF1YWxzKExvbmcuTUlOX1ZBTFVFKSkge1xyXG4gICAgICAgICAgICBpZiAoZGl2aXNvci5lcXVhbHMoTG9uZy5PTkUpIHx8IGRpdmlzb3IuZXF1YWxzKExvbmcuTkVHX09ORSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTG9uZy5NSU5fVkFMVUU7ICAvLyByZWNhbGwgdGhhdCAtTUlOX1ZBTFVFID09IE1JTl9WQUxVRVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkaXZpc29yLmVxdWFscyhMb25nLk1JTl9WQUxVRSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTG9uZy5PTkU7XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgd2UgaGF2ZSB8b3RoZXJ8ID49IDIsIHNvIHx0aGlzL290aGVyfCA8IHxNSU5fVkFMVUV8LlxyXG4gICAgICAgICAgICAgICAgdmFyIGhhbGZUaGlzID0gdGhpcy5zaGlmdFJpZ2h0KDEpO1xyXG4gICAgICAgICAgICAgICAgYXBwcm94ID0gaGFsZlRoaXMuZGl2KGRpdmlzb3IpLnNoaWZ0TGVmdCgxKTtcclxuICAgICAgICAgICAgICAgIGlmIChhcHByb3guZXF1YWxzKExvbmcuWkVSTykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGl2aXNvci5pc05lZ2F0aXZlKCkgPyBMb25nLk9ORSA6IExvbmcuTkVHX09ORTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtID0gdGhpcy5zdWJ0cmFjdChkaXZpc29yLm11bHRpcGx5KGFwcHJveCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IGFwcHJveC5hZGQocmVtLmRpdihkaXZpc29yKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoZGl2aXNvci5lcXVhbHMoTG9uZy5NSU5fVkFMVUUpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy51bnNpZ25lZCA/IExvbmcuVVpFUk8gOiBMb25nLlpFUk87XHJcbiAgICAgICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgIGlmIChkaXZpc29yLmlzTmVnYXRpdmUoKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5lZ2F0ZSgpLmRpdihkaXZpc29yLm5lZ2F0ZSgpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmVnYXRlKCkuZGl2KGRpdmlzb3IpLm5lZ2F0ZSgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZGl2aXNvci5pc05lZ2F0aXZlKCkpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRpdihkaXZpc29yLm5lZ2F0ZSgpKS5uZWdhdGUoKTtcclxuXHJcbiAgICAgICAgLy8gUmVwZWF0IHRoZSBmb2xsb3dpbmcgdW50aWwgdGhlIHJlbWFpbmRlciBpcyBsZXNzIHRoYW4gb3RoZXI6ICBmaW5kIGFcclxuICAgICAgICAvLyBmbG9hdGluZy1wb2ludCB0aGF0IGFwcHJveGltYXRlcyByZW1haW5kZXIgLyBvdGhlciAqZnJvbSBiZWxvdyosIGFkZCB0aGlzXHJcbiAgICAgICAgLy8gaW50byB0aGUgcmVzdWx0LCBhbmQgc3VidHJhY3QgaXQgZnJvbSB0aGUgcmVtYWluZGVyLiAgSXQgaXMgY3JpdGljYWwgdGhhdFxyXG4gICAgICAgIC8vIHRoZSBhcHByb3hpbWF0ZSB2YWx1ZSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHJlYWwgdmFsdWUgc28gdGhhdCB0aGVcclxuICAgICAgICAvLyByZW1haW5kZXIgbmV2ZXIgYmVjb21lcyBuZWdhdGl2ZS5cclxuICAgICAgICByZXMgPSBMb25nLlpFUk87XHJcbiAgICAgICAgcmVtID0gdGhpcztcclxuICAgICAgICB3aGlsZSAocmVtLmdyZWF0ZXJUaGFuT3JFcXVhbChkaXZpc29yKSkge1xyXG4gICAgICAgICAgICAvLyBBcHByb3hpbWF0ZSB0aGUgcmVzdWx0IG9mIGRpdmlzaW9uLiBUaGlzIG1heSBiZSBhIGxpdHRsZSBncmVhdGVyIG9yXHJcbiAgICAgICAgICAgIC8vIHNtYWxsZXIgdGhhbiB0aGUgYWN0dWFsIHZhbHVlLlxyXG4gICAgICAgICAgICBhcHByb3ggPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKHJlbS50b051bWJlcigpIC8gZGl2aXNvci50b051bWJlcigpKSk7XHJcblxyXG4gICAgICAgICAgICAvLyBXZSB3aWxsIHR3ZWFrIHRoZSBhcHByb3hpbWF0ZSByZXN1bHQgYnkgY2hhbmdpbmcgaXQgaW4gdGhlIDQ4LXRoIGRpZ2l0IG9yXHJcbiAgICAgICAgICAgIC8vIHRoZSBzbWFsbGVzdCBub24tZnJhY3Rpb25hbCBkaWdpdCwgd2hpY2hldmVyIGlzIGxhcmdlci5cclxuICAgICAgICAgICAgdmFyIGxvZzIgPSBNYXRoLmNlaWwoTWF0aC5sb2coYXBwcm94KSAvIE1hdGguTE4yKSxcclxuICAgICAgICAgICAgICAgIGRlbHRhID0gKGxvZzIgPD0gNDgpID8gMSA6IE1hdGgucG93KDIsIGxvZzIgLSA0OCksXHJcblxyXG4gICAgICAgICAgICAvLyBEZWNyZWFzZSB0aGUgYXBwcm94aW1hdGlvbiB1bnRpbCBpdCBpcyBzbWFsbGVyIHRoYW4gdGhlIHJlbWFpbmRlci4gIE5vdGVcclxuICAgICAgICAgICAgLy8gdGhhdCBpZiBpdCBpcyB0b28gbGFyZ2UsIHRoZSBwcm9kdWN0IG92ZXJmbG93cyBhbmQgaXMgbmVnYXRpdmUuXHJcbiAgICAgICAgICAgICAgICBhcHByb3hSZXMgPSBMb25nLmZyb21OdW1iZXIoYXBwcm94KSxcclxuICAgICAgICAgICAgICAgIGFwcHJveFJlbSA9IGFwcHJveFJlcy5tdWx0aXBseShkaXZpc29yKTtcclxuICAgICAgICAgICAgd2hpbGUgKGFwcHJveFJlbS5pc05lZ2F0aXZlKCkgfHwgYXBwcm94UmVtLmdyZWF0ZXJUaGFuKHJlbSkpIHtcclxuICAgICAgICAgICAgICAgIGFwcHJveCAtPSBkZWx0YTtcclxuICAgICAgICAgICAgICAgIGFwcHJveFJlcyA9IExvbmcuZnJvbU51bWJlcihhcHByb3gsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgICAgICAgICAgICAgYXBwcm94UmVtID0gYXBwcm94UmVzLm11bHRpcGx5KGRpdmlzb3IpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBXZSBrbm93IHRoZSBhbnN3ZXIgY2FuJ3QgYmUgemVyby4uLiBhbmQgYWN0dWFsbHksIHplcm8gd291bGQgY2F1c2VcclxuICAgICAgICAgICAgLy8gaW5maW5pdGUgcmVjdXJzaW9uIHNpbmNlIHdlIHdvdWxkIG1ha2Ugbm8gcHJvZ3Jlc3MuXHJcbiAgICAgICAgICAgIGlmIChhcHByb3hSZXMuaXNaZXJvKCkpXHJcbiAgICAgICAgICAgICAgICBhcHByb3hSZXMgPSBMb25nLk9ORTtcclxuXHJcbiAgICAgICAgICAgIHJlcyA9IHJlcy5hZGQoYXBwcm94UmVzKTtcclxuICAgICAgICAgICAgcmVtID0gcmVtLnN1YnRyYWN0KGFwcHJveFJlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGlzIExvbmcgbW9kdWxvIHRoZSBzcGVjaWZpZWQuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IGRpdmlzb3IgRGl2aXNvclxyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBSZW1haW5kZXJcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgTG9uZy5wcm90b3R5cGUubW9kdWxvID0gZnVuY3Rpb24oZGl2aXNvcikge1xyXG4gICAgICAgIGlmICghTG9uZy5pc0xvbmcoZGl2aXNvcikpXHJcbiAgICAgICAgICAgIGRpdmlzb3IgPSBMb25nLmZyb21WYWx1ZShkaXZpc29yKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdWJ0cmFjdCh0aGlzLmRpdihkaXZpc29yKS5tdWx0aXBseShkaXZpc29yKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgYml0d2lzZSBOT1Qgb2YgdGhpcyBMb25nLlxyXG4gICAgICogQHJldHVybnMgeyFMb25nfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLnByb3RvdHlwZS5ub3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gTG9uZy5mcm9tQml0cyh+dGhpcy5sb3csIH50aGlzLmhpZ2gsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGJpdHdpc2UgQU5EIG9mIHRoaXMgTG9uZyBhbmQgdGhlIHNwZWNpZmllZC5cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgTG9uZ1xyXG4gICAgICogQHJldHVybnMgeyFMb25nfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLnByb3RvdHlwZS5hbmQgPSBmdW5jdGlvbihvdGhlcikge1xyXG4gICAgICAgIGlmICghTG9uZy5pc0xvbmcob3RoZXIpKVxyXG4gICAgICAgICAgICBvdGhlciA9IExvbmcuZnJvbVZhbHVlKG90aGVyKTtcclxuICAgICAgICByZXR1cm4gTG9uZy5mcm9tQml0cyh0aGlzLmxvdyAmIG90aGVyLmxvdywgdGhpcy5oaWdoICYgb3RoZXIuaGlnaCwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgYml0d2lzZSBPUiBvZiB0aGlzIExvbmcgYW5kIHRoZSBzcGVjaWZpZWQuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIExvbmdcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ31cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgTG9uZy5wcm90b3R5cGUub3IgPSBmdW5jdGlvbihvdGhlcikge1xyXG4gICAgICAgIGlmICghTG9uZy5pc0xvbmcob3RoZXIpKVxyXG4gICAgICAgICAgICBvdGhlciA9IExvbmcuZnJvbVZhbHVlKG90aGVyKTtcclxuICAgICAgICByZXR1cm4gTG9uZy5mcm9tQml0cyh0aGlzLmxvdyB8IG90aGVyLmxvdywgdGhpcy5oaWdoIHwgb3RoZXIuaGlnaCwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgYml0d2lzZSBYT1Igb2YgdGhpcyBMb25nIGFuZCB0aGUgZ2l2ZW4gb25lLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciBMb25nXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIExvbmcucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKCFMb25nLmlzTG9uZyhvdGhlcikpXHJcbiAgICAgICAgICAgIG90aGVyID0gTG9uZy5mcm9tVmFsdWUob3RoZXIpO1xyXG4gICAgICAgIHJldHVybiBMb25nLmZyb21CaXRzKHRoaXMubG93IF4gb3RoZXIubG93LCB0aGlzLmhpZ2ggXiBvdGhlci5oaWdoLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgc2hpZnRlZCB0byB0aGUgbGVmdCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIExvbmcucHJvdG90eXBlLnNoaWZ0TGVmdCA9IGZ1bmN0aW9uKG51bUJpdHMpIHtcclxuICAgICAgICBpZiAoTG9uZy5pc0xvbmcobnVtQml0cykpXHJcbiAgICAgICAgICAgIG51bUJpdHMgPSBudW1CaXRzLnRvSW50KCk7XHJcbiAgICAgICAgaWYgKChudW1CaXRzICY9IDYzKSA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgZWxzZSBpZiAobnVtQml0cyA8IDMyKVxyXG4gICAgICAgICAgICByZXR1cm4gTG9uZy5mcm9tQml0cyh0aGlzLmxvdyA8PCBudW1CaXRzLCAodGhpcy5oaWdoIDw8IG51bUJpdHMpIHwgKHRoaXMubG93ID4+PiAoMzIgLSBudW1CaXRzKSksIHRoaXMudW5zaWduZWQpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIExvbmcuZnJvbUJpdHMoMCwgdGhpcy5sb3cgPDwgKG51bUJpdHMgLSAzMiksIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBhcml0aG1ldGljYWxseSBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIExvbmcucHJvdG90eXBlLnNoaWZ0UmlnaHQgPSBmdW5jdGlvbihudW1CaXRzKSB7XHJcbiAgICAgICAgaWYgKExvbmcuaXNMb25nKG51bUJpdHMpKVxyXG4gICAgICAgICAgICBudW1CaXRzID0gbnVtQml0cy50b0ludCgpO1xyXG4gICAgICAgIGlmICgobnVtQml0cyAmPSA2MykgPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIGVsc2UgaWYgKG51bUJpdHMgPCAzMilcclxuICAgICAgICAgICAgcmV0dXJuIExvbmcuZnJvbUJpdHMoKHRoaXMubG93ID4+PiBudW1CaXRzKSB8ICh0aGlzLmhpZ2ggPDwgKDMyIC0gbnVtQml0cykpLCB0aGlzLmhpZ2ggPj4gbnVtQml0cywgdGhpcy51bnNpZ25lZCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gTG9uZy5mcm9tQml0cyh0aGlzLmhpZ2ggPj4gKG51bUJpdHMgLSAzMiksIHRoaXMuaGlnaCA+PSAwID8gMCA6IC0xLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgbG9naWNhbGx5IHNoaWZ0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBTaGlmdGVkIExvbmdcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgTG9uZy5wcm90b3R5cGUuc2hpZnRSaWdodFVuc2lnbmVkID0gZnVuY3Rpb24obnVtQml0cykge1xyXG4gICAgICAgIGlmIChMb25nLmlzTG9uZyhudW1CaXRzKSlcclxuICAgICAgICAgICAgbnVtQml0cyA9IG51bUJpdHMudG9JbnQoKTtcclxuICAgICAgICBudW1CaXRzICY9IDYzO1xyXG4gICAgICAgIGlmIChudW1CaXRzID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGhpZ2ggPSB0aGlzLmhpZ2g7XHJcbiAgICAgICAgICAgIGlmIChudW1CaXRzIDwgMzIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsb3cgPSB0aGlzLmxvdztcclxuICAgICAgICAgICAgICAgIHJldHVybiBMb25nLmZyb21CaXRzKChsb3cgPj4+IG51bUJpdHMpIHwgKGhpZ2ggPDwgKDMyIC0gbnVtQml0cykpLCBoaWdoID4+PiBudW1CaXRzLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1CaXRzID09PSAzMilcclxuICAgICAgICAgICAgICAgIHJldHVybiBMb25nLmZyb21CaXRzKGhpZ2gsIDAsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTG9uZy5mcm9tQml0cyhoaWdoID4+PiAobnVtQml0cyAtIDMyKSwgMCwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoaXMgTG9uZyB0byBzaWduZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFNpZ25lZCBsb25nXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIExvbmcucHJvdG90eXBlLnRvU2lnbmVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnVuc2lnbmVkKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IExvbmcodGhpcy5sb3csIHRoaXMuaGlnaCwgZmFsc2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoaXMgTG9uZyB0byB1bnNpZ25lZC5cclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gVW5zaWduZWQgbG9uZ1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBMb25nLnByb3RvdHlwZS50b1Vuc2lnbmVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudW5zaWduZWQpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgTG9uZyh0aGlzLmxvdywgdGhpcy5oaWdoLCB0cnVlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyogQ29tbW9uSlMgKi8gaWYgKHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZSAmJiB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cylcclxuICAgICAgICBtb2R1bGVbXCJleHBvcnRzXCJdID0gTG9uZztcclxuICAgIC8qIEFNRCAqLyBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZVtcImFtZFwiXSlcclxuICAgICAgICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBMb25nOyB9KTtcclxuICAgIC8qIEdsb2JhbCAqLyBlbHNlXHJcbiAgICAgICAgKGdsb2JhbFtcImRjb2RlSU9cIl0gPSBnbG9iYWxbXCJkY29kZUlPXCJdIHx8IHt9KVtcIkxvbmdcIl0gPSBMb25nO1xyXG5cclxufSkodGhpcyk7XHJcblxyXG59LHt9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcclxuLypcclxuIENvcHlyaWdodCAyMDEzIERhbmllbCBXaXJ0eiA8ZGNvZGVAZGNvZGUuaW8+XHJcbiBDb3B5cmlnaHQgMjAwOSBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG4gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcclxuIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9kaXN0L0xvbmcuanNcIik7XHJcblxyXG59LHtcIi4vZGlzdC9Mb25nLmpzXCI6Mn1dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xyXG5tb2R1bGUuZXhwb3J0cz1yZXF1aXJlKCdieXRlYnVmZmVyJylcclxuXHJcbn0se1wiYnl0ZWJ1ZmZlclwiOjF9XX0se30sWzRdKSg0KVxyXG59KTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBjOi9iaXRzaGFyZXN3YWxsZXQvd3d3L2FwcC9kbC9saWIvYnl0ZWJ1ZmZlcl8zLjUuNC5qc1xuICoqLyIsImFzc2VydCA9IHJlcXVpcmUgJ2Fzc2VydCdcclxuQnl0ZUJ1ZmZlciA9IHJlcXVpcmUgJy4uL2NvbW1vbi9ieXRlYnVmZmVyJ1xyXG5jb25maWcgPSByZXF1aXJlICcuLi9jaGFpbi9jb25maWcnXHJcbmhhc2ggPSByZXF1aXJlICcuLi9jb21tb24vaGFzaCdcclxuYmFzZTU4ID0gcmVxdWlyZSAnYnM1OCdcclxuXHJcbmNsYXNzIEFkZHJlc3NcclxuXHJcbiAgICBjb25zdHJ1Y3RvcjogKEBhZGR5KSAtPlxyXG4gICAgICAgIFxyXG4gICAgQWRkcmVzcy5mcm9tQnVmZmVyID0gKGJ1ZmZlcikgLT5cclxuICAgICAgICBfaGFzaCA9IGhhc2guc2hhNTEyKGJ1ZmZlcilcclxuICAgICAgICBhZGR5ID0gaGFzaC5yaXBlbWQxNjAoX2hhc2gpXHJcbiAgICAgICAgbmV3IEFkZHJlc3MoYWRkeSlcclxuICAgIFxyXG4gICAgQWRkcmVzcy5mcm9tU3RyaW5nID0gKHN0cmluZywgYWRkcmVzc19wcmVmaXggPSBjb25maWcuYWRkcmVzc19wcmVmaXgpIC0+XHJcbiAgICAgICAgcHJlZml4ID0gc3RyaW5nLnNsaWNlIDAsIGFkZHJlc3NfcHJlZml4Lmxlbmd0aFxyXG4gICAgICAgIGFzc2VydC5lcXVhbCBhZGRyZXNzX3ByZWZpeCwgcHJlZml4LCBcIkV4cGVjdGluZyBrZXkgdG8gYmVnaW4gd2l0aCAje2FkZHJlc3NfcHJlZml4fSwgaW5zdGVhZCBnb3QgI3twcmVmaXh9XCJcclxuICAgICAgICBhZGR5ID0gc3RyaW5nLnNsaWNlIGFkZHJlc3NfcHJlZml4Lmxlbmd0aFxyXG4gICAgICAgIGFkZHkgPSBuZXcgQnVmZmVyKGJhc2U1OC5kZWNvZGUoYWRkeSksICdiaW5hcnknKVxyXG4gICAgICAgIGNoZWNrc3VtID0gYWRkeS5zbGljZSAtNFxyXG4gICAgICAgIGFkZHkgPSBhZGR5LnNsaWNlIDAsIC00XHJcbiAgICAgICAgbmV3X2NoZWNrc3VtID0gaGFzaC5yaXBlbWQxNjAgYWRkeVxyXG4gICAgICAgIG5ld19jaGVja3N1bSA9IG5ld19jaGVja3N1bS5zbGljZSAwLCA0XHJcbiAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbCBjaGVja3N1bSwgbmV3X2NoZWNrc3VtLCAnQ2hlY2tzdW0gZGlkIG5vdCBtYXRjaCdcclxuICAgICAgICBuZXcgQWRkcmVzcyhhZGR5KVxyXG4gICAgXHJcbiAgICAjIyMqIEByZXR1cm4gQWRkcmVzcyAtIENvbXByZXNzZWQgUFRTIGZvcm1hdCAoYnkgZGVmYXVsdCkgIyMjXHJcbiAgICBBZGRyZXNzLmZyb21QdWJsaWMgPSAocHVibGljX2tleSwgY29tcHJlc3NlZCA9IHRydWUsIHZlcnNpb24gPSA1NikgLT5cclxuICAgICAgICBzaGEyID0gaGFzaC5zaGEyNTYgcHVibGljX2tleS50b0J1ZmZlciBjb21wcmVzc2VkXHJcbiAgICAgICAgcmVwID0gaGFzaC5yaXBlbWQxNjAgc2hhMlxyXG4gICAgICAgIHZlcnNpb25CdWZmZXIgPSBuZXcgQnVmZmVyKDEpXHJcbiAgICAgICAgdmVyc2lvbkJ1ZmZlci53cml0ZVVJbnQ4KCgweEZGICYgdmVyc2lvbiksIDApXHJcbiAgICAgICAgYWRkciA9IEJ1ZmZlci5jb25jYXQgW3ZlcnNpb25CdWZmZXIsIHJlcF1cclxuICAgICAgICBjaGVjayA9IGhhc2guc2hhMjU2IGFkZHJcclxuICAgICAgICBjaGVjayA9IGhhc2guc2hhMjU2IGNoZWNrXHJcbiAgICAgICAgYnVmZmVyID0gQnVmZmVyLmNvbmNhdCBbYWRkciwgY2hlY2suc2xpY2UgMCwgNF1cclxuICAgICAgICBuZXcgQWRkcmVzcyBoYXNoLnJpcGVtZDE2MCBidWZmZXJcclxuICAgIFxyXG4gICAgdG9CdWZmZXI6IC0+XHJcbiAgICAgICAgQGFkZHlcclxuICAgICAgICBcclxuICAgIHRvU3RyaW5nOiAoYWRkcmVzc19wcmVmaXggPSBjb25maWcuYWRkcmVzc19wcmVmaXgpIC0+XHJcbiAgICAgICAgY2hlY2tzdW0gPSBoYXNoLnJpcGVtZDE2MCBAYWRkeVxyXG4gICAgICAgIGFkZHkgPSBCdWZmZXIuY29uY2F0IFtAYWRkeSwgY2hlY2tzdW0uc2xpY2UgMCwgNF1cclxuICAgICAgICBhZGRyZXNzX3ByZWZpeCArIGJhc2U1OC5lbmNvZGUgYWRkeVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBBZGRyZXNzXHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL2RsL3NyYy9lY2MvYWRkcmVzcy5jb2ZmZWVcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IFwiYSxhYSxhYWwsYWFsaWksYWFtLGFiYSxhYmFjLGFiYWNhLGFiYWNhdGUsYWJhY2F5LGFiYWNpc3QsYWJhY2ssYWJhY3RvcixhYmFjdXMsYWJhZmYsYWJhZnQsYWJhaXNlcixhYmFsb25lLGFiYW5kb24sYWJhcyxhYmFzZSxhYmFzZWQsYWJhc2VyLGFiYXNoLGFiYXNoZWQsYWJhc2lhLGFiYXNpYyxhYmFzayxhYmF0ZSxhYmF0ZXIsYWJhdGlzLGFiYXRvbixhYmF0b3IsYWJhdHVyZSxhYmF2ZSxhYmF4aWFsLGFiYXhpbGUsYWJhemUsYWJiLGFiYmFjeSxhYmJhcyxhYmJhc2ksYWJiYXNzaSxhYmJlc3MsYWJiZXksYWJib3QsYWJib3RjeSxhYmRhbCxhYmRhdCxhYmRlc3QsYWJkb21lbixhYmR1Y2UsYWJkdWN0LGFiZWFtLGFiZWFyLGFiZWQsYWJlaWdoLGFiZWxlLGFiZWxpdGUsYWJldCxhYmV0dGFsLGFiZXR0b3IsYWJleSxhYmV5YW50LGFiZmFyYWQsYWJoZW5yeSxhYmhvcixhYmlkYWwsYWJpZGUsYWJpZGVyLGFiaWRpLGFiaWRpbmcsYWJpZXRpYyxhYmlldGluLGFiaWdhaWwsYWJpZ2VhdCxhYmlnZXVzLGFiaWxhbyxhYmlsaXR5LGFiaWxsYSxhYmlsbyxhYmlvc2lzLGFiaW90aWMsYWJpcixhYmlzdG9uLGFiaXVyZXQsYWJqZWN0LGFiam9pbnQsYWJqdWRnZSxhYmp1cmUsYWJqdXJlcixhYmthcixhYmthcmksYWJsYWNoLGFibGFyZSxhYmxhdGUsYWJsYXRvcixhYmxhdXQsYWJsYXplLGFibGUsYWJsZWV6ZSxhYmxlcixhYmxlc3QsYWJsaW5zLGFibG9vbSxhYmxvdyxhYmx1ZGUsYWJsdWVudCxhYmx1c2gsYWJseSxhYm1obyxhYm5ldCxhYm9hcmQsYWJvZGUsYWJvZHksYWJvaG0sYWJvaWwsYWJvbGlzaCxhYm9sbGEsYWJvbWEsYWJvbWluZSxhYm9vbixhYm9yYWQsYWJvcmFsLGFib3JkLGFib3J0LGFib3J0ZWQsYWJvcnRpbixhYm9ydHVzLGFib3VuZCxhYm91dCxhYm91dHMsYWJvdmUsYWJveCxhYnJhZGUsYWJyYWRlcixhYnJhaWQsYWJyYXNheCxhYnJhc2UsYWJyYXNoLGFicmF1bSxhYnJheGFzLGFicmVhY3QsYWJyZWFzdCxhYnJldCxhYnJpY28sYWJyaWRnZSxhYnJpbSxhYnJpbixhYnJvYWNoLGFicm9hZCxhYnJvb2ssYWJydXB0LGFic2Nlc3MsYWJzY2luZCxhYnNjaXNlLGFic2Npc3MsYWJzY29uZCxhYnNlbmNlLGFic2VudCxhYnNpdCxhYnNtaG8sYWJzb2htLGFic29sdmUsYWJzb3JiLGFic29ycHQsYWJzdGFpbixhYnN1bWUsYWJzdXJkLGFic3ZvbHQsYWJ0aGFpbixhYnUsYWJ1Y2NvLGFidWxpYSxhYnVsaWMsYWJ1bmEsYWJ1cmEsYWJ1cmJhbixhYnVyc3QsYWJ1cnRvbixhYnVzZSxhYnVzZWUsYWJ1c2VyLGFidXNpb24sYWJ1c2l2ZSxhYnV0LGFidXR0YWwsYWJ1dHRlcixhYnV6eixhYnZvbHQsYWJ3YWIsYWJ5LGFieXNtLGFieXNtYWwsYWJ5c3MsYWJ5c3NhbCxhY2FjaWluLGFjYWNpbixhY2FkZW1lLGFjYWRlbXksYWNham91LGFjYWxlcGgsYWNhbmEsYWNhbnRoLGFjYW50aGEsYWNhcG5pYSxhY2FwdSxhY2FyYSxhY2FyZGlhLGFjYXJpLGFjYXJpYW4sYWNhcmlkLGFjYXJpbmUsYWNhcm9pZCxhY2Fyb2wsYWNhdGUsYWNhdGVyeSxhY2F1ZGFsLGFjY2EsYWNjZWRlLGFjY2VkZXIsYWNjZW5kLGFjY2VudCxhY2NlcHQsYWNjZXJzZSxhY2Nlc3MsYWNjaWRpYSxhY2NpZGllLGFjY2luZ2UsYWNjaXRlLGFjY2xhaW0sYWNjbG95LGFjY29hc3QsYWNjb2lsLGFjY29sbGUsYWNjb21wdCxhY2NvcmQsYWNjb3N0LGFjY291bnQsYWNjb3ksYWNjcmV0ZSxhY2NydWFsLGFjY3J1ZSxhY2NydWVyLGFjY3Vyc2UsYWNjdXNhbCxhY2N1c2UsYWNjdXNlZCxhY2N1c2VyLGFjZSxhY2VkaWEsYWNlZHksYWNlcGhhbCxhY2VyYXRlLGFjZXJiLGFjZXJiaWMsYWNlcmRvbCxhY2VyaW4sYWNlcm9zZSxhY2Vyb3VzLGFjZXJyYSxhY2VzaGlwLGFjZXRhbCxhY2V0YXRlLGFjZXRpYyxhY2V0aWZ5LGFjZXRpbixhY2V0aXplLGFjZXRvaW4sYWNldG9sLGFjZXRvbmUsYWNldG9zZSxhY2V0b3VzLGFjZXR1bSxhY2V0eWwsYWNoLGFjaGFnZSxhY2hhcixhY2hhdGUsYWNoZSxhY2hlbmUsYWNoZXIsYWNoZXRlLGFjaGlldmUsYWNoaWdhbixhY2hpbGwsYWNoaW1lLGFjaGluZyxhY2hpcmEsYWNob2xpYSxhY2hvbGljLGFjaG9yLGFjaHJlZSxhY2hyb21hLGFjaHRlbCxhY2h5LGFjaHlsaWEsYWNoeW1pYSxhY2ljdWxhLGFjaWQsYWNpZGVyLGFjaWRpYyxhY2lkaWZ5LGFjaWRpdGUsYWNpZGl0eSxhY2lkaXplLGFjaWRseSxhY2lkb2lkLGFjaWR5bCxhY2llcixhY2lmb3JtLGFjaW5hcixhY2luYXJ5LGFjaW5pYyxhY2lub3NlLGFjaW5vdXMsYWNpbnVzLGFjaXVyZ3ksYWNrZXIsYWNrZXksYWNrbWFuLGFja25vdyxhY2xlLGFjbGluYWwsYWNsaW5pYyxhY2xvdWQsYWNseXMsYWNtYXRpYyxhY21lLGFjbWljLGFjbWl0ZSxhY25lLGFjbmVtaWEsYWNub2RhbCxhY25vZGUsYWNvY2ssYWNvY290bCxhY29pbixhY29pbmUsYWNvbGQsYWNvbG9neSxhY29sb3VzLGFjb2x5dGUsYWNvbWEsYWNvbWlhLGFjb21vdXMsYWNvbmUsYWNvbmljLGFjb25pbixhY29uaW5lLGFjb25pdGUsYWNvcGljLGFjb3BvbixhY29yLGFjb3JlYSxhY29yaWEsYWNvcm4sYWNvcm5lZCxhY29zbWljLGFjb3Vhc20sYWNvdWNoaSxhY291Y2h5LGFjb3VwYSxhY3F1ZXN0LGFjcXVpcmUsYWNxdWlzdCxhY3F1aXQsYWNyYWN5LGFjcmFlaW4sYWNyYXNpYSxhY3JhdGlhLGFjcmF3bCxhY3JhemUsYWNyZSxhY3JlYWdlLGFjcmVhayxhY3JlYW0sYWNyZWQsYWNyZW1hbixhY3JpZCxhY3JpZGFuLGFjcmlkaWMsYWNyaWRseSxhY3JpZHlsLGFjcmlueWwsYWNyaXNpYSxhY3JpdGFuLGFjcml0ZSxhY3JpdG9sLGFjcm9hbWEsYWNyb2JhdCxhY3JvZ2VuLGFjcm9uLGFjcm9ueWMsYWNyb255bSxhY3Jvbnl4LGFjcm9vayxhY3Jvc2UsYWNyb3NzLGFjcm90aWMsYWNyeWwsYWNyeWxpYyxhY3J5bHlsLGFjdCxhY3RhLGFjdGFibGUsYWN0aWZ5LGFjdGluLGFjdGluYWwsYWN0aW5lLGFjdGluZyxhY3RpbmljLGFjdGlub24sYWN0aW9uLGFjdGl2ZSxhY3RpdmluLGFjdGxlc3MsYWN0b24sYWN0b3IsYWN0cmVzcyxhY3R1LGFjdHVhbCxhY3R1YXJ5LGFjdHVyZSxhY3VhdGUsYWN1aXR5LGFjdWxlYSxhY3VsZXVzLGFjdW1lbixhY3VzaGxhLGFjdXRhdGUsYWN1dGUsYWN1dGVseSxhY3V0aXNoLGFjeWNsaWMsYWN5ZXNpcyxhY3lldGljLGFjeWwsYWN5bGF0ZSxhY3lsb2luLGFjeWxveHksYWN5c3RpYSxhZCxhZGFjdHlsLGFkYWQsYWRhZ2UsYWRhZ2lhbCxhZGFnaW8sYWRhbWFudCxhZGFtYXMsYWRhbWluZSxhZGFtaXRlLGFkYW5jZSxhZGFuZ2xlLGFkYXBpZCxhZGFwdCxhZGFwdGVyLGFkYXB0b3IsYWRhcm1lLGFkYXQsYWRhdGksYWRhdG9tLGFkYXVudCxhZGF3LGFkYXdlLGFkYXdsdXQsYWRhd24sYWRheGlhbCxhZGF5LGFkYXlzLGFkYXp6bGUsYWRjcmFmdCxhZGQsYWRkYSxhZGRhYmxlLGFkZGF4LGFkZGVkLGFkZGVkbHksYWRkZW5kLGFkZGVuZGEsYWRkZXIsYWRkaWJsZSxhZGRpY3QsYWRkbGUsYWRkbGlucyxhZGRyZXNzLGFkZHJlc3QsYWRkdWNlLGFkZHVjZXIsYWRkdWN0LGFkZSxhZGVhZCxhZGVlbSxhZGVlcCxhZGVsaW5nLGFkZWxpdGUsYWRlbmFzZSxhZGVuaWEsYWRlbmluZSxhZGVub2lkLGFkZW5vbWEsYWRlbm9zZSxhZGVueWwsYWRlcHQsYWRlcm1pYSxhZGVybWluLGFkZXQsYWRldmlzbSxhZGZpeCxhZGhha2EsYWRoYXJtYSxhZGhlcmUsYWRoZXJlcixhZGhpYml0LGFkaWF0ZSxhZGljaXR5LGFkaWV1LGFkaWV1eCxhZGlub2xlLGFkaW9uLGFkaXBhdGUsYWRpcGljLGFkaXBvaWQsYWRpcG9tYSxhZGlwb3NlLGFkaXBvdXMsYWRpcHNpYSxhZGlwc2ljLGFkaXBzeSxhZGlweWwsYWRpdCxhZGl0YWwsYWRpdHVzLGFkamFnLGFkamVjdCxhZGppZ2VyLGFkam9pbixhZGpvaW50LGFkam91cm4sYWRqdWRnZSxhZGp1bmN0LGFkanVyZSxhZGp1cmVyLGFkanVzdCxhZGxheSxhZGxlc3MsYWRsZXQsYWRtYW4sYWRtaSxhZG1pcmFsLGFkbWlyZSxhZG1pcmVkLGFkbWlyZXIsYWRtaXQsYWRtaXgsYWRuYXRlLGFkbmV4LGFkbmV4YWwsYWRuZXhlZCxhZG5vdW4sYWRvLGFkb2JlLGFkb25pbixhZG9uaXRlLGFkb25pemUsYWRvcHQsYWRvcHRlZCxhZG9wdGVlLGFkb3B0ZXIsYWRvcmFsLGFkb3JhbnQsYWRvcmUsYWRvcmVyLGFkb3JuLGFkb3JuZXIsYWRvc3NlZCxhZG91bGllLGFkb3duLGFkb3h5LGFkb3plLGFkcGFvLGFkcHJlc3MsYWRyZWFkLGFkcmVhbSxhZHJlYW10LGFkcmVuYWwsYWRyZW5pbixhZHJpZnQsYWRyaXAsYWRyb2l0LGFkcm9vcCxhZHJvcCxhZHJvd3NlLGFkcnVlLGFkcnksYWRzYnVkLGFkc21pdGgsYWRzb3JiLGFkdGV2YWMsYWR1bGFyLGFkdWxhdGUsYWR1bHQsYWR1bHRlcixhZHVuYyxhZHVzayxhZHVzdCxhZHZhbmNlLGFkdmVuZSxhZHZlcmIsYWR2ZXJzZSxhZHZlcnQsYWR2aWNlLGFkdmlzYWwsYWR2aXNlLGFkdmlzZWQsYWR2aXNlZSxhZHZpc2VyLGFkdmlzb3IsYWR2b3dlZSxhZHksYWR5bmFteSxhZHl0YSxhZHl0b24sYWR5dHVtLGFkeixhZHplLGFkemVyLGFkem9va3MsYWUsYWVjaWFsLGFlY2l1bSxhZWRpbGUsYWVkaWxpYyxhZWZhbGQsYWVmYWxkeSxhZWZhdWxkLGFlZ2lzLGFlbmFjaCxhZW5lYW4sYWVuZW91cyxhZW9saWQsYWVvbGluYSxhZW9saW5lLGFlb24sYWVvbmlhbCxhZW9uaWFuLGFlb25pc3QsYWVyLGFlcmFnZSxhZXJhdGUsYWVyYXRvcixhZXJpYWwsYWVyaWMsYWVyaWNhbCxhZXJpZSxhZXJpZWQsYWVyaWZ5LGFlcm8sYWVyb2JlLGFlcm9iaWMsYWVyb2J1cyxhZXJvZ2VsLGFlcm9nZW4sYWVyb2d1bixhZXJvbmF0LGFlcm9uZWYsYWVyb3NlLGFlcm9zb2wsYWVydWdvLGFlcnksYWVzLGFldmlhLGFmYWNlLGFmYWludCxhZmFyLGFmYXJhLGFmZWFyLGFmZWFyZCxhZmVhcmVkLGFmZXJuYW4sYWZldGFsLGFmZmEsYWZmYWJsZSxhZmZhYmx5LGFmZmFpcixhZmZhaXRlLGFmZmVjdCxhZmZlZXIsYWZmZWlyLGFmZmlhbnQsYWZmaW5hbCxhZmZpbmUsYWZmaW5lZCxhZmZpcm0sYWZmaXgsYWZmaXhhbCxhZmZpeGVyLGFmZmxpY3QsYWZmbHV4LGFmZm9yY2UsYWZmb3JkLGFmZnJheSxhZmZyb250LGFmZnVzZSxhZmZ5LGFmZ2hhbmksYWZpZWxkLGFmaXJlLGFmbGFtZSxhZmxhcmUsYWZsYXQsYWZsYXVudCxhZmxpZ2h0LGFmbG9hdCxhZmxvdyxhZmxvd2VyLGFmbHVzaCxhZm9hbSxhZm9vdCxhZm9yZSxhZm91bCxhZnJhaWQsYWZyZWV0LGFmcmVzaCxhZnJldCxhZnJvbnQsYWZyb3duLGFmdCxhZnRhYmEsYWZ0ZXIsYWZ0ZXJnbyxhZnRtb3N0LGFmdG9zYSxhZnR3YXJkLGFnYSxhZ2FpbixhZ2FpbnN0LGFnYWwsYWdhbGF4eSxhZ2FsaXRlLGFnYWxsb3AsYWdhbG1hLGFnYW1hLGFnYW1ldGUsYWdhbWksYWdhbWlhbixhZ2FtaWMsYWdhbWlkLGFnYW1vaWQsYWdhbW9udCxhZ2Ftb3VzLGFnYW15LGFnYXBlLGFnYXBldGksYWdhcixhZ2FyaWMsYWdhcml0YSxhZ2Fyd2FsLGFnYXNwLGFnYXRlLGFnYXRoaW4sYWdhdGluZSxhZ2F0aXplLGFnYXRvaWQsYWdhdHksYWdhdm9zZSxhZ2F6ZSxhZ2F6ZWQsYWdlLGFnZWQsYWdlZGx5LGFnZWUsYWdlbGVzcyxhZ2Vsb25nLGFnZW4sYWdlbmN5LGFnZW5kYSxhZ2VuZHVtLGFnZW50LGFnZW50cnksYWdlcixhZ2V1c2lhLGFnZXVzaWMsYWdnZXIsYWdncmFkZSxhZ2dyYXRlLGFnZ3Jlc3MsYWdncm91cCxhZ2dyeSxhZ2d1cixhZ2hhLGFnaGFuZWUsYWdoYXN0LGFnaWxlLGFnaWxlbHksYWdpbGl0eSxhZ2luZyxhZ2lvLGFnaXN0LGFnaXN0b3IsYWdpdGFudCxhZ2l0YXRlLGFnbGEsYWdsYW5jZSxhZ2xhcmUsYWdsZWFmLGFnbGVhbSxhZ2xldCxhZ2xleSxhZ2xpbnQsYWdsb3csYWdsdWNvbixhZ25haWwsYWduYW1lLGFnbmFtZWQsYWduYXRlLGFnbmF0aWMsYWduZWwsYWduaXplLGFnbm9tZW4sYWdub3NpYSxhZ25vc2lzLGFnbm9zeSxhZ251cyxhZ28sYWdvZyxhZ29nZSxhZ29naWMsYWdvZ2ljcyxhZ29obyxhZ29pbmcsYWdvbixhZ29uYWwsYWdvbmUsYWdvbmljLGFnb25pZWQsYWdvbmlzdCxhZ29uaXVtLGFnb25pemUsYWdvbnksYWdvcmEsYWdvdWFyYSxhZ291dGEsYWdvdXRpLGFncGFpdGUsYWdyYWgsYWdyYWwsYWdyZSxhZ3JlZSxhZ3JlZWQsYWdyZWVyLGFncmVnZSxhZ3JpYSxhZ3JpbixhZ3Jpc2UsYWdyaXRvLGFncm9hbixhZ3JvbSxhZ3Jvb2YsYWdyb3BlLGFncm91bmQsYWdydWZlLGFncnVpZixhZ3NhbSxhZ3VhLGFndWUsYWd1ZXksYWd1aXNoLGFndW5haCxhZ3VzaCxhZ3VzdCxhZ3ksYWd5bmFyeSxhZ3lub3VzLGFneXJhdGUsYWd5cmlhLGFoLGFoYSxhaGFhaW5hLGFoYXVuY2gsYWhlYWQsYWhlYXAsYWhlbSxhaGV5LGFoaW1zYSxhaGluZCxhaGludCxhaG1hZGksYWhvLGFob25nLGFob3JzZSxhaG95LGFoc2FuLGFodSxhaHVhdGxlLGFodWxsLGFodW0sYWh1bmdyeSxhaHVudCxhaHVyYSxhaHVzaCxhaHdhbCxhaHlwbmlhLGFpLGFpZCxhaWRhYmxlLGFpZGFuY2UsYWlkYW50LGFpZGUsYWlkZXIsYWlkZnVsLGFpZGxlc3MsYWllbCxhaWdsZXQsYWlsLGFpbGFudG8sYWlsZSxhaWxlcm9uLGFpbGV0dGUsYWlsaW5nLGFpbGx0LGFpbG1lbnQsYWlsc3l0ZSxhaWx1cm8sYWlsd2VlZCxhaW0sYWltYXJhLGFpbWVyLGFpbWZ1bCxhaW1pbmcsYWltbGVzcyxhaW5hbGVoLGFpbmh1bSxhaW5vaSxhaW5zZWxsLGFpbnQsYWlvbixhaW9uaWFsLGFpcixhaXJhYmxlLGFpcmFtcG8sYWlyYW4sYWlyY3JldyxhaXJkb2NrLGFpcmRyb3AsYWlyZSxhaXJlcixhaXJmb2lsLGFpcmhlYWQsYWlyaWx5LGFpcmluZyxhaXJpc2gsYWlybGVzcyxhaXJsaWZ0LGFpcmxpa2UsYWlybWFpbCxhaXJtYW4sYWlybWFyayxhaXJwYXJrLGFpcnBvcnQsYWlyc2hpcCxhaXJzaWNrLGFpcnQsYWlyd2FyZCxhaXJ3YXksYWlyeSxhaXNsZSxhaXNsZWQsYWlzbGluZyxhaXQsYWl0Y2gsYWl0ZXNpcyxhaXRpb24sYWl3YW4sYWl6bGUsYWphamEsYWphbmdsZSxhamFyLGFqYXJpLGFqYXZhLGFqaGFyLGFqaXZpa2EsYWpvZyxham9pbnQsYWpvd2FuLGFrLGFrYSxha2FsYSxha2Fyb2EsYWthc2EsYWthemdhLGFrY2hlaCxha2UsYWtlYWtlLGFrZWJpLGFrZWUsYWtla2ksYWtlbGV5LGFrZXBpcm8sYWtlcml0ZSxha2V5LGFraG9vbmQsYWtocm90LGFraHlhbmEsYWtpYSxha2ltYm8sYWtpbixha2luZGxlLGFraW5ldGUsYWttdWRhcixha25lZSxha28sYWtvYXNtLGFrb2FzbWEsYWtvbmdlLGFrb3YsYWtwZWssYWtyYSxha3UsYWt1bGUsYWt1bmQsYWwsYWxhLGFsYWNoYSxhbGFjayxhbGFkYSxhbGFpaGksYWxhaXRlLGFsYWxhLGFsYWxpdGUsYWxhbHVzLGFsYW1lZGEsYWxhbW8sYWxhbW90aCxhbGFuLGFsYW5kLGFsYW5naW4sYWxhbmksYWxhbmluZSxhbGFubmFoLGFsYW50aWMsYWxhbnRpbixhbGFudG9sLGFsYW55bCxhbGFyLGFsYXJlcyxhbGFybSxhbGFybWVkLGFsYXJ1bSxhbGFyeSxhbGFzLGFsYXRlLGFsYXRlZCxhbGF0ZXJuLGFsYXRpb24sYWxiLGFsYmEsYWxiYW4sYWxiYXJjbyxhbGJhdGEsYWxiZSxhbGJlZG8sYWxiZWUsYWxiZWl0LGFsYmV0YWQsYWxiaWZ5LGFsYmluYWwsYWxiaW5pYyxhbGJpbm8sYWxiaXRlLGFsYml0aWMsYWxidWdvLGFsYnVtLGFsYnVtZW4sYWxidW1pbixhbGJ1cm4sYWxidXMsYWxjYWlkZSxhbGNhbGRlLGFsY2FubmEsYWxjYXphcixhbGNoZW15LGFsY2hlcmEsYWxjaGlteSxhbGNoeW15LGFsY2luZSxhbGNsYWQsYWxjbyxhbGNvYXRlLGFsY29nZWwsYWxjb2hvbCxhbGNvc29sLGFsY292ZSxhbGN5b24sYWxkYW5lLGFsZGF6aW4sYWxkZWhvbCxhbGRlcixhbGRlcm4sYWxkaW0sYWxkaW1lLGFsZGluZSxhbGRvbCxhbGRvc2UsYWxlLGFsZWFrLGFsZWMsYWxlY2l6ZSxhbGVjb3N0LGFsZWN1cCxhbGVlLGFsZWYsYWxlZnQsYWxlZ2FyLGFsZWhvb2YsYWxlbSxhbGVtYW5hLGFsZW1iaWMsYWxlbWl0ZSxhbGVtbWFsLGFsZW4sYWxlcGgsYWxlcGhzLGFsZXBvbGUsYWxlcG90LGFsZXJjZSxhbGVyc2UsYWxlcnQsYWxlcnRseSxhbGVzYW4sYWxldGFwLGFsZXR0ZSxhbGV2aW4sYWxld2lmZSxhbGV4aWEsYWxleGljLGFsZXhpbixhbGV5YXJkLGFsZixhbGZhLGFsZmFqZSxhbGZhbGZhLGFsZmFxdWksYWxmZXQsYWxmaW9uYSxhbGZvbnNvLGFsZm9yamEsYWxnYSxhbGdhZSxhbGdhbCxhbGdhbGlhLGFsZ2F0ZSxhbGdlYnJhLGFsZ2VkbyxhbGdlc2lhLGFsZ2VzaWMsYWxnZXNpcyxhbGdldGljLGFsZ2ljLGFsZ2lkLGFsZ2lmaWMsYWxnaW4sYWxnaW5lLGFsZ2luaWMsYWxnaXN0LGFsZ29pZCxhbGdvcixhbGdvc2lzLGFsZ291cyxhbGd1bSxhbGhlbm5hLGFsaWFzLGFsaWJpLGFsaWJsZSxhbGljaGVsLGFsaWRhZGUsYWxpZW4sYWxpZW5jeSxhbGllbmVlLGFsaWVuZXIsYWxpZW5vcixhbGlmLGFsaWZvcm0sYWxpZ2h0LGFsaWduLGFsaWduZXIsYWxpaXBvZSxhbGlrZSxhbGltYSxhbGltZW50LGFsaW1vbnksYWxpbixhbGlvZmFyLGFsaXBhdGEsYWxpcGVkLGFsaXB0ZXMsYWxpcHRpYyxhbGlxdW90LGFsaXNoLGFsaXNpZXIsYWxpc21hZCxhbGlzbWFsLGFsaXNvLGFsaXNvbixhbGlzcCxhbGlzdCxhbGl0LGFsaXRlLGFsaXVuZGUsYWxpdmUsYWxpeWFoLGFsaXphcmksYWxqb2JhLGFsayxhbGthbGksYWxrYWxpYyxhbGthbWluLGFsa2FuZSxhbGthbmV0LGFsa2VuZSxhbGtlbm5hLGFsa2VueWwsYWxraWRlLGFsa2luZSxhbGtvb2wsYWxrb3h5LGFsa294eWwsYWxreSxhbGt5ZCxhbGt5bCxhbGt5bGljLGFsa3luZSxhbGwsYWxsYW4sYWxsYXksYWxsYXllcixhbGxib25lLGFsbGVnZSxhbGxlZ2VyLGFsbGVncm8sYWxsZWxlLGFsbGVsaWMsYWxsZW5lLGFsbGVyLGFsbGVyZ3ksYWxsZXksYWxsZXllZCxhbGxnb29kLGFsbGhlYWwsYWxsaWNlLGFsbGllZCxhbGxpZXMsYWxsbmVzcyxhbGxvbnltLGFsbG9xdXksYWxsb3NlLGFsbG90LGFsbG90ZWUsYWxsb3ZlcixhbGxvdyxhbGxvd2VyLGFsbG94YW4sYWxsb3ksYWxsc2VlZCxhbGx0dWQsYWxsdWRlLGFsbHVyZSxhbGx1cmVyLGFsbHV2aWEsYWxsd29yayxhbGx5LGFsbHlsLGFsbHlsaWMsYWxtYSxhbG1hZGlhLGFsbWFkaWUsYWxtYWdyYSxhbG1hbmFjLGFsbWUsYWxtZW1hcixhbG1pcXVlLGFsbWlyYWgsYWxtb2lnbixhbG1vbixhbG1vbmQsYWxtb25keSxhbG1vbmVyLGFsbW9ucnksYWxtb3N0LGFsbW91cyxhbG1zLGFsbXNmdWwsYWxtc21hbixhbG11Y2UsYWxtdWQsYWxtdWRlLGFsbXVnLGFsbXV0ZW4sYWxuLGFsbmFnZSxhbG5hZ2VyLGFsbmVpbixhbG5pY28sYWxub2l0ZSxhbG51aW4sYWxvLGFsb2NoaWEsYWxvZCxhbG9kaWFsLGFsb2RpYW4sYWxvZGl1bSxhbG9keSxhbG9lLGFsb2VkLGFsb2Vzb2wsYWxvZXRpYyxhbG9mdCxhbG9naWEsYWxvZ2lzbSxhbG9neSxhbG9pZCxhbG9pbixhbG9tYSxhbG9uZSxhbG9uZyxhbG9uZ3N0LGFsb29mLGFsb29mbHksYWxvb3NlLGFsb3AsYWxvcGVrZSxhbG9zZSxhbG91ZCxhbG93LGFsb3dlLGFscCxhbHBhY2EsYWxwZWVuLGFscGhhLGFscGhvbCxhbHBob3JuLGFscGhvcyxhbHBoeWwsYWxwaWV1LGFscGluZSxhbHBpc3QsYWxxdWllcixhbHJhdW4sYWxyZWFkeSxhbHJpZ2h0LGFscm9vdCxhbHJ1bmEsYWxzbyxhbHNvb24sYWx0LGFsdGFpdGUsYWx0YXIsYWx0YXJlZCxhbHRlcixhbHRlcmVyLGFsdGVybixhbHRlcm5lLGFsdGhlYSxhbHRoZWluLGFsdGhvLGFsdGhvcm4sYWx0aWxpayxhbHRpbixhbHRvLGFsdG91bixhbHRyb3NlLGFsdHVuLGFsdWRlbCxhbHVsYSxhbHVsYXIsYWx1bGV0LGFsdW0sYWx1bWljLGFsdW1pbmEsYWx1bWluZSxhbHVtaXNoLGFsdW1pdGUsYWx1bWl1bSxhbHVtbmEsYWx1bW5hZSxhbHVtbmFsLGFsdW1uaSxhbHVtbnVzLGFsdW5pdGUsYWx1cGFnLGFsdXJlLGFsdXRhLGFsdmFyLGFsdmVhcnksYWx2ZWxveixhbHZlb2xhLGFsdmVvbGUsYWx2ZW9saSxhbHZldXMsYWx2aW5lLGFsdml0ZSxhbHZ1cyxhbHdheSxhbHdheXMsYWx5LGFseXBpbixhbHlzc29uLGFtLGFtYSxhbWFhcyxhbWFkb3UsYW1hZ2EsYW1haCxhbWFpbixhbWFrZWJlLGFtYWxhLGFtYWxha2EsYW1hbGdhbSxhbWFsdGFzLGFtYW1hdSxhbWFuZGluLGFtYW5nLGFtYW5pLGFtYW5pYSxhbWFub3JpLGFtYW5vdXMsYW1hcGEsYW1hcixhbWFyaW4sYW1hcmluZSxhbWFyaXR5LGFtYXJvaWQsYW1hc3MsYW1hc3NlcixhbWFzdGlhLGFtYXN0eSxhbWF0ZXVyLGFtYXRpdmUsYW1hdG9sLGFtYXRvcnksYW1hemUsYW1hemVkLGFtYXppYSxhbWF6aW5nLGFtYmEsYW1iYWdlLGFtYmFsYW0sYW1iYW4sYW1iYXIsYW1iYXJlZSxhbWJhcnksYW1iYXNoLGFtYmFzc3ksYW1iYXRjaCxhbWJheSxhbWJlZXIsYW1iZXIsYW1iZXJ5LGFtYmllbnMsYW1iaWVudCxhbWJpZXIsYW1iaXQsYW1iaXRhbCxhbWJpdHR5LGFtYml0dXMsYW1ibGUsYW1ibGVyLGFtYmxpbmcsYW1ibyxhbWJvbixhbWJvcyxhbWJyYWluLGFtYnJlaW4sYW1icml0ZSxhbWJyb2lkLGFtYnJvc2UsYW1icnksYW1ic2FjZSxhbWJ1cnksYW1idXNoLGFtY2hvb3IsYW1lLGFtZWVkLGFtZWVuLGFtZWxpYSxhbWVsbHVzLGFtZWx1LGFtZWx1cyxhbWVuLGFtZW5kLGFtZW5kZSxhbWVuZGVyLGFtZW5kcyxhbWVuZSxhbWVuaWEsYW1lbml0eSxhbWVudCxhbWVudGFsLGFtZW50aWEsYW1lbnR1bSxhbWVyY2UsYW1lcmNlcixhbWVyaXNtLGFtZXNpdGUsYW1ldHJpYSxhbWdhcm4sYW1oYXIsYW1ocmFuLGFtaSxhbWlhYmxlLGFtaWFibHksYW1pYW50aCxhbWljLGFtaWNhbCxhbWljZSxhbWljZWQsYW1pY3JvbixhbWlkLGFtaWRhc2UsYW1pZGF0ZSxhbWlkZSxhbWlkaWMsYW1pZGlkLGFtaWRpZGUsYW1pZGluLGFtaWRpbmUsYW1pZG8sYW1pZG9sLGFtaWRvbixhbWlkb3h5LGFtaWRzdCxhbWlsLGFtaW1pYSxhbWltaWRlLGFtaW4sYW1pbmF0ZSxhbWluZSxhbWluaSxhbWluaWMsYW1pbml0eSxhbWluaXplLGFtaW5vLGFtaW5vaWQsYW1pcixhbWlyYXksYW1pc3MsYW1pdHksYW1peGlhLGFtbGEsYW1saSxhbWxpa2FyLGFtbG9uZyxhbW1hLGFtbWFuLGFtbWVsaW4sYW1tZXIsYW1tZXRlcixhbW1pbmUsYW1tbyxhbW1vbmFsLGFtbW9uaWEsYW1tb25pYyxhbW1vbm8sYW1tdSxhbW5lc2lhLGFtbmVzaWMsYW1uZXN0eSxhbW5pYSxhbW5pYWMsYW1uaWMsYW1uaW9uLGFtbmlvdGUsYW1vYmVyLGFtb2J5cixhbW9lYmEsYW1vZWJhZSxhbW9lYmFuLGFtb2ViaWMsYW1vZWJpZCxhbW9rLGFtb2tlLGFtb2xlLGFtb21hbCxhbW9tdW0sYW1vbmcsYW1vbmdzdCxhbW9yLGFtb3JhZG8sYW1vcmFpYyxhbW9yYWltLGFtb3JhbCxhbW9yZXQsYW1vcmlzbSxhbW9yaXN0LGFtb3Jvc28sYW1vcm91cyxhbW9ycGh5LGFtb3J0LGFtb3Rpb24sYW1vdHVzLGFtb3VudCxhbW91cixhbW92ZSxhbXBhbGVhLGFtcGVyLGFtcGVyZSxhbXBlcnksYW1waGlkLGFtcGhpZGUsYW1waG9yYSxhbXBob3JlLGFtcGxlLGFtcGxpZnksYW1wbHksYW1wb3VsZSxhbXB1bCxhbXB1bGxhLGFtcHV0ZWUsYW1weXgsYW1yYSxhbXJlZXRhLGFtcml0YSxhbXNhdGgsYW1zZWwsYW10LGFtdG1hbixhbXVjayxhbXVndWlzLGFtdWxhLGFtdWxldCxhbXVsbGEsYW11bmFtLGFtdXJjYSxhbXVzZSxhbXVzZWQsYW11c2VlLGFtdXNlcixhbXVzaWEsYW11c2luZyxhbXVzaXZlLGFtdXR0ZXIsYW11eW9uLGFtdXlvbmcsYW11emUsYW12aXMsYW15LGFteWVsaWEsYW15ZWxpYyxhbXlnZGFsLGFteWwsYW15bGFuLGFteWxhc2UsYW15bGF0ZSxhbXlsZW5lLGFteWxpYyxhbXlsaW4sYW15bG8sYW15bG9pZCxhbXlsb20sYW15bG9uLGFteWxvc2UsYW15bHVtLGFteW91cyxhbXlyaW4sYW15cm9sLGFteXJvb3QsYW4sYW5hLGFuYWJhdGEsYW5hYm8sYW5hYm9uZyxhbmFjYXJhLGFuYWNhcmQsYW5hY2lkLGFuYWRlbSxhbmFkcm9tLGFuYWVtaWEsYW5hZW1pYyxhbmFnYXAsYW5hZ2VwLGFuYWdvZ2UsYW5hZ29neSxhbmFncmFtLGFuYWd1YSxhbmFoYXUsYW5hbCxhbmFsYXYsYW5hbGdlbixhbmFsZ2lhLGFuYWxnaWMsYW5hbGx5LGFuYWxvZ3ksYW5hbHlzZSxhbmFseXN0LGFuYWx5emUsYW5hbSxhbmFtYSxhbmFtaXRlLGFuYW4sYW5hbmEsYW5hbmFzLGFuYW5kYSxhbmFueW0sYW5hcGhpYSxhbmFwbmVhLGFuYXBzaWQsYW5hcXVhLGFuYXJjaCxhbmFyY2h5LGFuYXJldGEsYW5hcnlhLGFuYXRhc2UsYW5hdGlmYSxhbmF0aW5lLGFuYXRvbXksYW5hdG94LGFuYXRyb24sYW5hdWRpYSxhbmF4aWFsLGFuYXhvbixhbmF4b25lLGFuYXksYW5iYSxhbmJ1cnksYW5jaG9yLGFuY2hvdnksYW5jaWVudCxhbmNpbGUsYW5jaWxsYSxhbmNvbixhbmNvbmFkLGFuY29uYWwsYW5jb25lLGFuY29ueSxhbmNvcmEsYW5jb3JhbCxhbmQsYW5kYSxhbmRhbnRlLGFuZGlyaW4sYW5kaXJvbixhbmRyaWMsYW5kcm9pZCxhbmRyb2wsYW5kcm9uLGFuZWFyLGFuZWF0aCxhbmVsZSxhbmVtaWEsYW5lbWljLGFuZW1vbmUsYW5lbW9ueSxhbmVuZCxhbmVuc3QsYW5lbnQsYW5lcGlhLGFuZXJnaWEsYW5lcmdpYyxhbmVyZ3ksYW5lcmx5LGFuZXJvaWQsYW5lcyxhbmVzaXMsYW5ldXJpYSxhbmV1cmljLGFuZXVyaW4sYW5ldyxhbmdhcmlhLGFuZ2FyeSxhbmdla29rLGFuZ2VsLGFuZ2VsZXQsYW5nZWxpYyxhbmdlbGluLGFuZ2Vsb3QsYW5nZXIsYW5nZXJseSxhbmdleW9rLGFuZ2ljbyxhbmdpbGQsYW5naWxpLGFuZ2luYSxhbmdpbmFsLGFuZ2lvaWQsYW5naW9tYSxhbmdsZSxhbmdsZWQsYW5nbGVyLGFuZ2xpbmcsYW5nbG9pZCxhbmdvLGFuZ29sYXIsYW5nb3IsYW5ncmlseSxhbmdyaXRlLGFuZ3J5LGFuZ3N0LGFuZ3N0ZXIsYW5ndWlkLGFuZ3VpbmUsYW5ndWlzLGFuZ3Vpc2gsYW5ndWxhLGFuZ3VsYXIsYW5ndXJpYSxhbmhhbmcsYW5oaW1hLGFuaGluZ2EsYW5pLGFuaWN1dCxhbmlkaWFuLGFuaWVudGUsYW5pZ2gsYW5pZ2h0LGFuaWdodHMsYW5pbCxhbmlsYW8sYW5pbGF1LGFuaWxlLGFuaWxpYyxhbmlsaWQsYW5pbGlkZSxhbmlsaW5lLGFuaWxpdHksYW5pbGxhLGFuaW1hLGFuaW1hbCxhbmltYXRlLGFuaW1lLGFuaW1pLGFuaW1pc20sYW5pbWlzdCxhbmltaXplLGFuaW1vdXMsYW5pbXVzLGFuaW9uLGFuaW9uaWMsYW5pcyxhbmlzYWwsYW5pc2F0ZSxhbmlzZSxhbmlzZWVkLGFuaXNpYyxhbmlzaWwsYW5pc29pbixhbmlzb2xlLGFuaXNveWwsYW5pc3VtLGFuaXN5bCxhbml0aGVyLGFuamFuLGFua2VlLGFua2VyLGFua2gsYW5rbGUsYW5rbGV0LGFua2xvbmcsYW5rdXMsYW5rdXNoYSxhbmxhY2UsYW5sYXV0LGFubixhbm5hLGFubmFsLGFubmFsZSxhbm5hbHMsYW5uYXQsYW5uYXRlcyxhbm5hdHRvLGFubmVhbCxhbm5lbGlkLGFubmV0LGFubmV4LGFubmV4YSxhbm5leGFsLGFubmV4ZXIsYW5uaXRlLGFubm9uYSxhbm5veSxhbm5veWVyLGFubnVhbCxhbm51YXJ5LGFubnVlbnQsYW5udWl0eSxhbm51bCxhbm51bGFyLGFubnVsZXQsYW5udWx1cyxhbm9hLGFub2RhbCxhbm9kZSxhbm9kaWMsYW5vZGl6ZSxhbm9kb3MsYW5vZHluZSxhbm9lc2lhLGFub2VzaXMsYW5vZXRpYyxhbm9pbCxhbm9pbmUsYW5vaW50LGFub2xlLGFub2xpLGFub2xpYW4sYW5vbHl0ZSxhbm9tYWx5LGFub21pdGUsYW5vbXksYW5vbixhbm9uYW5nLGFub25vbCxhbm9ueW0sYW5vbnltYSxhbm9waWEsYW5vcHNpYSxhbm9yYWssYW5vcmV4eSxhbm9ybWFsLGFub3J0aCxhbm9zbWlhLGFub3NtaWMsYW5vdGhlcixhbm90aWEsYW5vdHRhLGFub3R0byxhbm90dXMsYW5vdW5vdSxhbm94aWEsYW5veGljLGFuc2EsYW5zYXIsYW5zYXRlLGFuc3UsYW5zd2VyLGFudCxhbnRhLGFudGFjaWQsYW50YWwsYW50YXBleCxhbnRkb20sYW50ZSxhbnRlYWN0LGFudGVhbCxhbnRlZml4LGFudGVubmEsYW50ZXMsYW50ZXdhcixhbnRoZWxhLGFudGhlbSxhbnRoZW1hLGFudGhlbXksYW50aGVyLGFudGhpbGwsYW50aGluZSxhbnRob2lkLGFudGhvb2QsYW50aHJheCxhbnRocm9sLGFudGhyeWwsYW50aSxhbnRpYWUsYW50aWFyLGFudGljLGFudGljYWwsYW50aWNseSxhbnRpY29yLGFudGljdW0sYW50aWZhdCxhbnRpZ2VuLGFudGlnb2QsYW50aWh1bSxhbnRpcXVhLGFudGlxdWUsYW50aXJlZCxhbnRpcnVuLGFudGlzdW4sYW50aXRheCxhbnRpd2FyLGFudGl3aXQsYW50bGVyLGFudGxpYSxhbnRsaW5nLGFudG9lY2ksYW50b255bSxhbnRyYSxhbnRyYWwsYW50cmUsYW50cmluLGFudHJ1bSxhbnRzaGlwLGFudHUsYW50d2lzZSxhbnViaW5nLGFudWxvbWEsYW51cmFuLGFudXJpYSxhbnVyaWMsYW51cm91cyxhbnVyeSxhbnVzLGFudXNpbSxhbnZpbCxhbnhpZXR5LGFueGlvdXMsYW55LGFueWJvZHksYW55aG93LGFueW9uZSxhbnl3YXksYW55d2F5cyxhbnl3aGVuLGFueXdoeSxhbnl3aXNlLGFvZ2lyaSxhb25hY2gsYW9yaXN0LGFvcnRhLGFvcnRhbCxhb3J0aWMsYW9ydGlzbSxhb3NtaWMsYW91ZGFkLGFwYSxhcGFjZSxhcGFjaGUsYXBhZGFuYSxhcGFnb2dlLGFwYWlkLGFwYWxpdCxhcGFuZHJ5LGFwYXIsYXBhcmVqbyxhcGFydCxhcGFzb3RlLGFwYXRhbixhcGF0aGljLGFwYXRoeSxhcGF0aXRlLGFwZSxhcGVhayxhcGVkb20sYXBlaG9vZCxhcGVpcm9uLGFwZWxldCxhcGVsaWtlLGFwZWxpbmcsYXBlcHNpYSxhcGVwc3ksYXBlcHRpYyxhcGVyLGFwZXJjaCxhcGVyZWEsYXBlcnQsYXBlcnRseSxhcGVyeSxhcGV0YWx5LGFwZXgsYXBleGVkLGFwaGFnaWEsYXBoYWtpYSxhcGhha2ljLGFwaGFzaWEsYXBoYXNpYyxhcGhlbWlhLGFwaGVtaWMsYXBoZXNpcyxhcGhldGEsYXBoZXRpYyxhcGhpZCxhcGhpZGVzLGFwaGlkaWQsYXBob2RhbCxhcGhvZHVzLGFwaG9uaWEsYXBob25pYyxhcGhvbnksYXBob3JpYSxhcGhvdGljLGFwaHJpdGUsYXBodGhhLGFwaHRoaWMsYXBoeWxseSxhcGh5cmljLGFwaWFuLGFwaWFyeSxhcGlhdG9yLGFwaWNhZCxhcGljYWwsYXBpY2VzLGFwaWN1bGEsYXBpZWNlLGFwaWVjZXMsYXBpaSxhcGlpbixhcGlsYXJ5LGFwaW5jaCxhcGluZyxhcGlub2lkLGFwaW8sYXBpb2lkLGFwaW9sZSxhcGlvbGluLGFwaW9ub2wsYXBpb3NlLGFwaXNoLGFwaXNobHksYXBpc20sYXBpdG9uZyxhcGl0cGF0LGFwbGFuYXQsYXBsYXNpYSxhcGxlbnR5LGFwbGl0ZSxhcGxpdGljLGFwbG9tYixhcGxvbWUsYXBuZWEsYXBuZWFsLGFwbmVpYyxhcG9jYXJwLGFwb2NoYSxhcG9jb3BlLGFwb2QsYXBvZGFsLGFwb2RhbixhcG9kZW1hLGFwb2RlbWUsYXBvZGlhLGFwb2RvdXMsYXBvZ2FteSxhcG9nZWFsLGFwb2dlYW4sYXBvZ2VlLGFwb2dlaWMsYXBvZ2VueSxhcG9oeWFsLGFwb2lzZSxhcG9qb3ZlLGFwb2tyZWEsYXBvbGFyLGFwb2xvZ3ksYXBvbmlhLGFwb25pYyxhcG9vcCxhcG9wbGV4LGFwb3B5bGUsYXBvcmlhLGFwb3Jvc2UsYXBvcnQsYXBvc2lhLGFwb3Nvcm8sYXBvc3RpbCxhcG9zdGxlLGFwb3RoZW0sYXBvdG9tZSxhcG90eXBlLGFwb3V0LGFwb3plbSxhcG96ZW1hLGFwcGFsbCxhcHBhcmVsLGFwcGF5LGFwcGVhbCxhcHBlYXIsYXBwZWFzZSxhcHBlbmQsYXBwZXQsYXBwZXRlLGFwcGxhdWQsYXBwbGUsYXBwbGllZCxhcHBsaWVyLGFwcGxvdCxhcHBseSxhcHBvaW50LGFwcG9ydCxhcHBvc2UsYXBwb3NlcixhcHByZW5kLGFwcHJpc2UsYXBwcml6ZSxhcHByb29mLGFwcHJvdmUsYXBwdWxzZSxhcHJheGlhLGFwcmF4aWMsYXByaWNvdCxhcHJpb3JpLGFwcm9uLGFwcm9wb3MsYXBzZSxhcHNpZGFsLGFwc2lkZXMsYXBzaXMsYXB0LGFwdGVyYWwsYXB0ZXJhbixhcHRseSxhcHRuZXNzLGFwdG90ZSxhcHRvdGljLGFwdWxzZSxhcHlvbmluLGFweXJlbmUsYXB5cmV4eSxhcHlyb3VzLGFxdWEsYXF1YWJpYixhcXVhZ2UsYXF1YXJpYSxhcXVhdGljLGFxdWF2aXQsYXF1ZW91cyxhcXVpZmVyLGFxdWl2ZXIsYXF1byxhcXVvc2UsYXIsYXJhLGFyYWJhLGFyYWJhbixhcmFiYW5hLGFyYWJpbixhcmFiaXQsYXJhYmxlLGFyYWNhLGFyYWNhcmksYXJhY2hpYyxhcmFjaGluLGFyYWQsYXJhZG8sYXJhaW4sYXJha2UsYXJhbGlhZCxhcmFsaWUsYXJhbGt5bCxhcmFtaW5hLGFyYW5laWQsYXJhbmVpbixhcmFuZ2EsYXJhbmdvLGFyYXIsYXJhcmEsYXJhcmFvLGFyYXJpYmEsYXJhcm9iYSxhcmF0aSxhcmF0aW9uLGFyYXRvcnksYXJiYSxhcmJhY2luLGFyYmFsbyxhcmJpdGVyLGFyYm9yLGFyYm9yYWwsYXJib3JlZCxhcmJvcmV0LGFyYnV0ZSxhcmJ1dGluLGFyYnV0dXMsYXJjLGFyY2EsYXJjYWRlLGFyY2FuYSxhcmNhbmFsLGFyY2FuZSxhcmNhbnVtLGFyY2F0ZSxhcmNoLGFyY2hhZSxhcmNoYWljLGFyY2hlLGFyY2hlYWwsYXJjaGVkLGFyY2hlcixhcmNoZXJ5LGFyY2hlcyxhcmNoZXVzLGFyY2hmb2UsYXJjaGdvZCxhcmNoaWwsYXJjaGluZyxhcmNoaXZlLGFyY2hseSxhcmNob24sYXJjaG9udCxhcmNoc2VlLGFyY2hzaW4sYXJjaHNweSxhcmNod2FnLGFyY2h3YXksYXJjaHksYXJjaW5nLGFyY2tlZCxhcmNraW5nLGFyY3RpYW4sYXJjdGljLGFyY3RpaWQsYXJjdG9pZCxhcmN1YWwsYXJjdWFsZSxhcmN1YXRlLGFyY3VsYSxhcmRlYixhcmRlbGxhLGFyZGVuY3ksYXJkZW50LGFyZGlzaCxhcmRvaXNlLGFyZG9yLGFyZHJpLGFyZHUsYXJkdW91cyxhcmUsYXJlYSxhcmVhY2gsYXJlYWQsYXJlYWwsYXJlYXIsYXJlYXdheSxhcmVjYWluLGFyZWQsYXJlZWssYXJlZWwsYXJlZmFjdCxhcmVpdG8sYXJlbmEsYXJlbmFlLGFyZW5kLGFyZW5nLGFyZW5vaWQsYXJlbm9zZSxhcmVudCxhcmVvbGEsYXJlb2xhcixhcmVvbGUsYXJlb2xldCxhcmV0ZSxhcmdhbCxhcmdhbGEsYXJnYWxpLGFyZ2Fucyxhcmdhc2lkLGFyZ2VlcnMsYXJnZWwsYXJnZW5vbCxhcmdlbnQsYXJnaGFuLGFyZ2hlbCxhcmdob29sLGFyZ2lsLGFyZ28sYXJnb2wsYXJnb2xldCxhcmdvbixhcmdvc3ksYXJnb3QsYXJnb3RpYyxhcmd1ZSxhcmd1ZXIsYXJndWZ5LGFyZ3V0ZSxhcmd5cmlhLGFyZ3lyaWMsYXJoYXIsYXJoYXQsYXJpYSxhcmliaW5lLGFyaWNpbmUsYXJpZCxhcmlkZ2UsYXJpZGlhbixhcmlkaXR5LGFyaWRseSxhcmllbCxhcmllbnpvLGFyaWV0dGEsYXJpZ2h0LGFyaWd1ZSxhcmlsLGFyaWxlZCxhcmlsbHVzLGFyaW9zZSxhcmlvc28sYXJpb3QsYXJpcHBsZSxhcmlzYXJkLGFyaXNlLGFyaXNlbixhcmlzdCxhcmlzdGEsYXJpdGUsYXJqdW4sYXJrLGFya2l0ZSxhcmtvc2UsYXJrb3NpYyxhcmxlcyxhcm0sYXJtYWRhLGFybWJvbmUsYXJtZWQsYXJtZXIsYXJtZXQsYXJtZnVsLGFybWhvbGUsYXJtaG9vcCxhcm1pZWQsYXJtaWdlcixhcm1pbCxhcm1pbGxhLGFybWluZyxhcm1sZXNzLGFybWxldCxhcm1sb2FkLGFybW9pcmUsYXJtb3IsYXJtb3JlZCxhcm1vcmVyLGFybW9yeSxhcm1waXQsYXJtcmFjayxhcm1yZXN0LGFybXMsYXJtc2N5ZSxhcm11cmUsYXJteSxhcm4sYXJuYSxhcm5lZSxhcm5pLGFybmljYSxhcm5vdHRhLGFybm90dG8sYXJudXQsYXJvYXIsYXJvYXN0LGFyb2NrLGFyb2VpcmEsYXJvaWQsYXJvaW50LGFyb2xpdW0sYXJvbGxhLGFyb21hLGFyb29uLGFyb3NlLGFyb3VuZCxhcm91c2FsLGFyb3VzZSxhcm91c2VyLGFyb3csYXJveHlsLGFycGVuLGFycGVudCxhcnJhY2ssYXJyYWgsYXJyYWlnbixhcnJhbWUsYXJyYW5nZSxhcnJhbnQsYXJyYXMsYXJyYXNlZCxhcnJhdGVsLGFycmF1LGFycmF5LGFycmF5YWwsYXJyYXllcixhcnJlYXIsYXJyZWN0LGFycmVudCxhcnJlc3QsYXJyaWFnZSxhcnJpYmEsYXJyaWRlLGFycmlkZ2UsYXJyaWUsYXJyaWVyZSxhcnJpbWJ5LGFycmlzLGFycmlzaCxhcnJpdmFsLGFycml2ZSxhcnJpdmVyLGFycm9iYSxhcnJvcGUsYXJyb3csYXJyb3dlZCxhcnJvd3ksYXJyb3lvLGFyc2UsYXJzZW5hbCxhcnNlbmljLGFyc2VubyxhcnNlbnlsLGFyc2VzLGFyc2hlZW4sYXJzaGluLGFyc2hpbmUsYXJzaW5lLGFyc2luaWMsYXJzaW5vLGFyc2lzLGFyc2xlLGFyc29pdGUsYXJzb24sYXJzb25pYyxhcnNvbm8sYXJzeWwsYXJ0LGFydGFiYSxhcnRhYmUsYXJ0YWwsYXJ0YXIsYXJ0ZWwsYXJ0ZXJpbixhcnRlcnksYXJ0ZnVsLGFydGhhLGFydGhlbCxhcnRocmFsLGFydGlhZCxhcnRpY2xlLGFydGlzYW4sYXJ0aXN0LGFydGlzdGUsYXJ0bGVzcyxhcnRsZXQsYXJ0bGlrZSxhcnR3YXJlLGFydHksYXJ1LGFydWksYXJ1a2UsYXJ1bWluLGFydXBhLGFydXNhLGFydXNoYSxhcnVzdGxlLGFydmFsLGFydmVsLGFyeCxhcnksYXJ5bCxhcnlsYXRlLGFyemFuLGFyenVuLGFzLGFzYWRkbGUsYXNhayxhc2FsZSxhc2FuYSxhc2FwaGlhLGFzYXBoaWQsYXNhcHJvbCxhc2FyaXRlLGFzYXJvbixhc2Fyb25lLGFzYmVzdCxhc2JvbGluLGFzY2FuLGFzY2FyZSxhc2NhcmlkLGFzY2Fyb24sYXNjZW5kLGFzY2VudCxhc2NldGljLGFzY2hhbSxhc2NpLGFzY2lhbixhc2NpaSxhc2NpdGVzLGFzY2l0aWMsYXNjbGVudCxhc2NvbWEsYXNjb24sYXNjb3QsYXNjcmliZSxhc2NyaXB0LGFzY3J5LGFzY3VsYSxhc2N1cyxhc2RpYyxhc2UsYXNlYXJjaCxhc2VldGhlLGFzZWl0eSxhc2VtLGFzZW1pYSxhc2Vwc2lzLGFzZXB0aWMsYXNlcHRvbCxhc2V4dWFsLGFzaCxhc2hha2UsYXNoYW1lLGFzaGFtZWQsYXNoYW1udSxhc2hjYWtlLGFzaGVuLGFzaGVyYWgsYXNoZXJ5LGFzaGVzLGFzaGV0LGFzaGlseSxhc2hpbmUsYXNoaXZlcixhc2hrb2tvLGFzaGxhcixhc2hsZXNzLGFzaGxpbmcsYXNobWFuLGFzaG9yZSxhc2hwYW4sYXNocGl0LGFzaHJhZixhc2hyYWZpLGFzaHVyLGFzaHdlZWQsYXNod29ydCxhc2h5LGFzaWFsaWEsYXNpZGUsYXNpZGV1LGFzaWVudG8sYXNpbGlkLGFzaW1lbixhc2ltbWVyLGFzaW5lZ28sYXNpbmluZSxhc2l0aWEsYXNrLGFza2FibGUsYXNrYW5jZSxhc2thbnQsYXNrYXIsYXNrYXJpLGFza2VyLGFza2V3LGFza2lwLGFza2xlbnQsYXNrb3MsYXNsYW50LGFzbGF2ZXIsYXNsZWVwLGFzbG9wLGFzbG9wZSxhc21hY2ssYXNtYWx0ZSxhc21lYXIsYXNtaWxlLGFzbW9rZSxhc25vcnQsYXNvYWssYXNvY2lhbCxhc29rLGFzb2thLGFzb25hbnQsYXNvbmlhLGFzb3AsYXNvcixhc291dGgsYXNwLGFzcGFjZSxhc3BlY3QsYXNwZW4sYXNwZXIsYXNwZXJnZSxhc3BlcnNlLGFzcGhhbHQsYXNwaHl4eSxhc3BpYyxhc3BpcmUsYXNwaXJlcixhc3BpcmluLGFzcGlzaCxhc3BvcnQsYXNwb3V0LGFzcHJhd2wsYXNwcmVhZCxhc3ByaW5nLGFzcHJvdXQsYXNxdWFyZSxhc3F1YXQsYXNxdWVhbCxhc3F1aW50LGFzcXVpcm0sYXNzLGFzc2FjdSxhc3NhZ2FpLGFzc2FpLGFzc2FpbCxhc3NhcGFuLGFzc2FydCxhc3NhcnksYXNzYXRlLGFzc2F1bHQsYXNzYXV0LGFzc2F5LGFzc2F5ZXIsYXNzYmFhLGFzc2UsYXNzZWdhaSxhc3NlbGYsYXNzZW50LGFzc2VydCxhc3Nlc3MsYXNzZXQsYXNzZXRzLGFzc2V2ZXIsYXNzaGVhZCxhc3NpLGFzc2lmeSxhc3NpZ24sYXNzaWxhZyxhc3Npcyxhc3Npc2UsYXNzaXNoLGFzc2lzdCxhc3NpemUsYXNzaXplcixhc3NpemVzLGFzc2xpa2UsYXNzbWFuLGFzc29pbCxhc3NvcnQsYXNzdWFkZSxhc3N1YWdlLGFzc3VtZSxhc3N1bWVkLGFzc3VtZXIsYXNzdXJlLGFzc3VyZWQsYXNzdXJlcixhc3N1cmdlLGFzdCxhc3RhLGFzdGFsayxhc3RhcmUsYXN0YXJ0LGFzdGFzaWEsYXN0YXRpYyxhc3RheSxhc3RlYW0sYXN0ZWVwLGFzdGVlcixhc3RlaXNtLGFzdGVsaWMsYXN0ZWx5LGFzdGVyLGFzdGVyaWEsYXN0ZXJpbixhc3Rlcm4sYXN0aGVueSxhc3RobWEsYXN0aG9yZSxhc3RpbGJlLGFzdGludCxhc3Rpcixhc3RpdGUsYXN0b21pYSxhc3RvbnksYXN0b29wLGFzdG9yLGFzdG91bmQsYXN0cmFpbixhc3RyYWwsYXN0cmFuZCxhc3RyYXksYXN0cmVhbSxhc3RyZXIsYXN0cmljdCxhc3RyaWRlLGFzdHJpZXIsYXN0cmlsZCxhc3Ryb2lkLGFzdHJ1dCxhc3R1dGUsYXN0eWxhcixhc3VkZGVuLGFzdW5kZXIsYXN3YWlsLGFzd2FybSxhc3dheSxhc3dlYXQsYXN3ZWxsLGFzd2ltLGFzd2luZyxhc3dpcmwsYXN3b29uLGFzeWxhLGFzeWx1bSxhdCxhdGFiYWwsYXRhYmVnLGF0YWJlayxhdGFjdGljLGF0YWZ0ZXIsYXRhbWFuLGF0YW5nbGUsYXRhcCxhdGFyYXh5LGF0YXVudCxhdGF2aSxhdGF2aWMsYXRhdmlzbSxhdGF2aXN0LGF0YXZ1cyxhdGF4aWEsYXRheGljLGF0YXhpdGUsYXRheHksYXRhemlyLGF0YmFzaCxhdGUsYXRlYnJpbixhdGVjaG55LGF0ZWV0ZXIsYXRlZixhdGVsZXRzLGF0ZWxpZXIsYXRlbG8sYXRlcyxhdGV1Y2hpLGF0aGFub3IsYXRoYXIsYXRoZWlzbSxhdGhlaXN0LGF0aGVpemUsYXRoZWxpYSxhdGhlbmVlLGF0aGVub3IsYXRoZW91cyxhdGhpbmcsYXRoaXJzdCxhdGhsZXRlLGF0aG9keWQsYXRob3J0LGF0aHJpbGwsYXRocml2ZSxhdGhyb2IsYXRocm9uZyxhdGh3YXJ0LGF0aHltaWEsYXRoeW1pYyxhdGh5bXksYXRoeXJpYSxhdGh5cmlkLGF0aWx0LGF0aW1vbixhdGluZ2EsYXRpbmdsZSxhdGlua2xlLGF0aXAsYXRpcyxhdGxhcyxhdGxhdGwsYXRsZSxhdGxlZSxhdGxvaWQsYXRtYSxhdG1hbixhdG1pZCxhdG1vLGF0bW9zLGF0b2NoYSxhdG9jaWEsYXRva2FsLGF0b2tlLGF0b2tvdXMsYXRvbGwsYXRvbSxhdG9tZXJnLGF0b21pYyxhdG9taWNzLGF0b21pc20sYXRvbWlzdCxhdG9taXR5LGF0b21pemUsYXRvbXksYXRvbmFsLGF0b25lLGF0b25lcixhdG9uaWEsYXRvbmljLGF0b255LGF0b3AsYXRvcGhhbixhdG9waWMsYXRvcGl0ZSxhdG9weSxhdG91cixhdG94aWMsYXRveHlsLGF0cmFpbCxhdHJlcHN5LGF0cmVzaWEsYXRyZXNpYyxhdHJlc3ksYXRyZXRpYyxhdHJpYSxhdHJpYWwsYXRyaXAsYXRyaXVtLGF0cm9jaGEsYXRyb3BhbCxhdHJvcGh5LGF0cm9waWEsYXRyb3BpYyxhdHJvdXMsYXRyeSxhdHRhLGF0dGFjY28sYXR0YWNoLGF0dGFjaGUsYXR0YWNrLGF0dGFjdXMsYXR0YWdlbixhdHRhaW4sYXR0YWludCxhdHRhbGVoLGF0dGFyLGF0dGFzayxhdHRlbXB0LGF0dGVuZCxhdHRlbnQsYXR0ZXIsYXR0ZXJuLGF0dGVyeSxhdHRlc3QsYXR0aWMsYXR0aWQsYXR0aW5nZSxhdHRpcmUsYXR0aXJlZCxhdHRpcmVyLGF0dG9ybixhdHRyYWN0LGF0dHJhcCxhdHRyaXN0LGF0dHJpdGUsYXR0dW5lLGF0dWxlLGF0dW1ibGUsYXR1bmUsYXR3YWluLGF0d2VlbCxhdHdlZW4sYXR3aW4sYXR3aXJsLGF0d2lzdCxhdHdpdGNoLGF0d2l4dCxhdHdvLGF0eXBpYyxhdHlweSxhdWFudGljLGF1YmUsYXVicml0ZSxhdWJ1cm4sYXVjYSxhdWNobGV0LGF1Y3Rpb24sYXVjdWJhLGF1ZGlibGUsYXVkaWJseSxhdWRpZW50LGF1ZGlsZSxhdWRpbyxhdWRpb24sYXVkaXQsYXVkaXRvcixhdWdlLGF1Z2VuLGF1Z2VuZCxhdWdlcixhdWdlcmVyLGF1Z2gsYXVnaHQsYXVnaXRlLGF1Z2l0aWMsYXVnbWVudCxhdWd1cixhdWd1cmFsLGF1Z3VyeSxhdWd1c3QsYXVoLGF1aHVodSxhdWssYXVrbGV0LGF1bGEsYXVsYWUsYXVsZCxhdWxldGFpLGF1bGV0ZSxhdWxldGVzLGF1bGV0aWMsYXVsaWMsYXVsb2ksYXVsb3MsYXVsdSxhdW0sYXVtYWdhLGF1bWFpbCxhdW1icnksYXVtZXJ5LGF1bWlsLGF1bW91cyxhdW1yaWUsYXVuY2VsLGF1bmUsYXVudCxhdW50aWUsYXVudGlzaCxhdW50bHksYXVwYWthLGF1cmEsYXVyYWUsYXVyYWwsYXVyYWxseSxhdXJhcixhdXJhdGUsYXVyYXRlZCxhdXJlYXRlLGF1cmVpdHksYXVyZWxpYSxhdXJlb2xhLGF1cmVvbGUsYXVyZW91cyxhdXJlc2NhLGF1cmV1cyxhdXJpYyxhdXJpY2xlLGF1cmlkZSxhdXJpZmljLGF1cmlmeSxhdXJpZ2FsLGF1cmluLGF1cmlyLGF1cmlzdCxhdXJpdGUsYXVyb2NocyxhdXJvbmFsLGF1cm9yYSxhdXJvcmFlLGF1cm9yYWwsYXVyb3JlLGF1cm91cyxhdXJ1bSxhdXJ1cmUsYXVyeWwsYXVzY3VsdCxhdXNsYXV0LGF1c3BleCxhdXNwaWNlLGF1c3BpY3ksYXVzdGVyZSxhdXN0cmFsLGF1c3UsYXVzdWJvLGF1dGFyY2gsYXV0YXJreSxhdXRlLGF1dGVjeSxhdXRlbSxhdXRob3IsYXV0aXNtLGF1dGlzdCxhdXRvLGF1dG9idXMsYXV0b2NhYixhdXRvY2FyLGF1dG9lY3ksYXV0b2lzdCxhdXRvbWEsYXV0b21hdCxhdXRvbnltLGF1dG9wc3ksYXV0dW1uLGF1eGVzaXMsYXV4ZXRpYyxhdXhpbixhdXhpbmljLGF1eG90b3gsYXZhLGF2YWRhbmEsYXZhaGksYXZhaWwsYXZhbCxhdmFsZW50LGF2YW5pYSxhdmFyaWNlLGF2YXN0LGF2YXVudCxhdmUsYXZlbGxhbixhdmVsb3osYXZlbmFnZSxhdmVuZXIsYXZlbmdlLGF2ZW5nZXIsYXZlbmluLGF2ZW5vdXMsYXZlbnMsYXZlbnVlLGF2ZXIsYXZlcmEsYXZlcmFnZSxhdmVyYWgsYXZlcmlsLGF2ZXJpbixhdmVycmFsLGF2ZXJzZSxhdmVydCxhdmVydGVkLGF2ZXJ0ZXIsYXZpYW4sYXZpYXJ5LGF2aWF0ZSxhdmlhdGljLGF2aWF0b3IsYXZpY2hpLGF2aWNpZGUsYXZpY2ssYXZpZCxhdmlkaXR5LGF2aWRseSxhdmlkb3VzLGF2aWR5YSxhdmlnYXRlLGF2aWpqYSxhdmluZSxhdmlzbyxhdml0YWwsYXZpdGljLGF2aXZlcyxhdm8sYXZvY2Fkbyxhdm9jYXRlLGF2b2NldCxhdm9kaXJlLGF2b2lkLGF2b2lkZXIsYXZvbGF0ZSxhdm91Y2gsYXZvdyxhdm93YWwsYXZvd2FudCxhdm93ZWQsYXZvd2VyLGF2b3dyeSxhdm95ZXIsYXZ1bHNlLGF3LGF3YSxhd2FiaSxhd2FmdCxhd2FnLGF3YWl0LGF3YWl0ZXIsYXdha2UsYXdha2VuLGF3YWxkLGF3YWxpbSxhd2FsdCxhd2FuZSxhd2FwdWhpLGF3YXJkLGF3YXJkZXIsYXdhcmUsYXdhc2gsYXdhc3RlLGF3YXQsYXdhdGNoLGF3YXRlcixhd2F2ZSxhd2F5LGF3YmVyLGF3ZCxhd2UsYXdlYXJ5LGF3ZWJhbmQsYXdlZSxhd2Vlayxhd2VlbCxhd2VpZ2gsYXdlc29tZSxhd2VzdCxhd2V0byxhd2Z1LGF3ZnVsLGF3ZnVsbHksYXdoZWVsLGF3aGVmdCxhd2hldCxhd2hpbGUsYXdoaXIsYXdoaXJsLGF3aWRlLGF3aWdnbGUsYXdpbixhd2luZyxhd2luayxhd2l3aSxhd2t3YXJkLGF3bCxhd2xlc3MsYXdsd29ydCxhd21vdXMsYXduLGF3bmVkLGF3bmVyLGF3bmluZyxhd25sZXNzLGF3bmxpa2UsYXdueSxhd29rZSxhd29yayxhd3JlY2ssYXdyaXN0LGF3cm9uZyxhd3J5LGF4LGF4YWwsYXhlLGF4ZWQsYXhlbmljLGF4ZXMsYXhmZXRjaCxheGhlYWQsYXhpYWwsYXhpYWxseSxheGlhdGUsYXhpZm9ybSxheGlsLGF4aWxlLGF4aWxsYSxheGlsbGFlLGF4aWxsYXIsYXhpbmUsYXhpbml0ZSxheGlvbSxheGlvbixheGlzLGF4aXNlZCxheGl0ZSxheGxlLGF4bGVkLGF4bWFrZXIsYXhtYW4sYXhvZ2FteSxheG9pZCxheG9sb3RsLGF4b24sYXhvbmFsLGF4b25vc3QsYXhzZWVkLGF4c3RvbmUsYXh0cmVlLGF4dW5nZSxheHdlZWQsYXh3aXNlLGF4d29ydCxheSxheWFoLGF5ZSxheWVscCxheWluLGF5bGVzcyxheWxldCxheWxsdSxheW9uZCxheW9udCxheW91cyxheXUsYXphZnJpbixhemFsZWEsYXphcm9sZSxhemVsYWljLGF6ZWxhdGUsYXppZGUsYXppbHV0LGF6aW1lbmUsYXppbWlkZSxhemltaW5lLGF6aW1pbm8sYXppbXV0aCxhemluZSxhemlvbGEsYXpvLGF6b2NoLGF6b2ZpZXIsYXpvZnksYXpvaWMsYXpvbGUsYXpvbixhem9uYWwsYXpvbmljLGF6b25pdW0sYXpvcGhlbixhem9yaXRlLGF6b3RhdGUsYXpvdGUsYXpvdGVkLGF6b3RoLGF6b3RpYyxhem90aW5lLGF6b3RpdGUsYXpvdGl6ZSxhem90b3VzLGF6b3gsYXpveGltZSxhem94aW5lLGF6b3h5LGF6dGVjYSxhenVsZW5lLGF6dWxpdGUsYXp1bG1pYyxhenVtYnJlLGF6dXJlLGF6dXJlYW4sYXp1cmVkLGF6dXJpbmUsYXp1cml0ZSxhenVyb3VzLGF6dXJ5LGF6eWdvcyxhenlnb3VzLGF6eW1lLGF6eW1pdGUsYXp5bW91cyxiLGJhLGJhYSxiYWFsLGJhYXIsYmFiYSxiYWJhaSxiYWJhc2NvLGJhYmFzc3UsYmFiYml0dCxiYWJibGUsYmFiYmxlcixiYWJibHksYmFiYnksYmFiZSxiYWJlbGV0LGJhYmVyeSxiYWJpY2hlLGJhYmllZCxiYWJpc2gsYmFibGFoLGJhYmxvaCxiYWJvZW4sYmFib28sYmFib29uLGJhYm9vdCxiYWJyb290LGJhYnUsYmFidWRvbSxiYWJ1aW5hLGJhYnVpc20sYmFidWwsYmFieSxiYWJ5ZG9tLGJhYnlpc2gsYmFieWlzbSxiYWMsYmFjYWJhLGJhY2FjaCxiYWNhbGFvLGJhY2FvLGJhY2NhLGJhY2NhZSxiYWNjYXJhLGJhY2NhdGUsYmFjY2hhcixiYWNjaGljLGJhY2NoaWksYmFjaCxiYWNoZSxiYWNoZWwsYmFjaWxsaSxiYWNrLGJhY2thZ2UsYmFja2NhcCxiYWNrZWQsYmFja2VuLGJhY2tlcixiYWNrZXQsYmFja2llLGJhY2tpbmcsYmFja2phdyxiYWNrbGV0LGJhY2tsb2csYmFja3J1bixiYWNrc2F3LGJhY2tzZXQsYmFja3VwLGJhY2t3YXksYmFjbGluLGJhY29uLGJhY29uZXIsYmFjb255LGJhY3VsYSxiYWN1bGUsYmFjdWxpLGJhY3VsdW0sYmFjdWx1cyxiYWN1cnksYmFkLGJhZGFuLGJhZGRpc2gsYmFkZG9jayxiYWRlLGJhZGdlLGJhZGdlcixiYWRpYWdhLGJhZGlhbixiYWRpb3VzLGJhZGxhbmQsYmFkbHksYmFkbmVzcyxiYWUsYmFldHVsaSxiYWV0eWwsYmFmYXJvLGJhZmYsYmFmZmV0YSxiYWZmbGUsYmFmZmxlcixiYWZmeSxiYWZ0LGJhZnRhLGJhZyxiYWdhLGJhZ2FuaSxiYWdhc3NlLGJhZ2VsLGJhZ2Z1bCxiYWdnYWdlLGJhZ2dhbGEsYmFnZ2VkLGJhZ2dlcixiYWdnaWUsYmFnZ2lseSxiYWdnaW5nLGJhZ2dpdCxiYWdneSxiYWdsaWtlLGJhZ21hbixiYWduaW8sYmFnbnV0LGJhZ28sYmFnb25ldCxiYWdwaXBlLGJhZ3JlLGJhZ3JlZWYsYmFncm9vbSxiYWd3aWcsYmFnd29ybSxiYWd3eW4sYmFoLGJhaGFuLGJhaGFyLGJhaGF5LGJhaGVyYSxiYWhpc3RpLGJhaG51bmcsYmFobyxiYWhvZSxiYWhvbyxiYWh0LGJhaHVyLGJhaHV0LGJhaWduZXQsYmFpa2llLGJhaWwsYmFpbGFnZSxiYWlsZWUsYmFpbGVyLGJhaWxleSxiYWlsaWUsYmFpbGlmZixiYWlsb3IsYmFpbixiYWluaWUsYmFpb2MsYmFpb2NjbyxiYWlyYWdpLGJhaXJuLGJhaXJuaWUsYmFpcm5seSxiYWlzdGVyLGJhaXQsYmFpdGVyLGJhaXRoLGJhaXR0bGUsYmFpemUsYmFqYWRhLGJhamFuLGJhanJhLGJhanJlZSxiYWpyaSxiYWp1cnksYmFrYSxiYWthbCxiYWtlLGJha2VkLGJha2VuLGJha2VwYW4sYmFrZXIsYmFrZXJseSxiYWtlcnksYmFraWUsYmFraW5nLGJha2xpLGJha3R1bixiYWt1LGJha3VsYSxiYWwsYmFsYWZvLGJhbGFnYW4sYmFsYWksYmFsYW5jZSxiYWxhbmljLGJhbGFuaWQsYmFsYW8sYmFsYXMsYmFsYXRhLGJhbGJvYSxiYWxjb255LGJhbGQsYmFsZGVuLGJhbGRlcixiYWxkaXNoLGJhbGRseSxiYWxkcmliLGJhbGRyaWMsYmFsZHksYmFsZSxiYWxlZW4sYmFsZWZ1bCxiYWxlaSxiYWxlaXNlLGJhbGVyLGJhbGV0ZSxiYWxpLGJhbGluZSxiYWxpdGEsYmFsayxiYWxrZXIsYmFsa3ksYmFsbCxiYWxsYWQsYmFsbGFkZSxiYWxsYW0sYmFsbGFuLGJhbGxhbnQsYmFsbGFzdCxiYWxsYXRhLGJhbGxhdGUsYmFsbGRvbSxiYWxsZWQsYmFsbGVyLGJhbGxldCxiYWxsaSxiYWxsaXN0LGJhbGxpdW0sYmFsbG9vbixiYWxsb3QsYmFsbG93LGJhbGx1cCxiYWxseSxiYWxtLGJhbG1pbHksYmFsbW9ueSxiYWxteSxiYWxuZWFsLGJhbG9uZWEsYmFsb25leSxiYWxvbyxiYWxvdyxiYWxzYSxiYWxzYW0sYmFsc2FtbyxiYWxzYW15LGJhbHRlaSxiYWx0ZXIsYmFsdGV1cyxiYWx1LGJhbHV0LGJhbHphLGJhbSxiYW1iYW4sYmFtYmluaSxiYW1iaW5vLGJhbWJvbyxiYW1vdGgsYmFuLGJhbmFiYSxiYW5hZ28sYmFuYWssYmFuYWwsYmFuYWxseSxiYW5hbmEsYmFuYXQsYmFuYyxiYW5jYSxiYW5jYWwsYmFuY2hpLGJhbmNvLGJhbmN1cyxiYW5kLGJhbmRhLGJhbmRhZ2UsYmFuZGFrYSxiYW5kYWxhLGJhbmRhcixiYW5kYm94LGJhbmRlLGJhbmRlYXUsYmFuZGVkLGJhbmRlcixiYW5kaHUsYmFuZGksYmFuZGllLGJhbmRpbmcsYmFuZGl0LGJhbmRsZSxiYW5kbGV0LGJhbmRtYW4sYmFuZG8sYmFuZG9nLGJhbmRvcmUsYmFuZHJvbCxiYW5keSxiYW5lLGJhbmVmdWwsYmFuZyxiYW5nYSxiYW5nZSxiYW5nZXIsYmFuZ2h5LGJhbmdpbmcsYmFuZ2tvayxiYW5nbGUsYmFuZ2xlZCxiYW5pLGJhbmlhbixiYW5pZyxiYW5pbGFkLGJhbmlzaCxiYW5pd2EsYmFuaXlhLGJhbmpvLGJhbmpvcmUsYmFuanVrZSxiYW5rLGJhbmtlZCxiYW5rZXIsYmFua2VyYSxiYW5rZXQsYmFua2luZyxiYW5rbWFuLGJhbmt5LGJhbm5lcixiYW5uZXQsYmFubmluZyxiYW5ub2NrLGJhbm5zLGJhbm51dCxiYW5xdWV0LGJhbnNoZWUsYmFudCxiYW50YW0sYmFudGF5LGJhbnRlbmcsYmFudGVyLGJhbnRlcnksYmFudHksYmFudXlvLGJhbnlhLGJhbnlhbixiYW56YWksYmFvYmFiLGJhcCxiYXB0aXNtLGJhcHRpemUsYmFyLGJhcmEsYmFyYWQsYmFyYXVuYSxiYXJiLGJhcmJhbCxiYXJiYXJ5LGJhcmJhcyxiYXJiYXRlLGJhcmJlLGJhcmJlZCxiYXJiZWwsYmFyYmVyLGJhcmJldCxiYXJiaW9uLGJhcmJsZXQsYmFyYm9uZSxiYXJidWRvLGJhcmJ1bGUsYmFyZCxiYXJkYW5lLGJhcmRhc2gsYmFyZGVsLGJhcmRlc3MsYmFyZGljLGJhcmRpZSxiYXJkaWx5LGJhcmRpbmcsYmFyZGlzaCxiYXJkaXNtLGJhcmRsZXQsYmFyZG8sYmFyZHksYmFyZSxiYXJlY2EsYmFyZWZpdCxiYXJlbHksYmFyZXIsYmFyZXNtYSxiYXJldHRhLGJhcmZmLGJhcmZpc2gsYmFyZmx5LGJhcmZ1bCxiYXJnYWluLGJhcmdlLGJhcmdlZSxiYXJnZWVyLGJhcmdlcixiYXJnaCxiYXJnaGFtLGJhcmksYmFyaWEsYmFyaWMsYmFyaWQsYmFyaWUsYmFyaWxlLGJhcmlsbGEsYmFyaW5nLGJhcmlzLGJhcmlzaCxiYXJpdCxiYXJpdGUsYmFyaXVtLGJhcmssYmFya2VuLGJhcmtlcixiYXJrZXJ5LGJhcmtleSxiYXJraGFuLGJhcmtpbmcsYmFya2xlLGJhcmt5LGJhcmxlc3MsYmFybGV5LGJhcmxpbmcsYmFybG9jayxiYXJsb3csYmFybSxiYXJtYWlkLGJhcm1hbixiYXJta2luLGJhcm1vdGUsYmFybXksYmFybixiYXJuYXJkLGJhcm5leSxiYXJuZnVsLGJhcm5tYW4sYmFybnksYmFyb2ksYmFyb2xvLGJhcm9uLGJhcm9uZXQsYmFyb25nLGJhcm9ucnksYmFyb255LGJhcm9xdWUsYmFyb3RvLGJhcnBvc3QsYmFycmEsYmFycmFjayxiYXJyYWQsYmFycmFnZSxiYXJyYXMsYmFycmVkLGJhcnJlbCxiYXJyZW4sYmFycmVyLGJhcnJldCxiYXJyaWNvLGJhcnJpZXIsYmFycmluZyxiYXJyaW8sYmFycm9vbSxiYXJyb3csYmFycnVseSxiYXJyeSxiYXJzZSxiYXJzb20sYmFydGVyLGJhcnRoLGJhcnRvbixiYXJ1LGJhcnVyaWEsYmFydmVsLGJhcndhbCxiYXJ3YXksYmFyd2F5cyxiYXJ3aXNlLGJhcndvb2QsYmFyeWUsYmFyeXRhLGJhcnl0ZXMsYmFyeXRpYyxiYXJ5dG9uLGJhcyxiYXNhbCxiYXNhbGUsYmFzYWxpYSxiYXNhbGx5LGJhc2FsdCxiYXNhcmVlLGJhc2N1bGUsYmFzZSxiYXNlZCxiYXNlbHksYmFzZW1hbixiYXNlbmppLGJhc2VzLGJhc2gsYmFzaGF3LGJhc2hmdWwsYmFzaGx5ayxiYXNpYWwsYmFzaWF0ZSxiYXNpYyxiYXNpZGlhLGJhc2lmeSxiYXNpbCxiYXNpbGFyLGJhc2lsaWMsYmFzaW4sYmFzaW5lZCxiYXNpbmV0LGJhc2lvbixiYXNpcyxiYXNrLGJhc2tlcixiYXNrZXQsYmFzb2lkLGJhc29uLGJhc29zLGJhc290ZSxiYXNxdWUsYmFzcXVlZCxiYXNzLGJhc3NhbixiYXNzYXJhLGJhc3NldCxiYXNzaWUsYmFzc2luZSxiYXNzaXN0LGJhc3NvLGJhc3Nvb24sYmFzc3VzLGJhc3QsYmFzdGEsYmFzdGFyZCxiYXN0ZSxiYXN0ZW4sYmFzdGVyLGJhc3RpZGUsYmFzdGluZyxiYXN0aW9uLGJhc3RpdGUsYmFzdG8sYmFzdG9uLGJhdCxiYXRhYW4sYmF0YWQsYmF0YWthbixiYXRhcmEsYmF0YXRhLGJhdGNoLGJhdGNoZXIsYmF0ZSxiYXRlYSxiYXRlYXUsYmF0ZWF1eCxiYXRlZCxiYXRlbCxiYXRlbWFuLGJhdGVyLGJhdGZpc2gsYmF0Zm93bCxiYXRoLGJhdGhlLGJhdGhlcixiYXRoaWMsYmF0aGluZyxiYXRobWFuLGJhdGhtaWMsYmF0aG9zLGJhdGh0dWIsYmF0aHlhbCxiYXRpayxiYXRpa2VyLGJhdGluZyxiYXRpbm8sYmF0aXN0ZSxiYXRsYW4sYmF0bGlrZSxiYXRsaW5nLGJhdGxvbixiYXRtYW4sYmF0b2lkLGJhdG9uLGJhdG9ubmUsYmF0cyxiYXRzbWFuLGJhdHN0ZXIsYmF0dCxiYXR0YSxiYXR0ZWwsYmF0dGVuLGJhdHRlcixiYXR0ZXJ5LGJhdHRpayxiYXR0aW5nLGJhdHRpc2gsYmF0dGxlLGJhdHRsZWQsYmF0dGxlcixiYXR0dWUsYmF0dHksYmF0dWxlLGJhdHdpbmcsYmF0eixiYXR6ZW4sYmF1YmxlLGJhdWNoLGJhdWNobGUsYmF1Y2tpZSxiYXVkLGJhdWwsYmF1bGVhaCxiYXVuLGJhdW5vLGJhdXNvbixiYXVzb25kLGJhdXRhLGJhdXhpdGUsYmF2YXJveSxiYXZhcnksYmF2aWFuLGJhdmllcmUsYmF2aW4sYmF2b3NvLGJhdyxiYXdiZWUsYmF3Y29jayxiYXdkLGJhd2RpbHksYmF3ZHJ5LGJhd2wsYmF3bGVyLGJhd2xleSxiYXduLGJhd3RpZSxiYXh0ZXIsYmF4dG9uZSxiYXksYmF5YSxiYXlhbCxiYXlhbW8sYmF5YXJkLGJheWJvbHQsYmF5YnVzaCxiYXljdXJ1LGJheWVkLGJheWV0YSxiYXlnYWxsLGJheWhlYWQsYmF5aXNoLGJheWxldCxiYXlsaWtlLGJheW1hbixiYXluZXNzLGJheW9rLGJheW9uZXQsYmF5b3UsYmF5d29vZCxiYXphYXIsYmF6ZSxiYXpvbyxiYXpvb2thLGJhenppdGUsYmRlbGxpZCxiZSxiZWFjaCxiZWFjaGVkLGJlYWNoeSxiZWFjb24sYmVhZCxiZWFkZWQsYmVhZGVyLGJlYWRpbHksYmVhZGluZyxiZWFkbGUsYmVhZGxldCxiZWFkbWFuLGJlYWRyb3csYmVhZHksYmVhZ2xlLGJlYWssYmVha2VkLGJlYWtlcixiZWFrZnVsLGJlYWt5LGJlYWwsYmVhbGEsYmVhbGluZyxiZWFtLGJlYW1hZ2UsYmVhbWVkLGJlYW1lcixiZWFtZnVsLGJlYW1pbHksYmVhbWluZyxiZWFtaXNoLGJlYW1sZXQsYmVhbW1hbixiZWFteSxiZWFuLGJlYW5iYWcsYmVhbmNvZCxiZWFuZXJ5LGJlYW5pZSxiZWFubyxiZWFudCxiZWFueSxiZWFyLGJlYXJkLGJlYXJkZWQsYmVhcmRlcixiZWFyZGllLGJlYXJkb20sYmVhcmR5LGJlYXJlcixiZWFyZXNzLGJlYXJpbmcsYmVhcmlzaCxiZWFybGV0LGJlYXJtLGJlYXN0LGJlYXN0aWUsYmVhc3RseSxiZWF0LGJlYXRhLGJlYXRhZSxiZWF0ZWUsYmVhdGVuLGJlYXRlcixiZWF0aCxiZWF0aWZ5LGJlYXRpbmcsYmVhdHVzLGJlYXUsYmVhdWZpbixiZWF1aXNoLGJlYXVpc20sYmVhdXRpLGJlYXV0eSxiZWF1eCxiZWF2ZXIsYmVhdmVyeSxiZWJhY2ssYmViYWl0LGJlYmFuZyxiZWJhcixiZWJhcm9uLGJlYmFzdGUsYmViYXQsYmViYXRoZSxiZWJheSxiZWJlYXN0LGJlYmVkLGJlYmVlcnUsYmViaWx5YSxiZWJpdGUsYmVibGFpbixiZWJsZWFyLGJlYmxlZCxiZWJsZXNzLGJlYmxvb2QsYmVibG9vbSxiZWJvZyxiZWJvcCxiZWJvc3MsYmVib3RjaCxiZWJyYXZlLGJlYnJpbmUsYmVicnVzaCxiZWJ1bXAsYmVidXN5LGJlY2FsbCxiZWNhbG0sYmVjYXAsYmVjYXJkLGJlY2FydmUsYmVjYXRlcixiZWNhdXNlLGJlY2Vuc2UsYmVjaGFsayxiZWNoYXJtLGJlY2hhc2UsYmVjaGVjayxiZWNoZXIsYmVjaGVybixiZWNoaXJwLGJlY2l2ZXQsYmVjayxiZWNrZXIsYmVja2V0LGJlY2tvbixiZWNsYWQsYmVjbGFuZyxiZWNsYXJ0LGJlY2xhc3AsYmVjbGF3LGJlY2xvYWssYmVjbG9nLGJlY2xvdWQsYmVjbG91dCxiZWNsb3duLGJlY29sbWUsYmVjb2xvcixiZWNvbWUsYmVjb21lcyxiZWNvbW1hLGJlY29vbSxiZWNvc3QsYmVjb3ZldCxiZWNyYW0sYmVjcmFtcCxiZWNyYXdsLGJlY3JlZXAsYmVjcmltZSxiZWNyb2FrLGJlY3Jvc3MsYmVjcm93ZCxiZWNyb3duLGJlY3J1c2gsYmVjcnVzdCxiZWNyeSxiZWN1aWJhLGJlY3VuYSxiZWN1cmwsYmVjdXJyeSxiZWN1cnNlLGJlY3V0LGJlZCxiZWRhZCxiZWRhbW4sYmVkYW1wLGJlZGFyZSxiZWRhcmssYmVkYXNoLGJlZGF1YixiZWRhd24sYmVkYXksYmVkYXplLGJlZGJ1ZyxiZWRjYXAsYmVkY2FzZSxiZWRjb3JkLGJlZGRlZCxiZWRkZXIsYmVkZGluZyxiZWRlYWQsYmVkZWFmLGJlZGVidCxiZWRlY2ssYmVkZWwsYmVkZW4sYmVkZW5lLGJlZGV2aWwsYmVkZXcsYmVkZXdlcixiZWRmYXN0LGJlZGZvb3QsYmVkZ2VyeSxiZWRnb2VyLGJlZGdvd24sYmVkaWdodCxiZWRpa2FoLGJlZGltLGJlZGluLGJlZGlwLGJlZGlydCxiZWRpcnR5LGJlZGl6ZW4sYmVka2V5LGJlZGxhbSxiZWRsYXIsYmVkbGVzcyxiZWRsaWRzLGJlZG1hbixiZWRtYXRlLGJlZG9nLGJlZG9sdCxiZWRvdCxiZWRvdGUsYmVkb3VzZSxiZWRvd24sYmVkb3lvLGJlZHBhbixiZWRwb3N0LGJlZHJhaWwsYmVkcmFsLGJlZHJhcGUsYmVkcmVzcyxiZWRyaWQsYmVkcmlmdCxiZWRyaXAsYmVkcm9jayxiZWRyb2xsLGJlZHJvb20sYmVkcm9wLGJlZHJvd24sYmVkcnVnLGJlZHNpY2ssYmVkc2lkZSxiZWRzaXRlLGJlZHNvY2ssYmVkc29yZSxiZWR0aWNrLGJlZHRpbWUsYmVkdWIsYmVkdWNrLGJlZHVrZSxiZWR1bGwsYmVkdW1iLGJlZHVuY2UsYmVkdW5jaCxiZWR1bmcsYmVkdXIsYmVkdXNrLGJlZHVzdCxiZWR3YXJmLGJlZHdheSxiZWR3YXlzLGJlZHdlbGwsYmVkeWUsYmVlLGJlZWFybixiZWVjaCxiZWVjaGVuLGJlZWNoeSxiZWVkZ2VkLGJlZWRvbSxiZWVmLGJlZWZlcixiZWVmaWx5LGJlZWZpbixiZWVmaXNoLGJlZWZ5LGJlZWhlYWQsYmVlaGVyZCxiZWVoaXZlLGJlZWlzaCxiZWVrLGJlZWtpdGUsYmVlbGJvdyxiZWVsaWtlLGJlZWxpbmUsYmVlbG9sLGJlZW1hbixiZWVuLGJlZW5udXQsYmVlcixiZWVyYWdlLGJlZXJpbHksYmVlcmlzaCxiZWVyeSxiZWVzLGJlZXN0LGJlZXN3YXgsYmVldCxiZWV0aCxiZWV0bGUsYmVldGxlZCxiZWV0bGVyLGJlZXR5LGJlZXZlLGJlZXZpc2gsYmVld2FyZSxiZWV3YXksYmVld2VlZCxiZWV3aXNlLGJlZXdvcnQsYmVmYWxsLGJlZmFtZSxiZWZhbixiZWZhbmN5LGJlZmF2b3IsYmVmaWxjaCxiZWZpbGUsYmVmaWx0aCxiZWZpcmUsYmVmaXN0LGJlZml0LGJlZmxhZyxiZWZsYXAsYmVmbGVhLGJlZmxlY2ssYmVmbG91cixiZWZsb3V0LGJlZmx1bSxiZWZvYW0sYmVmb2csYmVmb29sLGJlZm9wLGJlZm9yZSxiZWZvdWwsYmVmcmV0LGJlZnJpbGwsYmVmcml6LGJlZnVtZSxiZWcsYmVnYWQsYmVnYWxsLGJlZ2FuaSxiZWdhcixiZWdhcmksYmVnYXNoLGJlZ2F0LGJlZ2F1ZCxiZWdhdWR5LGJlZ2F5LGJlZ2F6ZSxiZWdlY2ssYmVnZW0sYmVnZXQsYmVnZ2FyLGJlZ2dhcnksYmVnZ2luZyxiZWdpZnQsYmVnaWxkLGJlZ2luLGJlZ2lyZCxiZWdsYWQsYmVnbGFyZSxiZWdsaWMsYmVnbGlkZSxiZWdsb29tLGJlZ2xvemUsYmVnbHVjLGJlZ2x1ZSxiZWduYXcsYmVnbyxiZWdvYixiZWdvYnMsYmVnb2htLGJlZ29uZSxiZWdvbmlhLGJlZ29ycmEsYmVnb3JyeSxiZWdvdWQsYmVnb3drLGJlZ3JhY2UsYmVncmFpbixiZWdyYXZlLGJlZ3JheSxiZWdyZWVuLGJlZ3JldHQsYmVncmltLGJlZ3JpbWUsYmVncm9hbixiZWdyb3duLGJlZ3VhcmQsYmVndWVzcyxiZWd1aWxlLGJlZ3VpbmUsYmVndWxmLGJlZ3VtLGJlZ3VuLGJlZ3VuayxiZWd1dCxiZWhhbGUsYmVoYWxmLGJlaGFwLGJlaGF2ZSxiZWhlYWQsYmVoZWFyLGJlaGVhcnMsYmVoZWRnZSxiZWhlbGQsYmVoZWxwLGJlaGVuLGJlaGVuaWMsYmVoZXN0LGJlaGluZCxiZWhpbnQsYmVobixiZWhvbGQsYmVob25leSxiZWhvb2YsYmVob290LGJlaG9vdmUsYmVob3JuLGJlaG93bCxiZWh1bmcsYmVoeW1uLGJlaWNlLGJlaWdlLGJlaW5nLGJlaW5rZWQsYmVpcmEsYmVpc2EsYmVqYWRlLGJlamFuLGJlamFudCxiZWphenosYmVqZWwsYmVqZXdlbCxiZWppZyxiZWthaCxiZWtpY2ssYmVraW5nLGJla2lzcyxiZWtrbyxiZWtuYXZlLGJla25pdCxiZWtub3csYmVrbm93bixiZWwsYmVsYSxiZWxhYm9yLGJlbGFjZWQsYmVsYWRsZSxiZWxhZHksYmVsYWdlLGJlbGFoLGJlbGFtLGJlbGFuZGEsYmVsYXIsYmVsYXJkLGJlbGFzaCxiZWxhdGUsYmVsYXRlZCxiZWxhdWQsYmVsYXksYmVsYXllcixiZWxjaCxiZWxjaGVyLGJlbGQsYmVsZGFtLGJlbGVhZixiZWxlYXAsYmVsZWF2ZSxiZWxlZSxiZWxmcnksYmVsZ2EsYmVsaWJlbCxiZWxpY2ssYmVsaWUsYmVsaWVmLGJlbGllcixiZWxpZXZlLGJlbGlnaHQsYmVsaWtlZCxiZWxpb24sYmVsaXRlLGJlbGl2ZSxiZWxsLGJlbGxib3ksYmVsbGUsYmVsbGVkLGJlbGxob3AsYmVsbGllZCxiZWxsaW5nLGJlbGxpdGUsYmVsbG1hbixiZWxsb3RlLGJlbGxvdyxiZWxsb3dzLGJlbGx5LGJlbGx5ZXIsYmVsb2FtLGJlbG9pZCxiZWxvbmcsYmVsb25pZCxiZWxvcmQsYmVsb3V0LGJlbG92ZSxiZWxvdmVkLGJlbG93LGJlbHNpcmUsYmVsdCxiZWx0ZWQsYmVsdGVyLGJlbHRpZSxiZWx0aW5lLGJlbHRpbmcsYmVsdG1hbixiZWx0b24sYmVsdWdhLGJlbHV0ZSxiZWx2ZSxiZWx5LGJlbHlpbmcsYmVtYSxiZW1hZCxiZW1hZGFtLGJlbWFpbCxiZW1haW0sYmVtYW4sYmVtYXIsYmVtYXNrLGJlbWF0LGJlbWF0YSxiZW1hdWwsYmVtYXplZCxiZW1lYWwsYmVtZWFuLGJlbWVyY3ksYmVtaXJlLGJlbWlzdCxiZW1peCxiZW1vYW4sYmVtb2F0LGJlbW9jayxiZW1vaWwsYmVtb2xlLGJlbW9sdCxiZW1vb24sYmVtb3R0byxiZW1vdWx0LGJlbW91dGgsYmVtdWNrLGJlbXVkLGJlbXVkZHksYmVtdXNlLGJlbXVzZWQsYmVtdXNrLGJlbixiZW5hLGJlbmFiLGJlbmFtZSxiZW5hbWksYmVuYXN0eSxiZW5iZW4sYmVuY2gsYmVuY2hlcixiZW5jaHksYmVuY2l0ZSxiZW5kLGJlbmRhLGJlbmRlZCxiZW5kZXIsYmVuZGluZyxiZW5kbGV0LGJlbmR5LGJlbmUsYmVuZWF0aCxiZW5lZmljLGJlbmVmaXQsYmVuZW1wdCxiZW5ldCxiZW5nLGJlbmksYmVuaWdodCxiZW5pZ24sYmVuaXNvbixiZW5qLGJlbmp5LGJlbm1vc3QsYmVubixiZW5uZSxiZW5uZWwsYmVubmV0LGJlbm55LGJlbm8sYmVub3J0aCxiZW5vdGUsYmVuc2VsLGJlbnNoLGJlbnNoZWEsYmVuc2hlZSxiZW5zaGksYmVudCxiZW50YW5nLGJlbnRoYWwsYmVudGhpYyxiZW50aG9uLGJlbnRob3MsYmVudGluZyxiZW50eSxiZW51bWIsYmVud2FyZCxiZW53ZWVkLGJlbnphbCxiZW56ZWluLGJlbnplbmUsYmVuemlsLGJlbnppbmUsYmVuem8sYmVuem9pYyxiZW56b2lkLGJlbnpvaW4sYmVuem9sLGJlbnpvbGUsYmVuem94eSxiZW56b3lsLGJlbnp5bCxiZW9kZSxiZXBhaWQsYmVwYWxlLGJlcGFwZXIsYmVwYXJjaCxiZXBhcnNlLGJlcGFydCxiZXBhc3RlLGJlcGF0LGJlcGF3LGJlcGVhcmwsYmVwZWx0LGJlcGVuLGJlcGV3ZWQsYmVwaWVjZSxiZXBpbGUsYmVwaWxsLGJlcGluY2gsYmVwaXR5LGJlcHJhbmssYmVwcmF5LGJlcHJlc3MsYmVwcmlkZSxiZXByb3NlLGJlcHVmZixiZXB1bixiZXF1YWxtLGJlcXVlc3QsYmVxdW90ZSxiZXIsYmVyYWluLGJlcmFrYWgsYmVyYWtlLGJlcmFwdCxiZXJhdCxiZXJhdGUsYmVyYXksYmVyZSxiZXJlYXZlLGJlcmVmdCxiZXJlbmQsYmVyZXQsYmVyZyxiZXJnZXIsYmVyZ2xldCxiZXJndXQsYmVyZ3ksYmVyZ3lsdCxiZXJoeW1lLGJlcmlkZSxiZXJpbnNlLGJlcml0aCxiZXJsZXksYmVybGluLGJlcmxpbmUsYmVybSxiZXJuZSxiZXJvYmVkLGJlcm9sbCxiZXJvdW5kLGJlcnJldCxiZXJyaSxiZXJyaWVkLGJlcnJpZXIsYmVycnksYmVyc2VlbSxiZXJzZXJrLGJlcnRoLGJlcnRoZWQsYmVydGhlcixiZXJ0cmFtLGJlcnRydW0sYmVydXN0LGJlcnZpZSxiZXJ5Y2lkLGJlcnlsLGJlcyxiZXNhLGJlc2FnbmUsYmVzYWllbCxiZXNhaW50LGJlc2FuLGJlc2F1Y2UsYmVzY2FiLGJlc2NhcmYsYmVzY2VudCxiZXNjb3JuLGJlc2NvdXIsYmVzY3VyZixiZXNlYW0sYmVzZWUsYmVzZWVjaCxiZXNlZW0sYmVzZWVuLGJlc2V0LGJlc2hhZGUsYmVzaGFnLGJlc2hha2UsYmVzaGFtZSxiZXNoZWFyLGJlc2hlbGwsYmVzaGluZSxiZXNobGlrLGJlc2hvZCxiZXNob3V0LGJlc2hvdyxiZXNocmV3LGJlc2lkZSxiZXNpZGVzLGJlc2llZ2UsYmVzaWdoLGJlc2luLGJlc2luZyxiZXNpcmVuLGJlc2l0LGJlc2xhYixiZXNsYXAsYmVzbGFzaCxiZXNsYXZlLGJlc2xpbWUsYmVzbG93LGJlc2x1cixiZXNtZWFyLGJlc21lbGwsYmVzbWlsZSxiZXNtb2tlLGJlc211dCxiZXNuYXJlLGJlc25lZXIsYmVzbm93LGJlc251ZmYsYmVzb2duZSxiZXNvaWwsYmVzb20sYmVzb21lcixiZXNvb3QsYmVzb3QsYmVzb3VsLGJlc291cixiZXNwYXRlLGJlc3Bhd2wsYmVzcGVhayxiZXNwZWQsYmVzcGVlZCxiZXNwZWxsLGJlc3BlbmQsYmVzcGV0ZSxiZXNwZXcsYmVzcGljZSxiZXNwaWxsLGJlc3BpbixiZXNwaXQsYmVzcGxpdCxiZXNwb2tlLGJlc3BvdCxiZXNwb3V0LGJlc3ByYXksYmVzcHksYmVzcXVpYixiZXNyYSxiZXN0LGJlc3RhYixiZXN0YWluLGJlc3RhbXAsYmVzdGFyLGJlc3RhcmUsYmVzdGF5LGJlc3RlYWQsYmVzdGVlcixiZXN0ZXIsYmVzdGlhbCxiZXN0aWNrLGJlc3RpbGwsYmVzdGluayxiZXN0aXIsYmVzdG9jayxiZXN0b3JlLGJlc3Rvcm0sYmVzdG92ZSxiZXN0b3csYmVzdHJhdyxiZXN0cmV3LGJlc3R1Y2ssYmVzdHVkLGJlc3VnYXIsYmVzdWl0LGJlc3VsbHksYmVzd2FybSxiZXN3aW0sYmV0LGJldGEsYmV0YWcsYmV0YWlsLGJldGFpbmUsYmV0YWxrLGJldGFzayxiZXRheGVkLGJldGVhcixiZXRlZWxhLGJldGVlbSxiZXRlbCxiZXRoLGJldGhlbCxiZXRoaW5rLGJldGh1bWIsYmV0aHVtcCxiZXRpZGUsYmV0aW1lcyxiZXRpbmdlLGJldGlyZSxiZXRpcyxiZXRpdGxlLGJldG9pbCxiZXRva2VuLGJldG9uZSxiZXRvbnksYmV0b3NzLGJldG93ZWwsYmV0cmFjZSxiZXRyYWlsLGJldHJhcCxiZXRyYXksYmV0cmVhZCxiZXRyZW5kLGJldHJpbSxiZXRyb3RoLGJldHJ1bmssYmV0c28sYmV0dGVkLGJldHRlcixiZXR0ZXJzLGJldHRpbmcsYmV0dG9uZyxiZXR0b3IsYmV0dHksYmV0dWxpbixiZXR1dG9yLGJldHdlZW4sYmV0d2luZSxiZXR3aXQsYmV0d2l4dCxiZXZlaWwsYmV2ZWwsYmV2ZWxlZCxiZXZlbGVyLGJldmVub20sYmV2ZXIsYmV2ZXJzZSxiZXZldG8sYmV2aW5lZCxiZXZvbWl0LGJldnVlLGJldnksYmV3YWlsLGJld2FsbCxiZXdhcmUsYmV3YXNoLGJld2FzdGUsYmV3YXRlcixiZXdlYXJ5LGJld2VlcCxiZXdlcHQsYmV3ZXN0LGJld2V0LGJld2hpZyxiZXdoaXRlLGJld2lkb3csYmV3aWcsYmV3aXJlZCxiZXdpdGNoLGJld2l0aCxiZXdvcmssYmV3b3JtLGJld29ybixiZXdvcnJ5LGJld3JhcCxiZXdyYXksYmV3cmVjayxiZXdyaXRlLGJleSxiZXlkb20sYmV5bGljLGJleW9uZCxiZXlzaGlwLGJlemFudCxiZXphbnR5LGJlemVsLGJlemV0dGEsYmV6aXF1ZSxiZXpvYXIsYmV6emksYmV6emxlLGJlenpvLGJoYWJhcixiaGFrdGEsYmhha3RpLGJoYWx1LGJoYW5kYXIsYmhhbmcsYmhhbmdpLGJoYXJhLGJoYXJhbCxiaGF0LGJoYXZhLGJoZWVzdHksYmhpa2t1LGJoaWtzaHUsYmhvb3NhLGJob3ksYmh1bmdpLGJodXQsYmlhYm8sYmlhY2lkLGJpYWN1cnUsYmlhbGF0ZSxiaWFsbHlsLGJpYW5jbyxiaWFyY2h5LGJpYXMsYmlheGFsLGJpYXhpYWwsYmliLGJpYmFzaWMsYmliYixiaWJiZXIsYmliYmxlLGJpYmJsZXIsYmliYm9ucyxiaWJjb2NrLGJpYmksYmliaXJpLGJpYmxlc3MsYmlibHVzLGJpY2UsYmljZXBzLGJpY2V0eWwsYmljaGlyLGJpY2hvcmQsYmljaHksYmljayxiaWNrZXIsYmlja2VybixiaWNvbG9yLGJpY29uZSxiaWNvbmljLGJpY29ybixiaWNvcm5lLGJpY3JvbixiaWN5Y2xlLGJpY3ljbG8sYmlkLGJpZGFyLGJpZGFya2EsYmlkY29jayxiaWRkZXIsYmlkZGluZyxiaWRkeSxiaWRlLGJpZGVudCxiaWRlcixiaWRldCxiaWRpbmcsYmlkcmksYmlkdW91cyxiaWVsZCxiaWVsZHksYmllbixiaWVubHksYmllbm5pYSxiaWVyLGJpZXRsZSxiaWZhcmEsYmlmZXIsYmlmZixiaWZmaW4sYmlmaWQsYmlmaWRseSxiaWZpbGFyLGJpZmxleCxiaWZvY2FsLGJpZm9pbCxiaWZvbGQsYmlmb2xpYSxiaWZvcm0sYmlmcm9udCxiaWcsYmlnYSxiaWdhbWljLGJpZ2FteSxiaWdlbmVyLGJpZ2V5ZSxiaWdnLGJpZ2dhaCxiaWdnZW4sYmlnZ2VyLGJpZ2dlc3QsYmlnZ2luLGJpZ2dpc2gsYmlnaGEsYmlnaGVhZCxiaWdob3JuLGJpZ2h0LGJpZ2xvdCxiaWduZXNzLGJpZ25vdSxiaWdvdCxiaWdvdGVkLGJpZ290cnksYmlnb3R0eSxiaWdyb290LGJpZ3dpZyxiaWphLGJpamFzYWwsYmlqb3UsYmlqb3V4LGJpa2UsYmlraCxiaWtpbmksYmlsYWJlLGJpbGFsbyxiaWxiaWUsYmlsYm8sYmlsYnksYmlsY2gsYmlsY29jayxiaWxkYXIsYmlsZGVycyxiaWxlLGJpbGdlLGJpbGd5LGJpbGlhcnksYmlsaWF0ZSxiaWxpYyxiaWxpZnksYmlsaW1iaSxiaWxpbyxiaWxpb3VzLGJpbGl0aCxiaWxrLGJpbGtlcixiaWxsLGJpbGxhLGJpbGxidWcsYmlsbGVkLGJpbGxlcixiaWxsZXQsYmlsbGV0eSxiaWxsaWFuLGJpbGxpbmcsYmlsbGlvbixiaWxsbWFuLGJpbGxvbixiaWxsb3QsYmlsbG93LGJpbGxvd3ksYmlsbHksYmlsbHllcixiaWxvLGJpbG9iZSxiaWxvYmVkLGJpbHNoLGJpbHN0ZWQsYmlsdG9uZyxiaW1hbGFyLGJpbWFuYWwsYmltYW5lLGJpbWFzdHksYmltYmlsLGJpbWVieSxiaW1vZGFsLGJpbixiaW5hbCxiaW5hcnksYmluYXRlLGJpbmQsYmluZGVyLGJpbmRlcnksYmluZGluZyxiaW5kbGUsYmluZGxldCxiaW5kd2ViLGJpbmUsYmluZyxiaW5nZSxiaW5nZXksYmluZ2hpLGJpbmdsZSxiaW5nbyxiaW5neSxiaW5oLGJpbmssYmlubWFuLGJpbm5hLGJpbm5pbmcsYmlubml0ZSxiaW5vLGJpbm9jbGUsYmlub2RhbCxiaW5vZGUsYmlub3RpYyxiaW5vdXMsYmludCxiaW51a2F1LGJpb2QsYmlvZHluZSxiaW9nZW4sYmlvZ2VueSxiaW9oZXJtLGJpb2xpdGgsYmlvbG9neSxiaW9tZSxiaW9uLGJpb25vbXksYmlvcHNpYyxiaW9wc3ksYmlvcmFsLGJpb3JnYW4sYmlvcyxiaW9zZSxiaW9zaXMsYmlvdGEsYmlvdGF4eSxiaW90aWMsYmlvdGljcyxiaW90aW4sYmlvdGl0ZSxiaW90b21lLGJpb3RvbXksYmlvdG9wZSxiaW90eXBlLGJpb3hpZGUsYmlwYWNrLGJpcGFydHksYmlwZWQsYmlwZWRhbCxiaXBoYXNlLGJpcGxhbmUsYmlwb2QsYmlwb2xhcixiaXByaXNtLGJpcHJvbmcsYmlyY2gsYmlyY2hlbixiaXJkLGJpcmRkb20sYmlyZGVlbixiaXJkZXIsYmlyZGllLGJpcmRpbmcsYmlyZGxldCxiaXJkbWFuLGJpcmR5LGJpcmVtZSxiaXJldHRhLGJpcmksYmlyaWJhLGJpcmssYmlya2VuLGJpcmtpZSxiaXJsLGJpcmxlLGJpcmxlcixiaXJsaWUsYmlybGlubixiaXJtYSxiaXJuLGJpcm55LGJpcnIsYmlyc2UsYmlyc2xlLGJpcnN5LGJpcnRoLGJpcnRoeSxiaXMsYmlzYWJvbCxiaXNhbHQsYmlzY3VpdCxiaXNlY3QsYmlzZXhlZCxiaXNleHQsYmlzaG9wLGJpc21hcixiaXNtaXRlLGJpc211dGgsYmlzbmFnYSxiaXNvbixiaXNwb3JlLGJpc3F1ZSxiaXNzZXh0LGJpc3NvbixiaXN0YXRlLGJpc3RlcixiaXN0aSxiaXN0b3J0LGJpc3RybyxiaXQsYml0YWJsZSxiaXRjaCxiaXRlLGJpdGVyLGJpdGksYml0aW5nLGJpdGxlc3MsYml0byxiaXRvbHlsLGJpdHQsYml0dGVkLGJpdHRlbixiaXR0ZXIsYml0dGVybixiaXR0ZXJzLGJpdHRpZSxiaXR0b2NrLGJpdHR5LGJpdHVtZSxiaXR1bWVkLGJpdHVtZW4sYml0d2lzZSxiaXR5aXRlLGJpdHlwaWMsYml1bmUsYml1bmlhbCxiaXVuaXR5LGJpdXJhdGUsYml1cmVhLGJpdXJldCxiaXZhbHZlLGJpdmlueWwsYml2aW91cyxiaXZvY2FsLGJpdm91YWMsYml3YSxiaXhpbixiaXosYml6YXJyZSxiaXpldCxiaXpvbmFsLGJpem9uZSxiaXp6LGJsYWIsYmxhYmJlcixibGFjayxibGFja2VuLGJsYWNrZXIsYmxhY2tleSxibGFja2llLGJsYWNraXQsYmxhY2tseSxibGFja3ksYmxhZCxibGFkZGVyLGJsYWRlLGJsYWRlZCxibGFkZXIsYmxhZGluZyxibGFkaXNoLGJsYWR5LGJsYWUsYmxhZmYsYmxhZmx1bSxibGFoLGJsYWluLGJsYWlyLGJsYWtlLGJsYW1lLGJsYW1lZCxibGFtZXIsYmxhbWluZyxibGFuLGJsYW5jLGJsYW5jYSxibGFuY2gsYmxhbmNvLGJsYW5kLGJsYW5kYSxibGFuZGx5LGJsYW5rLGJsYW5rZWQsYmxhbmtldCxibGFua2x5LGJsYW5reSxibGFucXVlLGJsYXJlLGJsYXJuZXksYmxhcm5pZCxibGFybnksYmxhcnQsYmxhcyxibGFzZSxibGFzaCxibGFzaHksYmxhc3QsYmxhc3RlZCxibGFzdGVyLGJsYXN0aWQsYmxhc3RpZSxibGFzdHksYmxhdCxibGF0YW50LGJsYXRlLGJsYXRlbHksYmxhdGhlcixibGF0dGEsYmxhdHRlcixibGF0dGksYmxhdHRpZCxibGF1Ym9rLGJsYXZlcixibGF3LGJsYXdvcnQsYmxheSxibGF6ZSxibGF6ZXIsYmxhemluZyxibGF6b24sYmxhenksYmxlYWNoLGJsZWFrLGJsZWFrbHksYmxlYWt5LGJsZWFyLGJsZWFyZWQsYmxlYXJ5LGJsZWF0LGJsZWF0ZXIsYmxlYXR5LGJsZWIsYmxlYmJ5LGJsZWNrLGJsZWUsYmxlZWQsYmxlZWRlcixibGVlcnksYmxlZXplLGJsZWV6eSxibGVsbHVtLGJsZW1pc2gsYmxlbmNoLGJsZW5kLGJsZW5kZSxibGVuZGVkLGJsZW5kZXIsYmxlbmRvcixibGVubnksYmxlbnQsYmxlbyxibGVzYm9rLGJsZXNzLGJsZXNzZWQsYmxlc3NlcixibGVzdCxibGV0LGJsZXdpdHMsYmxpYmUsYmxpY2ssYmxpY2tleSxibGlnaHQsYmxpZ2h0eSxibGltcCxibGlteSxibGluZCxibGluZGVkLGJsaW5kZXIsYmxpbmRseSxibGluayxibGlua2VkLGJsaW5rZXIsYmxpbmtzLGJsaW5reSxibGludGVyLGJsaW50emUsYmxpcCxibGlzcyxibGlzc29tLGJsaXN0ZXIsYmxpdGUsYmxpdGhlLGJsaXRoZW4sYmxpdGhlcixibGl0dGVyLGJsaXR6LGJsaXp6LGJsbyxibG9hdCxibG9hdGVkLGJsb2F0ZXIsYmxvYixibG9iYmVkLGJsb2JiZXIsYmxvYmJ5LGJsb2MsYmxvY2ssYmxvY2tlZCxibG9ja2VyLGJsb2NreSxibG9kaXRlLGJsb2tlLGJsb2xseSxibG9uZGUsYmxvb2QsYmxvb2RlZCxibG9vZHksYmxvb2V5LGJsb29tLGJsb29tZXIsYmxvb215LGJsb29wLGJsb29wZXIsYmxvcmUsYmxvc215LGJsb3Nzb20sYmxvdCxibG90Y2gsYmxvdGNoeSxibG90dGVyLGJsb3R0byxibG90dHksYmxvdXNlLGJsb3VzZWQsYmxvdXQsYmxvdyxibG93ZW4sYmxvd2VyLGJsb3dmbHksYmxvd2d1bixibG93aW5nLGJsb3duLGJsb3dvZmYsYmxvd291dCxibG93dGgsYmxvd3VwLGJsb3d5LGJsb3d6ZSxibG93emVkLGJsb3d6eSxibHViLGJsdWJiZXIsYmx1Y2hlcixibHVlLGJsdWVjYXAsYmx1ZWN1cCxibHVlaW5nLGJsdWVsZWcsYmx1ZWx5LGJsdWVyLGJsdWVzLGJsdWV0LGJsdWV0b3AsYmx1ZXksYmx1ZmYsYmx1ZmZlcixibHVmZmx5LGJsdWZmeSxibHVnZ3ksYmx1aW5nLGJsdWlzaCxibHVpc20sYmx1bmRlcixibHVuZ2UsYmx1bmdlcixibHVuayxibHVua2VyLGJsdW5rcyxibHVubmVuLGJsdW50LGJsdW50ZXIsYmx1bnRpZSxibHVudGx5LGJsdXAsYmx1cixibHVyYixibHVycmVkLGJsdXJyZXIsYmx1cnJ5LGJsdXJ0LGJsdXNoLGJsdXNoZXIsYmx1c2h5LGJsdXN0ZXIsYmx5cGUsYm8sYm9hLGJvYWdhbmUsYm9hcixib2FyZCxib2FyZGVyLGJvYXJkbHksYm9hcmR5LGJvYXJpc2gsYm9hc3QsYm9hc3Rlcixib2F0LGJvYXRhZ2UsYm9hdGVyLGJvYXRmdWwsYm9hdGllLGJvYXRpbmcsYm9hdGxpcCxib2F0bHksYm9hdG1hbixib2IsYm9iYSxib2JhYyxib2JiZWQsYm9iYmVyLGJvYmJlcnksYm9iYmluLGJvYmJpbmcsYm9iYmlzaCxib2JibGUsYm9iYnksYm9iY2F0LGJvYmNvYXQsYm9iZWNoZSxib2JmbHksYm9ibyxib2JvdGllLGJvYnNsZWQsYm9ic3RheSxib2J0YWlsLGJvYndvb2QsYm9jYWwsYm9jYXJkbyxib2NjYSxib2NjYWxlLGJvY2Nhcm8sYm9jY2UsYm9jZSxib2NoZXIsYm9jayxib2NraW5nLGJvY295LGJvZCxib2RhY2gsYm9kZSxib2RlZnVsLGJvZGVnYSxib2Rlbixib2Rlcixib2RnZSxib2RnZXIsYm9kZ2VyeSxib2RoaSxib2RpY2UsYm9kaWNlZCxib2RpZWQsYm9kaWVyLGJvZGlraW4sYm9kaWx5LGJvZGluZyxib2RraW4sYm9kbGUsYm9kb2NrLGJvZHksYm9nLGJvZ2EsYm9nYW4sYm9nYXJkLGJvZ2FydCxib2dleSxib2dnYXJ0LGJvZ2dpbixib2dnaXNoLGJvZ2dsZSxib2dnbGVyLGJvZ2d5LGJvZ2hvbGUsYm9naWUsYm9naWVyLGJvZ2xhbmQsYm9nbGUsYm9nbGV0LGJvZ21hbixib2dtaXJlLGJvZ28sYm9nb25nLGJvZ3Ryb3QsYm9ndWUsYm9ndW0sYm9ndXMsYm9nd2F5LGJvZ3dvb2QsYm9nd29ydCxib2d5LGJvZ3lkb20sYm9neWlzbSxib2hhd24sYm9oZWEsYm9obyxib2hvcixib2h1bmssYm9pZCxib2lsLGJvaWxlZCxib2lsZXIsYm9pbGVyeSxib2lsaW5nLGJvaWx5LGJvaXN0LGJvaml0ZSxib2pvLGJva2FkYW0sYm9rYXJkLGJva2Fyayxib2tlLGJva29tLGJvbGEsYm9sYXIsYm9sZCxib2xkZW4sYm9sZGluZSxib2xkbHksYm9sZG8sYm9sZSxib2xlZCxib2xlaXRlLGJvbGVybyxib2xldGUsYm9saWRlLGJvbGltYmEsYm9saXMsYm9saXZhcixib2xpdmlhLGJvbGssYm9sbCxib2xsYXJkLGJvbGxlZCxib2xsZXIsYm9sbGluZyxib2xsb2NrLGJvbGx5LGJvbG8sYm9sb21hbixib2xvbmV5LGJvbHNvbixib2xzdGVyLGJvbHQsYm9sdGFnZSxib2x0YW50LGJvbHRlbCxib2x0ZXIsYm9sdGksYm9sdGluZyxib2x1cyxib20sYm9tYSxib21iLGJvbWJhcmQsYm9tYmFzdCxib21iZWQsYm9tYmVyLGJvbWJvLGJvbWJvbGEsYm9tYm91cyxib24sYm9uYWNpLGJvbmFnaCxib25hZ2h0LGJvbmFpcixib25hbGx5LGJvbmFuZyxib25hbnphLGJvbmFzdXMsYm9uYm9uLGJvbmNlLGJvbmQsYm9uZGFnZSxib25kYXIsYm9uZGVkLGJvbmRlcixib25kaW5nLGJvbmRtYW4sYm9uZHVjLGJvbmUsYm9uZWQsYm9uZWRvZyxib25lbGV0LGJvbmVyLGJvbmVzZXQsYm9uZmlyZSxib25nLGJvbmdvLGJvbmlhdGEsYm9uaWZ5LGJvbml0byxib25rLGJvbm5heixib25uZXQsYm9ubmlseSxib25ueSxib25zYWksYm9udXMsYm9ueGllLGJvbnksYm9uemUsYm9uemVyLGJvbnplcnksYm9uemlhbixib28sYm9vYixib29iZXJ5LGJvb2JpbHksYm9vYm9vayxib29ieSxib29kLGJvb2RpZSxib29kbGUsYm9vZGxlcixib29keSxib29mLGJvb2dlcixib29ob28sYm9vanVtLGJvb2ssYm9va2RvbSxib29rZWQsYm9va2VyLGJvb2tlcnksYm9va2Z1bCxib29raWUsYm9va2luZyxib29raXNoLGJvb2tpc20sYm9va2xldCxib29rbWFuLGJvb2t5LGJvb2wsYm9vbHksYm9vbHlhLGJvb20sYm9vbWFnZSxib29tYWgsYm9vbWRhcyxib29tZXIsYm9vbWluZyxib29tbGV0LGJvb215LGJvb24sYm9vbmssYm9vcGlzLGJvb3IsYm9vcmlzaCxib29ydCxib29zZSxib29zdCxib29zdGVyLGJvb3N5LGJvb3QsYm9vdGJveSxib290ZWQsYm9vdGVlLGJvb3Rlcixib290ZXJ5LGJvb3RmdWwsYm9vdGgsYm9vdGhlcixib290aWVkLGJvb3RpbmcsYm9vdGxlZyxib290cyxib290eSxib296ZSxib296ZWQsYm9vemVyLGJvb3ppbHksYm9venksYm9wLGJvcGVlcCxib3BwaXN0LGJvcHlyaWQsYm9yLGJvcmEsYm9yYWJsZSxib3JhY2ljLGJvcmFnZSxib3Jhayxib3JhbCxib3Jhc2NhLGJvcmF0ZSxib3JheCxib3JkLGJvcmRhZ2UsYm9yZGFyLGJvcmRlbCxib3JkZXIsYm9yZHVyZSxib3JlLGJvcmVhZCxib3JlYWwsYm9yZWFuLGJvcmVkb20sYm9yZWUsYm9yZWVuLGJvcmVnYXQsYm9yZWlzbSxib3JlbGUsYm9yZXIsYm9yZyxib3JnaCxib3JoLGJvcmljLGJvcmlkZSxib3JpbmUsYm9yaW5nLGJvcmlzaCxib3Jpc20sYm9yaXR5LGJvcml6ZSxib3JsYXNlLGJvcm4sYm9ybmUsYm9ybmVvbCxib3JuaW5nLGJvcm5pdGUsYm9ybnlsLGJvcm8sYm9yb24sYm9yb25pYyxib3JvdWdoLGJvcnJlbCxib3Jyb3csYm9yc2NoLGJvcnNjaHQsYm9yc2h0LGJvcnQsYm9ydHNjaCxib3J0eSxib3J0eixib3J3b3J0LGJvcnlsLGJvcnpvaSxib3NjYWdlLGJvc2NoLGJvc2UsYm9zZXIsYm9zaCxib3NoZXIsYm9zayxib3NrZXIsYm9za2V0LGJvc2t5LGJvc24sYm9zb20sYm9zb21lZCxib3NvbWVyLGJvc29teSxib3NzLGJvc3NhZ2UsYm9zc2RvbSxib3NzZWQsYm9zc2VyLGJvc3NldCxib3NzaW5nLGJvc3Npc20sYm9zc2xldCxib3NzeSxib3N0b24sYm9zdHJ5eCxib3N1bixib3QsYm90YSxib3RhbmljLGJvdGFueSxib3RhcmdvLGJvdGNoLGJvdGNoZWQsYm90Y2hlcixib3RjaGthLGJvdGNoeSxib3RlLGJvdGVsbGEsYm90ZXJvbCxib3RmbHksYm90aCxib3RoZXIsYm90aHJvcyxib3Rod2F5LGJvdGh5LGJvdG9uZWUsYm90b25nLGJvdHQsYm90dGluZSxib3R0bGUsYm90dGxlZCxib3R0bGVyLGJvdHRvbSxib3R1bGluLGJvdWNoYWwsYm91Y2hlLGJvdWNoZXIsYm91ZCxib3Vkb2lyLGJvdWdhcixib3VnZSxib3VnZXQsYm91Z2gsYm91Z2hlZCxib3VnaHQsYm91Z2h5LGJvdWdpZSxib3VrLGJvdWtpdCxib3VsZGVyLGJvdWxlLGJvdWx0ZWwsYm91bHRlcixib3VuLGJvdW5jZSxib3VuY2VyLGJvdW5kLGJvdW5kZWQsYm91bmRlbixib3VuZGVyLGJvdW5kbHksYm91bnR5LGJvdXF1ZXQsYm91cmJvbixib3VyZCxib3VyZGVyLGJvdXJkb24sYm91cmcsYm91cm4sYm91cm9jayxib3Vyc2UsYm91c2UsYm91c2VyLGJvdXN5LGJvdXQsYm91dGFkZSxib3V0byxib3V3LGJvdmF0ZSxib3ZpZCxib3ZpbmUsYm92b2lkLGJvdyxib3dhYmxlLGJvd2JhY2ssYm93YmVudCxib3dib3ksYm93ZWQsYm93ZWwsYm93ZWxlZCxib3dlbHMsYm93ZXIsYm93ZXJ5LGJvd2V0LGJvd2Zpbixib3doZWFkLGJvd2llLGJvd2luZyxib3drLGJvd2thaWwsYm93a2VyLGJvd2tub3QsYm93bCxib3dsYSxib3dsZWcsYm93bGVyLGJvd2xlc3MsYm93bGZ1bCxib3dsaWtlLGJvd2xpbmUsYm93bGluZyxib3dscyxib3dseSxib3dtYW4sYm93cGluLGJvd3Nob3QsYm93d29vZCxib3d3b3J0LGJvd3dvdyxib3d5ZXIsYm94YnVzaCxib3hjYXIsYm94ZW4sYm94ZXIsYm94ZmlzaCxib3hmdWwsYm94aGF1bCxib3hoZWFkLGJveGluZyxib3hsaWtlLGJveG1hbixib3h0eSxib3h3b29kLGJveHdvcmssYm94eSxib3ksYm95YW5nLGJveWFyLGJveWFyZCxib3ljb3R0LGJveWRvbSxib3llcixib3lob29kLGJveWlzaCxib3lpc20sYm95bGEsYm95bGlrZSxib3lzaGlwLGJvemEsYm96YWwsYm96byxib3p6ZSxicmEsYnJhYixicmFiYW50LGJyYWJibGUsYnJhY2EsYnJhY2NpYSxicmFjY2lvLGJyYWNlLGJyYWNlZCxicmFjZXIsYnJhY2VybyxicmFjZXMsYnJhY2gsYnJhY2hldCxicmFjaW5nLGJyYWNrLGJyYWNrZW4sYnJhY2tlcixicmFja2V0LGJyYWNreSxicmFjdCxicmFjdGVhLGJyYWN0ZWQsYnJhZCxicmFkYXdsLGJyYWRzb3QsYnJhZSxicmFlbWFuLGJyYWcsYnJhZ2dhdCxicmFnZ2VyLGJyYWdnZXQsYnJhZ2l0ZSxicmFpZCxicmFpZGVkLGJyYWlkZXIsYnJhaWwsYnJhaW4sYnJhaW5lcixicmFpbmdlLGJyYWlucyxicmFpbnksYnJhaXJkLGJyYWlybyxicmFpc2UsYnJha2UsYnJha2VyLGJyYWtpZSxicmFreSxicmFtYmxlLGJyYW1ibHksYnJhbixicmFuY2gsYnJhbmNoaSxicmFuY2h5LGJyYW5kLGJyYW5kZWQsYnJhbmRlcixicmFuZHksYnJhbmdsZSxicmFuaWFsLGJyYW5rLGJyYW5raWUsYnJhbmxlLGJyYW5uZXIsYnJhbm55LGJyYW5zbGUsYnJhbnQsYnJhc2gsYnJhc2h5LGJyYXNxdWUsYnJhc3MsYnJhc3NlLGJyYXNzZXIsYnJhc3NldCxicmFzc2ljLGJyYXNzaWUsYnJhc3N5LGJyYXQsYnJhdHRpZSxicmF0dGxlLGJyYXVuYSxicmF2YWRlLGJyYXZhZG8sYnJhdmUsYnJhdmVseSxicmF2ZXIsYnJhdmVyeSxicmF2aW5nLGJyYXZpc2gsYnJhdm8sYnJhdnVyYSxicmF3LGJyYXdsLGJyYXdsZXIsYnJhd2x5LGJyYXdseXMsYnJhd24sYnJhd25lZCxicmF3bmVyLGJyYXdueSxicmF3cyxicmF4eSxicmF5LGJyYXllcixicmF5ZXJhLGJyYXphLGJyYXplLGJyYXplbixicmF6ZXIsYnJhemVyYSxicmF6aWVyLGJyYXppbCxicmVhY2gsYnJlYWNoeSxicmVhZCxicmVhZGVuLGJyZWFkdGgsYnJlYWdoZSxicmVhayxicmVha2F4LGJyZWFrZXIsYnJlYWt1cCxicmVhbSxicmVhcmRzLGJyZWFzdCxicmVhdGgsYnJlYXRoZSxicmVhdGh5LGJyZWJhLGJyZWNjaWEsYnJlY2hhbSxicmVjayxicmVja2VuLGJyZWQsYnJlZGUsYnJlZGksYnJlZSxicmVlY2gsYnJlZWQsYnJlZWRlcixicmVlZHksYnJlZWssYnJlZXplLGJyZWV6eSxicmVnbWEsYnJlaG9uLGJyZWksYnJla2tsZSxicmVsYXcsYnJlbWUsYnJlbWVseSxicmVudCxicmVwaGljLGJyZXQsYnJldGgsYnJldHQsYnJldmEsYnJldmUsYnJldmV0LGJyZXZpZXIsYnJldml0LGJyZXZpdHksYnJldyxicmV3YWdlLGJyZXdlcixicmV3ZXJ5LGJyZXdpbmcsYnJld2lzLGJyZXdzdCxicmV5LGJyaWFyLGJyaWJlLGJyaWJlZSxicmliZXIsYnJpYmVyeSxicmljaGVuLGJyaWNrLGJyaWNrZWwsYnJpY2tlbixicmlja2xlLGJyaWNrbHksYnJpY2t5LGJyaWNvbGUsYnJpZGFsLGJyaWRhbGUsYnJpZGUsYnJpZGVseSxicmlkZ2UsYnJpZGdlZCxicmlkZ2VyLGJyaWRsZSxicmlkbGVkLGJyaWRsZXIsYnJpZG9vbixicmllZixicmllZmx5LGJyaWVmcyxicmllcixicmllcmVkLGJyaWVyeSxicmlldmUsYnJpZyxicmlnYWRlLGJyaWdhbmQsYnJpZ2h0LGJyaWxsLGJyaWxscyxicmltLGJyaW1mdWwsYnJpbWluZyxicmltbWVkLGJyaW1tZXIsYnJpbixicmluZSxicmluZXIsYnJpbmcsYnJpbmdhbCxicmluZ2VyLGJyaW5pc2gsYnJpbmphbCxicmluayxicmlueSxicmlvY2hlLGJyaXF1ZSxicmlzayxicmlza2VuLGJyaXNrZXQsYnJpc2tseSxicmlzcXVlLGJyaXNzLGJyaXN0bGUsYnJpc3RseSxicmlzdXJlLGJyaXQsYnJpdGgsYnJpdGhlcixicml0c2thLGJyaXR0ZW4sYnJpdHRsZSxicml6eixicm9hY2gsYnJvYWQsYnJvYWRheCxicm9hZGVuLGJyb2FkbHksYnJvYixicm9jYWRlLGJyb2NhcmQsYnJvY2gsYnJvY2hhbixicm9jaGUsYnJvY2hvLGJyb2NrLGJyb2NrZWQsYnJvY2tldCxicm9ja2xlLGJyb2QsYnJvZGRlcixicm9nLGJyb2dhbixicm9nZ2VyLGJyb2dnbGUsYnJvZ3VlLGJyb2d1ZXIsYnJvaWRlcixicm9pZ25lLGJyb2lsLGJyb2lsZXIsYnJva2FnZSxicm9rZSxicm9rZW4sYnJva2VyLGJyb2tpbmcsYnJvbGdhLGJyb2xsLGJyb2xseSxicm9tYSxicm9tYWwsYnJvbWF0ZSxicm9tZSxicm9taWMsYnJvbWlkZSxicm9taW5lLGJyb21pc20sYnJvbWl0ZSxicm9taXplLGJyb21vaWwsYnJvbW9sLGJyb21vdXMsYnJvbmMsYnJvbmNoaSxicm9uY28sYnJvbmssYnJvbnplLGJyb256ZWQsYnJvbnplbixicm9uemVyLGJyb256eSxicm9vLGJyb29jaCxicm9vZCxicm9vZGVyLGJyb29keSxicm9vayxicm9va2VkLGJyb29raWUsYnJvb2t5LGJyb29sLGJyb29tLGJyb29tZXIsYnJvb215LGJyb29uLGJyb29zZSxicm9zZSxicm9zb3QsYnJvc3ksYnJvdCxicm90YW4sYnJvdGFueSxicm90aCxicm90aGVsLGJyb3RoZXIsYnJvdGh5LGJyb3VnaCxicm91Z2h0LGJyb3csYnJvd2Rlbixicm93ZWQsYnJvd2lzLGJyb3dtYW4sYnJvd24sYnJvd25lcixicm93bmllLGJyb3dubHksYnJvd255LGJyb3dzZSxicm93c2VyLGJyb3dzdCxicnVhbmcsYnJ1Y2lhLGJydWNpbmEsYnJ1Y2luZSxicnVjaXRlLGJydWNrbGUsYnJ1Z2gsYnJ1aW4sYnJ1aXNlLGJydWlzZXIsYnJ1aXQsYnJ1aXRlcixicnVrZSxicnVsZWUsYnJ1bHlpZSxicnVtYWwsYnJ1bWJ5LGJydW1lLGJydW1vdXMsYnJ1bmNoLGJydW5ldCxicnVudCxicnVzY3VzLGJydXNoLGJydXNoZWQsYnJ1c2hlcixicnVzaGVzLGJydXNoZXQsYnJ1c2h5LGJydXNxdWUsYnJ1c3RsZSxicnV0LGJydXRhZ2UsYnJ1dGFsLGJydXRlLGJydXRlbHksYnJ1dGlmeSxicnV0aW5nLGJydXRpc2gsYnJ1dGlzbSxicnV0dGVyLGJydXp6LGJyeW9uaW4sYnJ5b255LGJ1LGJ1YWwsYnVhemUsYnViLGJ1YmEsYnViYWwsYnViYWxpcyxidWJibGUsYnViYmxlcixidWJibHksYnViYnksYnViaW5nYSxidWJvLGJ1Ym9lZCxidWJvbmljLGJ1YnVrbGUsYnVjYXJlLGJ1Y2NhLGJ1Y2NhbCxidWNjYW4sYnVjY2F0ZSxidWNjaW5hLGJ1Y2N1bGEsYnVjaGl0ZSxidWNodSxidWNrLGJ1Y2tlZCxidWNrZWVuLGJ1Y2tlcixidWNrZXQsYnVja2V0eSxidWNrZXllLGJ1Y2tpZSxidWNraW5nLGJ1Y2tpc2gsYnVja2xlLGJ1Y2tsZWQsYnVja2xlcixidWNrbHVtLGJ1Y2tvLGJ1Y2twb3QsYnVja3JhLGJ1Y2tyYW0sYnVja3NhdyxidWNreSxidWNvbGljLGJ1Y3JhbmUsYnVkLGJ1ZGEsYnVkZGFnZSxidWRkZXIsYnVkZGhpLGJ1ZGRpbmcsYnVkZGxlLGJ1ZGRsZXIsYnVkZHksYnVkZ2UsYnVkZ2VyLGJ1ZGdldCxidWRsZXNzLGJ1ZGxldCxidWRsaWtlLGJ1ZG1hc2gsYnVkdGltZSxidWR3b29kLGJ1ZHdvcm0sYnVkemF0LGJ1ZmFnaW4sYnVmZixidWZmYWxvLGJ1ZmZlZCxidWZmZXIsYnVmZmV0LGJ1ZmZpbmcsYnVmZmxlLGJ1ZmZvbnQsYnVmZm9vbixidWZmeSxidWZpZGluLGJ1Zm8sYnVnLGJ1Z2Fib28sYnVnYW4sYnVnYmFuZSxidWdiZWFyLGJ1Z2JpdGUsYnVnZG9tLGJ1Z2Zpc2gsYnVnZ2VyLGJ1Z2dlcnksYnVnZ3ksYnVnaGVhZCxidWdsZSxidWdsZWQsYnVnbGVyLGJ1Z2xldCxidWdsb3NzLGJ1Z3JlLGJ1Z3NlZWQsYnVnd2VlZCxidWd3b3J0LGJ1aGwsYnVocixidWlsZCxidWlsZGVyLGJ1aWxkdXAsYnVpbHQsYnVpcmRseSxidWlzc29uLGJ1aXN0LGJ1a2gsYnVrc2hpLGJ1bGFrLGJ1bGIsYnVsYmFyLGJ1bGJlZCxidWxiaWwsYnVsYmxldCxidWxib3NlLGJ1bGJvdXMsYnVsYnVsLGJ1bGJ1bGUsYnVsYnksYnVsY2hpbixidWxnZSxidWxnZXIsYnVsZ3ksYnVsaW1pYSxidWxpbWljLGJ1bGlteSxidWxrLGJ1bGtlZCxidWxrZXIsYnVsa2lseSxidWxraXNoLGJ1bGt5LGJ1bGwsYnVsbGEsYnVsbGFjZSxidWxsYW4sYnVsbGFyeSxidWxsYXRlLGJ1bGxiYXQsYnVsbGRvZyxidWxsZXIsYnVsbGV0LGJ1bGxldHksYnVsbGluZyxidWxsaW9uLGJ1bGxpc2gsYnVsbGlzbSxidWxsaXQsYnVsbG51dCxidWxsb2NrLGJ1bGxvdXMsYnVsbHVsZSxidWxseSxidWxydXNoLGJ1bHNlLGJ1bHQsYnVsdGVyLGJ1bHRleSxidWx0b25nLGJ1bHRvdyxidWx3YW5kLGJ1bHdhcmssYnVtLGJ1bWJhemUsYnVtYmVlLGJ1bWJsZSxidW1ibGVyLGJ1bWJvLGJ1bWJvYXQsYnVtaWNreSxidW1tYWxvLGJ1bW1lZCxidW1tZXIsYnVtbWllLGJ1bW1pbmcsYnVtbWxlcixidW1tb2NrLGJ1bXAsYnVtcGVlLGJ1bXBlcixidW1waWx5LGJ1bXBpbmcsYnVtcGtpbixidW1weSxidW10cmFwLGJ1bXdvb2QsYnVuLGJ1bmEsYnVuY2FsLGJ1bmNlLGJ1bmNoLGJ1bmNoZXIsYnVuY2h5LGJ1bmQsYnVuZGVyLGJ1bmRsZSxidW5kbGVyLGJ1bmRsZXQsYnVuZG9vayxidW5keSxidW5nLGJ1bmdlZSxidW5nZXksYnVuZ2Z1LGJ1bmdsZSxidW5nbGVyLGJ1bmdvLGJ1bmd5LGJ1bmlvbixidW5rLGJ1bmtlcixidW5rZXJ5LGJ1bmtpZSxidW5rbyxidW5rdW0sYnVubmVsbCxidW5ueSxidW50LGJ1bnRhbCxidW50ZWQsYnVudGVyLGJ1bnRpbmcsYnVudG9uLGJ1bnR5LGJ1bnlhLGJ1bnlhaCxidW55aXAsYnVveSxidW95YWdlLGJ1b3lhbnQsYnVyLGJ1cmFuLGJ1cmFvLGJ1cmJhbmssYnVyYmFyayxidXJibGUsYnVyYmxlcixidXJibHksYnVyYm90LGJ1cmJ1c2gsYnVyZCxidXJkZW4sYnVyZGllLGJ1cmRvY2ssYnVyZG9uLGJ1cmUsYnVyZWF1LGJ1cmVhdXgsYnVyZWwsYnVyZWxlLGJ1cmV0LGJ1cmV0dGUsYnVyZmlzaCxidXJnLGJ1cmdhZ2UsYnVyZ2FsbCxidXJnZWUsYnVyZ2VvbixidXJnZXNzLGJ1cmdoLGJ1cmdoYWwsYnVyZ2hlcixidXJnbGFyLGJ1cmdsZSxidXJnb28sYnVyZ3VsLGJ1cmd1cyxidXJoZWFkLGJ1cmksYnVyaWFsLGJ1cmlhbixidXJpZWQsYnVyaWVyLGJ1cmluLGJ1cmlvbixidXJpdGksYnVya2EsYnVya2UsYnVya2VyLGJ1cmwsYnVybGFwLGJ1cmxlZCxidXJsZXIsYnVybGV0LGJ1cmxpbHksYnVybHksYnVybWl0ZSxidXJuLGJ1cm5lZCxidXJuZXIsYnVybmV0LGJ1cm5pZSxidXJuaW5nLGJ1cm5pc2gsYnVybm91cyxidXJub3V0LGJ1cm50LGJ1cm51dCxidXJueSxidXJvLGJ1cnAsYnVycixidXJyYWgsYnVycmVkLGJ1cnJlbCxidXJyZXIsYnVycmluZyxidXJyaXNoLGJ1cnJpdG8sYnVycm8sYnVycm93LGJ1cnJ5LGJ1cnNhLGJ1cnNhbCxidXJzYXIsYnVyc2FyeSxidXJzYXRlLGJ1cnNlLGJ1cnNlZWQsYnVyc3QsYnVyc3RlcixidXJ0LGJ1cnRvbixidXJ1Y2hhLGJ1cndlZWQsYnVyeSxidXJ5aW5nLGJ1cyxidXNieSxidXNjYXJsLGJ1c2gsYnVzaGVkLGJ1c2hlbCxidXNoZXIsYnVzaGZ1bCxidXNoaSxidXNoaWx5LGJ1c2hpbmcsYnVzaGxldCxidXNod2EsYnVzaHksYnVzaWVkLGJ1c2lseSxidXNpbmUsYnVzayxidXNrZWQsYnVza2VyLGJ1c2tldCxidXNraW4sYnVza2xlLGJ1c2t5LGJ1c21hbixidXNzLGJ1c3NlcixidXNzb2NrLGJ1c3N1LGJ1c3QsYnVzdGFyZCxidXN0ZWQsYnVzdGVlLGJ1c3RlcixidXN0aWMsYnVzdGxlLGJ1c3RsZWQsYnVzdGxlcixidXN5LGJ1c3lpbmcsYnVzeWlzaCxidXQsYnV0YW5hbCxidXRhbmUsYnV0YW5vbCxidXRjaCxidXRjaGVyLGJ1dGVpbixidXRlbmUsYnV0ZW55bCxidXRpYyxidXRpbmUsYnV0bGVyLGJ1dGxlcnksYnV0bWVudCxidXRveHksYnV0b3h5bCxidXR0LGJ1dHRlLGJ1dHRlcixidXR0ZXJ5LGJ1dHRpbmcsYnV0dGxlLGJ1dHRvY2ssYnV0dG9uLGJ1dHRvbnMsYnV0dG9ueSxidXR0eSxidXR5bCxidXR5bGljLGJ1dHluZSxidXR5cixidXR5cmFsLGJ1dHlyaWMsYnV0eXJpbixidXR5cnlsLGJ1eGVycnksYnV4b20sYnV4b21seSxidXksYnV5YWJsZSxidXllcixidXphbmUsYnV6eixidXp6YXJkLGJ1enplcixidXp6aWVzLGJ1enppbmcsYnV6emxlLGJ1enp3aWcsYnV6enksYnksYnljb2tldCxieWUsYnllZSxieWVtYW4sYnllcGF0aCxieWVyaXRlLGJ5Z2FuZSxieWdvLGJ5Z29pbmcsYnlnb25lLGJ5aGFuZCxieWxhdyxieW5hbWUsYnlvbixieW91cyxieW91c2x5LGJ5cGFzcyxieXBhc3QsYnlwYXRoLGJ5cGxheSxieXJlLGJ5cmVtYW4sYnlybGF3LGJ5cm5pZSxieXJvYWQsYnlycnVzLGJ5c2VuLGJ5c3BlbGwsYnlzc2FsLGJ5c3NpbixieXNzaW5lLGJ5c3NvaWQsYnlzc3VzLGJ5dGgsYnl0aW1lLGJ5d2FsayxieXdheSxieXdvbmVyLGJ5d29yZCxieXdvcmssYyxjYSxjYWFtLGNhYW1hLGNhYW1pbmcsY2FhcGViYSxjYWIsY2FiYSxjYWJhYW4sY2FiYWNrLGNhYmFobyxjYWJhbCxjYWJhbGEsY2FiYWxpYyxjYWJhbixjYWJhbmEsY2FiYXJldCxjYWJhcyxjYWJiYWdlLGNhYmJhZ3ksY2FiYmVyLGNhYmJsZSxjYWJibGVyLGNhYmJ5LGNhYmRhLGNhYmVyLGNhYmV6b24sY2FiaW4sY2FiaW5ldCxjYWJpbyxjYWJsZSxjYWJsZWQsY2FibGVyLGNhYmxldCxjYWJsaW5nLGNhYm1hbixjYWJvYixjYWJvY2xlLGNhYm9vayxjYWJvb3NlLGNhYm90LGNhYnJlZSxjYWJyaXQsY2FidXlhLGNhY2FtLGNhY2FvLGNhY2hhemEsY2FjaGUsY2FjaGV0LGNhY2hleHksY2FjaG91LGNhY2hyeXMsY2FjaXF1ZSxjYWNrLGNhY2tsZSxjYWNrbGVyLGNhY29keWwsY2Fjb2VweSxjYWNvbnltLGNhY29vbixjYWN0aSxjYWN0b2lkLGNhY3VyLGNhZCxjYWRhbWJhLGNhZGF2ZXIsY2FkYmFpdCxjYWRiaXQsY2FkYm90ZSxjYWRkaWNlLGNhZGRpZSxjYWRkaXMsY2FkZGlzaCxjYWRkbGUsY2FkZG93LGNhZGR5LGNhZGUsY2FkZWxsZSxjYWRlbmNlLGNhZGVuY3ksY2FkZW50LGNhZGVuemEsY2FkZXIsY2FkZXJhcyxjYWRldCxjYWRldGN5LGNhZGV0dGUsY2FkZXcsY2FkZ2UsY2FkZ2VyLGNhZGdpbHksY2FkZ3ksY2FkaSxjYWRpc20sY2FkamFuLGNhZGxvY2ssY2FkbWlhLGNhZG1pYyxjYWRtaWRlLGNhZG1pdW0sY2Fkb3MsY2FkcmFucyxjYWRyZSxjYWR1YSxjYWR1YWMsY2FkdWNhLGNhZHVzLGNhZHdlZWQsY2FlY2EsY2FlY2FsLGNhZWN1bSxjYWVvbWEsY2Flc3VyYSxjYWZlbmVoLGNhZmVuZXQsY2FmZmEsY2FmZmVpYyxjYWZmZW9sLGNhZmZpc28sY2FmZmxlLGNhZmZveSxjYWZoLGNhZml6LGNhZnRhbixjYWcsY2FnZSxjYWdlZCxjYWdlZnVsLGNhZ2VtYW4sY2FnZXIsY2FnZXksY2FnZ3ksY2FnaWx5LGNhZ2l0LGNhZ21hZyxjYWhpeixjYWhvb3QsY2Fob3QsY2Fob3csY2FpY2tsZSxjYWlkLGNhaW1hbixjYWltaXRvLGNhaW4sY2FpcXVlLGNhaXJkLGNhaXJuLGNhaXJuZWQsY2Fpcm55LGNhaXNzb24sY2FpdGlmZixjYWplcHV0LGNham9sZSxjYWpvbGVyLGNhanVlbGEsY2FqdW4sY2FqdXB1dCxjYWtlLGNha2Vib3gsY2FrZXIsY2FrZXR0ZSxjYWtleSxjYWt5LGNhbCxjYWxhYmEsY2FsYWJlcixjYWxhZGUsY2FsYWlzLGNhbGFsdSxjYWxhbXVzLGNhbGFzaCxjYWxjYXIsY2FsY2VkLGNhbGNpYyxjYWxjaWZ5LGNhbGNpbmUsY2FsY2l0ZSxjYWxjaXVtLGNhbGN1bGksY2FsZGVuLGNhbGRyb24sY2FsZWFuLGNhbGVuZHMsY2FsZXBpbixjYWxmLGNhbGZpc2gsY2FsaWJlcixjYWxpYnJlLGNhbGljZXMsY2FsaWNsZSxjYWxpY28sY2FsaWQsY2FsaWdhLGNhbGlnbyxjYWxpbmRhLGNhbGludXQsY2FsaXBlZSxjYWxpcGVyLGNhbGlwaCxjYWxpdmVyLGNhbGl4LGNhbGssY2Fsa2FnZSxjYWxrZXIsY2Fsa2luLGNhbGtpbmcsY2FsbCxjYWxsYW50LGNhbGxib3ksY2FsbGVyLGNhbGxldCxjYWxsaSxjYWxsaWQsY2FsbGluZyxjYWxsbyxjYWxsb3NlLGNhbGxvdXMsY2FsbG93LGNhbGx1cyxjYWxtLGNhbG1hbnQsY2FsbWVyLGNhbG1seSxjYWxteSxjYWxvbWJhLGNhbG9tZWwsY2Fsb29sLGNhbG9yLGNhbG9yaWMsY2Fsb3JpZSxjYWxvcmlzLGNhbG90dGUsY2Fsb3llcixjYWxwLGNhbHBhYyxjYWxwYWNrLGNhbHRyYXAsY2FsdHJvcCxjYWx1bWJhLGNhbHVtZXQsY2FsdW1ueSxjYWx2ZSxjYWx2ZWQsY2FsdmVyLGNhbHZlcyxjYWx2aXNoLGNhbHZpdHksY2Fsdm91cyxjYWx4LGNhbHljZXMsY2FseWNsZSxjYWx5bW1hLGNhbHlwc28sY2FseXgsY2FtLGNhbWFjYSxjYW1hZ29uLGNhbWFpbCxjYW1hbixjYW1hbnNpLGNhbWFyYSxjYW1hc3MsY2FtYXRhLGNhbWIsY2FtYmF5ZSxjYW1iZXIsY2FtYmlhbCxjYW1iaXNtLGNhbWJpc3QsY2FtYml1bSxjYW1icmVsLGNhbWJ1Y2EsY2FtZSxjYW1laXN0LGNhbWVsLGNhbWVscnksY2FtZW8sY2FtZXJhLGNhbWVyYWwsY2FtaWxsYSxjYW1pb24sY2FtaXNlLGNhbWlzaWEsY2FtbGV0LGNhbW1lZCxjYW1tb2NrLGNhbW9vZGksY2FtcCxjYW1wYW5hLGNhbXBhbmUsY2FtcGVyLGNhbXBobyxjYW1waG9sLGNhbXBob3IsY2FtcGlvbixjYW1wbGUsY2FtcG8sY2FtcG9keSxjYW1wb28sY2FtcHVzLGNhbXVzLGNhbXVzZWQsY2Ftd29vZCxjYW4sY2FuYWJhLGNhbmFkYSxjYW5hZG9sLGNhbmFsLGNhbmFtbyxjYW5hcGUsY2FuYXJkLGNhbmFyaSxjYW5hcmluLGNhbmFyeSxjYW5hc3RhLGNhbmF1dCxjYW5jYW4sY2FuY2VsLGNhbmNlcixjYW5jaCxjYW5jcnVtLGNhbmQsY2FuZGVsYSxjYW5kZW50LGNhbmRpZCxjYW5kaWVkLGNhbmRpZXIsY2FuZGlmeSxjYW5kaXJ1LGNhbmRsZSxjYW5kbGVyLGNhbmRvY2ssY2FuZG9yLGNhbmRyb3ksY2FuZHksY2FuZHlzLGNhbmUsY2FuZWwsY2FuZWxsYSxjYW5lbG8sY2FuZXIsY2FuZXR0ZSxjYW5mdWwsY2FuZ2FuLGNhbmdpYSxjYW5nbGUsY2FuZ2xlcixjYW5ndWUsY2FuaG9vcCxjYW5pZCxjYW5pbGxlLGNhbmluYWwsY2FuaW5lLGNhbmludXMsY2FuaW9ucyxjYW5qYWMsY2FuayxjYW5rZXIsY2Fua2VyeSxjYW5tYW4sY2FubmEsY2FubmFjaCxjYW5uZWQsY2FubmVsLGNhbm5lcixjYW5uZXJ5LGNhbm5ldCxjYW5uaWx5LGNhbm5pbmcsY2Fubm9uLGNhbm5vdCxjYW5udWxhLGNhbm55LGNhbm9lLGNhbm9uLGNhbm9uaWMsY2Fub25yeSxjYW5vcGljLGNhbm9weSxjYW5yb3ksY2Fuc28sY2FudCxjYW50YWxhLGNhbnRhcixjYW50YXJhLGNhbnRhcm8sY2FudGF0YSxjYW50ZWQsY2FudGVlbixjYW50ZXIsY2FudGhhbCxjYW50aHVzLGNhbnRpYyxjYW50aWNvLGNhbnRpbHksY2FudGluYSxjYW50aW5nLGNhbnRpb24sY2FudGlzaCxjYW50bGUsY2FudGxldCxjYW50byxjYW50b24sY2FudG9vbixjYW50b3IsY2FudHJlZCxjYW50cmVmLGNhbnRyaXAsY2FudHVzLGNhbnR5LGNhbnVuLGNhbnZhcyxjYW52YXNzLGNhbnksY2FueW9uLGNhbnpvbixjYW9iYSxjYXAsY2FwYWJsZSxjYXBhYmx5LGNhcGFubmEsY2FwYW5uZSxjYXBheCxjYXBjYXNlLGNhcGUsY2FwZWQsY2FwZWwsY2FwZWxldCxjYXBlbGluLGNhcGVyLGNhcGVyZXIsY2FwZXMsY2FwZnVsLGNhcGgsY2FwaGFyLGNhcGhpdGUsY2FwaWFzLGNhcGljaGEsY2FwaXRhbCxjYXBpdGFuLGNhcGl2aSxjYXBraW4sY2FwbGVzcyxjYXBsaW4sY2FwbWFuLGNhcG1pbnQsY2Fwb21vLGNhcG9uLGNhcG9yYWwsY2Fwb3QsY2Fwb3RlLGNhcHBlZCxjYXBwZXIsY2FwcGllLGNhcHBpbmcsY2FwcGxlLGNhcHB5LGNhcHJhdGUsY2FwcmVvbCxjYXByaWMsY2FwcmljZSxjYXByaWQsY2FwcmluLGNhcHJpbmUsY2Fwcm9pYyxjYXByb2luLGNhcHJvbmUsY2Fwcm95bCxjYXByeWwsY2Fwc2EsY2Fwc2lkLGNhcHNpemUsY2Fwc3RhbixjYXBzdWxhLGNhcHN1bGUsY2FwdGFpbixjYXB0aW9uLGNhcHRpdmUsY2FwdG9yLGNhcHR1cmUsY2FwdWNoZSxjYXB1bGV0LGNhcHVsaW4sY2FyLGNhcmFiYW8sY2FyYWJpZCxjYXJhYmluLGNhcmFidXMsY2FyYWNhbCxjYXJhY29sLGNhcmFjdCxjYXJhZmUsY2FyYWliZSxjYXJhaXBpLGNhcmFtYmEsY2FyYW1lbCxjYXJhbmRhLGNhcmFuZSxjYXJhbm5hLGNhcmFwYXgsY2FyYXBvLGNhcmF0LGNhcmF0Y2gsY2FyYXZhbixjYXJhdmVsLGNhcmF3YXksY2FyYmFybixjYXJiZWVuLGNhcmJlbmUsY2FyYmlkZSxjYXJiaW5lLGNhcmJvLGNhcmJvbixjYXJib25hLGNhcmJvcmEsY2FyYm94eSxjYXJib3ksY2FyYnJvLGNhcmJ1cmUsY2FyYnlsLGNhcmNha2UsY2FyY2FzcyxjYXJjZWFnLGNhcmNlbCxjYXJjb29uLGNhcmQsY2FyZGVjdSxjYXJkZWQsY2FyZGVsLGNhcmRlcixjYXJkaWEsY2FyZGlhYyxjYXJkaWFsLGNhcmRpbixjYXJkaW5nLGNhcmRvLGNhcmRvbCxjYXJkb24sY2FyZG9uYSxjYXJkb29uLGNhcmUsY2FyZWVuLGNhcmVlcixjYXJlZnVsLGNhcmVuZSxjYXJlcixjYXJlc3MsY2FyZXN0LGNhcmV0LGNhcmZhcmUsY2FyZmF4LGNhcmZ1bCxjYXJnYSxjYXJnbyxjYXJob3AsY2FyaWFtYSxjYXJpYm91LGNhcmlkLGNhcmllcyxjYXJpbmEsY2FyaW5hbCxjYXJpb2xlLGNhcmlvdXMsY2FyayxjYXJraW5nLGNhcmtsZWQsY2FybCxjYXJsZXNzLGNhcmxldCxjYXJsaWUsY2FybGluLGNhcmxpbmUsY2FybGluZyxjYXJsaXNoLGNhcmxvYWQsY2FybG90LGNhcmxzLGNhcm1hbixjYXJtZWxlLGNhcm1pbmUsY2FybW90LGNhcm5hZ2UsY2FybmFsLGNhcm5hdGUsY2FybmVvbCxjYXJuZXksY2FybmljLGNhcm5pZnksY2Fybm9zZSxjYXJub3VzLGNhcm9hLGNhcm9iLGNhcm9iYSxjYXJvY2hlLGNhcm9sLGNhcm9sZXIsY2Fyb2xpLGNhcm9saW4sY2Fyb2x1cyxjYXJvbSxjYXJvbmUsY2Fyb25pYyxjYXJvb21lLGNhcm9vbixjYXJvdGljLGNhcm90aWQsY2Fyb3RpbixjYXJvdXNlLGNhcnAsY2FycGFsLGNhcnBhbGUsY2FycGVsLGNhcnBlbnQsY2FycGVyLGNhcnBldCxjYXJwaWQsY2FycGluZyxjYXJwaXVtLGNhcnBvcnQsY2FycG9zLGNhcnB1cyxjYXJyLGNhcnJhY2ssY2FycmVsLGNhcnJpY2ssY2FycmllZCxjYXJyaWVyLGNhcnJpb24sY2Fycml6byxjYXJyb2NoLGNhcnJvdCxjYXJyb3R5LGNhcnJvdyxjYXJyeSxjYXJzZSxjYXJzaG9wLGNhcnNpY2ssY2FydCxjYXJ0YWdlLGNhcnRlLGNhcnRlbCxjYXJ0ZXIsY2FydGZ1bCxjYXJ0bWFuLGNhcnRvbixjYXJ0b29uLGNhcnR3YXksY2FydHksY2FydWEsY2FydWNhbCxjYXJ2YWwsY2FydmUsY2FydmVsLGNhcnZlbixjYXJ2ZW5lLGNhcnZlcixjYXJ2aW5nLGNhcnZvbCxjYXJ2b25lLGNhcnZ5bCxjYXJ5bCxjYXNhYmEsY2FzYWJlLGNhc2FsLGNhc2FsdHksY2FzYXRlLGNhc2F1bixjYXNhdmEsY2FzYXZlLGNhc2F2aSxjYXNiYWgsY2FzY2FkZSxjYXNjYWRvLGNhc2NhcmEsY2FzY28sY2FzY29sLGNhc2UsY2FzZWFzZSxjYXNlYXRlLGNhc2Vib3gsY2FzZWQsY2FzZWZ1bCxjYXNlZnksY2FzZWljLGNhc2VpbixjYXNlb3NlLGNhc2VvdXMsY2FzZXIsY2FzZXJuLGNhc2V1bSxjYXNoLGNhc2hhLGNhc2hhdyxjYXNoYm94LGNhc2hib3ksY2FzaGVsLGNhc2hldyxjYXNoaWVyLGNhc2luZyxjYXNpbm8sY2FzaXJpLGNhc2ssY2Fza2V0LGNhc2tpbmcsY2FzcXVlLGNhc3F1ZWQsY2FzcXVldCxjYXNzLGNhc3NhZHksY2Fzc2UsY2Fzc2VuYSxjYXNzaWEsY2Fzc2llLGNhc3NpbmEsY2Fzc2luZSxjYXNzaW5vLGNhc3NpcyxjYXNzb2NrLGNhc3NvbixjYXNzb29uLGNhc3QsY2FzdGUsY2FzdGVyLGNhc3RpY2UsY2FzdGluZyxjYXN0bGUsY2FzdGxlZCxjYXN0bGV0LGNhc3RvY2ssY2FzdG9mZixjYXN0b3IsY2FzdG9yeSxjYXN0cmEsY2FzdHJhbCxjYXN0cnVtLGNhc3R1bGksY2FzdWFsLGNhc3VhcnksY2FzdWlzdCxjYXN1bGEsY2F0LGNhdGFscGEsY2F0YW4sY2F0YXBhbixjYXRhcmlhLGNhdGFycmgsY2F0YXN0YSxjYXRiaXJkLGNhdGJvYXQsY2F0Y2FsbCxjYXRjaCxjYXRjaGVyLGNhdGNodXAsY2F0Y2h5LGNhdGNsYXcsY2F0ZG9tLGNhdGUsY2F0ZWNodSxjYXRlbGxhLGNhdGVuYSxjYXRlbmFlLGNhdGVyLGNhdGVyYW4sY2F0ZXJlcixjYXRlcnZhLGNhdGV5ZSxjYXRmYWNlLGNhdGZhbGwsY2F0ZmlzaCxjYXRmb290LGNhdGd1dCxjYXRoZWFkLGNhdGhlY3QsY2F0aGV0aSxjYXRoaW4sY2F0aGluZSxjYXRoaW9uLGNhdGhvZGUsY2F0aG9sZSxjYXRob29kLGNhdGhvcCxjYXRocm8sY2F0aW9uLGNhdGl2byxjYXRqYW5nLGNhdGtpbixjYXRsYXAsY2F0bGlrZSxjYXRsaW4sY2F0bGluZyxjYXRtaW50LGNhdG5pcCxjYXRwaXBlLGNhdHNraW4sY2F0c3RlcCxjYXRzdXAsY2F0dGFidSxjYXR0YWlsLGNhdHRhbG8sY2F0dGVyeSxjYXR0aWx5LGNhdHRpbmcsY2F0dGlzaCxjYXR0bGUsY2F0dHksY2F0dmluZSxjYXR3YWxrLGNhdHdpc2UsY2F0d29vZCxjYXR3b3J0LGNhdWJlZW4sY2F1Ym9nZSxjYXVjaCxjYXVjaG8sY2F1Y3VzLGNhdWRhLGNhdWRhZCxjYXVkYWUsY2F1ZGFsLGNhdWRhdGEsY2F1ZGF0ZSxjYXVkZXgsY2F1ZGxlLGNhdWdodCxjYXVrLGNhdWwsY2F1bGQsY2F1bGVzLGNhdWxpbmUsY2F1bGlzLGNhdWxvbWUsY2F1bG90ZSxjYXVtLGNhdW1hLGNhdW5jaCxjYXVwLGNhdXBvLGNhdXJhbGUsY2F1c2FsLGNhdXNhdGUsY2F1c2UsY2F1c2VyLGNhdXNleSxjYXVzaW5nLGNhdXNzZSxjYXVzc29uLGNhdXN0aWMsY2F1dGVsLGNhdXRlcixjYXV0ZXJ5LGNhdXRpb24sY2F1dGl2byxjYXZhLGNhdmFlLGNhdmFsLGNhdmFsbGEsY2F2YWxyeSxjYXZhdGUsY2F2ZSxjYXZlYXQsY2F2ZWwsY2F2ZWxldCxjYXZlcm4sY2F2ZXR0byxjYXZpYXIsY2F2aWUsY2F2aWwsY2F2aWxlcixjYXZpbmcsY2F2aW5ncyxjYXZpc2gsY2F2aXR5LGNhdml5YSxjYXZvcnQsY2F2dXMsY2F2eSxjYXcsY2F3ayxjYXdreSxjYXduZXksY2F3cXVhdyxjYXhpcmksY2F4b24sY2F5LGNheWVubmUsY2F5bWFuLGNhemEsY2F6aW1pLGNlLGNlYXJpbixjZWFzZSxjZWFzbWljLGNlYmVsbCxjZWJpYW4sY2ViaWQsY2ViaWwsY2ViaW5lLGNlYm9pZCxjZWJ1cixjZWNpbHMsY2VjaXR5LGNlZGFyLGNlZGFyZWQsY2VkYXJuLGNlZGFyeSxjZWRlLGNlZGVudCxjZWRlcixjZWRpbGxhLGNlZHJhdCxjZWRyYXRlLGNlZHJlLGNlZHJlbmUsY2VkcmluLGNlZHJpbmUsY2Vkcml1bSxjZWRyb2wsY2Vkcm9uLGNlZHJ5LGNlZHVsYSxjZWUsY2VpYm8sY2VpbCxjZWlsZSxjZWlsZXIsY2VpbGlkaCxjZWlsaW5nLGNlbGFkb24sY2VsZW1pbixjZWxlcnksY2VsZXN0YSxjZWxlc3RlLGNlbGlhYyxjZWxpdGUsY2VsbCxjZWxsYSxjZWxsYWUsY2VsbGFyLGNlbGxlZCxjZWxsaXN0LGNlbGxvLGNlbGxvaWQsY2VsbG9zZSxjZWxsdWxlLGNlbHNpYW4sY2VsdCxjZWx0aXVtLGNlbHR1Y2UsY2VtYmFsbyxjZW1lbnQsY2VuYWNsZSxjZW5kcmUsY2Vub2J5LGNlbnNlLGNlbnNlcixjZW5zaXZlLGNlbnNvcixjZW5zdWFsLGNlbnN1cmUsY2Vuc3VzLGNlbnQsY2VudGFnZSxjZW50YWwsY2VudGFyZSxjZW50YXVyLGNlbnRhdm8sY2VudGVuYSxjZW50ZXIsY2VudGlhcixjZW50aWxlLGNlbnRpbWUsY2VudGltbyxjZW50bmVyLGNlbnRvLGNlbnRyYWQsY2VudHJhbCxjZW50cmljLGNlbnRydW0sY2VudHJ5LGNlbnR1bSxjZW50dXJ5LGNlb3JsLGNlcCxjZXBhLGNlcGUsY2VwaGlkLGNlcHMsY2VwdG9yLGNlcXVpLGNlcmFnbyxjZXJhbCxjZXJhbWFsLGNlcmFtaWMsY2VyYXMsY2VyYXNpbixjZXJhdGEsY2VyYXRlLGNlcmF0ZWQsY2VyY2FsLGNlcmNpLGNlcmN1cyxjZXJlLGNlcmVhbCxjZXJlYnJhLGNlcmVkLGNlcmVvdXMsY2VyZXIsY2VyZXNpbixjZXJldmlzLGNlcmlhLGNlcmljLGNlcmlkZSxjZXJpbGxvLGNlcmltYW4sY2VyaW4sY2VyaW5lLGNlcmlvcHMsY2VyaXNlLGNlcml0ZSxjZXJpdW0sY2VybWV0LGNlcm4sY2VybyxjZXJvbWEsY2Vyb3RlLGNlcm90aWMsY2Vyb3RpbixjZXJvdXMsY2VycmVybyxjZXJyaWFsLGNlcnJpcyxjZXJ0YWluLGNlcnRpZSxjZXJ0aWZ5LGNlcnRpcyxjZXJ0eSxjZXJ1bGUsY2VydW1lbixjZXJ1c2UsY2VydmlkLGNlcnZpbmUsY2Vydml4LGNlcnZvaWQsY2VyeWwsY2VzaW91cyxjZXNpdW0sY2VzcyxjZXNzZXIsY2Vzc2lvbixjZXNzb3IsY2Vzc3BpdCxjZXN0LGNlc3RvZGUsY2VzdG9pZCxjZXN0cnVtLGNlc3R1cyxjZXRhbmUsY2V0ZW5lLGNldGksY2V0aWMsY2V0aW4sY2V0eWwsY2V0eWxpYyxjZXZpbmUsY2hhLGNoYWEsY2hhYixjaGFib3QsY2hhYm91ayxjaGFidWssY2hhY2F0ZSxjaGFjayxjaGFja2VyLGNoYWNrbGUsY2hhY21hLGNoYWNvbmEsY2hhY3RlLGNoYWQsY2hhZXRhLGNoYWZlLGNoYWZlcixjaGFmZXJ5LGNoYWZmLGNoYWZmZXIsY2hhZmZ5LGNoYWZ0LGNoYWZ0ZWQsY2hhZ2FuLGNoYWdyaW4sY2hhZ3VhcixjaGFndWwsY2hhaGFyLGNoYWksY2hhaW4sY2hhaW5lZCxjaGFpbmVyLGNoYWlub24sY2hhaXIsY2hhaXJlcixjaGFpcyxjaGFpc2UsY2hhaXR5YSxjaGFqYSxjaGFrYSxjaGFrYXIsY2hha2FyaSxjaGFrYXppLGNoYWtkYXIsY2hha29idSxjaGFrcmEsY2hha3JhbSxjaGFrc2ksY2hhbCxjaGFsYWNvLGNoYWxhbmEsY2hhbGF6YSxjaGFsYXplLGNoYWxjaWQsY2hhbGNvbixjaGFsY3VzLGNoYWxkZXIsY2hhbGV0LGNoYWxpY2UsY2hhbGssY2hhbGtlcixjaGFsa3ksY2hhbGxhaCxjaGFsbGllLGNoYWxsaXMsY2hhbG1lcixjaGFsb24sY2hhbG9uZSxjaGFscXVlLGNoYWx0YSxjaGFsdXR6LGNoYW0sY2hhbWFsLGNoYW1hcixjaGFtYmVyLGNoYW1idWwsY2hhbWZlcixjaGFtaXNvLGNoYW1pdGUsY2hhbW1hLGNoYW1vaXMsY2hhbXAsY2hhbXBhYyxjaGFtcGVyLGNoYW1weSxjaGFuY2UsY2hhbmNlbCxjaGFuY2VyLGNoYW5jaGUsY2hhbmNvLGNoYW5jcmUsY2hhbmN5LGNoYW5kYW0sY2hhbmRpLGNoYW5kb28sY2hhbmR1LGNoYW5kdWwsY2hhbmcsY2hhbmdhLGNoYW5nYXIsY2hhbmdlLGNoYW5nZXIsY2hhbmssY2hhbm5lbCxjaGFubmVyLGNoYW5zb24sY2hhbnN0LGNoYW50LGNoYW50ZXIsY2hhbnRleSxjaGFudHJ5LGNoYW8sY2hhb3MsY2hhb3RpYyxjaGFwLGNoYXBhaCxjaGFwZSxjaGFwZWF1LGNoYXBlZCxjaGFwZWwsY2hhcGluLGNoYXBsZXQsY2hhcG1hbixjaGFwcGVkLGNoYXBwZXIsY2hhcHBpZSxjaGFwcGluLGNoYXBwb3csY2hhcHB5LGNoYXBzLGNoYXB0LGNoYXB0ZXIsY2hhcixjaGFyYWMsY2hhcmFkZSxjaGFyYXMsY2hhcmJvbixjaGFyZCxjaGFyZSxjaGFyZXIsY2hhcmV0LGNoYXJnZSxjaGFyZ2VlLGNoYXJnZXIsY2hhcmllcixjaGFyaWx5LGNoYXJpb3QsY2hhcmlzbSxjaGFyaXR5LGNoYXJrLGNoYXJrYSxjaGFya2hhLGNoYXJtLGNoYXJtZWwsY2hhcm1lcixjaGFybmVsLGNoYXJwaXQsY2hhcnBveSxjaGFycXVpLGNoYXJyLGNoYXJyeSxjaGFydCxjaGFydGVyLGNoYXJ1ayxjaGFyeSxjaGFzZSxjaGFzZXIsY2hhc2luZyxjaGFzbSxjaGFzbWEsY2hhc21hbCxjaGFzbWVkLGNoYXNtaWMsY2hhc215LGNoYXNzZSxjaGFzc2lzLGNoYXN0ZSxjaGFzdGVuLGNoYXQsY2hhdGFrYSxjaGF0ZWF1LGNoYXRpLGNoYXR0YSxjaGF0dGVsLGNoYXR0ZXIsY2hhdHR5LGNoYXVrLGNoYXVzLGNoYXV0ZSxjaGF1dGgsY2hhdmlzaCxjaGF3LGNoYXdhbixjaGF3ZXIsY2hhd2ssY2hhd2wsY2hheSxjaGF5YSxjaGF5b3RlLGNoYXphbixjaGUsY2hlYXAsY2hlYXBlbixjaGVhcGx5LGNoZWF0LGNoZWF0ZWUsY2hlYXRlcixjaGViZWMsY2hlYmVsLGNoZWJvZyxjaGVidWxlLGNoZWNrLGNoZWNrZWQsY2hlY2tlcixjaGVja3VwLGNoZWNreSxjaGVkZXIsY2hlZSxjaGVlY2hhLGNoZWVrLGNoZWVrZXIsY2hlZWt5LGNoZWVwLGNoZWVwZXIsY2hlZXB5LGNoZWVyLGNoZWVyZWQsY2hlZXJlcixjaGVlcmlvLGNoZWVybHksY2hlZXJ5LGNoZWVzZSxjaGVlc2VyLGNoZWVzeSxjaGVldCxjaGVldGFoLGNoZWV0ZXIsY2hlZXRpZSxjaGVmLGNoZWdvZSxjaGVncmUsY2hlaXIsY2hla2FuLGNoZWtlLGNoZWtpLGNoZWttYWssY2hlbGEsY2hlbGF0ZSxjaGVsZW0sY2hlbGlkZSxjaGVsbG8sY2hlbG9uZSxjaGVscCxjaGVseXMsY2hlbWljLGNoZW1pcyxjaGVtaXNlLGNoZW1pc20sY2hlbWlzdCxjaGVuYSxjaGVuZGUsY2hlbmcsY2hlbmljYSxjaGVxdWUsY2hlcmVtLGNoZXJpc2gsY2hlcm9vdCxjaGVycnksY2hlcnQsY2hlcnRlLGNoZXJ0eSxjaGVydWIsY2hlcnZpbCxjaGVzb24sY2hlc3MsY2hlc3NlbCxjaGVzc2VyLGNoZXN0LGNoZXN0ZXIsY2hlc3R5LGNoZXRoLGNoZXR0aWssY2hldHR5LGNoZXZhZ2UsY2hldmFsLGNoZXZlLGNoZXZlbixjaGV2aW4sY2hldmlzZSxjaGV2b24sY2hldnJvbixjaGV2eSxjaGV3LGNoZXdlcixjaGV3aW5rLGNoZXd5LGNoZXluZXksY2hoYXRyaSxjaGksY2hpYSxjaGlhc20sY2hpYXNtYSxjaGlhdXMsY2hpYm91ayxjaGlicml0LGNoaWMsY2hpY2FuZSxjaGljaGksY2hpY2ssY2hpY2tlbixjaGlja2VyLGNoaWNreSxjaGljbGUsY2hpY28sY2hpY29yeSxjaGljb3QsY2hpY290ZSxjaGlkLGNoaWRkZW4sY2hpZGUsY2hpZGVyLGNoaWRpbmcsY2hpZHJhLGNoaWVmLGNoaWVmbHksY2hpZWxkLGNoaWVuLGNoaWZmZXIsY2hpZmZvbixjaGlnZ2FrLGNoaWdnZXIsY2hpZ25vbixjaGlnb2UsY2hpaCxjaGloZnUsY2hpa2FyYSxjaGlsLGNoaWxkLGNoaWxkZSxjaGlsZGVkLGNoaWxkbHksY2hpbGUsY2hpbGksY2hpbGlhZCxjaGlsbCxjaGlsbGEsY2hpbGxlZCxjaGlsbGVyLGNoaWxsbyxjaGlsbHVtLGNoaWxseSxjaGlsb21hLGNoaWx2ZXIsY2hpbWJsZSxjaGltZSxjaGltZXIsY2hpbWVyYSxjaGltbmV5LGNoaW4sY2hpbmEsY2hpbmFyLGNoaW5jaCxjaGluY2hhLGNoaW5jaGUsY2hpbmUsY2hpbmVkLGNoaW5nLGNoaW5nbWEsY2hpbmlrLGNoaW5pbixjaGluayxjaGlua2VyLGNoaW5rbGUsY2hpbmtzLGNoaW5reSxjaGlubmFtLGNoaW5uZWQsY2hpbm55LGNoaW5vLGNoaW5vYSxjaGlub2wsY2hpbnNlLGNoaW50LGNoaW50eixjaGlwLGNoaXBsZXQsY2hpcHBlZCxjaGlwcGVyLGNoaXBweSxjaGlwcyxjaGlyYWwsY2hpcmF0YSxjaGlyaXBhLGNoaXJrLGNoaXJtLGNoaXJvLGNoaXJwLGNoaXJwZXIsY2hpcnB5LGNoaXJyLGNoaXJydXAsY2hpc2VsLGNoaXQsY2hpdGFrLGNoaXRhbCxjaGl0aW4sY2hpdG9uLGNoaXRvc2UsY2hpdHJhLGNoaXR0ZXIsY2hpdHR5LGNoaXZlLGNoaXZleSxjaGthbGlrLGNobGFteWQsY2hsYW15cyxjaGxvcixjaGxvcmFsLGNobG9yZSxjaGxvcmljLGNobG9yeWwsY2hvLGNob2FuYSxjaG9hdGUsY2hvYXR5LGNob2IsY2hvY2EsY2hvY2FyZCxjaG9jaG8sY2hvY2ssY2hvY2tlcixjaG9lbCxjaG9lbml4LGNob2ZmZXIsY2hvZ2EsY2hvZ2FrLGNob2dzZXQsY2hvaWNlLGNob2ljeSxjaG9pbCxjaG9pbGVyLGNob2lyLGNob2thZ2UsY2hva2UsY2hva2VyLGNob2tpbmcsY2hva3JhLGNob2t5LGNob2wsY2hvbGEsY2hvbGFuZSxjaG9sYXRlLGNob2xkLGNob2xlaWMsY2hvbGVyLGNob2xlcmEsY2hvbGksY2hvbGljLGNob2xpbmUsY2hvbGxhLGNob2xsZXIsY2hvbHVtLGNob21wLGNob25kcmUsY2hvbnRhLGNob29wLGNob29zZSxjaG9vc2VyLGNob29zeSxjaG9wLGNob3BhLGNob3BpbixjaG9waW5lLGNob3BwZWQsY2hvcHBlcixjaG9wcHksY2hvcmFneSxjaG9yYWwsY2hvcmQsY2hvcmRhLGNob3JkYWwsY2hvcmRlZCxjaG9yZSxjaG9yZWEsY2hvcmVhbCxjaG9yZWUsY2hvcmVneSxjaG9yZWljLGNob3JldXMsY2hvcmlhbCxjaG9yaWMsY2hvcmluZSxjaG9yaW9uLGNob3Jpc20sY2hvcmlzdCxjaG9yb2dpLGNob3JvaWQsY2hvcm9vayxjaG9ydCxjaG9ydGVuLGNob3J0bGUsY2hvcnVzLGNob3J5b3MsY2hvc2UsY2hvc2VuLGNob3R0LGNob3VnaCxjaG91a2EsY2hvdXAsY2hvdXMsY2hvdXNlLGNob3VzZXIsY2hvdyxjaG93ZGVyLGNob3drLGNob3dyeSxjaG95YSxjaHJpYSxjaHJpc20sY2hyaXNtYSxjaHJpc29tLGNocm9tYSxjaHJvbWUsY2hyb21pYyxjaHJvbWlkLGNocm9tbyxjaHJvbXksY2hyb215bCxjaHJvbmFsLGNocm9uaWMsY2hyb3R0YSxjaHJ5c2FsLGNocnlzaWQsY2hyeXNpbixjaHViLGNodWJiZWQsY2h1YmJ5LGNodWNrLGNodWNrZXIsY2h1Y2tsZSxjaHVja3ksY2h1ZGRhcixjaHVmYSxjaHVmZixjaHVmZnksY2h1ZyxjaHVnZ2VyLGNodWhyYSxjaHVrYXIsY2h1a2tlcixjaHVrb3IsY2h1bGFuLGNodWxscGEsY2h1bSxjaHVtbWVyLGNodW1teSxjaHVtcCxjaHVtcHksY2h1bixjaHVuYXJpLGNodW5nYSxjaHVuayxjaHVua3ksY2h1bm5lcixjaHVubmlhLGNodW50ZXIsY2h1cGFrLGNodXBvbixjaHVyY2gsY2h1cmNoeSxjaHVyZWwsY2h1cmwsY2h1cmxlZCxjaHVybHksY2h1cm0sY2h1cm4sY2h1cnIsY2h1cnJ1cyxjaHV0LGNodXRlLGNodXRlcixjaHV0bmV5LGNoeWFjayxjaHlhayxjaHlsZSxjaHlsaWZ5LGNoeWxvaWQsY2h5bG91cyxjaHltYXNlLGNoeW1lLGNoeW1pYSxjaHltaWMsY2h5bWlmeSxjaHltb3VzLGNoeXByZSxjaHl0cmEsY2h5dHJpZCxjaWJvbCxjaWJvcnksY2lib3VsZSxjaWNhZCxjaWNhZGEsY2ljYWRpZCxjaWNhbGEsY2ljZWx5LGNpY2VyLGNpY2hsaWQsY2lkYXJpZCxjaWRhcmlzLGNpZGVyLGNpZyxjaWdhbGEsY2lnYXIsY2lndWEsY2lsaWEsY2lsaWFyeSxjaWxpYXRlLGNpbGljZSxjaWxpdW0sY2ltYmlhLGNpbWVsaWEsY2ltZXgsY2ltaWNpZCxjaW1saW5lLGNpbmNoLGNpbmNoZXIsY2luY2xpcyxjaW5jdCxjaW5kZXIsY2luZGVyeSxjaW5lLGNpbmVsLGNpbmVtYSxjaW5lbmUsY2luZW9sZSxjaW5lcmVhLGNpbmdsZSxjaW5ueWwsY2lucXVlLGNpbnRlcixjaW51cmFuLGNpb24sY2lwaGVyLGNpcG8sY2lwb2xpbixjaXBwdXMsY2lyY2EsY2lyY2xlLGNpcmNsZWQsY2lyY2xlcixjaXJjbGV0LGNpcmN1aXQsY2lyY3VzLGNpcmN1c3ksY2lycXVlLGNpcnJhdGUsY2lycmksY2lycm9zZSxjaXJyb3VzLGNpcnJ1cyxjaXJzb2lkLGNpcnVlbGEsY2lzY28sY2lzZSxjaXNlbGUsY2lzc2luZyxjaXNzb2lkLGNpc3QsY2lzdGEsY2lzdGFlLGNpc3RlZCxjaXN0ZXJuLGNpc3RpYyxjaXQsY2l0YWJsZSxjaXRhZGVsLGNpdGF0b3IsY2l0ZSxjaXRlZSxjaXRlcixjaXRlc3MsY2l0aGFyYSxjaXRoZXIsY2l0aWVkLGNpdGlmeSxjaXRpemVuLGNpdG9sZSxjaXRyYWwsY2l0cmF0ZSxjaXRyZWFuLGNpdHJlbmUsY2l0cmljLGNpdHJpbCxjaXRyaW4sY2l0cmluZSxjaXRyb24sY2l0cm91cyxjaXRydXMsY2l0dGVybixjaXR1YSxjaXR5LGNpdHlkb20sY2l0eWZ1bCxjaXR5aXNoLGNpdmUsY2l2ZXQsY2l2aWMsY2l2aWNzLGNpdmlsLGNpdmlsbHksY2l2aXNtLGNpdnZ5LGNpeGlpZCxjbGFiYmVyLGNsYWNoYW4sY2xhY2ssY2xhY2tlcixjbGFja2V0LGNsYWQsY2xhZGluZSxjbGFkb2RlLGNsYWRvc2UsY2xhZHVzLGNsYWcsY2xhZ2d1bSxjbGFnZ3ksY2xhaW0sY2xhaW1lcixjbGFpcmNlLGNsYWl0aCxjbGFpdmVyLGNsYW0sY2xhbWFudCxjbGFtYixjbGFtYmVyLGNsYW1lLGNsYW1lcixjbGFtbWVkLGNsYW1tZXIsY2xhbW15LGNsYW1vcixjbGFtcCxjbGFtcGVyLGNsYW4sY2xhbmcsY2xhbmdvcixjbGFuayxjbGFubmVkLGNsYXAsY2xhcG5ldCxjbGFwcGVkLGNsYXBwZXIsY2xhcHQsY2xhcXVlLGNsYXF1ZXIsY2xhcmFpbixjbGFyZXQsY2xhcmlmeSxjbGFyaW4sY2xhcmlvbixjbGFyaXR5LGNsYXJrLGNsYXJvLGNsYXJ0LGNsYXJ0eSxjbGFyeSxjbGFzaCxjbGFzaGVyLGNsYXNoeSxjbGFzcCxjbGFzcGVyLGNsYXNwdCxjbGFzcyxjbGFzc2VkLGNsYXNzZXIsY2xhc3NlcyxjbGFzc2ljLGNsYXNzaXMsY2xhc3N5LGNsYXN0aWMsY2xhdCxjbGF0Y2gsY2xhdHRlcixjbGF0dHksY2xhdWdodCxjbGF1c2FsLGNsYXVzZSxjbGF1dCxjbGF2YSxjbGF2YWwsY2xhdmF0ZSxjbGF2ZSxjbGF2ZWwsY2xhdmVyLGNsYXZpYWwsY2xhdmllcixjbGF2aW9sLGNsYXZpcyxjbGF2b2xhLGNsYXZ1cyxjbGF2eSxjbGF3LGNsYXdlZCxjbGF3ZXIsY2xhd2ssY2xhd2tlcixjbGF5LGNsYXllbixjbGF5ZXIsY2xheWV5LGNsYXlpc2gsY2xheW1hbixjbGF5cGFuLGNsZWFjaCxjbGVhZCxjbGVhZGVkLGNsZWFtLGNsZWFtZXIsY2xlYW4sY2xlYW5lcixjbGVhbmx5LGNsZWFuc2UsY2xlYW51cCxjbGVhcixjbGVhcmVyLGNsZWFybHksY2xlYXQsY2xlYXZlLGNsZWF2ZXIsY2xlY2hlLGNsZWNrLGNsZWQsY2xlZGdlLGNsZWRneSxjbGVlLGNsZWVrLGNsZWVrZWQsY2xlZWt5LGNsZWYsY2xlZnQsY2xlZnRlZCxjbGVnLGNsZW0sY2xlbWVudCxjbGVuY2gsY2xlb2lkLGNsZXAsY2xlcmd5LGNsZXJpYyxjbGVyaWQsY2xlcmlzeSxjbGVyayxjbGVya2x5LGNsZXJ1Y2gsY2xldGNoLGNsZXVjaCxjbGV2ZSxjbGV2ZXIsY2xldmlzLGNsZXcsY2xpYWNrLGNsaWNoZSxjbGljayxjbGlja2VyLGNsaWNrZXQsY2xpY2t5LGNsaWVuY3ksY2xpZW50LGNsaWZmLGNsaWZmZWQsY2xpZmZ5LGNsaWZ0LGNsaWZ0eSxjbGltYSxjbGltYXRhLGNsaW1hdGUsY2xpbWF0aCxjbGltYXgsY2xpbWIsY2xpbWJlcixjbGltZSxjbGluYWwsY2xpbmNoLGNsaW5lLGNsaW5nLGNsaW5nZXIsY2xpbmd5LGNsaW5pYSxjbGluaWMsY2xpbml1bSxjbGluayxjbGlua2VyLGNsaW5rdW0sY2xpbm9pZCxjbGludCxjbGludHksY2xpcCxjbGlwZWksY2xpcGV1cyxjbGlwcGVkLGNsaXBwZXIsY2xpcHMsY2xpcHNlLGNsaXB0LGNsaXF1ZSxjbGlxdXksY2xpc2VyZSxjbGl0LGNsaXRjaCxjbGl0ZSxjbGl0ZXMsY2xpdGhlLGNsaXRpYSxjbGl0aW9uLGNsaXR0ZXIsY2xpdmFsLGNsaXZlLGNsaXZlcnMsY2xpdmlzLGNsaXZ1cyxjbG9hY2EsY2xvYWNhbCxjbG9hayxjbG9ha2VkLGNsb2FtLGNsb2FtZW4sY2xvYW1lcixjbG9iYmVyLGNsb2NoYW4sY2xvY2hlLGNsb2NoZXIsY2xvY2ssY2xvY2tlZCxjbG9ja2VyLGNsb2QsY2xvZGRlcixjbG9kZHksY2xvZGxldCxjbG9mZixjbG9nLGNsb2dnZXIsY2xvZ2d5LGNsb2doYWQsY2xvZ3d5bixjbG9pdCxjbG9tYixjbG9tYmVuLGNsb25hbCxjbG9uZSxjbG9uaWMsY2xvbmlzbSxjbG9udXMsY2xvb2YsY2xvb3AsY2xvb3QsY2xvb3RpZSxjbG9wLGNsb3NlLGNsb3NlZCxjbG9zZWx5LGNsb3NlbixjbG9zZXIsY2xvc2V0LGNsb3NoLGNsb3Npc2gsY2xvc3RlcixjbG9zdXJlLGNsb3QsY2xvdGJ1cixjbG90ZSxjbG90aCxjbG90aGUsY2xvdGhlcyxjbG90aHksY2xvdHRlcixjbG90dHksY2xvdHVyZSxjbG91ZCxjbG91ZGVkLGNsb3VkeSxjbG91Z2gsY2xvdXIsY2xvdXQsY2xvdXRlZCxjbG91dGVyLGNsb3V0eSxjbG92ZSxjbG92ZW4sY2xvdmVuZSxjbG92ZXIsY2xvdmVyeSxjbG93LGNsb3duLGNsb3ksY2xveWVyLGNsb3lpbmcsY2x1YixjbHViYmVkLGNsdWJiZXIsY2x1YmJ5LGNsdWJkb20sY2x1Ym1hbixjbHVjayxjbHVlLGNsdWZmLGNsdW1wLGNsdW1weSxjbHVtc2UsY2x1bXN5LGNsdW5jaCxjbHVuZyxjbHVuayxjbHVwZWlkLGNsdXN0ZXIsY2x1dGNoLGNsdXRoZXIsY2x1dHRlcixjbHksY2x5ZXIsY2x5cGUsY2x5cGVhbCxjbHlwZXVzLGNseXNpcyxjbHlzbWEsY2x5c21pYyxjbHlzdGVyLGNuZW1pYWwsY25lbWlzLGNuaWNpbixjbmlkYSxjb2Fib2RlLGNvYWNoLGNvYWNoZWUsY29hY2hlcixjb2FjaHksY29hY3QsY29hY3Rvcixjb2FkYXB0LGNvYWRtaXQsY29hZG9yZSxjb2FnZWQsY29hZ2VudCxjb2FndWxhLGNvYWlkLGNvYWl0YSxjb2FrLGNvYWt1bSxjb2FsLGNvYWxiYWcsY29hbGJpbixjb2FsYm94LGNvYWxlcixjb2FsaWZ5LGNvYWxpemUsY29hbHBpdCxjb2FseSxjb2FtaW5nLGNvYW5uZXgsY29hcHQsY29hcmIsY29hcnNlLGNvYXJzZW4sY29hc3QsY29hc3RhbCxjb2FzdGVyLGNvYXQsY29hdGVkLGNvYXRlZSxjb2F0ZXIsY29hdGksY29hdGllLGNvYXRpbmcsY29heCxjb2F4YWwsY29heGVyLGNvYXhpYWwsY29heGluZyxjb2F4eSxjb2IsY29iYWVhLGNvYmFsdCxjb2JhbmcsY29iYmVkLGNvYmJlcixjb2JiaW5nLGNvYmJsZSxjb2JibGVyLGNvYmJseSxjb2JicmEsY29iYnksY29iY2FiLGNvYmVnbyxjb2JoZWFkLGNvYmlhLGNvYmlyb24sY29ibGUsY29ibGVzcyxjb2Jsb2FmLGNvYm51dCxjb2JvbGEsY29ib3VyZyxjb2JyYSxjb2J1cmcsY29id2ViLGNvYndvcmssY29jYSxjb2NhaW5lLGNvY2FzaCxjb2NhdXNlLGNvY2NhbCxjb2NjaSxjb2NjaWQsY29jY28sY29jY29pZCxjb2Njb3VzLGNvY2N1bGUsY29jY3VzLGNvY2N5eCxjb2NoYWwsY29jaGllZixjb2NobGVhLGNvY2ssY29ja2FkZSxjb2NrYWwsY29ja2VkLGNvY2tlcixjb2NrZXQsY29ja2V5ZSxjb2NraWx5LGNvY2tpbmcsY29ja2lzaCxjb2NrbGUsY29ja2xlZCxjb2NrbGVyLGNvY2tsZXQsY29ja2x5LGNvY2tuZXksY29ja3BpdCxjb2Nrc2h5LGNvY2t1cCxjb2NreSxjb2NvLGNvY29hLGNvY29hY2gsY29jb251dCxjb2Nvb24sY29jb3R0ZSxjb2N0aWxlLGNvY3Rpb24sY29jdWlzYSxjb2N1bGxvLGNvY3V5byxjb2QsY29kYSxjb2RiYW5rLGNvZGRlcixjb2RkaW5nLGNvZGRsZSxjb2RkbGVyLGNvZGUsY29kZWluZSxjb2Rlcixjb2RleCxjb2RmaXNoLGNvZGdlcixjb2RoZWFkLGNvZGljYWwsY29kaWNlcyxjb2RpY2lsLGNvZGlmeSxjb2RpbGxhLGNvZGlsbGUsY29kaXN0LGNvZGxpbmcsY29kbWFuLGNvZG8sY29kb2wsY29kb24sY29kd29ybSxjb2UsY29lY2FsLGNvZWN1bSxjb2VkLGNvZWxhcixjb2VsZGVyLGNvZWxlY3QsY29lbGhvLGNvZWxpYSxjb2VsaWFjLGNvZWxpYW4sY29lbGluLGNvZWxpbmUsY29lbG9tLGNvZWxvbWEsY29lbXB0LGNvZW5hY3QsY29lbmpveSxjb2Vub2JlLGNvZXF1YWwsY29lcmNlLGNvZXJjZXIsY29ldHVzLGNvZXZhbCxjb2V4ZXJ0LGNvZXhpc3QsY29mZixjb2ZmZWUsY29mZmVyLGNvZmZpbixjb2ZmbGUsY29mZnJldCxjb2Z0LGNvZyxjb2dlbmNlLGNvZ2VuY3ksY29nZW5lcixjb2dlbnQsY29nZ2VkLGNvZ2dlcixjb2dnaWUsY29nZ2luZyxjb2dnbGUsY29nZ2x5LGNvZ2hsZSxjb2dtYW4sY29nbmFjLGNvZ25hdGUsY29nbml6ZSxjb2dvbixjb2dvbmFsLGNvZ3JhaWwsY29ncm9hZCxjb2d1ZSxjb2d3YXksY29nd29vZCxjb2hhYml0LGNvaGVpcixjb2hlcmUsY29oZXJlcixjb2hpYml0LGNvaG8sY29ob2JhLGNvaG9sLGNvaG9ydCxjb2hvc2gsY29odW5lLGNvaWYsY29pZmVkLGNvaWduLGNvaWd1ZSxjb2lsLGNvaWxlZCxjb2lsZXIsY29pbGluZyxjb2luLGNvaW5hZ2UsY29pbmVyLGNvaW5mZXIsY29pbmluZyxjb2ludGVyLGNvaW55LGNvaXIsY29pdGFsLGNvaXRpb24sY29pdHVyZSxjb2l0dXMsY29qdWRnZSxjb2p1cm9yLGNva2UsY29rZW1hbixjb2tlcixjb2tlcnksY29raW5nLGNva3ksY29sLGNvbGEsY29sYW5lLGNvbGFyaW4sY29sYXRlLGNvbGF1eGUsY29sYmFjayxjb2xkLGNvbGRlcixjb2xkaXNoLGNvbGRseSxjb2xlLGNvbGV0aXQsY29sZXVyLGNvbGksY29saWJyaSxjb2xpYyxjb2xpY2FsLGNvbGlja3ksY29saW1hLGNvbGluLGNvbGluZyxjb2xpdGljLGNvbGl0aXMsY29sayxjb2xsLGNvbGxhZ2UsY29sbGFyLGNvbGxhcmQsY29sbGFyZSxjb2xsYXRlLGNvbGxhdWQsY29sbGVjdCxjb2xsZWVuLGNvbGxlZ2UsY29sbGVyeSxjb2xsZXQsY29sbGV5LGNvbGxpZGUsY29sbGllLGNvbGxpZWQsY29sbGllcixjb2xsaW4sY29sbGluZSxjb2xsaW5nLGNvbGxpbnMsY29sbG9jayxjb2xsb2lkLGNvbGxvcCxjb2xsdWRlLGNvbGx1bSxjb2xseSxjb2xseWJhLGNvbG1hcixjb2xvYmluLGNvbG9uLGNvbG9uZWwsY29sb25pYyxjb2xvbnksY29sb3IsY29sb3JlZCxjb2xvcmVyLGNvbG9yaW4sY29sb3JzLGNvbG9yeSxjb2xvc3MsY29sb3NzaSxjb2xvdmUsY29scCxjb2xwZW8sY29scG9ydCxjb2xwdXMsY29sdCxjb2x0ZXIsY29sdGlzaCxjb2x1Z28sY29sdW1ibyxjb2x1bW4sY29sdW5hcixjb2x1cmUsY29seSxjb2x5b25lLGNvbHl0aWMsY29seXVtLGNvbHphLGNvbWEsY29tYWtlcixjb21hbCxjb21hbWllLGNvbWFuaWMsY29tYXJ0LGNvbWF0ZSxjb21iLGNvbWJhdCxjb21iZWQsY29tYmVyLGNvbWJpbmUsY29tYmluZyxjb21ibGUsY29tYm95LGNvbWJ1cmUsY29tYnVzdCxjb21ieSxjb21lLGNvbWVkaWMsY29tZWRvLGNvbWVkeSxjb21lbHksY29tZW5pYyxjb21lcixjb21lcyxjb21ldCxjb21ldGljLGNvbWZpdCxjb21mb3J0LGNvbWZyZXksY29tZnksY29taWMsY29taWNhbCxjb21pY3J5LGNvbWluZyxjb21pbm8sY29taXNtLGNvbWl0YWwsY29taXRpYSxjb21pdHksY29tbWEsY29tbWFuZCxjb21tZW5kLGNvbW1lbnQsY29tbWllLGNvbW1pdCxjb21taXgsY29tbWl4dCxjb21tb2RlLGNvbW1vbixjb21tb25zLGNvbW1vdCxjb21tb3ZlLGNvbW11bmEsY29tbXVuZSxjb21tdXRlLGNvbW9pZCxjb21vc2UsY29tb3Vybixjb21vdXMsY29tcGFjdCxjb21wYW55LGNvbXBhcmUsY29tcGFydCxjb21wYXNzLGNvbXBlYXIsY29tcGVlcixjb21wZWwsY29tcGVuZCxjb21wZXRlLGNvbXBpbGUsY29tcGxleCxjb21wbGluLGNvbXBsb3QsY29tcGx5LGNvbXBvLGNvbXBvZXIsY29tcG9sZSxjb21wb25lLGNvbXBvbnksY29tcG9ydCxjb21wb3MsY29tcG9zZSxjb21wb3N0LGNvbXBvdGUsY29tcHJlZyxjb21wdGVyLGNvbXB1dGUsY29tcmFkZSxjb24sY29uYWNyZSxjb25hbCxjb25hbWVkLGNvbmF0dXMsY29uY2F2ZSxjb25jZWFsLGNvbmNlZGUsY29uY2VpdCxjb25jZW50LGNvbmNlcHQsY29uY2Vybixjb25jZXJ0LGNvbmNoLGNvbmNoYSxjb25jaGFsLGNvbmNoZSxjb25jaGVkLGNvbmNoZXIsY29uY2h5LGNvbmNpbGUsY29uY2lzZSxjb25jb2N0LGNvbmNvcmQsY29uY3VweSxjb25jdXIsY29uY3Vzcyxjb25kLGNvbmRlbW4sY29uZGlnbixjb25kaXRlLGNvbmRvbGUsY29uZG9uZSxjb25kb3IsY29uZHVjZSxjb25kdWN0LGNvbmR1aXQsY29uZHlsZSxjb25lLGNvbmVkLGNvbmVlbixjb25laW5lLGNvbmVsZXQsY29uZXIsY29uZXMsY29uZmFiLGNvbmZhY3QsY29uZmVjdCxjb25mZXNzLGNvbmZpZGUsY29uZmluZSxjb25maXJtLGNvbmZpeCxjb25mbG93LGNvbmZsdXgsY29uZm9ybSxjb25mdXNlLGNvbmZ1dGUsY29uZ2EsY29uZ2VhbCxjb25nZWUsY29uZ2VyLGNvbmdlc3QsY29uZ2l1cyxjb25nb3UsY29uaWMsY29uaWNhbCxjb25pY2xlLGNvbmljcyxjb25pZGlhLGNvbmlmZXIsY29uaW1hLGNvbmluLGNvbmluZSxjb25qZWN0LGNvbmpvaW4sY29uanVyZSxjb25qdXJ5LGNvbmssY29ua2VyLGNvbmtlcnMsY29ua3ksY29ubixjb25uYWNoLGNvbm5hdGUsY29ubmVjdCxjb25uZXIsY29ubmV4LGNvbm5pbmcsY29ubml2ZSxjb25ub3RlLGNvbm9pZCxjb25vcGlkLGNvbnF1ZXIsY29ucmVkLGNvbnNlbnQsY29uc2lnbixjb25zaXN0LGNvbnNvbCxjb25zb2xlLGNvbnNvcnQsY29uc3B1ZSxjb25zdGF0LGNvbnN1bCxjb25zdWx0LGNvbnN1bWUsY29uc3V0ZSxjb250YWN0LGNvbnRhaW4sY29udGUsY29udGVjdCxjb250ZW1uLGNvbnRlbnQsY29udGVyLGNvbnRlc3QsY29udGV4dCxjb250aXNlLGNvbnRvLGNvbnRvcnQsY29udG91cixjb250cmEsY29udHJvbCxjb250dW5kLGNvbnR1c2UsY29udXJlLGNvbnVzLGNvbnVzZWUsY29udXNvcixjb251emVlLGNvbnV6b3IsY29udmVjdCxjb252ZW5lLGNvbnZlbnQsY29udmVydCxjb252ZXRoLGNvbnZleCxjb252ZXksY29udmljdCxjb252aXZlLGNvbnZva2UsY29udm95LGNvbnksY29vLGNvb2JhLGNvb2RsZSxjb29lZSxjb29lcixjb29mLGNvb2luZyxjb29qYSxjb29rLGNvb2tkb20sY29va2VlLGNvb2tlcixjb29rZXJ5LGNvb2tpbmcsY29va2lzaCxjb29rb3V0LGNvb2t5LGNvb2wsY29vbGFudCxjb29sZW4sY29vbGVyLGNvb2xpZSxjb29saW5nLGNvb2xpc2gsY29vbGx5LGNvb2x0aCxjb29sdW5nLGNvb2x5LGNvb20sY29vbWIsY29vbXksY29vbixjb29uY2FuLGNvb25pbHksY29vbnRpZSxjb29ueSxjb29wLGNvb3Blcixjb29wZXJ5LGNvb3JlZSxjb29yaWUsY29vc2VyLGNvb3N0LGNvb3QsY29vdGVyLGNvb3RoYXksY29vdGllLGNvcCxjb3BhLGNvcGFibGUsY29wYWVuZSxjb3BhaWJhLGNvcGFpeWUsY29wYWwsY29wYWxtLGNvcGFydCxjb3BhcnR5LGNvcGUsY29wZWksY29wZW1hbixjb3Blbixjb3BlcG9kLGNvcGVyLGNvcGVydGEsY29waWVkLGNvcGllcixjb3BpbG90LGNvcGluZyxjb3Bpb3VzLGNvcGlzLGNvcGlzdCxjb3BpdGEsY29wb2xhcixjb3BwZWQsY29wcGVyLGNvcHBlcnksY29wcGV0LGNvcHBpY2UsY29wcGluLGNvcHBpbmcsY29wcGxlLGNvcHBsZWQsY29wcHksY29wcixjb3ByYSxjb3Byb3NlLGNvcHNlLGNvcHNpbmcsY29wc3ksY29wdGVyLGNvcHVsYSxjb3B1bGFyLGNvcHVzLGNvcHksY29weWNhdCxjb3B5aXNtLGNvcHlpc3QsY29weW1hbixjb3F1ZSxjb3F1ZXQsY29xdWluYSxjb3F1aXRhLGNvcXVpdG8sY29yLGNvcmEsY29yYWNoLGNvcmFjbGUsY29yYWgsY29yYWlzZSxjb3JhbCxjb3JhbGVkLGNvcmFtLGNvcmFudG8sY29yYmFuLGNvcmJlYXUsY29yYmVpbCxjb3JiZWwsY29yYmllLGNvcmJ1bGEsY29yY2Fzcyxjb3JjaXIsY29yZCxjb3JkYWdlLGNvcmRhbnQsY29yZGF0ZSxjb3JkYXgsY29yZGVkLGNvcmRlbCxjb3JkZXIsY29yZGlhbCxjb3JkaWVzLGNvcmRpbmcsY29yZGl0ZSxjb3Jkb2JhLGNvcmRvbixjb3JkeSxjb3JkeWwsY29yZSxjb3JlYmVsLGNvcmVkLGNvcmVpZCxjb3JlaWduLGNvcmVsbGEsY29yZXIsY29yZixjb3JnZSxjb3JnaSxjb3JpYWwsY29yaWluLGNvcmluZyxjb3Jpbm5lLGNvcml1bSxjb3JrLGNvcmthZ2UsY29ya2UsY29ya2VkLGNvcmtlcixjb3JraW5nLGNvcmtpc2gsY29ya2l0ZSxjb3JreSxjb3JtLGNvcm1lbCxjb3Jtb2lkLGNvcm1vdXMsY29ybXVzLGNvcm4sY29ybmFnZSxjb3JuYmluLGNvcm5jb2IsY29ybmVhLGNvcm5lYWwsY29ybmVpbixjb3JuZWwsY29ybmVyLGNvcm5ldCxjb3JuZXVtLGNvcm5pYyxjb3JuaWNlLGNvcm5pbixjb3JuaW5nLGNvcm51LGNvcm51YWwsY29ybnVsZSxjb3JudXRlLGNvcm51dG8sY29ybnksY29yb2EsY29yb2R5LGNvcm9sLGNvcm9sbGEsY29yb25hLGNvcm9uYWQsY29yb25hZSxjb3JvbmFsLGNvcm9uZXIsY29yb25ldCxjb3Jvem8sY29ycCxjb3Jwb3JhLGNvcnBzLGNvcnBzZSxjb3JwdXMsY29ycmFkZSxjb3JyYWwsY29ycmVhbCxjb3JyZWN0LGNvcnJpZSxjb3JyaWdlLGNvcnJvZGUsY29ycnVwdCxjb3JzYWMsY29yc2FnZSxjb3JzYWlyLGNvcnNlLGNvcnNldCxjb3JzaWUsY29yc2l0ZSxjb3J0YSxjb3J0ZWdlLGNvcnRleCxjb3J0ZXosY29ydGluLGNvcnRpbmEsY29ydWNvLGNvcnVsZXIsY29ydXBheSxjb3J2ZXIsY29ydmluYSxjb3J2aW5lLGNvcnZvaWQsY29yeWwsY29yeWxpbixjb3J5bWIsY29yeXphLGNvcyxjb3NhcXVlLGNvc2NldCxjb3NlYXQsY29zZWMsY29zZWNoLGNvc2Vpc20sY29zZXQsY29zaCxjb3NoZXIsY29zaGVyeSxjb3NpbHksY29zaW5lLGNvc21pYyxjb3NtaXNtLGNvc21pc3QsY29zbW9zLGNvc3MsY29zc2FzLGNvc3NlLGNvc3NldCxjb3NzaWQsY29zdCxjb3N0YSxjb3N0YWwsY29zdGFyLGNvc3RhcmQsY29zdGF0ZSxjb3N0ZWFuLGNvc3Rlcixjb3N0aW5nLGNvc3RpdmUsY29zdGx5LGNvc3RyZWwsY29zdHVsYSxjb3N0dW1lLGNvc3ksY290LGNvdGNoLGNvdGUsY290ZWZ1bCxjb3RlcmllLGNvdGgsY290aGUsY290aGlzaCxjb3Rob24sY290aHVybixjb3RoeSxjb3RpZGFsLGNvdGlzZSxjb3RsYW5kLGNvdG1hbixjb3RvLGNvdG9pbixjb3Rvcm8sY290cmluZSxjb3RzZXQsY290dGEsY290dGFnZSxjb3R0ZSxjb3R0ZWQsY290dGVyLGNvdHRpZCxjb3R0aWVyLGNvdHRvaWQsY290dG9uLGNvdHRvbnksY290dHksY290dWl0LGNvdHVsYSxjb3R1dG9yLGNvdHdpbixjb3R3aXN0LGNvdHlsYSxjb3R5bGFyLGNvdHlwZSxjb3VhYyxjb3VjYWwsY291Y2gsY291Y2hlZCxjb3VjaGVlLGNvdWNoZXIsY291Y2h5LGNvdWRlLGNvdWRlZSxjb3VlLGNvdWdhcixjb3VnaCxjb3VnaGVyLGNvdWduYXIsY291bCxjb3VsZCxjb3VsZWUsY291bG9tYixjb3VsdXJlLGNvdW1hLGNvdW1hcmEsY291bmNpbCxjb3VuaXRlLGNvdW5zZWwsY291bnQsY291bnRlcixjb3VudG9yLGNvdW50cnksY291bnR5LGNvdXAsY291cGFnZSxjb3VwZSxjb3VwZWQsY291cGVlLGNvdXBlcixjb3VwbGUsY291cGxlZCxjb3VwbGVyLGNvdXBsZXQsY291cG9uLGNvdXB1cmUsY291cmFnZSxjb3VyYW50LGNvdXJhcCxjb3VyYixjb3VyZ2UsY291cmlkYSxjb3VyaWVyLGNvdXJpbCxjb3VybGFuLGNvdXJzZSxjb3Vyc2VkLGNvdXJzZXIsY291cnQsY291cnRlcixjb3VydGluLGNvdXJ0bHksY291c2luLGNvdXNpbnksY291dGVsLGNvdXRlcixjb3V0aCxjb3V0aGllLGNvdXRpbCxjb3V2YWRlLGNvdXhpYSxjb3ZhZG8sY292ZSxjb3ZlZCxjb3ZlbnQsY292ZXIsY292ZXJlZCxjb3ZlcmVyLGNvdmVydCxjb3ZldCxjb3ZldGVyLGNvdmV5LGNvdmlkLGNvdmluLGNvdmluZyxjb3Zpc2l0LGNvdml0ZSxjb3csY293YWwsY293YXJkLGNvd2FyZHksY293YmFuZSxjb3diZWxsLGNvd2JpbmQsY293YmlyZCxjb3dib3ksY293ZGllLGNvd2Vlbixjb3dlcixjb3dmaXNoLGNvd2dhdGUsY293Z3JhbSxjb3doYWdlLGNvd2hlZWwsY293aGVyYixjb3doZXJkLGNvd2hpZGUsY293aG9ybixjb3dpc2gsY293aXRjaCxjb3dsLGNvd2xlLGNvd2xlZCxjb3dsaWNrLGNvd2xpa2UsY293bGluZyxjb3dtYW4sY293cGF0aCxjb3dwZWEsY293cGVuLGNvd3BvY2ssY293cG94LGNvd3JpZSxjb3dyb2lkLGNvd3NoZWQsY293c2tpbixjb3dzbGlwLGNvd3RhaWwsY293d2VlZCxjb3d5LGNvd3lhcmQsY294LGNveGEsY294YWwsY294Y29tYixjb3hpdGUsY294aXRpcyxjb3h5LGNveSxjb3lhbixjb3lkb2csY295aXNoLGNveWx5LGNveW5lc3MsY295bnllLGNveW8sY295b2wsY295b3RlLGNveXB1LGNveXVyZSxjb3osY296ZSxjb3plbixjb3plbmVyLGNvemllcixjb3ppbHksY296eSxjcmFiLGNyYWJiZWQsY3JhYmJlcixjcmFiYnksY3JhYmVyLGNyYWJsZXQsY3JhYm1hbixjcmFjayxjcmFja2VkLGNyYWNrZXIsY3JhY2tsZSxjcmFja2x5LGNyYWNreSxjcmFkZHksY3JhZGdlLGNyYWRsZSxjcmFkbGVyLGNyYWZ0LGNyYWZ0eSxjcmFnLGNyYWdnYW4sY3JhZ2dlZCxjcmFnZ3ksY3JhaWNoeSxjcmFpbixjcmFpc2V5LGNyYWl6ZXksY3JhanVydSxjcmFrZSxjcmFrb3csY3JhbSxjcmFtYmUsY3JhbWJpZCxjcmFtYmxlLGNyYW1ibHksY3JhbWJvLGNyYW1tZXIsY3JhbXAsY3JhbXBlZCxjcmFtcGVyLGNyYW1wZXQsY3JhbXBvbixjcmFtcHksY3JhbixjcmFuYWdlLGNyYW5jZSxjcmFuZSxjcmFuZXIsY3JhbmV5LGNyYW5pYSxjcmFuaWFkLGNyYW5pYWwsY3JhbmlhbixjcmFuaWMsY3Jhbml1bSxjcmFuayxjcmFua2VkLGNyYW5rZXIsY3JhbmtsZSxjcmFua2x5LGNyYW5rdW0sY3Jhbmt5LGNyYW5ub2csY3Jhbm55LGNyYW50cyxjcmFwLGNyYXBhdWQsY3JhcGUsY3JhcHBpZSxjcmFwcGluLGNyYXBwbGUsY3JhcHBvLGNyYXBzLGNyYXB5LGNyYXJlLGNyYXNoLGNyYXNoZXIsY3Jhc2lzLGNyYXNzLGNyYXNzbHksY3JhdGNoLGNyYXRlLGNyYXRlcixjcmF1bmNoLGNyYXZhdCxjcmF2ZSxjcmF2ZW4sY3JhdmVyLGNyYXZpbmcsY3Jhdm8sY3JhdyxjcmF3ZGFkLGNyYXdmdWwsY3Jhd2wsY3Jhd2xlcixjcmF3bGV5LGNyYXdseSxjcmF3bSxjcmF3dGFlLGNyYXllcixjcmF5b24sY3JhemUsY3JhemVkLGNyYXppbHksY3JhenksY3JlYSxjcmVhZ2gsY3JlYWdodCxjcmVhayxjcmVha2VyLGNyZWFreSxjcmVhbSxjcmVhbWVyLGNyZWFteSxjcmVhbmNlLGNyZWFudCxjcmVhc2UsY3JlYXNlcixjcmVhc3ksY3JlYXQsY3JlYXRlLGNyZWF0aWMsY3JlYXRvcixjcmVjaGUsY3JlZGVudCxjcmVkaXQsY3JlZSxjcmVlZCxjcmVlZGFsLGNyZWVkZWQsY3JlZWssY3JlZWtlcixjcmVla3ksY3JlZWwsY3JlZWxlcixjcmVlbSxjcmVlbixjcmVlcCxjcmVlcGVyLGNyZWVwaWUsY3JlZXB5LGNyZWVzZSxjcmVlc2gsY3JlZXNoeSxjcmVtYXRlLGNyZW1vbmUsY3JlbW9yLGNyZW11bGUsY3JlbmEsY3JlbmF0ZSxjcmVuZWwsY3JlbmVsZSxjcmVuaWMsY3JlbnVsYSxjcmVvbGUsY3Jlb3NvbCxjcmVwZSxjcmVwaW5lLGNyZXBvbixjcmVwdCxjcmVweSxjcmVzb2wsY3Jlc294eSxjcmVzcyxjcmVzc2VkLGNyZXNzZXQsY3Jlc3NvbixjcmVzc3ksY3Jlc3QsY3Jlc3RlZCxjcmVzeWwsY3JldGEsY3JldGljLGNyZXRpZnksY3JldGluLGNyZXRpb24sY3JldmljZSxjcmV3LGNyZXdlbCxjcmV3ZXIsY3Jld21hbixjcmliLGNyaWJiZXIsY3JpYmJsZSxjcmlibyxjcmlicmFsLGNyaWMsY3JpY2ssY3JpY2tldCxjcmlja2V5LGNyaWNrbGUsY3JpY29pZCxjcmllZCxjcmllcixjcmlleSxjcmlnLGNyaWxlLGNyaW1lLGNyaW1pbmUsY3JpbXAsY3JpbXBlcixjcmltcGxlLGNyaW1weSxjcmltc29uLGNyaW4sY3JpbmFsLGNyaW5lLGNyaW5lZCxjcmluZXQsY3JpbmdlLGNyaW5nZXIsY3JpbmdsZSxjcmluaXRlLGNyaW5rLGNyaW5rbGUsY3JpbmtseSxjcmlub2lkLGNyaW5vc2UsY3JpbnVsYSxjcmlwZXMsY3JpcHBsZSxjcmlwcGx5LGNyaXNlcyxjcmlzaWMsY3Jpc2lzLGNyaXNwLGNyaXNwZWQsY3Jpc3BlcixjcmlzcGx5LGNyaXNweSxjcmlzcyxjcmlzc2FsLGNyaXNzdW0sY3Jpc3RhLGNyaXRjaCxjcml0aCxjcml0aWMsY3JpenpsZSxjcm8sY3JvYWssY3JvYWtlcixjcm9ha3ksY3JvYyxjcm9jYXJkLGNyb2NlaWMsY3JvY2Vpbixjcm9jaGUsY3JvY2hldCxjcm9jaSxjcm9jaW4sY3JvY2ssY3JvY2tlcixjcm9ja2V0LGNyb2NreSxjcm9jdXMsY3JvZnQsY3JvZnRlcixjcm9tZSxjcm9uZSxjcm9uZXQsY3JvbmlzaCxjcm9uayxjcm9ueSxjcm9vZCxjcm9vZGxlLGNyb29rLGNyb29rZWQsY3Jvb2tlbixjcm9va2xlLGNyb29sLGNyb29uLGNyb29uZXIsY3JvcCxjcm9wbWFuLGNyb3BwYSxjcm9wcGVyLGNyb3BwaWUsY3JvcHB5LGNyb3F1ZXQsY3JvcmUsY3Jvc2EsY3Jvc2llcixjcm9zbmVzLGNyb3NzLGNyb3NzZSxjcm9zc2VkLGNyb3NzZXIsY3Jvc3NseSxjcm90YWwsY3JvdGFsbyxjcm90Y2gsY3JvdGNoeSxjcm90aW4sY3JvdHRsZSxjcm90eWwsY3JvdWNoLGNyb3VwLGNyb3VwYWwsY3JvdXBlLGNyb3VweSxjcm91c2UsY3JvdXQsY3JvdXRlLGNyb3V0b24sY3Jvdyxjcm93YmFyLGNyb3dkLGNyb3dkZWQsY3Jvd2Rlcixjcm93ZHksY3Jvd2VyLGNyb3dob3AsY3Jvd2luZyxjcm93bCxjcm93bixjcm93bmVkLGNyb3duZXIsY3Jvd3RvZSxjcm95LGNyb3lkZW4sY3JveWRvbixjcm96ZSxjcm96ZXIsY3JvenpsZSxjcm96emx5LGNydWJlZW4sY3J1Y2UsY3J1Y2VzLGNydWNoZSxjcnVjaWFsLGNydWNpYW4sY3J1Y2lmeSxjcnVjaWx5LGNydWNrLGNydWRlLGNydWRlbHksY3J1ZGl0eSxjcnVlbCxjcnVlbGx5LGNydWVscyxjcnVlbHR5LGNydWVudCxjcnVldCxjcnVldHksY3J1aXNlLGNydWlzZXIsY3J1aXZlLGNydWxsZXIsY3J1bSxjcnVtYixjcnVtYmVyLGNydW1ibGUsY3J1bWJseSxjcnVtYnksY3J1bWVuLGNydW1sZXQsY3J1bW1pZSxjcnVtbXksY3J1bXAsY3J1bXBlcixjcnVtcGV0LGNydW1wbGUsY3J1bXBseSxjcnVtcHksY3J1bmNoLGNydW5jaHksY3J1bmssY3J1bmtsZSxjcnVub2RlLGNydW50LGNydW9yLGNydXBwZXIsY3J1cmFsLGNydXJldXMsY3J1cyxjcnVzYWRlLGNydXNhZG8sY3J1c2UsY3J1c2gsY3J1c2hlZCxjcnVzaGVyLGNydXNpZSxjcnVzaWx5LGNydXN0LGNydXN0YSxjcnVzdGFsLGNydXN0ZWQsY3J1c3RlcixjcnVzdHksY3J1dGNoLGNydXRoLGNydXR0ZXIsY3J1eCxjcnksY3J5YWJsZSxjcnliYWJ5LGNyeWluZyxjcnlvZ2VuLGNyeW9zZWwsY3J5cHQsY3J5cHRhLGNyeXB0YWwsY3J5cHRlZCxjcnlwdGljLGNyeXN0YWwsY3J5c3RpYyxjc2FyZGFzLGN0ZW5lLGN0ZW5vaWQsY3VhZHJhLGN1YXJ0YSxjdWIsY3ViYWdlLGN1YmJpbmcsY3ViYmlzaCxjdWJieSxjdWJkb20sY3ViZSxjdWJlYixjdWJlbGV0LGN1YmVyLGN1Ymhvb2QsY3ViaSxjdWJpYyxjdWJpY2EsY3ViaWNhbCxjdWJpY2xlLGN1YmljbHksY3ViaXNtLGN1YmlzdCxjdWJpdCxjdWJpdGFsLGN1Yml0ZWQsY3ViaXRvLGN1Yml0dXMsY3Vib2lkLGN1Y2ssY3Vja29sZCxjdWNrb28sY3VjdWxsYSxjdWQsY3VkYXZhLGN1ZGJlYXIsY3VkZGVuLGN1ZGRsZSxjdWRkbHksY3VkZHksY3VkZ2VsLGN1ZHdlZWQsY3VlLGN1ZWJhbGwsY3VlY2EsY3VlaXN0LGN1ZW1hbixjdWVyZGEsY3Vlc3RhLGN1ZmYsY3VmZmVyLGN1ZmZpbixjdWZmeSxjdWluYWdlLGN1aXIsY3VpcmFzcyxjdWlzaW5lLGN1aXNzZSxjdWlzc2VuLGN1aXN0ZW4sY3VrZSxjdWxidXQsY3VsZWJyYSxjdWxldCxjdWxldXMsY3VsZ2VlLGN1bGljaWQsY3VsbCxjdWxsYSxjdWxsYWdlLGN1bGxlcixjdWxsZXQsY3VsbGluZyxjdWxsaW9uLGN1bGxpcyxjdWxseSxjdWxtLGN1bG1lbixjdWxteSxjdWxvdHRlLGN1bHBhLGN1bHBvc2UsY3VscHJpdCxjdWx0LGN1bHRjaCxjdWx0aWMsY3VsdGlzaCxjdWx0aXNtLGN1bHRpc3QsY3VsdHVhbCxjdWx0dXJlLGN1bHR1cyxjdWx2ZXIsY3VsdmVydCxjdW0sY3VtYWwsY3VtYXksY3VtYmVudCxjdW1iZXIsY3VtYmhhLGN1bWJseSxjdW1icmUsY3VtYnUsY3VtZW5lLGN1bWVueWwsY3VtaGFsLGN1bWljLGN1bWlkaW4sY3VtaW4sY3VtaW5hbCxjdW1pbmljLGN1bWlub2wsY3VtaW55bCxjdW1tZXIsY3VtbWluLGN1bW9sLGN1bXAsY3Vtc2hhdyxjdW11bGFyLGN1bXVsaSxjdW11bHVzLGN1bXlsLGN1bmVhbCxjdW5lYXRlLGN1bmV0dGUsY3VuZXVzLGN1bmlsYSxjdW5qYWgsY3VuamVyLGN1bm5lcixjdW5uaW5nLGN1bnllLGN1b3JpbixjdXAsY3VwYXksY3VwY2FrZSxjdXBlbCxjdXBlbGVyLGN1cGZ1bCxjdXBoZWFkLGN1cGlkb24sY3VwbGVzcyxjdXBtYW4sY3VwbWF0ZSxjdXBvbGEsY3Vwb2xhcixjdXBwZWQsY3VwcGVyLGN1cHBpbmcsY3VwcHksY3VwcmVuZSxjdXByaWMsY3VwcmlkZSxjdXByaXRlLGN1cHJvaWQsY3Vwcm9zZSxjdXByb3VzLGN1cHJ1bSxjdXBzZWVkLGN1cHVsYSxjdXB1bGUsY3VyLGN1cmFibGUsY3VyYWJseSxjdXJhY2FvLGN1cmFjeSxjdXJhcmUsY3VyYXRlLGN1cmF0ZWwsY3VyYXRpYyxjdXJhdG9yLGN1cmIsY3VyYmVyLGN1cmJpbmcsY3VyYnksY3VyY2FzLGN1cmNoLGN1cmQsY3VyZGxlLGN1cmRsZXIsY3VyZGx5LGN1cmR5LGN1cmUsY3VyZXIsY3VyZXR0ZSxjdXJmZXcsY3VyaWFsLGN1cmlhdGUsY3VyaWUsY3VyaW4sY3VyaW5lLGN1cmluZyxjdXJpbyxjdXJpb3NhLGN1cmlvc28sY3VyaW91cyxjdXJpdGUsY3VyaXVtLGN1cmwsY3VybGVkLGN1cmxlcixjdXJsZXcsY3VybGlrZSxjdXJsaWx5LGN1cmxpbmcsY3VybHksY3VybixjdXJuZXksY3Vybm9jayxjdXJwbGUsY3VycixjdXJyYWNoLGN1cnJhY2ssY3VycmFnaCxjdXJyYW50LGN1cnJlbnQsY3VycmllZCxjdXJyaWVyLGN1cnJpc2gsY3VycnksY3Vyc2FsLGN1cnNlLGN1cnNlZCxjdXJzZXIsY3Vyc2hpcCxjdXJzaXZlLGN1cnNvcixjdXJzb3J5LGN1cnN0LGN1cnN0bHksY3Vyc3VzLGN1cnQsY3VydGFpbCxjdXJ0YWluLGN1cnRhbCxjdXJ0YXRlLGN1cnRlc3ksY3VydGx5LGN1cnRzeSxjdXJ1YSxjdXJ1YmEsY3VydWxlLGN1cnVybyxjdXJ2YW50LGN1cnZhdGUsY3VydmUsY3VydmVkLGN1cnZlcixjdXJ2ZXQsY3Vydml0eSxjdXJ2b3VzLGN1cnZ5LGN1c2N1cyxjdXNlYyxjdXNoLGN1c2hhZyxjdXNoYXQsY3VzaGF3LGN1c2hpb24sY3VzaHksY3VzaWUsY3VzayxjdXNwLGN1c3BhbCxjdXNwYXRlLGN1c3BlZCxjdXNwaWQsY3VzcHVsZSxjdXNzLGN1c3NlZCxjdXNzZXIsY3Vzc28sY3VzdGFyZCxjdXN0b2R5LGN1c3RvbSxjdXN0b21zLGN1dCxjdXRhd2F5LGN1dGJhY2ssY3V0Y2gsY3V0Y2hlcixjdXRlLGN1dGVseSxjdXRoZWFsLGN1dGljbGUsY3V0aWUsY3V0aW4sY3V0aXMsY3V0aXRpcyxjdXRsYXNzLGN1dGxlcixjdXRsZXJ5LGN1dGxldCxjdXRsaW5nLGN1dGxpcHMsY3V0b2ZmLGN1dG91dCxjdXRvdmVyLGN1dHRhZ2UsY3V0dGFpbCxjdXR0ZWQsY3V0dGVyLGN1dHRpbmcsY3V0dGxlLGN1dHRsZXIsY3V0dG9vLGN1dHR5LGN1dHVwLGN1dHdlZWQsY3V0d29yayxjdXR3b3JtLGN1dmV0dGUsY3V2eSxjdXlhLGN3aWVyYyxjd20sY3lhbixjeWFuYXRlLGN5YW5lYW4sY3lhbmljLGN5YW5pZGUsY3lhbmluLGN5YW5pbmUsY3lhbml0ZSxjeWFuaXplLGN5YW5vbCxjeWFub2xlLGN5YW5vc2UsY3lhbnVzLGN5YXRoLGN5YXRob3MsY3lhdGh1cyxjeWNhZCxjeWNsYW5lLGN5Y2xhcixjeWNsYXMsY3ljbGUsY3ljbGVuZSxjeWNsZXIsY3ljbGlhbixjeWNsaWMsY3ljbGlkZSxjeWNsaW5nLGN5Y2xpc20sY3ljbGlzdCxjeWNsaXplLGN5Y2xvaWQsY3ljbG9uZSxjeWNsb3BlLGN5Y2xvcHksY3ljbG9zZSxjeWNsdXMsY3llc2lzLGN5Z25ldCxjeWduaW5lLGN5a2UsY3lsaXgsY3ltYSxjeW1hcixjeW1iYSxjeW1iYWwsY3ltYmFsbyxjeW1iYXRlLGN5bWUsY3ltZWxldCxjeW1lbmUsY3ltbGluZyxjeW1vaWQsY3ltb3NlLGN5bW91cyxjeW11bGUsY3luZWJvdCxjeW5pYyxjeW5pY2FsLGN5bmlwaWQsY3luaXNtLGN5bm9pZCxjeXAsY3lwcmUsY3lwcmVzLGN5cHJlc3MsY3lwcmluZSxjeXBzZWxhLGN5cnVzLGN5c3QsY3lzdGFsLGN5c3RlZCxjeXN0aWMsY3lzdGlkLGN5c3RpbmUsY3lzdGlzLGN5c3RvaWQsY3lzdG9tYSxjeXN0b3NlLGN5c3RvdXMsY3l0YXNlLGN5dGFzaWMsY3l0aXRpcyxjeXRvZGUsY3l0b2lkLGN5dG9tYSxjeXRvbixjeXRvc3QsY3l0dWxhLGN6YXIsY3phcmRhcyxjemFyZG9tLGN6YXJpYW4sY3phcmljLGN6YXJpbmEsY3phcmlzaCxjemFyaXNtLGN6YXJpc3QsZCxkYSxkYWFsZGVyLGRhYixkYWJiLGRhYmJhLGRhYmJlcixkYWJibGUsZGFiYmxlcixkYWJieSxkYWJsZXQsZGFib2lhLGRhYm95YSxkYWJzdGVyLGRhY2UsZGFjaXRlLGRhY2l0aWMsZGFja2VyLGRhY29pdCxkYWNvaXR5LGRhY3J5b24sZGFjdHlsLGRhZCxkYWRhLGRhZGFwLGRhZGRlcixkYWRkbGUsZGFkZG9jayxkYWRkeSxkYWRlLGRhZG8sZGFlLGRhZWRhbCxkYWVtb24sZGFlbW9ueSxkYWVyLGRhZmYsZGFmZmVyeSxkYWZmaW5nLGRhZmZpc2gsZGFmZmxlLGRhZmZ5LGRhZnQsZGFmdGx5LGRhZyxkYWdhYmEsZGFnYW1lLGRhZ2Fzc2EsZGFnZXNoLGRhZ2dhLGRhZ2dlcixkYWdnZXJzLGRhZ2dsZSxkYWdnbHksZGFnZ3ksZGFnaGVzaCxkYWdsb2NrLGRhZ29iYSxkYWdzLGRhaCxkYWhvb24sZGFpZGxlLGRhaWRseSxkYWlrZXIsZGFpa29uLGRhaWx5LGRhaW1lbixkYWltaW8sZGFpbW9uLGRhaW4sZGFpbmNoYSxkYWludHksZGFpcmEsZGFpcmksZGFpcnksZGFpcyxkYWlzaWVkLGRhaXN5LGRhaXR5YSxkYWl2YSxkYWssZGFrZXIsZGFraXIsZGFsLGRhbGFyLGRhbGUsZGFsZW1hbixkYWxlcixkYWxldGgsZGFsaSxkYWxrLGRhbGxhY2ssZGFsbGUsZGFsbGVzLGRhbGxpZXIsZGFsbHksZGFsdCxkYWx0ZWVuLGRhbHRvbixkYW0sZGFtYSxkYW1hZ2UsZGFtYWdlcixkYW1hZ2VzLGRhbWFuLGRhbWFzayxkYW1hc3NlLGRhbWJvc2UsZGFtYnJvZCxkYW1lLGRhbWlhbmEsZGFtaWUsZGFtaWVyLGRhbWluZSxkYW1saWtlLGRhbW1hcixkYW1tZSxkYW1tZXIsZGFtbWlzaCxkYW1uLGRhbW5lZCxkYW1uZXIsZGFtbmlmeSxkYW1uaW5nLGRhbW5vdXMsZGFtcCxkYW1wYW5nLGRhbXBlZCxkYW1wZW4sZGFtcGVyLGRhbXBpbmcsZGFtcGlzaCxkYW1wbHksZGFtcHksZGFtc2VsLGRhbXNvbixkYW4sZGFuYWlkLGRhbmFpZGUsZGFuYWluZSxkYW5haXRlLGRhbmNlLGRhbmNlcixkYW5jZXJ5LGRhbmNpbmcsZGFuZCxkYW5kYSxkYW5kZXIsZGFuZGlmeSxkYW5kaWx5LGRhbmRsZSxkYW5kbGVyLGRhbmR5LGRhbmcsZGFuZ2VyLGRhbmdsZSxkYW5nbGVyLGRhbmdsaW4sZGFuaW8sZGFuayxkYW5raXNoLGRhbmtseSxkYW5saSxkYW5uZXIsZGFubm9jayxkYW5zYW50LGRhbnRhLGRhbnRvbixkYW8sZGFvaW5lLGRhcCxkYXBobmluLGRhcGljaG8sZGFwaWNvLGRhcGlmZXIsZGFwcGVyLGRhcHBsZSxkYXBwbGVkLGRhcixkYXJhYyxkYXJhZixkYXJhdCxkYXJiaGEsZGFyYnksZGFyZGFvbCxkYXJlLGRhcmVhbGwsZGFyZWZ1bCxkYXJlcixkYXJlc2F5LGRhcmcsZGFyZ2FoLGRhcmdlcixkYXJndWUsZGFyaSxkYXJpYmFoLGRhcmljLGRhcmluZyxkYXJpb2xlLGRhcmssZGFya2VuLGRhcmtmdWwsZGFya2lzaCxkYXJrbGUsZGFya2x5LGRhcmt5LGRhcmxpbmcsZGFybixkYXJuZWQsZGFybmVsLGRhcm5lcixkYXJuZXgsZGFybmluZyxkYXJvZ2EsZGFyb28sZGFycixkYXJyZWluLGRhcnN0LGRhcnQsZGFydGFycyxkYXJ0ZXIsZGFydGluZyxkYXJ0bGUsZGFydG1hbixkYXJ0b2ljLGRhcnRvaWQsZGFydG9zLGRhcnRyZSxkYXJ0cyxkYXJ6ZWUsZGFzLGRhc2gsZGFzaGVkLGRhc2hlZSxkYXNoZWVuLGRhc2hlcixkYXNoaW5nLGRhc2hwb3QsZGFzaHksZGFzaSxkYXNudCxkYXNzaWUsZGFzc3ksZGFzdGFyZCxkYXN0dXIsZGFzdHVyaSxkYXN5dXJlLGRhdGEsZGF0YWJsZSxkYXRhYmx5LGRhdGFyaWEsZGF0YXJ5LGRhdGNoLGRhdGNoYSxkYXRlLGRhdGVyLGRhdGlsLGRhdGluZyxkYXRpb24sZGF0aXZhbCxkYXRpdmUsZGF0dG9jayxkYXR1bSxkYXR1cmljLGRhdWIsZGF1YmUsZGF1YmVyLGRhdWJlcnksZGF1YmluZyxkYXVieSxkYXVkLGRhdW5jaCxkYXVuY3ksZGF1bnQsZGF1bnRlcixkYXVudG9uLGRhdXBoaW4sZGF1dCxkYXV0aWUsZGF1dyxkYXZhY2gsZGF2ZW4sZGF2ZXIsZGF2ZXJkeSxkYXZpdCxkYXZvY2gsZGF2eSxkYXZ5bmUsZGF3LGRhd2RsZSxkYXdkbGVyLGRhd2R5LGRhd2lzaCxkYXdraW4sZGF3bixkYXduaW5nLGRhd255LGRhd3RldCxkYXd0aXQsZGF3dXQsZGF5LGRheWFsLGRheWJlYW0sZGF5Ym9vayxkYXlkYXduLGRheWZseSxkYXlsZXNzLGRheWxpdCxkYXlsb25nLGRheW1hbixkYXltYXJlLGRheW1hcmssZGF5cm9vbSxkYXlzLGRheXNtYW4sZGF5c3RhcixkYXl0YWxlLGRheXRpZGUsZGF5dGltZSxkYXl3YXJkLGRheXdvcmssZGF5d3JpdCxkYXplLGRhemVkLGRhemVkbHksZGF6eSxkYXp6bGUsZGF6emxlcixkZSxkZWFjb24sZGVhZCxkZWFkZW4sZGVhZGVyLGRlYWRleWUsZGVhZGluZyxkZWFkaXNoLGRlYWRseSxkZWFkbWFuLGRlYWRwYW4sZGVhZHBheSxkZWFmLGRlYWZlbixkZWFmaXNoLGRlYWZseSxkZWFpcixkZWFsLGRlYWxhdGUsZGVhbGVyLGRlYWxpbmcsZGVhbHQsZGVhbixkZWFuZXIsZGVhbmVyeSxkZWFuZXNzLGRlYXIsZGVhcmllLGRlYXJseSxkZWFydGgsZGVhcnksZGVhc2gsZGVhc2lsLGRlYXRoLGRlYXRoaW4sZGVhdGhseSxkZWF0aHksZGVhdmUsZGVhdmVseSxkZWIsZGViYWNsZSxkZWJhZGdlLGRlYmFyLGRlYmFyayxkZWJhc2UsZGViYXNlcixkZWJhdGUsZGViYXRlcixkZWJhdWNoLGRlYmJ5LGRlYmVpZ2UsZGViZW4sZGViaWxlLGRlYmluZCxkZWJpdCxkZWJvcmQsZGVib3NoLGRlYm91Y2gsZGVicmlkZSxkZWJyaWVmLGRlYnJpcyxkZWJ0LGRlYnRlZSxkZWJ0ZnVsLGRlYnRvcixkZWJ1bmssZGVidXMsZGVidXQsZGVjYWQsZGVjYWRhbCxkZWNhZGUsZGVjYWRpYyxkZWNhZmlkLGRlY2Fnb24sZGVjYWwsZGVjYW1wLGRlY2FuLGRlY2FuYWwsZGVjYW5lLGRlY2FuaSxkZWNhbnQsZGVjYXAsZGVjYXBvZCxkZWNhcmNoLGRlY2FyZSxkZWNhcnQsZGVjYXN0LGRlY2F0ZSxkZWNhdG9yLGRlY2F0eWwsZGVjYXksZGVjYXllZCxkZWNheWVyLGRlY2Vhc2UsZGVjZWl0LGRlY2VpdmUsZGVjZW5jZSxkZWNlbmN5LGRlY2VuZSxkZWNlbnQsZGVjZW55bCxkZWNlcm4sZGVjZXNzLGRlY2lhcmUsZGVjaWJlbCxkZWNpZGUsZGVjaWRlZCxkZWNpZGVyLGRlY2lkdWEsZGVjaWwsZGVjaWxlLGRlY2ltYSxkZWNpbWFsLGRlY2ssZGVja2UsZGVja2VkLGRlY2tlbCxkZWNrZXIsZGVja2llLGRlY2tpbmcsZGVja2xlLGRlY2xhaW0sZGVjbGFyZSxkZWNsYXNzLGRlY2xpbmUsZGVjbGl2ZSxkZWNvYXQsZGVjb2N0LGRlY29kZSxkZWNvaWMsZGVjb2tlLGRlY29sb3IsZGVjb3J1bSxkZWNveSxkZWNveWVyLGRlY3JlYW0sZGVjcmVlLGRlY3JlZXIsZGVjcmVldCxkZWNyZXRlLGRlY3JldyxkZWNyaWFsLGRlY3JpZWQsZGVjcmllcixkZWNyb3duLGRlY3J5LGRlY3VtYW4sZGVjdXBsZSxkZWN1cmlhLGRlY3VydmUsZGVjdXJ5LGRlY3VzLGRlY3lsLGRlY3lsaWMsZGVjeW5lLGRlZGltdXMsZGVkbyxkZWR1Y2UsZGVkdWN0LGRlZSxkZWVkLGRlZWRib3gsZGVlZGVlZCxkZWVkZnVsLGRlZWRpbHksZGVlZHksZGVlbSxkZWVtZXIsZGVlbWllLGRlZXAsZGVlcGVuLGRlZXBpbmcsZGVlcGlzaCxkZWVwbHksZGVlcixkZWVyZG9nLGRlZXJsZXQsZGVldmV5LGRlZmFjZSxkZWZhY2VyLGRlZmFsayxkZWZhbWUsZGVmYW1lZCxkZWZhbWVyLGRlZmFzc2EsZGVmYXQsZGVmYXVsdCxkZWZlYXNlLGRlZmVhdCxkZWZlY3QsZGVmZW5jZSxkZWZlbmQsZGVmZW5zZSxkZWZlcixkZWZpYWwsZGVmaWFudCxkZWZpYmVyLGRlZmljaXQsZGVmaWVyLGRlZmlsZSxkZWZpbGVkLGRlZmlsZXIsZGVmaW5lLGRlZmluZWQsZGVmaW5lcixkZWZsYXRlLGRlZmxlY3QsZGVmbGVzaCxkZWZsZXgsZGVmb2csZGVmb3JjZSxkZWZvcm0sZGVmb3VsLGRlZnJhdWQsZGVmcmF5LGRlZnJvY2ssZGVmcm9zdCxkZWZ0LGRlZnRseSxkZWZ1bmN0LGRlZnVzZSxkZWZ5LGRlZyxkZWdhcyxkZWdhdXNzLGRlZ2VybSxkZWdnZWQsZGVnZ2VyLGRlZ2xhemUsZGVnb3JnZSxkZWdyYWRlLGRlZ3JhaW4sZGVncmVlLGRlZ3UsZGVndW0sZGVndXN0LGRlaGFpcixkZWhpc2NlLGRlaG9ybixkZWhvcnMsZGVob3J0LGRlaHVsbCxkZWh1c2ssZGVpY2UsZGVpY2VyLGRlaWNpZGUsZGVpY3RpYyxkZWlmaWMsZGVpZmllcixkZWlmb3JtLGRlaWZ5LGRlaWduLGRlaW5rLGRlaW5vcyxkZWlzZWFsLGRlaXNtLGRlaXN0LGRlaXN0aWMsZGVpdHksZGVqZWN0LGRlamVjdGEsZGVqZXVuZSxkZWtrbyxkZWtsZSxkZWxhaW5lLGRlbGFwc2UsZGVsYXRlLGRlbGF0ZXIsZGVsYXRvcixkZWxhd24sZGVsYXksZGVsYXllcixkZWxlLGRlbGVhZCxkZWxlbmRhLGRlbGV0ZSxkZWxmLGRlbGZ0LGRlbGlibGUsZGVsaWN0LGRlbGlnaHQsZGVsaW1lLGRlbGltaXQsZGVsaW50LGRlbGl2ZXIsZGVsbCxkZWxvdWwsZGVsb3VzZSxkZWx0YSxkZWx0YWljLGRlbHRhbCxkZWx0aWMsZGVsdG9pZCxkZWx1ZGUsZGVsdWRlcixkZWx1Z2UsZGVsdXhlLGRlbHZlLGRlbHZlcixkZW1hZ29nLGRlbWFsLGRlbWFuZCxkZW1hcmNoLGRlbWFyayxkZW1hc3QsZGVtZSxkZW1lYW4sZGVtZW5jeSxkZW1lbnQsZGVtZXJpdCxkZW1lc25lLGRlbWksZGVtaWJvYixkZW1pZG9nLGRlbWlnb2QsZGVtaWhhZyxkZW1pbWFuLGRlbWlvd2wsZGVtaW94LGRlbWlyYW0sZGVtaXJlcCxkZW1pc2UsZGVtaXNzLGRlbWl0LGRlbWl2b2wsZGVtb2IsZGVtb2RlZCxkZW1vaWQsZGVtb24sZGVtb25pYyxkZW1vbnJ5LGRlbW9zLGRlbW90ZSxkZW1vdGljLGRlbW91bnQsZGVtdWxjZSxkZW11cmUsZGVteSxkZW4sZGVuYXJvLGRlbmFyeSxkZW5hdCxkZW5kYSxkZW5kcmFsLGRlbmRyaWMsZGVuZHJvbixkZW5lLGRlbmd1ZSxkZW5pYWwsZGVuaWVyLGRlbmltLGRlbml6ZW4sZGVubmV0LGRlbm90ZSxkZW5zZSxkZW5zZWx5LGRlbnNlbixkZW5zaGVyLGRlbnNpZnksZGVuc2l0eSxkZW50LGRlbnRhbCxkZW50YWxlLGRlbnRhcnksZGVudGF0YSxkZW50YXRlLGRlbnRlbCxkZW50ZXIsZGVudGV4LGRlbnRpbCxkZW50aWxlLGRlbnRpbixkZW50aW5lLGRlbnRpc3QsZGVudG9pZCxkZW50dXJlLGRlbnR5LGRlbnVkZSxkZW51ZGVyLGRlbnksZGVvZGFuZCxkZW9kYXJhLGRlb3RhLGRlcGEsZGVwYWludCxkZXBhcmssZGVwYXJ0LGRlcGFzLGRlcGFzcyxkZXBlbmQsZGVwZXRlcixkZXBoYXNlLGRlcGljdCxkZXBsYW5lLGRlcGxldGUsZGVwbG9yZSxkZXBsb3ksZGVwbHVtZSxkZXBsdW1wLGRlcG9oLGRlcG9uZSxkZXBvcnQsZGVwb3NhbCxkZXBvc2UsZGVwb3NlcixkZXBvc2l0LGRlcG90LGRlcHJhdmUsZGVwcmVzcyxkZXByaW50LGRlcHJpdmUsZGVwc2lkZSxkZXB0aCxkZXB0aGVuLGRlcHV0ZSxkZXB1dHksZGVxdWVlbixkZXJhaCxkZXJhaWduLGRlcmFpbCxkZXJhbmdlLGRlcmF0LGRlcmF0ZSxkZXJhdGVyLGRlcmF5LGRlcmJ5LGRlcmUsZGVyZWlzbSxkZXJpYyxkZXJpZGUsZGVyaWRlcixkZXJpdmFsLGRlcml2ZSxkZXJpdmVkLGRlcml2ZXIsZGVybSxkZXJtYSxkZXJtYWQsZGVybWFsLGRlcm1pYyxkZXJtaXMsZGVybW9pZCxkZXJtb2wsZGVybixkZXJuaWVyLGRlcm91dCxkZXJyaWNrLGRlcnJpZGUsZGVycmllcyxkZXJyeSxkZXJ0cnVtLGRlcnVzdCxkZXJ2aXNoLGRlc2FsdCxkZXNhbmQsZGVzY2FsZSxkZXNjYW50LGRlc2NlbmQsZGVzY2VudCxkZXNjb3J0LGRlc2NyeSxkZXNlZWQsZGVzZXJldCxkZXNlcnQsZGVzZXJ2ZSxkZXNleCxkZXNpLGRlc2lnaHQsZGVzaWduLGRlc2lyZSxkZXNpcmVkLGRlc2lyZXIsZGVzaXN0LGRlc2l6ZSxkZXNrLGRlc2xpbWUsZGVzbWEsZGVzbWFuLGRlc21pYyxkZXNtaWQsZGVzbWluZSxkZXNtb2lkLGRlc21vbWEsZGVzbW9uLGRlc3BhaXIsZGVzcGVjdCxkZXNwaXNlLGRlc3BpdGUsZGVzcG9pbCxkZXNwb25kLGRlc3BvdCxkZXNzLGRlc3NhLGRlc3NlcnQsZGVzc2lsLGRlc3RhaW4sZGVzdGluZSxkZXN0aW55LGRlc3RvdXIsZGVzdHJveSxkZXN1ZXRlLGRlc3VnYXIsZGVzeWwsZGV0YWNoLGRldGFpbCxkZXRhaW4sZGV0YXIsZGV0YXgsZGV0ZWN0LGRldGVudCxkZXRlcixkZXRlcmdlLGRldGVzdCxkZXRpbixkZXRpbmV0LGRldGludWUsZGV0b3VyLGRldHJhY3QsZGV0cmFpbixkZXRydWRlLGRldHVuZSxkZXR1cixkZXVjZSxkZXVjZWQsZGV1bCxkZXV0b24sZGV2LGRldmEsZGV2YWxsLGRldmFsdWUsZGV2YW5jZSxkZXZhc3QsZGV2YXRhLGRldmVsaW4sZGV2ZWxvcCxkZXZlc3QsZGV2aWFudCxkZXZpYXRlLGRldmljZSxkZXZpbCxkZXZpbGVkLGRldmlsZXIsZGV2aWxldCxkZXZpbHJ5LGRldmlseSxkZXZpb3VzLGRldmlzYWwsZGV2aXNlLGRldmlzZWUsZGV2aXNlcixkZXZpc29yLGRldm9pY2UsZGV2b2lkLGRldm9pcixkZXZvbHZlLGRldm90ZSxkZXZvdGVkLGRldm90ZWUsZGV2b3RlcixkZXZvdXIsZGV2b3V0LGRldm93LGRldnZlbCxkZXcsZGV3YW4sZGV3YW5lZSxkZXdhdGVyLGRld2F4LGRld2JlYW0sZGV3Y2xhdyxkZXdjdXAsZGV3ZGFtcCxkZXdkcm9wLGRld2VyLGRld2ZhbGwsZGV3aWx5LGRld2xhcCxkZXdsZXNzLGRld2xpa2UsZGV3b29sLGRld29ybSxkZXdyZXQsZGV3dHJ5LGRld3dvcm0sZGV3eSxkZXh0ZXIsZGV4dHJhZCxkZXh0cmFsLGRleHRyYW4sZGV4dHJpbixkZXh0cm8sZGV5LGRleXNoaXAsZGV6aW5jLGRoYSxkaGFiYixkaGFpLGRoYWssZGhhbW5vbyxkaGFuLGRoYW5nYXIsZGhhbnVrLGRoYW51c2gsZGhhcmFuYSxkaGFyYW5pLGRoYXJtYSxkaGFybmEsZGhhdXJhLGRoYXVyaSxkaGF2YSxkaGF3LGRoZXJpLGRob2JpLGRob2xlLGRob25pLGRob29uLGRob3RpLGRob3VsLGRob3csZGh1LGRodW5jaGksZGh1cnJhLGRoeWFsLGRoeWFuYSxkaSxkaWFiYXNlLGRpYWNpZCxkaWFjbGUsZGlhY29wZSxkaWFjdCxkaWFjdGluLGRpYWRlbSxkaWFkZXJtLGRpYWVuZSxkaWFncmFtLGRpYWwsZGlhbGVjdCxkaWFsZXIsZGlhbGluLGRpYWxpbmcsZGlhbGlzdCxkaWFsa3lsLGRpYWxsZWwsZGlhbGx5bCxkaWFseXplLGRpYW1iLGRpYW1iaWMsZGlhbWlkZSxkaWFtaW5lLGRpYW1vbmQsZGlhbixkaWFuZGVyLGRpYW5pdGUsZGlhcGFzZSxkaWFwYXNtLGRpYXBlcixkaWFwbGV4LGRpYXBzaWQsZGlhcmNoLGRpYXJjaHksZGlhcmlhbCxkaWFyaWFuLGRpYXJpc3QsZGlhcml6ZSxkaWFyeSxkaWFzdGVtLGRpYXN0ZXIsZGlhc3lybSxkaWF0b20sZGlhdWxpYyxkaWF1bG9zLGRpYXhpYWwsZGlheG9uLGRpYXppZGUsZGlhemluZSxkaWF6b2ljLGRpYXpvbGUsZGlhem9tYSxkaWIsZGliYXNlLGRpYmFzaWMsZGliYXRhZyxkaWJiZXIsZGliYmxlLGRpYmJsZXIsZGliYnVrLGRpYmhvbGUsZGlicmFjaCxkaWJyb20sZGlicyxkaWNhc3QsZGljZSxkaWNlYm94LGRpY2VjdXAsZGljZW1hbixkaWNlcixkaWNldHlsLGRpY2gsZGljaGFzLGRpY2hvcmQsZGljaW5nLGRpY2ssZGlja2VucyxkaWNrZXIsZGlja2V5LGRpY2t5LGRpY29saWMsZGljb2xvbixkaWNvdCxkaWNvdHlsLGRpY3RhLGRpY3RhdGUsZGljdGljLGRpY3Rpb24sZGljdHVtLGRpY3ljbGUsZGlkLGRpZGRlcixkaWRkbGUsZGlkZGxlcixkaWRkeSxkaWRlbHBoLGRpZGllLGRpZGluZSxkaWRsZSxkaWRuYSxkaWRudCxkaWRyb215LGRpZHN0LGRpZHltLGRpZHltaWEsZGlkeW11cyxkaWUsZGllYixkaWViYWNrLGRpZWRyYWwsZGllZHJpYyxkaWVoYXJkLGRpZWxpa2UsZGllbSxkaWVuZSxkaWVyLGRpZXNlbCxkaWVzaXMsZGlldCxkaWV0YWwsZGlldGFyeSxkaWV0ZXIsZGlldGh5bCxkaWV0aWMsZGlldGljcyxkaWV0aW5lLGRpZXRpc3QsZGlld2lzZSxkaWZmYW1lLGRpZmZlcixkaWZmaWRlLGRpZmZvcm0sZGlmZnVzZSxkaWcsZGlnYW1tYSxkaWdhbXksZGlnZW5pYyxkaWdlbnksZGlnZXN0LGRpZ2dlcixkaWdnaW5nLGRpZ2h0LGRpZ2h0ZXIsZGlnaXQsZGlnaXRhbCxkaWdpdHVzLGRpZ2xvdCxkaWdseXBoLGRpZ21lYXQsZGlnbmlmeSxkaWduaXR5LGRpZ3JhbSxkaWdyYXBoLGRpZ3Jlc3MsZGlncyxkaWhhbG8sZGlpYW1iLGRpaW9kbyxkaWthLGRpa2FnZSxkaWtlLGRpa2VyLGRpa2V0byxkaWtrb3AsZGlsYXRlLGRpbGF0ZWQsZGlsYXRlcixkaWxhdG9yLGRpbGRvLGRpbGVtbWEsZGlsa2VyLGRpbGwsZGlsbGksZGlsbGllcixkaWxsaW5nLGRpbGx1ZSxkaWxsdWVyLGRpbGx5LGRpbG8sZGlsb2d5LGRpbHVlbnQsZGlsdXRlLGRpbHV0ZWQsZGlsdXRlZSxkaWx1dGVyLGRpbHV0b3IsZGlsdXZpYSxkaW0sZGltYmVyLGRpbWJsZSxkaW1lLGRpbWVyLGRpbWVyYW4sZGltZXJpYyxkaW1ldGVyLGRpbWlzcyxkaW1pdCxkaW1pdHksZGltbHksZGltbWVkLGRpbW1lcixkaW1tZXN0LGRpbW1ldCxkaW1taXNoLGRpbW5lc3MsZGltb3JpYyxkaW1vcnBoLGRpbXBsZSxkaW1wbHksZGltcHMsZGltcHN5LGRpbixkaW5hcixkaW5kZXIsZGluZGxlLGRpbmUsZGluZXIsZGluZXJpYyxkaW5lcm8sZGluZXR0ZSxkaW5nLGRpbmdhcixkaW5nYmF0LGRpbmdlLGRpbmdlZSxkaW5naGVlLGRpbmdoeSxkaW5naWx5LGRpbmdsZSxkaW5nbHksZGluZ28sZGluZ3VzLGRpbmd5LGRpbmljLGRpbmljYWwsZGluaW5nLGRpbml0cm8sZGluayxkaW5rZXksZGlua3VtLGRpbmt5LGRpbm1vbnQsZGlubmVyLGRpbm5lcnksZGlub21pYyxkaW5zb21lLGRpbnQsZGludXMsZGlvYmVseSxkaW9ib2wsZGlvY2VzZSxkaW9kZSxkaW9kb250LGRpb2VjeSxkaW9sLGRpb25pc2UsZGlvbnltLGRpb3B0ZXIsZGlvcHRyYSxkaW9wdHJ5LGRpb3JhbWEsZGlvcml0ZSxkaW9zZSxkaW9zbWluLGRpb3RhLGRpb3RpYyxkaW94YW5lLGRpb3hpZGUsZGlveGltZSxkaW94eSxkaXAsZGlwZXR0byxkaXBoYXNlLGRpcGhlYWQsZGlwbGV4LGRpcGxvZSxkaXBsb2ljLGRpcGxvaWQsZGlwbG9pcyxkaXBsb21hLGRpcGxvbnQsZGlwbG9weSxkaXBub2FuLGRpcG5vaWQsZGlwb2RlLGRpcG9kaWMsZGlwb2R5LGRpcG9sYXIsZGlwb2xlLGRpcG9ycGEsZGlwcGVkLGRpcHBlcixkaXBwaW5nLGRpcHNhcyxkaXBzZXksZGlwdGVyLGRpcHRvdGUsZGlwdHljaCxkaXB3YXJlLGRpcHlndXMsZGlweWxvbixkaXB5cmUsZGlyZCxkaXJkdW0sZGlyZSxkaXJlY3QsZGlyZWZ1bCxkaXJlbHksZGlyZW1wdCxkaXJnZSxkaXJnbGVyLGRpcmhlbSxkaXJrLGRpcmwsZGlybmRsLGRpcnQsZGlydGVuLGRpcnRpbHksZGlydHksZGlzLGRpc2FibGUsZGlzYWdpbyxkaXNhbGx5LGRpc2FybSxkaXNhdm93LGRpc2F3YSxkaXNhem8sZGlzYmFuZCxkaXNiYXIsZGlzYmFyayxkaXNib2R5LGRpc2J1ZCxkaXNidXJ5LGRpc2MsZGlzY2FnZSxkaXNjYWwsZGlzY2FyZCxkaXNjYXNlLGRpc2NlcHQsZGlzY2VybixkaXNjZXJwLGRpc2NvaWQsZGlzY29yZCxkaXNjb3VzLGRpc2N1cyxkaXNjdXNzLGRpc2RhaW4sZGlzZHViLGRpc2Vhc2UsZGlzZWRnZSxkaXNlbWUsZGlzZW1pYyxkaXNmYW1lLGRpc2ZlbixkaXNnaWcsZGlzZ2x1dCxkaXNnb29kLGRpc2dvd24sZGlzZ3VsZixkaXNndXN0LGRpc2gsZGlzaGVkLGRpc2hlbG0sZGlzaGVyLGRpc2hmdWwsZGlzaG9tZSxkaXNob3JuLGRpc2hwYW4sZGlzaHJhZyxkaXNqZWN0LGRpc2pvaW4sZGlzanVuZSxkaXNrLGRpc2xlYWYsZGlzbGlrZSxkaXNsaW1uLGRpc2xpbmssZGlzbGlwLGRpc2xvYWQsZGlzbG92ZSxkaXNtYWluLGRpc21hbCxkaXNtYW4sZGlzbWFyayxkaXNtYXNrLGRpc21hc3QsZGlzbWF5LGRpc21lLGRpc21pc3MsZGlzbmEsZGlzbmVzdCxkaXNuZXcsZGlzb2JleSxkaXNvZGljLGRpc29taWMsZGlzb211cyxkaXNvcmIsZGlzb3duLGRpc3BhcmssZGlzcGFydCxkaXNwZWwsZGlzcGVuZCxkaXNwbGF5LGRpc3BvbmUsZGlzcG9wZSxkaXNwb3J0LGRpc3Bvc2UsZGlzcG9zdCxkaXNwdWxwLGRpc3B1dGUsZGlzcmFuayxkaXNyYXRlLGRpc3JpbmcsZGlzcm9iZSxkaXNyb29mLGRpc3Jvb3QsZGlzcnVtcCxkaXNydXB0LGRpc3MsZGlzc2VhdCxkaXNzZWN0LGRpc3NlbnQsZGlzc2VydCxkaXNzb3VsLGRpc3N1aXQsZGlzdGFkLGRpc3RhZmYsZGlzdGFpbixkaXN0YWwsZGlzdGFsZSxkaXN0YW50LGRpc3RlbmQsZGlzdGVudCxkaXN0aWNoLGRpc3RpbGwsZGlzdG9tZSxkaXN0b3J0LGRpc3R1bmUsZGlzdHVyYixkaXN0dXJuLGRpc3VzZSxkaXN3b29kLGRpc3lva2UsZGl0LGRpdGEsZGl0YWwsZGl0Y2gsZGl0Y2hlcixkaXRlLGRpdGVyLGRpdGhlcixkaXRoZXJ5LGRpdGhpb24sZGl0b2x5bCxkaXRvbmUsZGl0dGFteSxkaXR0YW55LGRpdHRheSxkaXR0aWVkLGRpdHRvLGRpdHR5LGRpdXJuYWwsZGl1cm5lLGRpdixkaXZhLGRpdmFuLGRpdmF0YSxkaXZlLGRpdmVsLGRpdmVyLGRpdmVyZ2UsZGl2ZXJzLGRpdmVyc2UsZGl2ZXJ0LGRpdmVzdCxkaXZpZGUsZGl2aWRlZCxkaXZpZGVyLGRpdmluZSxkaXZpbmVyLGRpdmluZyxkaXZpbnlsLGRpdmlzb3IsZGl2b3JjZSxkaXZvdCxkaXZvdG8sZGl2dWxnZSxkaXZ1bHNlLGRpdnVzLGRpdnZ5LGRpd2F0YSxkaXhpZSxkaXhpdCxkaXh5LGRpemFpbixkaXplbixkaXpvaWMsZGl6emFyZCxkaXp6aWx5LGRpenp5LGRqYXZlLGRqZWhhZCxkamVyaWIsZGplcnNhLGRvLGRvYWIsZG9hYmxlLGRvYXJpdW0sZG9hdCxkb2F0ZWQsZG9hdGVyLGRvYXRpbmcsZG9hdGlzaCxkb2IsZG9iYmVkLGRvYmJlcixkb2JiaW4sZG9iYmluZyxkb2JieSxkb2JlLGRvYmxhLGRvYmxvbixkb2JyYSxkb2JyYW8sZG9ic29uLGRvYnksZG9jLGRvY2VudCxkb2NpYmxlLGRvY2lsZSxkb2NpdHksZG9jayxkb2NrYWdlLGRvY2tlbixkb2NrZXIsZG9ja2V0LGRvY2tpemUsZG9ja21hbixkb2NtYWMsZG9jdG9yLGRvY3RyaXgsZG9kLGRvZGQsZG9kZGFydCxkb2RkZWQsZG9kZGVyLGRvZGRlcnksZG9kZGllLGRvZGRpbmcsZG9kZGxlLGRvZGR5LGRvZGVjeWwsZG9kZ2UsZG9kZ2VyLGRvZGdlcnksZG9kZ2lseSxkb2RneSxkb2RraW4sZG9kbGV0LGRvZG1hbixkb2RvLGRvZG9pc20sZG9kcmFucyxkb2UsZG9lYmlyZCxkb2VnbGljLGRvZXIsZG9lcyxkb2Vza2luLGRvZXNudCxkb2VzdCxkb2ZmLGRvZmZlcixkb2csZG9nYWwsZG9nYXRlLGRvZ2JhbmUsZG9nYml0ZSxkb2dibG93LGRvZ2JvYXQsZG9nYm9sdCxkb2didXNoLGRvZ2NhcnQsZG9nZG9tLGRvZ2UsZG9nZWRvbSxkb2dmYWNlLGRvZ2ZhbGwsZG9nZmlzaCxkb2dmb290LGRvZ2dlZCxkb2dnZXIsZG9nZ2VyeSxkb2dnZXNzLGRvZ2dpc2gsZG9nZ28sZG9nZ29uZSxkb2dncmVsLGRvZ2d5LGRvZ2hlYWQsZG9naG9sZSxkb2dob29kLGRvZ2llLGRvZ2xlc3MsZG9nbGlrZSxkb2dseSxkb2dtYSxkb2dtYW4sZG9nbWF0YSxkb2dzLGRvZ3NoaXAsZG9nc2tpbixkb2d0YWlsLGRvZ3RpZSxkb2d0cm90LGRvZ3ZhbmUsZG9nd29vZCxkb2d5LGRvaWd0LGRvaWxlZCxkb2lseSxkb2luYSxkb2luZyxkb2luZ3MsZG9pdCxkb2l0ZWQsZG9pdGtpbixkb2tlLGRva2htYSxkb2xhLGRvbGFicmEsZG9sY2FuLGRvbGNpYW4sZG9sY2lubyxkb2xkcnVtLGRvbGUsZG9sZWZ1bCxkb2xlbnQsZG9sZXNzLGRvbGksZG9saWEsZG9saW5hLGRvbGluZSxkb2xpdW0sZG9sbCxkb2xsYXIsZG9sbGRvbSxkb2xsaWVyLGRvbGxpc2gsZG9sbG9wLGRvbGx5LGRvbG1hbixkb2xtZW4sZG9sb3IsZG9sb3NlLGRvbG91cyxkb2xwaGluLGRvbHQsZG9sdGlzaCxkb20sZG9tYWluLGRvbWFsLGRvbWJhLGRvbWUsZG9tZW50LGRvbWVyLGRvbWV0dCxkb21pYyxkb21pY2FsLGRvbWluZSxkb21pbmllLGRvbWlubyxkb21pbnVzLGRvbWl0ZSxkb21pdGljLGRvbW4sZG9tbmVpLGRvbW9pZCxkb21wdCxkb215LGRvbixkb25hYmxlLGRvbmFyeSxkb25hdGUsZG9uYXRlZCxkb25hdGVlLGRvbmF0b3IsZG9uYXgsZG9uZSxkb25lZSxkb25leSxkb25nLGRvbmdhLGRvbmdvbixkb25qb24sZG9ua2V5LGRvbm5hLGRvbm5lcnQsZG9ubmlzaCxkb25uaXNtLGRvbm5vdCxkb25vcixkb25zaGlwLGRvbnNpZSxkb250LGRvbnVtLGRvb2IsZG9vY290LGRvb2RhYixkb29kYWQsZG9vZGxlLGRvb2RsZXIsZG9vamEsZG9vayxkb29rZXQsZG9va2l0LGRvb2wsZG9vbGVlLGRvb2xleSxkb29saSxkb29saWUsZG9vbHksZG9vbSxkb29tYWdlLGRvb21lcixkb29tZnVsLGRvb21zLGRvb24sZG9vcixkb29yYmEsZG9vcmJveSxkb29yZWQsZG9vcm1hbixkb29yd2F5LGRvcCxkb3BhLGRvcGF0dGEsZG9wZSxkb3Blcixkb3BleSxkb3BwZXIsZG9wcGlhLGRvcixkb3JhYixkb3JhZCxkb3JhZG8sZG9yZWUsZG9yaGF3ayxkb3JpYSxkb3JqZSxkb3JsYWNoLGRvcmxvdCxkb3JtLGRvcm1hbnQsZG9ybWVyLGRvcm1pZSxkb3JteSxkb3JuLGRvcm5lY2ssZG9ybmljLGRvcm5pY2ssZG9ybm9jayxkb3JwLGRvcnNhZCxkb3JzYWwsZG9yc2FsZSxkb3JzZWwsZG9yc2VyLGRvcnN1bSxkb3J0ZXIsZG9ydHMsZG9ydHksZG9ydWNrLGRvcnksZG9zLGRvc2EsZG9zYWRoLGRvc2FnZSxkb3NlLGRvc2VyLGRvc2lzLGRvc3MsZG9zc2FsLGRvc3NlbCxkb3NzZXIsZG9zc2llcixkb3NzaWwsZG9zc21hbixkb3QsZG90YWdlLGRvdGFsLGRvdGFyZCxkb3RhcmR5LGRvdGF0ZSxkb3RjaGluLGRvdGUsZG90ZWQsZG90ZXIsZG90aW5nLGRvdGlzaCxkb3RraW4sZG90bGVzcyxkb3RsaWtlLGRvdHRlZCxkb3R0ZXIsZG90dGlseSxkb3R0aW5nLGRvdHRsZSxkb3R0bGVyLGRvdHR5LGRvdHksZG91YXIsZG91YmxlLGRvdWJsZWQsZG91Ymxlcixkb3VibGV0LGRvdWJseSxkb3VidCxkb3VidGVyLGRvdWMsZG91Y2UsZG91Y2VseSxkb3VjZXQsZG91Y2hlLGRvdWNpbixkb3VjaW5lLGRvdWRsZSxkb3VnaCxkb3VnaHQsZG91Z2h0eSxkb3VnaHksZG91bSxkb3VwLGRvdXBpbmcsZG91cixkb3VyaW5lLGRvdXJseSxkb3VzZSxkb3VzZXIsZG91dCxkb3V0ZXIsZG91dG91cyxkb3ZlLGRvdmVjb3QsZG92ZWtleSxkb3Zla2llLGRvdmVsZXQsZG92ZXIsZG92aXNoLGRvdyxkb3dhYmxlLGRvd2FnZXIsZG93Y2V0LGRvd2QsZG93ZGlseSxkb3dkeSxkb3dlZCxkb3dlbCxkb3dlcixkb3dlcmFsLGRvd2VyeSxkb3dmLGRvd2llLGRvd2lseSxkb3dpdGNoLGRvd2wsZG93bGFzLGRvd2xlc3MsZG93bixkb3duYnksZG93bmNyeSxkb3duY3V0LGRvd25lcixkb3duaWx5LGRvd25saWUsZG93bnNldCxkb3dud2F5LGRvd255LGRvd3AsZG93cnksZG93c2UsZG93c2VyLGRvd3NldCxkb3hhLGRveHksZG96ZSxkb3plZCxkb3plbixkb3plbmVyLGRvemVudGgsZG96ZXIsZG96aWx5LGRvenksZG96emxlZCxkcmFiLGRyYWJiZXQsZHJhYmJsZSxkcmFiYnksZHJhYmx5LGRyYWNobSxkcmFjaG1hLGRyYWNtYSxkcmFmZixkcmFmZnksZHJhZnQsZHJhZnRlZSxkcmFmdGVyLGRyYWZ0eSxkcmFnLGRyYWdhZGUsZHJhZ2JhcixkcmFnZ2VkLGRyYWdnZXIsZHJhZ2dsZSxkcmFnZ2x5LGRyYWdneSxkcmFnbWFuLGRyYWduZXQsZHJhZ28sZHJhZ29uLGRyYWdvb24sZHJhZ3NhdyxkcmFpbCxkcmFpbixkcmFpbmUsZHJhaW5lZCxkcmFpbmVyLGRyYWtlLGRyYW0sZHJhbWEsZHJhbW0sZHJhbW1lLGRyYW1tZWQsZHJhbW1lcixkcmFuZyxkcmFuayxkcmFudCxkcmFwZSxkcmFwZXIsZHJhcGVyeSxkcmFzc2lkLGRyYXN0aWMsZHJhdCxkcmF0ZSxkcmF0dGVkLGRyYXVnaHQsZHJhdnlhLGRyYXcsZHJhd2FybSxkcmF3YmFyLGRyYXdib3ksZHJhd2N1dCxkcmF3ZWUsZHJhd2VyLGRyYXdlcnMsZHJhd2luZyxkcmF3ayxkcmF3bCxkcmF3bGVyLGRyYXdseSxkcmF3bixkcmF3bmV0LGRyYXdvZmYsZHJhd291dCxkcmF3cm9kLGRyYXksZHJheWFnZSxkcmF5bWFuLGRyYXplbCxkcmVhZCxkcmVhZGVyLGRyZWFkbHksZHJlYW0sZHJlYW1lcixkcmVhbXN5LGRyZWFtdCxkcmVhbXksZHJlYXIsZHJlYXJseSxkcmVhcnksZHJlZGdlLGRyZWRnZXIsZHJlZSxkcmVlcCxkcmVlcHksZHJlZyxkcmVnZ3ksZHJlZ3MsZHJlbmNoLGRyZW5nLGRyZXNzLGRyZXNzZWQsZHJlc3NlcixkcmVzc3ksZHJlc3QsZHJldyxkcmV3aXRlLGRyaWFzLGRyaWIsZHJpYmJsZSxkcmlibGV0LGRyaWRkbGUsZHJpZWQsZHJpZXIsZHJpZXN0LGRyaWZ0LGRyaWZ0ZXIsZHJpZnR5LGRyaWxsLGRyaWxsZXIsZHJpbGxldCxkcmluZ2xlLGRyaW5rLGRyaW5rZXIsZHJpbm4sZHJpcCxkcmlwcGVyLGRyaXBwbGUsZHJpcHB5LGRyaXNrLGRyaXZhZ2UsZHJpdmUsZHJpdmVsLGRyaXZlbixkcml2ZXIsZHJpdmluZyxkcml6emxlLGRyaXp6bHksZHJvZGR1bSxkcm9naCxkcm9naGVyLGRyb2d1ZSxkcm9pdCxkcm9sbCxkcm9sbHksZHJvbWUsZHJvbWljLGRyb21vbmQsZHJvbW9zLGRyb25hLGRyb25hZ2UsZHJvbmUsZHJvbmVyLGRyb25nbyxkcm9uaXNoLGRyb255LGRyb29sLGRyb29wLGRyb29wZXIsZHJvb3B0LGRyb29weSxkcm9wLGRyb3BsZXQsZHJvcG1hbixkcm9wb3V0LGRyb3BwZXIsZHJvcHB5LGRyb3BzeSxkcm9wdCxkcm9zaGt5LGRyb3NreSxkcm9zcyxkcm9zc2VsLGRyb3NzZXIsZHJvc3N5LGRyb3N0ZHksZHJvdWQsZHJvdWdodCxkcm91ayxkcm92ZSxkcm92ZXIsZHJvdnksZHJvdyxkcm93bixkcm93bmVyLGRyb3dzZSxkcm93c3ksZHJ1YixkcnViYmVyLGRydWJibHksZHJ1Y2tlbixkcnVkZ2UsZHJ1ZGdlcixkcnVlcnksZHJ1ZyxkcnVnZ2VyLGRydWdnZXQsZHJ1Z2d5LGRydWdtYW4sZHJ1aWQsZHJ1aWRpYyxkcnVpZHJ5LGRydWl0aCxkcnVtLGRydW1ibGUsZHJ1bWxpbixkcnVtbHksZHJ1bW1lcixkcnVtbXksZHJ1bmcsZHJ1bmdhcixkcnVuayxkcnVua2VuLGRydXBhbCxkcnVwZSxkcnVwZWwsZHJ1c2UsZHJ1c3ksZHJ1eHksZHJ5LGRyeWFkLGRyeWFkaWMsZHJ5YXMsZHJ5Y29hbCxkcnlmb290LGRyeWluZyxkcnlpc2gsZHJ5bHksZHJ5bmVzcyxkcnlzdGVyLGRyeXRoLGR1YWQsZHVhZGljLGR1YWwsZHVhbGksZHVhbGluLGR1YWxpc20sZHVhbGlzdCxkdWFsaXR5LGR1YWxpemUsZHVhbGx5LGR1YXJjaCxkdWFyY2h5LGR1YixkdWJhc2gsZHViYixkdWJiYSxkdWJiYWgsZHViYmVyLGR1YmJpbmcsZHViYnksZHViaWV0eSxkdWJpb3VzLGR1YnMsZHVjYWwsZHVjYWxseSxkdWNhcGUsZHVjYXQsZHVjYXRvLGR1Y2RhbWUsZHVjZXMsZHVjaGVzcyxkdWNoeSxkdWNrLGR1Y2tlcixkdWNrZXJ5LGR1Y2tpZSxkdWNraW5nLGR1Y2twaW4sZHVjdCxkdWN0ZWQsZHVjdGlsZSxkdWN0aW9uLGR1Y3RvcixkdWN0dWxlLGR1ZCxkdWRhaW0sZHVkZGVyLGR1ZGRlcnksZHVkZGllcyxkdWRlLGR1ZGVlbixkdWRnZW9uLGR1ZGluZSxkdWRpc2gsZHVkaXNtLGR1ZGxlcixkdWRsZXksZHVkbWFuLGR1ZSxkdWVsLGR1ZWxlcixkdWVsaW5nLGR1ZWxpc3QsZHVlbGxvLGR1ZW5lc3MsZHVlbm5hLGR1ZXIsZHVldCxkdWZmLGR1ZmZlbCxkdWZmZXIsZHVmZmluZyxkdWZvaWwsZHVmdGVyLGR1ZnRlcnksZHVnLGR1Z2FsLGR1Z2R1ZyxkdWdnbGVyLGR1Z29uZyxkdWdvdXQsZHVnd2F5LGR1aGF0LGR1aWtlcixkdWltLGR1aXQsZHVqYW4sZHVrZSxkdWtlZG9tLGR1a2VseSxkdWtlcnksZHVraG4sZHVra2VyLGR1bGJlcnQsZHVsY2V0LGR1bGNpYW4sZHVsY2lmeSxkdWxjb3NlLGR1bGVkZ2UsZHVsZXIsZHVsaWEsZHVsbCxkdWxsYXJkLGR1bGxlcixkdWxsZXJ5LGR1bGxpZnksZHVsbGlzaCxkdWxsaXR5LGR1bGx5LGR1bG9zaXMsZHVsb3RpYyxkdWxzZSxkdWx0LGR1bHRpZSxkdWx5LGR1bSxkdW1hLGR1bWFpc3QsZHVtYixkdW1iYSxkdW1iY293LGR1bWJseSxkdW1kdW0sZHVtbWVsLGR1bW15LGR1bW9zZSxkdW1wLGR1bXBhZ2UsZHVtcGVyLGR1bXBpbHksZHVtcGluZyxkdW1waXNoLGR1bXBsZSxkdW1wb2tlLGR1bXB5LGR1bXNvbGEsZHVuLGR1bmFpcixkdW5hbCxkdW5iaXJkLGR1bmNlLGR1bmNlcnksZHVuY2gsZHVuY2lmeSxkdW5jaXNoLGR1bmRlcixkdW5lLGR1bmZpc2gsZHVuZyxkdW5nZW9uLGR1bmdlcixkdW5nb2wsZHVuZ29uLGR1bmd5LGR1bml0ZSxkdW5rLGR1bmtlcixkdW5saW4sZHVubmFnZSxkdW5uZSxkdW5uZXIsZHVubmVzcyxkdW5uaXNoLGR1bm5pdGUsZHVubm9jayxkdW5ueSxkdW5zdCxkdW50LGR1bnRsZSxkdW55LGR1byxkdW9kZW5hLGR1b2RlbmUsZHVvbGUsZHVvcG9kLGR1b3BvbHksZHVvdG9uZSxkdW90eXBlLGR1cCxkdXBhYmxlLGR1cGUsZHVwZWRvbSxkdXBlcixkdXBlcnksZHVwaW9uLGR1cGxhLGR1cGxlLGR1cGxldCxkdXBsZXgsZHVwbGlmeSxkdXBsb25lLGR1cHB5LGR1cmEsZHVyYWJsZSxkdXJhYmx5LGR1cmFpbixkdXJhbCxkdXJhbWVuLGR1cmFuY2UsZHVyYW50LGR1cmF4LGR1cmJhcixkdXJlLGR1cmVuZSxkdXJlbm9sLGR1cmVzcyxkdXJnYW4sZHVyaWFuLGR1cmluZyxkdXJpdHksZHVybWFzdCxkdXJuLGR1cm8sZHVycmEsZHVycmllLGR1cnJpbixkdXJyeSxkdXJzdCxkdXJ3YXVuLGR1cnlsLGR1c2FjayxkdXNjbGUsZHVzaCxkdXNpbyxkdXNrLGR1c2tlbixkdXNraWx5LGR1c2tpc2gsZHVza2x5LGR1c2t5LGR1c3QsZHVzdGJpbixkdXN0Ym94LGR1c3RlZSxkdXN0ZXIsZHVzdGlseSxkdXN0aW5nLGR1c3RtYW4sZHVzdHBhbixkdXN0dWNrLGR1c3R5LGR1dGNoLGR1dGVvdXMsZHV0aWVkLGR1dGlmdWwsZHV0cmEsZHV0eSxkdXVtdmlyLGR1dmV0LGR1dmV0eW4sZHV4LGR1eWtlcixkdmFpdGEsZHZhbmR2YSxkd2FsZSxkd2FsbSxkd2FuZyxkd2FyZixkd2FyZnksZHdlbGwsZHdlbGxlZCxkd2VsbGVyLGR3ZWx0LGR3aW5kbGUsZHdpbmUsZHlhZCxkeWFkaWMsZHlhcmNoeSxkeWFzdGVyLGR5Y2UsZHllLGR5ZWFibGUsZHllaW5nLGR5ZXIsZHllc3RlcixkeWV3YXJlLGR5ZXdlZWQsZHlld29vZCxkeWluZyxkeWluZ2x5LGR5a2UsZHlrZXIsZHluYW1pYyxkeW5hbWlzLGR5bmFtbyxkeW5hc3QsZHluYXN0eSxkeW5lLGR5cGhvbmUsZHlzbG9neSxkeXNub215LGR5c3BuZWEsZHlzdG9tZSxkeXN1cmlhLGR5c3VyaWMsZHplcmVuLGUsZWEsZWFjaCxlYWdlcixlYWdlcmx5LGVhZ2xlLGVhZ2xlc3MsZWFnbGV0LGVhZ3JlLGVhbixlYXIsZWFyYWNoZSxlYXJib2IsZWFyY2FwLGVhcmRyb3AsZWFyZHJ1bSxlYXJlZCxlYXJmdWwsZWFyaG9sZSxlYXJpbmcsZWFybCxlYXJsYXAsZWFybGRvbSxlYXJsZXNzLGVhcmxldCxlYXJsaWtlLGVhcmxpc2gsZWFybG9jayxlYXJseSxlYXJtYXJrLGVhcm4sZWFybmVyLGVhcm5lc3QsZWFybmZ1bCxlYXJuaW5nLGVhcnBpY2ssZWFycGx1ZyxlYXJyaW5nLGVhcnNob3QsZWFyc29yZSxlYXJ0YWIsZWFydGgsZWFydGhlZCxlYXJ0aGVuLGVhcnRobHksZWFydGh5LGVhcndheCxlYXJ3aWcsZWFyd29ybSxlYXJ3b3J0LGVhc2UsZWFzZWZ1bCxlYXNlbCxlYXNlcixlYXNpZXIsZWFzaWVzdCxlYXNpbHksZWFzaW5nLGVhc3QsZWFzdGVyLGVhc3Rlcm4sZWFzdGluZyxlYXN5LGVhdCxlYXRhYmxlLGVhdGFnZSxlYXRlbixlYXRlcixlYXRlcnksZWF0aW5nLGVhdHMsZWF2ZSxlYXZlZCxlYXZlcixlYXZlcyxlYmIsZWJibWFuLGVib2UsZWJvbixlYm9uaXN0LGVib25pdGUsZWJvbml6ZSxlYm9ueSxlYnJpYXRlLGVicmlldHksZWJyaW91cyxlYnVsdXMsZWJ1cmluZSxlY2FkLGVjYW5kYSxlY2FydGUsZWNiYXRpYyxlY2JvbGUsZWNib2xpYyxlY2RlbWljLGVjZGVyb24sZWNkeXNpcyxlY2VzaWMsZWNlc2lzLGVjaGUsZWNoZWEsZWNoZWxvbixlY2hpZG5hLGVjaGluYWwsZWNoaW5pZCxlY2hpbnVzLGVjaG8sZWNob2VyLGVjaG9pYyxlY2hvaXNtLGVjaG9pc3QsZWNob2l6ZSxlY2l6ZSxlY2tsZWluLGVjbGFpcixlY2xhdCxlY2xlZ20sZWNsZWdtYSxlY2xpcHNlLGVjbG9ndWUsZWNvaWQsZWNvbGUsZWNvbG9neSxlY29ub215LGVjb3RvbmUsZWNvdHlwZSxlY3Bob3JlLGVjcnUsZWNzdGFzeSxlY3RhZCxlY3RhbCxlY3RhbGx5LGVjdGFzaWEsZWN0YXNpcyxlY3RhdGljLGVjdGVuZSxlY3RoeW1hLGVjdGlyaXMsZWN0b3BpYSxlY3RvcGljLGVjdG9weSxlY3Rvem9hLGVjdHlwYWwsZWN0eXBlLGVjemVtYSxlZGFjaXR5LGVkYXBoaWMsZWRhcGhvbixlZGRlcixlZGRpc2gsZWRkbyxlZGR5LGVkZWEsZWRlYWdyYSxlZGVpdGlzLGVkZW1hLGVkZW1pYyxlZGVuaXRlLGVkZW50YWwsZWRlc3RhbixlZGVzdGluLGVkZ2UsZWRnZWQsZWRnZW1hbixlZGdlcixlZGdpbmcsZWRncmV3LGVkZ3ksZWRoLGVkaWJsZSxlZGljdCxlZGljdGFsLGVkaWN1bGUsZWRpZmljZSxlZGlmaWVyLGVkaWZ5LGVkaXQsZWRpdGFsLGVkaXRpb24sZWRpdG9yLGVkdWNhbmQsZWR1Y2F0ZSxlZHVjZSxlZHVjaXZlLGVkdWN0LGVkdWN0b3IsZWVncmFzcyxlZWwsZWVsYm9hdCxlZWxib2IsZWVsY2FrZSxlZWxlcixlZWxlcnksZWVsZmFyZSxlZWxmaXNoLGVlbGxpa2UsZWVscG90LGVlbHBvdXQsZWVsc2hvcCxlZWxza2luLGVlbHdhcmUsZWVsd29ybSxlZWx5LGVlcixlZXJpZSxlZXJpbHksZWZmYWJsZSxlZmZhY2UsZWZmYWNlcixlZmZlY3QsZWZmZWN0cyxlZmZlbmRpLGVmZmV0ZSxlZmZpZ3ksZWZmbGF0ZSxlZmZsdXgsZWZmb3JtLGVmZm9ydCxlZmZ1bGdlLGVmZnVuZCxlZmZ1c2UsZWZ0LGVmdGVzdCxlZ2FkLGVnYWxpdHksZWdlbmNlLGVnZXJhbixlZ2VzdCxlZ2VzdGEsZWdnLGVnZ2N1cCxlZ2dlcixlZ2dmaXNoLGVnZ2hlYWQsZWdnaG90LGVnZ2luZyxlZ2dsZXIsZWdnbGVzcyxlZ2dsaWtlLGVnZ25vZyxlZ2d5LGVnaWxvcHMsZWdpcHRvLGVnbWEsZWdvLGVnb2hvb2QsZWdvaXNtLGVnb2lzdCxlZ29pdHksZWdvaXplLGVnb2l6ZXIsZWdvbCxlZ29taXNtLGVnb3Rpc20sZWdvdGlzdCxlZ290aXplLGVncmVzcyxlZ3JldCxlaCxlaGV1LGVobGl0ZSxlaHVhd2EsZWlkZW50LGVpZGVyLGVpZGV0aWMsZWlkb2xpYyxlaWRvbG9uLGVpZ2h0LGVpZ2h0aCxlaWdodHksZWlnbmUsZWltZXIsZWlua29ybixlaXNvZGljLGVpdGhlcixlamVjdCxlamVjdGEsZWplY3Rvcixlam9vLGVrYWhhLGVrZSxla2VyLGVrZXJpdGUsZWtpbmcsZWtrYSxla3Bob3JlLGVrdGVuZSxla3RlbmVzLGVsLGVsYWlkaWMsZWxhaWRpbixlbGFpbixlbGFpbmUsZWxhbmNlLGVsYW5kLGVsYW5ldCxlbGFwaWQsZWxhcGluZSxlbGFwb2lkLGVsYXBzZSxlbGFzdGljLGVsYXN0aW4sZWxhdGNoYSxlbGF0ZSxlbGF0ZWQsZWxhdGVyLGVsYXRpb24sZWxhdGl2ZSxlbGF0b3IsZWxiLGVsYm93LGVsYm93ZWQsZWxib3dlcixlbGJvd3ksZWxjYWphLGVsY2hlZSxlbGQsZWxkZXIsZWxkZXJseSxlbGRlc3QsZWxkaW4sZWxkaW5nLGVsZHJlc3MsZWxlY3QsZWxlY3RlZSxlbGVjdGx5LGVsZWN0b3IsZWxlY3RybyxlbGVnYW50LGVsZWdpYWMsZWxlZ2lzdCxlbGVnaXQsZWxlZ2l6ZSxlbGVneSxlbGVpZGluLGVsZW1lbnQsZWxlbWksZWxlbWluLGVsZW5jaCxlbGVuY2hpLGVsZW5nZSxlbGV2YXRlLGVsZXZlbixlbGV2b24sZWxmLGVsZmhvb2QsZWxmaWMsZWxmaW4sZWxmaXNoLGVsZmtpbixlbGZsYW5kLGVsZmxpa2UsZWxmbG9jayxlbGZzaGlwLGVsZndpZmUsZWxmd29ydCxlbGljaXQsZWxpZGUsZWxpc2lvbixlbGlzb3IsZWxpdGUsZWxpeGlyLGVsayxlbGtob3JuLGVsa3NsaXAsZWxrd29vZCxlbGwsZWxsYWdpYyxlbGxlLGVsbGVjayxlbGxmaXNoLGVsbGlwc2UsZWxsb3BzLGVsbHdhbmQsZWxtLGVsbXksZWxvY3V0ZSxlbG9kLGVsb2dlLGVsb2dpdW0sZWxvaWduLGVsb3BlLGVsb3BlcixlbG9wcyxlbHMsZWxzZSxlbHNlaG93LGVsc2luLGVsdCxlbHVhdGUsZWx1ZGUsZWx1ZGVyLGVsdXNpb24sZWx1c2l2ZSxlbHVzb3J5LGVsdXRlLGVsdXRpb24sZWx1dG9yLGVsdXZpYWwsZWx1dml1bSxlbHZhbixlbHZlcixlbHZlcyxlbHZldCxlbHZpc2gsZWx5c2lhLGVseXRyYWwsZWx5dHJpbixlbHl0cm9uLGVseXRydW0sZW0sZW1hbmFudCxlbWFuYXRlLGVtYW5pdW0sZW1hcmNpZCxlbWJhbGwsZW1iYWxtLGVtYmFuayxlbWJhcixlbWJhcmdvLGVtYmFyayxlbWJhc3N5LGVtYmF0aGUsZW1iYXksZW1iZWQsZW1iZWxpYyxlbWJlcixlbWJpbmQsZW1iaXJhLGVtYmxhemUsZW1ibGVtLGVtYmxlbWEsZW1ibGljLGVtYm9keSxlbWJvZyxlbWJvbGUsZW1ib2xpYyxlbWJvbG8sZW1ib2x1bSxlbWJvbHVzLGVtYm9seSxlbWJvc29tLGVtYm9zcyxlbWJvdW5kLGVtYm93LGVtYm93ZWQsZW1ib3dlbCxlbWJvd2VyLGVtYm94LGVtYnJhY2UsZW1icmFpbCxlbWJyb2lsLGVtYnJvd24sZW1icnlvLGVtYnJ5b24sZW1idWlhLGVtYnVzLGVtYnVzayxlbWNlZSxlbWUsZW1lZXIsZW1lbmQsZW1lbmRlcixlbWVyYWxkLGVtZXJnZSxlbWVyaXplLGVtZXJzZSxlbWVyc2VkLGVtZXJ5LGVtZXNpcyxlbWV0aWMsZW1ldGluZSxlbWdhbGxhLGVtaWdyZWUsZW1pbmVudCxlbWlyLGVtaXJhdGUsZW1pdCxlbWl0dGVyLGVtbWEsZW1tZW5pYyxlbW1lcixlbW1ldCxlbW9kaW4sZW1vbG9hLGVtb3RlLGVtb3Rpb24sZW1vdGl2ZSxlbXBhbGwsZW1wYW5lbCxlbXBhcGVyLGVtcGFyayxlbXBhc20sZW1wYXRoeSxlbXBlcm9yLGVtcGVyeSxlbXBpcmUsZW1waXJpYyxlbXBsYWNlLGVtcGxhbmUsZW1wbG95LGVtcGx1bWUsZW1wb3JpYSxlbXBvd2VyLGVtcHJlc3MsZW1wcmlzZSxlbXB0LGVtcHRpZXIsZW1wdGlseSxlbXB0aW5zLGVtcHRpb24sZW1wdG9yLGVtcHR5LGVtcHllbWEsZW11LGVtdWxhbnQsZW11bGF0ZSxlbXVsb3VzLGVtdWxzaW4sZW11bHNvcixlbXlkLGVteWRpYW4sZW4sZW5hYmxlLGVuYWJsZXIsZW5hY3QsZW5hY3RvcixlbmFlbmEsZW5hZ2UsZW5hbGlkLGVuYW0sZW5hbWJlcixlbmFtZGFyLGVuYW1lbCxlbmFtb3IsZW5hcHQsZW5hcmJvcixlbmFyY2gsZW5hcm0sZW5hcm1lLGVuYXRlLGVuYXRpYyxlbmF0aW9uLGVuYnJhdmUsZW5jYWdlLGVuY2FrZSxlbmNhbXAsZW5jYXNlLGVuY2FzaCxlbmNhdW1hLGVuY2F2ZSxlbmNlbGwsZW5jaGFpbixlbmNoYWlyLGVuY2hhbnQsZW5jaGFzZSxlbmNoZXN0LGVuY2luYSxlbmNpbmFsLGVuY2lzdCxlbmNsYXNwLGVuY2xhdmUsZW5jbG9hayxlbmNsb3NlLGVuY2xvdWQsZW5jb2FjaCxlbmNvZGUsZW5jb2lsLGVuY29sb3IsZW5jb21pYSxlbmNvbWljLGVuY29vcCxlbmNvcmUsZW5jb3dsLGVuY3JhYWwsZW5jcmF0eSxlbmNyZWVsLGVuY3Jpc3AsZW5jcm93bixlbmNydXN0LGVuY3J5cHQsZW5jdXAsZW5jdXJsLGVuY3lzdCxlbmQsZW5kYWJsZSxlbmRhcmNoLGVuZGF6ZSxlbmRlYXIsZW5kZWQsZW5kZW1pYyxlbmRlcixlbmRlcmUsZW5kZXJvbixlbmRldmlsLGVuZGV3LGVuZGdhdGUsZW5kaW5nLGVuZGl0ZSxlbmRpdmUsZW5kbGVzcyxlbmRsb25nLGVuZG1vc3QsZW5kb2dlbixlbmRvbWUsZW5kb3BvZCxlbmRvcmFsLGVuZG9yZSxlbmRvcnNlLGVuZG9zcyxlbmRvdHlzLGVuZG93LGVuZG93ZXIsZW5kb3pvYSxlbmR1ZSxlbmR1cmEsZW5kdXJlLGVuZHVyZXIsZW5kd2F5cyxlbmR3aXNlLGVuZHltYSxlbmR5bWFsLGVuZHlzaXMsZW5lbWEsZW5lbXksZW5lcmdpYyxlbmVyZ2lkLGVuZXJneSxlbmV1Y2gsZW5ldWdoLGVuZmFjZSxlbmZlbG9uLGVuZmVvZmYsZW5mZXZlcixlbmZpbGUsZW5maWxlZCxlbmZsZXNoLGVuZm9pbCxlbmZvbGQsZW5mb3JjZSxlbmZvcmssZW5mb3VsLGVuZnJhbWUsZW5mcmVlLGVuZ2FnZSxlbmdhZ2VkLGVuZ2FnZXIsZW5nYW9sLGVuZ2FyYixlbmdhdWQsZW5nYXplLGVuZ2VtLGVuZ2lsZCxlbmdpbmUsZW5naXJkLGVuZ2lydCxlbmdsYWQsZW5nbG9iZSxlbmdsb29tLGVuZ2xvcnksZW5nbHV0LGVuZ2x5bixlbmdvYmUsZW5nb2xkLGVuZ29yZSxlbmdvcmdlLGVuZ3JhY2UsZW5ncmFmZixlbmdyYWZ0LGVuZ3JhaWwsZW5ncmFpbixlbmdyYW0sZW5ncmFzcCxlbmdyYXZlLGVuZ3JlZW4sZW5ncm9zcyxlbmd1YXJkLGVuZ3VsZixlbmhhbG8sZW5oYW5jZSxlbmhhdCxlbmhhdW50LGVuaGVhcnQsZW5oZWRnZSxlbmhlbG0sZW5oZXJpdCxlbmh1c2ssZW5pYWMsZW5pZ21hLGVuaXNsZSxlbmphaWwsZW5qYW1iLGVuamVsbHksZW5qZXdlbCxlbmpvaW4sZW5qb3ksZW5qb3llcixlbmtyYWFsLGVubGFjZSxlbmxhcmQsZW5sYXJnZSxlbmxlYWYsZW5saWVmLGVubGlmZSxlbmxpZ2h0LGVubGluayxlbmxpc3QsZW5saXZlbixlbmxvY2ssZW5sb2RnZSxlbm1hc2ssZW5tYXNzLGVubWVzaCxlbm1pc3QsZW5taXR5LGVubW9zcyxlbm5lYWQsZW5uZXJ2ZSxlbm5pY2hlLGVubm9ibGUsZW5ub2ljLGVubm9taWMsZW5udWksZW5vY3l0ZSxlbm9kYWwsZW5vaWwsZW5vbCxlbm9sYXRlLGVub2xpYyxlbm9saXplLGVub21vdHksZW5vcGxhbixlbm9ybSxlbm91Z2gsZW5vdW5jZSxlbm93LGVucGxhbmUsZW5xdWlyZSxlbnF1aXJ5LGVucmFjZSxlbnJhZ2UsZW5yYWdlZCxlbnJhbmdlLGVucmFuayxlbnJhcHQsZW5yYXksZW5yaWIsZW5yaWNoLGVucmluZyxlbnJpdmUsZW5yb2JlLGVucm9iZXIsZW5yb2wsZW5yb2xsLGVucm9vdCxlbnJvdWdoLGVucnVpbixlbnJ1dCxlbnMsZW5zYWludCxlbnNhbmQsZW5zYXRlLGVuc2NlbmUsZW5zZSxlbnNlYW0sZW5zZWF0LGVuc2VlbSxlbnNlcmYsZW5zZXRlLGVuc2hhZGUsZW5zaGF3bCxlbnNoZWxsLGVuc2lnbixlbnNpbGUsZW5za3ksZW5zbGF2ZSxlbnNtYWxsLGVuc25hcmUsZW5zbmFybCxlbnNub3csZW5zb3VsLGVuc3BlbGwsZW5zdGFtcCxlbnN0YXIsZW5zdGF0ZSxlbnN0ZWVsLGVuc3Rvb2wsZW5zdG9yZSxlbnN1YW50LGVuc3VlLGVuc3VlcixlbnN1cmUsZW5zdXJlcixlbnN3ZWVwLGVudGFjaCxlbnRhZCxlbnRhaWwsZW50YWwsZW50YW1lLGVudGFzaWEsZW50YXNpcyxlbnRlbGFtLGVudGVudGUsZW50ZXIsZW50ZXJhbCxlbnRlcmVyLGVudGVyaWEsZW50ZXJpYyxlbnRlcm9uLGVudGhlYWwsZW50aHJhbCxlbnRodXNlLGVudGlhLGVudGljZSxlbnRpY2VyLGVudGlmeSxlbnRpcmUsZW50aXJpcyxlbnRpdGxlLGVudGl0eSxlbnRvaWwsZW50b21iLGVudG9taWMsZW50b25lLGVudG9waWMsZW50b3RpYyxlbnRvem9hLGVudHJhaWwsZW50cmFpbixlbnRyYW50LGVudHJhcCxlbnRyZWF0LGVudHJlZSxlbnRyb3B5LGVudHJ1c3QsZW50cnksZW50d2luZSxlbnR3aXN0LGVudXJlLGVudXJueSxlbnZhcG9yLGVudmF1bHQsZW52ZWlsLGVudmVsb3AsZW52ZW5vbSxlbnZpZWQsZW52aWVyLGVudmlvdXMsZW52aXJvbixlbnZveSxlbnZ5LGVudnlpbmcsZW53aWRlbixlbndpbmQsZW53aXNlbixlbndvbWFuLGVud29tYixlbndvb2QsZW53b3VuZCxlbndyYXAsZW53cml0ZSxlbnpvbmUsZW56b290eSxlbnp5bSxlbnp5bWUsZW56eW1pYyxlb2FuLGVvbGl0aCxlb24sZW9uaXNtLGVvcGh5dGUsZW9zYXRlLGVvc2lkZSxlb3Npbixlb3NpbmljLGVvem9vbixlcGFjbWUsZXBhY3JpZCxlcGFjdCxlcGFjdGFsLGVwYWdvZ2UsZXBhbm9keSxlcGFyY2gsZXBhcmNoeSxlcGF1bGUsZXBhdWxldCxlcGF4aWFsLGVwZWUsZXBlZWlzdCxlcGVpcmljLGVwZWlyaWQsZXBlcmduZSxlcGhhLGVwaGFoLGVwaGViZSxlcGhlYmljLGVwaGVib3MsZXBoZWJ1cyxlcGhlbGlzLGVwaGV0YWUsZXBoZXRlLGVwaGV0aWMsZXBob2QsZXBob3IsZXBob3JhbCxlcGhvcmljLGVwaG9ydXMsZXBoeXJhLGVwaWJvbGUsZXBpYm9seSxlcGljLGVwaWNhbCxlcGljYXJwLGVwaWNlZGUsZXBpY2VsZSxlcGljZW5lLGVwaWNoaWwsZXBpY2lzbSxlcGljaXN0LGVwaWNseSxlcGljdXJlLGVwaWN5dGUsZXBpZGVteSxlcGlkZXJtLGVwaWRvdGUsZXBpZ2VhbCxlcGlnZWFuLGVwaWdlaWMsZXBpZ2VuZSxlcGlnb25lLGVwaWdyYW0sZXBpZ3luZSxlcGlneW55LGVwaWh5YWwsZXBpa2VpYSxlcGlsYXRlLGVwaWxvYmUsZXBpbWVyLGVwaW1lcmUsZXBpbXl0aCxlcGluYW9zLGVwaW5pbmUsZXBpb3RpYyxlcGlwaWFsLGVwaXNvZGUsZXBpc3RsZSxlcGl0YXBoLGVwaXRlbGEsZXBpdGhlbSxlcGl0aGV0LGVwaXRva2UsZXBpdG9tZSxlcGl1cmFsLGVwaXpvYSxlcGl6b2FsLGVwaXpvYW4sZXBpem9pYyxlcGl6b29uLGVwb2NoLGVwb2NoYSxlcG9jaGFsLGVwb2RlLGVwb2RpYyxlcG9ueW0sZXBvbnlteSxlcG9wZWUsZXBvcHQsZXBvcHRlcyxlcG9wdGljLGVwb3MsZXBzaWxvbixlcHVsYXJ5LGVwdWxpcyxlcHVsbyxlcHVsb2lkLGVwdXJhbCxlcHVyYXRlLGVxdWFibGUsZXF1YWJseSxlcXVhbCxlcXVhbGx5LGVxdWFudCxlcXVhdGUsZXF1YXRvcixlcXVlcnJ5LGVxdWlkLGVxdWluZSxlcXVpbmlhLGVxdWlub3gsZXF1aW51cyxlcXVpcCxlcXVpcGVkLGVxdWlzb24sZXF1aXRlcyxlcXVpdHksZXF1b2lkLGVyLGVyYSxlcmFkZSxlcmFsLGVyYW5pc3QsZXJhc2UsZXJhc2VkLGVyYXNlcixlcmFzaW9uLGVyYXN1cmUsZXJiaWEsZXJiaXVtLGVyZCxlcmR2YXJrLGVyZSxlcmVjdCxlcmVjdGVyLGVyZWN0bHksZXJlY3RvcixlcmVsb25nLGVyZW1pYyxlcmVtaXRlLGVyZW5hY2gsZXJlbm93LGVyZXBzaW4sZXJlcHQsZXJlcHRpYyxlcmV0aGljLGVyZyxlcmdhbCxlcmdhc2lhLGVyZ2F0ZXMsZXJnb2RpYyxlcmdvaXNtLGVyZ29uLGVyZ290LGVyZ290ZWQsZXJnb3RpYyxlcmdvdGluLGVyZ3VzaWEsZXJpYSxlcmljLGVyaWNhZCxlcmljYWwsZXJpY2l1cyxlcmljb2lkLGVyaWthLGVyaWtpdGUsZXJpbmV1bSxlcmluaXRlLGVyaW5vc2UsZXJpc3RpYyxlcml6byxlcmxraW5nLGVybWVsaW4sZXJtaW5lLGVybWluZWQsZXJtaW5lZSxlcm1pbmVzLGVybmUsZXJvZGUsZXJvZGVkLGVyb2RlbnQsZXJvZ2VueSxlcm9zLGVyb3NlLGVyb3NlbHksZXJvc2lvbixlcm9zaXZlLGVyb3RlbWUsZXJvdGljLGVyb3RpY2EsZXJvdGlzbSxlcnIsZXJyYWJsZSxlcnJhbmN5LGVycmFuZCxlcnJhbnQsZXJyYXRhLGVycmF0aWMsZXJyYXR1bSxlcnJoaW5lLGVycmluZyxlcnJpdGUsZXJyb3IsZXJzLGVyc2F0eixlcnRoLGVydGhlbixlcnRobHksZXJ1YyxlcnVjYSxlcnVjaWMsZXJ1Y2luLGVydWN0LGVydWRpdCxlcnVkaXRlLGVydWdhdGUsZXJ1cHQsZXJ5bmdvLGVzLGVzY2EsZXNjYWxhbixlc2NhbGluLGVzY2Fsb3AsZXNjYXBlLGVzY2FwZWUsZXNjYXBlcixlc2NhcnAsZXNjaGFyLGVzY2hhcmEsZXNjaGVhdCxlc2NoZXcsZXNjb2JhLGVzY29sYXIsZXNjb3J0LGVzY3JpYmUsZXNjcm9sLGVzY3Jvdyxlc2N1ZG8sZXNjdWxpbixlc2VyZSxlc2VyaW5lLGVzZXh1YWwsZXNoaW4sZXNrZXIsZXNuZSxlc29kaWMsZXNvdGVyeSxlc3BhZG9uLGVzcGFydG8sZXNwYXZlLGVzcGlhbCxlc3BpZXIsZXNwaW5hbCxlc3Bpbm8sZXNwbGVlcyxlc3BvdXNlLGVzcHksZXNxdWlyZSxlc3MsZXNzYW5nLGVzc2F5LGVzc2F5ZXIsZXNzZWQsZXNzZW5jZSxlc3NlbmN5LGVzc2xpbmcsZXNzb2luLGVzdGFkYWwsZXN0YWRpbyxlc3RhZG8sZXN0YW1wLGVzdGF0ZSxlc3RlZW0sZXN0ZXIsZXN0ZXZpbixlc3RpdmFsLGVzdG1hcmssZXN0b2MsZXN0b2lsZSxlc3RvcCxlc3RyYWRlLGVzdHJheSxlc3RyZSxlc3RyZWF0LGVzdHJlcGUsZXN0cmluLGVzdHJpb2wsZXN0cm9uZSxlc3Ryb3VzLGVzdHJ1YWwsZXN0dWFyeSxlc3R1ZmEsZXN0dW91cyxlc3R1cyxldGEsZXRhY2lzbSxldGFjaXN0LGV0YWxvbixldGFtaW5lLGV0Y2gsZXRjaGVyLGV0Y2hpbmcsZXRlcm5hbCxldGVzaWFuLGV0aGFsLGV0aGFuYWwsZXRoYW5lLGV0aGFub2wsZXRoZWwsZXRoZW5lLGV0aGVuaWMsZXRoZW5vbCxldGhlbnlsLGV0aGVyLGV0aGVyZWQsZXRoZXJpYyxldGhlcmluLGV0aGljLGV0aGljYWwsZXRoaWNzLGV0aGlkLGV0aGlkZSxldGhpbmUsZXRoaW9wcyxldGhtb2lkLGV0aG5hbCxldGhuaWMsZXRobml6ZSxldGhub3MsZXRob3MsZXRob3h5bCxldGhyb2csZXRoeWwsZXRoeWxpYyxldGh5bGluLGV0aHluZSxldGh5bnlsLGV0aW9saW4sZXRuYSxldHRsZSxldHVhLGV0dWRlLGV0dWksZXR5bSxldHltaWMsZXR5bW9uLGV0eXBpYyxldSxldWFzdGVyLGV1Y2FpbmUsZXVjaHJlLGV1Y2hyZWQsZXVjbGFzZSxldWNvbmUsZXVjb25pYyxldWNyYXN5LGV1Y3JpdGUsZXVnZSxldWdlbmljLGV1Z2Vub2wsZXVnZW55LGV1bGFsaWEsZXVsb2dpYSxldWxvZ2ljLGV1bG9neSxldW1lbmlkLGV1bmljaWQsZXVub215LGV1bnVjaCxldW9ueW0sZXVvbnlteSxldW91YWUsZXVwYWQsZXVwYXRoeSxldXBlcHN5LGV1cGhlbXksZXVwaG9uLGV1cGhvbmUsZXVwaG9ueSxldXBob3J5LGV1cGhyb2UsZXVwaW9uZSxldXBsb2lkLGV1cG5lYSxldXJla2EsZXVyaXB1cyxldXJpdGUsZXVyb2JpbixldXJ5b24sZXVzb2wsZXVzdHlsZSxldXRheGljLGV1dGF4eSxldXRleGlhLGV1dG9ueSxldmFjdWUsZXZhY3VlZSxldmFkZSxldmFkZXIsZXZhbHVlLGV2YW5nZWwsZXZhbmlzaCxldmFzZSxldmFzaW9uLGV2YXNpdmUsZXZlLGV2ZWphcixldmVsb25nLGV2ZW4sZXZlbmVyLGV2ZW5pbmcsZXZlbmx5LGV2ZW5zLGV2ZW50LGV2ZXF1ZSxldmVyLGV2ZXJ0LGV2ZXJ0b3IsZXZlcndobyxldmVyeSxldmVzdGFyLGV2ZXRpZGUsZXZld2VlZCxldmljdCxldmljdG9yLGV2aWRlbnQsZXZpbCxldmlsbHksZXZpbmNlLGV2aXJhdGUsZXZpc2l0ZSxldml0YXRlLGV2b2NhdGUsZXZvZSxldm9rZSxldm9rZXIsZXZvbHV0ZSxldm9sdmUsZXZvbHZlcixldm92YWUsZXZ1bHNlLGV2em9uZSxld2Rlcixld2UsZXdlcixld2VyZXIsZXdlcnksZXdyeSxleCxleGFjdCxleGFjdGVyLGV4YWN0bHksZXhhY3RvcixleGFsYXRlLGV4YWx0LGV4YWx0ZWQsZXhhbHRlcixleGFtLGV4YW1lbixleGFtaW5lLGV4YW1wbGUsZXhhcmF0ZSxleGFyY2gsZXhhcmNoeSxleGNhbWIsZXhjYXZlLGV4Y2VlZCxleGNlbCxleGNlcHQsZXhjZXJwdCxleGNlc3MsZXhjaWRlLGV4Y2lwbGUsZXhjaXNlLGV4Y2lzb3IsZXhjaXRlLGV4Y2l0ZWQsZXhjaXRlcixleGNpdG9yLGV4Y2xhaW0sZXhjbGF2ZSxleGNsdWRlLGV4Y3JldGEsZXhjcmV0ZSxleGN1cnNlLGV4Y3VzYWwsZXhjdXNlLGV4Y3VzZXIsZXhjdXNzLGV4Y3lzdCxleGRpZSxleGVhdCxleGVjdXRlLGV4ZWRlbnQsZXhlZHJhLGV4ZWdldGUsZXhlbXB0LGV4ZXF1eSxleGVyZ3VlLGV4ZXJ0LGV4ZXMsZXhldW50LGV4ZmxlY3QsZXhoYWxlLGV4aGF1c3QsZXhoaWJpdCxleGhvcnQsZXhodW1lLGV4aHVtZXIsZXhpZ2VudCxleGlsZSxleGlsZXIsZXhpbGlhbixleGlsaWMsZXhpbGl0eSxleGlzdCxleGlzdGVyLGV4aXQsZXhpdGUsZXhpdGlvbixleGl0dXMsZXhsZXgsZXhvY2FycCxleG9jb25lLGV4b2RlLGV4b2Rlcm0sZXhvZGljLGV4b2Rpc3QsZXhvZG9zLGV4b2R1cyxleG9keSxleG9nYW15LGV4b2dlbixleG9nZW55LGV4b21pb24sZXhvbWlzLGV4b24sZXhvbmVyLGV4b3BvZCxleG9yZGlhLGV4b3JtaWEsZXhvc21pYyxleG9zdHJhLGV4b3RpYyxleG90aXNtLGV4cGFuZCxleHBhbnNlLGV4cGVjdCxleHBlZGUsZXhwZWwsZXhwZW5kLGV4cGVuc2UsZXhwZXJ0LGV4cGlhdGUsZXhwaXJlLGV4cGlyZWUsZXhwaXJlcixleHBpcnksZXhwbGFpbixleHBsYW50LGV4cGxvZGUsZXhwbG9pdCxleHBsb3JlLGV4cG9uZSxleHBvcnQsZXhwb3NhbCxleHBvc2UsZXhwb3NlZCxleHBvc2VyLGV4cG9zaXQsZXhwb3VuZCxleHByZXNzLGV4cHVnbixleHB1bHNlLGV4cHVuZ2UsZXhwdXJnZSxleHJhZGlvLGV4c2NpbmQsZXhzZWN0LGV4c2VydCxleHNoaXAsZXhzdXJnZSxleHRhbnQsZXh0ZW5kLGV4dGVuc2UsZXh0ZW50LGV4dGVyLGV4dGVybixleHRlcm5lLGV4dGltYSxleHRpbmN0LGV4dGluZSxleHRvbCxleHRvbGwsZXh0b3J0LGV4dHJhLGV4dHJhY3QsZXh0cmFpdCxleHRyZW1lLGV4dHJ1ZGUsZXh0dW5kLGV4dWRhdGUsZXh1ZGUsZXh1bHQsZXh1bHRldCxleHV2aWFlLGV4dXZpYWwsZXksZXlhaCxleWFsZXQsZXlhcyxleWUsZXllYmFsbCxleWViYWxtLGV5ZWJhcixleWViZWFtLGV5ZWJvbHQsZXllYnJlZSxleWVicm93LGV5ZWN1cCxleWVkLGV5ZWRvdCxleWVkcm9wLGV5ZWZsYXAsZXllZnVsLGV5ZWhvbGUsZXllbGFzaCxleWVsZXNzLGV5ZWxldCxleWVsaWQsZXllbGlrZSxleWVsaW5lLGV5ZW1hcmssZXllbixleWVwaXQsZXllcixleWVyb290LGV5ZXNlZWQsZXllc2hvdCxleWVzb21lLGV5ZXNvcmUsZXllc3BvdCxleWV3YXNoLGV5ZXdlYXIsZXlld2luayxleWV3b3J0LGV5ZXksZXlpbmcsZXluLGV5bmUsZXlvdCxleW90eSxleXJhLGV5cmUsZXlyaWUsZXlyaXIsZXpiYSxmLGZhLGZhYmVsbGEsZmFiZXMsZmFibGUsZmFibGVkLGZhYmxlcixmYWJsaWF1LGZhYmxpbmcsZmFicmljLGZhYnVsYXIsZmFjYWRhbCxmYWNhZGUsZmFjZSxmYWNlZCxmYWNlbWFuLGZhY2VyLGZhY2V0LGZhY2V0ZSxmYWNldGVkLGZhY2lhLGZhY2lhbCxmYWNpZW5kLGZhY2llbnQsZmFjaWVzLGZhY2lsZSxmYWNpbmcsZmFjayxmYWNraW5zLGZhY2tzLGZhY3QsZmFjdGZ1bCxmYWN0aW9uLGZhY3Rpc2gsZmFjdGl2ZSxmYWN0b3IsZmFjdG9yeSxmYWN0cml4LGZhY3R1YWwsZmFjdHVtLGZhY3R1cmUsZmFjdHksZmFjdWxhLGZhY3VsYXIsZmFjdWx0eSxmYWN1bmQsZmFjeSxmYWQsZmFkYWJsZSxmYWRkaXNoLGZhZGRpc20sZmFkZGlzdCxmYWRkbGUsZmFkZHksZmFkZSxmYWRlZCxmYWRlZGx5LGZhZGVuLGZhZGVyLGZhZGdlLGZhZGluZyxmYWR5LGZhZSxmYWVyaWUsZmFlcnksZmFmZixmYWZmbGUsZmFmZnksZmFnLGZhZ2FsZCxmYWdlLGZhZ2VyLGZhZ2dlcixmYWdnZXJ5LGZhZ2dpbmcsZmFnaW5lLGZhZ290LGZhZ290ZXIsZmFnb3R5LGZhaGFtLGZhaGxlcnosZmFobG9yZSxmYWllbmNlLGZhaWwsZmFpbGluZyxmYWlsbGUsZmFpbHVyZSxmYWluLGZhaW5seSxmYWlucyxmYWludCxmYWludGVyLGZhaW50bHksZmFpbnRzLGZhaW50eSxmYWlwdWxlLGZhaXIsZmFpcmVyLGZhaXJpbHksZmFpcmluZyxmYWlyaXNoLGZhaXJseSxmYWlybSxmYWlyd2F5LGZhaXJ5LGZhaXRoLGZhaXRvdXIsZmFrZSxmYWtlcixmYWtlcnksZmFraXIsZmFreSxmYWxiYWxhLGZhbGNhZGUsZmFsY2F0ZSxmYWxjZXIsZmFsY2VzLGZhbGNpYWwsZmFsY29uLGZhbGN1bGEsZmFsZGFnZSxmYWxkZmVlLGZhbGwsZmFsbGFjZSxmYWxsYWN5LGZhbGxhZ2UsZmFsbGVuLGZhbGxlcixmYWxsaW5nLGZhbGxvdyxmYWxsd2F5LGZhbGx5LGZhbHNhcnksZmFsc2UsZmFsc2VseSxmYWxzZW4sZmFsc2VyLGZhbHNpZSxmYWxzaWZ5LGZhbHNpc20sZmFsdGNoZSxmYWx0ZXIsZmFsdXRpbixmYWx4LGZhbSxmYW1ibGUsZmFtZSxmYW1lZnVsLGZhbWlsaWEsZmFtaWx5LGZhbWluZSxmYW1pc2gsZmFtb3VzLGZhbXVsdXMsZmFuLGZhbmEsZmFuYWwsZmFuYW0sZmFuYXRpYyxmYW5iYWNrLGZhbmNpZWQsZmFuY2llcixmYW5jaWZ5LGZhbmN5LGZhbmQsZmFuZG9tLGZhbmVnYSxmYW5mYXJlLGZhbmZvb3QsZmFuZyxmYW5nZWQsZmFuZ2xlLGZhbmdsZWQsZmFuZ2xldCxmYW5nb3QsZmFuZ3ksZmFuaW9uLGZhbmxpa2UsZmFubWFuLGZhbm5lbCxmYW5uZXIsZmFubmllcixmYW5uaW5nLGZhbm9uLGZhbnQsZmFudGFpbCxmYW50YXN0LGZhbnRhc3ksZmFudG9kLGZhbndlZWQsZmFud2lzZSxmYW53b3JrLGZhbndvcnQsZmFvbixmYXIsZmFyYWQsZmFyYWRheSxmYXJhZGljLGZhcmF3YXksZmFyY2UsZmFyY2VyLGZhcmNpYWwsZmFyY2llZCxmYXJjaWZ5LGZhcmNpbmcsZmFyY2lzdCxmYXJjeSxmYXJkZSxmYXJkZWwsZmFyZGgsZmFyZG8sZmFyZSxmYXJlcixmYXJmYXJhLGZhcmZlbCxmYXJnb29kLGZhcmluYSxmYXJpbmcsZmFyaXNoLGZhcmwsZmFybGV1LGZhcm0sZmFybWFnZSxmYXJtZXIsZmFybWVyeSxmYXJtaW5nLGZhcm1vc3QsZmFybXksZmFybmVzcyxmYXJvLGZhcnJhZ28sZmFycmFuZCxmYXJyaWVyLGZhcnJvdyxmYXJydWNhLGZhcnNlLGZhcnNlZXIsZmFyc2V0LGZhcnRoZXIsZmFzY2VzLGZhc2NldCxmYXNjaWEsZmFzY2lhbCxmYXNjaW5lLGZhc2NpcyxmYXNjaXNtLGZhc2Npc3QsZmFzaCxmYXNoZXIsZmFzaGVyeSxmYXNoaW9uLGZhc3MsZmFzdCxmYXN0ZW4sZmFzdGVyLGZhc3RpbmcsZmFzdGlzaCxmYXN0dXMsZmF0LGZhdGFsLGZhdGFsbHksZmF0YmlyZCxmYXRlLGZhdGVkLGZhdGVmdWwsZmF0aGVhZCxmYXRoZXIsZmF0aG11cixmYXRob20sZmF0aWRpYyxmYXRpZ3VlLGZhdGloYSxmYXRpbCxmYXRsZXNzLGZhdGxpbmcsZmF0bHksZmF0bmVzcyxmYXRzaWEsZmF0dGVuLGZhdHRlcixmYXR0aWx5LGZhdHRpc2gsZmF0dHksZmF0dWlzbSxmYXR1aXR5LGZhdHVvaWQsZmF0dW91cyxmYXR3b29kLGZhdWNhbCxmYXVjZXMsZmF1Y2V0LGZhdWNpYWwsZmF1Y3JlLGZhdWdoLGZhdWxkLGZhdWx0LGZhdWx0ZXIsZmF1bHR5LGZhdW4sZmF1bmFsLGZhdW5pc2gsZmF1bmlzdCxmYXVudWxlLGZhdXNlLGZhdXN0LGZhdXRvcixmYXV2ZSxmYXZlbGxhLGZhdmlsbGEsZmF2aXNtLGZhdmlzc2EsZmF2bixmYXZvcixmYXZvcmVkLGZhdm9yZXIsZmF2b3NlLGZhdm91cyxmYXZ1cyxmYXduLGZhd25lcixmYXduZXJ5LGZhd25pbmcsZmF3bnksZmF5LGZheWxlcyxmYXplLGZhemVuZGEsZmUsZmVhZ3VlLGZlYWssZmVhbCxmZWFsdHksZmVhcixmZWFyZWQsZmVhcmVyLGZlYXJmdWwsZmVhc29yLGZlYXN0LGZlYXN0ZW4sZmVhc3RlcixmZWF0LGZlYXRoZXIsZmVhdGx5LGZlYXRvdXMsZmVhdHVyZSxmZWF0eSxmZWF6ZSxmZWJyaWxlLGZlY2FsLGZlY2VzLGZlY2ssZmVja2Z1bCxmZWNrbHksZmVjdWxhLGZlY3VuZCxmZWQsZmVkZGFuLGZlZGVyYWwsZmVlLGZlZWFibGUsZmVlYmxlLGZlZWJseSxmZWVkLGZlZWRiaW4sZmVlZGJveCxmZWVkZXIsZmVlZGluZyxmZWVkbWFuLGZlZWR3YXksZmVlZHksZmVlbCxmZWVsZXIsZmVlbGVzcyxmZWVsaW5nLGZlZXIsZmVlcmUsZmVlcmluZyxmZWV0YWdlLGZlZXplLGZlZ2FyeSxmZWksZmVpZixmZWlnaGVyLGZlaWduLGZlaWduZWQsZmVpZ25lcixmZWlsLGZlaW50LGZlaXMsZmVpc3QsZmVpc3R5LGZlbGlkLGZlbGluZSxmZWxsLGZlbGxhZ2UsZmVsbGFoLGZlbGxlbixmZWxsZXIsZmVsbGljLGZlbGxpbmcsZmVsbG9lLGZlbGxvdyxmZWxseSxmZWxvaWQsZmVsb24sZmVsb25yeSxmZWxvbnksZmVscyxmZWxzaXRlLGZlbHQsZmVsdGVkLGZlbHRlcixmZWx0aW5nLGZlbHR5LGZlbHVjY2EsZmVsd29ydCxmZW1hbGUsZmVtZSxmZW1pYyxmZW1pbmFsLGZlbWluaWUsZmVtaW5pbixmZW1vcmEsZmVtb3JhbCxmZW11cixmZW4sZmVuYmFuayxmZW5jZSxmZW5jZXIsZmVuY2h5bCxmZW5jaW5nLGZlbmQsZmVuZGVyLGZlbmR5LGZlbml0ZSxmZW5rcyxmZW5sYW5kLGZlbm1hbixmZW5uZWMsZmVubmVsLGZlbm5pZyxmZW5uaXNoLGZlbm55LGZlbnNpdmUsZmVudCxmZW50ZXIsZmVvZCxmZW9kYWwsZmVvZGFyeSxmZW9mZixmZW9mZmVlLGZlb2Zmb3IsZmVvd2VyLGZlcmFsLGZlcmFsaW4sZmVyYXNoLGZlcmR3aXQsZmVyZmV0LGZlcmlhLGZlcmlhbCxmZXJpZGdpLGZlcmllLGZlcmluZSxmZXJpdHksZmVyayxmZXJsaW5nLGZlcmx5LGZlcm1haWwsZmVybWUsZmVybWVudCxmZXJtZXJ5LGZlcm1pbGEsZmVybixmZXJuZWQsZmVybmVyeSxmZXJueSxmZXJvaGVyLGZlcnJhZG8sZmVycmF0ZSxmZXJyZWFuLGZlcnJldCxmZXJyZXR5LGZlcnJpLGZlcnJpYyxmZXJyaWVyLGZlcnJpdGUsZmVycm91cyxmZXJydWxlLGZlcnJ1bSxmZXJyeSxmZXJ0aWxlLGZlcnUsZmVydWxhLGZlcnVsZSxmZXJ1bGljLGZlcnZlbnQsZmVydmlkLGZlcnZvcixmZXNjdWUsZmVzcyxmZXNzZWx5LGZlc3QsZmVzdGFsLGZlc3RlcixmZXN0aW5lLGZlc3RpdmUsZmVzdG9vbixmZXN0dWNhLGZldCxmZXRhbCxmZXRjaCxmZXRjaGVkLGZldGNoZXIsZmV0aWFsLGZldGlkLGZldGlkbHksZmV0aXNoLGZldGxvY2ssZmV0bG93LGZldG9yLGZldHRlcixmZXR0bGUsZmV0dGxlcixmZXR1cyxmZXUsZmV1YWdlLGZldWFyLGZldWNodCxmZXVkLGZldWRhbCxmZXVkZWUsZmV1ZGlzdCxmZXVlZCxmZXVpbGxlLGZldmVyLGZldmVyZXQsZmV3LGZld25lc3MsZmV3c29tZSxmZXd0ZXIsZmV5LGZleW5lc3MsZmV6LGZlenplZCxmZXp6eSxmaSxmaWFjcmUsZmlhbmNlLGZpYW5jZWUsZmlhcixmaWFyZCxmaWFzY28sZmlhdCxmaWIsZmliYmVyLGZpYmJlcnksZmliZG9tLGZpYmVyLGZpYmVyZWQsZmlicmlsLGZpYnJpbixmaWJyaW5lLGZpYnJvaWQsZmlicm9pbixmaWJyb21hLGZpYnJvc2UsZmlicm91cyxmaWJyeSxmaWJzdGVyLGZpYnVsYSxmaWJ1bGFlLGZpYnVsYXIsZmljYXJ5LGZpY2UsZmljZWxsZSxmaWNoZSxmaWNodSxmaWNrbGUsZmlja2x5LGZpY28sZmljb2lkLGZpY3RpbGUsZmljdGlvbixmaWN0aXZlLGZpZCxmaWRhbGdvLGZpZGF0ZSxmaWRkbGUsZmlkZGxlcixmaWRkbGV5LGZpZGUsZmlkZWlzbSxmaWRlaXN0LGZpZGZhZCxmaWRnZSxmaWRnZXQsZmlkZ2V0eSxmaWR1Y2lhLGZpZSxmaWVmZG9tLGZpZWxkLGZpZWxkZWQsZmllbGRlcixmaWVsZHksZmllbmQsZmllbmRseSxmaWVudCxmaWVyY2UsZmllcmNlbixmaWVyaWx5LGZpZXJ5LGZpZXN0YSxmaWZlLGZpZmVyLGZpZmllLGZpZmlzaCxmaWZvLGZpZnRlZW4sZmlmdGgsZmlmdGhseSxmaWZ0eSxmaWcsZmlnYXJvLGZpZ2JpcmQsZmlnZW50LGZpZ2dlZCxmaWdnZXJ5LGZpZ2dpbmcsZmlnZ2xlLGZpZ2d5LGZpZ2h0LGZpZ2h0ZXIsZmlnbGVzcyxmaWdsaWtlLGZpZ21lbnQsZmlndXJhbCxmaWd1cmUsZmlndXJlZCxmaWd1cmVyLGZpZ3VyeSxmaWd3b3JtLGZpZ3dvcnQsZmlrZSxmaWtpZSxmaWxhY2UsZmlsYWNlcixmaWxhbyxmaWxhcixmaWxhcmlhLGZpbGFzc2UsZmlsYXRlLGZpbGF0b3IsZmlsYmVydCxmaWxjaCxmaWxjaGVyLGZpbGUsZmlsZW1vdCxmaWxlcixmaWxldCxmaWxpYWwsZmlsaWF0ZSxmaWxpYmVnLGZpbGljYWwsZmlsaWNpYyxmaWxpY2luLGZpbGlldHksZmlsaW5nLGZpbGluZ3MsZmlsaXBwbyxmaWxpdGUsZmlsbCxmaWxsZWQsZmlsbGVyLGZpbGxldCxmaWxsZXVsLGZpbGxpbmcsZmlsbGlwLGZpbGxvY2ssZmlsbHksZmlsbSxmaWxtZG9tLGZpbG1ldCxmaWxtaWMsZmlsbWlseSxmaWxtaXNoLGZpbG1pc3QsZmlsbWl6ZSxmaWxteSxmaWxvLGZpbG9zZSxmaWxzLGZpbHRlcixmaWx0aCxmaWx0aHksZmltYmxlLGZpbWJyaWEsZmluLGZpbmFibGUsZmluYWdsZSxmaW5hbCxmaW5hbGUsZmluYWxseSxmaW5hbmNlLGZpbmJhY2ssZmluY2gsZmluY2hlZCxmaW5kLGZpbmRhbCxmaW5kZXIsZmluZGluZyxmaW5kamFuLGZpbmUsZmluZWlzaCxmaW5lbHksZmluZXIsZmluZXJ5LGZpbmVzc2UsZmluZXRvcCxmaW5maXNoLGZpbmZvb3QsZmluZ2VudCxmaW5nZXIsZmluZ2VyeSxmaW5pYWwsZmluaWNhbCxmaW5pY2ssZmluaWZpYyxmaW5pZnksZmluaWtpbixmaW5pbmcsZmluaXMsZmluaXNoLGZpbml0ZSxmaW5pdHksZmluamFuLGZpbmssZmlua2VsLGZpbmxhbmQsZmlubGVzcyxmaW5sZXQsZmlubGlrZSxmaW5uYWMsZmlubmVkLGZpbm5lcixmaW5uaXAsZmlubnksZmlvcmQsZmlvcmRlZCxmaW9yaW4sZmlvcml0ZSxmaXAsZmlwZW5ueSxmaXBwbGUsZmlxdWUsZmlyLGZpcmNhLGZpcmUsZmlyZWFybSxmaXJlYm94LGZpcmVib3ksZmlyZWJ1ZyxmaXJlZCxmaXJlZG9nLGZpcmVmbHksZmlyZWxpdCxmaXJlbWFuLGZpcmVyLGZpcmV0b3AsZmlyaW5nLGZpcmssZmlya2VyLGZpcmtpbixmaXJsb3QsZmlybSxmaXJtYW4sZmlybWVyLGZpcm1seSxmaXJuLGZpcnJpbmcsZmlycnksZmlyc3QsZmlyc3RseSxmaXJ0aCxmaXNjLGZpc2NhbCxmaXNlLGZpc2V0aW4sZmlzaCxmaXNoYmVkLGZpc2hlZCxmaXNoZXIsZmlzaGVyeSxmaXNoZXQsZmlzaGV5ZSxmaXNoZnVsLGZpc2hnaWcsZmlzaGlmeSxmaXNoaWx5LGZpc2hpbmcsZmlzaGxldCxmaXNobWFuLGZpc2hwb3QsZmlzaHdheSxmaXNoeSxmaXNub2dhLGZpc3NhdGUsZmlzc2lsZSxmaXNzaW9uLGZpc3NpdmUsZmlzc3VyZSxmaXNzdXJ5LGZpc3QsZmlzdGVkLGZpc3RlcixmaXN0ZnVsLGZpc3RpYyxmaXN0aWZ5LGZpc3RpbmcsZmlzdHVjYSxmaXN0dWxhLGZpc3R1bGUsZmlzdHksZml0LGZpdGNoLGZpdGNoZWQsZml0Y2hlZSxmaXRjaGVyLGZpdGNoZXQsZml0Y2hldyxmaXRmdWwsZml0bHksZml0bWVudCxmaXRuZXNzLGZpdG91dCxmaXRyb290LGZpdHRhZ2UsZml0dGVkLGZpdHRlbixmaXR0ZXIsZml0dGVycyxmaXR0aWx5LGZpdHRpbmcsZml0dHksZml0d2VlZCxmaXZlLGZpdmViYXIsZml2ZXIsZml2ZXMsZml4LGZpeGFibGUsZml4YWdlLGZpeGF0ZSxmaXhhdGlmLGZpeGF0b3IsZml4ZWQsZml4ZWRseSxmaXhlcixmaXhpbmcsZml4aXR5LGZpeHR1cmUsZml4dXJlLGZpemdpZyxmaXp6LGZpenplcixmaXp6bGUsZml6enksZmplbGQsZmxhYmJ5LGZsYWJydW0sZmxhY2NpZCxmbGFjayxmbGFja2VkLGZsYWNrZXIsZmxhY2tldCxmbGFmZixmbGFmZmVyLGZsYWcsZmxhZ2dlcixmbGFnZ3ksZmxhZ2xldCxmbGFnbWFuLGZsYWdvbixmbGFpbCxmbGFpcixmbGFpdGgsZmxhayxmbGFrYWdlLGZsYWtlLGZsYWtlcixmbGFraWx5LGZsYWt5LGZsYW0sZmxhbWFudCxmbGFtYixmbGFtZSxmbGFtZWQsZmxhbWVuLGZsYW1lcixmbGFtZmV3LGZsYW1pbmcsZmxhbXksZmxhbixmbGFuY2gsZmxhbmRhbixmbGFuZSxmbGFuZ2UsZmxhbmdlcixmbGFuayxmbGFua2VkLGZsYW5rZXIsZmxhbmt5LGZsYW5uZWwsZmxhbnF1ZSxmbGFwLGZsYXBwZXIsZmxhcmUsZmxhcmluZyxmbGFyeSxmbGFzZXIsZmxhc2gsZmxhc2hlcixmbGFzaGV0LGZsYXNobHksZmxhc2h5LGZsYXNrLGZsYXNrZXIsZmxhc2tldCxmbGFzcXVlLGZsYXQsZmxhdGNhcCxmbGF0Y2FyLGZsYXRkb20sZmxhdGVkLGZsYXRoYXQsZmxhdGxldCxmbGF0bHksZmxhdG1hbixmbGF0dGVuLGZsYXR0ZXIsZmxhdHRpZSxmbGF0dG9wLGZsYXR1cyxmbGF0d2F5LGZsYXVnaHQsZmxhdW50LGZsYXVudHksZmxhdmVkbyxmbGF2aWMsZmxhdmlkLGZsYXZpbixmbGF2aW5lLGZsYXZvLGZsYXZvbmUsZmxhdm9yLGZsYXZvcnksZmxhdm91cixmbGF3LGZsYXdlZCxmbGF3ZnVsLGZsYXduLGZsYXd5LGZsYXgsZmxheGVuLGZsYXhtYW4sZmxheHksZmxheSxmbGF5ZXIsZmxlYSxmbGVhbSxmbGVheSxmbGViaWxlLGZsZWNoZSxmbGVjayxmbGVja2VuLGZsZWNrZXIsZmxlY2t5LGZsZWN0b3IsZmxlZCxmbGVkZ2UsZmxlZGd5LGZsZWUsZmxlZWNlLGZsZWVjZWQsZmxlZWNlcixmbGVlY2gsZmxlZWN5LGZsZWVyLGZsZWVyZXIsZmxlZXQsZmxlZXRlcixmbGVldGx5LGZsZW1pc2gsZmxlbmNoLGZsZW5zZSxmbGVuc2VyLGZsZXJyeSxmbGVzaCxmbGVzaGVkLGZsZXNoZW4sZmxlc2hlcixmbGVzaGx5LGZsZXNoeSxmbGV0LGZsZXRjaCxmbGV0aGVyLGZsZXVyZXQsZmxldXJ5LGZsZXcsZmxld2VkLGZsZXdpdCxmbGV3cyxmbGV4LGZsZXhlZCxmbGV4aWxlLGZsZXhpb24sZmxleG9yLGZsZXh1cmUsZmxleSxmbGljayxmbGlja2VyLGZsaWNreSxmbGlkZGVyLGZsaWVyLGZsaWdnZXIsZmxpZ2h0LGZsaWdodHksZmxpbW1lcixmbGltcCxmbGltc3ksZmxpbmNoLGZsaW5kZXIsZmxpbmcsZmxpbmdlcixmbGluZ3ksZmxpbnQsZmxpbnRlcixmbGludHksZmxpb21hLGZsaXAsZmxpcGUsZmxpcHBlcixmbGlydCxmbGlydGVyLGZsaXJ0eSxmbGlzayxmbGlza3ksZmxpdCxmbGl0Y2gsZmxpdGUsZmxpdGluZyxmbGl0dGVyLGZsaXZ2ZXIsZmxpeCxmbG9hdCxmbG9hdGVyLGZsb2F0eSxmbG9iLGZsb2JieSxmbG9jLGZsb2NjdXMsZmxvY2ssZmxvY2tlcixmbG9ja3ksZmxvY29vbixmbG9kZ2UsZmxvZSxmbG9leSxmbG9nLGZsb2dnZXIsZmxva2l0ZSxmbG9uZyxmbG9vZCxmbG9vZGVkLGZsb29kZXIsZmxvb2R5LGZsb29yLGZsb29yZXIsZmxvb3p5LGZsb3AsZmxvcHBlcixmbG9wcHksZmxvcmEsZmxvcmFsLGZsb3JhbixmbG9yYXRlLGZsb3JlYWwsZmxvcmVudCxmbG9yZXMsZmxvcmV0LGZsb3JpZCxmbG9yaW4sZmxvcmlzdCxmbG9yb29uLGZsb3J1bGEsZmxvcnksZmxvc2gsZmxvc3MsZmxvc3NlcixmbG9zc3ksZmxvdCxmbG90YSxmbG90YWdlLGZsb3RhbnQsZmxvdHNhbSxmbG91bmNlLGZsb3VyLGZsb3VyeSxmbG91c2UsZmxvdXQsZmxvdXRlcixmbG93LGZsb3dhZ2UsZmxvd2VyLGZsb3dlcnksZmxvd2luZyxmbG93bixmbG93b2ZmLGZsdSxmbHVhdGUsZmx1YXZpbCxmbHViLGZsdWJkdWIsZmx1Y2FuLGZsdWUsZmx1ZWQsZmx1ZW1hbixmbHVlbmN5LGZsdWVudCxmbHVlcixmbHVleSxmbHVmZixmbHVmZmVyLGZsdWZmeSxmbHVpYmxlLGZsdWlkLGZsdWlkYWwsZmx1aWRpYyxmbHVpZGx5LGZsdWtlLGZsdWtlZCxmbHVraWx5LGZsdWtpbmcsZmx1a3ksZmx1bWUsZmx1bW1lcixmbHVtbW94LGZsdW1wLGZsdW5nLGZsdW5rLGZsdW5rZXIsZmx1bmt5LGZsdW9yLGZsdW9yYW4sZmx1b3JpYyxmbHVvcnlsLGZsdXJuLGZsdXJyLGZsdXJyeSxmbHVzaCxmbHVzaGVyLGZsdXNoeSxmbHVzayxmbHVza2VyLGZsdXN0ZXIsZmx1dGUsZmx1dGVkLGZsdXRlcixmbHV0aW5hLGZsdXRpbmcsZmx1dGlzdCxmbHV0dGVyLGZsdXR5LGZsdXZpYWwsZmx1eCxmbHV4ZXIsZmx1eGlsZSxmbHV4aW9uLGZseSxmbHlhYmxlLGZseWF3YXksZmx5YmFjayxmbHliYWxsLGZseWJhbmUsZmx5YmVsdCxmbHlibG93LGZseWJvYXQsZmx5Ym95LGZseWVyLGZseWZsYXAsZmx5aW5nLGZseWxlYWYsZmx5bGVzcyxmbHltYW4sZmx5bmVzcyxmbHlwZSxmbHl0YWlsLGZseXRpZXIsZmx5dHJhcCxmbHl3YXksZmx5d29ydCxmb2FsLGZvYWx5LGZvYW0sZm9hbWJvdyxmb2FtZXIsZm9hbWlseSxmb2FtaW5nLGZvYW15LGZvYixmb2NhbCxmb2NhbGx5LGZvY2ksZm9jb2lkcyxmb2NzbGUsZm9jdXMsZm9jdXNlcixmb2QsZm9kZGEsZm9kZGVyLGZvZGVyLGZvZGdlLGZvZGdlbCxmb2RpZW50LGZvZSxmb2Vobixmb2Vpc2gsZm9lbGVzcyxmb2VsaWtlLGZvZW1hbixmb2VzaGlwLGZvZyxmb2dib3csZm9nZG9nLGZvZ2RvbSxmb2dleSxmb2dnYWdlLGZvZ2dlZCxmb2dnZXIsZm9nZ2lseSxmb2dnaXNoLGZvZ2d5LGZvZ2hvcm4sZm9nbGUsZm9nbGVzcyxmb2dtYW4sZm9nbyxmb2dvbixmb2dvdSxmb2dyYW0sZm9ndXMsZm9neSxmb2d5ZG9tLGZvZ3lpc2gsZm9neWlzbSxmb2hhdCxmb2libGUsZm9pbCxmb2lsZXIsZm9pbGluZyxmb2luaW5nLGZvaXNvbixmb2lzdCxmb2lzdGVyLGZvaXN0eSxmb2l0ZXIsZm9sZCxmb2xkYWdlLGZvbGRlZCxmb2xkZW4sZm9sZGVyLGZvbGRpbmcsZm9sZHVyZSxmb2xkeSxmb2xlLGZvbGlhLGZvbGlhZ2UsZm9saWFsLGZvbGlhcixmb2xpYXJ5LGZvbGlhdGUsZm9saWUsZm9saW8sZm9saW9sZSxmb2xpb3NlLGZvbGlvdCxmb2xpb3VzLGZvbGl1bSxmb2xrLGZvbGttb3QsZm9sa3N5LGZvbGt3YXksZm9sa3ksZm9sbGVzLGZvbGxpcyxmb2xsb3csZm9sbHksZm9tZW50LGZvbWVzLGZvbWl0ZXMsZm9uZGFrLGZvbmRhbnQsZm9uZGlzaCxmb25kbGUsZm9uZGxlcixmb25kbHksZm9uZHUsZm9uZHVlLGZvbmR1ayxmb25seSxmb25uaXNoLGZvbm8sZm9ucyxmb250LGZvbnRhbCxmb250ZWQsZm9udGZ1bCxmb250bGV0LGZvbyxmb29kLGZvb2Rlcixmb29kZnVsLGZvb2R5LGZvb2wsZm9vbGRvbSxmb29sZXJ5LGZvb2xlc3MsZm9vbGluZyxmb29saXNoLGZvb25lcixmb29zdGVyLGZvb3QsZm9vdGFnZSxmb290Ym95LGZvb3RlZCxmb290ZXIsZm9vdGZ1bCxmb290aG90LGZvb3RpbmcsZm9vdGxlLGZvb3RsZXIsZm9vdG1hbixmb290cGFkLGZvb3RzLGZvb3R3YXksZm9vdHksZm9vemxlLGZvb3psZXIsZm9wLGZvcGxpbmcsZm9wcGVyeSxmb3BwaXNoLGZvcHB5LGZvcHNoaXAsZm9yLGZvcmEsZm9yYWdlLGZvcmFnZXIsZm9yYW1lbixmb3JhbmUsZm9yYXksZm9yYXllcixmb3JiLGZvcmJhZGUsZm9yYmFyLGZvcmJlYXIsZm9yYmlkLGZvcmJpdCxmb3JibGVkLGZvcmJsb3csZm9yYm9yZSxmb3Jib3csZm9yYnksZm9yY2UsZm9yY2VkLGZvcmNlcHMsZm9yY2VyLGZvcmNoZSxmb3JjaW5nLGZvcmQsZm9yZGF5cyxmb3JkaW5nLGZvcmRvLGZvcmRvbmUsZm9yZHksZm9yZSxmb3JlYWN0LGZvcmVhcm0sZm9yZWJheSxmb3JlY2FyLGZvcmVkYXksZm9yZWZpbixmb3JlZml0LGZvcmVnbyxmb3JlaWduLGZvcmVsLGZvcmVsYXksZm9yZWxlZyxmb3JlbWFuLGZvcmVwYWQsZm9yZXBhdyxmb3JlcmFuLGZvcmVyaWIsZm9yZXJ1bixmb3Jlc2F5LGZvcmVzZWUsZm9yZXNldCxmb3Jlc2luLGZvcmVzdCxmb3Jlc3R5LGZvcmV0b3AsZm9yZXVzZSxmb3JldmVyLGZvcmV2b3csZm9yZmFyLGZvcmZhcmUsZm9yZmFycyxmb3JmZWl0LGZvcmZlbmQsZm9yZ2UsZm9yZ2VkLGZvcmdlcixmb3JnZXJ5LGZvcmdldCxmb3JnaWUsZm9yZ2luZyxmb3JnaXZlLGZvcmdvLGZvcmdvZXIsZm9yZ290LGZvcmdyb3csZm9yaG9vLGZvcmhvb3ksZm9yaG93LGZvcmludCxmb3JrLGZvcmtlZCxmb3JrZXIsZm9ya2Z1bCxmb3JrbWFuLGZvcmt5LGZvcmxlZnQsZm9ybGV0LGZvcmxvcm4sZm9ybSxmb3JtYWwsZm9ybWFudCxmb3JtYXQsZm9ybWF0ZSxmb3JtZSxmb3JtZWQsZm9ybWVlLGZvcm1lbCxmb3JtZW5lLGZvcm1lcixmb3JtZnVsLGZvcm1pYyxmb3JtaW4sZm9ybWluZyxmb3Jtb3NlLGZvcm11bGEsZm9ybXVsZSxmb3JteSxmb3JteWwsZm9ybmVudCxmb3JuaXgsZm9ycGV0LGZvcnBpbmUsZm9ycGl0LGZvcnJhZCxmb3JyYXJkLGZvcnJpZGUsZm9ycml0LGZvcnJ1ZSxmb3JzYWtlLGZvcnNldCxmb3JzbG93LGZvcnQsZm9ydGUsZm9ydGgsZm9ydGhnbyxmb3J0aHksZm9ydGllcyxmb3J0aWZ5LGZvcnRpbixmb3J0aXMsZm9ydGxldCxmb3J0dW5lLGZvcnR5LGZvcnVtLGZvcndhcmQsZm9yd2Vhbixmb3J3ZW50LGZvc2gsZm9zaWUsZm9zc2EsZm9zc2FnZSxmb3NzYW5lLGZvc3NlLGZvc3NlZCxmb3NzaWNrLGZvc3NpbCxmb3Nzb3IsZm9zc3VsYSxmb3NzdWxlLGZvc3RlbGwsZm9zdGVyLGZvdCxmb3RjaCxmb3RoZXIsZm90bWFsLGZvdHVpLGZvdSxmb3VkLGZvdWV0dGUsZm91Z2FkZSxmb3VnaHQsZm91Z2h0eSxmb3VqZGFyLGZvdWwsZm91bGFnZSxmb3VsYXJkLGZvdWxlcixmb3VsaW5nLGZvdWxpc2gsZm91bGx5LGZvdW1hcnQsZm91bixmb3VuZCxmb3VuZGVyLGZvdW5kcnksZm91bnQsZm91cixmb3VyYmxlLGZvdXJjaGUsZm91cmVyLGZvdXJyZSxmb3VydGgsZm91c3NhLGZvdXRlLGZvdXRlcixmb3V0aCxmb3ZlYSxmb3ZlYWwsZm92ZWF0ZSxmb3Zlb2xhLGZvdmVvbGUsZm93LGZvd2ssZm93bCxmb3dsZXIsZm93bGVyeSxmb3dsaW5nLGZveCxmb3hiYW5lLGZveGNob3AsZm94ZXIsZm94ZXJ5LGZveGZlZXQsZm94ZmlzaCxmb3hob2xlLGZveGlseSxmb3hpbmcsZm94aXNoLGZveGxpa2UsZm94c2hpcCxmb3hza2luLGZveHRhaWwsZm94d29vZCxmb3h5LGZveSxmb3lhaXRlLGZveWJvYXQsZm95ZXIsZm96eSxmcmEsZnJhYixmcmFiYml0LGZyYWJvdXMsZnJhY2FzLGZyYWNoZSxmcmFjayxmcmFjdGVkLGZyYWUsZnJhZ2hhbixmcmFnaWxlLGZyYWlkLGZyYWlrLGZyYWlsLGZyYWlsbHksZnJhaWx0eSxmcmFpc2UsZnJhaXNlcixmcmFtZSxmcmFtZWEsZnJhbWVkLGZyYW1lcixmcmFtaW5nLGZyYW1taXQsZnJhbmMsZnJhbmNvLGZyYW5rLGZyYW5rZXIsZnJhbmtseSxmcmFudGljLGZyYW56eSxmcmFwLGZyYXBwZSxmcmFzY28sZnJhc2UsZnJhc2llcixmcmFzcyxmcmF0LGZyYXRjaCxmcmF0Y2h5LGZyYXRlcixmcmF0ZXJ5LGZyYXRyeSxmcmF1ZCxmcmF1Z2h0LGZyYXduLGZyYXhpbixmcmF5LGZyYXllZCxmcmF5aW5nLGZyYXluLGZyYXplLGZyYXplcixmcmF6aWwsZnJhenpsZSxmcmVhayxmcmVha3ksZnJlYW0sZnJlYXRoLGZyZWNrLGZyZWNrZW4sZnJlY2tldCxmcmVja2xlLGZyZWNrbHksZnJlZSxmcmVlZCxmcmVlZG9tLGZyZWVpbmcsZnJlZWlzaCxmcmVlbHksZnJlZW1hbixmcmVlcixmcmVldCxmcmVldHksZnJlZXdheSxmcmVlemUsZnJlZXplcixmcmVpZ2h0LGZyZWlyLGZyZWl0LGZyZWl0eSxmcmVtZCxmcmVtZGx5LGZyZW5hbCxmcmVuYXRlLGZyZW51bSxmcmVuenksZnJlc2NvLGZyZXNoLGZyZXNoZW4sZnJlc2hldCxmcmVzaGx5LGZyZXNuZWwsZnJlc25vLGZyZXQsZnJldGZ1bCxmcmV0dCxmcmV0dGUsZnJldHRlZCxmcmV0dGVyLGZyZXR0eSxmcmV0dW0sZnJpYWJsZSxmcmlhbmQsZnJpYXIsZnJpYXJseSxmcmlhcnksZnJpYixmcmliYmxlLGZyaWJieSxmcmllZCxmcmllbmQsZnJpZXIsZnJpZXplLGZyaWV6ZXIsZnJpZXp5LGZyaWcsZnJpZ2F0ZSxmcmlnZ2xlLGZyaWdodCxmcmlnaHR5LGZyaWdpZCxmcmlqb2wsZnJpa2UsZnJpbGwsZnJpbGxlZCxmcmlsbGVyLGZyaWxseSxmcmltLGZyaW5nZSxmcmluZ2VkLGZyaW5neSxmcmlzY2EsZnJpc2ssZnJpc2tlcixmcmlza2V0LGZyaXNreSxmcmlzb24sZnJpc3QsZnJpc3VyZSxmcml0LGZyaXRoLGZyaXR0LGZyaXR0ZXIsZnJpdm9sLGZyaXhpb24sZnJpeixmcml6ZSxmcml6ZXIsZnJpenosZnJpenplcixmcml6emxlLGZyaXp6bHksZnJpenp5LGZybyxmcm9jayxmcm9lLGZyb2csZnJvZ2JpdCxmcm9nZXllLGZyb2dnZWQsZnJvZ2d5LGZyb2dsZWcsZnJvZ2xldCxmcm9nbWFuLGZyb2lzZSxmcm9saWMsZnJvbSxmcm9uZCxmcm9uZGVkLGZyb250LGZyb250YWQsZnJvbnRhbCxmcm9udGVkLGZyb250ZXIsZnJvb20sZnJvcmUsZnJvcnksZnJvc2gsZnJvc3QsZnJvc3RlZCxmcm9zdGVyLGZyb3N0eSxmcm90LGZyb3RoLGZyb3RoZXIsZnJvdGh5LGZyb3R0b24sZnJvdWdoLGZyb3VnaHksZnJvdW5jZSxmcm93LGZyb3dhcmQsZnJvd2VyLGZyb3dsLGZyb3duLGZyb3duZXIsZnJvd255LGZyb3dzdCxmcm93c3R5LGZyb3d5LGZyb3d6ZSxmcm93emx5LGZyb3d6eSxmcm96ZSxmcm96ZW4sZnJ1Y3RlZCxmcnVnYWwsZnJ1Z2dhbixmcnVpdCxmcnVpdGVkLGZydWl0ZXIsZnJ1aXR5LGZydW1wLGZydW1wbGUsZnJ1bXB5LGZydXNoLGZydXN0dW0sZnJ1dGlmeSxmcnksZnJ5ZXIsZnUsZnViLGZ1YmJ5LGZ1YnN5LGZ1Y2F0ZSxmdWNoc2luLGZ1Y2ksZnVjb2lkLGZ1Y29zYW4sZnVjb3NlLGZ1Y291cyxmdWN1cyxmdWQsZnVkZGxlLGZ1ZGRsZXIsZnVkZXIsZnVkZ2UsZnVkZ2VyLGZ1ZGd5LGZ1ZWwsZnVlbGVyLGZ1ZXJ0ZSxmdWZmLGZ1ZmZ5LGZ1Z2FsLGZ1Z2FsbHksZnVnZ3ksZnVnaWVudCxmdWdsZSxmdWdsZXIsZnVndSxmdWd1ZSxmdWd1aXN0LGZ1aWRoaXIsZnVqaSxmdWxjcmFsLGZ1bGNydW0sZnVsZmlsbCxmdWxnZW50LGZ1bGdpZCxmdWxnaWRlLGZ1bGdvcixmdWxoYW0sZnVsayxmdWxsLGZ1bGxhbSxmdWxsZXIsZnVsbGVyeSxmdWxsaW5nLGZ1bGxpc2gsZnVsbG9tLGZ1bGx5LGZ1bG1hcixmdWxtaW5lLGZ1bHNvbWUsZnVsdGgsZnVsdmVuZSxmdWx2aWQsZnVsdm91cyxmdWx3YSxmdWx5aWUsZnVsemllLGZ1bSxmdW1hZG8sZnVtYWdlLGZ1bWFyaWMsZnVtYXJ5bCxmdW1ibGUsZnVtYmxlcixmdW1lLGZ1bWVyLGZ1bWV0LGZ1bWV0dGUsZnVtaWx5LGZ1bWluZyxmdW1vc2UsZnVtb3VzLGZ1bXksZnVuLGZ1bmQsZnVuZGFsLGZ1bmRlZCxmdW5kZXIsZnVuZGksZnVuZGljLGZ1bmRzLGZ1bmR1cyxmdW5lcmFsLGZ1bmVzdCxmdW5nYWwsZnVuZ2F0ZSxmdW5naSxmdW5naWFuLGZ1bmdpYyxmdW5naW4sZnVuZ28sZnVuZ29pZCxmdW5nb3NlLGZ1bmdvdXMsZnVuZ3VzLGZ1bmd1c3ksZnVuaWNsZSxmdW5pcyxmdW5rLGZ1bmtlcixmdW5reSxmdW5uZWwsZnVubmlseSxmdW5ueSxmdW5vcmksZnVudCxmdXIsZnVyYWwsZnVyYW4sZnVyYXphbixmdXJiaXNoLGZ1cmNhLGZ1cmNhbCxmdXJjYXRlLGZ1cmN1bGEsZnVyZGVsLGZ1cmZ1cixmdXJpYW50LGZ1cmllZCxmdXJpZnksZnVyaWwsZnVyaWxpYyxmdXJpb3NhLGZ1cmlvc28sZnVyaW91cyxmdXJpc29uLGZ1cmwsZnVybGVyLGZ1cmxlc3MsZnVybG9uZyxmdXJuYWNlLGZ1cm5hZ2UsZnVybmVyLGZ1cm5pc2gsZnVyb2ljLGZ1cm9pZCxmdXJvaW4sZnVyb2xlLGZ1cm9yLGZ1cm9yZSxmdXJwaHksZnVycmVkLGZ1cnJpZXIsZnVycmlseSxmdXJyaW5nLGZ1cnJvdyxmdXJyb3d5LGZ1cnJ5LGZ1cnRoZXIsZnVydGl2ZSxmdXJ5LGZ1cnlsLGZ1cnplLGZ1cnplZCxmdXJ6ZXJ5LGZ1cnp5LGZ1c2FpbixmdXNhdGUsZnVzYyxmdXNjaW4sZnVzY291cyxmdXNlLGZ1c2VkLGZ1c2VlLGZ1c2h0LGZ1c2libGUsZnVzaWJseSxmdXNpbCxmdXNpbGx5LGZ1c2lvbixmdXNvaWQsZnVzcyxmdXNzZXIsZnVzc2lmeSxmdXNzaWx5LGZ1c3NvY2ssZnVzc3ksZnVzdCxmdXN0ZWUsZnVzdGV0LGZ1c3RpYW4sZnVzdGljLGZ1c3RpbHksZnVzdGluLGZ1c3RsZSxmdXN0eSxmdXN1bWEsZnVzdXJlLGZ1dCxmdXRjaGVsLGZ1dGUsZnV0aG9yYyxmdXRpbGUsZnV0dG9jayxmdXR1cmFsLGZ1dHVyZSxmdXR1cmljLGZ1dHdhLGZ1eWUsZnV6ZSxmdXp6LGZ1enppbHksZnV6enksZnlrZSxmeWxmb3QsZnlyZCxnLGdhLGdhYixnYWJiYXJkLGdhYmJlcixnYWJibGUsZ2FiYmxlcixnYWJicm8sZ2FiYnksZ2FiZWxsZSxnYWJnYWIsZ2FiaSxnYWJpb24sZ2FibGUsZ2FibGV0LGdhYmxvY2ssZ2FieSxnYWQsZ2FkYmVlLGdhZGJ1c2gsZ2FkZGVkLGdhZGRlcixnYWRkaSxnYWRkaW5nLGdhZGRpc2gsZ2FkZSxnYWRmbHksZ2FkZ2UsZ2FkZ2VyLGdhZGdldCxnYWRpZCxnYWRsaW5nLGdhZG1hbixnYWRvaWQsZ2Fkcm9vbixnYWRzbWFuLGdhZHVpbixnYWR3YWxsLGdhZW4sZ2FldCxnYWZmLGdhZmZlLGdhZmZlcixnYWZmbGUsZ2FnLGdhZ2F0ZSxnYWdlLGdhZ2VlLGdhZ2VpdGUsZ2FnZXIsZ2FnZ2VyLGdhZ2dlcnksZ2FnZ2xlLGdhZ2dsZXIsZ2FnbWFuLGdhZ29yLGdhZ3Jvb3QsZ2Fobml0ZSxnYWlhc3NhLGdhaWV0eSxnYWlseSxnYWluLGdhaW5hZ2UsZ2FpbmUsZ2FpbmVyLGdhaW5mdWwsZ2FpbmluZyxnYWlubHksZ2FpbnMsZ2FpbnNheSxnYWluc2V0LGdhaW5zdCxnYWlyLGdhaXQsZ2FpdGVkLGdhaXRlcixnYWl0aW5nLGdhaXplLGdhaixnYWwsZ2FsYSxnYWxhaCxnYWxhbmFzLGdhbGFuZ2EsZ2FsYW50LGdhbGFueSxnYWxhdGVhLGdhbGF4eSxnYWxiYW4sZ2FsZSxnYWxlYSxnYWxlYWdlLGdhbGVhdGUsZ2FsZWUsZ2FsZWVueSxnYWxlaWQsZ2FsZW5hLGdhbGVuaWMsZ2FsZW9pZCxnYWxlcmEsZ2FsZXJ1bSxnYWxlcnVzLGdhbGV0LGdhbGV5LGdhbGdhbCxnYWxpLGdhbGlsZWUsZ2FsaW90LGdhbGlwb3QsZ2FsbCxnYWxsYSxnYWxsYWgsZ2FsbGFudCxnYWxsYXRlLGdhbGxlZCxnYWxsZWluLGdhbGxlb24sZ2FsbGVyLGdhbGxlcnksZ2FsbGV0LGdhbGxleSxnYWxsZmx5LGdhbGxpYyxnYWxsaW5lLGdhbGxpbmcsZ2FsbGl1bSxnYWxsbnV0LGdhbGxvbixnYWxsb29uLGdhbGxvcCxnYWxsb3VzLGdhbGxvd3MsZ2FsbHksZ2Fsb290LGdhbG9wLGdhbG9yZSxnYWxvc2gsZ2FscCxnYWx0LGdhbHVtcGgsZ2FsdXRoLGdhbHlhYyxnYWx5YWssZ2FtLGdhbWFoZSxnYW1hc2lkLGdhbWIsZ2FtYmEsZ2FtYmFkZSxnYW1iYWRvLGdhbWJhbmcsZ2FtYmVlcixnYW1iZXQsZ2FtYmlhLGdhbWJpZXIsZ2FtYmlzdCxnYW1iaXQsZ2FtYmxlLGdhbWJsZXIsZ2FtYm9nZSxnYW1ib2wsZ2FtYnJlbCxnYW1lLGdhbWViYWcsZ2FtZWZ1bCxnYW1lbHksZ2FtZW5lLGdhbWV0YWwsZ2FtZXRlLGdhbWV0aWMsZ2FtaWMsZ2FtaWx5LGdhbWluLGdhbWluZyxnYW1tYSxnYW1tZXIsZ2FtbWljayxnYW1tb2NrLGdhbW1vbixnYW1teSxnYW1vbnQsZ2Ftb3JpLGdhbXAsZ2FtdXQsZ2FteSxnYW4sZ2FuYW0sZ2FuY2gsZ2FuZGVyLGdhbmR1bCxnYW5kdW0sZ2FuZSxnYW5lZixnYW5nLGdhbmdhLGdhbmdhbixnYW5nYXZhLGdhbmdkb20sZ2FuZ2UsZ2FuZ2VyLGdhbmdpbmcsZ2FuZ2lzbSxnYW5nbGlhLGdhbmdseSxnYW5nbWFuLGdhbmdyZWwsZ2FuZ3VlLGdhbmd3YXksZ2FuamEsZ2FubmVyLGdhbm5ldCxnYW5vaWQsZ2Fub2luLGdhbm9zaXMsZ2Fuc2VsLGdhbnNleSxnYW5zeSxnYW50LGdhbnRhLGdhbnRhbmcsZ2FudGxldCxnYW50b24sZ2FudHJ5LGdhbnRzbCxnYW56YSxnYW56aWUsZ2FvbCxnYW9sZXIsZ2FwLGdhcGEsZ2FwZSxnYXBlcixnYXBlcyxnYXBpbmcsZ2FwbyxnYXBweSxnYXB5LGdhcixnYXJhLGdhcmFkLGdhcmFnZSxnYXJhbmNlLGdhcmF2YSxnYXJhd2ksZ2FyYixnYXJiYWdlLGdhcmJlbCxnYXJiZWxsLGdhcmJpbGwsZ2FyYmxlLGdhcmJsZXIsZ2FyYm9pbCxnYXJidXJlLGdhcmNlLGdhcmRhbnQsZ2FyZGVlbixnYXJkZW4sZ2FyZGVueSxnYXJkeSxnYXJlLGdhcmVoLGdhcmV0dGEsZ2FyZmlzaCxnYXJnZXQsZ2FyZ2V0eSxnYXJnbGUsZ2FyZ29sLGdhcmlhbCxnYXJpYmEsZ2FyaXNoLGdhcmxhbmQsZ2FybGUsZ2FybGljLGdhcm1lbnQsZ2FybixnYXJuZWwsZ2FybmVyLGdhcm5ldCxnYXJuZXRzLGdhcm5ldHQsZ2FybmV0eixnYXJuaWNlLGdhcm5pZWMsZ2FybmlzaCxnYXJvbyxnYXJyYWZhLGdhcnJhbixnYXJyZXQsZ2Fycm90LGdhcnJvdGUsZ2FycnVwYSxnYXJzZSxnYXJzaWwsZ2Fyc3RvbixnYXJ0ZW4sZ2FydGVyLGdhcnRoLGdhcnVtLGdhcnZleSxnYXJ2b2NrLGdhcyxnYXNiYWcsZ2FzZWl0eSxnYXNlb3VzLGdhc2gsZ2FzaGVzLGdhc2hmdWwsZ2FzaGx5LGdhc2h5LGdhc2lmeSxnYXNrZXQsZ2Fza2luLGdhc2tpbmcsZ2Fza2lucyxnYXNsZXNzLGdhc2xpdCxnYXNsb2NrLGdhc21hbixnYXNwLGdhc3BlcixnYXNwaW5nLGdhc3B5LGdhc3NlcixnYXNzaW5nLGdhc3N5LGdhc3QsZ2FzdGVyLGdhc3RyYWwsZ2FzdHJpYyxnYXN0cmluLGdhdCxnYXRhLGdhdGNoLGdhdGUsZ2F0ZWFkbyxnYXRlYWdlLGdhdGVkLGdhdGVtYW4sZ2F0ZXIsZ2F0ZXdheSxnYXRoZXIsZ2F0aW5nLGdhdG9yLGdhdHRlcixnYXUsZ2F1YixnYXVieSxnYXVjaGUsZ2F1ZCxnYXVkZXJ5LGdhdWRmdWwsZ2F1ZGlseSxnYXVkeSxnYXVmZXIsZ2F1ZmZlcixnYXVmZnJlLGdhdWZyZSxnYXVnZSxnYXVnZXIsZ2F1Z2luZyxnYXVsaW4sZ2F1bHQsZ2F1bHRlcixnYXVtLGdhdW1pc2gsZ2F1bXksZ2F1bixnYXVudCxnYXVudGVkLGdhdW50bHksZ2F1bnRyeSxnYXVudHksZ2F1cCxnYXVwdXMsZ2F1cixnYXVzLGdhdXNzLGdhdXN0ZXIsZ2F1dCxnYXV6ZSxnYXV6aWx5LGdhdXp5LGdhdmFsbCxnYXZlLGdhdmVsLGdhdmVsZXIsZ2F2aWFsLGdhdm90dGUsZ2F2eXV0aSxnYXcsZ2F3YnksZ2F3Y2llLGdhd2ssZ2F3a2lseSxnYXdraXNoLGdhd2t5LGdhd20sZ2F3bixnYXduZXksZ2F3c2llLGdheSxnYXlhbCxnYXlhdHJpLGdheWJpbmUsZ2F5Y2F0LGdheWlzaCxnYXltZW50LGdheW5lc3MsZ2F5c29tZSxnYXl5b3UsZ2F6LGdhemFibyxnYXplLGdhemVibyxnYXplZSxnYXplbCxnYXplbGxlLGdhemVyLGdhemV0dGUsZ2F6aSxnYXppbmcsZ2F6b24sZ2F6eSxnZSxnZWFsLGdlYW4sZ2VhcixnZWFyYm94LGdlYXJlZCxnZWFyaW5nLGdlYXJtYW4sZ2VhcnNldCxnZWFzZSxnZWFzb24sZ2VhdCxnZWJhbmcsZ2ViYW5nYSxnZWJiaWUsZ2VidXIsZ2VjayxnZWNrbyxnZWNrb2lkLGdlZCxnZWRhY2t0LGdlZGRlcixnZWRlY2t0LGdlZHJpdGUsZ2VlLGdlZWJvbmcsZ2VlYnVuZyxnZWVqZWUsZ2VlayxnZWVsYmVjLGdlZXJhaCxnZWVzdCxnZWV0LGdlZXplcixnZWdnLGdlZ2dlZSxnZWdnZXIsZ2VnZ2VyeSxnZWluLGdlaXJhLGdlaXNoYSxnZWlzb24sZ2VpdGppZSxnZWwsZ2VsYWJsZSxnZWxhZGEsZ2VsYXRpbixnZWxkLGdlbGRhbnQsZ2VsZGVyLGdlbGRpbmcsZ2VsaWQsZ2VsaWRseSxnZWxpbGFoLGdlbGwsZ2VsbHksZ2Vsb25nLGdlbG9zZSxnZWxvc2luLGdlbHQsZ2VtLGdlbWF1dmUsZ2VtZWwsZ2VtZWxlZCxnZW1sZXNzLGdlbWxpa2UsZ2VtbWEsZ2VtbWFlLGdlbW1hdGUsZ2VtbWVyLGdlbW1pbHksZ2VtbW9pZCxnZW1tdWxhLGdlbW11bGUsZ2VtbXksZ2Vtb3QsZ2Vtc2JvayxnZW11bCxnZW11dGksZ2Vtd29yayxnZW4sZ2VuYSxnZW5hbCxnZW5hcHAsZ2VuYXJjaCxnZW5kZXIsZ2VuZSxnZW5lYXIsZ2VuZWF0LGdlbmVraSxnZW5lcCxnZW5lcmEsZ2VuZXJhbCxnZW5lcmljLGdlbmVzaWMsZ2VuZXNpcyxnZW5ldCxnZW5ldGljLGdlbmV2YSxnZW5pYWwsZ2VuaWFuLGdlbmljLGdlbmllLGdlbmlpLGdlbmluLGdlbmlvbixnZW5pcCxnZW5pcGEsZ2VuaXBhcCxnZW5pc3RhLGdlbml0YWwsZ2VuaXRvcixnZW5pdXMsZ2VuaXphaCxnZW5vZXNlLGdlbm9tLGdlbm9tZSxnZW5vbWljLGdlbm9zLGdlbnJlLGdlbnJvLGdlbnMsZ2Vuc29uLGdlbnQsZ2VudGVlbCxnZW50ZXMsZ2VudGlhbixnZW50aWxlLGdlbnRsZSxnZW50bHksZ2VudG1hbixnZW50cnksZ2VudHksZ2VudSxnZW51YSxnZW51YWwsZ2VudWluZSxnZW51cyxnZW55cyxnZW8sZ2VvYmlvcyxnZW9kYWwsZ2VvZGUsZ2VvZGVzeSxnZW9kZXRlLGdlb2RpYyxnZW9kaXN0LGdlb2R1Y2ssZ2VvZm9ybSxnZW9nZW55LGdlb2dvbnksZ2VvaWQsZ2VvaWRhbCxnZW9sb2d5LGdlb21hbHksZ2VvbWFudCxnZW9teWlkLGdlb25vbWEsZ2VvcG9ueSxnZW9yYW1hLGdlb3JnaWMsZ2Vvc2lkLGdlb3NpZGUsZ2VvdGF4eSxnZW90aWMsZ2VvdHksZ2VyLGdlcmFoLGdlcmFuaWMsZ2VyYW55bCxnZXJhdGUsZ2VyYXRlZCxnZXJhdGljLGdlcmF0eSxnZXJiLGdlcmJlLGdlcmJpbCxnZXJjcm93LGdlcmVmYSxnZXJlbmRhLGdlcmVudCxnZXJlbnVrLGdlcmltLGdlcmlwLGdlcm0sZ2VybWFsLGdlcm1hbixnZXJtYW5lLGdlcm1lbixnZXJtaW4sZ2VybWluYSxnZXJtaW5nLGdlcm1vbixnZXJtdWxlLGdlcm15LGdlcm5pdHosZ2Vyb250LGdlcm9udG8sZ2VycyxnZXJzdW0sZ2VydW5kLGdlcnVzaWEsZ2VydmFvLGdlc2l0aCxnZXNuaW5nLGdlc3NvLGdlc3QsZ2VzdGFudCxnZXN0YXRlLGdlc3RlLGdlc3RlZCxnZXN0ZW4sZ2VzdGljLGdlc3Rpb24sZ2VzdHVyZSxnZXQsZ2V0YSxnZXRhaCxnZXRhd2F5LGdldGhlcixnZXRsaW5nLGdldHRlcixnZXR0aW5nLGdldHVwLGdldW0sZ2V3Z2F3LGdld2dhd3ksZ2V5LGdleWFuLGdleXNlcixnZXosZ2hhZmlyLGdoYWlzdCxnaGFsdmEsZ2hhcmlhbCxnaGFybmFvLGdoYXJyeSxnaGFzdGx5LGdoYXQsZ2hhdHRpLGdoYXR3YWwsZ2hhemksZ2hhemlzbSxnaGViZXRhLGdoZWUsZ2hlbGVlbSxnaGVya2luLGdoZXR0aSxnaGV0dG8sZ2hpeml0ZSxnaG9vbSxnaG9zdCxnaG9zdGVyLGdob3N0bHksZ2hvc3R5LGdob3VsLGdocnVzaCxnaHVycnksZ2lhbnQsZ2lhbnRseSxnaWFudHJ5LGdpYXJkaWEsZ2lhcnJhLGdpYXJyZSxnaWIsZ2liYXJvLGdpYmJhbHMsZ2liYmVkLGdpYmJlcixnaWJiZXQsZ2liYmxlcyxnaWJib24sZ2liYm9zZSxnaWJib3VzLGdpYmJ1cyxnaWJieSxnaWJlLGdpYmVsLGdpYmVyLGdpYmluZyxnaWJsZWgsZ2libGV0LGdpYmxldHMsZ2lidXMsZ2lkLGdpZGRhcCxnaWRkZWEsZ2lkZGlmeSxnaWRkaWx5LGdpZGR5LGdpZGdlZSxnaWUsZ2llZCxnaWVuLGdpZixnaWZ0LGdpZnRlZCxnaWZ0aWUsZ2lnLGdpZ2JhY2ssZ2lnZXJpYSxnaWdmdWwsZ2lnZ2VyLGdpZ2dpc2gsZ2lnZ2l0LGdpZ2dsZSxnaWdnbGVyLGdpZ2dseSxnaWdsZXQsZ2lnbG90LGdpZ21hbixnaWduYXRlLGdpZ29sbyxnaWdvdCxnaWdzbWFuLGdpZ3N0ZXIsZ2lndHJlZSxnaWd1bnUsZ2lsYmVydCxnaWxkLGdpbGRlZCxnaWxkZW4sZ2lsZGVyLGdpbGRpbmcsZ2lsZ3V5LGdpbGlhLGdpbGltLGdpbGwsZ2lsbGVkLGdpbGxlcixnaWxsaWUsZ2lsbGluZyxnaWxseSxnaWxvLGdpbHB5LGdpbHNlLGdpbHQsZ2lsdGN1cCxnaW0sZ2ltYmFsLGdpbWJsZSxnaW1lbCxnaW1sZXQsZ2ltbGV0eSxnaW1tYWwsZ2ltbWVyLGdpbW1pY2ssZ2ltcCxnaW1wZWQsZ2ltcGVyLGdpbXBpbmcsZ2luLGdpbmcsZ2luZ2VyLGdpbmdlcnksZ2luZ2hhbSxnaW5naWxpLGdpbmdpdmEsZ2luayxnaW5rZ28sZ2lubmVkLGdpbm5lcixnaW5uZXJzLGdpbm5lcnksZ2lubmV5LGdpbm5pbmcsZ2lubmxlLGdpbm55LGdpbnNlbmcsZ2lud2FyZCxnaW8sZ2lwLGdpcG9uLGdpcHBlcixnaXBzZXIsZ2lwc2lyZSxnaXJhZmZlLGdpcmFzb2wsZ2lyYmEsZ2lyZCxnaXJkZXIsZ2lyZGluZyxnaXJkbGUsZ2lyZGxlcixnaXJsLGdpcmxlZW4sZ2lybGVyeSxnaXJsaWUsZ2lybGluZyxnaXJsaXNoLGdpcmxpc20sZ2lybHksZ2lybixnaXJueSxnaXJvLGdpcnIsZ2lyc2UsZ2lyc2gsZ2lyc2xlLGdpcnQsZ2lydGgsZ2lzYXJtZSxnaXNoLGdpc2xhLGdpc2xlcixnaXN0LGdpdCxnaXRhbGluLGdpdGgsZ2l0b25pbixnaXRveGluLGdpdHRlcm4sZ2l0dGl0aCxnaXZlLGdpdmVuLGdpdmVyLGdpdmV5LGdpdmluZyxnaXp6LGdpenphcmQsZ2l6emVuLGdpenplcm4sZ2xhY2UsZ2xhY2VlZCxnbGFjaWFsLGdsYWNpZXIsZ2xhY2lzLGdsYWNrLGdsYWQsZ2xhZGRlbixnbGFkZG9uLGdsYWRkeSxnbGFkZSxnbGFkZXllLGdsYWRmdWwsZ2xhZGlmeSxnbGFkaWksZ2xhZGl1cyxnbGFkbHksZ2xhZHksZ2xhZ2EsZ2xhaWV1bCxnbGFpayxnbGFpa2V0LGdsYWlyLGdsYWlyeSxnbGFpdmUsZ2xhaXZlZCxnbGFrZWQsZ2xha3ksZ2xhbSxnbGFtb3VyLGdsYW5jZSxnbGFuY2VyLGdsYW5kLGdsYW5kZXMsZ2xhbnMsZ2xhcixnbGFyZSxnbGFyaWx5LGdsYXJpbmcsZ2xhcnJ5LGdsYXJ5LGdsYXNoYW4sZ2xhc3MsZ2xhc3NlbixnbGFzc2VyLGdsYXNzZXMsZ2xhc3NpZSxnbGFzc3ksZ2xhdWNpbixnbGF1bSxnbGF1cixnbGF1cnksZ2xhdmVyLGdsYXplLGdsYXplZCxnbGF6ZW4sZ2xhemVyLGdsYXppZXIsZ2xhemlseSxnbGF6aW5nLGdsYXp5LGdsZWFtLGdsZWFteSxnbGVhbixnbGVhbmVyLGdsZWFyeSxnbGViYSxnbGViYWwsZ2xlYmUsZ2xlYm91cyxnbGVkZSxnbGVkeSxnbGVlLGdsZWVkLGdsZWVmdWwsZ2xlZWssZ2xlZW1hbixnbGVldCxnbGVldHksZ2xlZyxnbGVnbHksZ2xlbixnbGVub2lkLGdsZW50LGdsZXlkZSxnbGlhLGdsaWFkaW4sZ2xpYWwsZ2xpYixnbGlibHksZ2xpZGRlcixnbGlkZSxnbGlkZXIsZ2xpZGluZyxnbGlmZixnbGltZSxnbGltbWVyLGdsaW1wc2UsZ2xpbmssZ2xpbnQsZ2xpb21hLGdsaW9zYSxnbGlvc2lzLGdsaXJpbmUsZ2xpc2ssZ2xpc2t5LGdsaXN0ZW4sZ2xpc3RlcixnbGl0dGVyLGdsb2FtLGdsb2F0LGdsb2F0ZXIsZ2xvYmFsLGdsb2JhdGUsZ2xvYmUsZ2xvYmVkLGdsb2JpbixnbG9ib2lkLGdsb2Jvc2UsZ2xvYm91cyxnbG9idWxlLGdsb2J5LGdsb2NoaWQsZ2xvY2hpcyxnbG9lYSxnbG9lYWwsZ2xvbSxnbG9tZSxnbG9tbW94LGdsb211cyxnbG9ub2luLGdsb29tLGdsb29tdGgsZ2xvb215LGdsb3AsZ2xvcHBlbixnbG9yLGdsb3JlLGdsb3JpZnksZ2xvcnksZ2xvc3MsZ2xvc3NhLGdsb3NzYWwsZ2xvc3NlZCxnbG9zc2VyLGdsb3NzaWMsZ2xvc3N5LGdsb3N0LGdsb3R0YWwsZ2xvdHRpYyxnbG90dGlkLGdsb3R0aXMsZ2xvdXQsZ2xvdmUsZ2xvdmVyLGdsb3ZleSxnbG92aW5nLGdsb3csZ2xvd2VyLGdsb3dmbHksZ2xvd2luZyxnbG95LGdsb3plLGdsb3ppbmcsZ2x1YixnbHVjYXNlLGdsdWNpZCxnbHVjaWRlLGdsdWNpbmEsZ2x1Y2luZSxnbHVjayxnbHVjb3NlLGdsdWUsZ2x1ZWQsZ2x1ZXBvdCxnbHVlcixnbHVleSxnbHVnLGdsdWlzaCxnbHVtLGdsdW1hLGdsdW1hbCxnbHVtZSxnbHVtbHksZ2x1bW15LGdsdW1vc2UsZ2x1bXAsZ2x1bXB5LGdsdW5jaCxnbHVzaWQsZ2x1c2lkZSxnbHV0LGdsdXRjaCxnbHV0ZWFsLGdsdXRlbixnbHV0ZXVzLGdsdXRpbixnbHV0b2lkLGdsdXRvc2UsZ2x1dHRlcixnbHV0dG9uLGdseWNpZCxnbHljaWRlLGdseWNpbmUsZ2x5Y29sLGdseWNvc2UsZ2x5Y3lsLGdseW94YWwsZ2x5b3hpbSxnbHlveHlsLGdseXBoLGdseXBoaWMsZ2x5cHRpYyxnbHlzdGVyLGduYWJibGUsZ25hcixnbmFybCxnbmFybGVkLGduYXJseSxnbmFzaCxnbmF0LGduYXRoYWwsZ25hdGhpYyxnbmF0dGVyLGduYXR0eSxnbmF3LGduYXdlcixnbmF3aW5nLGduYXduLGduZWlzcyxnbmVpc3N5LGdub21lLGdub21lZCxnbm9taWMsZ25vbWlkZSxnbm9taXNoLGdub21pc3QsZ25vbW9uLGdub3Npcyxnbm9zdGljLGdudSxnbyxnb2EsZ29hZCxnb2FmLGdvYWwsZ29hbGFnZSxnb2FsZWUsZ29hbGllLGdvYW5uYSxnb2F0LGdvYXRlZSxnb2F0ZWVkLGdvYXRpc2gsZ29hdGx5LGdvYXR5LGdvYXZlLGdvYixnb2JhY2ssZ29iYW4sZ29iYW5nLGdvYmJlLGdvYmJlcixnb2JiZXQsZ29iYmluLGdvYmJpbmcsZ29iYmxlLGdvYmJsZXIsZ29iYnksZ29iZWxpbixnb2JpLGdvYmlpZCxnb2Jpb2lkLGdvYmxldCxnb2JsaW4sZ29ibGluZSxnb2JvLGdvYm9ueSxnb2J1cnJhLGdvYnksZ29jYXJ0LGdvZCxnb2RkYXJkLGdvZGRlZCxnb2RkZXNzLGdvZGRpemUsZ29kZSxnb2RldCxnb2RoZWFkLGdvZGhvb2QsZ29ka2luLGdvZGxlc3MsZ29kbGV0LGdvZGxpa2UsZ29kbGlseSxnb2RsaW5nLGdvZGx5LGdvZG93bixnb2RwYXBhLGdvZHNlbmQsZ29kc2hpcCxnb2Rzb24sZ29kd2l0LGdvZWR1Y2ssZ29lbCxnb2VsaXNtLGdvZXIsZ29lcyxnb2V0aWEsZ29ldGljLGdvZXR5LGdvZmYsZ29mZmVyLGdvZmZsZSxnb2csZ29nZ2EsZ29nZ2FuLGdvZ2dsZSxnb2dnbGVkLGdvZ2dsZXIsZ29nZ2x5LGdvZ2xldCxnb2dvLGdvaSxnb2luZyxnb2l0Y2hvLGdvaXRlcixnb2l0cmFsLGdvbCxnb2xhLGdvbGFjaCxnb2xhZGFyLGdvbGQsZ29sZGJ1Zyxnb2xkY3VwLGdvbGRlbixnb2xkZXIsZ29sZGllLGdvbGRpbixnb2xkaXNoLGdvbGR0aXQsZ29sZHksZ29sZWUsZ29sZW0sZ29sZixnb2xmZG9tLGdvbGZlcixnb2xpLGdvbGlhcmQsZ29saWF0aCxnb2xsYW5kLGdvbGxhcixnb2xseSxnb2xvZSxnb2xwZSxnb21hcmksZ29tYXJ0LGdvbWF2ZWwsZ29tYmF5LGdvbWJlZW4sZ29tZXIsZ29tZXJhbCxnb21sYWgsZ29tdXRpLGdvbixnb25hZCxnb25hZGFsLGdvbmFkaWMsZ29uYWdyYSxnb25ha2llLGdvbmFsLGdvbmFwb2QsZ29uZGFuZyxnb25kaXRlLGdvbmRvbGEsZ29uZSxnb25lcixnb25nLGdvbmdtYW4sZ29uaWEsZ29uaWFjLGdvbmlhbCxnb25pYWxlLGdvbmlkLGdvbmlkaWEsZ29uaWRpYyxnb25pbWljLGdvbmlvbixnb25pdGlzLGdvbml1bSxnb25uZSxnb255LGdvbnlzLGdvbyxnb29iZXIsZ29vZCxnb29kaW5nLGdvb2Rpc2gsZ29vZGx5LGdvb2RtYW4sZ29vZHMsZ29vZHksZ29vZixnb29mZXIsZ29vZmlseSxnb29meSxnb29nbHksZ29vZ29sLGdvb2d1bCxnb29rLGdvb2wsZ29vbGFoLGdvb2xzLGdvb21hLGdvb24sZ29vbmRpZSxnb29uaWUsZ29vc2UsZ29vc2VyeSxnb29zaXNoLGdvb3N5LGdvcGhlcixnb3B1cmEsZ29yLGdvcmEsZ29yYWNjbyxnb3JhbCxnb3Jhbixnb3JiLGdvcmJhbCxnb3JiZXQsZ29yYmxlLGdvcmNlLGdvcmNvY2ssZ29yY3Jvdyxnb3JlLGdvcmVyLGdvcmV2YW4sZ29yZmx5LGdvcmdlLGdvcmdlZCxnb3JnZXIsZ29yZ2V0LGdvcmdsaW4sZ29yaGVuLGdvcmljLGdvcmlsbGEsZ29yaWx5LGdvcmluZyxnb3JsaW4sZ29ybG9pcyxnb3JtYXcsZ29ybWVkLGdvcnJhLGdvcnJhZixnb3JyeSxnb3JzZSxnb3JzZWRkLGdvcnN5LGdvcnksZ29zLGdvc2Fpbixnb3NjaGVuLGdvc2gsZ29zaGF3ayxnb3NsZXQsZ29zbGluZyxnb3Ntb3JlLGdvc3BlbCxnb3Nwb3J0LGdvc3Nhbixnb3NzYXJkLGdvc3NpcCxnb3NzaXB5LGdvc3Nvb24sZ29zc3ksZ290LGdvdGNoLGdvdGUsZ290aGl0ZSxnb3RyYSxnb3RyYWphLGdvdHRlbixnb3VhcmVlLGdvdWdlLGdvdWdlcixnb3Vqb24sZ291bGFzaCxnb3VtaSxnb3VwLGdvdXJhbWksZ291cmQsZ291cmRlLGdvdXJkeSxnb3VybWV0LGdvdXN0eSxnb3V0LGdvdXRpZnksZ291dGlseSxnb3V0aXNoLGdvdXR0ZSxnb3V0eSxnb3ZlLGdvdmVybixnb3dhbixnb3dkbmllLGdvd2YsZ293ZmVyLGdvd2ssZ293a2VkLGdvd2tpdCxnb3dsLGdvd24sZ293bmxldCxnb3dwZW4sZ295LGdveWltLGdveWluLGdveWxlLGdvemVsbCxnb3p6YXJkLGdyYSxncmFiLGdyYWJiZXIsZ3JhYmJsZSxncmFiZW4sZ3JhY2UsZ3JhY2VyLGdyYWNpbGUsZ3JhY2tsZSxncmFkLGdyYWRhbCxncmFkYXRlLGdyYWRkYW4sZ3JhZGUsZ3JhZGVkLGdyYWRlbHksZ3JhZGVyLGdyYWRpbixncmFkaW5lLGdyYWRpbmcsZ3JhZHVhbCxncmFkdXMsZ3JhZmYsZ3JhZmZlcixncmFmdCxncmFmdGVkLGdyYWZ0ZXIsZ3JhaGFtLGdyYWlsLGdyYWlsZXIsZ3JhaW4sZ3JhaW5lZCxncmFpbmVyLGdyYWlueSxncmFpcCxncmFpc3NlLGdyYWl0aCxncmFsbGljLGdyYW0sZ3JhbWEsZ3JhbWUsZ3JhbW1hcixncmFtbWUsZ3JhbXAsZ3JhbXBhLGdyYW1wdXMsZ3JhbmFkYSxncmFuYWdlLGdyYW5hcnksZ3JhbmF0ZSxncmFuY2gsZ3JhbmQsZ3JhbmRhbSxncmFuZGVlLGdyYW5kbHksZ3JhbmRtYSxncmFuZHBhLGdyYW5lLGdyYW5nZSxncmFuZ2VyLGdyYW5pdGUsZ3JhbmssZ3Jhbm5vbSxncmFubnksZ3Jhbm8sZ3Jhbm9zZSxncmFudCxncmFudGVlLGdyYW50ZXIsZ3JhbnRvcixncmFudWxhLGdyYW51bGUsZ3JhbnphLGdyYXBlLGdyYXBlZCxncmFwZXJ5LGdyYXBoLGdyYXBoaWMsZ3JhcGh5LGdyYXBpbmcsZ3JhcG5lbCxncmFwcGEsZ3JhcHBsZSxncmFweSxncmFzcCxncmFzcGVyLGdyYXNzLGdyYXNzZWQsZ3Jhc3NlcixncmFzc2V0LGdyYXNzeSxncmF0LGdyYXRlLGdyYXRlcixncmF0aGVyLGdyYXRpZnksZ3JhdGluZyxncmF0aXMsZ3JhdHRlbixncmF1cGVsLGdyYXZlLGdyYXZlZCxncmF2ZWwsZ3JhdmVseSxncmF2ZW4sZ3JhdmVyLGdyYXZpYyxncmF2aWQsZ3JhdmluZyxncmF2aXR5LGdyYXZ1cmUsZ3JhdnksZ3Jhd2xzLGdyYXksZ3JheWZseSxncmF5aXNoLGdyYXlsYWcsZ3JheWx5LGdyYXplLGdyYXplcixncmF6aWVyLGdyYXppbmcsZ3JlYXNlLGdyZWFzZXIsZ3JlYXN5LGdyZWF0LGdyZWF0ZW4sZ3JlYXRlcixncmVhdGx5LGdyZWF2ZSxncmVhdmVkLGdyZWF2ZXMsZ3JlYmUsZ3JlY2UsZ3JlZSxncmVlZCxncmVlZHksZ3JlZW4sZ3JlZW5lcixncmVlbmV5LGdyZWVubHksZ3JlZW50aCxncmVlbnVrLGdyZWVueSxncmVldCxncmVldGVyLGdyZWdhbCxncmVnYWxlLGdyZWdlLGdyZWdnbGUsZ3JlZ28sZ3JlaWdlLGdyZWluLGdyZWlzZW4sZ3JlbWlhbCxncmVtbGluLGdyZW5hZGUsZ3JldW5kLGdyZXcsZ3JleSxncmV5bHksZ3JpYmJsZSxncmljZSxncmlkLGdyaWRkbGUsZ3JpZGUsZ3JpZWNlLGdyaWVjZWQsZ3JpZWYsZ3JpZXZlLGdyaWV2ZWQsZ3JpZXZlcixncmlmZixncmlmZmUsZ3JpZmZpbixncmlmZm9uLGdyaWZ0LGdyaWZ0ZXIsZ3JpZyxncmlnbmV0LGdyaWdyaSxncmlrZSxncmlsbCxncmlsbGUsZ3JpbGxlZCxncmlsbGVyLGdyaWxzZSxncmltLGdyaW1hY2UsZ3JpbWUsZ3JpbWZ1bCxncmltaWx5LGdyaW1seSxncmltbWUsZ3JpbXAsZ3JpbXksZ3JpbixncmluY2gsZ3JpbmQsZ3JpbmRlcixncmluZGxlLGdyaW5nbyxncmlubmVyLGdyaW5ueSxncmlwLGdyaXBlLGdyaXBlcixncmlwaW5nLGdyaXBtYW4sZ3JpcHBhbCxncmlwcGUsZ3JpcHBlcixncmlwcGxlLGdyaXBweSxncmlweSxncmlzLGdyaXNhcmQsZ3Jpc2tpbixncmlzbHksZ3Jpc29uLGdyaXN0LGdyaXN0ZXIsZ3Jpc3RsZSxncmlzdGx5LGdyaXN0eSxncml0LGdyaXRoLGdyaXRzLGdyaXR0ZW4sZ3JpdHRlcixncml0dGxlLGdyaXR0eSxncml2ZXQsZ3Jpdm5hLGdyaXp6bGUsZ3JpenpseSxncm9hbixncm9hbmVyLGdyb2F0LGdyb2F0cyxncm9iaWFuLGdyb2Nlcixncm9jZXJ5LGdyb2ZmLGdyb2csZ3JvZ2d5LGdyb2dyYW0sZ3JvaW4sZ3JvaW5lZCxncm9tbWV0LGdyb29tLGdyb29tZXIsZ3Jvb215LGdyb29wLGdyb29zZSxncm9vdCxncm9vdHksZ3Jvb3ZlLGdyb292ZXIsZ3Jvb3Z5LGdyb3BlLGdyb3Blcixncm9waW5nLGdyb3BwbGUsZ3Jvcyxncm9zZXIsZ3Jvc2V0LGdyb3NzLGdyb3NzZW4sZ3Jvc3Nlcixncm9zc2x5LGdyb3Nzbyxncm9zeixncm9zenksZ3JvdCxncm90dG8sZ3JvdWNoLGdyb3VjaHksZ3JvdWYsZ3JvdWdoLGdyb3VuZCxncm91bmRzLGdyb3VuZHksZ3JvdXAsZ3JvdXBlZCxncm91cGVyLGdyb3VzZSxncm91c2VyLGdyb3VzeSxncm91dCxncm91dGVyLGdyb3V0cyxncm91dHksZ3JvdXplLGdyb3ZlLGdyb3ZlZCxncm92ZWwsZ3JvdnksZ3Jvdyxncm93YW4sZ3Jvd2VkLGdyb3dlcixncm93aW5nLGdyb3dsLGdyb3dsZXIsZ3Jvd2x5LGdyb3duLGdyb3dudXAsZ3Jvd3NlLGdyb3d0aCxncm93dGh5LGdyb3phcnQsZ3JvemV0LGdycixncnViLGdydWJiZWQsZ3J1YmJlcixncnViYnksZ3J1YnMsZ3J1ZGdlLGdydWRnZXIsZ3J1ZSxncnVlbCxncnVlbGVyLGdydWVsbHksZ3J1ZmYsZ3J1ZmZseSxncnVmZnMsZ3J1ZmZ5LGdydWZ0ZWQsZ3J1Z3J1LGdydWluZSxncnVtLGdydW1ibGUsZ3J1bWJseSxncnVtZSxncnVtbHksZ3J1bW1lbCxncnVtbWV0LGdydW1vc2UsZ3J1bW91cyxncnVtcCxncnVtcGgsZ3J1bXBoeSxncnVtcHksZ3J1bixncnVuZHksZ3J1bmlvbixncnVudCxncnVudGVyLGdydW50bGUsZ3J1c2gsZ3J1c2hpZSxncnVzcyxncnV0Y2gsZ3J1dHRlbixncnlkZSxncnlsbGksZ3J5bGxpZCxncnlsbG9zLGdyeWxsdXMsZ3J5c2JvayxndWFiYSxndWFjaW1vLGd1YWNpbixndWFjbyxndWFpYWMsZ3VhaW9sLGd1YWthLGd1YW1hLGd1YW4sZ3VhbmEsZ3VhbmFjbyxndWFuYXNlLGd1YW5heSxndWFuZ28sZ3VhbmluZSxndWFuaXplLGd1YW5vLGd1YW55bCxndWFvLGd1YXBlbmEsZ3VhcixndWFyYSxndWFyYWJ1LGd1YXJhbmEsZ3VhcmFuaSxndWFyZCxndWFyZGVkLGd1YXJkZXIsZ3VhcmRvLGd1YXJpYmEsZ3VhcnJpLGd1YXNhLGd1YXZhLGd1YXZpbmEsZ3VheWFiYSxndWF5YWJpLGd1YXlhYm8sZ3VheXVsZSxndWF6YSxndWJibyxndWNraSxndWQsZ3VkYW1lLGd1ZGRsZSxndWRlLGd1ZGdlLGd1ZGdlb24sZ3VkZ2V0LGd1ZG9rLGd1ZSxndWVidWN1LGd1ZW1hbCxndWVuZXBlLGd1ZW5vbixndWVwYXJkLGd1ZXJkb24sZ3VlcmV6YSxndWVzcyxndWVzc2VyLGd1ZXN0LGd1ZXN0ZW4sZ3Vlc3RlcixndWZhLGd1ZmYsZ3VmZmF3LGd1ZmZlcixndWZmaW4sZ3VmZnksZ3VnYWwsZ3VnZ2xlLGd1Z2dsZXQsZ3VnbGV0LGd1Z2xpYSxndWdsaW8sZ3VndSxndWhyLGd1aWIsZ3VpYmEsZ3VpZGFnZSxndWlkZSxndWlkZXIsZ3VpZG1hbixndWlkb24sZ3VpZ2UsZ3VpZ25vbCxndWlqbyxndWlsZCxndWlsZGVyLGd1aWxkaWMsZ3VpbGRyeSxndWlsZSxndWlsZXJ5LGd1aWx0LGd1aWx0eSxndWlseSxndWltcGUsZ3VpbmVhLGd1aXB1cmUsZ3Vpc2FyZCxndWlzZSxndWlzZXIsZ3Vpc2luZyxndWl0YXIsZ3VsLGd1bGEsZ3VsYWUsZ3VsYW1hbixndWxhcixndWxhcmlzLGd1bGNoLGd1bGRlbixndWxlLGd1bGVzLGd1bGYsZ3VsZnksZ3VsZ3VsLGd1bGl4LGd1bGwsZ3VsbGVyeSxndWxsZXQsZ3VsbGlvbixndWxsaXNoLGd1bGx5LGd1bG9uaWMsZ3Vsb3NlLGd1bHAsZ3VscGVyLGd1bHBpbixndWxwaW5nLGd1bHB5LGd1bHNhY2gsZ3VtLGd1bWJvLGd1bWJvaWwsZ3VtYnksZ3VtZHJvcCxndW1paGFuLGd1bWxlc3MsZ3VtbGlrZSxndW1seSxndW1tYSxndW1tYWdlLGd1bW1hdGEsZ3VtbWVkLGd1bW1lcixndW1taW5nLGd1bW1pdGUsZ3VtbW9zZSxndW1tb3VzLGd1bW15LGd1bXAsZ3VtcHVzLGd1bXNob2UsZ3Vtd2VlZCxndW13b29kLGd1bixndW5hLGd1bmF0ZSxndW5ib2F0LGd1bmRpLGd1bmR5LGd1bmVibyxndW5maXJlLGd1bmdlLGd1bml0ZSxndW5qLGd1bmssZ3VubCxndW5sZXNzLGd1bmxvY2ssZ3VubWFuLGd1bm5hZ2UsZ3VubmUsZ3VubmVsLGd1bm5lcixndW5uZXJ5LGd1bm5pZXMsZ3VubmluZyxndW5udW5nLGd1bm55LGd1bm9uZyxndW5wbGF5LGd1bnJhY2ssZ3Vuc2VsLGd1bnNob3AsZ3Vuc2hvdCxndW5zbWFuLGd1bnN0ZXIsZ3VudGVyLGd1bndhbGUsZ3VueWFoLGd1bnlhbmcsZ3VueWVoLGd1cCxndXBweSxndXIsZ3VyZGxlLGd1cmdlLGd1cmdlb24sZ3VyZ2VzLGd1cmdsZSxndXJnbGV0LGd1cmdseSxndXJqdW4sZ3VyayxndXJsLGd1cmx5LGd1cm5hcmQsZ3VybmV0LGd1cm5pYWQsZ3VycixndXJyYWgsZ3VycnksZ3VydCxndXJ1LGd1c2gsZ3VzaGVyLGd1c2hldCxndXNoaWx5LGd1c2hpbmcsZ3VzaHksZ3VzbGEsZ3VzbGUsZ3VzcyxndXNzZXQsZ3Vzc2llLGd1c3QsZ3VzdGZ1bCxndXN0aWx5LGd1c3RvLGd1c3R5LGd1dCxndXRsZXNzLGd1dGxpa2UsZ3V0bGluZyxndXR0LGd1dHRhLGd1dHRhdGUsZ3V0dGUsZ3V0dGVyLGd1dHRlcnksZ3V0dGksZ3V0dGlkZSxndXR0aWUsZ3V0dGxlLGd1dHRsZXIsZ3V0dHVsYSxndXR0dWxlLGd1dHR1cyxndXR0eSxndXR3ZWVkLGd1dHdpc2UsZ3V0d29ydCxndXksZ3V5ZG9tLGd1eWVyLGd1eixndXplLGd1enpsZSxndXp6bGVyLGd3YWcsZ3dlZHVjLGd3ZWVkLGd3ZWVvbixnd2VseSxnd2luZSxnd3luaWFkLGd5bGUsZ3ltLGd5bWVsLGd5bW5hc3QsZ3ltbmljLGd5bW5pY3MsZ3ltbml0ZSxneW1udXJlLGd5bXBpZSxneW4sZ3luZSxneW5lY2ljLGd5bmljLGd5bmljcyxneXAsZ3lwZSxneXBwZXIsZ3lwcyxneXBzaW5lLGd5cHNpdGUsZ3lwc291cyxneXBzdGVyLGd5cHN1bSxneXBzeSxneXBzeWZ5LGd5cHN5cnksZ3lyYWwsZ3lyYWxseSxneXJhbnQsZ3lyYXRlLGd5cmF0b3IsZ3lyZSxneXJlbmUsZ3lyaSxneXJpYyxneXJpbmlkLGd5cm8sZ3lyb2NhcixneXJvbWEsZ3lyb24sZ3lyb25ueSxneXJvc2UsZ3lyb3VzLGd5cnVzLGd5dGUsZ3l0bGluZyxneXZlLGgsaGEsaGFhYixoYWFmLGhhYmJsZSxoYWJlYXMsaGFiZW5hLGhhYmVuYWwsaGFiZW5hcixoYWJpbGUsaGFiaWxsZSxoYWJpdCxoYWJpdGFuLGhhYml0YXQsaGFiaXRlZCxoYWJpdHVlLGhhYml0dXMsaGFibmFiLGhhYm9vYixoYWJ1LGhhYnV0YWksaGFjaGUsaGFjaHVyZSxoYWNrLGhhY2tidXQsaGFja2VkLGhhY2tlZSxoYWNrZXIsaGFja2VyeSxoYWNraW4saGFja2luZyxoYWNrbGUsaGFja2xlcixoYWNrbG9nLGhhY2tseSxoYWNrbWFuLGhhY2tuZXksaGFja3NhdyxoYWNreSxoYWQsaGFkYm90LGhhZGRlbixoYWRkaWUsaGFkZG8saGFkZG9jayxoYWRlLGhhZGluZyxoYWRqLGhhZGppLGhhZGxhbmQsaGFkcm9tZSxoYWVjLGhhZW0saGFlbW9ueSxoYWV0LGhhZmYsaGFmZmV0LGhhZmZsZSxoYWZpeixoYWZuaXVtLGhhZm55bCxoYWZ0LGhhZnRlcixoYWcsaGFnYm9hdCxoYWdib3JuLGhhZ2J1c2gsaGFnZG9uLGhhZ2VlbixoYWdmaXNoLGhhZ2dhZGEsaGFnZ2FyZCxoYWdnZWQsaGFnZ2VyLGhhZ2dpcyxoYWdnaXNoLGhhZ2dsZSxoYWdnbGVyLGhhZ2dseSxoYWdneSxoYWdpLGhhZ2lhLGhhZ2xldCxoYWdsaWtlLGhhZ2xpbixoYWdyaWRlLGhhZ3JvcGUsaGFnc2VlZCxoYWdzaGlwLGhhZ3dlZWQsaGFnd29ybSxoYWgsaGFpayxoYWlrYWksaGFpa2FsLGhhaWt3YW4saGFpbCxoYWlsZXIsaGFpbHNlLGhhaWx5LGhhaW4saGFpbmUsaGFpcixoYWlyY3V0LGhhaXJkbyxoYWlyZSxoYWlyZWQsaGFpcmVuLGhhaXJpZixoYWlybGV0LGhhaXJwaW4saGFpcnVwLGhhaXJ5LGhhamUsaGFqaWIsaGFqaWxpaixoYWssaGFrYW0saGFrZGFyLGhha2UsaGFrZWVtLGhha2ltLGhha28saGFrdSxoYWxhLGhhbGFrYWgsaGFsYWtpYyxoYWxhbCxoYWxiZXJkLGhhbGJlcnQsaGFsY2gsaGFsY3lvbixoYWxlLGhhbGViaSxoYWxlcixoYWxlcnosaGFsZixoYWxmZXIsaGFsZm1hbixoYWxmd2F5LGhhbGliaXUsaGFsaWJ1dCxoYWxpZGUsaGFsaWRvbSxoYWxpdGUsaGFsaXR1cyxoYWxsLGhhbGxhZ2UsaGFsbGFoLGhhbGxhbixoYWxsZWwsaGFsbGV4LGhhbGxpbmcsaGFsbG1hbixoYWxsb28saGFsbG93LGhhbGx1eCxoYWxsd2F5LGhhbG1hLGhhbG8saGFsb2dlbixoYWxvaWQsaGFscyxoYWxzZSxoYWxzZW4saGFsdCxoYWx0ZXIsaGFsdGluZyxoYWx1cmd5LGhhbHV0eixoYWx2YW5zLGhhbHZlLGhhbHZlZCxoYWx2ZXIsaGFsdmVzLGhhbHlhcmQsaGFtLGhhbWFsLGhhbWFsZCxoYW1hdGUsaGFtYXRlZCxoYW1hdHVtLGhhbWJsZSxoYW1lLGhhbWVpbCxoYW1lbCxoYW1mYXQsaGFtaSxoYW1sYWgsaGFtbGV0LGhhbW1hZGEsaGFtbWFtLGhhbW1lcixoYW1tb2NrLGhhbW15LGhhbW9zZSxoYW1vdXMsaGFtcGVyLGhhbXNhLGhhbXN0ZXIsaGFtdWxhcixoYW11bGUsaGFtdWx1cyxoYW11cyxoYW16YSxoYW4saGFuYXBlcixoYW5idXJ5LGhhbmNlLGhhbmNlZCxoYW5jaCxoYW5kLGhhbmRiYWcsaGFuZGJvdyxoYW5kY2FyLGhhbmRlZCxoYW5kZXIsaGFuZGZ1bCxoYW5kZ3VuLGhhbmRpbHksaGFuZGxlLGhhbmRsZWQsaGFuZGxlcixoYW5kb3V0LGhhbmRzYXcsaGFuZHNlbCxoYW5kc2V0LGhhbmR5LGhhbmdhcixoYW5nYnksaGFuZ2RvZyxoYW5nZSxoYW5nZWUsaGFuZ2VyLGhhbmdpZSxoYW5naW5nLGhhbmdsZSxoYW5nbWFuLGhhbmdvdXQsaGFuZ3VsLGhhbmlmLGhhbmssaGFua2VyLGhhbmtpZSxoYW5rbGUsaGFua3ksaGFubmEsaGFuc2EsaGFuc2UsaGFuc2VsLGhhbnNvbSxoYW50LGhhbnRsZSxoYW8saGFvbGUsaGFvbWEsaGFvcmksaGFwLGhhcGxlc3MsaGFwbGl0ZSxoYXBsb2lkLGhhcGxvbWEsaGFwbG9udCxoYXBseSxoYXBwZW4saGFwcGllcixoYXBwaWZ5LGhhcHBpbHksaGFwcGluZyxoYXBweSxoYXB0ZW4saGFwdGVuZSxoYXB0ZXJlLGhhcHRpYyxoYXB0aWNzLGhhcHUsaGFwdWt1LGhhcmFzcyxoYXJhdGNoLGhhcmJpLGhhcmJvcixoYXJkLGhhcmRlbixoYXJkZXIsaGFyZGlseSxoYXJkaW0saGFyZGlzaCxoYXJkbHksaGFyZG9jayxoYXJkcGFuLGhhcmR5LGhhcmUsaGFyZWJ1cixoYXJlbGlwLGhhcmVtLGhhcmZhbmcsaGFyaWNvdCxoYXJpc2gsaGFyayxoYXJrYSxoYXJsLGhhcmxpbmcsaGFybG9jayxoYXJsb3QsaGFybSxoYXJtYWwsaGFybWFsYSxoYXJtYW4saGFybWVsLGhhcm1lcixoYXJtZnVsLGhhcm1pbmUsaGFybW9ueSxoYXJtb3N0LGhhcm4saGFybmVzcyxoYXJucGFuLGhhcnAsaGFycGFnbyxoYXJwZXIsaGFycGllcixoYXJwaXN0LGhhcnBvb24saGFycHVsYSxoYXJyLGhhcnJpZXIsaGFycm93LGhhcnJ5LGhhcnNoLGhhcnNoZW4saGFyc2hseSxoYXJ0LGhhcnRhbCxoYXJ0aW4saGFydGl0ZSxoYXJ2ZXN0LGhhc2FuLGhhc2gsaGFzaGFiLGhhc2hlcixoYXNoaXNoLGhhc2h5LGhhc2ssaGFza3ksaGFzbGV0LGhhc2xvY2ssaGFzcCxoYXNzYXIsaGFzc2VsLGhhc3NsZSxoYXNzb2NrLGhhc3RhLGhhc3RhdGUsaGFzdGF0aSxoYXN0ZSxoYXN0ZW4saGFzdGVyLGhhc3RpbHksaGFzdGlzaCxoYXN0bGVyLGhhc3R5LGhhdCxoYXRhYmxlLGhhdGJhbmQsaGF0Ym94LGhhdGJyaW0saGF0Y2gsaGF0Y2hlbCxoYXRjaGVyLGhhdGNoZXQsaGF0ZSxoYXRlZnVsLGhhdGVyLGhhdGZ1bCxoYXRoLGhhdGhpLGhhdGxlc3MsaGF0bGlrZSxoYXRwaW4saGF0cmFjayxoYXRyYWlsLGhhdHJlZCxoYXRyZXNzLGhhdHQsaGF0dGVkLGhhdHRlcixoYXR0ZXJ5LGhhdHRpbmcsaGF0dG9jayxoYXR0eSxoYXUsaGF1YmVyayxoYXVnaCxoYXVnaHQsaGF1Z2h0eSxoYXVsLGhhdWxhZ2UsaGF1bGQsaGF1bGVyLGhhdWxpZXIsaGF1bG0saGF1bG15LGhhdW5jaCxoYXVuY2h5LGhhdW50LGhhdW50ZXIsaGF1bnR5LGhhdXNlLGhhdXNlbixoYXVzc2UsaGF1dGJveSxoYXV0ZXVyLGhhdmFnZSxoYXZlLGhhdmVhZ2UsaGF2ZWwsaGF2ZW4saGF2ZW5lcixoYXZlbmV0LGhhdmVudCxoYXZlcixoYXZlcmVsLGhhdmVyZXIsaGF2ZXJzLGhhdmllcixoYXZvYyxoYXcsaGF3YnVjayxoYXdlcixoYXdrLGhhd2tiaXQsaGF3a2VkLGhhd2tlcixoYXdrZXJ5LGhhd2tpZSxoYXdraW5nLGhhd2tpc2gsaGF3a251dCxoYXdreSxoYXdtLGhhd29rLGhhd3NlLGhhd3NlcixoYXksaGF5YSxoYXliYW5kLGhheWJpcmQsaGF5Ym90ZSxoYXljYXAsaGF5Y2FydCxoYXljb2NrLGhheWV5LGhheWZvcmssaGF5bGlmdCxoYXlsb2Z0LGhheW1vdyxoYXlyYWNrLGhheXJha2UsaGF5cmljayxoYXlzZWVkLGhheXNlbCxoYXlzdWNrLGhheXRpbWUsaGF5d2FyZCxoYXl3ZWVkLGhheXdpcmUsaGF5eixoYXphcmQsaGF6ZSxoYXplbCxoYXplbGVkLGhhemVsbHksaGF6ZW4saGF6ZXIsaGF6aWx5LGhhemluZyxoYXpsZSxoYXp5LGhhenphbixoZSxoZWFkLGhlYWRjYXAsaGVhZGVkLGhlYWRlcixoZWFkZnVsLGhlYWRpbHksaGVhZGluZyxoZWFkbWFuLGhlYWRzZXQsaGVhZHdheSxoZWFkeSxoZWFmLGhlYWwsaGVhbGQsaGVhbGRlcixoZWFsZXIsaGVhbGZ1bCxoZWFsaW5nLGhlYWx0aCxoZWFsdGh5LGhlYXAsaGVhcGVyLGhlYXBzLGhlYXB5LGhlYXIsaGVhcmVyLGhlYXJpbmcsaGVhcmtlbixoZWFyc2F5LGhlYXJzZSxoZWFyc3QsaGVhcnQsaGVhcnRlZCxoZWFydGVuLGhlYXJ0aCxoZWFydGx5LGhlYXJ0cyxoZWFydHksaGVhdCxoZWF0ZXIsaGVhdGZ1bCxoZWF0aCxoZWF0aGVuLGhlYXRoZXIsaGVhdGh5LGhlYXRpbmcsaGVhdW1lLGhlYXVtZXIsaGVhdmUsaGVhdmVuLGhlYXZlbnMsaGVhdmVyLGhlYXZpZXMsaGVhdmlseSxoZWF2aW5nLGhlYXZpdHksaGVhdnksaGViYW1pYyxoZWJlbm9uLGhlYmV0ZSxoZWJldGljLGhlY2gsaGVjayxoZWNrbGUsaGVja2xlcixoZWN0YXJlLGhlY3RlLGhlY3RpYyxoZWN0b3IsaGVkZGxlLGhlZGRsZXIsaGVkZWJvLGhlZGVyLGhlZGVyaWMsaGVkZXJpbixoZWRnZSxoZWRnZXIsaGVkZ2luZyxoZWRneSxoZWRvbmljLGhlZWQsaGVlZGVyLGhlZWRmdWwsaGVlZGlseSxoZWVkeSxoZWVoYXcsaGVlbCxoZWVsY2FwLGhlZWxlZCxoZWVsZXIsaGVlbHRhcCxoZWVyLGhlZXplLGhlZXppZSxoZWV6eSxoZWZ0LGhlZnRlcixoZWZ0aWx5LGhlZnR5LGhlZ2FyaSxoZWdlbW9uLGhlZ2lyYSxoZWd1bWVuLGhlaSxoZWlhdSxoZWlmZXIsaGVpZ2gsaGVpZ2h0LGhlaWksaGVpbWluLGhlaW5vdXMsaGVpcixoZWlyZG9tLGhlaXJlc3MsaGVpdGlraSxoZWt0ZXVzLGhlbGJlaCxoZWxjb2lkLGhlbGRlcixoZWxlLGhlbGVuaW4saGVsaWFzdCxoZWxpY2FsLGhlbGljZWQsaGVsaWNlcyxoZWxpY2luLGhlbGljb24saGVsaWRlLGhlbGluZyxoZWxpbyxoZWxpb2lkLGhlbGl1bSxoZWxpeCxoZWxsLGhlbGxib3gsaGVsbGNhdCxoZWxsZG9nLGhlbGxlcixoZWxsZXJpLGhlbGxoYWcsaGVsbGllcixoZWxsaW9uLGhlbGxpc2gsaGVsbG8saGVsbHVvLGhlbGx5LGhlbG0saGVsbWFnZSxoZWxtZWQsaGVsbWV0LGhlbG9kZXMsaGVsb2UsaGVsb21hLGhlbG9uaW4saGVsb3NpcyxoZWxvdHJ5LGhlbHAsaGVscGVyLGhlbHBmdWwsaGVscGluZyxoZWxwbHksaGVsdmUsaGVsdmVsbCxoZWx2ZXIsaGVsdml0ZSxoZW0saGVtYWQsaGVtYWwsaGVtYXBvZCxoZW1hc2UsaGVtYXRhbCxoZW1hdGljLGhlbWF0aWQsaGVtYXRpbixoZW1lLGhlbWVuLGhlbWVyYSxoZW1pYW1iLGhlbWljLGhlbWluLGhlbWluYSxoZW1pbmUsaGVtaW5lZSxoZW1pb3BlLGhlbWlwaWMsaGVtbCxoZW1sb2NrLGhlbW1lbCxoZW1tZXIsaGVtb2NyeSxoZW1vaWQsaGVtb2wsaGVtb3BvZCxoZW1wLGhlbXBlbixoZW1weSxoZW4saGVuYWQsaGVuYmFuZSxoZW5iaWxsLGhlbmJpdCxoZW5jZSxoZW5jb29wLGhlbmNvdGUsaGVuZCxoZW5kbHksaGVuZmlzaCxoZW5pc20saGVubGlrZSxoZW5uYSxoZW5uZXJ5LGhlbm5pbixoZW5uaXNoLGhlbm55LGhlbm90aWMsaGVucGVjayxoZW5wZW4saGVucnksaGVudCxoZW50ZXIsaGVud2FyZSxoZW53aWZlLGhlbndpc2UsaGVueWFyZCxoZXAsaGVwYXIsaGVwYXJpbixoZXBhdGljLGhlcGNhdCxoZXBwZW4saGVwcGVyLGhlcHRhY2UsaGVwdGFkLGhlcHRhbCxoZXB0YW5lLGhlcHRlbmUsaGVwdGluZSxoZXB0aXRlLGhlcHRvaWMsaGVwdG9zZSxoZXB0eWwsaGVwdHluZSxoZXIsaGVyYWxkLGhlcmIsaGVyYmFnZSxoZXJiYWwsaGVyYmFuZSxoZXJiYXJ5LGhlcmJpc2gsaGVyYmlzdCxoZXJibGV0LGhlcmJtYW4saGVyYm9zZSxoZXJib3VzLGhlcmJ5LGhlcmQsaGVyZGJveSxoZXJkZXIsaGVyZGljLGhlcmRpbmcsaGVyZSxoZXJlYXQsaGVyZWJ5LGhlcmVpbixoZXJlbSxoZXJlb2YsaGVyZW9uLGhlcmVzeSxoZXJldGljLGhlcmV0byxoZXJpbGUsaGVyaW90LGhlcml0b3IsaGVybCxoZXJsaW5nLGhlcm1hLGhlcm1haWMsaGVybWl0LGhlcm4saGVybmFuaSxoZXJuYW50LGhlcm5lLGhlcm5pYSxoZXJuaWFsLGhlcm8saGVyb2VzcyxoZXJvaWMsaGVyb2lkLGhlcm9pZnksaGVyb2luLGhlcm9pbmUsaGVyb2lzbSxoZXJvaXplLGhlcm9uLGhlcm9uZXIsaGVyb25yeSxoZXJwZXMsaGVycmluZyxoZXJzLGhlcnNlLGhlcnNlZCxoZXJzZWxmLGhlcnNoaXAsaGVyc2lyLGhlcnR6LGhlc3NpdGUsaGVzdCxoZXN0ZXJuLGhldCxoZXRhZXJhLGhldGFlcnksaGV0ZXJpYyxoZXRlcm8saGV0aGluZyxoZXRtYW4saGV0dGVyLGhldWF1LGhldWdoLGhldW1pdGUsaGV2aSxoZXcsaGV3YWJsZSxoZXdlbCxoZXdlcixoZXdoYWxsLGhld24saGV3dCxoZXgsaGV4YSxoZXhhY2UsaGV4YWNpZCxoZXhhY3QsaGV4YWQsaGV4YWRpYyxoZXhhZ29uLGhleGFneW4saGV4YW5lLGhleGFwZWQsaGV4YXBsYSxoZXhhcG9kLGhleGFyY2gsaGV4ZW5lLGhleGVyLGhleGVyZWksaGV4ZXJpcyxoZXhpbmUsaGV4aXMsaGV4aXRvbCxoZXhvZGUsaGV4b2dlbixoZXhvaWMsaGV4b25lLGhleG9uaWMsaGV4b3NhbixoZXhvc2UsaGV4eWwsaGV4eWxpYyxoZXh5bmUsaGV5LGhleWRheSxoaSxoaWEsaGlhbnQsaGlhdGFsLGhpYXRlLGhpYXRpb24saGlhdHVzLGhpYmJpbixoaWMsaGljYXRlZSxoaWNjdXAsaGljayxoaWNrZXksaGlja29yeSxoaWRhYmxlLGhpZGFnZSxoaWRhbGdvLGhpZGF0ZWQsaGlkZGVuLGhpZGUsaGlkZWQsaGlkZW91cyxoaWRlcixoaWRsaW5nLGhpZSxoaWVkZXIsaGllbGQsaGllbWFsLGhpZXJvbixoaWVyb3MsaGlnZG9uLGhpZ2dsZSxoaWdnbGVyLGhpZ2gsaGlnaGJveSxoaWdoZXIsaGlnaGVzdCxoaWdoaXNoLGhpZ2hseSxoaWdobWFuLGhpZ2h0LGhpZ2h0b3AsaGlnaHdheSxoaWd1ZXJvLGhpamFjayxoaWtlLGhpa2VyLGhpbGNoLGhpbGRpbmcsaGlsbCxoaWxsZXIsaGlsbGV0LGhpbGxtYW4saGlsbG9jayxoaWxsdG9wLGhpbGx5LGhpbHNhLGhpbHQsaGlsdW0saGlsdXMsaGltLGhpbXAsaGltc2VsZixoaW13YXJkLGhpbixoaW5hdSxoaW5jaCxoaW5kLGhpbmRlcixoaW5nLGhpbmdlLGhpbmdlcixoaW5nbGUsaGlubmV5LGhpbm55LGhpbm9pZCxoaW5va2ksaGludCxoaW50ZXIsaGlvZG9udCxoaXAsaGlwYm9uZSxoaXBlLGhpcGVyLGhpcGhhbHQsaGlwbGVzcyxoaXBtb2xkLGhpcHBlZCxoaXBwZW4saGlwcGlhbixoaXBwaWMsaGlwcGluZyxoaXBwaXNoLGhpcHBsZSxoaXBwbyxoaXBwb2lkLGhpcHB1cyxoaXBweSxoaXBzaG90LGhpcHdvcnQsaGlyYWJsZSxoaXJjaW5lLGhpcmUsaGlyZWQsaGlyZW1hbixoaXJlcixoaXJtb3MsaGlybyxoaXJwbGUsaGlyc2UsaGlyc2VsLGhpcnNsZSxoaXJzdXRlLGhpcyxoaXNoLGhpc24saGlzcGlkLGhpc3MsaGlzc2VyLGhpc3NpbmcsaGlzdCxoaXN0aWUsaGlzdG9pZCxoaXN0b24saGlzdG9uZSxoaXN0b3J5LGhpc3RyaW8saGl0LGhpdGNoLGhpdGNoZXIsaGl0Y2h5LGhpdGhlLGhpdGhlcixoaXRsZXNzLGhpdHRlcixoaXZlLGhpdmVyLGhpdmVzLGhpenosaG8saG9hcixob2FyZCxob2FyZGVyLGhvYXJpbHksaG9hcmlzaCxob2Fyc2UsaG9hcnNlbixob2FyeSxob2FzdCxob2F0emluLGhvYXgsaG9heGVlLGhvYXhlcixob2IsaG9iYmVyLGhvYmJldCxob2JiaWwsaG9iYmxlLGhvYmJsZXIsaG9iYmx5LGhvYmJ5LGhvYmxpa2UsaG9ibmFpbCxob2Jub2IsaG9ibyxob2JvaXNtLGhvY2NvLGhvY2ssaG9ja2VyLGhvY2tldCxob2NrZXksaG9ja3ksaG9jdXMsaG9kLGhvZGRlbixob2RkZXIsaG9kZGxlLGhvZGR5LGhvZGZ1bCxob2RtYW4saG9lLGhvZWNha2UsaG9lZG93bixob2VmdWwsaG9lcixob2csaG9nYSxob2dhbixob2diYWNrLGhvZ2J1c2gsaG9nZmlzaCxob2dnZWQsaG9nZ2VyLGhvZ2dlcnksaG9nZ2V0LGhvZ2dpZSxob2dnaW4saG9nZ2lzaCxob2dnaXNtLGhvZ2d5LGhvZ2hlcmQsaG9naGlkZSxob2dob29kLGhvZ2xpa2UsaG9nbGluZyxob2dtYWNlLGhvZ25vc2UsaG9nbnV0LGhvZ3Blbixob2dzaGlwLGhvZ3NraW4saG9nc3R5LGhvZ3dhcmQsaG9nd2FzaCxob2d3ZWVkLGhvZ3dvcnQsaG9neWFyZCxob2ksaG9pY2ssaG9pbixob2lzZSxob2lzdCxob2lzdGVyLGhvaXQsaG9qdSxob2tleSxob2t1bSxob2xhcmQsaG9sY2FkLGhvbGQsaG9sZGFsbCxob2xkZW4saG9sZGVyLGhvbGRpbmcsaG9sZG91dCxob2xkdXAsaG9sZSxob2xlbWFuLGhvbGVyLGhvbGV5LGhvbGlhLGhvbGlkYXksaG9saWx5LGhvbGluZyxob2xpc20saG9sbCxob2xsYSxob2xsZXIsaG9sbGluLGhvbGxvLGhvbGxvY2ssaG9sbG9uZyxob2xsb3csaG9sbHksaG9sbSxob2xtaWEsaG9sbWljLGhvbG1pdW0saG9sbW9zLGhvbG91cixob2xzdGVyLGhvbHQsaG9seSxob2x5ZGF5LGhvbWFnZSxob21hZ2VyLGhvbWUsaG9tZWxldCxob21lbHksaG9tZWx5bixob21lb2lkLGhvbWVyLGhvbWV5LGhvbWlseSxob21pbmFsLGhvbWluaWQsaG9taW55LGhvbWlzaCxob21vLGhvbW9kb3gsaG9tb2dlbixob21vbnltLGhvbXJhaSxob215LGhvbmRhLGhvbmRvLGhvbmUsaG9uZXN0LGhvbmVzdHksaG9uZXksaG9uZXllZCxob25nLGhvbmllZCxob25pbHksaG9uayxob25rZXIsaG9ub3IsaG9ub3JlZSxob25vcmVyLGhvbnRpc2gsaG9udG91cyxob29jaCxob29kLGhvb2RjYXAsaG9vZGVkLGhvb2RmdWwsaG9vZGllLGhvb2RsdW0saG9vZG1hbixob29kb28saG9vZHNoeSxob29leSxob29mLGhvb2ZlZCxob29mZXIsaG9vZmlzaCxob29mbGV0LGhvb2Zyb3QsaG9vZnMsaG9vZnksaG9vayxob29rYWgsaG9va2VkLGhvb2tlcixob29rZXJzLGhvb2tpc2gsaG9va2xldCxob29rbWFuLGhvb2t0aXAsaG9va3VtLGhvb2t1cCxob29reSxob29sb2NrLGhvb2x5LGhvb24saG9vcCxob29wZWQsaG9vcGVyLGhvb3BpbmcsaG9vcGxhLGhvb3BsZSxob29wbWFuLGhvb3BvZSxob29zZSxob29zaCxob290LGhvb3RheSxob290ZXIsaG9vdmUsaG9vdmVuLGhvb3ZleSxob3AsaG9wYmluZSxob3BidXNoLGhvcGUsaG9wZWQsaG9wZWZ1bCxob3BlaXRlLGhvcGVyLGhvcGksaG9wbGl0ZSxob3BvZmYsaG9wcGVkLGhvcHBlcixob3BwZXJzLGhvcHBldCxob3BwaXR5LGhvcHBsZSxob3BweSxob3B0b2FkLGhvcHZpbmUsaG9weWFyZCxob3JhLGhvcmFsLGhvcmFyeSxob3JkYXJ5LGhvcmRlLGhvcmRlaW4saG9yaXpvbixob3JtZSxob3JtaWMsaG9ybWlnbyxob3JtaW9uLGhvcm1pc3QsaG9ybW9uZSxob3Jtb3MsaG9ybixob3JuZWQsaG9ybmVyLGhvcm5ldCxob3JuZXR5LGhvcm5mdWwsaG9ybmlmeSxob3JuaWx5LGhvcm5pbmcsaG9ybmlzaCxob3JuaXN0LGhvcm5pdG8saG9ybmxldCxob3JudGlwLGhvcm55LGhvcnJlbnQsaG9ycmV1bSxob3JyaWQsaG9ycmlmeSxob3Jyb3IsaG9yc2UsaG9yc2VyLGhvcnNpZnksaG9yc2lseSxob3JzaW5nLGhvcnN0LGhvcnN5LGhvcnRpdGUsaG9yeSxob3Nhbm5hLGhvc2UsaG9zZWQsaG9zZWwsaG9zZW1hbixob3NpZXIsaG9zaWVyeSxob3NwaWNlLGhvc3QsaG9zdGFnZSxob3N0ZWwsaG9zdGVyLGhvc3Rlc3MsaG9zdGllLGhvc3RpbGUsaG9zdGluZyxob3N0bGVyLGhvc3RseSxob3N0cnksaG90LGhvdGJlZCxob3Rib3gsaG90Y2gsaG90ZWwsaG90Zm9vdCxob3RoZWFkLGhvdGksaG90bHksaG90bmVzcyxob3RzcHVyLGhvdHRlcixob3R0ZXJ5LGhvdHRpc2gsaG91YmFyYSxob3VnaCxob3VnaGVyLGhvdW5jZSxob3VuZCxob3VuZGVyLGhvdW5keSxob3VyLGhvdXJmdWwsaG91cmksaG91cmx5LGhvdXNhZ2UsaG91c2FsLGhvdXNlLGhvdXNlbCxob3VzZXIsaG91c2luZyxob3VzdHksaG91c3ksaG91dG91LGhvdXZhcmksaG92ZSxob3ZlbCxob3ZlbGVyLGhvdmVuLGhvdmVyLGhvdmVyZXIsaG92ZXJseSxob3csaG93YWRqaSxob3diZWl0LGhvd2RhaCxob3dkZXIsaG93ZGllLGhvd2R5LGhvd2UsaG93ZWwsaG93ZXZlcixob3dmZixob3dpc2gsaG93ayxob3draXQsaG93bCxob3dsZXIsaG93bGV0LGhvd2xpbmcsaG93bGl0ZSxob3dzbyxob3gsaG95LGhveWRlbixob3lsZSxob3ltYW4saHVhY2EsaHVhY28saHVhcml6byxodWIsaHViYixodWJiYSxodWJiZXIsaHViYmxlLGh1YmJseSxodWJidWIsaHViYnksaHVic2hpLGh1Y2hlbixodWNobyxodWNrLGh1Y2tsZSxodWQsaHVkZGxlLGh1ZGRsZXIsaHVkZG9jayxodWRkdXAsaHVlLGh1ZWQsaHVlZnVsLGh1ZWxlc3MsaHVlcixodWZmLGh1ZmZpZXIsaHVmZmlseSxodWZmaXNoLGh1ZmZsZSxodWZmbGVyLGh1ZmZ5LGh1ZyxodWdlLGh1Z2VseSxodWdlb3VzLGh1Z2dlcixodWdnaW5nLGh1Z2dsZSxodWdzb21lLGh1aCxodWlhLGh1aXBpbCxodWl0YWluLGh1a2UsaHVsYSxodWxkZWUsaHVsayxodWxrYWdlLGh1bGtpbmcsaHVsa3ksaHVsbCxodWxsZXIsaHVsbG9jayxodWxsb28saHVsc2l0ZSxodWxzdGVyLGh1bHUsaHVsdmVyLGh1bSxodW1hbixodW1hbmUsaHVtYW5seSxodW1hdGUsaHVtYmxlLGh1bWJsZXIsaHVtYmxpZSxodW1ibHksaHVtYm8saHVtYnVnLGh1bWJ1enosaHVtZHJ1bSxodW1lY3QsaHVtZXJhbCxodW1lcmksaHVtZXJ1cyxodW1ldCxodW1ldHR5LGh1bWh1bSxodW1pYyxodW1pZCxodW1pZGx5LGh1bWlkb3IsaHVtaWZpYyxodW1pZnksaHVtaW4saHVtaXRlLGh1bWxpZSxodW1tZWwsaHVtbWVyLGh1bW1pZSxodW1taW5nLGh1bW1vY2ssaHVtb3IsaHVtb3JhbCxodW1vdXMsaHVtcCxodW1wZWQsaHVtcGgsaHVtcHR5LGh1bXB5LGh1bXVzLGh1bmNoLGh1bmNoZXQsaHVuY2h5LGh1bmRpLGh1bmRyZWQsaHVuZyxodW5nZXIsaHVuZ3J5LGh1bmgsaHVuayxodW5rZXIsaHVua2VycyxodW5raWVzLGh1bmtzLGh1bmt5LGh1bnQsaHVudGluZyxodXAsaHVyYSxodXJkaWVzLGh1cmRpcyxodXJkbGUsaHVyZGxlcixodXJkcyxodXJlLGh1cmVlayxodXJnaWxhLGh1cmtsZSxodXJsLGh1cmxlZCxodXJsZXIsaHVybGV5LGh1cmxpbmcsaHVybG9jayxodXJseSxodXJvbixodXJyLGh1cnJhaCxodXJyaWVkLGh1cnJpZXIsaHVycm9jayxodXJyb28saHVycnksaHVyc3QsaHVydCxodXJ0ZWQsaHVydGVyLGh1cnRmdWwsaHVydGluZyxodXJ0bGUsaHVydHksaHVzYmFuZCxodXNlLGh1c2gsaHVzaGFieSxodXNoZWVuLGh1c2hlbCxodXNoZXIsaHVzaGZ1bCxodXNoaW5nLGh1c2hpb24saHVzaG8saHVzayxodXNrZWQsaHVza2VyLGh1c2tpbHksaHVza2luZyxodXNreSxodXNvLGh1c3BpbCxodXNzLGh1c3NhcixodXNzeSxodXN0aW5nLGh1c3RsZSxodXN0bGVyLGh1dCxodXRjaCxodXRjaGVyLGh1dGNoZXQsaHV0aG9sZCxodXRpYSxodXRsZXQsaHV0bWVudCxodXZlbHlrLGh1em9vcixodXp6LGh1enphLGh1enphcmQsaHlhZW5hLGh5YWxpbmUsaHlhbGl0ZSxoeWFsb2lkLGh5Ym9zaXMsaHlicmlkLGh5ZGF0aWQsaHlkbm9pZCxoeWRyYW50LGh5ZHJhdGUsaHlkcmF6byxoeWRyaWEsaHlkcmljLGh5ZHJpZGUsaHlkcm8saHlkcm9hLGh5ZHJvaWQsaHlkcm9sLGh5ZHJvbWUsaHlkcm9uZSxoeWRyb3BzLGh5ZHJvdXMsaHlkcm94eSxoeWRydWxhLGh5ZW5hLGh5ZW5pYyxoeWVuaW5lLGh5ZW5vaWQsaHlldGFsLGh5Z2Vpc3QsaHlnaWVuZSxoeWdyaWMsaHlncmluZSxoeWdyb21hLGh5aW5nLGh5a2UsaHlsZSxoeWxlZyxoeWxpYyxoeWxpc20saHlsaXN0LGh5bG9pZCxoeW1lbixoeW1lbmFsLGh5bWVuaWMsaHltbixoeW1uYWwsaHltbmFyeSxoeW1uZXIsaHltbmljLGh5bW5pc3QsaHltbm9kZSxoeW1ub2R5LGh5bmRlLGh5bmUsaHlvaWQsaHlvaWRhbCxoeW9pZGFuLGh5b2lkZXMsaHlwLGh5cGF0ZSxoeXBhdG9uLGh5cGVyLGh5cGhhLGh5cGhhbCxoeXBoZW1hLGh5cGhlbixoeXBobyxoeXBub2R5LGh5cG5vaWQsaHlwbm9uZSxoeXBvLGh5cG9nZWUsaHlwb2lkLGh5cG9ueW0saHlwb3B1cyxoeXBvcml0LGh5cHBpc2gsaHlwdXJhbCxoeXJhY2VzLGh5cmFjaWQsaHlyYXgsaHlzb24saHlzc29wLGksaWFtYixpYW1iaSxpYW1iaWMsaWFtYmlzdCxpYW1iaXplLGlhbWJ1cyxpYW8saWF0cmljLGliYSxpYmVyaXRlLGliZXgsaWJpY2VzLGliaWQsaWJpZGluZSxpYmlzLGlib2xpdW0saWJvdGEsaWNhY28saWNlLGljZWJlcmcsaWNlYm9hdCxpY2Vib25lLGljZWJveCxpY2VjYXAsaWNlZCxpY2VmYWxsLGljZWZpc2gsaWNlbGFuZCxpY2VsZWFmLGljZWxlc3MsaWNlbGlrZSxpY2VtYW4saWNlcm9vdCxpY2V3b3JrLGljaCxpY2huaXRlLGljaG8saWNob3IsaWNodGh1cyxpY2h1LGljaWNhLGljaWNsZSxpY2ljbGVkLGljaWx5LGljaW5lc3MsaWNpbmcsaWNvbixpY29uaWMsaWNvbmlzbSxpY29zaWFuLGljb3R5cGUsaWN0ZXJpYyxpY3RlcnVzLGljdGljLGljdHVhdGUsaWN0dXMsaWN5LGlkLGlkYWxpYSxpZGFudCxpZGRhdCxpZGUsaWRlYSxpZGVhZWQsaWRlYWZ1bCxpZGVhbCxpZGVhbGx5LGlkZWF0ZSxpZGVpc3QsaWRlbnRpYyxpZGVzLGlkZ2FoLGlkaWFzbSxpZGljLGlkaW9jeSxpZGlvbSxpZGlvdCxpZGlvdGN5LGlkaW90aWMsaWRpb3RyeSxpZGl0ZSxpZGl0b2wsaWRsZSxpZGxlZnVsLGlkbGVtYW4saWRsZXIsaWRsZXNldCxpZGxldHksaWRsaXNoLGlkbHksaWRvbCxpZG9sYSxpZG9saWZ5LGlkb2xpc20saWRvbGlzdCxpZG9saXplLGlkb2xvdXMsaWRvbHVtLGlkb25lYWwsaWRvcmdhbixpZG9zZSxpZHJ5bCxpZHlsLGlkeWxlcixpZHlsaXNtLGlkeWxpc3QsaWR5bGl6ZSxpZHlsbGljLGllLGlmLGlmZSxpZmZ5LGlnbG9vLGlnbmF0aWEsaWduYXZpYSxpZ25lb3VzLGlnbmlmeSxpZ25pdGUsaWduaXRlcixpZ25pdG9yLGlnbm9ibGUsaWdub2JseSxpZ25vcmUsaWdub3JlcixpZ25vdGUsaWd1YW5hLGlndWFuaWQsaWhpLGlobGVpdGUsaWhyYW0saWl3aSxpam1hLGlqb2xpdGUsaWthdCxpa2V5LGlrb25hLGlrcmEsaWxlYWMsaWxlaXRpcyxpbGVvbixpbGVzaXRlLGlsZXVtLGlsZXVzLGlsZXgsaWxpYSxpbGlhYyxpbGlhY3VzLGlsaWFoaSxpbGlhbCxpbGlhdSxpbGljaWMsaWxpY2luLGlsaW1hLGlsaXVtLGlsayxpbGthLGlsa2FuZSxpbGwsaWxsYXBzZSxpbGxlY2ssaWxsZWdhbCxpbGxlaXNtLGlsbGVpc3QsaWxsZXNzLGlsbGZhcmUsaWxsaWNpdCxpbGxpc2gsaWxsaXVtLGlsbG5lc3MsaWxsb2NhbCxpbGxvZ2ljLGlsbG95YWwsaWxsdGgsaWxsdWRlLGlsbHVkZXIsaWxsdW1lLGlsbHVtZXIsaWxsdXBpLGlsbHVyZSxpbGx1c29yLGlsbHksaWxvdCxpbHZhaXRlLGltYWdlLGltYWdlcixpbWFnZXJ5LGltYWdpbmUsaW1hZ2lzbSxpbWFnaXN0LGltYWdvLGltYW0saW1hbWFoLGltYW1hdGUsaW1hbWljLGltYXJldCxpbWJhbixpbWJhbmQsaW1iYXJnZSxpbWJhcmssaW1iYXJuLGltYmFzZWQsaW1iYXQsaW1iYXViYSxpbWJlLGltYmVkLGltYmVyLGltYmliZSxpbWJpYmVyLGltYm9uZG8saW1ib3NvbSxpbWJvd2VyLGltYnJleCxpbWJydWUsaW1icnV0ZSxpbWJ1ZSxpbWJ1cnNlLGltaSxpbWlkZSxpbWlkaWMsaW1pbmUsaW1pbm8saW1pdGFudCxpbWl0YXRlLGltbWFuZSxpbW1hc2ssaW1tZW5zZSxpbW1lcmQsaW1tZXJnZSxpbW1lcml0LGltbWVyc2UsaW1tZXcsaW1taSxpbW1pdCxpbW1peCxpbW1vcmFsLGltbW91bmQsaW1tdW5kLGltbXVuZSxpbW11cmUsaW1tdXRlLGltb25pdW0saW1wLGltcGFjayxpbXBhY3QsaW1wYWdlcyxpbXBhaW50LGltcGFpcixpbXBhbGEsaW1wYWxlLGltcGFsZXIsaW1wYWxsLGltcGFsbSxpbXBhbHN5LGltcGFuZSxpbXBhbmVsLGltcGFyLGltcGFyayxpbXBhcmwsaW1wYXJ0LGltcGFzc2UsaW1wYXN0ZSxpbXBhc3RvLGltcGF2ZSxpbXBhdmlkLGltcGF3bixpbXBlYWNoLGltcGVhcmwsaW1wZWRlLGltcGVkZXIsaW1wZWwsaW1wZW4saW1wZW5kLGltcGVudCxpbXBlcmlhLGltcGVyaWwsaW1wZXN0LGltcGV0cmUsaW1wZXR1cyxpbXBoZWUsaW1waSxpbXBpZXR5LGltcGluZ2UsaW1waW91cyxpbXBpc2gsaW1wbGFudCxpbXBsYXRlLGltcGxlYWQsaW1wbGV0ZSxpbXBsZXgsaW1wbGlhbCxpbXBsaW5nLGltcGxvZGUsaW1wbG9yZSxpbXBsdW1lLGltcGx5LGltcG9mbyxpbXBvbmUsaW1wb29yLGltcG9ydCxpbXBvc2FsLGltcG9zZSxpbXBvc2VyLGltcG9zdCxpbXBvdCxpbXBvdW5kLGltcHJlZyxpbXByZWduLGltcHJlc2EsaW1wcmVzZSxpbXByZXNzLGltcHJlc3QsaW1wcmltZSxpbXByaW50LGltcHJvb2YsaW1wcm92ZSxpbXBzaGlwLGltcHViaWMsaW1wdWduLGltcHVsc2UsaW1wdXJlLGltcHV0ZSxpbXB1dGVyLGltcHksaW1zaGksaW1zb25pYyxpbXUsaW4saW5hY2hpZCxpbmFkZXB0LGluYWdpbGUsaW5hamEsaW5hbmUsaW5hbmVseSxpbmFuZ2EsaW5hbml0eSxpbmFwdCxpbmFwdGx5LGluYXJjaCxpbmFybSxpbmF1Z3VyLGluYXhvbixpbmJlLGluYmVpbmcsaW5iZW50LGluYmlydGgsaW5ibG93LGluYmxvd24saW5ib2FyZCxpbmJvbmQsaW5ib3JuLGluYm91bmQsaW5icmVhZCxpbmJyZWFrLGluYnJlZCxpbmJyZWVkLGluYnJpbmcsaW5idWlsdCxpbmJ1cm50LGluYnVyc3QsaW5ieSxpbmNhcm4saW5jYXNlLGluY2FzdCxpbmNlbnNlLGluY2VwdCxpbmNlc3QsaW5jaCxpbmNoZWQsaW5jaHBpbixpbmNpZGUsaW5jaXNhbCxpbmNpc2UsaW5jaXNvcixpbmNpdGUsaW5jaXRlcixpbmNpdmljLGluY2xpbmUsaW5jbGlwLGluY2xvc2UsaW5jbHVkZSxpbmNsdXNhLGluY2x1c2UsaW5jb2csaW5jb21lLGluY29tZXIsaW5jb25udSxpbmNyYXNoLGluY3JlZXAsaW5jcmVzdCxpbmNyb3NzLGluY3J1c3QsaW5jdWJpLGluY3VidXMsaW5jdWRhbCxpbmN1ZGVzLGluY3VsdCxpbmN1cixpbmN1cnNlLGluY3VydmUsaW5jdXMsaW5jdXNlLGluY3V0LGluZGFiYSxpbmRhbixpbmRhbmUsaW5kYXJ0LGluZGF6aW4saW5kYXpvbCxpbmRlLGluZGVidCxpbmRlZWQsaW5kZWVkeSxpbmRlbmUsaW5kZW50LGluZGV4LGluZGV4ZWQsaW5kZXhlcixpbmRpYyxpbmRpY2FuLGluZGljZXMsaW5kaWNpYSxpbmRpY3QsaW5kaWduLGluZGlnbyxpbmRpdGUsaW5kaXRlcixpbmRpdW0saW5kb2dlbixpbmRvbGUsaW5kb2xlcyxpbmRvbHlsLGluZG9vcixpbmRvb3JzLGluZG9yc2UsaW5kb3h5bCxpbmRyYWZ0LGluZHJhd24saW5kcmksaW5kdWNlLGluZHVjZWQsaW5kdWNlcixpbmR1Y3QsaW5kdWUsaW5kdWxnZSxpbmR1bHQsaW5kdWx0byxpbmR1bmEsaW5kd2VsbCxpbmR5LGluZHlsLGluZHlsaWMsaW5lYXJ0aCxpbmVwdCxpbmVwdGx5LGluZXF1YWwsaW5lcm0saW5lcnQsaW5lcnRpYSxpbmVydGx5LGluZXNpdGUsaW5ldW50LGluZXhhY3QsaW5leGlzdCxpbmZhY2UsaW5mYWxsLGluZmFtZSxpbmZhbXksaW5mYW5jeSxpbmZhbmQsaW5mYW5nLGluZmFudCxpbmZhbnRhLGluZmFudGUsaW5mYXJjdCxpbmZhcmUsaW5mYXVzdCxpbmZlY3QsaW5mZWVkLGluZmVmdCxpbmZlbHQsaW5mZXIsaW5mZXJuLGluZmVybm8saW5mZXN0LGluZmlkZWwsaW5maWVsZCxpbmZpbGwsaW5maWxtLGluZmlybSxpbmZpdCxpbmZpeCxpbmZsYW1lLGluZmxhdGUsaW5mbGVjdCxpbmZsZXgsaW5mbGljdCxpbmZsb29kLGluZmxvdyxpbmZsdXgsaW5mb2xkLGluZm9ybSxpbmZyYSxpbmZyYWN0LGluZnVsYSxpbmZ1c2UsaW5mdXNlcixpbmcsaW5nYXRlLGluZ2VuaXQsaW5nZW51ZSxpbmdlc3QsaW5nZXN0YSxpbmdpdmVyLGluZ2xlLGluZ2xvYmUsaW5nb2luZyxpbmdvdCxpbmdyYWZ0LGluZ3JhaW4saW5ncmF0ZSxpbmdyZXNzLGluZ3Jvc3MsaW5ncm93LGluZ3Jvd24saW5ndWVuLGluZ3VsZixpbmhhYml0LGluaGFsZSxpbmhhbGVyLGluaGF1bCxpbmhhdXN0LGluaGVyZSxpbmhlcml0LGluaGlhdGUsaW5oaWJpdCxpbmh1bWFuLGluaHVtZSxpbmh1bWVyLGluaWFsLGluaW9tZSxpbmlvbixpbml0aWFsLGluaXRpcyxpbml0aXZlLGluamVjdCxpbmplbGx5LGluanVuY3QsaW5qdXJlLGluanVyZWQsaW5qdXJlcixpbmp1cnksaW5rLGlua2J1c2gsaW5rZW4saW5rZXIsaW5rZXQsaW5rZmlzaCxpbmtob3JuLGlua2lzaCxpbmtsZSxpbmtsZXNzLGlua2xpa2UsaW5rbGluZyxpbmtub3QsaW5rb3NpLGlua3BvdCxpbmtyb290LGlua3MsaW5rc2hlZCxpbmt3ZWVkLGlua3dlbGwsaW5rd29vZCxpbmt5LGlubGFpZCxpbmxhaWssaW5sYWtlLGlubGFuZCxpbmxhdXQsaW5sYXcsaW5sYXdyeSxpbmxheSxpbmxheWVyLGlubGVhayxpbmxldCxpbmxpZXIsaW5sb29rLGlubHksaW5seWluZyxpbm1hdGUsaW5tZWF0cyxpbm1vc3QsaW5uLGlubmF0ZSxpbm5laXR5LGlubmVyLGlubmVybHksaW5uZXJ2ZSxpbm5lc3MsaW5uZXN0LGlubmV0LGlubmluZyxpbm5sZXNzLGlubnlhcmQsaW5vY3l0ZSxpbm9nZW4saW5vZ2xpYSxpbm9saXRoLGlub21hLGlub25lLGlub3BpbmUsaW5vcmIsaW5vc2ljLGlub3Npbixpbm9zaXRlLGlub3dlcixpbnBoYXNlLGlucG9ydCxpbnBvdXIsaW5wdXNoLGlucHV0LGlucXVlc3QsaW5xdWlldCxpbnF1aXJlLGlucXVpcnksaW5yaW5nLGlucm8saW5yb2FkLGlucm9sbCxpbnJ1YixpbnJ1bixpbnJ1c2gsaW5zYWNrLGluc2FuZSxpbnNjdWxwLGluc2VhLGluc2VhbSxpbnNlY3QsaW5zZWUsaW5zZWVyLGluc2Vuc2UsaW5zZXJ0LGluc2V0LGluc2hhdmUsaW5zaGVsbCxpbnNoaXAsaW5zaG9lLGluc2hvb3QsaW5zaG9yZSxpbnNpZGUsaW5zaWRlcixpbnNpZ2h0LGluc2lnbmUsaW5zaXBpZCxpbnNpc3QsaW5zbmFyZSxpbnNvZmFyLGluc29sZSxpbnNvbGlkLGluc29vdGgsaW5zb3JiLGluc291bCxpbnNwYW4saW5zcGVhayxpbnNwZWN0LGluc3BpcmUsaW5zcG9rZSxpbnN0YWxsLGluc3RhbnQsaW5zdGFyLGluc3RhdGUsaW5zdGVhZCxpbnN0ZWFtLGluc3RlZXAsaW5zdGVwLGluc3RpbGwsaW5zdWxhLGluc3VsYXIsaW5zdWxpbixpbnN1bHNlLGluc3VsdCxpbnN1bmssaW5zdXJlLGluc3VyZWQsaW5zdXJlcixpbnN1cmdlLGluc3dhbXAsaW5zd2VsbCxpbnN3ZXB0LGluc3dpbmcsaW50YWN0LGludGFrZSxpbnRha2VyLGludGVnZXIsaW50ZWluZCxpbnRlbmQsaW50ZW5zZSxpbnRlbnQsaW50ZXIsaW50ZXJpbSxpbnRlcm4saW50ZXh0LGludGhyb3csaW50aWwsaW50aW1hLGludGltYWwsaW50aW5lLGludG8saW50b2VkLGludG9uZSxpbnRvbmVyLGludG9ydCxpbnRvd24saW50cmFkYSxpbnRyYWl0LGludHJhbnQsaW50cmVhdCxpbnRyaW5lLGludHJvaXQsaW50cnVkZSxpbnRydXNlLGludHJ1c3QsaW50dWJlLGludHVlLGludHVlbnQsaW50dWl0LGludHVybixpbnR3aXN0LGludWxhLGludWxhc2UsaW51bGluLGludWxvaWQsaW51bmN0LGludXJlLGludXJlZCxpbnVybixpbnV0aWxlLGludmFkZSxpbnZhZGVyLGludmFsaWQsaW52ZWlnaCxpbnZlaWwsaW52ZWluLGludmVudCxpbnZlcnNlLGludmVydCxpbnZlc3QsaW52aWdvcixpbnZpc2VkLGludml0YWwsaW52aXRlLGludml0ZWUsaW52aXRlcixpbnZpdmlkLGludm9pY2UsaW52b2tlLGludm9rZXIsaW52b2x2ZSxpbndhbGUsaW53YWxsLGlud2FyZCxpbndhcmRzLGlud2VhdmUsaW53ZWVkLGlud2ljayxpbndpbmQsaW53aXQsaW53aXRoLGlud29vZCxpbndvcmssaW53b3JuLGlud291bmQsaW53b3ZlbixpbndyYXAsaW53cml0LGlueW9pdGUsaW55b2tlLGlvLGlvZGF0ZSxpb2RpYyxpb2RpZGUsaW9kaW5lLGlvZGlzbSxpb2RpdGUsaW9kaXplLGlvZGl6ZXIsaW9kbyxpb2RvbCxpb2Rvc28saW9kb3VzLGlvZG94eSxpb2xpdGUsaW9uLGlvbmljLGlvbml1bSxpb25pemUsaW9uaXplcixpb25vZ2VuLGlvbm9uZSxpb3RhLGlvdGl6ZSxpcGVjYWMsaXBpZCxpcGlsLGlwb21lYSxpcHNlYW5kLGlwc2VpdHksaXJhY3VuZCxpcmFkZSxpcmF0ZSxpcmF0ZWx5LGlyZSxpcmVmdWwsaXJlbGVzcyxpcmVuZSxpcmVuaWMsaXJlbmljcyxpcmlhbixpcmlkLGlyaWRhbCxpcmlkYXRlLGlyaWRlcyxpcmlkaWFsLGlyaWRpYW4saXJpZGljLGlyaWRpbixpcmlkaW5lLGlyaWRpdGUsaXJpZGl1bSxpcmlkaXplLGlyaXMsaXJpc2VkLGlyaXNpbixpcml0aWMsaXJpdGlzLGlyayxpcmtzb21lLGlyb2ssaXJva28saXJvbixpcm9uZSxpcm9uZXIsaXJvbmljZSxpcm9uaXNoLGlyb25pc20saXJvbmlzdCxpcm9uaXplLGlyb25seSxpcm9ubWFuLGlyb255LGlycmlzb3IsaXJydXB0LGlzLGlzYWdvZ2UsaXNhZ29uLGlzYW1pbmUsaXNhdGF0ZSxpc2F0aWMsaXNhdGlkZSxpc2F0aW4saXNhem94eSxpc2JhLGlzY2hpYWMsaXNjaGlhbCxpc2NoaXVtLGlzY2h1cnksaXNlcmluZSxpc2VyaXRlLGlzaWRpdW0saXNpZG9pZCxpc2xhbmQsaXNsYW5keSxpc2xheSxpc2xlLGlzbGV0LGlzbGV0ZWQsaXNsb3QsaXNtLGlzbWFsLGlzbWF0aWMsaXNtZG9tLGlzbXksaXNvLGlzb2FteWwsaXNvYmFyLGlzb2JhcmUsaXNvYmFzZSxpc29iYXRoLGlzb2Nob3IsaXNvY29sYSxpc29jcmF0LGlzb2RvbnQsaXNvZmxvcixpc29nYW15LGlzb2dlbixpc29nZW55LGlzb2dvbixpc29ncmFtLGlzb2hlbCxpc29oeWV0LGlzb2xhdGUsaXNvbG9neSxpc29tZXIsaXNvbWVyZSxpc29tZXJ5LGlzb25lcGgsaXNvbm9teSxpc29ueW0saXNvbnlteSxpc29wYWcsaXNvcG9kLGlzb3BvbHksaXNvcHRpYyxpc29weXJlLGlzb3RhYyxpc290ZWx5LGlzb3RvbWUsaXNvdG9ueSxpc290b3BlLGlzb3RvcHksaXNvdHJvbixpc290eXBlLGlzb3hpbWUsaXNzZWksaXNzaXRlLGlzc3VhbnQsaXNzdWUsaXNzdWVyLGlzc3VpbmcsaXN0LGlzdGhtaSxpc3RobWljLGlzdGhtdXMsaXN0bGUsaXN0b2tlLGlzdXJldCxpc3Vyb2lkLGl0LGl0YWNpc20saXRhY2lzdCxpdGFsaWNzLGl0YWxpdGUsaXRjaCxpdGNoaW5nLGl0Y2h5LGl0Y3plLGl0ZW0saXRlbWluZyxpdGVtaXplLGl0ZW15LGl0ZXIsaXRlcmFudCxpdGVyYXRlLGl0aGVyLGl0bW8saXRvdWJvdSxpdHMsaXRzZWxmLGl0dXJpdGUsaXR6ZWJ1LGl2YSxpdmllZCxpdmluLGl2b3JpZWQsaXZvcmluZSxpdm9yaXN0LGl2b3J5LGl2eSxpdnlsaWtlLGl2eXdlZWQsaXZ5d29vZCxpdnl3b3J0LGl3YSxpd2Fpd2EsaXdpcyxpeG9kaWFuLGl4b2RpYyxpeG9kaWQsaXlvLGl6YXIsaXphcmQsaXpsZSxpem90ZSxpenRsZSxpenphcmQsaixqYWIsamFiYmVkLGphYmJlcixqYWJiaW5nLGphYmJsZSxqYWJlcnMsamFiaWEsamFiaXJ1LGphYm90LGphYnVsLGphY2FsLGphY2FtYXIsamFjYW1pLGphY2FtaW4samFjYW5hLGphY2FyZSxqYWNhdGUsamFjY2h1cyxqYWNlbnQsamFjaW50aCxqYWNrLGphY2thbCxqYWNrYXNzLGphY2tib3gsamFja2JveSxqYWNrZGF3LGphY2tlZW4samFja2VyLGphY2tldCxqYWNrZXR5LGphY2tsZWcsamFja21hbixqYWNrbyxqYWNrcm9kLGphY2tzYXcsamFja3RhbixqYWNvYnVzLGphY29ieSxqYWNvbmV0LGphY3RhbnQsamFjdSxqYWN1YXJ1LGphZGRlcixqYWRlLGphZGVkLGphZGVkbHksamFkZWl0ZSxqYWRlcnksamFkaXNoLGphZHksamFlZ2VyLGphZyxqYWdhdCxqYWdlcixqYWdnZWQsamFnZ2VyLGphZ2dlcnksamFnZ3ksamFnaXIsamFnbGEsamFnbGVzcyxqYWdvbmcsamFncmF0YSxqYWd1YSxqYWd1YXIsamFpbCxqYWlsYWdlLGphaWxkb20samFpbGVyLGphaWxpc2gsamFqbWFuLGpha2UsamFrZXMsamFrbyxqYWxhcCxqYWxhcGEsamFsYXBpbixqYWxrYXIsamFsb3B5LGphbG91c2UsamFtLGphbWEsamFtYW4samFtYixqYW1iZWF1LGphbWJvLGphbWJvbmUsamFtYm9vbCxqYW1ib3NhLGphbWRhbmksamFtaSxqYW1saWtlLGphbW1lcixqYW1teSxqYW1wYW4samFtcGFuaSxqYW13b29kLGphbmFwYSxqYW5hcGFuLGphbmUsamFuZ2FkYSxqYW5na2FyLGphbmdsZSxqYW5nbGVyLGphbmdseSxqYW5pdG9yLGphbmssamFua2VyLGphbm4samFubm9jayxqYW50dSxqYW51YSxqYW9iLGphcCxqYXBhbixqYXBlLGphcGVyLGphcGVyeSxqYXBpbmcsamFwaXNoLGphcXVpbWEsamFyLGphcmEsamFyYWd1YSxqYXJiaXJkLGphcmJsZSxqYXJib3QsamFyZmx5LGphcmZ1bCxqYXJnLGphcmdvbixqYXJrbWFuLGphcmwsamFybGRvbSxqYXJsZXNzLGphcm51dCxqYXJvb2wsamFycmEsamFycmFoLGphcnJpbmcsamFycnksamFydmV5LGphc2V5LGphc2V5ZWQsamFzbWluZSxqYXNtb25lLGphc3BlcixqYXNwZXJ5LGphc3BpcyxqYXNwb2lkLGphc3MsamFzc2lkLGphc3NvaWQsamF0aGEsamF0aSxqYXRvLGphdWRpZSxqYXVrLGphdW4samF1bmNlLGphdW5kZXIsamF1bnQsamF1bnRpZSxqYXVudHksamF1cCxqYXZhbGksamF2ZWxpbixqYXZlcixqYXcsamF3YWIsamF3Ym9uZSxqYXdlZCxqYXdmYWxsLGphd2Zpc2gsamF3Zm9vdCxqYXdsZXNzLGphd3ksamF5LGpheWhhd2ssamF5cGllLGpheXdhbGssamF6eixqYXp6ZXIsamF6emlseSxqYXp6eSxqZWFsb3VzLGplYW4samVhbnMsamVjb3JhbCxqZWNvcmluLGplZCxqZWRjb2NrLGplZGRpbmcsamVkZG9jayxqZWVsLGplZXAsamVlcixqZWVyZXIsamVlcmluZyxqZWVyeSxqZWZmLGplaHUsamVodXAsamVqdW5hbCxqZWp1bmUsamVqdW51bSxqZWxhYixqZWxpY2ssamVsbCxqZWxsaWNhLGplbGxpY28samVsbGllZCxqZWxsaWZ5LGplbGxpbHksamVsbG9pZCxqZWxseSxqZW1hZGFyLGplbW1pbHksamVtbXksamVua2luLGplbm5hLGplbm5ldCxqZW5uaWVyLGplbm55LGplb2ZhaWwsamVvcGFyZCxqZXJib2EsamVyZWVkLGplcmV6LGplcmliLGplcmssamVya2VyLGplcmtpbHksamVya2luLGplcmtpc2gsamVya3ksamVybCxqZXJtLGplcnF1ZSxqZXJxdWVyLGplcnJ5LGplcnNleSxqZXJ0LGplcnZpYSxqZXJ2aW5hLGplcnZpbmUsamVzcyxqZXNzYW15LGplc3NhbnQsamVzc2VkLGplc3N1cixqZXN0LGplc3RlZSxqZXN0ZXIsamVzdGZ1bCxqZXN0aW5nLGpldCxqZXRiZWFkLGpldGUsamV0c2FtLGpldHRhZ2UsamV0dGVkLGpldHRlcixqZXR0aWVkLGpldHRvbixqZXR0eSxqZXR3YXJlLGpld2JpcmQsamV3YnVzaCxqZXdlbCxqZXdlbGVyLGpld2VscnksamV3ZWx5LGpld2Zpc2gsamV6YWlsLGplemlhaCxqaGFyYWwsamhlZWwsamhvb2wsamhvdyxqaWIsamliYmFoLGppYmJlcixqaWJieSxqaWJlLGppYmhlYWQsamliaSxqaWJtYW4samlib2Esamlic3RheSxqaWNhbWEsamljYXJhLGppZmYsamlmZmxlLGppZmZ5LGppZyxqaWdnZXIsamlnZ2VycyxqaWdnZXQsamlnZ2V0eSxqaWdnaXNoLGppZ2dsZSxqaWdnbHksamlnZ3ksamlnbGlrZSxqaWdtYW4samloYWQsamlrdW5ndSxqaWxsZXQsamlsdCxqaWx0ZWUsamlsdGVyLGppbHRpc2gsamltYmFuZyxqaW1qYW0samltbXksamltcCxqaW1wbHksamluYSxqaW5nLGppbmdhbCxqaW5nbGUsamluZ2xlZCxqaW5nbGVyLGppbmdsZXQsamluZ2x5LGppbmdvLGppbmphLGppbmppbGksamluayxqaW5rZXIsamlua2V0LGppbmtsZSxqaW5rcyxqaW5uLGppbm5pLGppbm55LGppbnJpa2ksamlueCxqaXBwZXIsamlxdWksamlyYmxlLGppcmdhLGppdGksaml0bmV1cixqaXRuZXksaml0cm8saml0dGVyLGppdHRlcnMsaml0dGVyeSxqaXZhLGppdmUsaml4aWUsam8sam9iLGpvYmFkZSxqb2JhcmJlLGpvYmJlcixqb2JiZXJ5LGpvYmJldCxqb2JiaW5nLGpvYmJpc2gsam9iYmxlLGpvYmxlc3Msam9ibWFuLGpvYm8sam9jaCxqb2NrLGpvY2tlcixqb2NrZXksam9ja28sam9jb3F1ZSxqb2Nvc2Usam9jb3RlLGpvY3Usam9jdWxhcixqb2N1bSxqb2N1bWEsam9jdW5kLGpvZGVsLGpvZGVscixqb2Usam9lYnVzaCxqb2V3b29kLGpvZXksam9nLGpvZ2dlcixqb2dnbGUsam9nZ2xlcixqb2dnbHksam9obmluLGpvaW4sam9pbmFudCxqb2luZGVyLGpvaW5lcixqb2luZXJ5LGpvaW5pbmcsam9pbnQsam9pbnRlZCxqb2ludGVyLGpvaW50bHksam9pbnR5LGpvaXN0LGpvam9iYSxqb2tlLGpva2VsZXQsam9rZXIsam9raXNoLGpva2lzdCxqb2t1bCxqb2t5LGpvbGwsam9sbGllcixqb2xsaWZ5LGpvbGxpbHksam9sbGl0eSxqb2xsb3Asam9sbHksam9sdCxqb2x0ZXIsam9sdGluZyxqb2x0eSxqb25xdWUsam9ucXVpbCxqb29sYSxqb29tLGpvcmRhbixqb3JlZSxqb3J1bSxqb3NlaXRlLGpvc2gsam9zaGVyLGpvc2hpLGpvc2llLGpvc2tpbixqb3NzLGpvc3Nlcixqb3N0bGUsam9zdGxlcixqb3Qsam90YSxqb3Rpc2ksam90dGVyLGpvdHRpbmcsam90dHksam91YmFyYixqb3VnLGpvdWdoLGpvdWssam91bGUsam91bGVhbixqb3VuY2Usam91cm5hbCxqb3VybmV5LGpvdXJzLGpvdXN0LGpvdXN0ZXIsam92aWFsLGpvdyxqb3dhcixqb3dhcmksam93ZWwsam93ZXIsam93ZXJ5LGpvd2wsam93bGVyLGpvd2xpc2gsam93bG9wLGpvd2x5LGpvd3B5LGpvd3Nlcixqb3d0ZXIsam95LGpveWFuY2Usam95YW5jeSxqb3lhbnQsam95ZnVsLGpveWhvcCxqb3lsZWFmLGpveWxlc3Msam95bGV0LGpveW91cyxqb3lzb21lLGpveXdlZWQsanViYSxqdWJhdGUsanViYmFoLGp1YmJlLGp1YmUsanViaWxlZSxqdWJpbHVzLGp1Y2ssanVja2llcyxqdWQsanVkY29jayxqdWRleCxqdWRnZSxqdWRnZXIsanVkaWNlcyxqdWRvLGp1ZnRpLGp1ZyxqdWdhbCxqdWdhbGUsanVnYXRlLGp1Z2F0ZWQsanVnZXIsanVnZXJ1bSxqdWdmdWwsanVnZ2VyLGp1Z2dpbnMsanVnZ2xlLGp1Z2dsZXIsanVnbG9uZSxqdWd1bGFyLGp1Z3VsdW0sanVndW0sanVpY2UsanVpY2lseSxqdWljeSxqdWppdHN1LGp1anUsanVqdWJlLGp1anVpc20sanVqdWlzdCxqdWtlLGp1a2Vib3gsanVsZXAsanVsaWQsanVsaWRhbixqdWxpbyxqdWxvaWQsanVsb2xlLGp1bG9saW4sanVtYXJ0LGp1bWJhLGp1bWJsZSxqdW1ibGVyLGp1bWJseSxqdW1ibyxqdW1idWNrLGp1bWJ5LGp1bWVsbGUsanVtZW50LGp1bWZydSxqdW1tYSxqdW1wLGp1bXBlcixqdW1weSxqdW5jaXRlLGp1bmNvdXMsanVuZSxqdW5nbGUsanVuZ2xlZCxqdW5nbGksanVuZ2x5LGp1bmlhdGEsanVuaW9yLGp1bmlwZXIsanVuayxqdW5rZXIsanVua2V0LGp1bmtpbmcsanVua21hbixqdW50LGp1bnRhLGp1bnRvLGp1cGF0aSxqdXBlLGp1cG9uLGp1cmFsLGp1cmFsbHksanVyYW50LGp1cmFyYSxqdXJhdCxqdXJhdG9yLGp1cmUsanVyZWwsanVyaWRpYyxqdXJpbmcsanVyaXN0LGp1cm9yLGp1cnksanVyeW1hbixqdXNzZWwsanVzc2lvbixqdXNzaXZlLGp1c3NvcnksanVzdCxqdXN0ZW4sanVzdGljZSxqdXN0aWZ5LGp1c3RseSxqdXN0byxqdXQsanV0ZSxqdXRrYSxqdXR0aW5nLGp1dHR5LGp1dmVuYWwsanV2aWEsanV2aXRlLGp5bmdpbmUsanlueCxrLGthLGthYmF5YSxrYWJlbCxrYWJlcnUsa2FiaWV0LGthYnVraSxrYWNoaW4sa2FkYXlhLGthZGVpbixrYWRvcyxrYWZmaXIsa2FmaXIsa2FmaXJpbixrYWZpeixrYWZ0YSxrYWdvLGthZ3Usa2FoYSxrYWhhcixrYWhhdSxrYWhpbGksa2FodSxrYWh1bmEsa2FpLGthaWQsa2FpayxrYWlrYXJhLGthaWwsa2FpbmdhLGthaW5pdGUsa2FpbnNpLGthaW55bixrYWlyaW5lLGthaXNlcixrYWl0YWthLGthaXdpLGthamF3YWgsa2FrYSxrYWthcG8sa2FrYXIsa2FraSxrYWtrYWssa2Fra2Usa2FsYSxrYWxhc2llLGthbGUsa2FsZW1hLGthbGVuZHMsa2FsaSxrYWxpYW4sa2FsaXVtLGthbGxhaCxrYWxsZWdlLGthbG8sa2Fsb24sa2Fsb25nLGthbHBpcyxrYW1haGksa2FtYWxhLGthbWFuc2ksa2FtYW8sa2FtYXMsa2FtYXNzaSxrYW1iYWwsa2FtYm9oLGthbWUsa2FtZXJhZCxrYW1pYXMsa2FtaWNoaSxrYW1payxrYW1wb25nLGthbixrYW5hLGthbmFlLGthbmFnaSxrYW5hcCxrYW5hcmEsa2FuYXJpLGthbmF0LGthbmNoaWwsa2FuZGUsa2FuZG9sLGthbmVoLGthbmcsa2FuZ2Esa2FuZ2FuaSxrYW5raWUsa2FubnVtZSxrYW5vb24sa2FucyxrYW50ZWxlLGthbnRlbixrYW9saW4sa2FwYSxrYXBhaSxrYXBlaWthLGthcG9rLGthcHAsa2FwcGEsa2FwcGUsa2FwdXIsa2FwdXQsa2FyYWdhbixrYXJha2Esa2FyYWt1bCxrYXJhbXUsa2FyYW9rZSxrYXJhdGUsa2FyYXlhLGthcmJpLGthcmNoLGthcmVhbyxrYXJlZXRhLGthcmVsYSxrYXJpdGUsa2FybWEsa2FybWljLGthcm8sa2Fyb3NzLGthcm91LGthcnJlZSxrYXJyaSxrYXJyb28sa2Fyc2hhLGthcnN0LGthcnN0aWMsa2FydGVsLGthcnRvcyxrYXJ3YXIsa2FyeW9uLGthc2Esa2FzYmFoLGthc2Jla2Usa2FzaGVyLGthc2hnYSxrYXNoaSxrYXNoaW1hLGthc2lkYSxrYXNtLGthc3N1LGthc3R1cmEsa2F0LGthdGFyLGthdGNpbmEsa2F0aCxrYXRoYSxrYXRoYWwsa2F0aXBvLGthdG1vbixrYXRvZ2xlLGthdHN1cCxrYXR1a2Esa2F0dW4sa2F0dXJhaSxrYXR5ZGlkLGthdXJpLGthdmEsa2F2YWljLGthdmFzcyxrYXdha2Esa2F3aWthLGtheSxrYXlhayxrYXlha2VyLGtheWxlcyxrYXlvLGthemksa2F6b28sa2VhLGtlYWNoLGtlYWNvcm4sa2Vhd2Usa2ViLGtlYmFiLGtlYmJpZSxrZWJidWNrLGtlY2hlbCxrZWNrLGtlY2tsZSxrZWNrc3ksa2Vja3ksa2VkLGtlZGRhaCxrZWRnZSxrZWRnZXIsa2VkbG9jayxrZWVjaCxrZWVrLGtlZWtlcixrZWVsLGtlZWxhZ2Usa2VlbGVkLGtlZWxlcixrZWVsZmF0LGtlZWxpZSxrZWVsaW5nLGtlZWxtYW4sa2VlbHNvbixrZWVuLGtlZW5hLGtlZW5lZCxrZWVuZXIsa2Vlbmx5LGtlZXAsa2VlcGVyLGtlZXBpbmcsa2Vlc3Qsa2VldCxrZWV2ZSxrZWYsa2VmZmVsLGtlZmlyLGtlZmlyaWMsa2VnLGtlZ2xlcixrZWhheWEsa2VpdGEsa2VpdGxvYSxrZWt1bmEsa2VsY2hpbixrZWxkLGtlbGUsa2VsZWJlLGtlbGVoLGtlbGVrLGtlbGVwLGtlbGssa2VsbCxrZWxsYSxrZWxsaW9uLGtlbGx5LGtlbG9pZCxrZWxwLGtlbHBlcixrZWxwaWUsa2VscHksa2VsdCxrZWx0ZXIsa2VsdHksa2VsdmluLGtlbWIsa2VtcCxrZW1waXRlLGtlbXBsZSxrZW1wdCxrZW1weSxrZW4sa2VuYWYsa2VuYXJlaCxrZW5jaCxrZW5kLGtlbmRpcixrZW5keXIsa2VubG9yZSxrZW5tYXJrLGtlbm5lbCxrZW5uZXIsa2VubmluZyxrZW5ubyxrZW5vLGtlbm9zaXMsa2Vub3RpYyxrZW5zcGFjLGtlbnQsa2VueXRlLGtlcCxrZXBpLGtlcHQsa2VyYW5hLGtlcmFzaW4sa2VyYXQsa2VyYXRpbixrZXJhdHRvLGtlcmNob28sa2VyY2h1ZyxrZXJlbCxrZXJmLGtlcmZsYXAsa2VyZmxvcCxrZXJtZXMsa2VybWlzLGtlcm4sa2VybmVsLGtlcm5lcixrZXJuaXNoLGtlcm5pdGUsa2Vybm9zLGtlcm9nZW4sa2VycmllLGtlcnJpbCxrZXJyaXRlLGtlcnJ5LGtlcnNleSxrZXJzbGFtLGtlcnVnbWEsa2Vyd2hhbSxrZXJ5Z21hLGtlc3RyZWwsa2V0LGtldGEsa2V0YWwsa2V0Y2gsa2V0Y2h1cCxrZXRlbixrZXRlbmUsa2V0aXBpYyxrZXRvLGtldG9nZW4sa2V0b2wsa2V0b2xlLGtldG9uZSxrZXRvbmljLGtldG9zZSxrZXRvc2lzLGtldHRlLGtldHRpbmcsa2V0dGxlLGtldHRsZXIsa2V0dHksa2V0dWJhLGtldHVwYSxrZXR5bCxrZXVwLGtldmFsaW4sa2V2ZWwsa2V3cGllLGtleCxrZXh5LGtleSxrZXlhZ2Usa2V5ZWQsa2V5aG9sZSxrZXlsZXNzLGtleWxldCxrZXlsb2NrLGtleW5vdGUsa2V5d2F5LGtoYWRkYXIsa2hhZGksa2hhaG9vbixraGFpa2ksa2hhaXIsa2hhamEsa2hhanVyLGtoYWtpLGtoYWtpZWQsa2hhbGlmYSxraGFsc2Esa2hhbXNpbixraGFuLGtoYW5hdGUsa2hhbmRhLGtoYW5qYXIsa2hhbmplZSxraGFua2FoLGtoYW51bSxraGFyLGtoYXJhaixraGFydWEsa2hhc3Msa2hhdCxraGF0aWIsa2hhdHJpLGtoZWRpdmEsa2hlZGl2ZSxraGVwZXNoLGtoZXQsa2hpbGF0LGtoaXIsa2hpcmthLGtob2phLGtob2thLGtob3Qsa2h1LGtodWJiZXIsa2h1bGEsa2h1dGJhaCxraHZhdCxraWFjayxraWFraSxraWFsZWUsa2lhbmcsa2lhdWdoLGtpYmJlcixraWJibGUsa2liYmxlcixraWJlLGtpYmVpLGtpYml0a2Esa2liaXR6LGtpYmxhaCxraWJvc2gsa2lieSxraWNrLGtpY2tlZSxraWNrZXIsa2lja2luZyxraWNraXNoLGtpY2tvZmYsa2lja291dCxraWNrdXAsa2lkZGVyLGtpZGRpZXIsa2lkZGlzaCxraWRkdXNoLGtpZGR5LGtpZGhvb2Qsa2lkbGV0LGtpZGxpbmcsa2lkbmFwLGtpZG5leSxraWRza2luLGtpZHNtYW4sa2lla2llLGtpZWwsa2llcixraWV5ZSxraWthcixraWtlLGtpa2ksa2lrdSxraWt1ZWwsa2lrdW1vbixraWwsa2lsYWRqYSxraWxhaCxraWxhbixraWxkZWUsa2lsZWgsa2lsZXJnLGtpbGV5LGtpbGhpZyxraWxpYXJlLGtpbGltLGtpbGwsa2lsbGFzLGtpbGxjdSxraWxsZWVuLGtpbGxlcixraWxsaWNrLGtpbGxpbmcsa2lsbHksa2lsbixraWxuZXllLGtpbG5tYW4sa2lsbnJpYixraWxvLGtpbG9iYXIsa2lsb3RvbixraWxvdmFyLGtpbHAsa2lsdCxraWx0ZXIsa2lsdGllLGtpbHRpbmcsa2ltLGtpbWJhbmcsa2ltbmVsLGtpbW9ubyxraW4sa2luYSxraW5haCxraW5hc2Usa2luYm90ZSxraW5jaCxraW5jaGluLGtpbmNvYixraW5kLGtpbmRsZSxraW5kbGVyLGtpbmRseSxraW5kcmVkLGtpbmVwb3gsa2luZXNpYyxraW5lc2lzLGtpbmV0aWMsa2luZyxraW5nY29iLGtpbmdjdXAsa2luZ2RvbSxraW5nbGV0LGtpbmdseSxraW5ncGluLGtpbmdyb3csa2luayxraW5raGFiLGtpbmtpbHksa2lua2xlLGtpbmtsZWQsa2lua2x5LGtpbmt5LGtpbmxlc3Msa2lubyxraW5zaGlwLGtpbnNtYW4sa2ludGFyLGtpb2VhLGtpb3NrLGtpb3RvbWUsa2lwLGtpcGFnZSxraXBlLGtpcHBlZW4sa2lwcGVyLGtpcHB5LGtpcHNleSxraXBza2luLGtpcmksa2lyaW1vbixraXJrLGtpcmtlcixraXJraWZ5LGtpcmtpbmcsa2lya21hbixraXJtZXcsa2lybixraXJvbWJvLGtpcnNjaCxraXJ0bGUsa2lydGxlZCxraXJ2ZSxraXJ2ZXIsa2lzY2hlbixraXNoLGtpc2hlbixraXNob24sa2lzaHksa2lzbWV0LGtpc3JhLGtpc3Msa2lzc2FnZSxraXNzYXIsa2lzc2VyLGtpc3Npbmcsa2lzc3ksa2lzdCxraXN0ZnVsLGtpc3dhLGtpdCxraXRhYixraXRhYmlzLGtpdGFyLGtpdGNhdCxraXRjaGVuLGtpdGUsa2l0aCxraXRoZSxraXRpc2gsa2l0bGluZyxraXR0ZWwsa2l0dGVuLGtpdHRlcixraXR0bGUsa2l0dGxlcyxraXR0bHksa2l0dG9jayxraXR0dWwsa2l0dHksa2l2YSxraXZlcixraXZ1LGtpd2ksa2l5YXMsa2l5aSxrbGFmdGVyLGtsYW0sa2xhdmVybixrbGF4b24sa2xlcGh0LGtsZXB0aWMsa2xpY2tldCxrbGlwLGtsaXBib2ssa2xpcGRhcyxrbGlwcGUsa2xpcHBlbixrbGlzdGVyLGtsb20sa2xvcCxrbG9wcyxrbG9zaCxrbWV0LGtuYWIsa25hYmJsZSxrbmFjayxrbmFja2VyLGtuYWNreSxrbmFnLGtuYWdnZWQsa25hZ2d5LGtuYXAsa25hcGUsa25hcHBhbixrbmFwcGVyLGtuYXIsa25hcmssa25hcnJlZCxrbmFycnksa25hdmUsa25hdmVyeSxrbmF2ZXNzLGtuYXZpc2gsa25hd2VsLGtuZWFkLGtuZWFkZXIsa25lZSxrbmVlY2FwLGtuZWVkLGtuZWVsLGtuZWVsZXIsa25lZWxldCxrbmVlcGFkLGtuZWVwYW4sa25lbGwsa25lbHQsa25ldCxrbmV3LGtuZXosa25lemksa25pYXosa25pYXppLGtuaWNrLGtuaWNrZXIsa25pZmUsa25pZmVyLGtuaWdodCxrbml0LGtuaXRjaCxrbml0dGVkLGtuaXR0ZXIsa25pdHRsZSxrbml2ZWQsa25pdmV5LGtub2Isa25vYmJlZCxrbm9iYmVyLGtub2JibGUsa25vYmJseSxrbm9iYnksa25vY2ssa25vY2tlcixrbm9ja3VwLGtub2xsLGtub2xsZXIsa25vbGx5LGtub3Asa25vcGl0ZSxrbm9wcGVkLGtub3BwZXIsa25vcHB5LGtub3NwLGtub3NwZWQsa25vdCxrbm90dGVkLGtub3R0ZXIsa25vdHR5LGtub3V0LGtub3csa25vd2Usa25vd2VyLGtub3dpbmcsa25vd24sa251YixrbnViYmx5LGtudWJieSxrbnVibGV0LGtudWNrbGUsa251Y2tseSxrbnVyLGtudXJsLGtudXJsZWQsa251cmx5LGtudXQsa251dHR5LGtueWF6LGtueWF6aSxrbyxrb2Esa29hZSxrb2FsYSxrb2FsaSxrb2Isa29iYW4sa29iaSxrb2JpcmQsa29ib2xkLGtvYm9uZyxrb2J1LGtvZGEsa29kYWssa29kYWtlcixrb2Rha3J5LGtvZHJvLGtvZWwsa29mZixrb2Z0LGtvZnRnYXIsa29oZW1wLGtvaGwsa29odWEsa29pLGtvaWwsa29pbGEsa29pbG9uLGtvaW5lLGtvaW5vbixrb2phbmcsa29rYWtvLGtva2FtLGtva2FuLGtva2lsLGtva2lvLGtva2xhcyxrb2tsYXNzLGtva28sa29rb29uLGtva293YWksa29rcmEsa29rdSxrb2t1bSxrb2t1bWluLGtvbGEsa29sYWNoLGtvbGVhLGtvbGhveixrb2xraG9zLGtvbGtob3osa29sbGFzdCxrb2xsZXIsa29sbyxrb2xvYnVzLGtvbHN1bixrb21hdGlrLGtvbWJ1LGtvbW1vcyxrb21wZW5pLGtvbixrb25hLGtvbmFrLGtvbmdvbmksa29uZ3Usa29uaW5pLGtvbmphayxrb29rYSxrb29rZXJ5LGtvb2tyaSxrb29sYWgsa29vbWJhcixrb29ta2llLGtvb3RjaGEsa29wLGtvcGVjayxrb3BoLGtvcGksa29wcGEsa29wcGVuLGtvcHBpdGUsa29yLGtvcmEsa29yYWRqaSxrb3JhaXQsa29yYWthbixrb3Jhcmksa29yZSxrb3JlYyxrb3JlY2ksa29yZXJvLGtvcmksa29yaW4sa29yb25hLGtvcm92YSxrb3JyZWwsa29ydW5hLGtvcnplYyxrb3Msa29zaGVyLGtvc2luLGtvc29uZyxrb3N3aXRlLGtvdGFsLGtvdG8sa290dWt1LGtvdHdhbCxrb3R5bGUsa290eWxvcyxrb3Usa291bGFuLGtvdXphLGtvdmlsLGtvd2hhaSxrb3d0b3csa295YW4sa296byxrcmEsa3JhYWwsa3JhZnQsa3JhaXQsa3Jha2VuLGtyYWwsa3JhbWEsa3JhbixrcmFzLGtyYXNpcyxrcmF1c2VuLGtyYXV0LGtyZWlzLGtyZWxvcyxrcmVtbGluLGtyZW1zLGtyZW5nLGtyaWVrZXIsa3JpbW1lcixrcmluYSxrcm9ja2V0LGtyb21lLGtyb25hLGtyb25lLGtyb25lbixrcm9uZXIsa3Jvbm9yLGtyb251cixrcm9vbixrcm9zYSxrcnlwc2lzLGtyeXB0aWMsa3J5cHRvbCxrcnlwdG9uLGt1YW4sa3ViYSxrdWJiYSxrdWNoZW4sa3VkaXplLGt1ZG9zLGt1ZHUsa3VkenUsa3VlaSxrdWdlLGt1Z2VsLGt1aWNodWEsa3Vrcmksa3VrdSxrdWt1aSxrdWt1cGEsa3VsYSxrdWxhY2ssa3VsYWgsa3VsYWl0ZSxrdWxhayxrdWxhbmcsa3VsaW1pdCxrdWxtLGt1bG1ldCxrdW1iaSxrdW1oYXIsa3VtaXNzLGt1bW1lbCxrdW1xdWF0LGt1bXJhaCxrdW5haSxrdW5nLGt1bmssa3Vua3VyLGt1bnppdGUsa3VwaGFyLGt1cHBlcixrdXJiYXNoLGt1cmdhbixrdXJ1bWEsa3VydW5nLGt1cnVzLGt1cnZleSxrdXNhLGt1c2FtLGt1c2hhLGt1c2tpdGUsa3Vza29zLGt1c2t1cyxrdXN0aSxrdXN1bSxrdXRjaGEsa3V0dGFiLGt1dHRhcixrdXR0YXVyLGt1dmFzeixrdmFzcyxrdmludCxrdmludGVyLGt3YW1tZSxrd2FuLGt3YXJ0YSxrd2F6b2t1LGt5YWNrLGt5YWgsa3lhcixreWF0LGt5YXVuZyxreWwsa3lsZSxreWxpdGUsa3lsaXgsa3lyaW5lLGt5dGUsbCxsYSxsYWFnZXIsbGFhbmcsbGFiLGxhYmFyYSxsYWJhcnVtLGxhYmJhLGxhYmJlcixsYWJlZnksbGFiZWwsbGFiZWxlcixsYWJlbGxhLGxhYmlhLGxhYmlhbCxsYWJpYXRlLGxhYmlsZSxsYWJpb3NlLGxhYmlzLGxhYml1bSxsYWJsYWIsbGFib3IsbGFib3JlZCxsYWJvcmVyLGxhYm91cixsYWJyYSxsYWJyYWwsbGFicmV0LGxhYnJvaWQsbGFicm9zZSxsYWJydW0sbGFicnlzLGxhYyxsYWNjYSxsYWNjYWljLGxhY2Nhc2UsbGFjY29sLGxhY2UsbGFjZWQsbGFjZW1hbixsYWNlcG9kLGxhY2VyLGxhY2VyeSxsYWNldCxsYWNoZSxsYWNoZXMsbGFjaHNhLGxhY2lseSxsYWNpbmcsbGFjaW5pYSxsYWNpcyxsYWNrLGxhY2tlcixsYWNrZXksbGFja3dpdCxsYWNtb2lkLGxhY211cyxsYWNvbmljLGxhY3F1ZXIsbGFjcnltLGxhY3RhbSxsYWN0YW50LGxhY3RhcnksbGFjdGFzZSxsYWN0YXRlLGxhY3RlYWwsbGFjdGVhbixsYWN0aWMsbGFjdGlkLGxhY3RpZGUsbGFjdGlmeSxsYWN0aW0sbGFjdG8sbGFjdG9pZCxsYWN0b2wsbGFjdG9uZSxsYWN0b3NlLGxhY3R5bCxsYWN1bmEsbGFjdW5hZSxsYWN1bmFsLGxhY3VuYXIsbGFjdW5lLGxhY3dvcmssbGFjeSxsYWQsbGFkYWtpbixsYWRhbnVtLGxhZGRlcixsYWRkZXJ5LGxhZGRlc3MsbGFkZGllLGxhZGRpc2gsbGFkZG9jayxsYWRlLGxhZGVtYW4sbGFkZW4sbGFkZXIsbGFkaG9vZCxsYWRpZXMsbGFkaWZ5LGxhZGluZyxsYWRraW4sbGFkbGUsbGFkbGVyLGxhZHJvbmUsbGFkeSxsYWR5YnVnLGxhZHlkb20sbGFkeWZseSxsYWR5ZnksbGFkeWlzaCxsYWR5aXNtLGxhZHlraW4sbGFkeWx5LGxhZXQsbGFldGksbGFldGljLGxhZyxsYWdhbixsYWdhcnRvLGxhZ2VuLGxhZ2VuYSxsYWdlbmQsbGFnZXIsbGFnZXR0byxsYWdnYXIsbGFnZ2FyZCxsYWdnZWQsbGFnZ2VuLGxhZ2dlcixsYWdnaW4sbGFnZ2luZyxsYWdsYXN0LGxhZ25hLGxhZ29vbixsYWd3b3J0LGxhaSxsYWljLGxhaWNhbCxsYWljaCxsYWljaXNtLGxhaWNpdHksbGFpY2l6ZSxsYWlkLGxhaWdoLGxhaW4sbGFpbmUsbGFpb3NlLGxhaXIsbGFpcmFnZSxsYWlyZCxsYWlyZGllLGxhaXJkbHksbGFpcm1hbixsYWlyeSxsYWl0eSxsYWssbGFrYXRvaSxsYWtlLGxha2VsZXQsbGFrZXIsbGFraWUsbGFraW5nLGxha2lzaCxsYWtpc20sbGFraXN0LGxha3ksbGFsYW5nLGxhbGwsbGFsbGluZyxsYWxvLGxhbSxsYW1hLGxhbWFpYyxsYW1hbnksbGFtYixsYW1iYSxsYW1iYWxlLGxhbWJkYSxsYW1iZWF1LGxhbWJlbnQsbGFtYmVyLGxhbWJlcnQsbGFtYmllLGxhbWJpc2gsbGFtYmtpbixsYW1ibHksbGFtYm95cyxsYW1ieSxsYW1lLGxhbWVkaCxsYW1lbCxsYW1lbGxhLGxhbWVseSxsYW1lbnQsbGFtZXRlcixsYW1ldHRhLGxhbWlhLGxhbWlnZXIsbGFtaWlkLGxhbWluLGxhbWluYSxsYW1pbmFlLGxhbWluYXIsbGFtaXNoLGxhbWl0ZXIsbGFtbWFzLGxhbW1lcixsYW1tb2NrLGxhbW15LGxhbW5pZCxsYW1ub2lkLGxhbXAsbGFtcGFkLGxhbXBhcyxsYW1wZXIsbGFtcGVybixsYW1wZXJzLGxhbXBmbHksbGFtcGZ1bCxsYW1waW5nLGxhbXBpb24sbGFtcGlzdCxsYW1wbGV0LGxhbXBsaXQsbGFtcG1hbixsYW1wb29uLGxhbXByZXksbGFuLGxhbmFzLGxhbmF0ZSxsYW5hdGVkLGxhbmF6LGxhbmNlLGxhbmNlZCxsYW5jZWx5LGxhbmNlcixsYW5jZXMsbGFuY2V0LGxhbmNoYSxsYW5kLGxhbmRhdSxsYW5kZWQsbGFuZGVyLGxhbmRpbmcsbGFuZG1hbixsYW5kbWlsLGxhbmUsbGFuZXRlLGxhbmV3YXksbGFuZXksbGFuZ2FoYSxsYW5nY2EsbGFuZ2ksbGFuZ2l0ZSxsYW5nbGUsbGFuZ29vbixsYW5nc2F0LGxhbmd1ZWQsbGFuZ3VldCxsYW5ndWlkLGxhbmd1b3IsbGFuZ3VyLGxhbmlhcnksbGFuaWF0ZSxsYW5pZmljLGxhbmlvaWQsbGFuaXN0YSxsYW5rLGxhbmtldCxsYW5raWx5LGxhbmtpc2gsbGFua2x5LGxhbmt5LGxhbm5lcixsYW5vbGluLGxhbm9zZSxsYW5zYXQsbGFuc2VoLGxhbnNvbixsYW50LGxhbnRhY2EsbGFudGVybixsYW50dW0sbGFudWdvLGxhbnVtLGxhbngsbGFueWFyZCxsYXAsbGFwYWNobyxsYXBjb2NrLGxhcGVsLGxhcGVsZXIsbGFwZnVsLGxhcGlsbG8sbGFwb24sbGFwcGFnZSxsYXBwZWQsbGFwcGVyLGxhcHBldCxsYXBwaW5nLGxhcHNlLGxhcHNlZCxsYXBzZXIsbGFwc2ksbGFwc2luZyxsYXB3aW5nLGxhcHdvcmssbGFxdWVhcixsYXF1ZXVzLGxhcixsYXJjZW55LGxhcmNoLGxhcmNoZW4sbGFyZCxsYXJkZXIsbGFyZGl0ZSxsYXJkb24sbGFyZHksbGFyZ2UsbGFyZ2VseSxsYXJnZW4sbGFyZ2VzcyxsYXJnaXNoLGxhcmdvLGxhcmksbGFyaWF0LGxhcmljayxsYXJpZCxsYXJpZ28sbGFyaWdvdCxsYXJpaWQsbGFyaW4sbGFyaW5lLGxhcml4aW4sbGFyayxsYXJrZXIsbGFya2luZyxsYXJraXNoLGxhcmt5LGxhcm1pZXIsbGFybmF4LGxhcm9pZCxsYXJydXAsbGFycnksbGFydmEsbGFydmFlLGxhcnZhbCxsYXJ2YXRlLGxhcnZlLGxhcnZ1bGUsbGFyeW54LGxhcyxsYXNhLGxhc2NhcixsYXNlcixsYXNoLGxhc2hlcixsYXNrLGxhc2tldCxsYXNxdWUsbGFzcyxsYXNzZXQsbGFzc2llLGxhc3NvLGxhc3NvY2ssbGFzc29lcixsYXN0LGxhc3RhZ2UsbGFzdGVyLGxhc3RpbmcsbGFzdGx5LGxhc3RyZSxsYXN0eSxsYXQsbGF0YSxsYXRhaCxsYXRjaCxsYXRjaGVyLGxhdGNoZXQsbGF0ZSxsYXRlYnJhLGxhdGVkLGxhdGVlbixsYXRlbHksbGF0ZW4sbGF0ZW5jZSxsYXRlbmN5LGxhdGVudCxsYXRlcixsYXRlcmEsbGF0ZXJhZCxsYXRlcmFsLGxhdGVzdCxsYXRleCxsYXRoLGxhdGhlLGxhdGhlZSxsYXRoZW4sbGF0aGVyLGxhdGhlcnksbGF0aGluZyxsYXRoeSxsYXRpY2VzLGxhdGlnbyxsYXRpb24sbGF0aXNoLGxhdGl0YXQsbGF0aXRlLGxhdG9teSxsYXRyYW50LGxhdHJpYSxsYXRyaW5lLGxhdHJvLGxhdHJvYmUsbGF0cm9uLGxhdHRlbixsYXR0ZXIsbGF0dGljZSxsYXR1cyxsYXVhbixsYXVkLGxhdWRlcixsYXVkaXN0LGxhdWdoLGxhdWdoZWUsbGF1Z2hlcixsYXVnaHksbGF1aWEsbGF1bixsYXVuY2UsbGF1bmNoLGxhdW5kLGxhdW5kZXIsbGF1bmRyeSxsYXVyLGxhdXJhLGxhdXJhdGUsbGF1cmVsLGxhdXJpYyxsYXVyaW4sbGF1cml0ZSxsYXVyb25lLGxhdXJ5bCxsYXZhLGxhdmFibGUsbGF2YWJvLGxhdmFjcmUsbGF2YWdlLGxhdmFuZ2EsbGF2YW50LGxhdmFyZXQsbGF2YXRpYyxsYXZlLGxhdmVlcixsYXZlcixsYXZpYyxsYXZpc2gsbGF2b2x0YSxsYXcsbGF3Ym9vayxsYXdmdWwsbGF3aW5nLGxhd2lzaCxsYXdrLGxhd2xlc3MsbGF3bGlrZSxsYXdtYW4sbGF3bixsYXduZWQsbGF3bmVyLGxhd25sZXQsbGF3bnksbGF3c3VpdCxsYXd0ZXIsbGF3eWVyLGxhd3llcnksbGF3enksbGF4LGxheGF0ZSxsYXhpc20sbGF4aXN0LGxheGl0eSxsYXhseSxsYXhuZXNzLGxheSxsYXlhd2F5LGxheWJhY2ssbGF5Ym95LGxheWVyLGxheWVyZWQsbGF5ZXJ5LGxheWV0dGUsbGF5aW5nLGxheWxhbmQsbGF5bWFuLGxheW5lLGxheW9mZixsYXlvdXQsbGF5b3ZlcixsYXlzaGlwLGxheXN0b3csbGF6YXIsbGF6YXJldCxsYXphcmx5LGxhemUsbGF6aWx5LGxhenVsZSxsYXp1bGksbGF6eSxsYXp5aXNoLGxlYSxsZWFjaCxsZWFjaGVyLGxlYWNoeSxsZWFkLGxlYWRhZ2UsbGVhZGVkLGxlYWRlbixsZWFkZXIsbGVhZGluLGxlYWRpbmcsbGVhZG1hbixsZWFkb2ZmLGxlYWRvdXQsbGVhZHdheSxsZWFkeSxsZWFmLGxlYWZhZ2UsbGVhZmJveSxsZWFmY3VwLGxlYWZkb20sbGVhZmVkLGxlYWZlbixsZWFmZXIsbGVhZmVyeSxsZWFmaXQsbGVhZmxldCxsZWFmeSxsZWFndWUsbGVhZ3VlcixsZWFrLGxlYWthZ2UsbGVha2VyLGxlYWt5LGxlYWwsbGVhbGFuZCxsZWFsbHksbGVhbHR5LGxlYW0sbGVhbWVyLGxlYW4sbGVhbmVyLGxlYW5pbmcsbGVhbmlzaCxsZWFubHksbGVhbnQsbGVhcCxsZWFwZXIsbGVhcGluZyxsZWFwdCxsZWFyLGxlYXJuLGxlYXJuZWQsbGVhcm5lcixsZWFybnQsbGVhc2UsbGVhc2VyLGxlYXNoLGxlYXNpbmcsbGVhc293LGxlYXN0LGxlYXQsbGVhdGgsbGVhdGhlcixsZWF0bWFuLGxlYXZlLGxlYXZlZCxsZWF2ZW4sbGVhdmVyLGxlYXZlcyxsZWF2aW5nLGxlYXZ5LGxlYXdpbGwsbGViYW4sbGViYmVrLGxlY2FtYSxsZWNoLGxlY2hlcixsZWNoZXJ5LGxlY2h3ZSxsZWNrLGxlY2tlcixsZWN0ZXJuLGxlY3Rpb24sbGVjdG9yLGxlY3R1YWwsbGVjdHVyZSxsZWN5dGgsbGVkLGxlZGUsbGVkZW4sbGVkZ2UsbGVkZ2VkLGxlZGdlcixsZWRnaW5nLGxlZGd5LGxlZG9sLGxlZSxsZWVjaCxsZWVjaGVyLGxlZWNoZXMsbGVlZCxsZWVmYW5nLGxlZWssbGVla2lzaCxsZWVreSxsZWVwLGxlZXBpdCxsZWVyLGxlZXJpbHksbGVlcmlzaCxsZWVyeSxsZWVzLGxlZXQsbGVldG1hbixsZWV3YW4sbGVld2FyZCxsZWV3YXksbGVld2lsbCxsZWZ0LGxlZnRpc2gsbGVmdGlzbSxsZWZ0aXN0LGxlZyxsZWdhY3ksbGVnYWwsbGVnYWxseSxsZWdhdGUsbGVnYXRlZSxsZWdhdG8sbGVnYXRvcixsZWdlbmQsbGVnZW5kYSxsZWdlcixsZWdlcyxsZWdnZWQsbGVnZ2VyLGxlZ2dpbmcsbGVnZ3ksbGVnaG9ybixsZWdpYmxlLGxlZ2libHksbGVnaWZpYyxsZWdpb24sbGVnaXN0LGxlZ2l0LGxlZ2l0aW0sbGVnbGVuLGxlZ2xlc3MsbGVnbGV0LGxlZ2xpa2UsbGVnbWFuLGxlZ29hLGxlZ3B1bGwsbGVncm9wZSxsZWd1YSxsZWd1YW4sbGVndW1lLGxlZ3VtZW4sbGVndW1pbixsZWhyLGxlaHJtYW4sbGVodWEsbGVpLGxlaXN0ZXIsbGVpc3VyZSxsZWssbGVrYWNoLGxla2FuZSxsZWtoYSxsZW1hbixsZW1lbCxsZW1tYSxsZW1tYXRhLGxlbW1pbmcsbGVtbmFkLGxlbW9uLGxlbW9ueSxsZW1waXJhLGxlbXVyLGxlbXVyZXMsbGVtdXJpZCxsZW5hZCxsZW5hcmQsbGVuY2gsbGVuZCxsZW5kZWUsbGVuZGVyLGxlbmUsbGVuZ3RoLGxlbmd0aHksbGVuaWVudCxsZW5pZnksbGVuaXMsbGVuaXRpYyxsZW5pdHksbGVubm93LGxlbm8sbGVucyxsZW5zZWQsbGVudCxsZW50aCxsZW50aWdvLGxlbnRpbCxsZW50aXNjLGxlbnRpc2ssbGVudG8sbGVudG9pZCxsZW50b3IsbGVudG91cyxsZW52b2ksbGVudm95LGxlb25pbmUsbGVvbml0ZSxsZW9wYXJkLGxlb3RhcmQsbGVwYSxsZXBlcixsZXBlcmVkLGxlcG9yaWQsbGVwcmEsbGVwcmljLGxlcHJvaWQsbGVwcm9tYSxsZXByb3NlLGxlcHJvc3ksbGVwcm91cyxsZXB0aWQsbGVwdGl0ZSxsZXB0b21lLGxlcHRvbixsZXB0dXMsbGVyb3QsbGVycCxsZXJyZXQsbGVzY2hlLGxlc2lvbixsZXNpeSxsZXNzLGxlc3NlZSxsZXNzZW4sbGVzc2VyLGxlc3NpdmUsbGVzc24sbGVzc29uLGxlc3NvcixsZXN0LGxlc3RyYWQsbGV0LGxldGNoLGxldGNoeSxsZXRkb3duLGxldGUsbGV0aGFsLGxldG9mZixsZXR0ZW4sbGV0dGVyLGxldHRyaW4sbGV0dHVjZSxsZXR1cCxsZXUsbGV1Y2gsbGV1Y2luZSxsZXVjaXNtLGxldWNpdGUsbGV1Y28sbGV1Y29pZCxsZXVjb21hLGxldWNvbixsZXVjb3VzLGxldWN5bCxsZXVkLGxldWssbGV1bWEsbGV2LGxldmFuY2UsbGV2YW50LGxldmF0b3IsbGV2ZWUsbGV2ZWwsbGV2ZWxlcixsZXZlbGx5LGxldmVyLGxldmVyZXIsbGV2ZXJldCxsZXZlcnMsbGV2aWVyLGxldmluLGxldmlyLGxldml0eSxsZXZvLGxldnVsaWMsbGV2dWxpbixsZXZ5LGxldnlpc3QsbGV3LGxld2QsbGV3ZGx5LGxld2lzLGxld3RoLGxleGlhLGxleGljYWwsbGV4aWNvbixsZXksbGV5bGFuZCxsZXlzaW5nLGxpLGxpYWJsZSxsaWFpc29uLGxpYW5hLGxpYW5nLGxpYXIsbGlhcmQsbGliYW50LGxpYmF0ZSxsaWJiZXIsbGliYmV0LGxpYmJyYSxsaWJlbCxsaWJlbGVlLGxpYmVsZXIsbGliZXIsbGliZXJhbCxsaWJlcnR5LGxpYmlkbyxsaWJrZW4sbGlicmEsbGlicmFsLGxpYnJhcnksbGlicmF0ZSxsaWNjYSxsaWNlbnNlLGxpY2gsbGljaGFtLGxpY2hlbixsaWNoZW55LGxpY2hpLGxpY2l0LGxpY2l0bHksbGljayxsaWNrZXIsbGlja2luZyxsaWNvcm4sbGljb3JuZSxsaWN0b3IsbGlkLGxpZGRlZCxsaWRkZXIsbGlkZ2F0ZSxsaWRsZXNzLGxpZSxsaWVkLGxpZWYsbGllZ2UsbGllZ2VseSxsaWVnZXIsbGllbixsaWVuYWwsbGllbmVlLGxpZW5pYyxsaWVub3IsbGllcixsaWVybmUsbGllcnJlLGxpZXNoLGxpZXUsbGlldWUsbGlldmUsbGlmZSxsaWZlZGF5LGxpZmVmdWwsbGlmZWxldCxsaWZlcixsaWZleSxsaWZvLGxpZnQsbGlmdGVyLGxpZnRpbmcsbGlmdG1hbixsaWdhYmxlLGxpZ2FzLGxpZ2F0ZSxsaWdhdG9yLGxpZ2dlcixsaWdodCxsaWdodGVuLGxpZ2h0ZXIsbGlnaHRseSxsaWduZSxsaWduaWZ5LGxpZ25pbixsaWduaXRlLGxpZ25vbmUsbGlnbm9zZSxsaWdudW0sbGlndWxhLGxpZ3VsYXIsbGlndWxlLGxpZ3VsaW4sbGlndXJlLGxpaW4sbGlqYSxsaWthYmxlLGxpa2UsbGlrZWx5LGxpa2VuLGxpa2VyLGxpa2luLGxpa2luZyxsaWtub24sbGlsYWMsbGlsYWNpbixsaWxhY2t5LGxpbGUsbGlsaWVkLGxpbGwsbGlsdCxsaWx5LGxpbHlmeSxsaW0sbGltYWNlbCxsaW1hY29uLGxpbWFuLGxpbWIsbGltYmFsLGxpbWJhdCxsaW1iYXRlLGxpbWJlY2ssbGltYmVkLGxpbWJlcixsaW1iZXJzLGxpbWJpYyxsaW1iaWUsbGltYm8sbGltYm91cyxsaW1idXMsbGltYnksbGltZSxsaW1lYWRlLGxpbWVtYW4sbGltZW4sbGltZXIsbGltZXMsbGltZXR0YSxsaW1leSxsaW1pbmFsLGxpbWluZyxsaW1pdCxsaW1pdGFsLGxpbWl0ZWQsbGltaXRlcixsaW1tYSxsaW1tZXIsbGltbW9jayxsaW1tdSxsaW1uLGxpbW5lcixsaW1uZXJ5LGxpbW5pYWQsbGltbml0ZSxsaW1vaWQsbGltb25pbixsaW1vc2UsbGltb3VzLGxpbXAsbGltcGVyLGxpbXBldCxsaW1waWQsbGltcGlseSxsaW1waW4sbGltcGluZyxsaW1waXNoLGxpbXBraW4sbGltcGx5LGxpbXBzeSxsaW1weSxsaW1zeSxsaW11LGxpbXVsaWQsbGlteSxsaW4sbGluYSxsaW5hYmxlLGxpbmFnYSxsaW5hZ2UsbGluYWxvYSxsaW5hbG9sLGxpbmNoLGxpbmNoZXQsbGluY3R1cyxsaW5kYW5lLGxpbmRlbixsaW5kZXIsbGluZG8sbGluZSxsaW5lYSxsaW5lYWdlLGxpbmVhbCxsaW5lYXIsbGluZWF0ZSxsaW5lY3V0LGxpbmVkLGxpbmVsZXQsbGluZW1hbixsaW5lbixsaW5lcixsaW5nLGxpbmdhLGxpbmdlLGxpbmdlbCxsaW5nZXIsbGluZ28sbGluZ3RvdyxsaW5ndWEsbGluZ3VhbCxsaW5ndWV0LGxpbmd1bGEsbGluZ3ksbGluaGEsbGluaGF5LGxpbmllLGxpbmluLGxpbmluZyxsaW5pdGlzLGxpbml5YSxsaW5qYSxsaW5qZSxsaW5rLGxpbmthZ2UsbGlua2JveSxsaW5rZWQsbGlua2VyLGxpbmtpbmcsbGlua21hbixsaW5rcyxsaW5reSxsaW5uLGxpbm5ldCxsaW5vLGxpbm9saWMsbGlub2xpbixsaW5vbixsaW5vdXMsbGlub3hpbixsaW5veHluLGxpbnBpbixsaW5zZWVkLGxpbnNleSxsaW50LGxpbnRlbCxsaW50ZW4sbGludGVyLGxpbnRlcm4sbGludGllLGxpbnR5LGxpbndvb2QsbGlueSxsaW9uLGxpb25jZWwsbGlvbmVsLGxpb25lc3MsbGlvbmV0LGxpb25pc20sbGlvbml6ZSxsaW9ubHksbGlwLGxpcGEsbGlwYXJpZCxsaXBhc2UsbGlwZW1pYSxsaXBpZGUsbGlwaW4sbGlwbGVzcyxsaXBsZXQsbGlwbGlrZSxsaXBvaWQsbGlwb21hLGxpcG9wb2QsbGlwb3NpcyxsaXBwZWQsbGlwcGVuLGxpcHBlcixsaXBwaW5nLGxpcHB5LGxpcHVyaWEsbGlwd29yayxsaXF1YXRlLGxpcXVlZnksbGlxdWV1cixsaXF1aWQsbGlxdWlkeSxsaXF1b3IsbGlyYSxsaXJhdGUsbGlyZSxsaXJlbGxhLGxpcyxsaXNlcmUsbGlzaCxsaXNrLGxpc2xlLGxpc3AsbGlzcGVyLGxpc3B1bmQsbGlzcyxsaXNzb20sbGlzc29tZSxsaXN0LGxpc3RlZCxsaXN0ZWwsbGlzdGVuLGxpc3RlcixsaXN0aW5nLGxpc3RyZWQsbGl0LGxpdGFueSxsaXRhcyxsaXRjaCxsaXRjaGksbGl0ZSxsaXRlcixsaXRlcmFsLGxpdGgsbGl0aGUsbGl0aGVseSxsaXRoaSxsaXRoaWEsbGl0aGljLGxpdGhpZnksbGl0aGl0ZSxsaXRoaXVtLGxpdGhvLGxpdGhvaWQsbGl0aG91cyxsaXRoeSxsaXRtdXMsbGl0b3RlcyxsaXRyYSxsaXRzdGVyLGxpdHRlbixsaXR0ZXIsbGl0dGVyeSxsaXR0bGUsbGl0dWl0ZSxsaXR1cmd5LGxpdHVzLGxpdHV1cyxsaXR6LGxpdmFibGUsbGl2ZSxsaXZlZCxsaXZlZG8sbGl2ZWx5LGxpdmVuLGxpdmVyLGxpdmVyZWQsbGl2ZXJ5LGxpdmlkLGxpdmlkbHksbGl2aWVyLGxpdmluZyxsaXZvcixsaXZyZSxsaXdhbixsaXhpdmUsbGl6YXJkLGxsYW1hLGxsYW5vLGxsYXV0dSxsbHluLGxvLGxvYSxsb2FjaCxsb2FkLGxvYWRhZ2UsbG9hZGVkLGxvYWRlbixsb2FkZXIsbG9hZGluZyxsb2FmLGxvYWZlcixsb2FmaW5nLGxvYWZsZXQsbG9hbSxsb2FtaWx5LGxvYW1pbmcsbG9hbXksbG9hbixsb2FuZXIsbG9hbmluLGxvYXRoLGxvYXRoZSxsb2F0aGVyLGxvYXRobHksbG9hdmUsbG9iLGxvYmFsLGxvYmFyLGxvYmF0ZSxsb2JhdGVkLGxvYmJlcixsb2JiaXNoLGxvYmJ5LGxvYmJ5ZXIsbG9iY29jayxsb2JlLGxvYmVkLGxvYmVsZXQsbG9iZWxpbixsb2JmaWcsbG9iaW5nLGxvYmlwZWQsbG9ibyxsb2JvbGEsbG9ib3NlLGxvYnN0ZXIsbG9idGFpbCxsb2J1bGFyLGxvYnVsZSxsb2J3b3JtLGxvY2EsbG9jYWJsZSxsb2NhbCxsb2NhbGUsbG9jYWxseSxsb2NhbmRhLGxvY2F0ZSxsb2NhdG9yLGxvY2gsbG9jaGFnZSxsb2NoYW4sbG9jaGlhLGxvY2hpYWwsbG9jaHVzLGxvY2h5LGxvY2ksbG9jayxsb2NrYWdlLGxvY2tib3gsbG9ja2VkLGxvY2tlcixsb2NrZXQsbG9ja2Z1bCxsb2NraW5nLGxvY2tqYXcsbG9ja2xldCxsb2NrbWFuLGxvY2tvdXQsbG9ja3Bpbixsb2NrcmFtLGxvY2t1cCxsb2NreSxsb2NvLGxvY29pc20sbG9jdWxhcixsb2N1bGUsbG9jdWx1cyxsb2N1bSxsb2N1cyxsb2N1c3QsbG9jdXN0YSxsb2N1dG9yLGxvZCxsb2RlLGxvZGdlLGxvZGdlZCxsb2RnZXIsbG9kZ2luZyxsb2Vzcyxsb2Vzc2FsLGxvZXNzaWMsbG9mLGxvZnQsbG9mdGVyLGxvZnRpbHksbG9mdGluZyxsb2Z0bWFuLGxvZnR5LGxvZyxsb2dhbmluLGxvZ2Jvb2ssbG9nY29jayxsb2dlLGxvZ2Vpb24sbG9nZXVtLGxvZ2dhdCxsb2dnZWQsbG9nZ2VyLGxvZ2dpYSxsb2dnaW4sbG9nZ2luZyxsb2dnaXNoLGxvZ2hlYWQsbG9naWEsbG9naWMsbG9naWNhbCxsb2dpZSxsb2dpbixsb2dpb24sbG9naXVtLGxvZ2xldCxsb2dsaWtlLGxvZ21hbixsb2dvaSxsb2dvcyxsb2dyb2xsLGxvZ3dheSxsb2d3aXNlLGxvZ3dvb2QsbG9nd29yayxsb2d5LGxvaGFuLGxvaG9jaCxsb2ltaWMsbG9pbixsb2luZWQsbG9pcixsb2l0ZXIsbG9rYSxsb2thbyxsb2thb3NlLGxva2UsbG9rZXQsbG9raWVjLGxvbGwsbG9sbGVyLGxvbGxvcCxsb2xsb3B5LGxvbGx5LGxvbWEsbG9tYmFyZCxsb21ib3ksbG9tZW50LGxvbWl0YSxsb21tb2NrLGxvbmUsbG9uZWx5LGxvbmcsbG9uZ2EsbG9uZ2FuLGxvbmdib3csbG9uZ2UsbG9uZ2Vhcixsb25nZXIsbG9uZ2Zpbixsb25nZnVsLGxvbmdpbmcsbG9uZ2lzaCxsb25namF3LGxvbmdseSxsb25ncyxsb25ndWUsbG9uZ3dheSxsb250YXIsbG9vLGxvb2J5LGxvb2QsbG9vZixsb29mYWgsbG9vZmllLGxvb2ssbG9va2VyLGxvb2tpbmcsbG9va291dCxsb29rdW0sbG9vbSxsb29tZXIsbG9vbWVyeSxsb29taW5nLGxvb24sbG9vbmVyeSxsb29uZXksbG9vbnksbG9vcCxsb29wZXIsbG9vcGZ1bCxsb29waW5nLGxvb3Bpc3QsbG9vcGxldCxsb29weSxsb29zZSxsb29zZWx5LGxvb3Nlbixsb29zZXIsbG9vc2luZyxsb29zaXNoLGxvb3QsbG9vdGVuLGxvb3Rlcixsb290aWUsbG9wLGxvcGUsbG9wZXIsbG9waGlpZCxsb3BoaW5lLGxvcHBhcmQsbG9wcGVyLGxvcHBldCxsb3BwaW5nLGxvcHB5LGxvcHNlZWQsbG9xdWF0LGxvcXVlbnQsbG9yYSxsb3JhbCxsb3Jhbixsb3JhdGUsbG9yY2hhLGxvcmQsbG9yZGluZyxsb3Jka2luLGxvcmRsZXQsbG9yZGx5LGxvcmR5LGxvcmUsbG9yZWFsLGxvcmVkLGxvcmksbG9yaWMsbG9yaWNhLGxvcmlsZXQsbG9yaW1lcixsb3Jpb3QsbG9yaXMsbG9ybWVyeSxsb3JuLGxvcm8sbG9ycnksbG9ycyxsb3J1bSxsb3J5LGxvc2FibGUsbG9zZSxsb3NlbCxsb3Nlcixsb3NoLGxvc2luZyxsb3NzLGxvc3QsbG90LGxvdGEsbG90YXNlLGxvdGUsbG90aWMsbG90aW9uLGxvdG1lbnQsbG90cml0ZSxsb3RzLGxvdHRlcixsb3R0ZXJ5LGxvdHRvLGxvdHVzLGxvdHVzaW4sbG91Y2gsbG91ZCxsb3VkZW4sbG91ZGlzaCxsb3VkbHksbG91ZXksbG91Z2gsbG91ayxsb3Vrb3VtLGxvdWx1LGxvdW5kZXIsbG91bmdlLGxvdW5nZXIsbG91bmd5LGxvdXAsbG91cGUsbG91cixsb3VyZHksbG91c2UsbG91c2lseSxsb3VzdGVyLGxvdXN5LGxvdXQsbG91dGVyLGxvdXRoZXIsbG91dGlzaCxsb3V0eSxsb3V2YXIsbG91dmVyLGxvdmFibGUsbG92YWJseSxsb3ZhZ2UsbG92ZSxsb3ZlZnVsLGxvdmVseSxsb3ZlbWFuLGxvdmVyLGxvdmVyZWQsbG92ZXJseSxsb3ZpbmcsbG93LGxvd2EsbG93YW4sbG93YmVsbCxsb3dib3JuLGxvd2JveSxsb3dicmVkLGxvd2RhaCxsb3dkZXIsbG93ZWl0ZSxsb3dlcixsb3dlcmVyLGxvd2VyeSxsb3dpc2gsbG93bGFuZCxsb3dsaWx5LGxvd2x5LGxvd21lbixsb3dtb3N0LGxvd24sbG93bmVzcyxsb3dubHksbG93dGgsbG93d29vZCxsb3d5LGxveCxsb3hpYSxsb3hpYyxsb3hvdGljLGxveSxsb3lhbCxsb3lhbGx5LGxveWFsdHksbG96ZW5nZSxsb3plbmd5LGx1YmJlcixsdWJlLGx1YnJhLGx1YnJpYyxsdWJyaWZ5LGx1Y2FuaWQsbHVjYXJuZSxsdWNiYW4sbHVjZSxsdWNlbmNlLGx1Y2VuY3ksbHVjZW50LGx1Y2VybixsdWNlcm5lLGx1Y2V0LGx1Y2libGUsbHVjaWQsbHVjaWRhLGx1Y2lkbHksbHVjaWZlZSxsdWNpZmljLGx1Y2lnZW4sbHVjaXZlZSxsdWNrLGx1Y2tlbixsdWNrZnVsLGx1Y2tpZSxsdWNraWx5LGx1Y2t5LGx1Y3JlLGx1Y3JpZnksbHVjdWxlLGx1Y3VtaWEsbHVjeSxsdWRkZW4sbHVkaWJyeSxsdWRvLGx1ZSxsdWVzLGx1ZXRpYyxsdWZiZXJ5LGx1ZmYsbHVnLGx1Z2UsbHVnZXIsbHVnZ2FnZSxsdWdnYXIsbHVnZ2VkLGx1Z2dlcixsdWdnaWUsbHVnbWFyayxsdWdzYWlsLGx1Z3NvbWUsbHVnd29ybSxsdWhpbmdhLGx1aWdpbm8sbHVrZSxsdWtlbHksbHVsYWIsbHVsbCxsdWxsYWJ5LGx1bGxlcixsdWx1LGx1bSxsdW1iYWdvLGx1bWJhbmcsbHVtYmFyLGx1bWJlcixsdW1lbixsdW1pbmFsLGx1bWluZSxsdW1tb3gsbHVtbXksbHVtcCxsdW1wZXIsbHVtcGV0LGx1bXBpbHksbHVtcGluZyxsdW1waXNoLGx1bXBraW4sbHVtcG1hbixsdW1weSxsdW5hLGx1bmFjeSxsdW5hcixsdW5hcmUsbHVuYXJ5LGx1bmF0ZSxsdW5hdGljLGx1bmF0dW0sbHVuY2gsbHVuY2hlcixsdW5lLGx1bmVzLGx1bmV0dGUsbHVuZyxsdW5nZSxsdW5nZWQsbHVuZ2VyLGx1bmdmdWwsbHVuZ2ksbHVuZ2llLGx1bmdpcyxsdW5neSxsdW5uLGx1bm9pZCxsdW50LGx1bnVsYSxsdW51bGFyLGx1bnVsZSxsdW51bGV0LGx1cGUsbHVwZW9sLGx1cGVvc2UsbHVwaW5lLGx1cGluaW4sbHVwaXMsbHVwb2lkLGx1cG91cyxsdXB1bGljLGx1cHVsaW4sbHVwdWx1cyxsdXB1cyxsdXJhLGx1cmFsLGx1cmNoLGx1cmNoZXIsbHVyZGFuLGx1cmUsbHVyZWZ1bCxsdXJlcixsdXJnLGx1cmlkLGx1cmlkbHksbHVyayxsdXJrZXIsbHVya3ksbHVycmllcixsdXJyeSxsdXNoLGx1c2hlcixsdXNobHksbHVzaHksbHVzayxsdXNreSxsdXNvcnksbHVzdCxsdXN0ZXIsbHVzdGZ1bCxsdXN0aWx5LGx1c3RyYSxsdXN0cmFsLGx1c3RydW0sbHVzdHksbHV0LGx1dGFueSxsdXRlLGx1dGVhbCxsdXRlY2lhLGx1dGVpbixsdXRlbGV0LGx1dGVvLGx1dGVvbWEsbHV0ZW91cyxsdXRlcixsdXRld2F5LGx1dGZpc2ssbHV0aGVybixsdXRoaWVyLGx1dGluZyxsdXRpc3QsbHV0b3NlLGx1dHJpbixsdXRyaW5lLGx1eCxsdXhhdGUsbHV4ZSxsdXh1cnksbHV4dXMsbHksbHlhbSxseWFyZCxseWNlYWwsbHljZXVtLGx5Y2lkLGx5Y29waW4sbHljb3BvZCxseWNvc2lkLGx5Y3RpZCxseWRkaXRlLGx5ZGl0ZSxseWUsbHllcnksbHlnYWVpZCxseWluZyxseWluZ2x5LGx5bXBoLGx5bXBoYWQsbHltcGh5LGx5bmNlYW4sbHluY2gsbHluY2hlcixseW5jaW5lLGx5bngsbHlyYSxseXJhdGUsbHlyYXRlZCxseXJhd2F5LGx5cmUsbHlyZW1hbixseXJpYyxseXJpY2FsLGx5cmlzbSxseXJpc3QsbHlzLGx5c2F0ZSxseXNlLGx5c2luLGx5c2luZSxseXNpcyxseXNvZ2VuLGx5c3NhLGx5c3NpYyxseXRpYyxseXR0YSxseXhvc2UsbSxtYSxtYWFtLG1hYmksbWFib2xvLG1hYyxtYWNhYnJlLG1hY2FjbyxtYWNhZGFtLG1hY2FuLG1hY2FuYSxtYWNhbyxtYWNhcXVlLG1hY2F3LG1hY2NvLG1hY2UsbWFjZW1hbixtYWNlcixtYWNoYW4sbWFjaGFyLG1hY2hldGUsbWFjaGksbWFjaGlsYSxtYWNoaW4sbWFjaGluZSxtYWNocmVlLG1hY2llcyxtYWNrLG1hY2tpbnMsbWFja2xlLG1hY2xlLG1hY2xlZCxtYWNvLG1hY3JhbWUsbWFjcm8sbWFjcm9uLG1hY3VjYSxtYWN1bGEsbWFjdWxhcixtYWN1bGUsbWFjdXRhLG1hZCxtYWRhbSxtYWRhbWUsbWFkY2FwLG1hZGRlbixtYWRkZXIsbWFkZGluZyxtYWRkaXNoLG1hZGRsZSxtYWRlLG1hZGVmeSxtYWRodWNhLG1hZGlkLG1hZGxpbmcsbWFkbHksbWFkbWFuLG1hZG5lcCxtYWRuZXNzLG1hZG8sbWFkb3F1YSxtYWRyaWVyLG1hZHJvbmEsbWFkc2hpcCxtYWR1cm8sbWFkd2VlZCxtYWR3b3J0LG1hZSxtYWVuYWQsbWFlc3RyaSxtYWVzdHJvLG1hZmZpYSxtYWZmaWNrLG1hZmZsZSxtYWZmbGluLG1hZmljLG1hZm9vLG1hZnVyYSxtYWcsbWFnYWRpcyxtYWdhbmksbWFnYXMsbWFnZSxtYWdlbnRhLG1hZ2dlZCxtYWdnbGUsbWFnZ290LG1hZ2dvdHksbWFnaSxtYWdpYyxtYWdpY2FsLG1hZ2lyaWMsbWFnbWEsbWFnbmF0ZSxtYWduZXMsbWFnbmV0LG1hZ25ldGEsbWFnbmV0byxtYWduaWZ5LG1hZ251bSxtYWdvdCxtYWdwaWUsbWFncGllZCxtYWdzbWFuLG1hZ3VhcmksbWFndWV5LG1haGEsbWFoYWxlYixtYWhhbGxhLG1haGFudCxtYWhhcixtYWhhcmFvLG1haGF0bWEsbWFobWFsLG1haG11ZGksbWFob2UsbWFob2xpLG1haG9uZSxtYWhvdXQsbWFoc2VlcixtYWh1YSxtYWh1YW5nLG1haWQsbWFpZGFuLG1haWRlbixtYWlkaXNoLG1haWRpc20sbWFpZGtpbixtYWlkeSxtYWllZmljLG1haWdyZSxtYWlpZCxtYWlsLG1haWxiYWcsbWFpbGJveCxtYWlsZWQsbWFpbGVyLG1haWxpZSxtYWlsbWFuLG1haW0sbWFpbWVkLG1haW1lcixtYWltb24sbWFpbixtYWlubHksbWFpbm91cixtYWlucGluLG1haW5zLG1haW50LG1haW50b3AsbWFpb2lkLG1haXJlLG1haXplLG1haXplcixtYWphZ3VhLG1hamVzdHksbWFqbyxtYWpvb24sbWFqb3IsbWFrYWJsZSxtYWtlLG1ha2Vkb20sbWFrZXIsbWFraHphbixtYWtpLG1ha2luZyxtYWtsdWssbWFrbyxtYWt1ayxtYWwsbWFsYSxtYWxhY2lhLG1hbGFjb24sbWFsYWR5LG1hbGFnbWEsbWFsYWlzZSxtYWxha2luLG1hbGFtYm8sbWFsYW5nYSxtYWxhcGksbWFsYXIsbWFsYXJpYSxtYWxhcmluLG1hbGF0ZSxtYWxhdGksbWFsYXgsbWFsZHVjayxtYWxlLG1hbGVhc2UsbWFsZWF0ZSxtYWxlaWMsbWFsZWxsYSxtYWxlbyxtYWxmZWQsbWFsaSxtYWxpYyxtYWxpY2UsbWFsaWNobyxtYWxpZ24sbWFsaWssbWFsaW5lLG1hbGluZXMsbWFsaXNtLG1hbGlzb24sbWFsaXN0LG1hbGtpbixtYWxsLG1hbGxhcmQsbWFsbGVhbCxtYWxsZWFyLG1hbGxlZSxtYWxsZWluLG1hbGxldCxtYWxsZXVzLG1hbGxvdyxtYWxsdW0sbWFsbHVzLG1hbG0sbWFsbXNleSxtYWxteSxtYWxvLG1hbG9kb3IsbWFsb25pYyxtYWxvbnlsLG1hbG91YWgsbWFscGFpcyxtYWx0LG1hbHRhc2UsbWFsdGVyLG1hbHRoYSxtYWx0aW5nLG1hbHRtYW4sbWFsdG9zZSxtYWx0eSxtYW1iYSxtYW1ibyxtYW1tYSxtYW1tYWwsbWFtbWFyeSxtYW1tYXRlLG1hbW1lZSxtYW1tZXIsbWFtbW9jayxtYW1tb24sbWFtbW90aCxtYW1tdWxhLG1hbW15LG1hbW8sbWFuLG1hbmEsbWFuYWNsZSxtYW5hZ2UsbWFuYWdlZSxtYW5hZ2VyLG1hbmFpc20sbWFuYWtpbixtYW5hbCxtYW5hcyxtYW5hdGVlLG1hbmF2ZWwsbWFuYmlyZCxtYW5ib3QsbWFuY2hlLG1hbmNoZXQsbWFuY29ubyxtYW5jdXMsbWFuZCxtYW5kYWxhLG1hbmRhbnQsbWFuZGF0ZSxtYW5kaWwsbWFuZG9sYSxtYW5kb20sbWFuZG9yYSxtYW5kb3JlLG1hbmRyYSxtYW5kcmVsLG1hbmRyaW4sbWFuZHVhLG1hbmR5YXMsbWFuZSxtYW5lZCxtYW5lZ2UsbWFuZWksbWFuZW50LG1hbmVzLG1hbmVzcyxtYW5leSxtYW5mdWwsbWFuZyxtYW5nYSxtYW5nYWwsbWFuZ2UsbWFuZ2VhbyxtYW5nZWwsbWFuZ2VyLG1hbmdpLG1hbmdpbHksbWFuZ2xlLG1hbmdsZXIsbWFuZ28sbWFuZ29uYSxtYW5ndWUsbWFuZ3ksbWFuaGVhZCxtYW5ob2xlLG1hbmhvb2QsbWFuaSxtYW5pYSxtYW5pYWMsbWFuaWMsbWFuaWQsbWFuaWZ5LG1hbmlraW4sbWFuaWxhLG1hbmlsbGEsbWFuaWxsZSxtYW5pb2MsbWFuaXBsZSxtYW5pc20sbWFuaXN0LG1hbml0byxtYW5pdSxtYW5qYWssbWFuayxtYW5raW4sbWFua2luZCxtYW5sZXNzLG1hbmxldCxtYW5saWtlLG1hbmxpbHksbWFubGluZyxtYW5seSxtYW5uYSxtYW5uYW4sbWFubmVyLG1hbm5lcnMsbWFubmVzcyxtYW5uaWRlLG1hbm5pZSxtYW5uaWZ5LG1hbm5pbmcsbWFubmlzaCxtYW5uaXRlLG1hbm5vc2UsbWFubnksbWFubyxtYW5vYyxtYW5vbWluLG1hbm9yLG1hbnF1ZSxtYW5yZWQsbWFucmVudCxtYW5yb290LG1hbnJvcGUsbWFuc2FyZCxtYW5zZSxtYW5zaGlwLG1hbnNpb24sbWFuc28sbWFudCxtYW50YSxtYW50YWwsbWFudGVhdSxtYW50ZWwsbWFudGVyLG1hbnRlcyxtYW50aWMsbWFudGlkLG1hbnRpcyxtYW50bGUsbWFudGxlZCxtYW50bGV0LG1hbnRvLG1hbnRvaWQsbWFudHJhLG1hbnRyYXAsbWFudHVhLG1hbnVhbCxtYW51YW8sbWFudWthLG1hbnVsLG1hbnVtYSxtYW51bWVhLG1hbnVtaXQsbWFudXJlLG1hbnVyZXIsbWFudXMsbWFud2FyZCxtYW53YXksbWFud2VlZCxtYW53aXNlLG1hbnksbWFuemFuYSxtYW56aWwsbWFvLG1hb21hbyxtYXAsbWFwYWNoLG1hcGF1LG1hcGxhbmQsbWFwbGUsbWFwbyxtYXBwZXIsbWFwcGlzdCxtYXBweSxtYXB3aXNlLG1hcXVpLG1hcXVpcyxtYXIsbWFyYWJvdSxtYXJhY2EsbWFyYWNhbixtYXJhZSxtYXJhbCxtYXJhbmcsbWFyYXJhLG1hcmFyaWUsbWFyYXNjYSxtYXJhdWQsbWFyYmxlLG1hcmJsZWQsbWFyYmxlcixtYXJibGVzLG1hcmJseSxtYXJjLG1hcmNlbCxtYXJjaCxtYXJjaGVyLG1hcmNpZCxtYXJjbyxtYXJjb25pLG1hcmNvcixtYXJkeSxtYXJlLG1hcmVtbWEsbWFyZW5nbyxtYXJmaXJlLG1hcmdheSxtYXJnZSxtYXJnZW50LG1hcmdpbixtYXJnb3NhLG1hcmhhbGEsbWFyaWEsbWFyaWQsbWFyaW1iYSxtYXJpbmEsbWFyaW5lLG1hcmluZXIsbWFyaW9sYSxtYXJpcyxtYXJpc2gsbWFyaXRhbCxtYXJrLG1hcmthLG1hcmtlZCxtYXJrZXIsbWFya2V0LG1hcmtob3IsbWFya2luZyxtYXJra2EsbWFya21hbixtYXJrdXAsbWFybCxtYXJsZWQsbWFybGVyLG1hcmxpLG1hcmxpbixtYXJsaW5lLG1hcmxpdGUsbWFybG9jayxtYXJscGl0LG1hcmx5LG1hcm0sbWFybWl0LG1hcm1pdGUsbWFybW9zZSxtYXJtb3QsbWFybyxtYXJvayxtYXJvb24sbWFycGxvdCxtYXJxdWUsbWFycXVlZSxtYXJxdWlzLG1hcnJhbm8sbWFycmVlLG1hcnJlcixtYXJyaWVkLG1hcnJpZXIsbWFycm9uLG1hcnJvdCxtYXJyb3csbWFycm93eSxtYXJyeSxtYXJyeWVyLG1hcnNoLG1hcnNoYWwsbWFyc2h5LG1hcnNvb24sbWFydCxtYXJ0ZWwsbWFydGVuLG1hcnRleHQsbWFydGlhbCxtYXJ0aW4sbWFydGl0ZSxtYXJ0bGV0LG1hcnR5cixtYXJ0eXJ5LG1hcnUsbWFydmVsLG1hcnZlcixtYXJ5LG1hcnlidWQsbWFzLG1hc2EsbWFzY2FyYSxtYXNjbGVkLG1hc2NvdCxtYXNjdWx5LG1hc2RldSxtYXNoLG1hc2hhLG1hc2hhbCxtYXNoZXIsbWFzaGllLG1hc2hpbmcsbWFzaG1hbixtYXNocnUsbWFzaHksbWFzamlkLG1hc2ssbWFza2VkLG1hc2tlcixtYXNrb2lkLG1hc2xpbixtYXNvbixtYXNvbmVkLG1hc29uZXIsbWFzb25pYyxtYXNvbnJ5LG1hc29va2EsbWFzb29sYSxtYXNxdWUsbWFzcXVlcixtYXNzLG1hc3NhLG1hc3NhZ2UsbWFzc2UsbWFzc2VsLG1hc3NlcixtYXNzZXVyLG1hc3NpZXIsbWFzc2lmLG1hc3NpbHksbWFzc2l2ZSxtYXNzb3ksbWFzc3VsYSxtYXNzeSxtYXN0LG1hc3RhYmEsbWFzdGFnZSxtYXN0YXgsbWFzdGVkLG1hc3RlcixtYXN0ZXJ5LG1hc3RmdWwsbWFzdGljLG1hc3RpZmYsbWFzdGluZyxtYXN0bWFuLG1hc3RvaWQsbWFzdHksbWFzdSxtYXQsbWF0YWNvLG1hdGFkb3IsbWF0YWksbWF0YWxhbixtYXRhbnphLG1hdGFwYW4sbWF0YXBpLG1hdGFyYSxtYXRheCxtYXRjaCxtYXRjaGVyLG1hdGNoeSxtYXRlLG1hdGVseSxtYXRlcixtYXRleSxtYXRoLG1hdGhlcyxtYXRpY28sbWF0aW4sbWF0aW5hbCxtYXRpbmVlLG1hdGluZyxtYXRpbnMsbWF0aXBvLG1hdGthLG1hdGxlc3MsbWF0bG93LG1hdHJhLG1hdHJhbCxtYXRyYXNzLG1hdHJlZWQsbWF0cmljLG1hdHJpcyxtYXRyaXgsbWF0cm9uLG1hdHJvc3MsbWF0c3UsbWF0c3VyaSxtYXR0YSxtYXR0YXJvLG1hdHRlLG1hdHRlZCxtYXR0ZXIsbWF0dGVyeSxtYXR0aSxtYXR0aW5nLG1hdHRvY2ssbWF0dG9pZCxtYXR0b2lyLG1hdHVyZSxtYXR1cmVyLG1hdHdlZWQsbWF0eSxtYXR6byxtYXR6b29uLG1hdHpvcyxtYXR6b3RoLG1hdSxtYXVkLG1hdWRsZSxtYXVkbGluLG1hdWdlcixtYXVnaCxtYXVsLG1hdWxlcixtYXVsZXksbWF1bGluZyxtYXVtZXQsbWF1bixtYXVuZCxtYXVuZGVyLG1hdW5keSxtYXVuZ2UsbWF1dGhlcixtYXV2ZSxtYXV2aW5lLG1hdXgsbWF2aXMsbWF3LG1hd2ssbWF3a2lzaCxtYXdreSxtYXdwLG1heGlsbGEsbWF4aW0sbWF4aW1hLG1heGltYWwsbWF4aW1lZCxtYXhpbXVtLG1heGltdXMsbWF4aXhlLG1heHdlbGwsbWF5LG1heWEsbWF5YmUsbWF5YnVzaCxtYXljb2NrLG1heWRheSxtYXlmaXNoLG1heWhhcCxtYXloZW0sbWF5bnQsbWF5b3IsbWF5b3JhbCxtYXlwb3AsbWF5c2luLG1heXRlbixtYXl3ZWVkLG1hemEsbWF6YW1lLG1hemFyZCxtYXplLG1hemVkLG1hemVkbHksbWF6ZWZ1bCxtYXplcixtYXppYyxtYXppbHksbWF6dWNhLG1henVtYSxtYXp1cmthLG1henV0LG1henksbWF6emFyZCxtYmFsb2xvLG1ib3JpLG1lLG1lYWJsZSxtZWFkLG1lYWRlcixtZWFkb3csbWVhZG93eSxtZWFnZXIsbWVhZ3JlLG1lYWssbWVhbCxtZWFsZXIsbWVhbGllcyxtZWFsaWx5LG1lYWxtYW4sbWVhbHksbWVhbixtZWFuZGVyLG1lYW5lZCxtZWFuZXIsbWVhbmluZyxtZWFuaXNoLG1lYW5seSxtZWFudCxtZWFzZSxtZWFzbGUsbWVhc2xlZCxtZWFzbGVzLG1lYXNseSxtZWFzdXJlLG1lYXQsbWVhdGFsLG1lYXRlZCxtZWF0aWx5LG1lYXRtYW4sbWVhdHVzLG1lYXR5LG1lY2F0ZSxtZWNvbixtZWNvbmljLG1lY29uaW4sbWVkYWwsbWVkYWxlZCxtZWRhbGV0LG1lZGRsZSxtZWRkbGVyLG1lZGlhLG1lZGlhY3ksbWVkaWFkLG1lZGlhbCxtZWRpYW4sbWVkaWFudCxtZWRpYXRlLG1lZGljLG1lZGljYWwsbWVkaWNvLG1lZGlldHksbWVkaW1uLG1lZGltbm8sbWVkaW5vLG1lZGlvLG1lZGl1bSxtZWRpdXMsbWVkbGFyLG1lZGxleSxtZWRyaWNrLG1lZHVsbGEsbWVkdXNhbCxtZWR1c2FuLG1lZWJvcyxtZWVjZSxtZWVkLG1lZWssbWVla2VuLG1lZWtseSxtZWVyZWQsbWVlcmthdCxtZWVzZSxtZWV0LG1lZXRlbixtZWV0ZXIsbWVldGluZyxtZWV0bHksbWVnYWJhcixtZWdhZXJnLG1lZ2Fmb2csbWVnYXBvZCxtZWdhcm9uLG1lZ2F0b24sbWVnZXJnLG1lZ2lscCxtZWdtaG8sbWVnb2htLG1lZ3JpbSxtZWhhbGxhLG1laGFyaSxtZWh0YXIsbWVpbGUsbWVpbixtZWluaWUsbWVpbyxtZWlvYmFyLG1laW9zaXMsbWVpb3RpYyxtZWl0aCxtZWwsbWVsYSxtZWxhZGEsbWVsYWdyYSxtZWxhbSxtZWxhbWVkLG1lbGFuZ2UsbWVsYW5pYyxtZWxhbmluLG1lbGFubyxtZWxhc21hLG1lbGNoLG1lbGQsbWVsZGVyLG1lbGRyb3AsbWVsZSxtZWxlZSxtZWxlbmEsbWVsZW5lLG1lbGVuaWMsbWVsaWMsbWVsaWxvdCxtZWxpbmUsbWVsaXNtYSxtZWxpdGlzLG1lbGwsbWVsbGF0ZSxtZWxsYXksbWVsbGVyLG1lbGxpdCxtZWxsaXRlLG1lbGxvbixtZWxsb3csbWVsbG93eSxtZWxvZGlhLG1lbG9kaWMsbWVsb2R5LG1lbG9lLG1lbG9pZCxtZWxvbixtZWxvbnJ5LG1lbG9zLG1lbG9zYSxtZWx0LG1lbHRhZ2UsbWVsdGVkLG1lbHRlcixtZWx0ZXJzLG1lbHRpbmcsbWVsdG9uLG1lbSxtZW1iZXIsbWVtYnJhbCxtZW1lbnRvLG1lbWlubmEsbWVtbyxtZW1vaXIsbWVtb3JpYSxtZW1vcnksbWVuLG1lbmFjZSxtZW5hY2VyLG1lbmFjbWUsbWVuYWdlLG1lbmFsZCxtZW5kLG1lbmRlZSxtZW5kZXIsbWVuZGluZyxtZW5kb2xlLG1lbmRzLG1lbmZvbGssbWVuZyxtZW5oaXIsbWVuaWFsLG1lbmlueCxtZW5raW5kLG1lbm5vbSxtZW5zYSxtZW5zYWwsbWVuc2UsbWVuc2VzLG1lbnNrLG1lbnN1YWwsbWVudGFsLG1lbnRhcnksbWVudGhvbCxtZW50aHlsLG1lbnRpb24sbWVudG9yLG1lbnR1bSxtZW51LG1lbnksbWVueWllLG1lbnppZSxtZXJiYWJ5LG1lcmNhbCxtZXJjZXIsbWVyY2VyeSxtZXJjaCxtZXJjaGV0LG1lcmN5LG1lcmUsbWVyZWwsbWVyZWx5LG1lcmZvbGQsbWVyZm9sayxtZXJnZSxtZXJnZXIsbWVyZ2gsbWVyaWFoLG1lcmljZSxtZXJpbCxtZXJpc20sbWVyaXN0LG1lcml0LG1lcml0ZWQsbWVyaXRlcixtZXJrLG1lcmtoZXQsbWVya2luLG1lcmwsbWVybGUsbWVybGluLG1lcmxvbixtZXJtYWlkLG1lcm1hbixtZXJvLG1lcm9wLG1lcm9waWEsbWVyb3MsbWVycmlseSxtZXJyb3csbWVycnksbWVyc2UsbWVzYSxtZXNhZCxtZXNhaWwsbWVzYWwsbWVzYWxseSxtZXNhbmdlLG1lc2FyY2gsbWVzY2FsLG1lc2UsbWVzZW0sbWVzZW5uYSxtZXNoLG1lc2hlZCxtZXNoeSxtZXNpYWQsbWVzaWFsLG1lc2lhbixtZXNpYyxtZXNpbGxhLG1lc2lvbixtZXNpdHlsLG1lc25lLG1lc28sbWVzb2JhcixtZXNvZGUsbWVzb2RpYyxtZXNvbGUsbWVzb24sbWVzb25pYyxtZXNvcGljLG1lc3BpbCxtZXNzLG1lc3NhZ2UsbWVzc2FuLG1lc3NlLG1lc3NlcixtZXNzZXQsbWVzc2lseSxtZXNzaW4sbWVzc2luZyxtZXNzbWFuLG1lc3NvcixtZXNzcnMsbWVzc3RpbixtZXNzeSxtZXN0ZWUsbWVzdGVyLG1lc3RpemEsbWVzdGl6byxtZXN0b21lLG1ldCxtZXRhLG1ldGFkLG1ldGFnZSxtZXRhbCxtZXRhbGVyLG1ldGFtZXIsbWV0YW55bSxtZXRhdGUsbWV0YXllcixtZXRlLG1ldGVsLG1ldGVvcixtZXRlcixtZXRoYW5lLG1ldGhlbmUsbWV0aGVyLG1ldGhpZCxtZXRoaWRlLG1ldGhpbmUsbWV0aG9kLG1ldGh5bCxtZXRpYyxtZXRpZXIsbWV0aXMsbWV0b2NoeSxtZXRvbnltLG1ldG9wZSxtZXRvcGljLG1ldG9wb24sbWV0cmEsbWV0cmV0YSxtZXRyZXRlLG1ldHJpYSxtZXRyaWMsbWV0cmljcyxtZXRyaWZ5LG1ldHJpc3QsbWV0dGFyLG1ldHRsZSxtZXR0bGVkLG1ldHVzaWEsbWV0emUsbWV1c2UsbWV1dGUsbWV3LG1ld2FyZCxtZXdlcixtZXdsLG1ld2xlcixtZXpjYWwsbWV6dXphaCxtZXp6byxtaG8sbWksbWlhbWlhLG1pYW4sbWlhb3csbWlhb3dlcixtaWFzLG1pYXNtLG1pYXNtYSxtaWFzbWFsLG1pYXNtaWMsbWlhdWwsbWlhdWxlcixtaWIsbWljYSxtaWNhdGUsbWljZSxtaWNlbGxlLG1pY2hlLG1pY2hlcixtaWNoaW5nLG1pY2h0LG1pY2ssbWlja2xlLG1pY28sbWljcmlmeSxtaWNybyxtaWNyb2JlLG1pY3JvaG0sbWljcm9uLG1pY3Rpb24sbWlkLG1pZGRheSxtaWRkZW4sbWlkZGxlLG1pZGRsZXIsbWlkZHksbWlkZSxtaWRnZSxtaWRnZXQsbWlkZ2V0eSxtaWRneSxtaWRpcm9uLG1pZGxhbmQsbWlkbGVnLG1pZG1haW4sbWlkbW9ybixtaWRtb3N0LG1pZG5vb24sbWlkcGl0LG1pZHJhc2gsbWlkcmliLG1pZHJpZmYsbWlkcyxtaWRzaGlwLG1pZHN0LG1pZHRhcCxtaWR2ZWluLG1pZHdhcmQsbWlkd2F5LG1pZHdlZWssbWlkd2lmZSxtaWR3aXNlLG1pZHllYXIsbWllbixtaWZmLG1pZmZ5LG1pZyxtaWdodCxtaWdodG50LG1pZ2h0eSxtaWdsaW8sbWlnbm9uLG1pZ3JhbnQsbWlncmF0ZSxtaWhyYWIsbWlqbCxtaWthZG8sbWlrZSxtaWtpZSxtaWwsbWlsYSxtaWxhZHksbWlsY2gsbWlsY2hlcixtaWxjaHksbWlsZCxtaWxkZW4sbWlsZGVyLG1pbGRldyxtaWxkZXd5LG1pbGRpc2gsbWlsZGx5LG1pbGUsbWlsZWFnZSxtaWxlcixtaWxld2F5LG1pbGZvaWwsbWlsaGEsbWlsaWFyeSxtaWxpZXUsbWlsaXRpYSxtaWxpdW0sbWlsayxtaWxrZW4sbWlsa2VyLG1pbGtpbHksbWlsa2luZyxtaWxrbWFuLG1pbGtzb3AsbWlsa3ksbWlsbCxtaWxsYSxtaWxsYWdlLG1pbGxkYW0sbWlsbGUsbWlsbGVkLG1pbGxlcixtaWxsZXQsbWlsbGZ1bCxtaWxsaWFkLG1pbGxpbGUsbWlsbGluZSxtaWxsaW5nLG1pbGxpb24sbWlsbG1hbixtaWxuZXIsbWlsbyxtaWxvcmQsbWlscGEsbWlscmVpcyxtaWxzZXksbWlsc2llLG1pbHQsbWlsdGVyLG1pbHR5LG1pbHZpbmUsbWltLG1pbWEsbWltYmFyLG1pbWJsZSxtaW1lLG1pbWVvLG1pbWVyLG1pbWVzaXMsbWltZXRpYyxtaW1pYyxtaW1pY2FsLG1pbWljcnksbWltaW5lLG1pbWx5LG1pbW1lc3QsbWltbW9jayxtaW1tb29kLG1pbW1vdWQsbWltb3NpcyxtaW1wLG1pbXNleSxtaW4sbWluYSxtaW5hYmxlLG1pbmFyLG1pbmFyZXQsbWluYXdheSxtaW5jZSxtaW5jZXIsbWluY2luZyxtaW5kLG1pbmRlZCxtaW5kZXIsbWluZGZ1bCxtaW5kaW5nLG1pbmUsbWluZXIsbWluZXJhbCxtaW5lcnksbWluZXMsbWluZXR0ZSxtaW5nLG1pbmdlLG1pbmdsZSxtaW5nbGVyLG1pbmd5LG1pbmhhZyxtaW5oYWgsbWluaWF0ZSxtaW5pYnVzLG1pbmljYW0sbWluaWZ5LG1pbmlraW4sbWluaW0sbWluaW1hLG1pbmltYWwsbWluaW11bSxtaW5pbXVzLG1pbmluZyxtaW5pb24sbWluaXNoLG1pbml1bSxtaW5pdmVyLG1pbml2ZXQsbWluayxtaW5rZXJ5LG1pbmtpc2gsbWlubmllLG1pbm5pbmcsbWlubm93LG1pbm55LG1pbm8sbWlub2l6ZSxtaW5vcixtaW5vdCxtaW5zdGVyLG1pbnQsbWludGFnZSxtaW50ZXIsbWludG1hbixtaW50eSxtaW51ZW5kLG1pbnVldCxtaW51cyxtaW51dGUsbWludXRlcixtaW51dGlhLG1pbngsbWlueGlzaCxtaW55LG1pbnlhbixtaXFyYSxtaXIsbWlyYWNoLG1pcmFjbGUsbWlyYWRvcixtaXJhZ2UsbWlyYWd5LG1pcmF0ZSxtaXJiYW5lLG1pcmQsbWlyZGFoYSxtaXJlLG1pcmlkLG1pcmlmaWMsbWlyaXNoLG1pcmssbWlybyxtaXJyb3IsbWlycm9yeSxtaXJ0aCxtaXJ5LG1pcnphLG1pc2FjdCxtaXNhZGQsbWlzYWltLG1pc2FsbHksbWlzYmlhcyxtaXNiaWxsLG1pc2JpbmQsbWlzYm9kZSxtaXNib3JuLG1pc2J1c3ksbWlzY2FsbCxtaXNjYXN0LG1pc2NoaW8sbWlzY29pbixtaXNjb29rLG1pc2Nyb3AsbWlzY3VlLG1pc2N1dCxtaXNkYXRlLG1pc2RhdWIsbWlzZGVhbCxtaXNkZWVkLG1pc2RlZW0sbWlzZGlldCxtaXNkbyxtaXNkb2VyLG1pc2RyYXcsbWlzZSxtaXNlYXNlLG1pc2VkaXQsbWlzZXIsbWlzZXJseSxtaXNlcnksbWlzZmFyZSxtaXNmaWxlLG1pc2ZpcmUsbWlzZml0LG1pc2ZvbmQsbWlzZm9ybSxtaXNnaXZlLG1pc2dvLG1pc2dyb3csbWlzaGFwLG1pc2htZWUsbWlzam9pbixtaXNrZWVwLG1pc2tlbixtaXNraWxsLG1pc2tub3csbWlza3ksbWlzbGF5LG1pc2xlYWQsbWlzbGVhcixtaXNsZWQsbWlzbGVzdCxtaXNsaWtlLG1pc2xpdmUsbWlzbWFkZSxtaXNtYWtlLG1pc21hdGUsbWlzbW92ZSxtaXNuYW1lLG1pc29iZXksbWlzcGFnZSxtaXNwYXJ0LG1pc3BheSxtaXNwaWNrLG1pc3BsYXksbWlzcHV0LG1pc3JhdGUsbWlzcmVhZCxtaXNydWxlLG1pc3MsbWlzc2FsLG1pc3NheSxtaXNzZWVtLG1pc3NlbCxtaXNzZXQsbWlzc2lsZSxtaXNzaW5nLG1pc3Npb24sbWlzc2lzLG1pc3Npc2gsbWlzc2l2ZSxtaXNzdGF5LG1pc3N0ZXAsbWlzc3ksbWlzdCxtaXN0YWtlLG1pc3Rib3csbWlzdGVkLG1pc3RlbGwsbWlzdGVuZCxtaXN0ZXIsbWlzdGVybSxtaXN0ZnVsLG1pc3RpYyxtaXN0aWRlLG1pc3RpZnksbWlzdGlseSxtaXN0aW1lLG1pc3RsZSxtaXN0b25lLG1pc3Rvb2ssbWlzdHJhbCxtaXN0cnksbWlzdHVybixtaXN0eSxtaXN1cmEsbWlzdXNlLG1pc3VzZXIsbWlzd2VkLG1pc3dpc2gsbWlzd29yZCxtaXN5b2tlLG1pdGUsbWl0ZXIsbWl0ZXJlZCxtaXRlcmVyLG1pdGlzLG1pdG9tZSxtaXRvc2lzLG1pdG90aWMsbWl0cmEsbWl0cmFsLG1pdHJhdGUsbWl0cmUsbWl0cmVyLG1pdHQsbWl0dGVuLG1pdHR5LG1pdHksbWl1cnVzLG1peCxtaXhhYmxlLG1peGVkLG1peGVkbHksbWl4ZW4sbWl4ZXIsbWl4aGlsbCxtaXhpYmxlLG1peGl0ZSxtaXh0aW9uLG1peHR1cmUsbWl4eSxtaXptYXplLG1penplbixtaXp6bGUsbWl6emxlcixtaXp6bHksbWl6enksbW5lbWUsbW5lbWljLG1uZXNpYyxtbmVzdGljLG1uaW9pZCxtbyxtb2FuLG1vYW5mdWwsbW9hbmluZyxtb2F0LG1vYixtb2JhYmxlLG1vYmJlcixtb2JiaXNoLG1vYmJpc20sbW9iYmlzdCxtb2JieSxtb2JjYXAsbW9iZWQsbW9iaWxlLG1vYmxlLG1vYmxpa2UsbW9ic2hpcCxtb2JzbWFuLG1vYnN0ZXIsbW9jaGEsbW9jaHJhcyxtb2NrLG1vY2thZG8sbW9ja2VyLG1vY2tlcnksbW9ja2Z1bCxtb2NtYWluLG1vY3Vjayxtb2RhbCxtb2RhbGx5LG1vZGUsbW9kZWwsbW9kZWxlcixtb2RlbmEsbW9kZXJuLG1vZGVzdCxtb2Rlc3R5LG1vZGljdW0sbW9kaWZ5LG1vZGlzaCxtb2Rpc3QsbW9kaXN0ZSxtb2RpdXMsbW9kdWxhcixtb2R1bGUsbW9kdWxvLG1vZHVsdXMsbW9lbGxvbixtb2ZldHRlLG1vZmYsbW9nLG1vZ2Fkb3IsbW9nZGFkLG1vZ2dhbixtb2dneSxtb2dvLG1vZ3VleSxtb2hhLG1vaGFiYXQsbW9oYWlyLG1vaGFyLG1vaGVsLG1vaG8sbW9ocixtb2h1cixtb2lkZXIsbW9pZG9yZSxtb2lldGVyLG1vaWV0eSxtb2lsLG1vaWxlcixtb2lsZXMsbW9pbGV5LG1vaWxpbmcsbW9pbmVhdSxtb2lvLG1vaXJlLG1vaXNlLG1vaXN0LG1vaXN0ZW4sbW9pc3RseSxtb2lzdHksbW9pdCxtb2l0eSxtb2phcnJhLG1vam8sbW9rZSxtb2tpLG1va28sbW9rc2hhLG1va3VtLG1va3ksbW9sYSxtb2xhbCxtb2xhcixtb2xhcnksbW9sYXNzeSxtb2xhdmUsbW9sZCxtb2xkZXIsbW9sZGVyeSxtb2xkaW5nLG1vbGR5LG1vbGUsbW9sZWlzbSxtb2xlcixtb2xlc3QsbW9saW1lbixtb2xpbmUsbW9sa2EsbW9sbGFuZCxtb2xsZSxtb2xsaWUsbW9sbGlmeSxtb2xsdXNrLG1vbGx5LG1vbG1hbixtb2xvaWQsbW9sb2tlcixtb2xvbXBpLG1vbG9zc2UsbW9scGUsbW9sdCxtb2x0ZW4sbW9sdGVyLG1vbHksbW9tYmluLG1vbWJsZSxtb21lLG1vbWVudCxtb21lbnRhLG1vbWlzbSxtb21tZSxtb21tZXQsbW9tbXksbW9tbyxtb24sbW9uYSxtb25hZCxtb25hZGljLG1vbmFlbmUsbW9uYWwsbW9uYXJjaCxtb25hcyxtb25hc2UsbW9uYXhvbixtb25lLG1vbmVsLG1vbmVwaWMsbW9uZXIsbW9uZXJhbCxtb25lcmFuLG1vbmVyaWMsbW9uZXJvbixtb25lc2lhLG1vbmV5LG1vbmV5ZWQsbW9uZXllcixtb25nLG1vbmdlcixtb25nZXJ5LG1vbmdsZXIsbW9uZ3JlbCxtb25nc3QsbW9uaWFsLG1vbmlrZXIsbW9uaXNtLG1vbmlzdCxtb25pdG9yLG1vbmssbW9ua2RvbSxtb25rZXJ5LG1vbmtlc3MsbW9ua2V5LG1vbmtpc2gsbW9ua2lzbSxtb25rbHksbW9ubnksbW9ubyxtb25vYXpvLG1vbm9jbGUsbW9ub2NvdCxtb25vZGljLG1vbm9keSxtb25vaWQsbW9ub21lcixtb25vbmNoLG1vbm9udCxtb25vbnltLG1vbm9zZSxtb25vdGljLG1vbnNvb24sbW9uc3Rlcixtb250YWdlLG1vbnRhbmEsbW9udGFuZSxtb250YW50LG1vbnRlLG1vbnRlbSxtb250aCxtb250aGx5LG1vbnRob24sbW9udGpveSxtb250b24sbW9udHVyZSxtb28sbW9vY2gsbW9vY2hhLG1vb2NoZXIsbW9vZCxtb29kZXIsbW9vZGlseSxtb29kaXNoLG1vb2RsZSxtb29keSxtb29pbmcsbW9vbCxtb29sZXQsbW9vbHMsbW9vbHVtLG1vb24sbW9vbmFjayxtb29uZWQsbW9vbmVyLG1vb25lcnksbW9vbmV5ZSxtb29uaWx5LG1vb25pbmcsbW9vbmlzaCxtb29uaXRlLG1vb25qYSxtb29uamFoLG1vb25sZXQsbW9vbmxpdCxtb29ubWFuLG1vb25zZXQsbW9vbndheSxtb29ueSxtb29wLG1vb3IsbW9vcmFnZSxtb29yaW5nLG1vb3Jpc2gsbW9vcm1hbixtb29ybixtb29ycGFuLG1vb3JzLG1vb3J1cCxtb29yeSxtb29zYSxtb29zZSxtb29zZXksbW9vc3QsbW9vdCxtb290ZXIsbW9vdGgsbW9vdGluZyxtb290bWFuLG1vcCxtb3BhbmUsbW9wZSxtb3Blcixtb3BoLG1vcGhlYWQsbW9waW5nLG1vcGlzaCxtb3BsYSxtb3BwZXIsbW9wcGV0LG1vcHB5LG1vcHN5LG1vcHVzLG1vcixtb3JhLG1vcmFpbmUsbW9yYWwsbW9yYWxlLG1vcmFsbHksbW9yYWxzLG1vcmFzcyxtb3Jhc3N5LG1vcmF0LG1vcmF0ZSxtb3JheSxtb3JiaWQsbW9yYmlmeSxtb3JkYW50LG1vcmRlbnQsbW9yZG9yZSxtb3JlLG1vcmVlbixtb3JlaXNoLG1vcmVsLG1vcmVsbGEsbW9yZWxsbyxtb3Jlcyxtb3JmcmV5LG1vcmcsbW9yZ2EsbW9yZ2FuLG1vcmdheSxtb3JnZW4sbW9yZ2xheSxtb3JndWUsbW9yaWMsbW9yaWNoZSxtb3Jpbixtb3JpbmVsLG1vcmlvbixtb3JraW4sbW9ybG9wLG1vcm1hb3IsbW9ybW8sbW9ybW9uLG1vcm15cixtb3JteXJlLG1vcm4sbW9ybmUsbW9ybmVkLG1vcm5pbmcsbW9ybyxtb3JvYyxtb3JvY2NvLG1vcm9uLG1vcm9uY3ksbW9yb25nLG1vcm9uaWMsbW9yb25yeSxtb3Jvc2UsbW9yb3Npcyxtb3JwaCxtb3JwaGVhLG1vcnBoZXcsbW9ycGhpYSxtb3JwaGljLG1vcnBob24sbW9ycmlzLG1vcnJvdyxtb3JzYWwsbW9yc2UsbW9yc2VsLG1vcnNpbmcsbW9yc3VyZSxtb3J0LG1vcnRhbCxtb3J0YXIsbW9ydGFyeSxtb3J0aCxtb3J0aWVyLG1vcnRpZnksbW9ydGlzZSxtb3J1bGEsbW9ydWxhcixtb3J1bGUsbW9ydmluLG1vcndvbmcsbW9zYWljLG1vc2Fpc3QsbW9zZXR0ZSxtb3NleSxtb3NrZXIsbW9zcXVlLG1vc3MsbW9zc2VkLG1vc3Nlcixtb3NzZXJ5LG1vc3NmdWwsbW9zc3ksbW9zdCxtb3N0ZSxtb3N0bHksbW90LG1vdGUsbW90ZWQsbW90ZWwsbW90ZXIsbW90ZXQsbW90ZXksbW90aCxtb3RoZWQsbW90aGVyLG1vdGhlcnksbW90aHksbW90aWYsbW90aWZpYyxtb3RpbGUsbW90aW9uLG1vdGl2ZSxtb3RsZXksbW90bW90LG1vdG9yLG1vdG9yZWQsbW90b3JpYyxtb3RvcnksbW90dCxtb3R0ZSxtb3R0bGUsbW90dGxlZCxtb3R0bGVyLG1vdHRvLG1vdHRvZWQsbW90eWthLG1vdSxtb3VjaGUsbW91ZCxtb3VkaWUsbW91ZHksbW91Zmxvbixtb3VpbGxlLG1vdWppayxtb3VsLG1vdWxkLG1vdWxkZWQsbW91bGUsbW91bGluLG1vdWxzLG1vdWx0ZXIsbW91bHksbW91bmQsbW91bmR5LG1vdW50LG1vdW50ZWQsbW91bnRlcixtb3VwLG1vdXJuLG1vdXJuZXIsbW91c2UsbW91c2VyLG1vdXNlcnksbW91c2V5LG1vdXNpbHksbW91c2luZyxtb3VzbGUsbW91c21lZSxtb3Vzc2UsbW91c3RvYyxtb3VzeSxtb3V0LG1vdXRhbixtb3V0aCxtb3V0aGVkLG1vdXRoZXIsbW91dGh5LG1vdXRvbixtb3V6YWgsbW92YWJsZSxtb3ZhYmx5LG1vdmFudCxtb3ZlLG1vdmVyLG1vdmllLG1vdmluZyxtb3csbW93YWJsZSxtb3dhbmEsbW93YnVybixtb3djaCxtb3djaHQsbW93ZXIsbW93aGEsbW93aWUsbW93aW5nLG1vd2xhbmQsbW93bixtb3dyYSxtb3dyYWgsbW93c2UsbW93dCxtb3d0aCxtb3hhLG1veSxtb3llbixtb3llbm5lLG1veWl0ZSxtb3lsZSxtb3lvLG1vemluZyxtcHJldCxtdSxtdWFuZyxtdWJhcmF0LG11Y2FnbyxtdWNhcm8sbXVjZWRpbixtdWNoLG11Y2hseSxtdWNpYyxtdWNpZCxtdWNpZmljLG11Y2lnZW4sbXVjaW4sbXVjayxtdWNrZXIsbXVja2V0LG11Y2tpdGUsbXVja2xlLG11Y2ttYW4sbXVja25hLG11Y2tzeSxtdWNreSxtdWNsdWMsbXVjb2lkLG11Y29uaWMsbXVjb3B1cyxtdWNvcixtdWNvc2EsbXVjb3NhbCxtdWNvc2UsbXVjb3VzLG11Y3JvLG11Y3VzLG11Y3VzaW4sbXVkLG11ZGFyLG11ZGJhbmssbXVkY2FwLG11ZGQsbXVkZGUsbXVkZGVuLG11ZGRpZnksbXVkZGlseSxtdWRkaW5nLG11ZGRpc2gsbXVkZGxlLG11ZGRsZXIsbXVkZHksbXVkZWUsbXVkZmlzaCxtdWRmbG93LG11ZGhlYWQsbXVkaG9sZSxtdWRpcixtdWRpcmlhLG11ZGxhbmQsbXVkbGFyayxtdWRsZXNzLG11ZHJhLG11ZHNpbGwsbXVkd2VlZCxtdWR3b3J0LG11ZXJtbyxtdWV6emluLG11ZmYsbXVmZmVkLG11ZmZldCxtdWZmaW4sbXVmZmlzaCxtdWZmbGUsbXVmZmxlZCxtdWZmbGVyLG11ZmZsaW4sbXVmZnksbXVmdGksbXVmdHksbXVnLG11Z2EsbXVnZnVsLG11Z2csbXVnZ2VyLG11Z2dldCxtdWdnaWx5LG11Z2dpbnMsbXVnZ2lzaCxtdWdnbGVzLG11Z2d5LG11Z2llbnQsbXVnd2VlZCxtdWd3b3J0LG11Z3d1bXAsbXVpZCxtdWlyLG11aXN0LG11a2x1ayxtdWt0YXIsbXVrdGksbXVsYXR0YSxtdWxhdHRvLG11bGNoLG11bGNoZXIsbXVsY3QsbXVsZGVyLG11bGUsbXVsZW1hbixtdWxldGEsbXVsZXR0YSxtdWxleSxtdWxnYSxtdWxpZXIsbXVsaXNoLG11bGlzbSxtdWxpdGEsbXVsayxtdWxsLG11bGxhLG11bGxhaCxtdWxsYXIsbXVsbGVpbixtdWxsZXIsbXVsbGV0LG11bGxldHMsbXVsbGV5LG11bGxpZCxtdWxsaW9uLG11bGxpdGUsbXVsbG9jayxtdWxsb2lkLG11bG11bCxtdWxzZSxtdWxzaWZ5LG11bHQsbXVsdHVtLG11bHR1cmUsbXVtLG11bWJsZSxtdW1ibGVyLG11bW1lcixtdW1tZXJ5LG11bW1pY2ssbXVtbWllZCxtdW1taWZ5LG11bW1pbmcsbXVtbXksbXVtbmVzcyxtdW1wLG11bXBlcixtdW1waXNoLG11bXBzLG11bixtdW5jaCxtdW5jaGVyLG11bmNoZXQsbXVuZCxtdW5kYW5lLG11bmRpYyxtdW5kaWZ5LG11bmRpbCxtdW5kbGUsbXVuZyxtdW5nYSxtdW5nZSxtdW5nZXksbXVuZ28sbXVuZ29mYSxtdW5ndWJhLG11bmd5LG11bmlmaWMsbXVuaXR5LG11bmosbXVuamVldCxtdW5uaW9uLG11bnNoaSxtdW50LG11bnRpbixtdW50amFjLG11cmEsbXVyYWdlLG11cmFsLG11cmFsZWQsbXVyYWxseSxtdXJjaHksbXVyZGVyLG11cmRydW0sbXVyZSxtdXJleCxtdXJleGFuLG11cmdhLG11cmdhdmksbXVyZ2VvbixtdXJpYXRlLG11cmljaWQsbXVyaWQsbXVyaW5lLG11cmludXMsbXVyaXRpLG11cml1bSxtdXJrLG11cmtpbHksbXVya2lzaCxtdXJrbHksbXVya3ksbXVybGluLG11cmx5LG11cm11cixtdXJwaHksbXVycmEsbXVycmFpbixtdXJyZSxtdXJyZXksbXVycmluYSxtdXJzaGlkLG11cnV4aSxtdXJ2YSxtdXJ6YSxtdXNhbCxtdXNhbmcsbXVzYXIsbXVzY2FkZSxtdXNjYXQsbXVzY2lkLG11c2NsZSxtdXNjbGVkLG11c2NseSxtdXNjb2lkLG11c2NvbmUsbXVzY29zZSxtdXNjb3QsbXVzY292eSxtdXNjdWxlLG11c2UsbXVzZWQsbXVzZWZ1bCxtdXNlaXN0LG11c2VyLG11c2VyeSxtdXNldHRlLG11c2V1bSxtdXNoLG11c2hhLG11c2hhYSxtdXNoZWQsbXVzaGVyLG11c2hpbHksbXVzaGxhLG11c2hydSxtdXNoeSxtdXNpYyxtdXNpY2FsLG11c2ljbyxtdXNpZSxtdXNpbHksbXVzaW1vbixtdXNpbmcsbXVzayxtdXNrYXQsbXVza2VnLG11c2tldCxtdXNraWUsbXVza2lzaCxtdXNrcmF0LG11c2t5LG11c2xpbixtdXNudWQsbXVzcXVhdyxtdXNyb2wsbXVzcyxtdXNzYWwsbXVzc2VsLG11c3NpbHksbXVzc3VrLG11c3N5LG11c3QsbXVzdGFuZyxtdXN0YXJkLG11c3RlZSxtdXN0ZXIsbXVzdGlmeSxtdXN0aWx5LG11c3RudCxtdXN0eSxtdXRhLG11dGFibGUsbXV0YWJseSxtdXRhZ2UsbXV0YW50LG11dGFzZSxtdXRhdGUsbXV0Y2gsbXV0ZSxtdXRlZGx5LG11dGVseSxtdXRoLG11dGljLG11dGlueSxtdXRpc20sbXV0aXN0LG11dGl2ZSxtdXRzamUsbXV0dCxtdXR0ZXIsbXV0dG9uLG11dHRvbnksbXV0dWFsLG11dHVhcnksbXV0dWxlLG11dHV1bSxtdXgsbXV5dXNhLG11emhpayxtdXp6LG11enppbHksbXV6emxlLG11enpsZXIsbXV6enksbXksbXlhbCxteWFsZ2lhLG15YWxnaWMsbXlhbGlzbSxteWFsbCxteWFyaWFuLG15YXRvbnksbXljZWxlLG15Y2VsaWEsbXljb2lkLG15Y29zZSxteWNvc2luLG15Y29zaXMsbXljb3RpYyxteWRpbmUsbXllbGljLG15ZWxpbixteWVsb2ljLG15ZWxvaWQsbXllbG9tYSxteWVsb24sbXlnYWxlLG15Z2FsaWQsbXlpYXNpcyxteWlvc2lzLG15aXRpcyxteWtpc3MsbXltYXJpZCxteW5hLG15b2NlbGUsbXlvY3l0ZSxteW9nZW4sbXlvZ3JhbSxteW9pZCxteW9sb2d5LG15b21hLG15b21lcmUsbXlvbmVtZSxteW9wZSxteW9waGFuLG15b3BpYSxteW9waWMsbXlvcHMsbXlvcHksbXlvc2luLG15b3NpcyxteW9zb3RlLG15b3RpYyxteW90b21lLG15b3RvbXksbXlvdG9ueSxteW93dW4sbXlveGluZSxteXJjZW5lLG15cmNpYSxteXJpYWQsbXlyaWFyZSxteXJpY2EsbXlyaWNpbixteXJpY3lsLG15cmluZ2EsbXlyb24sbXlyb25pYyxteXJvc2luLG15cnJoLG15cnJoZWQsbXlycmhpYyxteXJyaG9sLG15cnJoeSxteXJ0YWwsbXlydGxlLG15cnRvbCxteXNlbCxteXNlbGYsbXlzZWxsLG15c2lkLG15c29pZCxteXNvc3QsbXlzdCxteXN0YXgsbXlzdGVyeSxteXN0ZXMsbXlzdGljLG15c3RpZnksbXl0aCxteXRoaWZ5LG15dGhpc20sbXl0aGlzdCxteXRoaXplLG15dGhvcyxteXRodXMsbXl0aWxpZCxteXhhLG15eGVtaWEsbXl4byxteXhvaWQsbXl4b21hLG15eG9wb2QsbXl6b250LG4sbmEsbmFhLG5hYW0sbmFiLG5hYmFrLG5hYmJlcixuYWJrLG5hYmxhLG5hYmxlLG5hYm9iLG5hYm9icnksbmFicyxuYWNhcmF0LG5hY2UsbmFjZWxsZSxuYWNoLG5hY2hhbmksbmFja2V0LG5hY3JlLG5hY3JlZCxuYWNyaW5lLG5hY3JpdGUsbmFjcm91cyxuYWNyeSxuYWRkZXIsbmFkaXIsbmFkaXJhbCxuYWUsbmFlYm9keSxuYWVnYXRlLG5hZWwsbmFldGhlcixuYWcsbmFnYSxuYWdhaWthLG5hZ2FuYSxuYWdhcmEsbmFnZ2VyLG5hZ2dpbixuYWdnaW5nLG5hZ2dpc2gsbmFnZ2xlLG5hZ2dseSxuYWdneSxuYWdodCxuYWdtYWFsLG5hZ21hbixuYWduYWcsbmFnbmFpbCxuYWdvcixuYWdzbWFuLG5hZ3N0ZXIsbmFndWFsLG5haWFkLG5haWFudCxuYWlkLG5haWYsbmFpZmx5LG5haWcsbmFpZ2llLG5haWssbmFpbCxuYWlsYmluLG5haWxlcixuYWlsZXJ5LG5haWxpbmcsbmFpbHJvZCxuYWlseSxuYWluLG5haW5zZWwsbmFpbyxuYWlwa2luLG5haXJ5LG5haXMsbmFpc2gsbmFpdGhlcixuYWl2ZSxuYWl2ZWx5LG5haXZldGUsbmFpdmV0eSxuYWssbmFrZSxuYWtlZCxuYWtlZGx5LG5ha2VyLG5ha2hvZCxuYWtob2RhLG5ha28sbmFrb25nLG5ha29vLG5hbGxhaCxuYW0sbmFtYWJsZSxuYW1hcXVhLG5hbWF6LG5hbWRhLG5hbWUsbmFtZWx5LG5hbWVyLG5hbWluZyxuYW1tYWQsbmFuLG5hbmEsbmFuY3ksbmFuZGksbmFuZGluZSxuYW5kb3csbmFuZHUsbmFuZSxuYW5lcyxuYW5nYSxuYW5pc20sbmFua2VlbixuYW5raW4sbmFubnksbmFub2lkLG5hbnBpZSxuYW50LG5hbnRsZSxuYW9sb2d5LG5hb3MsbmFwLG5hcGEsbmFwYWwsbmFwYWxtLG5hcGUsbmFwZWFkLG5hcGVyZXIsbmFwZXJ5LG5hcGh0aGEsbmFwaHRobyxuYXBodG9sLG5hcGtpbixuYXBsZXNzLG5hcG9vLG5hcHBlLG5hcHBlZCxuYXBwZXIsbmFwcGluZyxuYXBweSxuYXByb24sbmFwdSxuYXIsbmFyY2lzbSxuYXJjaXN0LG5hcmNvbWEsbmFyY29zZSxuYXJjb3VzLG5hcmQsbmFyZGluZSxuYXJkb28sbmFyZXMsbmFyZ2lsLG5hcmlhbCxuYXJpYyxuYXJpY2EsbmFyaW5lLG5hcmssbmFya3ksbmFycixuYXJyYSxuYXJyYXMsbmFycmF0ZSxuYXJyb3csbmFycm93eSxuYXJ0aGV4LG5hcndoYWwsbmFyeSxuYXNhYixuYXNhbCxuYXNhbGlzLG5hc2FsbHksbmFzYXJkLG5hc2NlbnQsbmFzY2gsbmFzaCxuYXNoZ2FiLG5hc2hnb2IsbmFzaSxuYXNpYWwsbmFzaW9uLG5hc2l0aXMsbmFzcm9sLG5hc3QsbmFzdGljLG5hc3Rpa2EsbmFzdGlseSxuYXN0eSxuYXN1cyxuYXN1dGUsbmFzdXR1cyxuYXQsbmF0YWthLG5hdGFsLG5hdGFscyxuYXRhbnQsbmF0YXRvcixuYXRjaCxuYXRlcyxuYXRoZSxuYXRoZXIsbmF0aW9uLG5hdGl2ZSxuYXRyLG5hdHJpdW0sbmF0cm9uLG5hdHRlcixuYXR0aWx5LG5hdHRsZSxuYXR0eSxuYXR1YXJ5LG5hdHVyYWwsbmF0dXJlLG5hdWNyYXIsbmF1Z2VyLG5hdWdodCxuYXVnaHR5LG5hdW1rLG5hdW50LG5hdW50bGUsbmF1c2VhLG5hdXQsbmF1dGNoLG5hdXRoZXIsbmF1dGljLG5hdXRpY3MsbmF2YWwsbmF2YWxseSxuYXZhcixuYXZhcmNoLG5hdmUsbmF2ZWwsbmF2ZWxlZCxuYXZldCxuYXZldHRlLG5hdmV3LG5hdml0ZSxuYXZ2eSxuYXZ5LG5hdyxuYXdhYixuYXd0LG5heSxuYXlhdXIsbmF5c2F5LG5heXdhcmQsbmF5d29yZCxuYXplLG5hemltLG5hemlyLG5lLG5lYSxuZWFsLG5lYW5pYyxuZWFwLG5lYXBlZCxuZWFyYnksbmVhcmVzdCxuZWFyaXNoLG5lYXJseSxuZWF0LG5lYXRlbixuZWF0aCxuZWF0aWZ5LG5lYXRseSxuZWIsbmViYWNrLG5lYmJlZCxuZWJidWNrLG5lYmJ1ayxuZWJieSxuZWJlbCxuZWJyaXMsbmVidWxhLG5lYnVsYWUsbmVidWxhcixuZWJ1bGUsbmVjayxuZWNrYXIsbmVja2VkLG5lY2tlcixuZWNrZnVsLG5lY2tpbmcsbmVja2xldCxuZWNrdGllLG5lY3Jvc2UsbmVjdGFyLG5lY3RhcnksbmVkZGVyLG5lZGR5LG5lZSxuZWVib3IsbmVlYm91cixuZWVkLG5lZWRlcixuZWVkZnVsLG5lZWRoYW0sbmVlZGlseSxuZWVkaW5nLG5lZWRsZSxuZWVkbGVkLG5lZWRsZXIsbmVlZGxlcyxuZWVkbHksbmVlZHMsbmVlZHksbmVlZ2VyLG5lZWxkLG5lZWxlLG5lZW0sbmVlcCxuZWVwb3VyLG5lZXIsbmVlc2UsbmVldCxuZWV0dXAsbmVlemUsbmVmLG5lZmFzdCxuZWZmeSxuZWZ0Z2lsLG5lZ2F0ZSxuZWdhdG9yLG5lZ2VyLG5lZ2xlY3QsbmVncmluZSxuZWdybyxuZWd1cyxuZWksbmVpZixuZWlnaCxuZWlnaGVyLG5laXBlcixuZWlzdCxuZWl0aGVyLG5la3RvbixuZWxzb24sbmVtYSxuZW1hdGljLG5lbWVzZXMsbmVtZXNpYyxuZW1vcmFsLG5lbnRhLG5lbyxuZW9jeXRlLG5lb2dhbXksbmVvbGl0aCxuZW9sb2d5LG5lb24sbmVvbmF0ZSxuZW9yYW1hLG5lb3NzaW4sbmVvdGVueSxuZW90eXBlLG5lb3phLG5lcCxuZXBlcixuZXBoZWxlLG5lcGhlc2gsbmVwaGV3LG5lcGhyaWEsbmVwaHJpYyxuZXBocm9uLG5lcGhyb3MsbmVwbWFuLG5lcG90YWwsbmVwb3RlLG5lcG90aWMsbmVyZWl0ZSxuZXJpbmUsbmVyaXRpYyxuZXJ2YWwsbmVydmF0ZSxuZXJ2ZSxuZXJ2ZXIsbmVydmlkLG5lcnZpbHksbmVydmluZSxuZXJ2aW5nLG5lcnZpc2gsbmVydmlzbSxuZXJ2b3NlLG5lcnZvdXMsbmVydnVsZSxuZXJ2dXJlLG5lcnZ5LG5lc2UsbmVzaCxuZXNobHksbmVzaW90ZSxuZXNzLG5lc3QsbmVzdGFnZSxuZXN0ZXIsbmVzdGZ1bCxuZXN0bGUsbmVzdGxlcixuZXN0eSxuZXQsbmV0YmFsbCxuZXRidXNoLG5ldGNoYSxuZXRlLG5ldGVyLG5ldGZ1bCxuZXRoLG5ldGhlcixuZXRpLG5ldGxlYWYsbmV0bGlrZSxuZXRtYW4sbmV0b3AsbmV0c21hbixuZXRzdWtlLG5ldHRlZCxuZXR0ZXIsbmV0dGluZyxuZXR0bGUsbmV0dGxlcixuZXR0bHksbmV0dHksbmV0d2lzZSxuZXR3b3JrLG5ldW1hLG5ldW1lLG5ldW1pYyxuZXVyYWQsbmV1cmFsLG5ldXJhbGUsbmV1cmljLG5ldXJpbixuZXVyaW5lLG5ldXJpc20sbmV1cml0ZSxuZXVyb2lkLG5ldXJvbWEsbmV1cm9uLG5ldXJvbmUsbmV1cnVsYSxuZXV0ZXIsbmV1dHJhbCxuZXV0cm9uLG5ldmUsbmV2ZWwsbmV2ZXIsbmV2byxuZXZvaWQsbmV2b3ksbmV2dXMsbmV3LG5ld2NhbCxuZXdjb21lLG5ld2VsLG5ld2VsdHksbmV3aW5nLG5ld2luZ3MsbmV3aXNoLG5ld2x5LG5ld25lc3MsbmV3cyxuZXdzYm95LG5ld3NmdWwsbmV3c21hbixuZXdzeSxuZXd0LG5ld3Rha2UsbmV3dG9uLG5leGFsLG5leHQsbmV4dGx5LG5leHVtLG5leHVzLG5leWFuZGEsbmdhaSxuZ2FpbyxuZ2FwaSxuaSxuaWFjaW4sbmlhdGEsbmliLG5pYmJhbmEsbmliYmVkLG5pYmJlcixuaWJibGUsbmliYmxlcixuaWJieSxuaWJsaWNrLG5pYmxpa2Usbmlib25nLG5pYnMsbmlic29tZSxuaWNlLG5pY2Vpc2gsbmljZWx5LG5pY2V0eSxuaWNoZSxuaWNoZXIsbmljayxuaWNrZWwsbmlja2VyLG5pY2tleSxuaWNraW5nLG5pY2tsZSxuaWNreSxuaWNvbG8sbmljb3RpYSxuaWNvdGljLG5pY3RhdGUsbmlkLG5pZGFsLG5pZGFuYSxuaWRkaWNrLG5pZGRsZSxuaWRlLG5pZGdlLG5pZGdldCxuaWRnZXR5LG5pZGksbmlkaWZ5LG5pZGluZyxuaWRvcixuaWR1bHVzLG5pZHVzLG5pZWNlLG5pZWxsZWQsbmllbGxvLG5pZXBhLG5pZXZlLG5pZXZldGEsbmlmZSxuaWZmZXIsbmlmaWMsbmlmbGUsbmlmbGluZyxuaWZ0eSxuaWcsbmlnZ2FyZCxuaWdnZXIsbmlnZ2VyeSxuaWdnbGUsbmlnZ2xlcixuaWdnbHksbmlnaCxuaWdobHksbmlnaHQsbmlnaHRlZCxuaWdodGllLG5pZ2h0bHksbmlnaHRzLG5pZ25heSxuaWdueWUsbmlnb3JpLG5pZ3JlLG5pZ3JpZnksbmlncmluZSxuaWdyb3VzLG5pZ3VhLG5pa2F1LG5pbCxuaWxnYWksbmltLG5pbWIsbmltYmVkLG5pbWJpLG5pbWJsZSxuaW1ibHksbmltYm9zZSxuaW1idXMsbmltaWV0eSxuaW1pbnksbmltaW91cyxuaW1tZXIsbmltc2hpLG5pbmNvbSxuaW5lLG5pbmVwaW4sbmluZXRlZCxuaW5ldHksbmlubnksbmlub24sbmludGgsbmludGhseSxuaW50dSxuaW51dCxuaW9iYXRlLG5pb2JpYyxuaW9iaXRlLG5pb2JpdW0sbmlvYm91cyxuaW9nLG5pb3RhLG5pcCxuaXBhLG5pcHBlcixuaXBwZXJzLG5pcHBpbHksbmlwcGluZyxuaXBwbGUsbmlwcHksbmlwdGVyLG5pcmxlcyxuaXJ2YW5hLG5pc2VpLG5pc2hpa2ksbmlzbmFzLG5pc3Blcm8sbmlzc2UsbmlzdXMsbml0LG5pdGNoLG5pdGVuY3ksbml0ZXIsbml0ZXJlZCxuaXRoZXIsbml0aGluZyxuaXRpZCxuaXRvLG5pdG9uLG5pdHJhdGUsbml0cmljLG5pdHJpZGUsbml0cmlmeSxuaXRyaWxlLG5pdHJpdGUsbml0cm8sbml0cm91cyxuaXRyeWwsbml0dGVyLG5pdHR5LG5pdHdpdCxuaXZhbCxuaXZlb3VzLG5peCxuaXhpZSxuaXlvZ2Esbml6YW0sbml6YW11dCxuaXp5LG5qYXZlLG5vLG5vYSxub2Isbm9iYmVyLG5vYmJpbHksbm9iYmxlLG5vYmJsZXIsbm9iYnV0LG5vYmJ5LG5vYmxlLG5vYmxleSxub2JseSxub2JvZHksbm9icyxub2Nha2Usbm9jZW50LG5vY2ssbm9ja2V0LG5vY2t0YXQsbm9jdHVpZCxub2N0dWxlLG5vY3R1cm4sbm9jdWl0eSxub2N1b3VzLG5vZCxub2RhbCxub2RhdGVkLG5vZGRlcixub2RkaW5nLG5vZGRsZSxub2RkeSxub2RlLG5vZGVkLG5vZGksbm9kaWFrLG5vZGljYWwsbm9kb3NlLG5vZG91cyxub2R1bGFyLG5vZHVsZSxub2R1bGVkLG5vZHVsdXMsbm9kdXMsbm9lbCxub2V0aWMsbm9ldGljcyxub2csbm9nYWRhLG5vZ2FsLG5vZ2dlbixub2dnaW4sbm9nZ2luZyxub2doZWFkLG5vaG93LG5vaWwsbm9pbGFnZSxub2lsZXIsbm9pbHksbm9pbnQsbm9pcixub2lzZSxub2lzaWx5LG5vaXNvbWUsbm9pc3ksbm9rdGEsbm9sbCxub2xsZSxub2xvLG5vbWEsbm9tYWQsbm9tYWRpYyxub21hbmN5LG5vbWFyY2gsbm9tYnJpbCxub21lLG5vbWlhbCxub21pYyxub21pbmEsbm9taW5hbCxub21pbmVlLG5vbWlueSxub21pc20sbm9taXNtYSxub21vcyxub24sbm9uYWNpZCxub25hY3Qsbm9uYWdlLG5vbmFnb24sbm9uYWlkLG5vbmFpcixub25hbmUsbm9uYXJ5LG5vbmJhc2Usbm9uY2Usbm9uY29jayxub25jb20sbm9uY29tZSxub25jb24sbm9uZGEsbm9uZG8sbm9uZSxub25lZ28sbm9uZW5lLG5vbmVudCxub25lcGljLG5vbmVzLG5vbmV0LG5vbmV2aWwsbm9uZmFjdCxub25mYXJtLG5vbmZhdCxub25mb29kLG5vbmZvcm0sbm9uZnJhdCxub25nYXMsbm9uZ29kLG5vbmdvbGQsbm9uZ3JheSxub25ncmV5LG5vbmhlcm8sbm9uaWMsbm9uaW9uLG5vbml1cyxub25qdXJ5LG5vbmxpZmUsbm9ubHksbm9ubmFudCxub25uYXQsbm9ub2ljLG5vbm9pbHksbm9ub21hZCxub25wYWlkLG5vbnBhcixub25wZWFrLG5vbnBsdXMsbm9ucG9ldCxub25wb3J0LG5vbnJ1bixub25zYWxlLG5vbnNhbmUsbm9uc2VsZixub25zaW5lLG5vbnNraWQsbm9uc2xpcCxub25zdG9wLG5vbnN1aXQsbm9udGFuLG5vbnRheCxub250ZXJtLG5vbnVwbGUsbm9udXNlLG5vbnVzZXIsbm9ud2FyLG5vbnlhLG5vbnlsLG5vbnlsaWMsbm9uemVybyxub29kbGUsbm9vayxub29rZWQsbm9va2VyeSxub29raW5nLG5vb2tsZXQsbm9va3ksbm9vbG9neSxub29uLG5vb25kYXksbm9vbmluZyxub29ubGl0LG5vb3Asbm9vc2Usbm9vc2VyLG5vcGFsLG5vcGFscnksbm9wZSxub3Isbm9yYXJkLG5vcmF0ZSxub3JlYXN0LG5vcmVsaW4sbm9yZ2luZSxub3JpLG5vcmlhLG5vcmllLG5vcmltb24sbm9yaXRlLG5vcmxhbmQsbm9ybSxub3JtYSxub3JtYWwsbm9yc2VsLG5vcnRoLG5vcnRoZXIsbm9yd2FyZCxub3J3ZXN0LG5vc2Usbm9zZWFuLG5vc2VkLG5vc2VnYXksbm9zZXIsbm9zZXksbm9zaW5lLG5vc2luZyxub3Npc20sbm9zdGljLG5vc3RyaWwsbm9zdHJ1bSxub3N5LG5vdCxub3RhYmxlLG5vdGFibHksbm90YWVhbCxub3RhZXVtLG5vdGFsLG5vdGFuLG5vdGFyeSxub3RhdGUsbm90YXRvcixub3RjaCxub3RjaGVkLG5vdGNoZWwsbm90Y2hlcixub3RjaHksbm90ZSxub3RlZCxub3RlZGx5LG5vdGVraW4sbm90ZWxldCxub3Rlcixub3RoZXIsbm90aGluZyxub3Rob3VzLG5vdGljZSxub3RpY2VyLG5vdGlmeSxub3Rpb24sbm90aXRpYSxub3RvdXIsbm90c2VsZixub3R1bSxub3VnYXQsbm91Z2h0LG5vdW4sbm91bmFsLG5vdW5pemUsbm91cCxub3VyaWNlLG5vdXJpc2gsbm91cyxub3V0aGVyLG5vdmEsbm92YWxpYSxub3ZhdGUsbm92YXRvcixub3ZjaWMsbm92ZWwsbm92ZWxldCxub3ZlbGxhLG5vdmVsbHksbm92ZWxyeSxub3ZlbHR5LG5vdmVtLG5vdmVuYSxub3ZlbmUsbm92aWNlLG5vdml0eSxub3csbm93YWRheSxub3dheSxub3dheXMsbm93ZWQsbm93ZWwsbm93aGF0LG5vd2hlbixub3doZXJlLG5vd2hpdCxub3dpc2Usbm93bmVzcyxub3d0LG5vd3ksbm94YSxub3hhbCxub3hhbGx5LG5veGlvdXMsbm95LG5veWFkZSxub3lhdSxub3p6bGUsbm96emxlcixudGgsbnUsbnVhbmNlLG51YixudWJiaW4sbnViYmxlLG51YmJseSxudWJieSxudWJpYSxudWJpbGUsbnVjYWwsbnVjaGEsbnVjaGFsLG51Y2luLG51Y2xlYWwsbnVjbGVhcixudWNsZWksbnVjbGVpbixudWNsZW9uLG51Y2xldXMsbnVjbGlkZSxudWN1bGUsbnVjdWxpZCxudWRhdGUsbnVkZGxlLG51ZGUsbnVkZWx5LG51ZGdlLG51ZGdlcixudWRpcGVkLG51ZGlzaCxudWRpc20sbnVkaXN0LG51ZGl0eSxudWdhdG9yLG51Z2dhcixudWdnZXQsbnVnZ2V0eSxudWdpZnksbnVrZSxudWwsbnVsbCxudWxsYWgsbnVsbGlmeSxudWxsaXNtLG51bGxpdHksbnVsbG8sbnVtYixudW1iZXIsbnVtYmluZyxudW1ibGUsbnVtYmxlcyxudW1ibHksbnVtZGEsbnVtZGFoLG51bWVuLG51bWVyYWwsbnVtZXJvLG51bW1hcnksbnVtbWksbnVtbXVzLG51bXVkLG51bixudW5hdGFrLG51bmJpcmQsbnVuY2gsbnVuY2lvLG51bmNsZSxudW5kaW5lLG51bmhvb2QsbnVua3ksbnVubGV0LG51bmxpa2UsbnVubmFyaSxudW5uZXJ5LG51bm5pLG51bm5pZnksbnVubmlzaCxudW5zaGlwLG51cHRpYWwsbnVxdWUsbnVyYWdoZSxudXJoYWcsbnVybHksbnVyc2UsbnVyc2VyLG51cnNlcnksbnVyc2luZyxudXJzbGUsbnVyc3ksbnVydHVyZSxudXNmaWFoLG51dCxudXRhbnQsbnV0YXRlLG51dGNha2UsbnV0Z2FsbCxudXRob29rLG51dGxldCxudXRsaWtlLG51dG1lZyxudXRwaWNrLG51dHJpYSxudXRyaWNlLG51dHJpZnksbnV0c2VlZCxudXR0ZWQsbnV0dGVyLG51dHRlcnksbnV0dGlseSxudXR0aW5nLG51dHRpc2gsbnV0dHksbnV6emVyLG51enpsZSxueWFuemEsbnllLG55bGFzdCxueWxvbixueW1pbCxueW1waCxueW1waGEsbnltcGhhZSxueW1waGFsLG55bXBoZXQsbnltcGhpYyxueW1waGlkLG55bXBobHksbnl4aXMsbyxvYWRhbCxvYWYsb2FmZG9tLG9hZmlzaCxvYWssb2FrZW4sb2FrbGV0LG9ha2xpa2Usb2FrbGluZyxvYWt1bSxvYWt3ZWIsb2Frd29vZCxvYWt5LG9hbSxvYXIsb2FyYWdlLG9hcmNvY2ssb2FyZWQsb2FyZmlzaCxvYXJob2xlLG9hcmlhbCxvYXJpYyxvYXJpdGljLG9hcml0aXMsb2FyaXVtLG9hcmxlc3Msb2FybGlrZSxvYXJsb2NrLG9hcmxvcCxvYXJtYW4sb2Fyc21hbixvYXJ3ZWVkLG9hcnksb2FzYWwsb2FzZWFuLG9hc2VzLG9hc2lzLG9hc2l0aWMsb2FzdCxvYXQsb2F0YmluLG9hdGNha2Usb2F0ZWFyLG9hdGVuLG9hdGZvd2wsb2F0aCxvYXRoYXksb2F0aGVkLG9hdGhmdWwsb2F0aGxldCxvYXRsYW5kLG9hdGxpa2Usb2F0bWVhbCxvYXRzZWVkLG9hdHksb2JhbixvYmNsdWRlLG9iZSxvYmVhaCxvYmVjaGUsb2JlaXNtLG9iZWxpYSxvYmVsaWFjLG9iZWxpYWwsb2JlbGlvbixvYmVsaXNrLG9iZWxpc20sb2JlbGl6ZSxvYmVsdXMsb2Jlc2Usb2Jlc2VseSxvYmVzaXR5LG9iZXgsb2JleSxvYmV5ZXIsb2JpLG9iaXNwbyxvYml0LG9iaXR1YWwsb2JqZWN0LG9ianVyZSxvYmxhdGUsb2JsZXksb2JsaWdlLG9ibGlnZWQsb2JsaWdlZSxvYmxpZ2VyLG9ibGlnb3Isb2JsaXF1ZSxvYmxvbmcsb2Jsb3F1eSxvYm9lLG9ib2lzdCxvYm9sLG9ib2xhcnksb2JvbGUsb2JvbGV0LG9ib2x1cyxvYm92YWwsb2JvdmF0ZSxvYm92b2lkLG9ic2NlbmUsb2JzY3VyZSxvYnNlZGUsb2JzZXF1eSxvYnNlcnZlLG9ic2VzcyxvYnRhaW4sb2J0ZWN0LG9idGVzdCxvYnRydWRlLG9idHVuZCxvYnR1c2Usb2J2ZXJzZSxvYnZlcnQsb2J2aWF0ZSxvYnZpb3VzLG9idm9sdmUsb2NhcmluYSxvY2NhbXksb2NjaXB1dCxvY2NsdWRlLG9jY2x1c2Usb2NjdWx0LG9jY3VweSxvY2N1cixvY2VhbixvY2VhbmVkLG9jZWFuZXQsb2NlYW5pYyxvY2VsbGFyLG9jZWxsaSxvY2VsbHVzLG9jZWxvaWQsb2NlbG90LG9jaCxvY2hhdmEsb2NoYXZvLG9jaGVyLG9jaGVyeSxvY2hvbmUsb2NocmVhLG9jaHJvLG9jaHJvaWQsb2Nocm91cyxvY2h0LG9jayxvY2xvY2ssb2NvdGUsb2NxdWUsb2NyYWN5LG9jcmVhLG9jcmVhdGUsb2N0YWQsb2N0YWRpYyxvY3RhZ29uLG9jdGFuLG9jdGFuZSxvY3RhbnQsb2N0YXBsYSxvY3RhcmNoLG9jdGFyeSxvY3RhdmFsLG9jdGF2ZSxvY3RhdmljLG9jdGF2byxvY3RlbmUsb2N0ZXQsb2N0aWMsb2N0aW5lLG9jdG9hZCxvY3RvYXRlLG9jdG9maWQsb2N0b2ljLG9jdG9pZCxvY3RvbmFsLG9jdG9vbixvY3RvcGVkLG9jdG9waSxvY3RvcG9kLG9jdG9wdXMsb2N0b3NlLG9jdG95bCxvY3Ryb2ksb2N0cm95LG9jdHVvcixvY3R1cGxlLG9jdHVwbHksb2N0eWwsb2N0eW5lLG9jdWJ5LG9jdWxhcixvY3VsYXJ5LG9jdWxhdGUsb2N1bGlzdCxvY3VsdXMsb2Qsb2RhLG9kYWNvaWQsb2RhbCxvZGFsaXNrLG9kYWxsZXIsb2RhbG1hbixvZGQsb2RkaXNoLG9kZGl0eSxvZGRsZWdzLG9kZGx5LG9kZG1hbixvZGRtZW50LG9kZG5lc3Msb2RkcyxvZGRzbWFuLG9kZSxvZGVsLG9kZWxldCxvZGVvbixvZGV1bSxvZGljLG9kaW5pdGUsb2Rpb3VzLG9kaXN0LG9kaXVtLG9kb2xvZ3ksb2RvbnRpYyxvZG9vbSxvZG9yLG9kb3JhbnQsb2RvcmF0ZSxvZG9yZWQsb2RvcmZ1bCxvZG9yaXplLG9kb3JvdXMsb2RzbyxvZHVtLG9keWwsb2R5bGljLG9keWxpc20sb2R5bGlzdCxvZHlsaXplLG9lLG9lY2lzdCxvZWN1cyxvZW5pbixvZW5vbGluLG9lbm9tZWwsb2VyLG9lcnN0ZWQsb2VzLG9lc3RyaWQsb2VzdHJpbixvZXN0cnVtLG9lc3RydXMsb2Ysb2ZmLG9mZmFsLG9mZmJlYXQsb2ZmY2FzdCxvZmZjb21lLG9mZmN1dCxvZmZlbmQsb2ZmZW5zZSxvZmZlcixvZmZlcmVlLG9mZmVyZXIsb2ZmZXJvcixvZmZoYW5kLG9mZmljZSxvZmZpY2VyLG9mZmluZyxvZmZpc2gsb2ZmbGV0LG9mZmxvb2ssb2Zmc2N1bSxvZmZzZXQsb2ZmdGFrZSxvZmZ0eXBlLG9mZndhcmQsb2ZsZXRlLG9mdCxvZnRlbixvZnRlbnMsb2Z0ZXIsb2Z0ZXN0LG9mdGx5LG9mdG5lc3Msb2Z0dGltZSxvZ2FpcmUsb2dhbSxvZ2FtaWMsb2dkb2FkLG9nZG9hcyxvZ2VlLG9nZWVkLG9naGFtLG9naGFtaWMsb2dpdmFsLG9naXZlLG9naXZlZCxvZ2xlLG9nbGVyLG9nbWljLG9ncmUsb2dyZWlzaCxvZ3JlaXNtLG9ncmVzcyxvZ3Jpc2gsb2dyaXNtLG9ndGllcm4sb2d1bSxvaCxvaGVsbyxvaGlhLG9obSxvaG1hZ2Usb2htaWMsb2hvLG9ob3ksb2lkaW9pZCxvaWksb2lsLG9pbGJpcmQsb2lsY2FuLG9pbGNvYXQsb2lsY3VwLG9pbGRvbSxvaWxlZCxvaWxlcixvaWxlcnksb2lsZmlzaCxvaWxob2xlLG9pbGlseSxvaWxsZXNzLG9pbGxldCxvaWxsaWtlLG9pbG1hbixvaWxzZWVkLG9pbHNraW4sb2lsd2F5LG9pbHksb2lseWlzaCxvaW1lLG9pbm9tZWwsb2ludCxvaXNpbixvaXRhdmEsb2thLG9rYXBpLG9rZWUsb2tlbml0ZSxva2V0LG9raSxva2lhLG9rb25pdGUsb2tyYSxva3J1ZyxvbGFtLG9sYW1pYyxvbGQsb2xkZW4sb2xkZXIsb2xkaXNoLG9sZGxhbmQsb2xkbmVzcyxvbGRzdGVyLG9sZHdpZmUsb2xlYW5hLG9sZWFzZSxvbGVhdGUsb2xlZmluLG9sZWZpbmUsb2xlaWMsb2xlaW4sb2xlbmEsb2xlbmlkLG9sZW50LG9sZW8sb2xlb3NlLG9sZW91cyxvbGZhY3Qsb2xmYWN0eSxvbGliYW4sb2xpZCxvbGlnaXN0LG9saW8sb2xpdG9yeSxvbGl2YSxvbGl2YXJ5LG9saXZlLG9saXZlZCxvbGl2ZXQsb2xpdmlsLG9saXZpbGUsb2xpdmluZSxvbGxhLG9sbGFtaCxvbGxhcG9kLG9sbG9jayxvbG0sb2xvZ2lzdCxvbG9neSxvbG9tYW8sb2xvbmEsb2xvcm9zbyxvbHBlLG9sdG9uZGUsb2x0dW5uYSxvbHljb29rLG9seWtvZWssb20sb21hZ3JhLG9tYWxnaWEsb21hbyxvbWFzdW0sb21iZXIsb21lZ2Esb21lZ29pZCxvbWVsZXQsb21lbixvbWVuZWQsb21lbnRhbCxvbWVudHVtLG9tZXIsb21pY3JvbixvbWluYSxvbWlub3VzLG9taXQsb21pdGlzLG9taXR0ZXIsb21sYWgsb21uZWl0eSxvbW5pYW5hLG9tbmlidXMsb21uaWZpYyxvbW5pZnksb21uaXN0LG9tbml1bSxvbixvbmEsb25hZ2VyLG9uYWdyYSxvbmFuaXNtLG9uYW5pc3Qsb25jYSxvbmNlLG9uY2V0dGEsb25jaWEsb25jaW4sb25jb21lLG9uY29zaXMsb25jb3N0LG9uZGF0cmEsb25kaW5lLG9uZHksb25lLG9uZWZvbGQsb25lZ2l0ZSxvbmVob3csb25laXJpYyxvbmVpc20sb25lbWVudCxvbmVuZXNzLG9uZXIsb25lcmFyeSxvbmVyb3VzLG9uZXJ5LG9uZXNlbGYsb25ldGltZSxvbmV5ZXIsb25mYWxsLG9uZmxvdyxvbmdhcm8sb25nb2luZyxvbmljb2xvLG9uaW9uLG9uaW9uZXQsb25pb255LG9uaXVtLG9ua29zLG9ubGF5LG9ubGVweSxvbmxpZXN0LG9ubG9vayxvbmx5LG9ubWFyY2gsb25ydXNoLG9ucyxvbnNldCxvbnNob3JlLG9uc2lkZSxvbnNpZ2h0LG9uc3RhbmQsb25zdGVhZCxvbnN3ZWVwLG9udGFsLG9udG8sb251cyxvbndhcmQsb253YXJkcyxvbnljaGEsb255Y2hpYSxvbnljaGluLG9ueW0sb255bWFsLG9ueW1pdHksb255bWl6ZSxvbnltb3VzLG9ueW15LG9ueXgsb255eGlzLG9uemEsb29ibGFzdCxvb2N5c3Qsb29jeXRlLG9vZGxlcyxvb2VjaWFsLG9vZWNpdW0sb29mYmlyZCxvb2Z0aXNoLG9vZnksb29nYW15LG9vZ2VueSxvb2dsZWEsb29nb25lLG9vZ3JhcGgsb29pZCxvb2lkYWwsb29sYWssb29sZW1tYSxvb2xpdGUsb29saXRpYyxvb2xseSxvb2xvZ2ljLG9vbG9neSxvb2xvbmcsb29tYW5jeSxvb21ldGVyLG9vbWV0cnksb29ucyxvb250LG9vcGFrLG9vcGhvcmUsb29waHl0ZSxvb3BsYXNtLG9vcGxhc3Qsb29wb2Qsb29wb2RhbCxvb3JhbGksb29yZCxvb3Njb3BlLG9vc2NvcHksb29zcGVybSxvb3Nwb3JlLG9vdGhlY2Esb290aWQsb290eXBlLG9vemUsb296aWx5LG9vem9vaWQsb296eSxvcGFjYXRlLG9wYWNpZnksb3BhY2l0ZSxvcGFjaXR5LG9wYWNvdXMsb3BhaCxvcGFsLG9wYWxlZCxvcGFsaW5lLG9wYWxpc2gsb3BhbGl6ZSxvcGFsb2lkLG9wYXF1ZSxvcGUsb3BlbGV0LG9wZW4sb3BlbmVyLG9wZW5pbmcsb3Blbmx5LG9wZXJhLG9wZXJhZSxvcGVyYW5kLG9wZXJhbnQsb3BlcmF0ZSxvcGVyY2xlLG9wZXJvc2Usb3BoaWMsb3BoaW9pZCxvcGhpdGUsb3BoaXRpYyxvcGhyeW9uLG9waWFuaWMsb3BpYW55bCxvcGlhdGUsb3BpYXRpYyxvcGlpc20sb3BpbmFudCxvcGluZSxvcGluZXIsb3BpbmlvbixvcGl1bSxvcG9zc3VtLG9wcGlkYW4sb3Bwb3NlLG9wcG9zZWQsb3Bwb3NlcixvcHBvc2l0LG9wcHJlc3Msb3BwdWduLG9wc29uaWMsb3Bzb25pbixvcHN5LG9wdCxvcHRhYmxlLG9wdGFibHksb3B0YW50LG9wdGF0ZSxvcHRpYyxvcHRpY2FsLG9wdGljb24sb3B0aWNzLG9wdGltYWwsb3B0aW1lLG9wdGltdW0sb3B0aW9uLG9wdGl2ZSxvcHVsZW50LG9wdWx1cyxvcHVzLG9xdWFzc2Esb3Isb3JhLG9yYWNoLG9yYWNsZSxvcmFkLG9yYWdlLG9yYWwsb3JhbGVyLG9yYWxpc20sb3JhbGlzdCxvcmFsaXR5LG9yYWxpemUsb3JhbGx5LG9yYWxvZ3ksb3Jhbmcsb3JhbmdlLG9yYW5nZXIsb3JhbmdleSxvcmFudCxvcmFyaWFuLG9yYXJpb24sb3Jhcml1bSxvcmFyeSxvcmF0ZSxvcmF0aW9uLG9yYXRvcixvcmF0b3J5LG9yYXRyaXgsb3JiLG9yYmVkLG9yYmljLG9yYmljYWwsb3JiaWNsZSxvcmJpZmljLG9yYml0LG9yYml0YWwsb3JiaXRhcixvcmJpdGUsb3JibGVzcyxvcmJsZXQsb3JieSxvcmMsb3JjYW5ldCxvcmNlaW4sb3JjaGFyZCxvcmNoYXQsb3JjaGVsLG9yY2hpYyxvcmNoaWQsb3JjaGlsLG9yY2luLG9yY2lub2wsb3JkYWluLG9yZGVhbCxvcmRlcixvcmRlcmVkLG9yZGVyZXIsb3JkZXJseSxvcmRpbmFsLG9yZGluYXIsb3JkaW5lZSxvcmRpbmVzLG9yZHUsb3JkdXJlLG9yZSxvcmVhZCxvcmVjdGljLG9yZWxsaW4sb3JlbWFuLG9yZW5kYSxvcmV3ZWVkLG9yZXdvb2Qsb3JleGlzLG9yZixvcmZnaWxkLG9yZ2FuLG9yZ2FuYWwsb3JnYW5keSxvcmdhbmVyLG9yZ2FuaWMsb3JnYW5vbixvcmdhbnJ5LG9yZ2FudW0sb3JnYXNtLG9yZ2VhdCxvcmdpYSxvcmdpYWMsb3JnaWFjcyxvcmdpYXNtLG9yZ2lhc3Qsb3JnaWMsb3JndWUsb3JneSxvcmd5aWEsb3JpYmksb3JpZWwsb3JpZW5jeSxvcmllbnQsb3JpZmljZSxvcmlmb3JtLG9yaWdhbixvcmlnaW4sb3JpZ25hbCxvcmlob24sb3JpbGxvbixvcmlvbGUsb3Jpc29uLG9yaXN0aWMsb3JsZSxvcmxlYW4sb3JsZXQsb3JsbyxvcmxvcCxvcm1lcixvcm1vbHUsb3JuYSxvcm5hdGUsb3JuZXJ5LG9ybmlzLG9ybm9pdGUsb3JvYW5hbCxvcm9nZW4sb3JvZ2VueSxvcm9pZGUsb3JvbG9neSxvcm9ub2NvLG9yb3R1bmQsb3JwaGFuLG9ycGhlb24sb3JwaGV1bSxvcnBocmV5LG9ycGluZSxvcnJlcnksb3JyaG9pZCxvcnJpcyxvcnNlbCxvcnNlbGxlLG9ydCxvcnRhbGlkLG9ydGV0LG9ydGhhbCxvcnRoaWFuLG9ydGhpYyxvcnRoaWQsb3J0aGl0ZSxvcnRobyxvcnRob3NlLG9ydGhyb24sb3J0aWdhLG9ydGl2ZSxvcnRvbGFuLG9ydHlnYW4sb3J5LG9yeXNzaWQsb3Msb3NhbWluLG9zYW1pbmUsb3Nhem9uZSxvc2NlbGxhLG9zY2hlYWwsb3NjaW4sb3NjaW5lLG9zY25vZGUsb3NjdWxhcixvc2N1bGUsb3NjdWx1bSxvc2Usb3NlbGEsb3NoYWMsb3NpZGUsb3NpZXIsb3NpZXJlZCxvc2llcnksb3NtYXRlLG9zbWF0aWMsb3NtZXNpcyxvc21ldGljLG9zbWljLG9zbWluLG9zbWluYSxvc21pb3VzLG9zbWl1bSxvc21vc2Usb3Ntb3Npcyxvc21vdGljLG9zbW91cyxvc211bmQsb3NvbmUsb3NvcGh5LG9zcHJleSxvc3NhbCxvc3NlLG9zc2Vpbixvc3NlbGV0LG9zc2VvdXMsb3NzaWNsZSxvc3NpZmljLG9zc2lmeSxvc3N1YXJ5LG9zdGVhbCxvc3RlaW4sb3N0ZW1pYSxvc3RlbnQsb3N0ZW9pZCxvc3Rlb21hLG9zdGlhbCxvc3RpYXJ5LG9zdGlhdGUsb3N0aW9sZSxvc3RpdGlzLG9zdGl1bSxvc3RtYXJrLG9zdG9zaXMsb3N0cmljaCxvdGFsZ2lhLG90YWxnaWMsb3RhbGd5LG90YXJpYW4sb3RhcmluZSxvdGFyeSxvdGF0ZSxvdGhlcixvdGhtYW55LG90aWFudCxvdGlhdHJ5LG90aWMsb3RpZGluZSxvdGlkaXVtLG90aW9zZSxvdGl0aWMsb3RpdGlzLG90a29uLG90b2N5c3Qsb3RvbGl0ZSxvdG9saXRoLG90b2xvZ3ksb3Rvc2lzLG90b3RvbXksb3R0YXIsb3R0ZXIsb3R0ZXJlcixvdHRvLG90dXJpYSxvdWFiYWluLG91YWJhaW8sb3VhYmUsb3Vha2FyaSxvdWNoLG91ZW5pdGUsb3VmLG91Z2gsb3VnaHQsb3VnaHRudCxvdWtpYSxvdWxhcCxvdW5jZSxvdW5kcyxvdXBoZSxvdXBoaXNoLG91cixvdXJpZSxvdXJvdWIsb3VycyxvdXJzZWxmLG91c3Qsb3VzdGVyLG91dCxvdXRhY3Qsb3V0YWdlLG91dGFyZGUsb3V0YXNrLG91dGF3ZSxvdXRiYWNrLG91dGJha2Usb3V0YmFuLG91dGJhcixvdXRiYXJrLG91dGJhd2wsb3V0YmVhbSxvdXRiZWFyLG91dGJlZyxvdXRiZW50LG91dGJpZCxvdXRibG90LG91dGJsb3csb3V0Ym9uZCxvdXRib29rLG91dGJvcm4sb3V0Ym93LG91dGJvd2wsb3V0Ym94LG91dGJyYWcsb3V0YnJheSxvdXRicmVkLG91dGJ1ZCxvdXRidWxrLG91dGJ1cm4sb3V0YnV5LG91dGJ1enosb3V0Ynksb3V0Y2FudCxvdXRjYXNlLG91dGNhc3Qsb3V0Y2l0eSxvdXRjb21lLG91dGNyb3Asb3V0Y3JvdyxvdXRjcnksb3V0Y3VsbCxvdXRjdXJlLG91dGN1dCxvdXRkYXJlLG91dGRhdGUsb3V0ZG8sb3V0ZG9lcixvdXRkb29yLG91dGRyYXcsb3V0ZHVyZSxvdXRlYXQsb3V0ZWNobyxvdXRlZCxvdXRlZGdlLG91dGVuLG91dGVyLG91dGVybHksb3V0ZXllLG91dGV5ZWQsb3V0ZmFjZSxvdXRmYWxsLG91dGZhbWUsb3V0ZmFzdCxvdXRmYXduLG91dGZlYXQsb3V0ZmlzaCxvdXRmaXQsb3V0ZmxvdyxvdXRmbHVlLG91dGZsdXgsb3V0Zmx5LG91dGZvbGQsb3V0Zm9vbCxvdXRmb290LG91dGZvcm0sb3V0Zm9ydCxvdXRnYWluLG91dGdhbWUsb3V0Z2FuZyxvdXRnYXMsb3V0Z2F0ZSxvdXRnYXplLG91dGdpdmUsb3V0Z2xhZCxvdXRnbG93LG91dGduYXcsb3V0Z28sb3V0Z29lcixvdXRnb25lLG91dGdyaW4sb3V0Z3JvdyxvdXRndW4sb3V0Z3VzaCxvdXRoYXVsLG91dGhlYXIsb3V0aGVlbCxvdXRoZXIsb3V0aGlyZSxvdXRoaXNzLG91dGhpdCxvdXRob2xkLG91dGhvd2wsb3V0aHVlLG91dGh1bnQsb3V0aHVybCxvdXRodXQsb3V0aHltbixvdXRpbmcsb3V0aXNoLG91dGphenosb3V0amVzdCxvdXRqZXQsb3V0amlueCxvdXRqdW1wLG91dGp1dCxvdXRraWNrLG91dGtpbGwsb3V0a2luZyxvdXRraXNzLG91dGtuZWUsb3V0bGFpZCxvdXRsYW5kLG91dGxhc2gsb3V0bGFzdCxvdXRsYXcsb3V0bGF5LG91dGxlYW4sb3V0bGVhcCxvdXRsZXIsb3V0bGV0LG91dGxpZSxvdXRsaWVyLG91dGxpbWIsb3V0bGltbixvdXRsaW5lLG91dGxpcCxvdXRsaXZlLG91dGxvb2ssb3V0bG9yZCxvdXRsb3ZlLG91dGx1bmcsb3V0bHksb3V0bWFuLG91dG1hdGUsb3V0bW9kZSxvdXRtb3N0LG91dG1vdmUsb3V0bmFtZSxvdXRuZXNzLG91dG5vb2ssb3V0b3ZlbixvdXRwYWNlLG91dHBhZ2Usb3V0cGFydCxvdXRwYXNzLG91dHBhdGgsb3V0cGF5LG91dHBlYWwsb3V0cGVlcCxvdXRwZWVyLG91dHBpY2ssb3V0cGlwZSxvdXRwaXR5LG91dHBsYW4sb3V0cGxheSxvdXRwbG9kLG91dHBsb3Qsb3V0cG9sbCxvdXRwb21wLG91dHBvcCxvdXRwb3J0LG91dHBvc3Qsb3V0cG91cixvdXRwcmF5LG91dHByeSxvdXRwdWxsLG91dHB1cmwsb3V0cHVzaCxvdXRwdXQsb3V0cmFjZSxvdXRyYWdlLG91dHJhaWwsb3V0cmFuayxvdXRyYW50LG91dHJhcCxvdXRyYXRlLG91dHJhdmUsb3V0cmF5LG91dHJlLG91dHJlYWQsb3V0cmVkZSxvdXRyaWNrLG91dHJpZGUsb3V0cmlnLG91dHJpbmcsb3V0cm9hcixvdXRyb2xsLG91dHJvb3Qsb3V0cm92ZSxvdXRyb3csb3V0cnVuLG91dHJ1c2gsb3V0c2FpbCxvdXRzYXksb3V0c2VhLG91dHNlYW0sb3V0c2VlLG91dHNlZWssb3V0c2VsbCxvdXRzZXJ0LG91dHNldCxvdXRzaG90LG91dHNob3csb3V0c2h1dCxvdXRzaWRlLG91dHNpZnQsb3V0c2lnaCxvdXRzaW4sb3V0c2luZyxvdXRzaXQsb3V0c2l6ZSxvdXRza2lwLG91dHNvYXIsb3V0c29sZSxvdXRzcGFuLG91dHNwaW4sb3V0c3BpdCxvdXRzcHVlLG91dHN0YXksb3V0c3RlcCxvdXRzdWNrLG91dHN1bGssb3V0c3VtLG91dHN3aW0sb3V0dGFsayxvdXR0YXNrLG91dHRlYXIsb3V0dGVsbCxvdXR0aXJlLG91dHRvaWwsb3V0dG9wLG91dHRyb3Qsb3V0dHVybixvdXR2aWUsb3V0dmllcixvdXR2b3RlLG91dHdhaXQsb3V0d2FrZSxvdXR3YWxlLG91dHdhbGssb3V0d2FsbCxvdXR3YXIsb3V0d2FyZCxvdXR3YXNoLG91dHdhdmUsb3V0d2VhcixvdXR3ZWVkLG91dHdlZXAsb3V0d2VsbCxvdXR3ZW50LG91dHdpY2ssb3V0d2lsZSxvdXR3aWxsLG91dHdpbmQsb3V0d2luZyxvdXR3aXNoLG91dHdpdCxvdXR3aXRoLG91dHdvZSxvdXR3b29kLG91dHdvcmQsb3V0d29yZSxvdXR3b3JrLG91dHdvcm4sb3V0eWFyZCxvdXR5ZWxsLG91dHllbHAsb3V0emFueSxvdXplbCxvdmEsb3ZhbCxvdmFsaXNoLG92YWxpemUsb3ZhbGx5LG92YWxvaWQsb3ZhbnQsb3ZhcmlhbCxvdmFyaWFuLG92YXJpbixvdmFyaXVtLG92YXJ5LG92YXRlLG92YXRlZCxvdmF0ZWx5LG92YXRpb24sb3ZlbixvdmVuZnVsLG92ZW5seSxvdmVubWFuLG92ZXIsb3ZlcmFjdCxvdmVyYWdlLG92ZXJhbGwsb3ZlcmFwdCxvdmVyYXJtLG92ZXJhd2Usb3ZlcmF3bixvdmVyYmV0LG92ZXJiaWQsb3ZlcmJpZyxvdmVyYml0LG92ZXJib3csb3ZlcmJ1eSxvdmVyYnksb3ZlcmNhcCxvdmVyY293LG92ZXJjb3ksb3ZlcmNyeSxvdmVyY3VwLG92ZXJjdXQsb3ZlcmRvLG92ZXJkcnksb3ZlcmR1ZSxvdmVyZHllLG92ZXJlYXQsb3ZlcmVnZyxvdmVyZXllLG92ZXJmYWcsb3ZlcmZhcixvdmVyZmF0LG92ZXJmZWQsb3ZlcmZlZSxvdmVyZmV3LG92ZXJmaXQsb3ZlcmZpeCxvdmVyZmx5LG92ZXJnZXQsb3ZlcmdvLG92ZXJnb2Qsb3Zlcmd1bixvdmVyaGl0LG92ZXJob3Qsb3ZlcmluayxvdmVyam9iLG92ZXJqb3ksb3ZlcmxhcCxvdmVybGF4LG92ZXJsYXksb3ZlcmxlZyxvdmVybGllLG92ZXJsaXAsb3ZlcmxvdyxvdmVybHksb3Zlcm1hbixvdmVybWl4LG92ZXJuZXQsb3Zlcm5ldyxvdmVycGF5LG92ZXJwZXQsb3ZlcnBseSxvdmVycG90LG92ZXJyaW0sb3ZlcnJ1bixvdmVyc2FkLG92ZXJzZWEsb3ZlcnNlZSxvdmVyc2V0LG92ZXJzZXcsb3ZlcnNvdCxvdmVyc293LG92ZXJ0LG92ZXJ0YXgsb3ZlcnRpcCxvdmVydGx5LG92ZXJ0b2Usb3ZlcnRvcCxvdmVydXNlLG92ZXJ3YXksb3ZlcndlYixvdmVyd2V0LG92ZXJ3aW4sb3Zlc3Qsb3ZleSxvdmljZWxsLG92aWNpZGUsb3ZpY3lzdCxvdmlkdWN0LG92aWZvcm0sb3ZpZ2VybSxvdmlsZSxvdmluZSxvdmluaWEsb3ZpcGFyYSxvdmlzYWMsb3Zpc20sb3Zpc3Qsb3Zpc3RpYyxvdm9jeXRlLG92b2lkLG92b2lkYWwsb3ZvbG8sb3ZvbG9neSxvdnVsYXIsb3Z1bGFyeSxvdnVsYXRlLG92dWxlLG92dWxpc3Qsb3Z1bSxvdyxvd2Qsb3dlLG93ZWx0eSxvd2VyLG93ZXJieSxvd2dodCxvd2luZyxvd2ssb3dsLG93bGRvbSxvd2xlcixvd2xlcnksb3dsZXQsb3dsaGVhZCxvd2xpbmcsb3dsaXNoLG93bGlzbSxvd2xsaWtlLG93bHksb3duLG93bmVyLG93bmhvb2Qsb3dubmVzcyxvd25zZWxmLG93cmVoaXAsb3dyZWxheSxvd3NlLG93c2VuLG93c2VyLG93dGNoYWgsb3gsb3hhY2lkLG94YWxhbixveGFsYXRlLG94YWxpYyxveGFsaXRlLG94YWx5bCxveGFtYXRlLG94YW1pYyxveGFtaWQsb3hhbWlkZSxveGFuLG94YW5hdGUsb3hhbmUsb3hhbmljLG94YXppbmUsb3hhem9sZSxveGJhbmUsb3hiZXJyeSxveGJpcmQsb3hiaXRlcixveGJsb29kLG94Ym93LG94Ym95LG94YnJha2Usb3hjYXJ0LG94Y2hlZWssb3hlYSxveGVhdGUsb3hlbixveGVvdGUsb3hlcixveGV0b25lLG94ZXllLG94Zmx5LG94Z2FuZyxveGdvYWQsb3hoZWFkLG94aGVhbCxveGhlYXJ0LG94aGlkZSxveGhvZnQsb3hob3JuLG94aG91c2Usb3hodXZ1ZCxveGlkYW50LG94aWRhc2Usb3hpZGF0ZSxveGlkZSxveGlkaWMsb3hpZGl6ZSxveGltYXRlLG94aW1lLG94bGFuZCxveGxpa2Usb3hsaXAsb3htYW4sb3hvbmljLG94b25pdW0sb3hvem9uZSxveHBob255LG94cmVpbSxveHNob2Usb3hza2luLG94dGFpbCxveHRlcixveHdvcnQsb3h5LG94eWFjaWQsb3h5Z2FzLG94eWdlbixveHlsLG94eW1lbCxveHludGljLG94eW9waWEsb3h5c2FsdCxveHl0b25lLG95YXBvY2ssb3llcixveXN0ZXIsb3plbmEsb3pvbmF0ZSxvem9uZSxvem9uZWQsb3pvbmljLG96b25pZGUsb3pvbmlmeSxvem9uaXplLG96b25vdXMsb3pvcGhlbixvem90eXBlLHAscGEscGFhbCxwYWFyLHBhYXV3LHBhYmJsZSxwYWJsbyxwYWJvdWNoLHBhYnVsYXIscGFidWx1bSxwYWMscGFjYSxwYWNhYmxlLHBhY2F0ZSxwYWNheSxwYWNheWEscGFjZSxwYWNlZCxwYWNlcixwYWNoYWsscGFjaGlzaSxwYWNpZmljLHBhY2lmeSxwYWNrLHBhY2thZ2UscGFja2VyLHBhY2tlcnkscGFja2V0LHBhY2tseSxwYWNrbWFuLHBhY2t3YXkscGFjbyxwYWN0LHBhY3Rpb24scGFkLHBhZGRlcixwYWRkaW5nLHBhZGRsZSxwYWRkbGVkLHBhZGRsZXIscGFkZG9jayxwYWRkeSxwYWRlbGxhLHBhZGZvb3QscGFkZ2UscGFkbGUscGFkbGlrZSxwYWRsb2NrLHBhZG5hZyxwYWRyZSxwYWR0cmVlLHBhZWFuLHBhZWdlbCxwYWVnbGUscGFlbnVsYSxwYWVvbixwYWVvbmljLHBhZ2EscGFnYW4scGFnYW5pYyxwYWdhbmx5LHBhZ2FucnkscGFnZSxwYWdlYW50LHBhZ2Vkb20scGFnZWZ1bCxwYWdlcixwYWdpbmEscGFnaW5hbCxwYWdvZGEscGFncnVzLHBhZ3VyaWQscGFndXMscGFoLHBhaGEscGFoaSxwYWhsYXZpLHBhaG1pLHBhaG8scGFodXRhbixwYWlnbGUscGFpayxwYWlsLHBhaWxmdWwscGFpbG91LHBhaW4scGFpbmVkLHBhaW5mdWwscGFpbmluZyxwYWludCxwYWludGVkLHBhaW50ZXIscGFpbnR5LHBhaXAscGFpcixwYWlyZWQscGFpcmVyLHBhaXMscGFpc2EscGFpd2FyaSxwYWphbWEscGFqb2NrLHBha2Nob2kscGFrZWhhLHBha3RvbmcscGFsLHBhbGFjZSxwYWxhY2VkLHBhbGFkaW4scGFsYWl0ZSxwYWxhbWEscGFsYW1lLHBhbGFua2EscGFsYXIscGFsYXMscGFsYXRhbCxwYWxhdGUscGFsYXRlZCxwYWxhdGljLHBhbGF2ZXIscGFsYXkscGFsYXp6aSxwYWxjaCxwYWxlLHBhbGVhLHBhbGVhdGUscGFsZWQscGFsZWx5LHBhbGVvbGEscGFsZXIscGFsZXQscGFsZXRvdCxwYWxldHRlLHBhbGV0eixwYWxmcmV5LHBhbGdhdCxwYWxpLHBhbGlrYXIscGFsaWxhLHBhbGluYWwscGFsaW5nLHBhbGlzZnkscGFsaXNoLHBhbGtlZSxwYWxsLHBhbGxhLHBhbGxhZSxwYWxsYWgscGFsbGFsbCxwYWxsZWQscGFsbGV0LHBhbGxpLHBhbGxpYWwscGFsbGlkLHBhbGxpb24scGFsbGl1bSxwYWxsb25lLHBhbGxvcixwYWxseSxwYWxtLHBhbG1hLHBhbG1hZCxwYWxtYXIscGFsbWFyeSxwYWxtYXRlLHBhbG1lZCxwYWxtZXIscGFsbWVyeSxwYWxtZnVsLHBhbG1pc3QscGFsbWl0ZSxwYWxtaXRvLHBhbG1vLHBhbG11bGEscGFsbXVzLHBhbG15LHBhbG15cmEscGFsb2xvLHBhbHAscGFscGFsLHBhbHBhdGUscGFscGVkLHBhbHBpLHBhbHBvbixwYWxwdXMscGFsc2llZCxwYWxzdGVyLHBhbHN5LHBhbHQscGFsdGVyLHBhbHRyeSxwYWx1ZGFsLHBhbHVkaWMscGFsdWxlLHBhbHVsdXMscGFsdXMscGFseSxwYW0scGFtZW50LHBhbW1lbnQscGFtcGFzLHBhbXBlYW4scGFtcGVyLHBhbXBlcm8scGFtcHJlLHBhbixwYW5hY2UscGFuYWNlYSxwYW5hY2hlLHBhbmFkYSxwYW5hZGUscGFuYW1hLHBhbmFyaXMscGFuYXJ5LHBhbmF4LHBhbmNha2UscGFuZCxwYW5kYSxwYW5kYWwscGFuZGFuLHBhbmRlY3QscGFuZGVteSxwYW5kZXIscGFuZGl0YSxwYW5kbGUscGFuZG9yYSxwYW5kb3VyLHBhbmRyb3AscGFuZHVyYSxwYW5keSxwYW5lLHBhbmVkLHBhbmVpdHkscGFuZWwscGFuZWxhLHBhbmVsZXIscGFuZmlsLHBhbmZpc2gscGFuZnVsLHBhbmcscGFuZ2FteSxwYW5nYW5lLHBhbmdlbixwYW5nZW5lLHBhbmdmdWwscGFuZ2kscGFuaGVhZCxwYW5pYyxwYW5pY2FsLHBhbmlja3kscGFuaWNsZSxwYW5pc2MscGFuaXNjYSxwYW5pc2ljLHBhbmsscGFua2luLHBhbm1hbixwYW5taXh5LHBhbm11ZyxwYW5uYWRlLHBhbm5hZ2UscGFubmFtLHBhbm5lLHBhbm5lbCxwYW5uZXIscGFubmVyeSxwYW5uaWVyLHBhbm5pbmcscGFubm9zZSxwYW5udW0scGFubnVzLHBhbm9jaGEscGFub2NoZSxwYW5vcGx5LHBhbm9yYW0scGFuc2UscGFuc2lkZSxwYW5zaWVkLHBhbnN5LHBhbnQscGFudGFzLHBhbnRlcixwYW50aGVyLHBhbnRpZSxwYW50aWVzLHBhbnRpbGUscGFudGluZyxwYW50bGUscGFudGxlcixwYW50byxwYW50b2QscGFudG9uLHBhbnRvb24scGFudG91bSxwYW50cnkscGFudHMscGFudHVuLHBhbnR5LHBhbnVuZyxwYW51cmd5LHBhbnlhcixwYW9sbyxwYW9uLHBhcCxwYXBhLHBhcGFibGUscGFwYWJvdCxwYXBhY3kscGFwYWluLHBhcGFsLHBhcGFsbHkscGFwYWx0eSxwYXBhbmUscGFwYXcscGFwYXlhLHBhcGJvYXQscGFwZSxwYXBlcixwYXBlcmVkLHBhcGVyZXIscGFwZXJuLHBhcGVyeSxwYXBlc3MscGFwZXkscGFwaWxsYSxwYXBpb24scGFwaXNoLHBhcGlzbSxwYXBpc3QscGFwaXplLHBhcGxlc3MscGFwbWVhdCxwYXBvb3NlLHBhcHBpLHBhcHBvc2UscGFwcG94LHBhcHB1cyxwYXBweSxwYXByZWcscGFwcmljYSxwYXByaWthLHBhcHVsYSxwYXB1bGFyLHBhcHVsZSxwYXB5cixwYXB5cmFsLHBhcHlyaSxwYXB5cmluLHBhcHlydXMscGFxdWV0LHBhcixwYXJhLHBhcmFibGUscGFyYWNtZSxwYXJhZGUscGFyYWRlcixwYXJhZG8scGFyYWRvcyxwYXJhZG94LHBhcmFmbGUscGFyYWdlLHBhcmFnb24scGFyYWgscGFyYWliYSxwYXJhbGUscGFyYW0scGFyYW1vLHBhcmFuZyxwYXJhbyxwYXJhcGV0LHBhcmFwaCxwYXJhcG9kLHBhcmFyZWsscGFyYXNvbCxwYXJhc3B5LHBhcmF0ZSxwYXJheG9uLHBhcmJha2UscGFyYm9pbCxwYXJjZWwscGFyY2gscGFyY2hlcixwYXJjaHkscGFyY29vayxwYXJkLHBhcmRhbyxwYXJkZWQscGFyZGVzaSxwYXJkaW5lLHBhcmRuZXIscGFyZG8scGFyZG9uLHBhcmUscGFyZWwscGFyZWxsYSxwYXJlbixwYXJlbnQscGFyZXIscGFyZXNpcyxwYXJldGljLHBhcmZhaXQscGFyZ2FuYSxwYXJnZSxwYXJnZXQscGFyZ28scGFyaSxwYXJpYWgscGFyaWFsLHBhcmlhbixwYXJpZXMscGFyaWZ5LHBhcmlsbGEscGFyaW5lLHBhcmluZyxwYXJpc2gscGFyaXNpcyxwYXJpc29uLHBhcml0eSxwYXJrLHBhcmthLHBhcmtlZSxwYXJrZXIscGFya2luLHBhcmtpbmcscGFya2lzaCxwYXJrd2F5LHBhcmt5LHBhcmxheSxwYXJsZSxwYXJsZXkscGFybGluZyxwYXJsaXNoLHBhcmxvcixwYXJsb3VzLHBhcmx5LHBhcm1hLHBhcm1hayxwYXJuYXMscGFybmVsLHBhcm9jaCxwYXJvZGUscGFyb2RpYyxwYXJvZG9zLHBhcm9keSxwYXJvZWN5LHBhcm9sLHBhcm9sZSxwYXJvbGVlLHBhcm9saSxwYXJvbnltLHBhcm90aWMscGFyb3RpZCxwYXJvdGlzLHBhcm91cyxwYXJwYWwscGFycXVldCxwYXJyLHBhcnJlbCxwYXJyaWVyLHBhcnJvY2sscGFycm90LHBhcnJvdHkscGFycnkscGFyc2UscGFyc2VjLHBhcnNlcixwYXJzbGV5LHBhcnNuaXAscGFyc29uLHBhcnNvbnkscGFydCxwYXJ0YWtlLHBhcnRhbixwYXJ0ZWQscGFydGVyLHBhcnRpYWwscGFydGlsZSxwYXJ0aXRlLHBhcnRsZXQscGFydGx5LHBhcnRuZXIscGFydG8scGFydG9vayxwYXJ0dXJlLHBhcnR5LHBhcnVsaXMscGFydXJlLHBhcnVyaWEscGFydmVudSxwYXJ2aXMscGFydnVsZSxwYXNhbixwYXNhbmcscGFzY2hhbCxwYXNjdWFsLHBhc2gscGFzaGEscGFzaG0scGFzaSxwYXNtbyxwYXNxdWlsLHBhc3F1aW4scGFzcyxwYXNzYWRlLHBhc3NhZG8scGFzc2FnZSxwYXNzYW50LHBhc3NlLHBhc3NlZSxwYXNzZW4scGFzc2VyLHBhc3Nld2EscGFzc2luZyxwYXNzaW9uLHBhc3NpcixwYXNzaXZlLHBhc3NrZXkscGFzc21hbixwYXNzbyxwYXNzb3V0LHBhc3N1cyxwYXNzd2F5LHBhc3QscGFzdGUscGFzdGVkLHBhc3RlbCxwYXN0ZXIscGFzdGVybixwYXN0ZXVyLHBhc3RpbCxwYXN0aWxlLHBhc3RpbWUscGFzdGluZyxwYXN0b3IscGFzdG9zZSxwYXN0cnkscGFzdHVyZSxwYXN0eSxwYXN1bCxwYXQscGF0YSxwYXRhY2EscGF0YWNhbyxwYXRhY28scGF0YWdvbixwYXRha2EscGF0YW1hcixwYXRhbyxwYXRhcGF0LHBhdGFxdWUscGF0YXMscGF0YmFsbCxwYXRjaCxwYXRjaGVyLHBhdGNoeSxwYXRlLHBhdGVmeSxwYXRlbCxwYXRlbGxhLHBhdGVuLHBhdGVuY3kscGF0ZW5lcixwYXRlbnQscGF0ZXIscGF0ZXJhLHBhdGVzaSxwYXRoLHBhdGhlZCxwYXRoZW1hLHBhdGhpYyxwYXRobGV0LHBhdGhvcyxwYXRod2F5LHBhdGh5LHBhdGlibGUscGF0aWVudCxwYXRpbmEscGF0aW5lLHBhdGluZWQscGF0aW8scGF0bHkscGF0bmVzcyxwYXRvLHBhdG9pcyxwYXRvbGEscGF0b25jZSxwYXRyaWEscGF0cmlhbCxwYXRyaWNlLHBhdHJpY28scGF0cmluLHBhdHJpb3QscGF0cmlzdCxwYXRyaXgscGF0cm9sLHBhdHJvbixwYXRyb29uLHBhdHRhLHBhdHRlLHBhdHRlZSxwYXR0ZW4scGF0dGVyLHBhdHRlcm4scGF0dHUscGF0dHkscGF0dSxwYXR3YXJpLHBhdHkscGF1LHBhdWNpZnkscGF1Y2l0eSxwYXVnaHR5LHBhdWtwYW4scGF1bGFyLHBhdWxpZSxwYXVsaW4scGF1bmNoLHBhdW5jaHkscGF1cCxwYXVwZXIscGF1c2FsLHBhdXNlLHBhdXNlcixwYXVzc2lkLHBhdXQscGF1eGkscGF2YWdlLHBhdmFuLHBhdmFuZSxwYXZlLHBhdmVyLHBhdmlkLHBhdmllcixwYXZpbmcscGF2aW9yLHBhdmlvdXIscGF2aXMscGF2aXNlcixwYXZpc29yLHBhdnkscGF3LHBhd2RpdGUscGF3ZXIscGF3aW5nLHBhd2sscGF3a2VyeSxwYXdraWx5LHBhd2tyaWUscGF3a3kscGF3bCxwYXduLHBhd25hZ2UscGF3bmVlLHBhd25lcixwYXduaWUscGF3bm9yLHBhd3BhdyxwYXgscGF4aWxsYSxwYXhpdWJhLHBheHdheCxwYXkscGF5YWJsZSxwYXlhYmx5LHBheWRheSxwYXllZCxwYXllZSxwYXllbnkscGF5ZXIscGF5aW5nLHBheW1lbnQscGF5bmltLHBheW9mZixwYXlvbmcscGF5b3IscGF5cm9sbCxwZWEscGVhY2UscGVhY2gscGVhY2hlbixwZWFjaGVyLHBlYWNoeSxwZWFjb2F0LHBlYWNvY2sscGVhY29kLHBlYWZvd2wscGVhZyxwZWFnZSxwZWFoZW4scGVhaSxwZWFpaXNtLHBlYWsscGVha2VkLHBlYWtlcixwZWFraWx5LHBlYWtpbmcscGVha2lzaCxwZWFreSxwZWFsLHBlYWxpa2UscGVhbixwZWFudXQscGVhcixwZWFybCxwZWFybGVkLHBlYXJsZXIscGVhcmxldCxwZWFybGluLHBlYXJseSxwZWFydCxwZWFydGVuLHBlYXJ0bHkscGVhc2FudCxwZWFzZW4scGVhc29uLHBlYXN5LHBlYXQscGVhdGVyeSxwZWF0bWFuLHBlYXR5LHBlYXZleSxwZWF2eSxwZWJhLHBlYmJsZSxwZWJibGVkLHBlYmJseSxwZWJyaW5lLHBlY2FuLHBlY2NhbnQscGVjY2FyeSxwZWNjYXZpLHBlY2gscGVjaHQscGVjaXRlLHBlY2sscGVja2VkLHBlY2tlcixwZWNrZXQscGVja2Z1bCxwZWNraXNoLHBlY2tsZSxwZWNrbGVkLHBlY2tseSxwZWNreSxwZWN0YXNlLHBlY3RhdGUscGVjdGVuLHBlY3RpYyxwZWN0aW4scGVjdGl6ZSxwZWN0b3JhLHBlY3Rvc2UscGVjdG91cyxwZWN0dXMscGVkLHBlZGEscGVkYWdlLHBlZGFnb2cscGVkYWwscGVkYWxlcixwZWRhbnQscGVkYXJ5LHBlZGF0ZSxwZWRhdGVkLHBlZGRlcixwZWRkbGUscGVkZGxlcixwZWRlZSxwZWRlcyxwZWRlc2lzLHBlZGljYWIscGVkaWNlbCxwZWRpY2xlLHBlZGlvbixwZWRsYXIscGVkbGFyeSxwZWRvY2FsLHBlZHJhaWwscGVkcmVybyxwZWRybyxwZWR1bGUscGVkdW0scGVlLHBlZWQscGVlayxwZWVsLHBlZWxlLHBlZWxlZCxwZWVsZXIscGVlbGluZyxwZWVsbWFuLHBlZW4scGVlbmdlLHBlZW95LHBlZXAscGVlcGVyLHBlZXBleWUscGVlcHkscGVlcixwZWVyYWdlLHBlZXJkb20scGVlcmVzcyxwZWVyaWUscGVlcmx5LHBlZXJ5LHBlZXNhc2gscGVldmUscGVldmVkLHBlZXZlcixwZWV2aXNoLHBlZXdlZSxwZWcscGVnYSxwZWdhbGwscGVnYXNpZCxwZWdib3gscGVnZ2VkLHBlZ2dlcixwZWdnaW5nLHBlZ2dsZSxwZWdneSxwZWdsZXNzLHBlZ2xldCxwZWdsaWtlLHBlZ21hbixwZWd3b29kLHBlaG8scGVpbmUscGVpc2FnZSxwZWlzZSxwZWlzZXIscGVpeGVyZSxwZWthbixwZWtpbixwZWtvZSxwZWxhZGljLHBlbGFnZSxwZWxhZ2ljLHBlbGFteWQscGVsYW5vcyxwZWxlYW4scGVsZWNhbixwZWxmLHBlbGljYW4scGVsaWNrLHBlbGlrZSxwZWxpb20scGVsaW9tYSxwZWxpc3NlLHBlbGl0ZSxwZWxpdGljLHBlbGwscGVsbGFnZSxwZWxsYXIscGVsbGFyZCxwZWxsYXMscGVsbGF0ZSxwZWxsZXIscGVsbGV0LHBlbGxldHkscGVsbGlsZSxwZWxsb2NrLHBlbG1ldCxwZWxvbixwZWxvcmlhLHBlbG9yaWMscGVsb3J1cyxwZWxvdGEscGVsb3RvbixwZWx0LHBlbHRhLHBlbHRhc3QscGVsdGF0ZSxwZWx0ZXIscGVsdGluZyxwZWx0cnkscGVsdSxwZWx1ZG8scGVsdmVzLHBlbHZpYyxwZWx2aXMscGVtYmluYSxwZW1pY2FuLHBlbixwZW5hbCxwZW5hbGx5LHBlbmFsdHkscGVuYW5jZSxwZW5hbmcscGVuYXRlcyxwZW5iYXJkLHBlbmNlLHBlbmNlbCxwZW5jaWwscGVuZCxwZW5kYSxwZW5kYW50LHBlbmRlbnQscGVuZGluZyxwZW5kbGUscGVuZG9tLHBlbmR1bGUscGVuZm9sZCxwZW5mdWwscGVuZ28scGVuZ3VpbixwZW5oZWFkLHBlbmlhbCxwZW5pZGUscGVuaWxlLHBlbmlzLHBlbmsscGVubGlrZSxwZW5tYW4scGVubmEscGVubmFlLHBlbm5hZ2UscGVubmFudCxwZW5uYXRlLHBlbm5lcixwZW5uZXQscGVubmkscGVubmlhLHBlbm5pZWQscGVubmlsbCxwZW5uaW5nLHBlbm5vbixwZW5ueSxwZW5yYWNrLHBlbnNoaXAscGVuc2lsZSxwZW5zaW9uLHBlbnNpdmUscGVuc3RlcixwZW5zdW0scGVuc3kscGVudCxwZW50YSxwZW50YWNlLHBlbnRhZCxwZW50YWlsLHBlbnRhbmUscGVudGVuZSxwZW50aW5lLHBlbnRpdCxwZW50aXRlLHBlbnRvZGUscGVudG9pYyxwZW50b2wscGVudG9zZSxwZW50cml0LHBlbnR5bCxwZW50eW5lLHBlbnVjaGkscGVudWx0LHBlbnVyeSxwZW9uLHBlb25hZ2UscGVvbmlzbSxwZW9ueSxwZW9wbGUscGVvcGxlcixwZW9wbGV0LHBlb3RvbXkscGVwLHBlcGZ1bCxwZXBpbm8scGVwbG9zLHBlcGx1bSxwZXBsdXMscGVwbyxwZXBwZXIscGVwcGVyeSxwZXBwaWx5LHBlcHBpbixwZXBweSxwZXBzaW4scGVwc2lzLHBlcHRpYyxwZXB0aWRlLHBlcHRpemUscGVwdG9uZSxwZXIscGVyYWNpZCxwZXJhY3QscGVyYmVuZCxwZXJjYWxlLHBlcmNlbnQscGVyY2VwdCxwZXJjaCxwZXJjaGEscGVyY2hlcixwZXJjaWQscGVyY29jdCxwZXJjb2lkLHBlcmN1cixwZXJjdXNzLHBlcmR1LHBlcmR1cmUscGVyZWlvbixwZXJlaXJhLHBlcmVzLHBlcmZlY3QscGVyZmlkeSxwZXJmb3JtLHBlcmZ1bWUscGVyZnVteSxwZXJmdXNlLHBlcmdvbGEscGVyaGFwcyxwZXJpLHBlcmlhcHQscGVyaWRvdCxwZXJpZ2VlLHBlcmlnb24scGVyaWwscGVyaW5lLHBlcmlvZCxwZXJpb3N0LHBlcmlxdWUscGVyaXNoLHBlcml0LHBlcml0ZSxwZXJpd2lnLHBlcmppbmsscGVyanVyZSxwZXJqdXJ5LHBlcmsscGVya2lseSxwZXJraW4scGVya2luZyxwZXJraXNoLHBlcmt5LHBlcmxlLHBlcmxpZCxwZXJsaXRlLHBlcmxvaXIscGVybSxwZXJtaXQscGVybXV0ZSxwZXJuLHBlcm5pbmUscGVybm9yLHBlcm55aSxwZXJvYmEscGVyb3BvZCxwZXJvcHVzLHBlcm9yYWwscGVyb3NpcyxwZXJvdGljLHBlcm94eSxwZXJveHlsLHBlcnBlbmQscGVycGVyYSxwZXJwbGV4LHBlcnJpZXIscGVycm9uLHBlcnJ5LHBlcnNhbHQscGVyc2UscGVyc2ljbyxwZXJzaXMscGVyc2lzdCxwZXJzb24scGVyc29uYSxwZXJ0LHBlcnRhaW4scGVydGVuLHBlcnRpc2gscGVydGx5LHBlcnR1cmIscGVydHVzZSxwZXJ0eSxwZXJ1a2UscGVydWxhLHBlcnVsZSxwZXJ1c2FsLHBlcnVzZSxwZXJ1c2VyLHBlcnZhZGUscGVydmVydCxwZXMscGVzYSxwZXNhZGUscGVzYWdlLHBlc2V0YSxwZXNoa2FyLHBlc2h3YSxwZXNraWx5LHBlc2t5LHBlc28scGVzcyxwZXNzYXJ5LHBlc3QscGVzdGUscGVzdGVyLHBlc3RmdWwscGVzdGlmeSxwZXN0bGUscGV0LHBldGFsLHBldGFsZWQscGV0YWxvbixwZXRhbHkscGV0YXJkLHBldGFyeSxwZXRhc29zLHBldGFzdXMscGV0Y29jayxwZXRlLHBldGVjYSxwZXRlbWFuLHBldGVyLHBldGZ1bCxwZXRpb2xlLHBldGl0LHBldGl0ZSxwZXRpdG9yLHBldGtpbixwZXRsaW5nLHBldG8scGV0cmFyeSxwZXRyZSxwZXRyZWFuLHBldHJlbCxwZXRyaWUscGV0cmlmeSxwZXRyb2wscGV0cm9zYSxwZXRyb3VzLHBldHRlZCxwZXR0ZXIscGV0dGlseSxwZXR0aXNoLHBldHRsZSxwZXR0eSxwZXR1bmUscGV0d29vZCxwZXR6aXRlLHBldWhsLHBldyxwZXdhZ2UscGV3ZG9tLHBld2VlLHBld2Z1bCxwZXdpbmcscGV3aXQscGV3bGVzcyxwZXdtYXRlLHBld3RlcixwZXd0ZXJ5LHBld3kscGV5b3RlLHBleW90bCxwZXl0b24scGV5dHJlbCxwZmVubmlnLHBmdWkscGZ1bmQscGhhY29pZCxwaGFlaXNtLHBoYWV0b24scGhhZ2UscGhhbGFueCxwaGFsZXJhLHBoYWxsaWMscGhhbGxpbixwaGFsbHVzLHBoYW5pYyxwaGFubyxwaGFudG9tLHBoYXJlLHBoYXJtaWMscGhhcm9zLHBoYXJ5bngscGhhc2UscGhhc2VhbCxwaGFzZW15LHBoYXNlcyxwaGFzaWMscGhhc2lzLHBoYXNtLHBoYXNtYSxwaGFzbWlkLHBoZWFsLHBoZWxsZW0scGhlbWljLHBoZW5hdGUscGhlbmUscGhlbmVuZSxwaGVuaWMscGhlbmluLHBoZW5vbCxwaGVueWwscGhlb24scGhldyxwaGkscGhpYWwscGhpYWxlLHBoaWx0ZXIscGhpbHRyYSxwaGl0LHBoaXoscGhpemVzLHBoaXpvZyxwaGxlZ20scGhsZWdtYSxwaGxlZ215LHBobG9lbSxwaGxveGluLHBobyxwaG9iaWFjLHBob2JpYyxwaG9iaXNtLHBob2Jpc3QscGhvYnkscGhvY2EscGhvY2FsLHBob2NpZCxwaG9jaW5lLHBob2NvaWQscGhvZWJlLHBob2VuaXgscGhvaCxwaG9sYWQscGhvbGNpZCxwaG9saWRvLHBob24scGhvbmFsLHBob25hdGUscGhvbmUscGhvbmVtZSxwaG9uaWMscGhvbmljcyxwaG9uaXNtLHBob25vLHBob255LHBob28scGhvcmVzeSxwaG9yaWEscGhvcmlkLHBob3JvbmUscGhvcyxwaG9zZSxwaG9zaXMscGhvc3BobyxwaG9zc3kscGhvdCxwaG90YWwscGhvdGljLHBob3RpY3MscGhvdGlzbSxwaG90byxwaG90b21hLHBob3RvbixwaHJhZ21hLHBocmFzYWwscGhyYXNlLHBocmFzZXIscGhyYXN5LHBocmF0b3IscGhyYXRyeSxwaHJlbmljLHBocnluaWQscGhyeW5pbixwaHRob3IscGh1LHBodWdvaWQscGh1bHdhLHBodXQscGh5Y2l0ZSxwaHlsYSxwaHlsZSxwaHlsaWMscGh5bGxpbixwaHlsb24scGh5bHVtLHBoeW1hLHBoeW1hdGEscGh5c2ljLHBoeXNpY3MscGh5dGFzZSxwaHl0aWMscGh5dGluLHBoeXRvaWQscGh5dG9sLHBoeXRvbWEscGh5dG9tZSxwaHl0b24scGh5dHlsLHBpLHBpYSxwaWFiYSxwaWFjYWJhLHBpYWNsZSxwaWFmZmUscGlhZmZlcixwaWFsLHBpYWx5bixwaWFuLHBpYW5pYyxwaWFuaW5vLHBpYW5pc20scGlhbmlzdCxwaWFubmV0LHBpYW5vLHBpYW5vbGEscGlhc3RlcixwaWFzdHJlLHBpYXRpb24scGlhemluZSxwaWF6emEscGliY29ybixwaWJyb2NoLHBpYyxwaWNhLHBpY2Fkb3IscGljYWwscGljYW1hcixwaWNhcmEscGljYXJlbCxwaWNhcm8scGljYXJ5LHBpY2NvbG8scGljZSxwaWNlbmUscGljZW91cyxwaWNoaSxwaWNpbmUscGljayxwaWNrYWdlLHBpY2theCxwaWNrZWQscGlja2VlLHBpY2tlZXIscGlja2VyLHBpY2tlcnkscGlja2V0LHBpY2tsZSxwaWNrbGVyLHBpY2ttYW4scGlja21hdyxwaWNrdXAscGlja3kscGljbmljLHBpY28scGljb2lkLHBpY290LHBpY290YWgscGljb3RlZSxwaWNyYSxwaWNyYXRlLHBpY3JpYyxwaWNyaXRlLHBpY3JvbCxwaWNyeWwscGljdCxwaWN0dXJlLHBpY3R1cnkscGljdWRhLHBpY3VkbyxwaWN1bCxwaWN1bGV0LHBpZGFuLHBpZGRsZSxwaWRkbGVyLHBpZGRvY2sscGlkZ2luLHBpZSxwaWViYWxkLHBpZWNlLHBpZWNlbixwaWVjZXIscGllY2luZyxwaWVkLHBpZWRseSxwaWVsZXNzLHBpZWxldCxwaWVsdW0scGllbWFnLHBpZW1hbixwaWVuLHBpZW5kLHBpZXBhbixwaWVyLHBpZXJhZ2UscGllcmNlLHBpZXJjZWQscGllcmNlbCxwaWVyY2VyLHBpZXJpZCxwaWVyaW5lLHBpZXJyb3QscGllc2hvcCxwaWV0LHBpZXRhcyxwaWV0aWMscGlldGlzbSxwaWV0aXN0LHBpZXRvc2UscGlldHkscGlld2lmZSxwaWV3aXBlLHBpZXpvLHBpZmYscGlmZmxlLHBpZmZsZXIscGlmaW5lLHBpZyxwaWdkYW4scGlnZG9tLHBpZ2VvbixwaWdmYWNlLHBpZ2Zpc2gscGlnZm9vdCxwaWdmdWwscGlnZ2VyeSxwaWdnaW4scGlnZ2luZyxwaWdnaXNoLHBpZ2dsZSxwaWdneSxwaWdoZWFkLHBpZ2hlcmQscGlnaHRsZSxwaWdsZXNzLHBpZ2xldCxwaWdsaW5nLHBpZ2x5LHBpZ21hbixwaWdtZW50LHBpZ25vbixwaWdudXMscGlnbnV0LHBpZ3BlbixwaWdyb290LHBpZ3NraW4scGlnc25leSxwaWdzdHkscGlndGFpbCxwaWd3YXNoLHBpZ3dlZWQscGlneWFyZCxwaWl0aXMscGlrLHBpa2EscGlrZSxwaWtlZCxwaWtlbCxwaWtlbGV0LHBpa2VtYW4scGlrZXIscGlrZXkscGlraSxwaWtpbmcscGlrbGUscGlreSxwaWxhZ2UscGlsYXBpbCxwaWxhcixwaWxhcnkscGlsYXUscGlsYXVlZCxwaWxjaCxwaWxjaGVyLHBpbGNvcm4scGlsY3JvdyxwaWxlLHBpbGVhdGEscGlsZWF0ZSxwaWxlZCxwaWxlb3VzLHBpbGVyLHBpbGVzLHBpbGV1cyxwaWxmZXIscGlsZ2VyLHBpbGdyaW0scGlsaSxwaWxpZmVyLHBpbGlnYW4scGlsaWthaSxwaWxpbixwaWxpbmUscGlsaW5nLHBpbGtpbnMscGlsbCxwaWxsYWdlLHBpbGxhcixwaWxsYXJ5LHBpbGxhcyxwaWxsYm94LHBpbGxlZCxwaWxsZXQscGlsbGV1cyxwaWxsaW9uLHBpbGxvcnkscGlsbG93LHBpbGxvd3kscGlsbSxwaWxteSxwaWxvbixwaWxvcmkscGlsb3NlLHBpbG9zaXMscGlsb3QscGlsb3RlZSxwaWxvdHJ5LHBpbG91cyxwaWxwdWwscGlsdG9jayxwaWx1bGEscGlsdWxhcixwaWx1bGUscGlsdW0scGlsdXMscGlseSxwaW1hcmljLHBpbWVsaWMscGltZW50byxwaW1saWNvLHBpbW9sYSxwaW1wLHBpbXBlcnkscGltcGluZyxwaW1waXNoLHBpbXBsZSxwaW1wbGVkLHBpbXBsbyxwaW1wbG9lLHBpbXBseSxwaW4scGluYSxwaW5hY2VzLHBpbmFjbGUscGluYWNvbCxwaW5hbmcscGluYXgscGluYmFsbCxwaW5ib25lLHBpbmJ1c2gscGluY2FzZSxwaW5jZXIscGluY2VycyxwaW5jaCxwaW5jaGUscGluY2hlZCxwaW5jaGVtLHBpbmNoZXIscGluZCxwaW5kYSxwaW5kZXIscGluZHkscGluZSxwaW5lYWwscGluZWQscGluZW5lLHBpbmVyLHBpbmVyeSxwaW5lc2FwLHBpbmV0dW0scGluZXkscGluZmFsbCxwaW5maXNoLHBpbmZvbGQscGluZyxwaW5nbGUscGluZ2xlcixwaW5ndWUscGluZ3VpZCxwaW5ndWluLHBpbmhlYWQscGluaG9sZCxwaW5ob2xlLHBpbmhvb2sscGluaWMscGluaW5nLHBpbmlvbixwaW5pdGUscGluaXRvbCxwaW5qYW5lLHBpbmpyYSxwaW5rLHBpbmtlZCxwaW5rZWVuLHBpbmtlbixwaW5rZXIscGlua2V5ZSxwaW5raWUscGlua2lmeSxwaW5raWx5LHBpbmtpbmcscGlua2lzaCxwaW5rbHkscGlua3kscGlubGVzcyxwaW5sb2NrLHBpbm5hLHBpbm5hY2UscGlubmFlLHBpbm5hbCxwaW5uYXRlLHBpbm5lZCxwaW5uZWwscGlubmVyLHBpbm5ldCxwaW5uaW5nLHBpbm5vY2sscGlubnVsYSxwaW5udWxlLHBpbm55LHBpbm8scGlub2xlLHBpbm9saWEscGlub2xpbixwaW5vbixwaW5vbmljLHBpbnJhaWwscGluc29ucyxwaW50LHBpbnRhLHBpbnRhZG8scGludGFpbCxwaW50YW5vLHBpbnRlLHBpbnRsZSxwaW50byxwaW50dXJhLHBpbnVsdXMscGlud2VlZCxwaW53aW5nLHBpbndvcmsscGlud29ybSxwaW55LHBpbnlsLHBpbnlvbixwaW9uZWVyLHBpb3RlZCxwaW90aW5lLHBpb3R0eSxwaW91cnkscGlvdXMscGlvdXNseSxwaXAscGlwYSxwaXBhZ2UscGlwYWwscGlwZSxwaXBlYWdlLHBpcGVkLHBpcGVmdWwscGlwZW1hbixwaXBlcixwaXBlcmljLHBpcGVybHkscGlwZXJubyxwaXBlcnkscGlwZXQscGlwZXR0ZSxwaXBpLHBpcGluZyxwaXBpcmkscGlwaXQscGlwa2luLHBpcGxlc3MscGlwcGVkLHBpcHBlcixwaXBwaW4scGlwcHkscGlwcmluZSxwaXByb2lkLHBpcHkscGlxdWFudCxwaXF1ZSxwaXF1ZXQscGlxdWlhLHBpcXVyZSxwaXIscGlyYWN5LHBpcmFndWEscGlyYW5oYSxwaXJhdGUscGlyYXR5LHBpcmwscGlybixwaXJuZXIscGlybmllLHBpcm55LHBpcm9ndWUscGlyb2wscGlycixwaXJybWF3LHBpc2FjYSxwaXNhbmcscGlzYXkscGlzY2FyeSxwaXNjaWFuLHBpc2NpbmEscGlzY2luZSxwaXNjbyxwaXNlLHBpc2gscGlzaGF1ZyxwaXNodSxwaXNrLHBpc2t5LHBpc21pcmUscGlzbyxwaXNzLHBpc3NhbnQscGlzdCxwaXN0aWMscGlzdGlsLHBpc3RsZSxwaXN0b2wscGlzdG9sZSxwaXN0b24scGlzdHJpeCxwaXQscGl0YSxwaXRhbmdhLHBpdGFwYXQscGl0YXJhaCxwaXRhdSxwaXRheWEscGl0Y2gscGl0Y2hlcixwaXRjaGkscGl0Y2h5LHBpdGVvdXMscGl0ZmFsbCxwaXRoLHBpdGhmdWwscGl0aGlseSxwaXRob2xlLHBpdGhvcyxwaXRoeSxwaXRpZXIscGl0aWZ1bCxwaXRsZXNzLHBpdGxpa2UscGl0bWFuLHBpdG1hcmsscGl0bWlyayxwaXRwYW4scGl0cGl0LHBpdHNpZGUscGl0dGVkLHBpdHRlcixwaXR0aW5lLHBpdHRpbmcscGl0dGl0ZSxwaXR0b2lkLHBpdHVpdGUscGl0dXJpLHBpdHdvb2QscGl0d29yayxwaXR5LHBpdHlpbmcscGl1cmkscGl2YWxpYyxwaXZvdCxwaXZvdGFsLHBpdm90ZXIscGl4LHBpeGllLHBpeHkscGl6ZSxwaXp6YSxwaXp6bGUscGxhY2FyZCxwbGFjYXRlLHBsYWNlLHBsYWNlYm8scGxhY2VyLHBsYWNldCxwbGFjaWQscGxhY2sscGxhY2tldCxwbGFjb2RlLHBsYWNvaWQscGxhY3VsYSxwbGFnYSxwbGFnYWwscGxhZ2F0ZSxwbGFnZSxwbGFnaXVtLHBsYWdvc2UscGxhZ3VlLHBsYWd1ZWQscGxhZ3VlcixwbGFndXkscGxhaWNlLHBsYWlkLHBsYWlkZWQscGxhaWRpZSxwbGFpZHkscGxhaW4scGxhaW5lcixwbGFpbmx5LHBsYWludCxwbGFpdCxwbGFpdGVkLHBsYWl0ZXIscGxhayxwbGFrYXQscGxhbixwbGFuYWVhLHBsYW5hcixwbGFuYXRlLHBsYW5jaCxwbGFuZG9rLHBsYW5lLHBsYW5lcixwbGFuZXQscGxhbmV0YSxwbGFuZnVsLHBsYW5nLHBsYW5nb3IscGxhbmlzaCxwbGFuaXR5LHBsYW5rLHBsYW5rZXIscGxhbmt5LHBsYW5uZXIscGxhbnQscGxhbnRhLHBsYW50YWQscGxhbnRhbCxwbGFudGFyLHBsYW50ZXIscGxhbnVsYSxwbGFudXJ5LHBsYW54dHkscGxhcCxwbGFxdWUscGxhc2gscGxhc2hlcixwbGFzaGV0LHBsYXNoeSxwbGFzbSxwbGFzbWEscGxhc21pYyxwbGFzb21lLHBsYXNzLHBsYXNzb24scGxhc3RlcixwbGFzdGljLHBsYXN0aWQscGxhc3RpbixwbGF0LHBsYXRhbixwbGF0YW5lLHBsYXRhbm8scGxhdGNoLHBsYXRlLHBsYXRlYSxwbGF0ZWF1LHBsYXRlZCxwbGF0ZW4scGxhdGVyLHBsYXRlcnkscGxhdGljLHBsYXRpbmEscGxhdGluZyxwbGF0b2RlLHBsYXRvaWQscGxhdG9vbixwbGF0dGVkLHBsYXR0ZW4scGxhdHRlcixwbGF0dHkscGxhdHkscGxhdWQscGxhdWRpdCxwbGF5LHBsYXlhLHBsYXlib3gscGxheWJveSxwbGF5ZGF5LHBsYXllcixwbGF5ZnVsLHBsYXlsZXQscGxheW1hbixwbGF5b2NrLHBsYXlwZW4scGxhemEscGxlYSxwbGVhY2gscGxlYWQscGxlYWRlcixwbGVhc2UscGxlYXNlcixwbGVhdCxwbGVhdGVyLHBsZWIscGxlYmUscGxlYmlmeSxwbGVicyxwbGVjayxwbGVjdHJlLHBsZWQscGxlZGdlLHBsZWRnZWUscGxlZGdlcixwbGVkZ2V0LHBsZWRnb3IscGxlaW9uLHBsZW5hcnkscGxlbmlwbyxwbGVuaXNoLHBsZW5pc20scGxlbmlzdCxwbGVudHkscGxlbnVtLHBsZW55LHBsZW9uLHBsZW9uYWwscGxlb25pYyxwbGVvcG9kLHBsZXJvbWEscGxlcm9tZSxwbGVzc29yLHBsZXVyYSxwbGV1cmFsLHBsZXVyaWMscGxldXJvbixwbGV1cnVtLHBsZXcscGxleCxwbGV4YWwscGxleG9yLHBsZXh1cmUscGxleHVzLHBsaWFibGUscGxpYWJseSxwbGlhbmN5LHBsaWFudCxwbGljYSxwbGljYWwscGxpY2F0ZSxwbGllZCxwbGllcixwbGllcyxwbGllcnMscGxpZ2h0LHBsaW0scGxpbnRoLHBsaXNraWUscGxpc2t5LHBsb2F0LHBsb2NlLHBsb2NrLHBsb2QscGxvZGRlcixwbG9kZ2UscGxvbWIscGxvb2sscGxvcCxwbG9zaW9uLHBsb3NpdmUscGxvdCxwbG90ZSxwbG90ZnVsLHBsb3R0ZWQscGxvdHRlcixwbG90dHkscGxvdWdoLHBsb3VrLHBsb3VrZWQscGxvdWt5LHBsb3VuY2UscGxvdXQscGxvdXRlcixwbG92ZXIscGxvdmVyeSxwbG93LHBsb3dib3kscGxvd2VyLHBsb3dpbmcscGxvd21hbixwbG95LHBsdWNrLHBsdWNrZWQscGx1Y2tlcixwbHVja3kscGx1ZCxwbHVmZixwbHVmZmVyLHBsdWZmeSxwbHVnLHBsdWdnZWQscGx1Z2dlcixwbHVnZ3kscGx1Z21hbixwbHVtLHBsdW1hLHBsdW1hY2gscGx1bWFkZSxwbHVtYWdlLHBsdW1hdGUscGx1bWIscGx1bWJlcixwbHVtYmV0LHBsdW1iaWMscGx1bWJvZyxwbHVtYnVtLHBsdW1jb3QscGx1bWUscGx1bWVkLHBsdW1lcixwbHVtZXJ5LHBsdW1ldCxwbHVtaWVyLHBsdW1pZnkscGx1bWlzdCxwbHVtbGV0LHBsdW1tZXIscGx1bW1ldCxwbHVtbXkscGx1bW9zZSxwbHVtb3VzLHBsdW1wLHBsdW1wZW4scGx1bXBlcixwbHVtcGx5LHBsdW1wcyxwbHVtcHkscGx1bXVsYSxwbHVtdWxlLHBsdW15LHBsdW5kZXIscGx1bmdlLHBsdW5nZXIscGx1bmsscGx1cCxwbHVyYWwscGx1cmllcyxwbHVyaWZ5LHBsdXMscGx1c2gscGx1c2hlZCxwbHVzaHkscGx1dGVhbCxwbHV0ZWFuLHBsdXRldXMscGx1dmlhbCxwbHV2aWFuLHBsdXZpbmUscGx5LHBseWVyLHBseWluZyxwbHl3b29kLHBuZXVtYSxwbyxwb2FjaCxwb2FjaGVyLHBvYWNoeSxwb2FsaWtlLHBvYixwb2JieSxwb2JzLHBvY2hhZGUscG9jaGFyZCxwb2NoYXkscG9jaGUscG9jayxwb2NrZXQscG9ja2V0eSxwb2NraWx5LHBvY2t5LHBvY28scG9jb3Npbixwb2QscG9kYWdyYSxwb2RhbCxwb2RhbGljLHBvZGF0dXMscG9kZGVkLHBvZGRlcixwb2RkaXNoLHBvZGRsZSxwb2RkeSxwb2Rlb24scG9kZXN0YSxwb2RleCxwb2RnZSxwb2RnZXIscG9kZ2lseSxwb2RneSxwb2RpYWwscG9kaWNhbCxwb2RpY2VzLHBvZGl0ZSxwb2RpdGljLHBvZGl0dGkscG9kaXVtLHBvZGxlcixwb2RsZXkscG9kbGlrZSxwb2RvZ3luLHBvZHNvbCxwb2R1cmFuLHBvZHVyaWQscG9kd2FyZSxwb2R6b2wscG9lLHBvZW0scG9lbWV0LHBvZW1sZXQscG9lc2llLHBvZXNpcyxwb2VzeSxwb2V0LHBvZXRkb20scG9ldGVzcyxwb2V0aWMscG9ldGljcyxwb2V0aXRvLHBvZXRpemUscG9ldGx5LHBvZXRyeSxwb2dnZSxwb2dneSxwb2dvbmlwLHBvZ3JvbSxwb2d5LHBvaCxwb2hhLHBvaG5hLHBvaSxwb2lldGljLHBvaWduZXQscG9pbCxwb2lsdSxwb2luZCxwb2luZGVyLHBvaW50LHBvaW50ZWQscG9pbnRlbCxwb2ludGVyLHBvaW50eSxwb2lzZSxwb2lzZWQscG9pc2VyLHBvaXNvbixwb2l0cmVsLHBva2FibGUscG9rZSxwb2tlZCxwb2tlZnVsLHBva2VvdXQscG9rZXIscG9rZXkscG9raWx5LHBva2luZyxwb2tvbW9vLHBva3VudCxwb2t5LHBvbCxwb2xhY2NhLHBvbGFjayxwb2xhY3JlLHBvbGFyLHBvbGFyaWMscG9sYXJseSxwb2xheGlzLHBvbGRhdnkscG9sZGVyLHBvbGUscG9sZWFybSxwb2xlYXgscG9sZWF4ZSxwb2xlY2F0LHBvbGVtYW4scG9sZW1pYyxwb2xlbnRhLHBvbGVyLHBvbGV5LHBvbGlhZCxwb2xpY2UscG9saWNlZCxwb2xpY3kscG9saWdhcixwb2xpbyxwb2xpcyxwb2xpc2gscG9saXRlLHBvbGl0aWMscG9saXR5LHBvbGsscG9sa2EscG9sbCxwb2xsYWNrLHBvbGxhZHoscG9sbGFnZSxwb2xsYW0scG9sbGFuLHBvbGxhcmQscG9sbGVkLHBvbGxlbixwb2xsZW50LHBvbGxlcixwb2xsZXgscG9sbGluZyxwb2xsb2NrLHBvbGxvaSxwb2xsdXRlLHBvbGx1eCxwb2xvLHBvbG9pc3QscG9sb255LHBvbG9zLHBvbHNrYSxwb2x0LHBvbHRpbmEscG9seSxwb2x5YWN0LHBvbHlhZCxwb2x5Z2FtLHBvbHlnb24scG9seWd5bixwb2x5bWVyLHBvbHlvc2UscG9seXAscG9seXBlZCxwb2x5cGkscG9seXBvZCxwb2x5cHVzLHBvbSxwb21hY2UscG9tYWRlLHBvbWFuZSxwb21hdGUscG9tYXRvLHBvbWF0dW0scG9tYmUscG9tYm8scG9tZSxwb21lbG8scG9tZXkscG9tZnJldCxwb21tZSxwb21tZWUscG9tbWVsLHBvbW1ldCxwb21tZXkscG9tbXkscG9tb25hbCxwb21vbmljLHBvbXAscG9tcGEscG9tcGFsLHBvbXBhbm8scG9tcGV5LHBvbXBodXMscG9tcGllcixwb21waW9uLHBvbXBpc3QscG9tcG9uLHBvbXBvdXMscG9tc3Rlcixwb24scG9uY2UscG9uY2VhdSxwb25jaG8scG9uZCxwb25kYWdlLHBvbmRlcixwb25kZnVsLHBvbmRsZXQscG9uZG1hbixwb25kb2sscG9uZHVzLHBvbmR5LHBvbmUscG9uZW50LHBvbmVyaWQscG9uZXkscG9uZyxwb25nYSxwb25nZWUscG9uaWFyZCxwb25pY2EscG9uaWVyLHBvbmphLHBvbnQscG9udGFnZSxwb250YWwscG9udGVlLHBvbnRlcyxwb250aWMscG9udGlmZixwb250aWZ5LHBvbnRpbCxwb250aWxlLHBvbnRpbixwb250aW5lLHBvbnRpc3QscG9udG8scG9udG9uLHBvbnRvb24scG9ueSxwb256aXRlLHBvb2EscG9vY2gscG9vZGVyLHBvb2RsZSxwb29mLHBvb2d5ZSxwb29oLHBvb2sscG9va2EscG9va2F1bixwb29rb28scG9vbCxwb29sZXIscG9vbGkscG9vbHkscG9vbixwb29uYWMscG9vbmdhLHBvb3AscG9vcGVkLHBvb3IscG9vcmlzaCxwb29ybHkscG9vdCxwb3AscG9wYWRhbSxwb3BhbCxwb3Bjb3JuLHBvcGRvY2sscG9wZSxwb3BlZG9tLHBvcGVpc20scG9wZWxlcixwb3BlbHkscG9wZXJ5LHBvcGVzcyxwb3BleWUscG9wZXllZCxwb3BndW4scG9waWZ5LHBvcGluYWMscG9waXNoLHBvcGpveSxwb3BsYXIscG9wbGluLHBvcG92ZXIscG9wcGEscG9wcGVhbixwb3BwZWwscG9wcGVyLHBvcHBldCxwb3BwaWVkLHBvcHBpbixwb3BwbGUscG9wcGx5LHBvcHB5LHBvcHNob3AscG9wdWxhcixwb3B1bGluLHBvcHdlZWQscG9yYWwscG9yY2F0ZSxwb3JjaCxwb3JjaGVkLHBvcmNpbmUscG9yZSxwb3JlZCxwb3Jlcixwb3JnZSxwb3JnZXIscG9yZ3kscG9yaW5nLHBvcmlzbSxwb3JpdGUscG9yayxwb3JrZXIscG9ya2VyeSxwb3JrZXQscG9ya2lzaCxwb3JrbWFuLHBvcmtwaWUscG9ya3kscG9yb2dhbSxwb3JvbWEscG9yb3MscG9yb3NlLHBvcm9zaXMscG9yb3RpYyxwb3JvdXMscG9ycixwb3JyZWN0LHBvcnJldCxwb3JyaWdvLHBvcnJ5LHBvcnQscG9ydGEscG9ydGFnZSxwb3J0YWlsLHBvcnRhbCxwb3J0YXNzLHBvcnRlZCxwb3J0ZW5kLHBvcnRlbnQscG9ydGVyLHBvcnRpYSxwb3J0aWNvLHBvcnRpZnkscG9ydGlvLHBvcnRpb24scG9ydGxldCxwb3J0bHkscG9ydG1hbixwb3J0byxwb3J0cmF5LHBvcnR3YXkscG9ydHkscG9ydWxlLHBvcnVzLHBvcnkscG9zY2EscG9zZSxwb3Nlcixwb3NldXIscG9zZXkscG9zaCxwb3NpbmcscG9zaXQscG9zaXRvcixwb3NpdHVtLHBvc25ldCxwb3NvbGUscG9zcyxwb3NzZSxwb3NzZXNzLHBvc3NldCxwb3NzdW0scG9zdCxwb3N0YWdlLHBvc3RhbCxwb3N0YmFnLHBvc3Rib3gscG9zdGJveSxwb3N0ZWQscG9zdGVlbixwb3N0ZXIscG9zdGVybixwb3N0Zml4LHBvc3RpYyxwb3N0aWwscG9zdGluZyxwb3N0bWFuLHBvc3R1cmUscG9zdHdhcixwb3N5LHBvdCxwb3RhYmxlLHBvdGFtaWMscG90YXNoLHBvdGFzcyxwb3Rhc3NhLHBvdGF0ZSxwb3RhdG8scG90YXRvcixwb3RiYW5rLHBvdGJvaWwscG90Ym95LHBvdGNoLHBvdGNoZXIscG90ZGFyLHBvdGUscG90ZWVuLHBvdGVuY2UscG90ZW5jeSxwb3RlbnQscG90ZXIscG90ZXllLHBvdGZ1bCxwb3RnaXJsLHBvdGd1bixwb3RoZWFkLHBvdGhlZW4scG90aGVyLHBvdGhlcmIscG90aGVyeSxwb3Rob2xlLHBvdGhvb2sscG90aHVudCxwb3RpZmVyLHBvdGlvbixwb3RsZWcscG90bGlkLHBvdGxpa2UscG90bHVjayxwb3RtYW4scG90b25nLHBvdG9vLHBvdG9yb28scG90cGllLHBvdHJhY2sscG90dCxwb3R0YWdlLHBvdHRhZ3kscG90dGFoLHBvdHRlZCxwb3R0ZXIscG90dGVyeSxwb3R0aW5nLHBvdHRsZSxwb3R0bGVkLHBvdHRvLHBvdHR5LHBvdHdhcmUscG90d29yayxwb3R3b3J0LHBvdWNlLHBvdWNlcixwb3VjZXkscG91Y2gscG91Y2hlZCxwb3VjaHkscG91Zixwb3VsYXJkLHBvdWxwLHBvdWxwZSxwb3VsdCxwb3VsdGVyLHBvdWx0cnkscG91bmFtdSxwb3VuY2UscG91bmNlZCxwb3VuY2VyLHBvdW5jZXQscG91bmQscG91bmRhbCxwb3VuZGVyLHBvdXIscG91cmVyLHBvdXJpZSxwb3VyaW5nLHBvdXNlcixwb3V0LHBvdXRlcixwb3V0ZnVsLHBvdXRpbmcscG91dHkscG92ZXJ0eSxwb3cscG93ZGVyLHBvd2RlcnkscG93ZGlrZSxwb3dkcnkscG93ZXIscG93ZXJlZCxwb3dpdGNoLHBvd25pZSxwb3d3b3cscG94LHBveHkscG95LHBveW91LHByYWFtLHByYWJibGUscHJhYmh1LHByYWN0aWMscHJhZCxwcmFlY294LHByYWV0b3IscHJhaXJpZSxwcmFpc2UscHJhaXNlcixwcmFqbmEscHJhbGluZSxwcmFtLHByYW5hLHByYW5jZSxwcmFuY2VyLHByYW5jeSxwcmFuayxwcmFua2VkLHByYW5rZXIscHJhbmtsZSxwcmFua3kscHJhc2UscHJhc2luZSxwcmFzb2lkLHByYXN0aGEscHJhdCxwcmF0YWwscHJhdGUscHJhdGVyLHByYXRleSxwcmF0aW5nLHByYXR0bGUscHJhdHRseSxwcmF1LHByYXZpdHkscHJhd24scHJhd25lcixwcmF3bnkscHJheGlzLHByYXkscHJheWEscHJheWVyLHByYXlmdWwscHJheWluZyxwcmVhY2gscHJlYWNoeSxwcmVhY2lkLHByZWFjdCxwcmVhZ2VkLHByZWFsbHkscHJlYW5hbCxwcmVhcm0scHJlYXZlcixwcmViYWtlLHByZWJlbmQscHJlYmlkLHByZWJpbGwscHJlYm9pbCxwcmVib3JuLHByZWJ1cm4scHJlY2FudCxwcmVjYXJ5LHByZWNhc3QscHJlY2F2YSxwcmVjZWRlLHByZWNlbnQscHJlY2VwdCxwcmVjZXMscHJlY2VzcyxwcmVjaXBlLHByZWNpcyxwcmVjaXNlLHByZWNpdGUscHJlY29pbCxwcmVjb29rLHByZWNvb2wscHJlY29weSxwcmVjb3gscHJlY3VyZSxwcmVjdXQscHJlY3lzdCxwcmVkYW1uLHByZWRhcmsscHJlZGF0YSxwcmVkYXRlLHByZWRhd24scHJlZGF5LHByZWRlZnkscHJlZGVueSxwcmVkaWFsLHByZWRpY3QscHJlZGlldCxwcmVkaW5lLHByZWRvb20scHJlZHJhdyxwcmVkcnkscHJlZHVzayxwcmVlbixwcmVlbmVyLHByZWV6ZSxwcmVmYWIscHJlZmFjZSxwcmVmZWN0LHByZWZlcixwcmVmaW5lLHByZWZpeCxwcmVmb29sLHByZWZvcm0scHJlZ2FpbixwcmVndXN0LHByZWhhcHMscHJlaGVhbCxwcmVoZWF0LHByZWhlbmQscHJlaWRlYSxwcmVrbml0LHByZWtub3cscHJlbGFjeSxwcmVsYXRlLHByZWxlY3QscHJlbGltLHByZWxvYW4scHJlbG9zcyxwcmVsdWRlLHByZW1ha2UscHJlbWF0ZSxwcmVtaWFsLHByZW1pZXIscHJlbWlzZSxwcmVtaXNzLHByZW1pdW0scHJlbWl4LHByZW1vbGQscHJlbW92ZSxwcmVuYW1lLHByZW5kZXIscHJlbmRyZSxwcmVvbWl0LHByZW9wZW4scHJlb3JhbCxwcmVwLHByZXBhcmUscHJlcGF2ZSxwcmVwYXkscHJlcGluayxwcmVwbGFuLHByZXBsb3QscHJlcG9zZSxwcmVwdWNlLHByZXB1cGEscHJlcmVudCxwcmVyaWNoLHByZXJ1cHQscHJlc2FnZSxwcmVzYXkscHJlc2VhbCxwcmVzZWUscHJlc2VsbCxwcmVzZW50LHByZXNlcyxwcmVzZXQscHJlc2hpcCxwcmVzaG93LHByZXNpZGUscHJlc2lmdCxwcmVzaWduLHByZXNwdXIscHJlc3MscHJlc3NlbCxwcmVzc2VyLHByZXNzb3IscHJlc3QscHJlc3RlcixwcmVzdG8scHJlc3VtZSxwcmV0YW4scHJldGVsbCxwcmV0ZW5kLHByZXRlc3QscHJldGV4dCxwcmV0aXJlLHByZXRvbmUscHJldHJ5LHByZXR0eSxwcmV0emVsLHByZXZhaWwscHJldmVuZSxwcmV2ZW50LHByZXZlcmIscHJldmV0byxwcmV2aWRlLHByZXZpZXcscHJldmlzZSxwcmV2b2lkLHByZXZvdGUscHJldnVlLHByZXdhcixwcmV3YXJuLHByZXdhc2gscHJld2hpcCxwcmV3aXJlLHByZXdyYXAscHJleHkscHJleSxwcmV5ZXIscHJleWZ1bCxwcmV6b25lLHByaWNlLHByaWNlZCxwcmljZXIscHJpY2gscHJpY2sscHJpY2tlZCxwcmlja2VyLHByaWNrZXQscHJpY2tsZSxwcmlja2x5LHByaWNrcyxwcmlja3kscHJpZGUscHJpZGlhbixwcmlkaW5nLHByaWR5LHByaWVkLHByaWVyLHByaWVzdCxwcmlnLHByaWdkb20scHJpZ2dlcixwcmlnbWFuLHByaWxsLHByaW0scHJpbWEscHJpbWFjeSxwcmltYWdlLHByaW1hbCxwcmltYXIscHJpbWFyeSxwcmltYXRlLHByaW1lLHByaW1lbHkscHJpbWVyLHByaW1lcm8scHJpbWluZSxwcmltaW5nLHByaW1seSxwcmltb3N0LHByaW1wLHByaW1zaWUscHJpbXVsYSxwcmltdXMscHJpbXkscHJpbmNlLHByaW5jb3gscHJpbmUscHJpbmdsZSxwcmluayxwcmlua2VyLHByaW5rbGUscHJpbmt5LHByaW50LHByaW50ZWQscHJpbnRlcixwcmlvbixwcmlvbmlkLHByaW9yLHByaW9yYWwscHJpb3JseSxwcmlvcnkscHJpc2FnZSxwcmlzYWwscHJpc2NhbixwcmlzbSxwcmlzbWFsLHByaXNtZWQscHJpc215LHByaXNvbixwcmlzcyxwcmlzc3kscHJpdGNoLHByaXRoZWUscHJpdXMscHJpdmFjeSxwcml2YW50LHByaXZhdGUscHJpdmV0LHByaXZpbHkscHJpdml0eSxwcml2eSxwcml6ZSxwcml6ZXIscHJpemVyeSxwcm8scHJvYSxwcm9hbCxwcm9hcm15LHByb2IscHJvYmFibCxwcm9iYWwscHJvYmFuZyxwcm9iYW50LHByb2JhdGUscHJvYmUscHJvYmVlcixwcm9iZXIscHJvYml0eSxwcm9ibGVtLHByb2NhcnAscHJvY2VlZCxwcm9jZXNzLHByb2N0YWwscHJvY3Rvcixwcm9jdXJlLHByb2QscHJvZGRlcixwcm9kZGxlLHByb2RpZ3kscHJvZHVjZSxwcm9kdWN0LHByb2VtLHByb2V0aWQscHJvZixwcm9mYW5lLHByb2ZlcnQscHJvZmVzcyxwcm9mZmVyLHByb2ZpbGUscHJvZml0LHByb2Z1c2UscHJvZyxwcm9nZW55LHByb2dnZXIscHJvZ25lLHByb2dyYW0scHJvamVjdCxwcm9rZSxwcm9rZXIscHJvbGFuLHByb2xhdGUscHJvbGVnLHByb2xpZnkscHJvbGluZSxwcm9saXgscHJvbG9uZyxwcm9seWwscHJvbWljLHByb21pc2UscHJvbW90ZSxwcm9tcHQscHJvbmFvcyxwcm9uYXRlLHByb25hdnkscHJvbmUscHJvbmVseSxwcm9uZXVyLHByb25nLHByb25nZWQscHJvbmdlcixwcm9uaWMscHJvbm91bixwcm9ucGwscHJvbnRvLHByb251YmEscHJvbyxwcm9vZixwcm9vZmVyLHByb29meSxwcm9wLHByb3BhZ28scHJvcGFsZSxwcm9wYW5lLHByb3BlbmQscHJvcGVuZSxwcm9wZXIscHJvcGhldCxwcm9waW5lLHByb3BsZXgscHJvcG9uZSxwcm9wb25zLHByb3Bvc2UscHJvcG94eSxwcm9wcGVyLHByb3BzLHByb3B1cGEscHJvcHlsLHByb3B5bmUscHJvcmF0YSxwcm9yYXRlLHByb3JlLHByb3JlYW4scHJvcnNhZCxwcm9yc2FsLHByb3NhaWMscHJvc2FyLHByb3NlLHByb3NlY3QscHJvc2VyLHByb3NpZnkscHJvc2lseSxwcm9zaW5nLHByb3Npc2gscHJvc2lzdCxwcm9zbyxwcm9zb2RlLHByb3NvZHkscHJvc29tYSxwcm9zcGVyLHByb3NzLHByb3NzeSxwcm9zeSxwcm90YXgscHJvdGUscHJvdGVhLHByb3RlYWQscHJvdGVhbixwcm90ZWN0LHByb3RlZ2UscHJvdGVpYyxwcm90ZWluLHByb3RlbmQscHJvdGVzdCxwcm90ZXh0LHByb3RoeWwscHJvdGlkZSxwcm90aXN0LHByb3RpdW0scHJvdG8scHJvdG9tYSxwcm90b21lLHByb3Rvbixwcm90b25lLHByb3RvcmUscHJvdHlsLHByb3R5bGUscHJvdHlwZSxwcm91ZGx5LHByb3ZhbmQscHJvdmFudCxwcm92ZSxwcm92ZWN0LHByb3ZlZCxwcm92ZW4scHJvdmVyLHByb3ZlcmIscHJvdmlkZSxwcm92aW5lLHByb3ZpbmcscHJvdmlzbyxwcm92b2tlLHByb3Zvc3QscHJvdyxwcm93YXIscHJvd2VkLHByb3dlc3MscHJvd2wscHJvd2xlcixwcm94ZW55LHByb3hpbW8scHJveHkscHJveHlzbSxwcm96b25lLHBydWRlLHBydWRlbHkscHJ1ZGVudCxwcnVkZXJ5LHBydWRpc2gscHJ1ZGlzdCxwcnVkaXR5LHBydWgscHJ1bmFzZSxwcnVuZSxwcnVuZWxsLHBydW5lcixwcnVuaW5nLHBydW50LHBydW50ZWQscHJ1cmlnbyxwcnVzc2ljLHBydXQscHJ1dGFoLHByeSxwcnllcixwcnlpbmcscHJ5bGVyLHByeXNlLHByeXRhbnkscHNhbGlzLHBzYWxtLHBzYWxtaWMscHNhbG15LHBzYWxvaWQscHNhbHRlcixwc2FsdGVzLHBzY2hlbnQscHNldWRvLHBzaGEscHNoYXcscHNpLHBzaWxvaSxwc29hZGljLHBzb2FzLHBzb2F0aWMscHNvY2lkLHBzb2NpbmUscHNvaXRpcyxwc29yYSxwc29yaWMscHNvcm9pZCxwc29yb3VzLHBzdCxwc3ljaCxwc3ljaGFsLHBzeWNoZSxwc3ljaGljLHBzeWNoaWQscHN5Y2hvbixwc3lrdGVyLHBzeWxsYSxwc3lsbGlkLHB0YXJtaWMscHRlcmVhbCxwdGVyaWMscHRlcmlvbixwdGVyb2lkLHB0ZXJvbWEscHRlcnlsYSxwdGluaWQscHRpbm9pZCxwdGlzYW4scHRvbWFpbixwdG9zaXMscHRvdGljLHB0eWFsaW4scHR5eGlzLHB1LHB1YSxwdWFuLHB1YixwdWJhbCxwdWJibGUscHViZXJhbCxwdWJlcnR5LHB1YmVzLHB1YmlhbixwdWJpYyxwdWJpcyxwdWJsaWMscHVibGlzaCxwdWNjb29uLHB1Y2UscHVjZWxsZSxwdWNoZXJvLHB1Y2sscHVja2EscHVja2VyLHB1Y2tlcnkscHVja2lzaCxwdWNrbGUscHVja3JlbCxwdWQscHVkZGVlLHB1ZGRlcixwdWRkaW5nLHB1ZGRsZSxwdWRkbGVkLHB1ZGRsZXIscHVkZGx5LHB1ZGRvY2sscHVkZHkscHVkZW5jeSxwdWRlbmRhLHB1ZGVudCxwdWRnZSxwdWRnaWx5LHB1ZGd5LHB1ZGlhbm8scHVkaWMscHVkaWNhbCxwdWRzZXkscHVkc3kscHVkdSxwdWVibG8scHVlcmVyLHB1ZXJpbGUscHVlcm1hbixwdWZmLHB1ZmZlZCxwdWZmZXIscHVmZmVyeSxwdWZmaWx5LHB1ZmZpbixwdWZmaW5nLHB1ZmZsZXQscHVmZndpZyxwdWZmeSxwdWcscHVnZ2VkLHB1Z2dlcixwdWdnaSxwdWdnaW5nLHB1Z2dpc2gscHVnZ2xlLHB1Z2dyZWUscHVnZ3kscHVnaCxwdWdpbCxwdWdtYW4scHVnbWlsbCxwdWlzbmUscHVpc3QscHVpc3RpZSxwdWphLHB1a2EscHVrYXRlYSxwdWtlLHB1a2VrbyxwdWtlcixwdWtpc2gscHVrcmFzLHB1a3UscHVreSxwdWwscHVsYWhhbixwdWxhc2FuLHB1bGUscHVsZWdvbCxwdWxlcixwdWxpLHB1bGljYXQscHVsaWNpZCxwdWxpbmcscHVsaXNoLHB1bGsscHVsa2EscHVsbCxwdWxsZG9vLHB1bGxlbixwdWxsZXIscHVsbGVyeSxwdWxsZXQscHVsbGV5LHB1bGxpLHB1bGx1cyxwdWxwLHB1bHBhbCxwdWxwZXIscHVscGlmeSxwdWxwaWx5LHB1bHBpdCxwdWxwb3VzLHB1bHB5LHB1bHF1ZSxwdWxzYW50LHB1bHNhdGUscHVsc2UscHVsc2lvbixwdWxzaXZlLHB1bHRvbixwdWx1LHB1bHZpYyxwdWx2aWwscHVsdmlubyxwdWx3YXIscHVseSxwdW1hLHB1bWljZSxwdW1pY2VkLHB1bWljZXIscHVtbWVsLHB1bW1pY2UscHVtcCxwdW1wYWdlLHB1bXBlcixwdW1wa2luLHB1bXBsZSxwdW1wbWFuLHB1bixwdW5hLHB1bmFpc2UscHVuYWx1YSxwdW5hdG9vLHB1bmNoLHB1bmNoZXIscHVuY2h5LHB1bmN0LHB1bmN0YWwscHVuY3R1bSxwdW5kaXQscHVuZGl0YSxwdW5kdW0scHVuZWNhLHB1bmcscHVuZ2EscHVuZ2FyLHB1bmdlbnQscHVuZ2VyLHB1bmdleSxwdW5naSxwdW5nbGUscHVuZ2xlZCxwdW5pY2luLHB1bmlseSxwdW5pc2gscHVuanVtLHB1bmsscHVua2FoLHB1bmtpZSxwdW5reSxwdW5sZXNzLHB1bmxldCxwdW5uYWdlLHB1bm5lcixwdW5uZXQscHVubmljLHB1bnN0ZXIscHVudCxwdW50YSxwdW50YWwscHVudGVsLHB1bnRlcixwdW50aSxwdW50aWwscHVudGlzdCxwdW50byxwdW50b3V0LHB1bnR5LHB1bnkscHVueWlzaCxwdW55aXNtLHB1cCxwdXBhLHB1cGFsLHB1cGF0ZSxwdXBlbG8scHVwaWwscHVwaWxhcixwdXBpbGVkLHB1cG9pZCxwdXBwZXQscHVwcGlmeSxwdXBwaWx5LHB1cHB5LHB1cHVsbyxwdXB1bmhhLHB1cixwdXJhbmEscHVyYW5pYyxwdXJhcXVlLHB1cmRhaCxwdXJkeSxwdXJlLHB1cmVkLHB1cmVlLHB1cmVseSxwdXJlcixwdXJmbGUscHVyZmxlZCxwdXJmbGVyLHB1cmZseSxwdXJnYSxwdXJnZSxwdXJnZXIscHVyZ2VyeSxwdXJnaW5nLHB1cmlmeSxwdXJpbmUscHVyaXJpLHB1cmlzbSxwdXJpc3QscHVyaXR5LHB1cmwscHVybGVyLHB1cmxpZXUscHVybGluLHB1cmxtYW4scHVybG9pbixwdXJwYXJ0LHB1cnBsZSxwdXJwbHkscHVycG9ydCxwdXJwb3NlLHB1cnB1cmEscHVycHVyZSxwdXJyLHB1cnJlLHB1cnJlZSxwdXJyZWljLHB1cnJlbCxwdXJyZXIscHVycmluZyxwdXJyb25lLHB1cnJ5LHB1cnNlLHB1cnNlZCxwdXJzZXIscHVyc2lseSxwdXJzbGV0LHB1cnNsZXkscHVyc3VhbCxwdXJzdWUscHVyc3VlcixwdXJzdWl0LHB1cnN5LHB1cnVzaGEscHVydmV5LHB1cnZpZXcscHVydm9lLHB1cyxwdXNoLHB1c2hlcixwdXNoZnVsLHB1c2hpbmcscHVzaHBpbixwdXNzLHB1c3NjYXQscHVzc2xleSxwdXNzeSxwdXN0dWxlLHB1dCxwdXRhZ2UscHV0YW1lbixwdXRiYWNrLHB1dGNoZW4scHV0Y2hlcixwdXRlYWwscHV0ZWxlZSxwdXRoZXIscHV0aGVyeSxwdXRpZCxwdXRpZGx5LHB1dGxvZyxwdXRvaXMscHV0cmVmeSxwdXRyaWQscHV0dCxwdXR0ZWUscHV0dGVyLHB1dHRpZXIscHV0dG9jayxwdXR0eSxwdXR1cmUscHV4eSxwdXp6bGUscHV6emxlZCxwdXp6bGVyLHB5YSxweWFsLHB5Y2hlLHB5Y25pYSxweWNuaWFsLHB5Y25pZCxweWNuaXRlLHB5Y25pdW0scHllbGljLHB5ZW1pYSxweWVtaWMscHlnYWwscHlnYXJnLHB5Z2lkaWQscHlnbW9pZCxweWdteSxweWdvZmVyLHB5Z29wb2QscHlpYyxweWluLHB5amFtYSxweWtlLHB5a25pYyxweWxhLHB5bGFyLHB5bGljLHB5bG9uLHB5bG9yaWMscHlsb3J1cyxweW9jZWxlLHB5b2N5c3QscHlvY3l0ZSxweW9pZCxweW9zaXMscHlyLHB5cmFsLHB5cmFsaWQscHlyYWxpcyxweXJhbWlkLHB5cmFuLHB5cmFueWwscHlyZSxweXJlbmEscHlyZW5lLHB5cmVuaWMscHlyZW5pbixweXJldGljLHB5cmV4LHB5cmV4aWEscHlyZXhpYyxweXJnb20scHlyaWRpYyxweXJpZHlsLHB5cml0ZSxweXJpdGVzLHB5cml0aWMscHlybyxweXJvZ2VuLHB5cm9pZCxweXJvbmUscHlyb3BlLHB5cm9wZW4scHlyb3B1cyxweXJvc2lzLHB5cm90aWMscHlycmhpYyxweXJyb2wscHlycm9sZSxweXJyb3lsLHB5cnJ5bCxweXJ1dmljLHB5cnV2aWwscHlydXZ5bCxweXRob24scHl1cmlhLHB5dnVyaWwscHl4LHB5eGlkZXMscHl4aWUscHl4aXMscSxxYXNpZGEscWVyZSxxZXJpLHFpbnRhcixxb3BoLHF1YSxxdWFiLHF1YWJpcmQscXVhY2hpbCxxdWFjayxxdWFja2xlLHF1YWNreSxxdWFkLHF1YWRkZWQscXVhZGRsZSxxdWFkcmEscXVhZHJhbCxxdWFkcmF0LHF1YWRyaWMscXVhZHJ1bSxxdWFlZGFtLHF1YWZmLHF1YWZmZXIscXVhZyxxdWFnZ2EscXVhZ2dsZSxxdWFnZ3kscXVhaG9nLHF1YWlsLHF1YWlseSxxdWFpbnQscXVha2UscXVha2VyLHF1YWtpbmcscXVha3kscXVhbGUscXVhbGlmeSxxdWFsaXR5LHF1YWxtLHF1YWxteSxxdWFuLHF1YW5keSxxdWFubmV0LHF1YW50LHF1YW50YSxxdWFudGljLHF1YW50dW0scXVhcixxdWFyZSxxdWFyayxxdWFybCxxdWFybGUscXVhcnJlZCxxdWFycmVsLHF1YXJyeSxxdWFydCxxdWFydGFuLHF1YXJ0ZXIscXVhcnRldCxxdWFydGljLHF1YXJ0byxxdWFydHoscXVhcnR6eSxxdWFzaCxxdWFzaGV5LHF1YXNoeSxxdWFzaSxxdWFza3kscXVhc3NpbixxdWF0LHF1YXRhLHF1YXRjaCxxdWF0ZXJuLHF1YXRlcnMscXVhdHJhbCxxdWF0cmUscXVhdHJpbixxdWF0dGllLHF1YXR1b3IscXVhdWsscXVhdmUscXVhdmVyLHF1YXZlcnkscXVhdyxxdWF3ayxxdWF5LHF1YXlhZ2UscXVheWZ1bCxxdWF5bWFuLHF1YmJhLHF1ZWFjaCxxdWVhY2h5LHF1ZWFrLHF1ZWFsLHF1ZWFuLHF1ZWFzb20scXVlYXN5LHF1ZWRmdWwscXVlZWNoeSxxdWVlbixxdWVlbmx5LHF1ZWVyLHF1ZWVyZXIscXVlZXJseSxxdWVlcnkscXVlZXN0LHF1ZWV0LHF1ZWV2ZSxxdWVnaCxxdWVpLHF1ZWxjaCxxdWVsbCxxdWVsbGVyLHF1ZW1hZG8scXVlbWUscXVlbWVseSxxdWVuY2gscXVlcmNpYyxxdWVyY2luLHF1ZXJlbnQscXVlcmllcixxdWVyaXN0LHF1ZXJrZW4scXVlcmwscXVlcm4scXVlcm5hbCxxdWVyeSxxdWVzdCxxdWVzdGVyLHF1ZXN0b3IscXVldCxxdWV0Y2gscXVldHphbCxxdWV1ZSxxdWV5LHF1aWFwbyxxdWliLHF1aWJibGUscXVpYmxldCxxdWljYSxxdWljayxxdWlja2VuLHF1aWNraWUscXVpY2tseSxxdWlkLHF1aWRkZXIscXVpZGRpdCxxdWlkZGxlLHF1aWVzY2UscXVpZXQscXVpZXRlbixxdWlldGVyLHF1aWV0bHkscXVpZXR1cyxxdWlmZixxdWlsYSxxdWlsZXMscXVpbGtpbixxdWlsbCxxdWlsbGFpLHF1aWxsZWQscXVpbGxlcixxdWlsbGV0LHF1aWxseSxxdWlsdCxxdWlsdGVkLHF1aWx0ZXIscXVpbixxdWluYSxxdWluYXJ5LHF1aW5hdGUscXVpbmNlLHF1aW5jaCxxdWluaWEscXVpbmljLHF1aW5pbixxdWluaW5hLHF1aW5pbmUscXVpbmlzbSxxdWluaXRlLHF1aW5pemUscXVpbmsscXVpbm5hdCxxdWlubmV0LHF1aW5vYSxxdWlub2lkLHF1aW5vbCxxdWlub25lLHF1aW5vdmEscXVpbm95bCxxdWluc2UscXVpbnN5LHF1aW50LHF1aW50YWQscXVpbnRhbCxxdWludGFuLHF1aW50ZSxxdWludGV0LHF1aW50aWMscXVpbnRpbixxdWludG8scXVpbnRvbixxdWludHVzLHF1aW55bCxxdWluemUscXVpcCxxdWlwZnVsLHF1aXBvLHF1aXBwZXIscXVpcHB5LHF1aXB1LHF1aXJhLHF1aXJlLHF1aXJrLHF1aXJreSxxdWlybCxxdWlydCxxdWlzLHF1aXNieSxxdWlzY29zLHF1aXNsZSxxdWl0LHF1aXRjaCxxdWl0ZSxxdWl0cyxxdWl0dGVkLHF1aXR0ZXIscXVpdHRvcixxdWl2ZXIscXVpdmVyeSxxdWl6LHF1aXp6ZWUscXVpenplcixxdWl6enkscXVvLHF1b2QscXVvaW4scXVvaW5lZCxxdW9pdCxxdW9pdGVyLHF1b2l0cyxxdW9uZGFtLHF1b25pYW0scXVvcCxxdW9ydW0scXVvdCxxdW90YSxxdW90ZSxxdW90ZWUscXVvdGVyLHF1b3RoLHF1b3RoYSxxdW90aXR5LHF1b3R1bSxyLHJhLHJhYWQscmFhc2gscmFiLHJhYmFuZCxyYWJhbm5hLHJhYmF0LHJhYmF0dGUscmFiYmV0LHJhYmJpLHJhYmJpbixyYWJiaXQscmFiYml0eSxyYWJibGUscmFiYmxlcixyYWJib25pLHJhYmljLHJhYmlkLHJhYmlkbHkscmFiaWVzLHJhYmlmaWMscmFiaW5ldCxyYWJpdGljLHJhY2Nvb24scmFjY3JvYyxyYWNlLHJhY2VtZSxyYWNlbWVkLHJhY2VtaWMscmFjZXIscmFjZXdheSxyYWNoLHJhY2hlLHJhY2hpYWwscmFjaGlzLHJhY2lhbCxyYWNpbHkscmFjaW5nLHJhY2lzbSxyYWNpc3QscmFjayxyYWNrYW4scmFja2VyLHJhY2tldCxyYWNrZXR0LHJhY2tldHkscmFja2Z1bCxyYWNraW5nLHJhY2tsZSxyYWNrd2F5LHJhY2xvaXIscmFjb24scmFjb29uLHJhY3kscmFkLHJhZGEscmFkYXIscmFkZGxlLHJhZGlhbCxyYWRpYWxlLHJhZGlhbixyYWRpYW50LHJhZGlhdGUscmFkaWNhbCxyYWRpY2VsLHJhZGljZXMscmFkaWNsZSxyYWRpaSxyYWRpbyxyYWRpb2RlLHJhZGlzaCxyYWRpdW0scmFkaXVzLHJhZGl4LHJhZG1hbixyYWRvbWUscmFkb24scmFkdWxhLHJhZmYscmFmZmUscmFmZmVlLHJhZmZlcnkscmFmZmlhLHJhZmZpbmcscmFmZmlzaCxyYWZmbGUscmFmZmxlcixyYWZ0LHJhZnRhZ2UscmFmdGVyLHJhZnRtYW4scmFmdHkscmFnLHJhZ2EscmFnZSxyYWdlZnVsLHJhZ2VvdXMscmFnZXIscmFnZmlzaCxyYWdnZWQscmFnZ2VkeSxyYWdnZWUscmFnZ2VyLHJhZ2dlcnkscmFnZ2V0eSxyYWdnaWwscmFnZ2lseSxyYWdnaW5nLHJhZ2dsZSxyYWdnbGVkLHJhZ2d5LHJhZ2luZyxyYWdsYW4scmFnbGV0LHJhZ2xpbixyYWdtYW4scmFnb3V0LHJhZ3NoYWcscmFndGFnLHJhZ3RpbWUscmFndWxlLHJhZ3VseSxyYWd3ZWVkLHJhZ3dvcnQscmFoLHJhaGRhcixyYWlhLHJhaWQscmFpZGVyLHJhaWwscmFpbGFnZSxyYWlsZXIscmFpbGluZyxyYWlsbHkscmFpbG1hbixyYWlsd2F5LHJhaW1lbnQscmFpbixyYWluYm93LHJhaW5lcixyYWluZnVsLHJhaW5pbHkscmFpbnkscmFpb2lkLHJhaXMscmFpc2UscmFpc2VkLHJhaXNlcixyYWlzaW4scmFpc2luZyxyYWlzaW55LHJhaixyYWphLHJhamFoLHJha2FuLHJha2UscmFrZWFnZSxyYWtlZnVsLHJha2VyLHJha2VyeSxyYWtoLHJha2kscmFraWx5LHJha2luZyxyYWtpc2gscmFraXQscmFrdSxyYWxsaWVyLHJhbGxpbmUscmFsbHkscmFscGgscmFtLHJhbWFkYSxyYW1hZ2UscmFtYWwscmFtYW5hcyxyYW1hc3MscmFtYXRlLHJhbWJlaCxyYW1ibGUscmFtYmxlcixyYW1ib25nLHJhbWUscmFtZWFsLHJhbWVkLHJhbWVraW4scmFtZW50LHJhbWVvdXMscmFtZXQscmFtZXgscmFtaGVhZCxyYW1ob29kLHJhbWkscmFtaWUscmFtaWZ5LHJhbWxpa2UscmFtbGluZSxyYW1tYWNrLHJhbW1lbCxyYW1tZXIscmFtbWlzaCxyYW1teSxyYW1vc2UscmFtb3VzLHJhbXAscmFtcGFnZSxyYW1wYW50LHJhbXBhcnQscmFtcGVkLHJhbXBlcixyYW1waWNrLHJhbXBpa2UscmFtcGluZyxyYW1waW9uLHJhbXBpcmUscmFtcGxlcixyYW1wbG9yLHJhbXJhY2UscmFtcm9kLHJhbXNjaCxyYW1zb24scmFtc3RhbSxyYW10aWwscmFtdWxhcixyYW11bGUscmFtdWx1cyxyYW11cyxyYW4scmFuYSxyYW5hbCxyYW5jZSxyYW5jZWwscmFuY2VyLHJhbmNoLHJhbmNoZSxyYW5jaGVyLHJhbmNobyxyYW5jaWQscmFuY29yLHJhbmQscmFuZGFuLHJhbmRlbSxyYW5kZXIscmFuZGluZyxyYW5kaXIscmFuZGxlLHJhbmRvbSxyYW5keSxyYW5lLHJhbmcscmFuZ2UscmFuZ2VkLHJhbmdlcixyYW5nZXkscmFuZ2luZyxyYW5nbGUscmFuZ2xlcixyYW5neSxyYW5pLHJhbmlkLHJhbmluZSxyYW5rLHJhbmtlZCxyYW5rZXIscmFua2lzaCxyYW5rbGUscmFua2x5LHJhbm4scmFubmVsLHJhbm55LHJhbnNhY2sscmFuc2VsLHJhbnNvbSxyYW50LHJhbnRhbixyYW50ZXIscmFudGluZyxyYW50b2NrLHJhbnR5LHJhbnVsYSxyYW51bGFyLHJhcCxyYXBlLHJhcGVmdWwscmFwZXIscmFwaGFueSxyYXBoZSxyYXBoaWRlLHJhcGhpcyxyYXBpYyxyYXBpZCxyYXBpZGx5LHJhcGllcixyYXBpbGxvLHJhcGluZSxyYXBpbmVyLHJhcGluZyxyYXBpbmljLHJhcGlzdCxyYXBsb2NoLHJhcHBhZ2UscmFwcGUscmFwcGVsLHJhcHBlcixyYXBwaW5nLHJhcHBpc3QscmFwcG9ydCxyYXB0LHJhcHRseSxyYXB0b3IscmFwdHJpbCxyYXB0dXJlLHJhcHR1cnkscmFwdHVzLHJhcmUscmFyZWJpdCxyYXJlZnkscmFyZWx5LHJhcmlzaCxyYXJpdHkscmFzLHJhc2EscmFzYW50LHJhc2NhbCxyYXNjZXRhLHJhc2UscmFzZW4scmFzZXIscmFzZ2FkbyxyYXNoLHJhc2hlcixyYXNoZnVsLHJhc2hpbmcscmFzaGx5LHJhc2lvbixyYXNwLHJhc3BlZCxyYXNwZXIscmFzcGluZyxyYXNwaXNoLHJhc3BpdGUscmFzcHkscmFzc2UscmFzc2xlLHJhc3RlcixyYXN0aWsscmFzdGxlLHJhc3VyZSxyYXQscmF0YSxyYXRhYmxlLHJhdGFibHkscmF0YWZlZSxyYXRhZmlhLHJhdGFsLHJhdGJpdGUscmF0Y2gscmF0Y2hlbCxyYXRjaGVyLHJhdGNoZXQscmF0ZSxyYXRlZCxyYXRlbCxyYXRlcixyYXRmaXNoLHJhdGgscmF0aGUscmF0aGVkLHJhdGhlbHkscmF0aGVyLHJhdGhlc3QscmF0aGl0ZSxyYXRob2xlLHJhdGlmeSxyYXRpbmUscmF0aW5nLHJhdGlvLHJhdGlvbixyYXRpdGUscmF0bGlrZSxyYXRsaW5lLHJhdG9vbixyYXR0YWdlLHJhdHRhaWwscmF0dGFuLHJhdHRlZW4scmF0dGVuLHJhdHRlcixyYXR0ZXJ5LHJhdHRpLHJhdHRpc2gscmF0dGxlLHJhdHRsZWQscmF0dGxlcixyYXR0bGVzLHJhdHRseSxyYXR0b24scmF0dHJhcCxyYXR0eSxyYXR3YSxyYXR3b29kLHJhdWNpZCxyYXVjaXR5LHJhdWNvdXMscmF1Z2h0LHJhdWsscmF1a2xlLHJhdWxpLHJhdW4scmF1bmdlLHJhdXBvLHJhdXF1ZSxyYXZhZ2UscmF2YWdlcixyYXZlLHJhdmVsLHJhdmVsZXIscmF2ZWxpbixyYXZlbGx5LHJhdmVuLHJhdmVuZXIscmF2ZW5yeSxyYXZlbnMscmF2ZXIscmF2aW4scmF2aW5lLHJhdmluZWQscmF2aW5leSxyYXZpbmcscmF2aW9saSxyYXZpc2gscmF2aXNvbixyYXcscmF3aGVhZCxyYXdoaWRlLHJhd2lzaCxyYXduZXNzLHJheCxyYXkscmF5YSxyYXlhZ2UscmF5ZWQscmF5ZnVsLHJheWxlc3MscmF5bGV0LHJheW9uLHJhemUscmF6ZWUscmF6ZXIscmF6b28scmF6b3IscmF6eixyYXp6aWEscmF6emx5LHJlLHJlYSxyZWFhbCxyZWFidXNlLHJlYWNoLHJlYWNoZXIscmVhY2h5LHJlYWN0LHJlYWN0b3IscmVhZCxyZWFkYXB0LHJlYWRkLHJlYWRlcixyZWFkaWx5LHJlYWRpbmcscmVhZG1pdCxyZWFkb3B0LHJlYWRvcm4scmVhZHkscmVhZ2VudCxyZWFnaW4scmVhZ3JlZSxyZWFrLHJlYWwscmVhbGFybSxyZWFsZXMscmVhbGVzdCxyZWFsZ2FyLHJlYWxpZ24scmVhbGlzbSxyZWFsaXN0LHJlYWxpdHkscmVhbGl2ZSxyZWFsaXplLHJlYWxsb3QscmVhbGxvdyxyZWFsbHkscmVhbG0scmVhbHRlcixyZWFsdG9yLHJlYWx0eSxyZWFtLHJlYW1hZ2UscmVhbWFzcyxyZWFtZW5kLHJlYW1lcixyZWFtdXNlLHJlYW15LHJlYW5uZXgscmVhbm5veSxyZWFudmlsLHJlYXAscmVhcGVyLHJlYXBwbHkscmVhcixyZWFyZXIscmVhcmd1ZSxyZWFyaXNlLHJlYXJtLHJlYXJyYXkscmVhc2sscmVhc29uLHJlYXNzYXkscmVhc3R5LHJlYXN5LHJlYXR1cyxyZWF1ZGl0LHJlYXZhaWwscmVhdmUscmVhdmVyLHJlYXZvaWQscmVhdm93LHJlYXdhaXQscmVhd2FrZSxyZWF3YXJkLHJlYXdhcmUscmViLHJlYmFiLHJlYmFjayxyZWJhZyxyZWJhaXQscmViYWtlLHJlYmFsZSxyZWJhbixyZWJhcixyZWJhc2UscmViYXNpcyxyZWJhdGUscmViYXRlcixyZWJhdGhlLHJlYmF0byxyZWJhd2wscmViZWFyLHJlYmVhdCxyZWJlYyxyZWJlY2sscmViZWQscmViZWcscmViZWdldCxyZWJlZ2luLHJlYmVsLHJlYmVsbHkscmViZW5kLHJlYmVzZXQscmViaWEscmViaWFzLHJlYmlkLHJlYmlsbCxyZWJpbmQscmViaXJ0aCxyZWJpdGUscmVibGFkZSxyZWJsYW1lLHJlYmxhc3QscmVibGVuZCxyZWJsZXNzLHJlYmxvY2sscmVibG9vbSxyZWJsb3QscmVibG93LHJlYmx1ZSxyZWJsdWZmLHJlYm9hbnQscmVib2FyZCxyZWJvYXN0LHJlYm9iLHJlYm9pbCxyZWJvaXNlLHJlYm9sZCxyZWJvbHQscmVib25lLHJlYm9vayxyZWJvcCxyZWJvcmUscmVib3JuLHJlYm91bmQscmVib3gscmVicmFjZSxyZWJyYWlkLHJlYnJhbmQscmVicmVlZCxyZWJyZXcscmVicmliZSxyZWJyaWNrLHJlYnJpbmcscmVicm93bixyZWJydXNoLHJlYnVkLHJlYnVmZixyZWJ1aWxkLHJlYnVpbHQscmVidWtlLHJlYnVrZXIscmVidWxrLHJlYnVuY2gscmVidW95LHJlYnVybixyZWJ1cnN0LHJlYnVyeSxyZWJ1cyxyZWJ1c2gscmVidXN5LHJlYnV0LHJlYnV0ZSxyZWJ1eSxyZWNhYmxlLHJlY2FnZSxyZWNhbGsscmVjYWxsLHJlY2FudCxyZWNhcCxyZWNhcnJ5LHJlY2FydCxyZWNhcnZlLHJlY2FzZSxyZWNhc2gscmVjYXN0LHJlY2F0Y2gscmVjY2UscmVjY28scmVjY3kscmVjZWRlLHJlY2VkZXIscmVjZWlwdCxyZWNlaXZlLHJlY2VuY3kscmVjZW5zZSxyZWNlbnQscmVjZXB0LHJlY2VzcyxyZWNoYWZlLHJlY2hhaW4scmVjaGFsLHJlY2hhbnQscmVjaGFvcyxyZWNoYXIscmVjaGFzZSxyZWNoYXcscmVjaGVhdCxyZWNoZWNrLHJlY2hlZXIscmVjaGV3LHJlY2hpcCxyZWNodWNrLHJlY2h1cm4scmVjaXBlLHJlY2l0YWwscmVjaXRlLHJlY2l0ZXIscmVjayxyZWNrbGEscmVja29uLHJlY2xhaW0scmVjbGFtYSxyZWNsYW5nLHJlY2xhc3AscmVjbGFzcyxyZWNsZWFuLHJlY2xlYXIscmVjbGltYixyZWNsaW5lLHJlY2xvc2UscmVjbHVzZSxyZWNvYWNoLHJlY29hbCxyZWNvYXN0LHJlY29hdCxyZWNvY2sscmVjb2N0LHJlY29kZSxyZWNvaWwscmVjb2luLHJlY29rZSxyZWNvbG9yLHJlY29tYixyZWNvbixyZWNvb2sscmVjb29sLHJlY29weSxyZWNvcmQscmVjb3JrLHJlY291bnQscmVjb3VwLHJlY292ZXIscmVjcmFtcCxyZWNyYW5rLHJlY3JhdGUscmVjcmV3LHJlY3Jvb24scmVjcm9wLHJlY3Jvc3MscmVjcm93ZCxyZWNyb3duLHJlY3J1aXQscmVjcnVzaCxyZWN0LHJlY3RhLHJlY3RhbCxyZWN0aSxyZWN0aWZ5LHJlY3Rpb24scmVjdG8scmVjdG9yLHJlY3RvcnkscmVjdHJpeCxyZWN0dW0scmVjdHVzLHJlY3VyLHJlY3VyZSxyZWN1cmwscmVjdXJzZSxyZWN1cnZlLHJlY3VzZSxyZWN1dCxyZWN5Y2xlLHJlZCxyZWRhY3QscmVkYW4scmVkYXJlLHJlZGFybixyZWRhcnQscmVkYXRlLHJlZGF1YixyZWRhd24scmVkYmFjayxyZWRiYWl0LHJlZGJpbGwscmVkYmlyZCxyZWRib25lLHJlZGJ1Y2sscmVkYnVkLHJlZGNhcCxyZWRjb2F0LHJlZGQscmVkZGVuLHJlZGRlcixyZWRkaW5nLHJlZGRpc2gscmVkZG9jayxyZWRkeSxyZWRlLHJlZGVhbCxyZWRlYml0LHJlZGVjayxyZWRlZWQscmVkZWVtLHJlZGVmZXIscmVkZWZ5LHJlZGVpZnkscmVkZWxheSxyZWRlbnkscmVkZXllLHJlZGZpbixyZWRmaXNoLHJlZGZvb3QscmVkaGVhZCxyZWRob29wLHJlZGlhLHJlZGllbnQscmVkaWcscmVkaXAscmVkaXZlLHJlZGxlZyxyZWRsZWdzLHJlZGx5LHJlZG5lc3MscmVkbyxyZWRvY2sscmVkb29tLHJlZG91YnQscmVkb3VuZCxyZWRvd2EscmVkb3gscmVkcG9sbCxyZWRyYWZ0LHJlZHJhZyxyZWRyYXBlLHJlZHJhdyxyZWRyZWFtLHJlZHJlc3MscmVkcmlsbCxyZWRyaXZlLHJlZHJvb3QscmVkcnkscmVkc2VhcixyZWRza2luLHJlZHRhYixyZWR0YWlsLHJlZHRvcCxyZWR1YixyZWR1Y2UscmVkdWNlZCxyZWR1Y2VyLHJlZHVjdCxyZWR1ZSxyZWR1eCxyZWR3YXJkLHJlZHdhcmUscmVkd2VlZCxyZWR3aW5nLHJlZHdvb2QscmVkeWUscmVlLHJlZWNoeSxyZWVkLHJlZWRlZCxyZWVkZW4scmVlZGVyLHJlZWRpbHkscmVlZGluZyxyZWVkaXNoLHJlZWRtYW4scmVlZHkscmVlZixyZWVmZXIscmVlZmluZyxyZWVmeSxyZWVrLHJlZWtlcixyZWVreSxyZWVsLHJlZWxlZCxyZWVsZXIscmVlbSxyZWVtaW5nLHJlZW1pc2gscmVlbixyZWVuZ2UscmVlcGVyLHJlZXNlLHJlZXNobGUscmVlc2sscmVlc2xlLHJlZXN0LHJlZXN0ZXIscmVlc3RsZSxyZWVzdHkscmVldCxyZWV0YW0scmVldGxlLHJlZXZlLHJlZixyZWZhY2UscmVmYWxsLHJlZmFuLHJlZmF2b3IscmVmZWN0LHJlZmVlZCxyZWZlZWwscmVmZWlnbixyZWZlbCxyZWZlbmNlLHJlZmVyLHJlZmVyZWUscmVmZXRjaCxyZWZpZ2h0LHJlZmlsbCxyZWZpbG0scmVmaW5kLHJlZmluZSxyZWZpbmVkLHJlZmluZXIscmVmaXJlLHJlZml0LHJlZml4LHJlZmxhZyxyZWZsYW1lLHJlZmxhc2gscmVmbGF0ZSxyZWZsZWN0LHJlZmxlZSxyZWZsZXgscmVmbGluZyxyZWZsb2F0LHJlZmxvZyxyZWZsb29kLHJlZmxvb3IscmVmbG93LHJlZmx1c2gscmVmbHV4LHJlZmx5LHJlZm9jdXMscmVmb2xkLHJlZm9udCxyZWZvb2wscmVmb290LHJlZm9yY2UscmVmb3JkLHJlZm9yZ2UscmVmb3JtLHJlZm91bmQscmVmcmFjdCxyZWZyYWluLHJlZnJhbWUscmVmcmVzaCxyZWZyb250LHJlZnQscmVmdWVsLHJlZnVnZSxyZWZ1Z2VlLHJlZnVsZ2UscmVmdW5kLHJlZnVybCxyZWZ1c2FsLHJlZnVzZSxyZWZ1c2VyLHJlZnV0YWwscmVmdXRlLHJlZnV0ZXIscmVnLHJlZ2FpbixyZWdhbCxyZWdhbGUscmVnYWxlcixyZWdhbGlhLHJlZ2FsbHkscmVnYXJkLHJlZ2F0dGEscmVnYXVnZSxyZWdlbmN5LHJlZ2VudCxyZWdlcyxyZWdldCxyZWdpYSxyZWdpZnQscmVnaWxkLHJlZ2lsbCxyZWdpbWUscmVnaW1lbixyZWdpbixyZWdpbmFsLHJlZ2lvbixyZWdpdmUscmVnbGFpcixyZWdsYXplLHJlZ2xlLHJlZ2xldCxyZWdsb3NzLHJlZ2xvdmUscmVnbG93LHJlZ2x1ZSxyZWdtYSxyZWduYWwscmVnbmFudCxyZWdvcmdlLHJlZ3JhZGUscmVncmFmdCxyZWdyYW50LHJlZ3Jhc3AscmVncmFzcyxyZWdyYXRlLHJlZ3JlZGUscmVncmVlbixyZWdyZWV0LHJlZ3Jlc3MscmVncmV0LHJlZ3JpbmQscmVncmlwLHJlZ3JvdXAscmVncm93LHJlZ3VhcmQscmVndWlkZSxyZWd1bGEscmVndWxhcixyZWd1bGkscmVndWx1cyxyZWd1cixyZWd1cmdlLHJlZ3VzaCxyZWgscmVoYWlyLHJlaGFsZSxyZWhhbmcscmVoYXJtLHJlaGFzaCxyZWhhdWwscmVoZWFkLHJlaGVhbCxyZWhlYXAscmVoZWFyLHJlaGVhdCxyZWhlZGdlLHJlaGVlbCxyZWhvZSxyZWhvaXN0LHJlaG9ub3IscmVob29kLHJlaG9vayxyZWhvb3AscmVob3VzZSxyZWh1bmcscmVpZixyZWlmeSxyZWlnbixyZWltLHJlaW1hZ2UscmVpbXBlbCxyZWltcGx5LHJlaW4scmVpbmEscmVpbmN1cixyZWluZHVlLHJlaW5mZXIscmVpbnMscmVpbnRlcixyZWlzLHJlaXNzdWUscmVpdCxyZWl0Ym9rLHJlaXRlcixyZWl2ZXIscmVqYWlsLHJlamVjdCxyZWplcmsscmVqb2ljZSxyZWpvaW4scmVqb2x0LHJlanVkZ2UscmVraWNrLHJla2lsbCxyZWtpbmcscmVraXNzLHJla25pdCxyZWtub3cscmVsLHJlbGFiZWwscmVsYWNlLHJlbGFkZSxyZWxhZGVuLHJlbGFpcyxyZWxhbXAscmVsYW5kLHJlbGFwLHJlbGFwc2UscmVsYXN0LHJlbGF0YSxyZWxhdGNoLHJlbGF0ZSxyZWxhdGVkLHJlbGF0ZXIscmVsYXRvcixyZWxhdHVtLHJlbGF4LHJlbGF4ZWQscmVsYXhlcixyZWxheSxyZWxidW4scmVsZWFkLHJlbGVhcCxyZWxlYXJuLHJlbGVhc2UscmVsZW5kLHJlbGVudCxyZWxldCxyZWxldmVsLHJlbGV2eSxyZWxpYW50LHJlbGljLHJlbGljayxyZWxpY3QscmVsaWVmLHJlbGllcixyZWxpZXZlLHJlbGlldm8scmVsaWZ0LHJlbGlnaHQscmVsaW1lLHJlbGltaXQscmVsaW5lLHJlbGluZXIscmVsaW5rLHJlbGlzaCxyZWxpc2h5LHJlbGlzdCxyZWxpdmUscmVsb2FkLHJlbG9hbixyZWxvY2sscmVsb2RnZSxyZWxvb2sscmVsb3NlLHJlbG9zdCxyZWxvdCxyZWxvdmUscmVsb3dlcixyZWx1Y3QscmVsdW1lLHJlbHkscmVtYWRlLHJlbWFpbCxyZW1haW4scmVtYWlucyxyZW1ha2UscmVtYWtlcixyZW1hbixyZW1hbmQscmVtYW5ldCxyZW1hcCxyZW1hcmNoLHJlbWFyayxyZW1hcnJ5LHJlbWFzayxyZW1hc3MscmVtYXN0LHJlbWF0Y2gscmVtYmxlLHJlbWVhbnQscmVtZWRlLHJlbWVkeSxyZW1lZXQscmVtZWx0LHJlbWVuZCxyZW1lcmdlLHJlbWV0YWwscmVtZXgscmVtaWNhLHJlbWljbGUscmVtaWdlcyxyZW1pbGwscmVtaW1pYyxyZW1pbmQscmVtaW50LHJlbWlwZWQscmVtaXNlLHJlbWlzcyxyZW1pdCxyZW1peCxyZW1uYW50LHJlbW9jayxyZW1vZGVsLHJlbW9sZCxyZW1vcCxyZW1vcmEscmVtb3JkLHJlbW9yc2UscmVtb3RlLHJlbW91bGQscmVtb3VudCxyZW1vdmFsLHJlbW92ZSxyZW1vdmVkLHJlbW92ZXIscmVuYWJsZSxyZW5hYmx5LHJlbmFpbCxyZW5hbCxyZW5hbWUscmVuZCxyZW5kZXIscmVuZWcscmVuZWdlLHJlbmVnZXIscmVuZWd1ZSxyZW5lcnZlLHJlbmVzLHJlbmV0LHJlbmV3LHJlbmV3YWwscmVuZXdlcixyZW5pbixyZW5pc2gscmVuayxyZW5reSxyZW5uZSxyZW5uZXQscmVubmluLHJlbm93bixyZW50LHJlbnRhZ2UscmVudGFsLHJlbnRlZCxyZW50ZWUscmVudGVyLHJlbnZvaSxyZW52b3kscmVvY2N1cixyZW9mZmVyLHJlb2lsLHJlb21pdCxyZW9wZW4scmVvcmRlcixyZW93bixyZXAscmVwYWNlLHJlcGFjayxyZXBhZ2UscmVwYWludCxyZXBhaXIscmVwYWxlLHJlcGFuZCxyZXBhbmVsLHJlcGFwZXIscmVwYXJrLHJlcGFzcyxyZXBhc3QscmVwYXN0ZSxyZXBhdGNoLHJlcGF2ZSxyZXBhd24scmVwYXkscmVwYXlhbCxyZXBlYWwscmVwZWF0LHJlcGVnLHJlcGVsLHJlcGVuLHJlcGVudCxyZXBldyxyZXBoYXNlLHJlcGljLHJlcGljayxyZXBpZWNlLHJlcGlsZSxyZXBpbixyZXBpbmUscmVwaW5lcixyZXBpcGUscmVwaXF1ZSxyZXBpdGNoLHJlcGtpZSxyZXBsYWNlLHJlcGxhaXQscmVwbGFuLHJlcGxhbmUscmVwbGFudCxyZXBsYXRlLHJlcGxheSxyZXBsZWFkLHJlcGxlYXQscmVwbGV0ZSxyZXBsZXZ5LHJlcGxpY2EscmVwbGllcixyZXBsb2QscmVwbG90LHJlcGxvdyxyZXBsdW0scmVwbHVtZSxyZXBseSxyZXBvaW50LHJlcG9sbCxyZXBvbG9uLHJlcG9uZSxyZXBvcGUscmVwb3J0LHJlcG9zYWwscmVwb3NlLHJlcG9zZWQscmVwb3NlcixyZXBvc2l0LHJlcG9zdCxyZXBvdCxyZXBvdW5kLHJlcG91cixyZXBwLHJlcHBlZCxyZXByYXkscmVwcmVzcyxyZXByaWNlLHJlcHJpbWUscmVwcmludCxyZXByaXNlLHJlcHJvb2YscmVwcm92ZSxyZXBydW5lLHJlcHMscmVwdGFudCxyZXB0aWxlLHJlcHVmZixyZXB1Z24scmVwdWxzZSxyZXB1bXAscmVwdXJnZSxyZXB1dGUscmVwdXRlZCxyZXF1ZWVuLHJlcXVlc3QscmVxdWllbSxyZXF1aW4scmVxdWlyZSxyZXF1aXQscmVxdWl0ZSxyZXF1aXoscmVxdW90ZSxyZXJhY2sscmVyYWlsLHJlcmFpc2UscmVyYWtlLHJlcmFuayxyZXJhdGUscmVyZWFkLHJlcmVkb3MscmVyZWUscmVyZWVsLHJlcmVldmUscmVyZWlnbixyZXJlbnQscmVyaWcscmVyaW5nLHJlcmlzZSxyZXJpdmFsLHJlcml2ZXQscmVyb2IscmVyb2JlLHJlcm9sbCxyZXJvb2YscmVyb290LHJlcm9wZSxyZXJvdXRlLHJlcm93LHJlcnViLHJlcnVuLHJlc2FjYSxyZXNhY2sscmVzYWlsLHJlc2FsZSxyZXNhbHQscmVzYXcscmVzYXdlcixyZXNheSxyZXNjYW4scmVzY2luZCxyZXNjb3JlLHJlc2NydWIscmVzY3VlLHJlc2N1ZXIscmVzZWFsLHJlc2VhbSxyZXNlYXQscmVzZWN0LHJlc2VkYSxyZXNlZSxyZXNlZWQscmVzZWVrLHJlc2Vpc2UscmVzZWl6ZSxyZXNlbGYscmVzZWxsLHJlc2VuZCxyZXNlbmUscmVzZW50LHJlc2VydmUscmVzZXQscmVzZXZlcixyZXNldyxyZXNleCxyZXNoLHJlc2hha2UscmVzaGFwZSxyZXNoYXJlLHJlc2hhdmUscmVzaGVhcixyZXNoaWZ0LHJlc2hpbmUscmVzaGlwLHJlc2hvZSxyZXNob290LHJlc2h1bixyZXNodW50LHJlc2h1dCxyZXNpZGUscmVzaWRlcixyZXNpZHVhLHJlc2lkdWUscmVzaWZ0LHJlc2lnaCxyZXNpZ24scmVzaWxlLHJlc2luLHJlc2luYSxyZXNpbmVyLHJlc2luZyxyZXNpbmljLHJlc2luayxyZXNpbm9sLHJlc2lueSxyZXNpc3QscmVzaXplLHJlc2l6ZXIscmVza2luLHJlc2xhc2gscmVzbGF0ZSxyZXNsYXkscmVzbGlkZSxyZXNsb3QscmVzbWVsbCxyZXNtZWx0LHJlc21pbGUscmVzbmFwLHJlc251YixyZXNvYWsscmVzb2FwLHJlc29pbCxyZXNvbGUscmVzb2x2ZSxyZXNvcmIscmVzb3J0LHJlc291bmQscmVzb3cscmVzcCxyZXNwYWNlLHJlc3BhZGUscmVzcGFuLHJlc3BlYWsscmVzcGVjdCxyZXNwZWxsLHJlc3BpbixyZXNwaXJlLHJlc3BpdGUscmVzcGxpdCxyZXNwb2tlLHJlc3BvbmQscmVzcG90LHJlc3ByYXkscmVzcHVlLHJlc3NhbGEscmVzc2F1dCxyZXN0LHJlc3RhY2sscmVzdGFmZixyZXN0YWluLHJlc3Rha2UscmVzdGFtcCxyZXN0YW50LHJlc3RhcnQscmVzdGF0ZSxyZXN0YXVyLHJlc3RlYWwscmVzdGVlbCxyZXN0ZWVwLHJlc3RlbSxyZXN0ZXAscmVzdGVyLHJlc3RlcyxyZXN0ZnVsLHJlc3RpYWQscmVzdGlmZixyZXN0aW5nLHJlc3RpcixyZXN0aXMscmVzdGl2ZSxyZXN0b2NrLHJlc3RvcmUscmVzdG93LHJlc3RyYXAscmVzdHJpcCxyZXN0dWR5LHJlc3R1ZmYscmVzdHkscmVzdHlsZSxyZXN1Y2sscmVzdWUscmVzdWluZyxyZXN1aXQscmVzdWx0LHJlc3VtZSxyZXN1bWVyLHJlc3VuLHJlc3VwLHJlc3VyZ2UscmVzd2FnZSxyZXN3YXJkLHJlc3dhcm0scmVzd2VhcixyZXN3ZWF0LHJlc3dlZXAscmVzd2VsbCxyZXN3aWxsLHJlc3dpbSxyZXQscmV0YWJsZSxyZXRhY2sscmV0YWcscmV0YWlsLHJldGFpbixyZXRha2UscmV0YWtlcixyZXRhbGsscmV0YW1hLHJldGFtZSxyZXRhbixyZXRhcGUscmV0YXJkLHJldGFyZSxyZXRhc3RlLHJldGF4LHJldGNoLHJldGVhY2gscmV0ZWxsLHJldGVtLHJldGVtcHQscmV0ZW5lLHJldGVudCxyZXRlc3QscmV0aGFuayxyZXRoYXcscmV0aGUscmV0aGluayxyZXRocm93LHJldGlhLHJldGlhbCxyZXRpYXJ5LHJldGljbGUscmV0aWUscmV0aWVyLHJldGlsZSxyZXRpbGwscmV0aW1lLHJldGluLHJldGluYSxyZXRpbmFsLHJldGlub2wscmV0aW51ZSxyZXRpcCxyZXRpcmFsLHJldGlyZSxyZXRpcmVkLHJldGlyZXIscmV0b2FzdCxyZXRvbGQscmV0b21iLHJldG9vayxyZXRvb2wscmV0b290aCxyZXRvcnQscmV0b3NzLHJldG90YWwscmV0b3VjaCxyZXRvdXIscmV0cmFjZSxyZXRyYWNrLHJldHJhY3QscmV0cmFkLHJldHJhZGUscmV0cmFpbixyZXRyYWwscmV0cmFtcCxyZXRyZWFkLHJldHJlYXQscmV0cmVlLHJldHJpYWwscmV0cmltLHJldHJpcCxyZXRyb3QscmV0cnVkZSxyZXRydWUscmV0cnVzdCxyZXRyeSxyZXR0ZWQscmV0dGVyLHJldHRlcnkscmV0dGluZyxyZXR0b3J5LHJldHViZSxyZXR1Y2sscmV0dW5lLHJldHVyZixyZXR1cm4scmV0dXNlLHJldHdpbmUscmV0d2lzdCxyZXR5aW5nLHJldHlwZSxyZXR6aWFuLHJldW5lLHJldW5pZnkscmV1bmlvbixyZXVuaXRlLHJldXJnZSxyZXVzZSxyZXV0dGVyLHJldixyZXZhbHVlLHJldmFtcCxyZXZhcnkscmV2ZSxyZXZlYWwscmV2ZWlsLHJldmVsLHJldmVsZXIscmV2ZWxseSxyZXZlbHJ5LHJldmVuZCxyZXZlbmdlLHJldmVudCxyZXZlbnVlLHJldmVyLHJldmVyYixyZXZlcmUscmV2ZXJlZCxyZXZlcmVyLHJldmVyaWUscmV2ZXJzLHJldmVyc2UscmV2ZXJzaSxyZXZlcnNvLHJldmVydCxyZXZlcnkscmV2ZXN0LHJldmV0LHJldmV0ZSxyZXZpZSxyZXZpZXcscmV2aWxlLHJldmlsZXIscmV2aXNhbCxyZXZpc2UscmV2aXNlZSxyZXZpc2VyLHJldmlzaXQscmV2aXNvcixyZXZpdmFsLHJldml2ZSxyZXZpdmVyLHJldml2b3IscmV2b2ljZSxyZXZva2UscmV2b2tlcixyZXZvbHQscmV2b2x2ZSxyZXZvbWl0LHJldm90ZSxyZXZ1ZSxyZXZ1aXN0LHJld2FkZSxyZXdhZ2VyLHJld2FrZSxyZXdha2VuLHJld2FsbCxyZXdhcmQscmV3YXJtLHJld2FybixyZXdhc2gscmV3YXRlcixyZXdhdmUscmV3YXgscmV3YXlsZSxyZXdlYXIscmV3ZWF2ZSxyZXdlZCxyZXdlaWdoLHJld2VsZCxyZXdlbmQscmV3ZXQscmV3aGVscCxyZXdoaXJsLHJld2lkZW4scmV3aW4scmV3aW5kLHJld2lyZSxyZXdpc2gscmV3b29kLHJld29yZCxyZXdvcmsscmV3b3VuZCxyZXdvdmUscmV3b3ZlbixyZXdyYXAscmV3cml0ZSxyZXgscmV4ZW4scmV5aWVsZCxyZXlva2UscmV5b3V0aCxyaGFiZG9tLHJoYWJkb3MscmhhYmR1cyxyaGFnaXRlLHJoYWdvbixyaGFnb3NlLHJoYW1uLHJoYW1uYWwscmhhc29uLHJoYXRhbnkscmhlLHJoZWEscmhlYm9rLHJoZWVib2MscmhlZWJvayxyaGVlbixyaGVpYyxyaGVpbixyaGVpbmljLHJoZW1hLHJoZW1lLHJoZW5pdW0scmhlb3RhbixyaGVzaWFuLHJoZXN1cyxyaGV0b3IscmhldW0scmhldW1lZCxyaGV1bWljLHJoZXVteSxyaGV4aXMscmhpbmFsLHJoaW5lLHJoaW5pb24scmhpbm8scmhpemluZSxyaGl6b2lkLHJoaXpvbWEscmhpem9tZSxyaGl6b3RlLHJobyxyaG9kaWMscmhvZGluZyxyaG9kaXRlLHJob2RpdW0scmhvbWIscmhvbWJpYyxyaG9tYm9zLHJob21idXMscmh1YmFyYixyaHVtYixyaHVtYmEscmh5bWUscmh5bWVyLHJoeW1lcnkscmh5bWljLHJoeW1pc3Qscmh5bXkscmh5cHRpYyxyaHl0aG0scmh5dG9uLHJpYSxyaWFsLHJpYW5jeSxyaWFudCxyaWFudGx5LHJpYXRhLHJpYixyaWJhbGQscmliYW5kLHJpYmF0LHJpYmJhbmQscmliYmVkLHJpYmJlcixyaWJiZXQscmliYmluZyxyaWJibGUscmliYm9uLHJpYmJvbnkscmliYnkscmliZSxyaWJsZXNzLHJpYmxldCxyaWJsaWtlLHJpYm9uaWMscmlib3NlLHJpYnNraW4scmlid29yayxyaWJ3b3J0LHJpY2UscmljZXIscmljZXkscmljaCxyaWNoZG9tLHJpY2hlbixyaWNoZXMscmljaGx5LHJpY2h0LHJpY2luLHJpY2luZSxyaWNpbmljLHJpY2ludXMscmljayxyaWNrZXIscmlja2V0cyxyaWNrZXR5LHJpY2tleSxyaWNrbGUscmlja3NoYSxyaWNyYWMscmljdGFsLHJpY3R1cyxyaWQscmlkYWJsZSxyaWRhYmx5LHJpZGRhbSxyaWRkZWwscmlkZGVuLHJpZGRlcixyaWRkaW5nLHJpZGRsZSxyaWRkbGVyLHJpZGUscmlkZWF1LHJpZGVuLHJpZGVudCxyaWRlcixyaWRlcmVkLHJpZGdlLHJpZGdlZCxyaWRnZWwscmlkZ2VyLHJpZGdpbCxyaWRnaW5nLHJpZGd5LHJpZGluZyxyaWRvdHRvLHJpZSxyaWVtLHJpZW1waWUscmllcixyaWZlLHJpZmVseSxyaWZmLHJpZmZsZSxyaWZmbGVyLHJpZmxlLHJpZmxlcixyaWZsZXJ5LHJpZmxpbmcscmlmdCxyaWZ0ZXIscmlmdHkscmlnLHJpZ2JhbmUscmlnZ2FsZCxyaWdnZXIscmlnZ2luZyxyaWdnaXNoLHJpZ2dpdGUscmlnZ290LHJpZ2h0LHJpZ2h0ZW4scmlnaHRlcixyaWdodGxlLHJpZ2h0bHkscmlnaHRvLHJpZ2h0eSxyaWdpZCxyaWdpZGx5LHJpZ2xpbmcscmlnbnVtLHJpZ29sLHJpZ29yLHJpZ3NieSxyaWtpc2hhLHJpa2sscmlrc2hhLHJpa3NoYXcscmlsYXdhLHJpbGUscmlsZXkscmlsbCxyaWxsZXQscmlsbGV0dCxyaWxsb2NrLHJpbGx5LHJpbSxyaW1hLHJpbWFsLHJpbWF0ZSxyaW1iYXNlLHJpbWUscmltZXIscmltZmlyZSxyaW1sYW5kLHJpbWxlc3MscmltbWVkLHJpbW1lcixyaW1vc2Uscmltb3VzLHJpbXBpLHJpbXBsZSxyaW1yb2NrLHJpbXUscmltdWxhLHJpbXkscmluY2VhdSxyaW5jaCxyaW5jb24scmluZCxyaW5kZWQscmluZGxlLHJpbmR5LHJpbmUscmluZyxyaW5nZSxyaW5nZWQscmluZ2VudCxyaW5nZXIscmluZ2V5ZSxyaW5naW5nLHJpbmdpdGUscmluZ2xlLHJpbmdsZXQscmluZ21hbixyaW5ndGF3LHJpbmd5LHJpbmsscmlua2Escmlua2VyLHJpbmtpdGUscmlubmVyLHJpbnNlLHJpbnNlcixyaW5zaW5nLHJpbyxyaW90LHJpb3RlcixyaW90aW5nLHJpb3Rpc3QscmlvdG91cyxyaW90cnkscmlwLHJpcGEscmlwYWwscmlwY29yZCxyaXBlLHJpcGVseSxyaXBlbixyaXBlbmVyLHJpcGVyLHJpcGd1dCxyaXBpZW5vLHJpcGllcixyaXBvc3Qscmlwb3N0ZSxyaXBwZXIscmlwcGV0LHJpcHBpZXIscmlwcGluZyxyaXBwaXQscmlwcGxlLHJpcHBsZXIscmlwcGxldCxyaXBwbHkscmlwcG9uLHJpcHJhcCxyaXBzYWNrLHJpcHNhdyxyaXB1cCxyaXNhbGEscmlzYmVybSxyaXNlLHJpc2VuLHJpc2VyLHJpc2hpLHJpc2libGUscmlzaWJseSxyaXNpbmcscmlzayxyaXNrZXIscmlza2Z1bCxyaXNraWx5LHJpc2tpc2gscmlza3kscmlzcCxyaXNwZXIscmlzcXVlLHJpc3F1ZWUscmlzc2VsLHJpc3NlcixyaXNzbGUscmlzc29pZCxyaXN0LHJpc3Rvcmkscml0LHJpdGEscml0ZSxyaXRsaW5nLHJpdHVhbCxyaXR6eSxyaXZhLHJpdmFnZSxyaXZhbCxyaXZhbHJ5LHJpdmUscml2ZWwscml2ZWxsLHJpdmVuLHJpdmVyLHJpdmVyZWQscml2ZXJseSxyaXZlcnkscml2ZXQscml2ZXRlcixyaXZpbmcscml2b3NlLHJpdnVsZXQscml4LHJpeHkscml5YWwscml6emFyLHJpenpsZSxyaXp6b20scm9hY2gscm9hZCxyb2FkYmVkLHJvYWRlZCxyb2FkZXIscm9hZGluZyxyb2FkaXRlLHJvYWRtYW4scm9hZHdheSxyb2FtLHJvYW1hZ2Uscm9hbWVyLHJvYW1pbmcscm9hbixyb2Fub2tlLHJvYXIscm9hcmVyLHJvYXJpbmcscm9hc3Qscm9hc3Rlcixyb2Iscm9iYWxvLHJvYmFuZCxyb2JiZXIscm9iYmVyeSxyb2JiaW4scm9iYmluZyxyb2JlLHJvYmVyLHJvYmVyZCxyb2Jpbixyb2JpbmV0LHJvYmluZyxyb2JpbmluLHJvYmxlLHJvYm9tYixyb2JvdCxyb2JvdHJ5LHJvYnVyLHJvYnVzdCxyb2Mscm9jaGVyLHJvY2hldCxyb2NrLHJvY2thYnkscm9ja2VyLHJvY2tlcnkscm9ja2V0LHJvY2tldHkscm9ja2luZyxyb2NraXNoLHJvY2tsYXkscm9ja2xldCxyb2NrbWFuLHJvY2t5LHJvY29jbyxyb2N0YSxyb2Qscm9kZCxyb2RkaW4scm9kZGluZyxyb2RlLHJvZGVudCxyb2Rlbyxyb2RnZSxyb2RoYW0scm9kaW5nLHJvZGxlc3Mscm9kbGV0LHJvZGxpa2Uscm9kbWFuLHJvZG5leSxyb2RzbWFuLHJvZHN0ZXIscm9kd29vZCxyb2Uscm9lYnVjayxyb2VkLHJvZWxpa2Uscm9lcixyb2V5LHJvZyxyb2dhbixyb2dlcixyb2dnbGUscm9ndWUscm9ndWVyeSxyb2d1aW5nLHJvZ3Vpc2gscm9oYW4scm9ob2Iscm9odW4scm9odW5hLHJvaSxyb2lkLHJvaWwscm9pbHkscm9pc3Rlcixyb2l0LHJva2Escm9rZSxyb2tlYWdlLHJva2VlLHJva2VsYXkscm9rZXIscm9rZXkscm9reSxyb2xlLHJvbGVvLHJvbGwscm9sbGVkLHJvbGxlcixyb2xsZXkscm9sbGljayxyb2xsaW5nLHJvbGxpeCxyb2xsbW9wLHJvbGxvY2sscm9sbHdheSxyb2xvd2F5LHJvbWFpa2Escm9tYWluZSxyb21hbCxyb21hbmNlLHJvbWFuY3kscm9tYW56YSxyb21hdW50LHJvbWJvcyxyb21laXRlLHJvbWVybyxyb21tYWNrLHJvbXAscm9tcGVyLHJvbXBpbmcscm9tcGlzaCxyb21wdSxyb21weSxyb25jZXQscm9uY28scm9uZCxyb25kZSxyb25kZWF1LHJvbmRlbCxyb25kaW5vLHJvbmRsZSxyb25kbyxyb25kdXJlLHJvbmUscm9uZ2V1cixyb25xdWlsLHJvbnRnZW4scm9ueW9uLHJvb2Qscm9vZGxlLHJvb2Yscm9vZmFnZSxyb29mZXIscm9vZmluZyxyb29mbGV0LHJvb2ZtYW4scm9vZnkscm9vaWJvayxyb29pbmVrLHJvb2sscm9va2VyLHJvb2tlcnkscm9va2llLHJvb2tpc2gscm9va2xldCxyb29reSxyb29sLHJvb20scm9vbWFnZSxyb29tZWQscm9vbWVyLHJvb21mdWwscm9vbWllLHJvb21pbHkscm9vbWxldCxyb29tdGgscm9vbXRoeSxyb29teSxyb29uLHJvb3NhLHJvb3N0LHJvb3N0ZWQscm9vc3Rlcixyb290LHJvb3RhZ2Uscm9vdGNhcCxyb290ZWQscm9vdGVyLHJvb3Rlcnkscm9vdGxlLHJvb3RsZXQscm9vdHkscm9vdmUscm9wYWJsZSxyb3BlLHJvcGVtYW4scm9wZXIscm9wZXJ5LHJvcGVzLHJvcGV3YXkscm9waWx5LHJvcGluZyxyb3Bpc2gscm9wcCxyb3B5LHJvcXVlLHJvcXVlcixyb3F1ZXQscm9xdWlzdCxyb3JhbCxyb3JpYyxyb3JxdWFsLHJvcnR5LHJvcnkscm9zYWwscm9zYXJpbyxyb3Nhcnkscm9zYXRlZCxyb3NjaWQscm9zZSxyb3NlYWwscm9zZWF0ZSxyb3NlYmF5LHJvc2VidWQscm9zZWQscm9zZWluZSxyb3NlbCxyb3NlbGV0LHJvc2VsbGEscm9zZWxsZSxyb3Nlb2xhLHJvc2VvdXMscm9zZXJ5LHJvc2V0LHJvc2V0YW4scm9zZXR0ZSxyb3NldHR5LHJvc2V0dW0scm9zZXR5LHJvc2llZCxyb3NpZXIscm9zaWxsYSxyb3NpbGxvLHJvc2lseSxyb3Npbixyb3Npbnkscm9zbGFuZCxyb3NvbGkscm9zb2xpYyxyb3NvbGlvLHJvc3Mscm9zc2VyLHJvc3NpdGUscm9zdGVsLHJvc3Rlcixyb3N0cmEscm9zdHJhbCxyb3N0cnVtLHJvc3VsYXIscm9zeSxyb3Qscm90YSxyb3RhbCxyb3RhbWFuLHJvdGFuLHJvdGFuZyxyb3Rhcnkscm90YXRlLHJvdGF0ZWQscm90YXRvcixyb3RjaCxyb3RlLHJvdGVsbGEscm90ZXIscm90Z2Uscm90Z3V0LHJvdGhlcixyb3RpZmVyLHJvdG8scm90b3Iscm90dGFuLHJvdHRlbixyb3R0ZXIscm90dGluZyxyb3R0bGUscm90dG9jayxyb3R0b2xvLHJvdHVsYSxyb3R1bGFkLHJvdHVsYXIscm90dWxldCxyb3R1bHVzLHJvdHVuZCxyb3R1bmRhLHJvdHVuZG8scm91Yixyb3Vjb3Uscm91ZCxyb3VlLHJvdWVsbGUscm91Z2Uscm91Z2VhdSxyb3VnZW90LHJvdWdoLHJvdWdoZW4scm91Z2hlcixyb3VnaGV0LHJvdWdoaWUscm91Z2hseSxyb3VnaHkscm91Z3kscm91aWxsZSxyb3VreSxyb3VsYWRlLHJvdWxlYXUscm91bixyb3VuY2Uscm91bmN5LHJvdW5kLHJvdW5kZWQscm91bmRlbCxyb3VuZGVyLHJvdW5kbHkscm91bmR1cCxyb3VuZHkscm91cCxyb3VwZXIscm91cGV0LHJvdXBpbHkscm91cGl0LHJvdXB5LHJvdXNlLHJvdXNlcixyb3VzaW5nLHJvdXN0LHJvdXN0ZXIscm91dCxyb3V0ZSxyb3V0ZXIscm91dGgscm91dGhpZSxyb3V0aHkscm91dGluZSxyb3V0aW5nLHJvdXRvdXMscm92ZSxyb3Zlcixyb3ZldCxyb3ZldHRvLHJvdmluZyxyb3cscm93YWJsZSxyb3dhbixyb3dib2F0LHJvd2RpbHkscm93ZHkscm93ZWQscm93ZWwscm93ZW4scm93ZXIscm93ZXQscm93aW5nLHJvd2xldCxyb3dsb2NrLHJvd3BvcnQscm93dHkscm93eSxyb3gscm94eSxyb3lhbCxyb3lhbGUscm95YWxldCxyb3lhbGx5LHJveWFsdHkscm95ZXQscm95dCxyb3p1bSxydWFjaCxydWFuYSxydWIscnViYXNzZSxydWJhdG8scnViYmVkLHJ1YmJlcixydWJiZXJzLHJ1YmJlcnkscnViYmluZyxydWJiaXNoLHJ1YmJsZSxydWJibGVyLHJ1YmJseSxydWJkb3duLHJ1YmVsZXQscnViZWxsYSxydWJlbGxlLHJ1YmVvbGEscnViaWF0ZSxydWJpY2FuLHJ1YmlkaWMscnViaWVkLHJ1YmlmaWMscnViaWZ5LHJ1YmluZSxydWJpb3VzLHJ1YmxlLHJ1YmxpcyxydWJvcixydWJyaWMscnVicmljYSxydWJyaWZ5LHJ1YnkscnVjaGUscnVjaGluZyxydWNrLHJ1Y2tlcixydWNrbGUscnVja3NleSxydWNrdXMscnVja3kscnVjdGlvbixydWQscnVkYXMscnVkZCxydWRkZXIscnVkZGllZCxydWRkaWx5LHJ1ZGRsZSxydWRkb2NrLHJ1ZGR5LHJ1ZGUscnVkZWx5LHJ1ZGVyYWwscnVkZXNieSxydWRnZSxydWRpc2gscnVkaXR5LHJ1ZSxydWVmdWwscnVlbGlrZSxydWVsbGUscnVlbixydWVyLHJ1ZXNvbWUscnVld29ydCxydWZmLHJ1ZmZlZCxydWZmZXIscnVmZmlhbixydWZmaW4scnVmZmxlLHJ1ZmZsZWQscnVmZmxlcixydWZmbHkscnVmb3VzLHJ1ZnRlcixydWZ1cyxydWcscnVnYSxydWdhdGUscnVnZ2VkLHJ1Z2dpbmcscnVnZ2xlLHJ1Z2d5LHJ1Z2xpa2UscnVnb3NhLHJ1Z29zZSxydWdvdXMscnVpbixydWluYXRlLHJ1aW5lZCxydWluZXIscnVpbmcscnVpbm91cyxydWtoLHJ1bGFibGUscnVsZSxydWxlZG9tLHJ1bGVyLHJ1bGluZyxydWxsLHJ1bGxlcixydWxsaW9uLHJ1bSxydW1hbCxydW1ibGUscnVtYmxlcixydW1ibHkscnVtYm8scnVtZW4scnVtaW5hbCxydW1raW4scnVtbGVzcyxydW1seSxydW1tYWdlLHJ1bW1hZ3kscnVtbWVyLHJ1bW1pbHkscnVtbWlzaCxydW1teSxydW1uZXNzLHJ1bW5leSxydW1vcixydW1vcmVyLHJ1bXAscnVtcGFkLHJ1bXBhZGUscnVtcGxlLHJ1bXBseSxydW1wdXMscnVtc2hvcCxydW4scnVuYXdheSxydW5iYWNrLHJ1bmJ5LHJ1bmNoLHJ1bmRhbGUscnVuZGxlLHJ1bmRsZXQscnVuZSxydW5lZCxydW5lcixydW5maXNoLHJ1bmcscnVuaWMscnVuaXRlLHJ1bmtsZSxydW5rbHkscnVubGVzcyxydW5sZXQscnVubWFuLHJ1bm5lbCxydW5uZXIscnVubmV0LHJ1bm5pbmcscnVubnkscnVub2ZmLHJ1bm91dCxydW5vdmVyLHJ1bnJpZyxydW50LHJ1bnRlZCxydW50ZWUscnVudGlzaCxydW50eSxydW53YXkscnVwYSxydXBlZSxydXBpYSxydXBpYWgscnVwaWFsLHJ1cGllLHJ1cGl0aWMscnVwdGlsZSxydXB0aW9uLHJ1cHRpdmUscnVwdHVyZSxydXJhbCxydXJhbGx5LHJ1cmJhbixydXJ1LHJ1c2UscnVzaCxydXNoZWQscnVzaGVuLHJ1c2hlcixydXNoaW5nLHJ1c2hsaXQscnVzaHkscnVzaW5lLHJ1c2sscnVza2luLHJ1c2t5LHJ1c21hLHJ1c290LHJ1c3BvbmUscnVzc2VsLHJ1c3NldCxydXNzZXR5LHJ1c3NpYSxydXNzdWQscnVzdCxydXN0ZnVsLHJ1c3RpYyxydXN0aWx5LHJ1c3RsZSxydXN0bGVyLHJ1c3RseSxydXN0cmUscnVzdHJlZCxydXN0eSxydXN3dXQscnV0LHJ1dGF0ZSxydXRjaCxydXRoLHJ1dGhlcixydXRoZnVsLHJ1dGljLHJ1dGlsZSxydXRpbixydXR0ZWUscnV0dGVyLHJ1dHRpc2gscnV0dHkscnV0eWwscnV2aWQscnV4LHJ5YWwscnlhbmlhLHJ5YmF0LHJ5ZGVyLHJ5ZSxyeWVuLHJ5bWUscnluZCxyeW50LHJ5b3QscnlvdHdhcixyeXBlLHJ5cGVjayxzLHNhLHNhYSxzYWIsc2FiYWxvLHNhYmFudXQsc2FiYmF0LHNhYmJhdGgsc2FiZSxzYWJlY2Esc2FiZWxsYSxzYWJlcixzYWJlcmVkLHNhYmljdSxzYWJpbmEsc2FiaW5lLHNhYmlubyxzYWJsZSxzYWJseSxzYWJvcmEsc2Fib3Qsc2Fib3RlZCxzYWJyYSxzYWJ1bHVtLHNhYnVycmEsc2FidXRhbixzYWJ6aSxzYWMsc2FjYXRvbixzYWNhdHJhLHNhY2NhZGUsc2FjY2F0ZSxzYWNjb3Msc2FjY3VsZSxzYWNjdXMsc2FjaGVtLHNhY2hldCxzYWNrLHNhY2thZ2Usc2Fja2JhZyxzYWNrYnV0LHNhY2tlZCxzYWNrZW4sc2Fja2VyLHNhY2tmdWwsc2Fja2luZyxzYWNrbWFuLHNhY2xpa2Usc2FjbyxzYWNvcGUsc2FjcXVlLHNhY3JhLHNhY3JhZCxzYWNyYWwsc2FjcmVkLHNhY3Jpbmcsc2FjcmlzdCxzYWNybyxzYWNydW0sc2FkLHNhZGRlbixzYWRkaWssc2FkZGlzaCxzYWRkbGUsc2FkZGxlZCxzYWRkbGVyLHNhZGUsc2FkaCxzYWRoZSxzYWRodSxzYWRpYyxzYWRpcm9uLHNhZGlzbSxzYWRpc3Qsc2FkbHksc2FkbmVzcyxzYWRvLHNhZHIsc2FlY3VsYSxzYWV0ZXIsc2FldW1lLHNhZmFyaSxzYWZlLHNhZmVseSxzYWZlbixzYWZlbmVyLHNhZmV0eSxzYWZmaWFuLHNhZmZsb3Isc2FmZmxvdyxzYWZmcm9uLHNhZnJvbGUsc2FmdCxzYWcsc2FnYSxzYWdhaWUsc2FnYW1hbixzYWdhdGh5LHNhZ2Usc2FnZWx5LHNhZ2VuZSxzYWdnZXIsc2FnZ2luZyxzYWdnb24sc2FnZ3ksc2FnaW5nLHNhZ2l0dGEsc2FnbGVzcyxzYWdvLHNhZ29pbixzYWd1YXJvLHNhZ3VtLHNhZ3VyYW4sc2Fnd2lyZSxzYWd5LHNhaCxzYWhoLHNhaGliLHNhaG1lLHNhaHVrYXIsc2FpLHNhaWMsc2FpZCxzYWlnYSxzYWlsLHNhaWxhZ2Usc2FpbGVkLHNhaWxlcixzYWlsaW5nLHNhaWxvcixzYWlseSxzYWltLHNhaW1pcmksc2FpbXksc2FpbixzYWludCxzYWludGVkLHNhaW50bHksc2FpcCxzYWlyLHNhaXJseSxzYWlydmUsc2Fpcnksc2FpdGhlLHNhaixzYWpvdSxzYWtlLHNha2ViZXIsc2FrZWVuLHNha2VyLHNha2VyZXQsc2FraSxzYWtpZWgsc2FrdWx5YSxzYWwsc2FsYWFtLHNhbGFibGUsc2FsYWJseSxzYWxhY290LHNhbGFkLHNhbGFnbyxzYWxhbCxzYWxhbW8sc2FsYXIsc2FsYXJ5LHNhbGF0LHNhbGF5LHNhbGUsc2FsZWxlLHNhbGVtYSxzYWxlcCxzYWxmZXJuLHNhbGljLHNhbGljaW4sc2FsaWN5bCxzYWxpZW50LHNhbGlmeSxzYWxpZ290LHNhbGluYSxzYWxpbmUsc2FsaXRlLHNhbGl0ZWQsc2FsaXZhLHNhbGl2YWwsc2FsaXgsc2FsbGUsc2FsbGVlLHNhbGxldCxzYWxsaWVyLHNhbGxvbyxzYWxsb3csc2FsbG93eSxzYWxseSxzYWxtYSxzYWxtaWFjLHNhbG1pbmUsc2FsbWlzLHNhbG1vbixzYWxvbCxzYWxvbW9uLHNhbG9uLHNhbG9vbixzYWxvb3Asc2FscCxzYWxwYSxzYWxwaWFuLHNhbHBpbngsc2FscG9pZCxzYWxzZSxzYWxzaWZ5LHNhbHQsc2FsdGEsc2FsdGFudCxzYWx0YXJ5LHNhbHRhdGUsc2FsdGNhdCxzYWx0ZWQsc2FsdGVlLHNhbHRlbixzYWx0ZXIsc2FsdGVybixzYWx0ZXJ5LHNhbHRmYXQsc2FsdGllcixzYWx0aW5lLHNhbHRpbmcsc2FsdGlzaCxzYWx0bHksc2FsdG1hbixzYWx0cGFuLHNhbHR1cyxzYWx0eSxzYWx1a2ksc2FsdW5nLHNhbHV0ZSxzYWx1dGVyLHNhbHZhZ2Usc2FsdmUsc2FsdmVyLHNhbHZpb2wsc2Fsdm8sc2Fsdm9yLHNhbHZ5LHNhbSxzYW1hZGgsc2FtYWRoaSxzYW1haixzYW1hbixzYW1hcmEsc2FtYXJpYSxzYW1hcnJhLHNhbWJhLHNhbWJhbCxzYW1iYXIsc2FtYm8sc2FtYnVrLHNhbWJ1a2Usc2FtZSxzYW1la2gsc2FtZWwsc2FtZWx5LHNhbWVuLHNhbWgsc2FtaGl0YSxzYW1pZWwsc2FtaXJpLHNhbWlzZW4sc2FtaXRlLHNhbWthcmEsc2FtbGV0LHNhbW1lbCxzYW1tZXIsc2FtbWllcixzYW1teSxzYW1vdmFyLHNhbXAsc2FtcGFuLHNhbXBpLHNhbXBsZSxzYW1wbGVyLHNhbXNhcmEsc2Ftc2h1LHNhbXNvbixzYW11cmFpLHNhbixzYW5hYmxlLHNhbmFpLHNhbmNobyxzYW5jdCxzYW5jdGEsc2FuY3R1bSxzYW5kLHNhbmRhayxzYW5kYWwsc2FuZGFuLHNhbmRiYWcsc2FuZGJpbixzYW5kYm94LHNhbmRib3ksc2FuZGJ1cixzYW5kZWQsc2FuZGVyLHNhbmRlcnMsc2FuZGhpLHNhbmRpbmcsc2FuZGl4LHNhbmRtYW4sc2FuZHVzdCxzYW5keSxzYW5lLHNhbmVseSxzYW5nLHNhbmdhLHNhbmdhcixzYW5nZWksc2FuZ2VyLHNhbmdoYSxzYW5nbGV5LHNhbmdyZWwsc2FuZ3N1ZSxzYW5pY2xlLHNhbmllcyxzYW5pZnksc2FuaW91cyxzYW5pdHksc2FuamFrLHNhbmssc2Fua2hhLHNhbm51cCxzYW5zLHNhbnNlaSxzYW5zaSxzYW50LHNhbnRhbCxzYW50ZW5lLHNhbnRpbWksc2FudGltcyxzYW50aXIsc2FudG9uLHNhbyxzYXAsc2FwYSxzYXBham91LHNhcGFuLHNhcGJ1c2gsc2FwZWssc2FwZnVsLHNhcGhlYWQsc2FwaGVuYSxzYXBoaWUsc2FwaWQsc2FwaWVudCxzYXBpbixzYXBpbmRhLHNhcGxlLHNhcGxlc3Msc2FwbGluZyxzYXBvLHNhcG9uaW4sc2Fwb3Isc2Fwb3RhLHNhcG90ZSxzYXBwYXJlLHNhcHBlcixzYXBwaGljLHNhcHBpbmcsc2FwcGxlcyxzYXBweSxzYXByaW5lLHNhcHNhZ28sc2Fwc3VjayxzYXB3b29kLHNhcHdvcnQsc2FyLHNhcmFhZCxzYXJhZixzYXJhbmdpLHNhcmNhc20sc2FyY2FzdCxzYXJjaW5lLHNhcmNsZSxzYXJjbGVyLHNhcmNvZGUsc2FyY29pZCxzYXJjb21hLHNhcmNvdXMsc2FyZCxzYXJkZWwsc2FyZGluZSxzYXJkaXVzLHNhcmUsc2FyZ28sc2FyZ3VzLHNhcmksc2FyaWYsc2FyaWd1ZSxzYXJpbmRhLHNhcmlwLHNhcmssc2Fya2FyLHNhcmtmdWwsc2Fya2luZSxzYXJraW5nLHNhcmtpdCxzYXJsYWssc2FybHlrLHNhcm1lbnQsc2FybmEsc2Fyb2Qsc2Fyb24sc2Fyb25nLHNhcm9uaWMsc2Fyb3Msc2FycGxlcixzYXJwbyxzYXJyYSxzYXJyYWYsc2Fyc2Esc2Fyc2VuLHNhcnQsc2FydGFnZSxzYXJ0YWluLHNhcnRvcixzYXJ1cyxzYXJ3YW4sc2FzYSxzYXNhbixzYXNhbmksc2FzaCxzYXNoYXksc2FzaGVyeSxzYXNoaW5nLHNhc2luLHNhc2luZSxzYXNzYWJ5LHNhc3N5LHNhdCxzYXRhYmxlLHNhdGFuLHNhdGFuZyxzYXRhbmljLHNhdGFyYSxzYXRjaGVsLHNhdGUsc2F0ZWVuLHNhdGlhdGUsc2F0aWVudCxzYXRpZXR5LHNhdGluLHNhdGluZSxzYXRpbmVkLHNhdGlueSxzYXRpcmUsc2F0aXJpYyxzYXRpc2Z5LHNhdGxpamssc2F0cmFwLHNhdHJhcHksc2F0cm9uLHNhdHRsZSxzYXR0dmEsc2F0dXJhLHNhdHlyLHNhdHlyaWMsc2F1Y2Usc2F1Y2VyLHNhdWNpbHksc2F1Y3ksc2F1ZixzYXVnZXIsc2F1Z2gsc2F1Z2hlbixzYXVsZCxzYXVsaWUsc2F1bHQsc2F1bHRlcixzYXVtLHNhdW1vbixzYXVtb250LHNhdW5hLHNhdW50ZXIsc2F1cXVpLHNhdXIsc2F1cmVsLHNhdXJpYW4sc2F1cnksc2F1c2FnZSxzYXV0LHNhdXRlLHNhdXRldXIsc2F1dHksc2F1dmUsc2F2YWJsZSxzYXZhY3Usc2F2YWdlLHNhdmFubmEsc2F2YW50LHNhdmFyaW4sc2F2ZSxzYXZlZCxzYXZlbG95LHNhdmVyLHNhdmluLHNhdmluZyxzYXZpb3Isc2F2b2xhLHNhdm9yLHNhdm9yZWQsc2F2b3JlcixzYXZvcnksc2F2b3VyLHNhdm95LHNhdm95ZWQsc2F2c3NhdCxzYXZ2eSxzYXcsc2F3YWgsc2F3YWxpLHNhd2FycmEsc2F3YmFjayxzYXdiaWxsLHNhd2J1Y2ssc2F3YndhLHNhd2RlcixzYXdkdXN0LHNhd2VkLHNhd2VyLHNhd2Zpc2gsc2F3Zmx5LHNhd2luZyxzYXdpc2gsc2F3bGlrZSxzYXdtYW4sc2F3bWlsbCxzYXdtb24sc2F3bW9udCxzYXduLHNhd25leSxzYXd0LHNhd3dheSxzYXd3b3J0LHNhd3llcixzYXgsc2F4aG9ybixzYXh0ZW4sc2F4dGllLHNheHR1YmEsc2F5LHNheWEsc2F5YWJsZSxzYXllcixzYXlldHRlLHNheWlkLHNheWluZyxzYXplbixzYmxvb2Qsc2NhYixzY2FiYmVkLHNjYWJibGUsc2NhYmJ5LHNjYWJpZCxzY2FiaWVzLHNjYWJpc2gsc2NhYnJpZCxzY2FkLHNjYWRkbGUsc2NhZHMsc2NhZmYsc2NhZmZlcixzY2FmZmllLHNjYWZmbGUsc2NhZ2xpYSxzY2FsYSxzY2FsYWdlLHNjYWxhcixzY2FsYXJlLHNjYWxkLHNjYWxkZWQsc2NhbGRlcixzY2FsZGljLHNjYWxkeSxzY2FsZSxzY2FsZWQsc2NhbGVuYSxzY2FsZW5lLHNjYWxlcixzY2FsZXMsc2NhbGluZyxzY2FsbCxzY2FsbGVkLHNjYWxsb20sc2NhbGxvcCxzY2FsbWEsc2NhbG9uaSxzY2FscCxzY2FscGVsLHNjYWxwZXIsc2NhbHQsc2NhbHksc2NhbSxzY2FtYmxlLHNjYW1lbGwsc2NhbWxlcixzY2FtbGVzLHNjYW1wLHNjYW1wZXIsc2NhbixzY2FuZGFsLHNjYW5kaWEsc2NhbmRpYyxzY2FubWFnLHNjYW5uZXIsc2NhbnQsc2NhbnRsZSxzY2FudGx5LHNjYW50eSxzY2FwLHNjYXBlLHNjYXBlbCxzY2FwaGEsc2NhcG9pZCxzY2Fwb3NlLHNjYXBwbGUsc2NhcHVsYSxzY2FwdXMsc2NhcixzY2FyYWIsc2NhcmNlLHNjYXJjZW4sc2NhcmUsc2NhcmVyLHNjYXJmLHNjYXJmZWQsc2NhcmZlcixzY2FyZnksc2NhcmlkLHNjYXJpZnksc2NhcmlseSxzY2FybGV0LHNjYXJtYW4sc2Nhcm4sc2Nhcm9pZCxzY2FycCxzY2FycmVkLHNjYXJyZXIsc2NhcnJ5LHNjYXJ0LHNjYXJ0aCxzY2FydXMsc2NhcnZlZCxzY2FyeSxzY2FzZSxzY2FzZWx5LHNjYXQsc2NhdGNoLHNjYXRoZSxzY2F0dGVyLHNjYXR0eSxzY2F0dWxhLHNjYXVsLHNjYXVtLHNjYXVwLHNjYXVwZXIsc2NhdXIsc2NhdXJpZSxzY2F1dCxzY2F2YWdlLHNjYXZlbCxzY2F3LHNjYXdkLHNjYXdsLHNjYXpvbixzY2VhdCxzY2VuYSxzY2VuYXJ5LHNjZW5kLHNjZW5lLHNjZW5lcnksc2NlbmljLHNjZW5pc3Qsc2Nlbml0ZSxzY2VudCxzY2VudGVkLHNjZW50ZXIsc2NlcHNpcyxzY2VwdGVyLHNjZXB0aWMsc2NlcHRyeSxzY2VybmUsc2NoYW56LHNjaGFwcGUsc2NoYXJmLHNjaGVsbHksc2NoZW1hLHNjaGVtZSxzY2hlbWVyLHNjaGVteSxzY2hlbmUsc2NoZXBlbCxzY2hlcGVuLHNjaGVybSxzY2hlcnppLHNjaGVyem8sc2NoZXNpcyxzY2hpc20sc2NoaXNtYSxzY2hpc3Qsc2NobG9vcCxzY2htZWx6LHNjaG8sc2Nob2xhLHNjaG9sYWUsc2Nob2xhcixzY2hvbGlhLHNjaG9uZSxzY2hvb2wsc2Nob29uLHNjaG9ybCxzY2hvcmx5LHNjaG91dCxzY2h0b2ZmLHNjaHVoLHNjaHVoZSxzY2h1aXQsc2NodWxlLHNjaHVzcyxzY2h1dGUsc2Nod2Esc2Nod2FyeixzY2lhcG9kLHNjaWFyaWQsc2NpYXRpYyxzY2liaWxlLHNjaWVuY2Usc2NpZW50LHNjaW5jaWQsc2NpbmQsc2NpbmlwaCxzY2ludGxlLHNjaW9uLHNjaW91cyxzY2lycmhpLHNjaXNzZWwsc2Npc3NvcixzY2l1cmlkLHNjbGFmZixzY2xhdGUsc2NsYXRlcixzY2xhdyxzY2xlcixzY2xlcmEsc2NsZXJhbCxzY2xlcmUsc2NsaWZmLHNjbGltLHNjbGltYixzY29hZCxzY29iLHNjb2JieSxzY29icyxzY29mZixzY29mZmVyLHNjb2csc2NvZ2dhbixzY29nZ2VyLHNjb2dnaW4sc2Nva2Usc2NvbGIsc2NvbGQsc2NvbGRlcixzY29sZXgsc2NvbGlhLHNjb2xpaWQsc2NvbGlvbixzY29saXRlLHNjb2xsb3Asc2NvbG9nLHNjb25jZSxzY29uY2VyLHNjb25lLHNjb29uLHNjb29wLHNjb29wZWQsc2Nvb3BlcixzY29vdCxzY29vdGVyLHNjb3BhLHNjb3BhdGUsc2NvcGUsc2NvcGV0LHNjb3BpYyxzY29waW5lLHNjb3BvbGEsc2NvcHMsc2NvcHVsYSxzY29yY2gsc2NvcmUsc2NvcmVkLHNjb3JlcixzY29yaWEsc2NvcmlhYyxzY29yaWFlLHNjb3JpZnksc2NvcmluZyxzY29ybixzY29ybmVkLHNjb3JuZXIsc2Nvcm55LHNjb3JwZXIsc2NvcnNlLHNjb3Qsc2NvdGFsZSxzY290Y2gsc2NvdGUsc2NvdGVyLHNjb3RpYSxzY290aW5vLHNjb3RvbWEsc2NvdG9teSxzY291Y2gsc2NvdWssc2NvdXAsc2NvdXIsc2NvdXJlZCxzY291cmVyLHNjb3VyZ2Usc2NvdXJ5LHNjb3VzZSxzY291dCxzY291dGVyLHNjb3V0aCxzY292ZSxzY292ZWwsc2Nvdnksc2NvdyxzY293ZGVyLHNjb3dsLHNjb3dsZXIsc2Nvd21hbixzY3JhYixzY3JhYmUsc2NyYWUsc2NyYWcsc2NyYWdneSxzY3JhaWx5LHNjcmFtLHNjcmFuLHNjcmFuY2gsc2NyYW5rLHNjcmFua3ksc2NyYW5ueSxzY3JhcCxzY3JhcGUsc2NyYXBlZCxzY3JhcGVyLHNjcmFwaWUsc2NyYXBweSxzY3JhcHksc2NyYXQsc2NyYXRjaCxzY3JhdGgsc2NyYXVjaCxzY3JhdyxzY3Jhd2ssc2NyYXdsLHNjcmF3bHksc2NyYXdtLHNjcmF3bnksc2NyYXksc2NyYXplLHNjcmVhayxzY3JlYWt5LHNjcmVhbSxzY3JlYW15LHNjcmVlLHNjcmVlY2gsc2NyZWVkLHNjcmVlayxzY3JlZWwsc2NyZWVuLHNjcmVlbnksc2NyZWV0LHNjcmVldmUsc2NyZWljaCxzY3JlaWdoLHNjcmV2ZSxzY3JldmVyLHNjcmV3LHNjcmV3ZWQsc2NyZXdlcixzY3Jld3ksc2NyaWJhbCxzY3JpYmUsc2NyaWJlcixzY3JpZGUsc2NyaWV2ZSxzY3Jpa2Usc2NyaW0sc2NyaW1lLHNjcmltZXIsc2NyaW1wLHNjcmltcHksc2NyaW4sc2NyaW5jaCxzY3JpbmUsc2NyaW5nZSxzY3JpcCxzY3JpcGVlLHNjcmlwdCxzY3JpdGNoLHNjcml2ZSxzY3JpdmVuLHNjcml2ZXIsc2Nyb2Isc2Nyb2JlLHNjcm9iaXMsc2Nyb2Qsc2Nyb2ZmLHNjcm9nLHNjcm9nZ3ksc2Nyb2xhcixzY3JvbGwsc2Nyb2xseSxzY3JvbyxzY3Jvb2NoLHNjcm9vZ2Usc2Nyb29wLHNjcm90YSxzY3JvdGFsLHNjcm90dW0sc2Nyb3VnZSxzY3JvdXQsc2Nyb3csc2Nyb3lsZSxzY3J1YixzY3J1YmJ5LHNjcnVmLHNjcnVmZixzY3J1ZmZ5LHNjcnVmdCxzY3J1bSxzY3J1bXAsc2NydW5jaCxzY3J1bmdlLHNjcnVudCxzY3J1cGxlLHNjcnVzaCxzY3J1dG8sc2NydXplLHNjcnksc2NyeWVyLHNjdWQsc2N1ZGRlcixzY3VkZGxlLHNjdWRkeSxzY3VkaSxzY3VkbGVyLHNjdWRvLHNjdWZmLHNjdWZmZWQsc2N1ZmZlcixzY3VmZmxlLHNjdWZmbHksc2N1ZmZ5LHNjdWZ0LHNjdWZ0ZXIsc2N1ZyxzY3VsY2gsc2N1bGwsc2N1bGxlcixzY3VsbG9nLHNjdWxwLHNjdWxwZXIsc2N1bHBpbixzY3VscHQsc2N1bHNoLHNjdW0sc2N1bWJlcixzY3VtYmxlLHNjdW1tZWQsc2N1bW1lcixzY3VtbXksc2N1bixzY3VuZGVyLHNjdW5uZXIsc2N1cCxzY3VwZnVsLHNjdXBwZXIsc2N1cHBldCxzY3VyLHNjdXJkeSxzY3VyZixzY3VyZmVyLHNjdXJmeSxzY3Vycnksc2N1cnZ5LHNjdXNlLHNjdXQsc2N1dGEsc2N1dGFnZSxzY3V0YWwsc2N1dGF0ZSxzY3V0Y2gsc2N1dGUsc2N1dGVsLHNjdXR0ZXIsc2N1dHRsZSxzY3V0dHksc2N1dHVsYSxzY3V0dW0sc2N5YmFsYSxzY3llLHNjeXBoYSxzY3lwaGFlLHNjeXBoaSxzY3lwaG9pLHNjeXBodXMsc2N5dCxzY3l0YWxlLHNjeXRoZSxzZGVhdGgsc2Usc2VhLHNlYWRvZyxzZWFmYXJlLHNlYWZvbGssc2VhZm93bCxzZWFnaXJ0LHNlYWdvZXIsc2VhaCxzZWFrLHNlYWwsc2VhbGFudCxzZWFsY2gsc2VhbGVkLHNlYWxlcixzZWFsZXJ5LHNlYWxlc3Msc2VhbGV0LHNlYWxpa2Usc2VhbGluZSxzZWFsaW5nLHNlYW0sc2VhbWFuLHNlYW1hcmssc2VhbWVkLHNlYW1lcixzZWFtaW5nLHNlYW1sZXQsc2VhbW9zdCxzZWFtcm9nLHNlYW15LHNlYW5jZSxzZWFwb3J0LHNlYXIsc2VhcmNlLHNlYXJjZXIsc2VhcmNoLHNlYXJlZCxzZWFyZXIsc2VhcmluZyxzZWFyeSxzZWFzaWNrLHNlYXNpZGUsc2Vhc29uLHNlYXQsc2VhdGFuZyxzZWF0ZWQsc2VhdGVyLHNlYXRoZSxzZWF0aW5nLHNlYXRyb24sc2VhdmUsc2Vhdnksc2Vhd2FudCxzZWF3YXJkLHNlYXdhcmUsc2Vhd2F5LHNlYXdlZWQsc2Vhd2lmZSxzZWF3b3JuLHNlYXgsc2ViYWNpYyxzZWJhaXQsc2ViYXRlLHNlYmlmaWMsc2ViaWxsYSxzZWJraGEsc2VidW0sc2VidW5keSxzZWMsc2VjYWJsZSxzZWNhbGluLHNlY2FuY3ksc2VjYW50LHNlY2VkZSxzZWNlZGVyLHNlY2VybixzZWNlc2gsc2VjaCxzZWNrLHNlY2x1ZGUsc2VjbHVzZSxzZWNvaG0sc2Vjb25kLHNlY29uZGUsc2Vjb3Msc2VjcGFyLHNlY3F1ZSxzZWNyZSxzZWNyZWN5LHNlY3JldCxzZWNyZXRhLHNlY3JldGUsc2VjcmV0byxzZWN0LHNlY3Rhcnksc2VjdGlsZSxzZWN0aW9uLHNlY3Rpc20sc2VjdGlzdCxzZWN0aXZlLHNlY3RvcixzZWN1bGFyLHNlY3VuZCxzZWN1cmUsc2VjdXJlcixzZWRhbixzZWRhdGUsc2VkZW50LHNlZGdlLHNlZGdlZCxzZWRnaW5nLHNlZGd5LHNlZGlsZSxzZWRpbGlhLHNlZHVjZSxzZWR1Y2VlLHNlZHVjZXIsc2VkdWN0LHNlZHVtLHNlZSxzZWVhYmxlLHNlZWNoLHNlZWQsc2VlZGFnZSxzZWVkYmVkLHNlZWRib3gsc2VlZGVkLHNlZWRlcixzZWVkZnVsLHNlZWRpbHksc2VlZGtpbixzZWVkbGV0LHNlZWRsaXAsc2VlZG1hbixzZWVkeSxzZWVnZSxzZWVpbmcsc2VlayxzZWVrZXIsc2Vla2luZyxzZWVsLHNlZWxmdWwsc2VlbHksc2VlbSxzZWVtZXIsc2VlbWluZyxzZWVtbHksc2VlbixzZWVuaWUsc2VlcCxzZWVwYWdlLHNlZXBlZCxzZWVweSxzZWVyLHNlZXJlc3Msc2VlcnBhdyxzZWVzYXcsc2Vlc2VlLHNlZXRoZSxzZWcsc2VnZ2FyLHNlZ2dhcmQsc2VnZ2VkLHNlZ2dyb20sc2VnbWVudCxzZWdvLHNlZ29sLHNlaWNoZSxzZWlkZWwsc2VpbmUsc2VpbmVyLHNlaXNlLHNlaXNtLHNlaXNtYWwsc2Vpc21pYyxzZWl0LHNlaXR5LHNlaXplLHNlaXplcixzZWl6aW4sc2VpemluZyxzZWl6b3Isc2VpenVyZSxzZWphbnQsc2Vqb2luLHNlanVuY3Qsc2Vrb3Msc2VsYWgsc2VsYW1pbixzZWxkb20sc2VsZG9yLHNlbGUsc2VsZWN0LHNlbGVuaWMsc2VsZixzZWxmZG9tLHNlbGZmdWwsc2VsZmlzaCxzZWxmaXNtLHNlbGZpc3Qsc2VsZmx5LHNlbGlvbixzZWxsLHNlbGxhLHNlbGxhcixzZWxsYXRlLHNlbGxlcixzZWxsaWUsc2VsbGluZyxzZWxsb3V0LHNlbGx5LHNlbHN5bixzZWx0LHNlbHZhLHNlbHZhZ2Usc2VtYXJ1bSxzZW1hdGljLHNlbWJhbGwsc2VtYmxlLHNlbWUsc2VtZWVkLHNlbWVpYSxzZW1laW9uLHNlbWVuLHNlbWVuY2Usc2VtZXNlLHNlbWksc2VtaWFwZSxzZW1pYXJjLHNlbWliYXksc2VtaWMsc2VtaWN1cCxzZW1pZHJ5LHNlbWllZ2csc2VtaWZpYixzZW1pZml0LHNlbWlmeSxzZW1pZ29kLHNlbWlob3Qsc2VtaW5hbCxzZW1pbmFyLHNlbWlvcmIsc2VtaXBlZCxzZW1pcHJvLHNlbWlyYXcsc2VtaXMsc2VtaXRhLHNlbWl0YWUsc2VtaXRhbCxzZW1pdXJuLHNlbW1ldCxzZW1taXQsc2Vtb2xhLHNlbXNlbSxzZW4sc2VuYWl0ZSxzZW5hbSxzZW5hcnksc2VuYXRlLHNlbmF0b3Isc2VuY2Usc2VuY2lvbixzZW5kLHNlbmRhbCxzZW5kZWUsc2VuZGVyLHNlbmRpbmcsc2VuZWdhLHNlbmVnaW4sc2VuZXNjZSxzZW5pbGUsc2VuaW9yLHNlbm5hLHNlbm5ldCxzZW5uaXQsc2Vubml0ZSxzZW5zYSxzZW5zYWwsc2Vuc2F0ZSxzZW5zZSxzZW5zZWQsc2Vuc2lmeSxzZW5zaWxlLHNlbnNpb24sc2Vuc2lzbSxzZW5zaXN0LHNlbnNpdmUsc2Vuc2l6ZSxzZW5zbyxzZW5zb3Isc2Vuc29yeSxzZW5zdWFsLHNlbnN1bSxzZW5zeW5lLHNlbnQsc2VudHJ5LHNlcGFkLHNlcGFsLHNlcGFsZWQsc2VwaGVuLHNlcGlhLHNlcGlhbixzZXBpYXJ5LHNlcGljLHNlcGlvaWQsc2VwaW9uLHNlcGlvc3Qsc2VwaXVtLHNlcG9uZSxzZXBveSxzZXBwdWt1LHNlcHMsc2Vwc2luZSxzZXBzaXMsc2VwdCxzZXB0YSxzZXB0YWwsc2VwdGFuLHNlcHRhbmUsc2VwdGF0ZSxzZXB0YXZlLHNlcHRldCxzZXB0aWMsc2VwdGllcixzZXB0aWxlLHNlcHRpbWUsc2VwdG9pYyxzZXB0b2xlLHNlcHR1bSxzZXB0dW9yLHNlcXVhLHNlcXVlbCxzZXF1ZWxhLHNlcXVlbnQsc2VxdWVzdCxzZXF1aW4sc2VyLHNlcmEsc2VyYWIsc2VyYWdsaSxzZXJhaSxzZXJhaWwsc2VyYWwsc2VyYW5nLHNlcmFwZSxzZXJhcGgsc2VyYXUsc2VyYXcsc2VyY2lhbCxzZXJkYWIsc2VyZSxzZXJlaCxzZXJlbmUsc2VyZixzZXJmYWdlLHNlcmZkb20sc2VyZmlzaCxzZXJmaXNtLHNlcmdlLHNlcmdlcixzZXJnaW5nLHNlcmlhbCxzZXJpYXJ5LHNlcmlhdGUsc2VyaWNlYSxzZXJpY2luLHNlcmllbWEsc2VyaWVzLHNlcmlmLHNlcmlmaWMsc2VyaW4sc2VyaW5lLHNlcmluZ2Esc2VyaW8sc2VyaW91cyxzZXJtZW50LHNlcm1vLHNlcm1vbixzZXJvLHNlcm9saW4sc2Vyb24sc2Vyb29uLHNlcm9vdCxzZXJvcHVzLHNlcm9zYSxzZXJvdXMsc2Vyb3csc2VycGVudCxzZXJwaGlkLHNlcnBpZ28sc2VycHVsYSxzZXJyYSxzZXJyYWdlLHNlcnJhbixzZXJyYW5hLHNlcnJhbm8sc2VycmF0ZSxzZXJyaWVkLHNlcnJ5LHNlcnQsc2VydGEsc2VydHVsZSxzZXJ0dW0sc2VydW0sc2VydW1hbCxzZXJ1dCxzZXJ2YWdlLHNlcnZhbCxzZXJ2YW50LHNlcnZlLHNlcnZlcixzZXJ2ZXJ5LHNlcnZldCxzZXJ2aWNlLHNlcnZpbGUsc2VydmluZyxzZXJ2aXN0LHNlcnZvLHNlc2FtZSxzZXNtYSxzZXNxdWksc2VzcyxzZXNzaWxlLHNlc3Npb24sc2VzdGV0LHNlc3RpLHNlc3RpYWQsc2VzdGluYSxzZXN0aW5lLHNlc3RvbGUsc2VzdHVvcixzZXQsc2V0YSxzZXRhZSxzZXRhbCxzZXRiYWNrLHNldGJvbHQsc2V0ZG93bixzZXRmYXN0LHNldGgsc2V0aGVhZCxzZXRpZXIsc2V0bGluZSxzZXRuZXNzLHNldG9mZixzZXRvbixzZXRvc2Usc2V0b3VzLHNldG91dCxzZXRvdmVyLHNldHNtYW4sc2V0dCxzZXR0ZWUsc2V0dGVyLHNldHRpbmcsc2V0dGxlLHNldHRsZWQsc2V0dGxlcixzZXR0bG9yLHNldHVsYSxzZXR1bGUsc2V0dXAsc2V0d2FsbCxzZXR3aXNlLHNldHdvcmssc2V1Z2gsc2V2ZW4sc2V2ZW5lcixzZXZlbnRoLHNldmVudHksc2V2ZXIsc2V2ZXJhbCxzZXZlcmUsc2V2ZXJlcixzZXZlcnksc2V3LHNld2FibGUsc2V3YWdlLHNld2FuLHNld2VkLHNld2VuLHNld2VyLHNld2VyZWQsc2V3ZXJ5LHNld2luZyxzZXdsZXNzLHNld24sc2V4LHNleGVkLHNleGVybixzZXhmaWQsc2V4Zm9pbCxzZXhob29kLHNleGlmaWQsc2V4aXBlZCxzZXhsZXNzLHNleGxpa2Usc2V4bHksc2V4dCxzZXh0YWluLHNleHRhbixzZXh0YW5zLHNleHRhbnQsc2V4dGFyLHNleHRhcnksc2V4dGVybixzZXh0ZXQsc2V4dGljLHNleHRpbGUsc2V4dG8sc2V4dG9sZSxzZXh0b24sc2V4dHJ5LHNleHR1bGEsc2V4dWFsLHNleHVhbGUsc2V4dW91cyxzZXh5LHNleSxzZm9vdCxzaCxzaGEsc2hhYixzaGFiYXNoLHNoYWJiZWQsc2hhYmJsZSxzaGFiYnksc2hhY2hsZSxzaGFjaGx5LHNoYWNrLHNoYWNrbGUsc2hhY2tseSxzaGFja3ksc2hhZCxzaGFkZSxzaGFkZWQsc2hhZGVyLHNoYWRpbHksc2hhZGluZSxzaGFkaW5nLHNoYWRrYW4sc2hhZG9vZixzaGFkb3csc2hhZG93eSxzaGFkeSxzaGFmZmxlLHNoYWZ0LHNoYWZ0ZWQsc2hhZnRlcixzaGFmdHksc2hhZyxzaGFnYmFnLHNoYWdnZWQsc2hhZ2d5LHNoYWdsZXQsc2hhZ3JhZyxzaGFoLHNoYWhkb20sc2hhaGksc2hhaGluLHNoYWlraCxzaGFpdGFuLHNoYWtlLHNoYWtlbixzaGFrZXIsc2hha2VycyxzaGFraGEsc2hha2lseSxzaGFraW5nLHNoYWtvLHNoYWt0aSxzaGFrdSxzaGFreSxzaGFsZSxzaGFsbCxzaGFsbGFsLHNoYWxsb24sc2hhbGxvcCxzaGFsbG90LHNoYWxsb3csc2hhbGx1LHNoYWxvbSxzaGFsdCxzaGFsd2FyLHNoYWx5LHNoYW0sc2hhbWEsc2hhbWFsLHNoYW1hbG8sc2hhbWFuLHNoYW1iYSxzaGFtYmxlLHNoYW1lLHNoYW1lZCxzaGFtZXIsc2hhbWlyLHNoYW1tZWQsc2hhbW1lcixzaGFtbXksc2hhbXBvbyxzaGFuLHNoYW5kcnksc2hhbmR5LHNoYW5nYW4sc2hhbmssc2hhbmtlZCxzaGFua2VyLHNoYW5uYSxzaGFubnksc2hhbnNhLHNoYW50LHNoYW50eSxzaGFwLHNoYXBlLHNoYXBlZCxzaGFwZWx5LHNoYXBlbixzaGFwZXIsc2hhcGluZyxzaGFwcyxzaGFweSxzaGFyZCxzaGFyZGVkLHNoYXJkeSxzaGFyZSxzaGFyZXIsc2hhcmdhcixzaGFyayxzaGFya3ksc2hhcm4sc2hhcm55LHNoYXJwLHNoYXJwZW4sc2hhcnBlcixzaGFycGllLHNoYXJwbHksc2hhcnBzLHNoYXJweSxzaGFycmFnLHNoYXJyeSxzaGFzdGVyLHNoYXN0cmEsc2hhc3RyaSxzaGF0LHNoYXRhbixzaGF0dGVyLHNoYXVnaCxzaGF1bCxzaGF1cCxzaGF1cmksc2hhdXdlLHNoYXZlLHNoYXZlZCxzaGF2ZWUsc2hhdmVuLHNoYXZlcixzaGF2ZXJ5LHNoYXZpbmcsc2hhdyxzaGF3bCxzaGF3bGVkLHNoYXdtLHNoYXdueSxzaGF3eSxzaGF5LHNoZSxzaGVhLHNoZWFmLHNoZWFmeSxzaGVhbCxzaGVhcixzaGVhcmQsc2hlYXJlcixzaGVhcnMsc2hlYXQsc2hlYXRoLHNoZWF0aGUsc2hlYXRoeSxzaGVhdmUsc2hlYXZlZCxzaGViYW5nLHNoZWJlZW4sc2hlZCxzaGVkZGVkLHNoZWRkZXIsc2hlZGVyLHNoZWRtYW4sc2hlZSxzaGVlbHksc2hlZW4sc2hlZW5seSxzaGVlbnksc2hlZXAsc2hlZXB5LHNoZWVyLHNoZWVyZWQsc2hlZXJseSxzaGVldCxzaGVldGVkLHNoZWV0ZXIsc2hlZXR5LHNoZWlrLHNoZWlrbHksc2hla2VsLHNoZWxhLHNoZWxkLHNoZWxkZXIsc2hlbGYsc2hlbGZ5LHNoZWxsLHNoZWxsYWMsc2hlbGxlZCxzaGVsbGVyLHNoZWxsdW0sc2hlbGx5LHNoZWx0YSxzaGVsdGVyLHNoZWx0eSxzaGVsdmUsc2hlbHZlcixzaGVsdnksc2hlbmQsc2hlbmcsc2hlb2xpYyxzaGVwcGV5LHNoZXIsc2hlcmJldCxzaGVyaWF0LHNoZXJpZixzaGVyaWZhLHNoZXJpZmYsc2hlcmlmaSxzaGVyaWZ5LHNoZXJyeSxzaGV0aCxzaGV1Z2gsc2hldmEsc2hldmVsLHNoZXZyaSxzaGV3YSxzaGV3ZWwsc2hleWxlLHNoaSxzaGliYWgsc2hpYmFyLHNoaWNlLHNoaWNlcixzaGlja2VyLHNoaWRlLHNoaWVkLHNoaWVsLHNoaWVsZCxzaGllcixzaGllcyxzaGllc3Qsc2hpZnQsc2hpZnRlcixzaGlmdHksc2hpZ3JhbSxzaGloLHNoaWthcixzaGlrYXJhLHNoaWthcmksc2hpa2ltaSxzaGlra2VuLHNoaWtvLHNoaWtyYSxzaGlsZixzaGlsZmEsc2hpbGwsc2hpbGxhLHNoaWxsZXQsc2hpbGxvbyxzaGlscGl0LHNoaW0sc2hpbWFsLHNoaW1tZXIsc2hpbW15LHNoaW1vc2Usc2hpbXBlcixzaGluLHNoaW5kaWcsc2hpbmRsZSxzaGluZHksc2hpbmUsc2hpbmVyLHNoaW5nbGUsc2hpbmdseSxzaGluaWx5LHNoaW5pbmcsc2hpbm5lcixzaGlubnksc2hpbnR5LHNoaW55LHNoaW56YSxzaGlwLHNoaXBib3ksc2hpcGZ1bCxzaGlwbGFwLHNoaXBsZXQsc2hpcG1hbixzaGlwcGVkLHNoaXBwZXIsc2hpcHBvLHNoaXBwb24sc2hpcHB5LHNoaXB3YXksc2hpcmUsc2hpcmssc2hpcmtlcixzaGlya3ksc2hpcmwsc2hpcnBpdCxzaGlycixzaGlydCxzaGlydHksc2hpc2gsc2hpc2hhbSxzaGlzbixzaGl0YSxzaGl0aGVyLHNoaXR0YWgsc2hpdHRpbSxzaGl2LHNoaXZlLHNoaXZlcixzaGl2ZXJ5LHNoaXZleSxzaGl2b28sc2hpdnksc2hvLHNob2FkLHNob2FkZXIsc2hvYWwsc2hvYWxlcixzaG9hbHksc2hvYXQsc2hvY2ssc2hvY2tlcixzaG9kLHNob2RkZW4sc2hvZGR5LHNob2RlLHNob2RlcixzaG9lLHNob2Vib3ksc2hvZWluZyxzaG9lbWFuLHNob2VyLHNob2Z1bCxzaG9nLHNob2dhb2wsc2hvZ2dpZSxzaG9nZ2xlLHNob2dnbHksc2hvZ2ksc2hvZ3VuLHNob2hldCxzaG9qaSxzaG9sYSxzaG9sZSxzaG9uZSxzaG9uZWVuLHNob28sc2hvb2Qsc2hvb2ZhLHNob29mbHksc2hvb2ksc2hvb2ssc2hvb2wsc2hvb2xlcixzaG9vcCxzaG9vcixzaG9vdCxzaG9vdGVlLHNob290ZXIsc2hvcCxzaG9wYm95LHNob3BmdWwsc2hvcGhhcixzaG9wbGV0LHNob3BtYW4sc2hvcHBlLHNob3BwZXIsc2hvcHB5LHNob3Esc2hvcixzaG9yYW4sc2hvcmUsc2hvcmVkLHNob3JlcixzaG9yaW5nLHNob3JuLHNob3J0LHNob3J0ZW4sc2hvcnRlcixzaG9ydGx5LHNob3J0cyxzaG90LHNob3RlLHNob3RndW4sc2hvdG1hbixzaG90dCxzaG90dGVkLHNob3R0ZW4sc2hvdHRlcixzaG90dHksc2hvdSxzaG91bGQsc2hvdXQsc2hvdXRlcixzaG92YWwsc2hvdmUsc2hvdmVsLHNob3ZlcixzaG93LHNob3dkb20sc2hvd2VyLHNob3dlcnksc2hvd2lseSxzaG93aW5nLHNob3dpc2gsc2hvd21hbixzaG93bixzaG93dXAsc2hvd3ksc2hveWEsc2hyYWIsc2hyYWRoLHNocmFmLHNocmFnLHNocmFtLHNocmFuayxzaHJhcCxzaHJhdmUsc2hyYXZleSxzaHJlZCxzaHJlZGR5LHNocmVlLHNocmVldmUsc2hyZW5kLHNocmV3LHNocmV3ZCxzaHJld2R5LHNocmV3bHksc2hyaWVrLHNocmlla3ksc2hyaWZ0LHNocmlrZSxzaHJpbGwsc2hyaWxseSxzaHJpbXAsc2hyaW1waSxzaHJpbXB5LHNocmluYWwsc2hyaW5lLHNocmluayxzaHJpbmt5LHNocmlwLHNocml0ZSxzaHJpdmUsc2hyaXZlbCxzaHJpdmVuLHNocml2ZXIsc2hyb2ZmLHNocm9nLHNocm91ZCxzaHJvdWR5LHNocm92ZSxzaHJvdmVyLHNocnViLHNocnViYnksc2hydWZmLHNocnVnLHNocnVuayxzaHJ1cHMsc2h1YmEsc2h1Y2ssc2h1Y2tlcixzaHVja3Msc2h1ZGRlcixzaHVmZixzaHVmZmxlLHNodWcsc2h1bCxzaHVsZXIsc2h1bWFjLHNodW4sc2h1bmUsc2h1bm5lcixzaHVudCxzaHVudGVyLHNodXJlLHNodXJmLHNodXNoLHNodXNoZXIsc2h1dCxzaHV0b2ZmLHNodXRvdXQsc2h1dHRlbixzaHV0dGVyLHNodXR0bGUsc2h5LHNoeWVyLHNoeWlzaCxzaHlseSxzaHluZXNzLHNoeXN0ZXIsc2ksc2lhayxzaWFsLHNpYWxpYyxzaWFsaWQsc2lhbG9pZCxzaWFtYW5nLHNpYixzaWJiZWQsc2liYmVucyxzaWJiZXIsc2liYnksc2liaWx1cyxzaWJsaW5nLHNpYm5lc3Msc2licmVkZSxzaWJzaGlwLHNpYnlsLHNpYnlsaWMsc2lieWxsYSxzaWMsc2ljY2Esc2ljY2FudCxzaWNjYXRlLHNpY2NpdHksc2ljZSxzaWNrLHNpY2tiZWQsc2lja2VuLHNpY2tlcixzaWNraXNoLHNpY2tsZSxzaWNrbGVkLHNpY2tsZXIsc2lja2x5LHNpY3NhYyxzaWN1bGEsc2ljdWxhcixzaWRkZXIsc2lkZHVyLHNpZGUsc2lkZWFnZSxzaWRlYXJtLHNpZGVjYXIsc2lkZWQsc2lkZXIsc2lkZXJhbCxzaWRlcmluLHNpZGVzLHNpZGV3YXksc2lkaGUsc2lkaSxzaWRpbmcsc2lkbGUsc2lkbGVyLHNpZGxpbmcsc2lkdGgsc2lkeSxzaWUsc2llZ2Usc2llZ2VyLHNpZW5uYSxzaWVyLHNpZXJpbmcsc2llcnJhLHNpZXJyYW4sc2llc3RhLHNpZXZlLHNpZXZlcixzaWV2eSxzaWZhYyxzaWZha2Esc2lmZSxzaWZmbGUsc2lmZmxldCxzaWZmbG90LHNpZnQsc2lmdGFnZSxzaWZ0ZWQsc2lmdGVyLHNpZnRpbmcsc2lnLHNpZ2dlcixzaWdoLHNpZ2hlcixzaWdoZnVsLHNpZ2hpbmcsc2lnaHQsc2lnaHRlZCxzaWdodGVuLHNpZ2h0ZXIsc2lnaHRseSxzaWdodHksc2lnaWwsc2lnbGEsc2lnbG9zLHNpZ21hLHNpZ21hdGUsc2lnbW9pZCxzaWduLHNpZ25hbCxzaWduYXJ5LHNpZ25hdGUsc2lnbmVlLHNpZ25lcixzaWduZXQsc2lnbmlmeSxzaWduaW9yLHNpZ25pc3Qsc2lnbm1hbixzaWdub3J5LHNpZ251bSxzaWthLHNpa2FyLHNpa2F0Y2gsc2lrZSxzaWtlcmx5LHNpa2V0LHNpa2hhcmEsc2lraHJhLHNpbCxzaWxhZ2Usc2lsYW5lLHNpbGUsc2lsZW4sc2lsZW5jZSxzaWxlbmN5LHNpbGVuaSxzaWxlbmljLHNpbGVudCxzaWxlbnVzLHNpbGVzaWEsc2lsZXgsc2lsaWNhLHNpbGljYW0sc2lsaWNpYyxzaWxpY2xlLHNpbGljbyxzaWxpY29uLHNpbGljeWwsc2lsaXF1YSxzaWxpcXVlLHNpbGssc2lsa2VkLHNpbGtlbixzaWxrZXIsc2lsa2llLHNpbGtpbHksc2lsa21hbixzaWxreSxzaWxsLHNpbGxhcixzaWxsZXIsc2lsbGlseSxzaWxsb2NrLHNpbGxvbixzaWxseSxzaWxvLHNpbG9pc3Qsc2lscGhpZCxzaWx0LHNpbHRhZ2Usc2lsdGluZyxzaWx0eSxzaWx1cmlkLHNpbHZhLHNpbHZhbixzaWx2ZXIsc2lsdmVybixzaWx2ZXJ5LHNpbHZpY3Msc2lseWwsc2ltYSxzaW1hbCxzaW1hcixzaW1iYWxsLHNpbWJpbCxzaW1ibGluLHNpbWJsb3Qsc2ltZSxzaW1pYWQsc2ltaWFsLHNpbWlhbixzaW1pbGFyLHNpbWlsZSxzaW1pbG9yLHNpbWlvaWQsc2ltaW91cyxzaW1pdHksc2lta2luLHNpbWxpbixzaW1saW5nLHNpbW1lcixzaW1tb24sc2ltbmVsLHNpbW9ueSxzaW1vb2wsc2ltb29tLHNpbW9vbixzaW1vdXMsc2ltcCxzaW1wYWksc2ltcGVyLHNpbXBsZSxzaW1wbGVyLHNpbXBsZXgsc2ltcGx5LHNpbXNpbSxzaW1zb24sc2ltdWxhcixzaW11bGVyLHNpbixzaW5hLHNpbmFpdGUsc2luYWwsc2luYW1heSxzaW5hcGljLHNpbmFwaXMsc2luYXdhLHNpbmNlLHNpbmNlcmUsc2luZCxzaW5kZXIsc2luZGxlLHNpbmRvYyxzaW5kb24sc2luZHJ5LHNpbmUsc2luZXcsc2luZXdlZCxzaW5ld3ksc2luZnVsLHNpbmcsc2luZ2Usc2luZ2VkLHNpbmdlcixzaW5nZXksc2luZ2gsc2luZ2luZyxzaW5nbGUsc2luZ2xlZCxzaW5nbGVyLHNpbmdsZXMsc2luZ2xldCxzaW5nbHksc2luZ3VsdCxzaW5oLHNpbmssc2lua2FnZSxzaW5rZXIsc2lua2luZyxzaW5reSxzaW5sZXNzLHNpbmxpa2Usc2lubmVuLHNpbm5lcixzaW5uZXQsc2lub3BpYSxzaW5vcGxlLHNpbnNpb24sc2luc3luZSxzaW50ZXIsc2ludG9jLHNpbnVhdGUsc2ludW9zZSxzaW51b3VzLHNpbnVzLHNpbnVzYWwsc2lud2FyZCxzaW9sLHNpb24sc2lwLHNpcGFnZSxzaXBlLHNpcGVyLHNpcGhvaWQsc2lwaG9uLHNpcGlkLHNpcGluZyxzaXBsaW5nLHNpcHBlcixzaXBwZXQsc2lwcGlvLHNpcixzaXJjYXIsc2lyZGFyLHNpcmUsc2lyZW4sc2lyZW5lLHNpcmVuaWMsc2lyZW55LHNpcmVzcyxzaXJnYW5nLHNpcmlhbixzaXJpY2lkLHNpcmloLHNpcmlzLHNpcmtlZXIsc2lya2ksc2lya3ksc2lybG9pbixzaXJvYyxzaXJvY2NvLHNpcnBlYSxzaXJwbGUsc2lycG9vbixzaXJyYWgsc2lycmVlLHNpcnNoaXAsc2lydXAsc2lydXBlZCxzaXJ1cGVyLHNpcnVweSxzaXMsc2lzYWwsc2lzZSxzaXNlbCxzaXNoLHNpc2hhbSxzaXNpLHNpc2tpbixzaXNzLHNpc3NpZnksc2lzc29vLHNpc3N5LHNpc3Qsc2lzdGVyLHNpc3Rlcm4sc2lzdGxlLHNpc3RydW0sc2l0LHNpdGFvLHNpdGFyLHNpdGNoLHNpdGUsc2l0ZmFzdCxzaXRoLHNpdGhlLHNpdGhlbnMsc2l0aWVudCxzaXRpbyxzaXR0ZWUsc2l0dGVuLHNpdHRlcixzaXR0aW5lLHNpdHRpbmcsc2l0dWFsLHNpdHVhdGUsc2l0dWxhLHNpdHVsYWUsc2l0dXMsc2l2YSxzaXZlcixzaXZ2ZW5zLHNpd2FzaCxzaXgsc2l4YWluLHNpeGVyLHNpeGZvaWwsc2l4Zm9sZCxzaXhzb21lLHNpeHRlLHNpeHRlZW4sc2l4dGgsc2l4dGhldCxzaXh0aGx5LHNpeHR5LHNpemFibGUsc2l6YWJseSxzaXphbCxzaXphcixzaXplLHNpemVkLHNpemVtYW4sc2l6ZXIsc2l6ZXMsc2l6aW5nLHNpenksc2l6eWdpYSxzaXp6LHNpenphcmQsc2l6emluZyxzaXp6bGUsc2phbWJvayxza2FkZGxlLHNrYWZmLHNrYWZmaWUsc2thZyxza2Fpcixza2FsLHNrYW5jZSxza2FydCxza2FzZWx5LHNrYXQsc2thdGUsc2thdGVyLHNrYXRpa3Usc2thdGluZyxza2F0aXN0LHNrYXRvbGUsc2thdyxza2Vhbixza2VkZ2Usc2tlZSxza2VlZCxza2VlZyxza2VlbCxza2VlbHksc2tlZW4sc2tlZXIsc2tlZXJlZCxza2Vlcnksc2tlZXQsc2tlZXRlcixza2Vleml4LHNrZWcsc2tlZ2dlcixza2VpZixza2VpZ2gsc2tlaWx5LHNrZWluLHNrZWluZXIsc2tlaXBwLHNrZWwsc2tlbGRlcixza2VsZixza2VsaWMsc2tlbGwsc2tlbGxhdCxza2VsbGVyLHNrZWxsdW0sc2tlbGx5LHNrZWxwLHNrZWxwZXIsc2tlbHBpbixza2VsdGVyLHNrZW1tZWwsc2tlbXAsc2tlbixza2VuZSxza2VvLHNrZW91Z2gsc2tlcCxza2VwZnVsLHNrZXB0aWMsc2tlcixza2VyZSxza2VycmV0LHNrZXJyeSxza2V0Y2gsc2tldGNoeSxza2V0ZSxza2V2aXNoLHNrZXcsc2tld2VkLHNrZXdlcixza2V3bCxza2V3bHksc2tld3ksc2tleSxza2ksc2tpYXBvZCxza2liYnksc2tpY2Usc2tpZCxza2lkZGVkLHNraWRkZXIsc2tpZGRvbyxza2lkZHksc2tpZHBhbixza2lkd2F5LHNraWVkLHNraWVwcGUsc2tpZXIsc2tpZXMsc2tpZmYsc2tpZnQsc2tpaW5nLHNraWpvcmUsc2tpbCxza2lsZGVyLHNraWxsLHNraWxsZWQsc2tpbGxldCxza2lsbHksc2tpbHBvdCxza2lsdHMsc2tpbSxza2ltZSxza2ltbWVkLHNraW1tZXIsc2tpbXAsc2tpbXB5LHNraW4sc2tpbmNoLHNraW5mdWwsc2tpbmssc2tpbmtlcixza2lua2xlLHNraW5uZWQsc2tpbm5lcixza2lubnksc2tpcCxza2lwbWFuLHNraXBwZWwsc2tpcHBlcixza2lwcGV0LHNraXBwbGUsc2tpcHB5LHNraXJsLHNraXJwLHNraXJyLHNraXJyZWgsc2tpcnJldCxza2lydCxza2lydGVkLHNraXJ0ZXIsc2tpcnR5LHNraXQsc2tpdGUsc2tpdGVyLHNraXRoZXIsc2tpdHRlcixza2l0dGxlLHNraXR0eSxza2l2LHNraXZlLHNraXZlcixza2l2aW5nLHNrbGF0ZSxza2xhdGVyLHNrbGVudCxza29hbCxza29vLHNrb29rdW0sc2tvcHRzeSxza291dCxza3JhaWdoLHNrcmlrZSxza3J1cHVsLHNrdWEsc2t1bGssc2t1bGtlcixza3VsbCxza3VsbGVkLHNrdWxseSxza3VscCxza3VuLHNrdW5rLHNrdW5reSxza3VzZSxza3ksc2t5YmFsLHNreWV5LHNreWZ1bCxza3lpc2gsc2t5bGFyayxza3lsZXNzLHNreWxpa2Usc2t5bG9vayxza3ltYW4sc2t5cGhvaSxza3lwaG9zLHNreXJlLHNreXNhaWwsc2t5dWdsZSxza3l3YXJkLHNreXdheSxzbGEsc2xhYixzbGFiYmVkLHNsYWJiZXIsc2xhYmJ5LHNsYWJtYW4sc2xhY2ssc2xhY2tlZCxzbGFja2VuLHNsYWNrZXIsc2xhY2tseSxzbGFkLHNsYWRhbmcsc2xhZGUsc2xhZSxzbGFnLHNsYWdnZXIsc2xhZ2d5LHNsYWdtYW4sc2xhaW4sc2xhaW50ZSxzbGFpdCxzbGFrZSxzbGFrZXIsc2xha2luZyxzbGFreSxzbGFtLHNsYW1wLHNsYW5kZXIsc2xhbmUsc2xhbmcsc2xhbmd5LHNsYW5rLHNsYW50LHNsYW50bHksc2xhcCxzbGFwZSxzbGFwcGVyLHNsYXJlLHNsYXJ0LHNsYXJ0aCxzbGFzaCxzbGFzaGVkLHNsYXNoZXIsc2xhc2h5LHNsYXQsc2xhdGNoLHNsYXRlLHNsYXRlcixzbGF0aCxzbGF0aGVyLHNsYXRpZnksc2xhdGluZyxzbGF0aXNoLHNsYXR0ZWQsc2xhdHRlcixzbGF0eSxzbGF1bSxzbGF2ZSxzbGF2ZWQsc2xhdmVyLHNsYXZlcnksc2xhdmV5LHNsYXZpbmcsc2xhdmlzaCxzbGF3LHNsYXksc2xheWVyLHNsYXlpbmcsc2xlYXRoeSxzbGVhdmUsc2xlYXZlZCxzbGVhenksc2xlY2ssc2xlZCxzbGVkZGVkLHNsZWRkZXIsc2xlZGZ1bCxzbGVkZ2Usc2xlZGdlcixzbGVlLHNsZWVjaCxzbGVlY2h5LHNsZWVrLHNsZWVrZW4sc2xlZWtlcixzbGVla2l0LHNsZWVrbHksc2xlZWt5LHNsZWVwLHNsZWVwZXIsc2xlZXByeSxzbGVlcHksc2xlZXIsc2xlZXQsc2xlZXR5LHNsZWV2ZSxzbGVldmVkLHNsZWV2ZXIsc2xlaWdoLHNsZWlnaHQsc2xlbmRlcixzbGVudCxzbGVwZXosc2xlcHQsc2xldGUsc2xldXRoLHNsZXcsc2xld2VkLHNsZXdlcixzbGV3aW5nLHNsZXksc2xleWVyLHNsaWNlLHNsaWNlZCxzbGljZXIsc2xpY2gsc2xpY2h0LHNsaWNpbmcsc2xpY2ssc2xpY2tlbixzbGlja2VyLHNsaWNrbHksc2xpZCxzbGlkYWdlLHNsaWRkZW4sc2xpZGRlcixzbGlkZSxzbGlkZWQsc2xpZGVyLHNsaWRpbmcsc2xpZnRlcixzbGlnaHQsc2xpZ2h0eSxzbGltLHNsaW1lLHNsaW1lcixzbGltaWx5LHNsaW1pc2gsc2xpbWx5LHNsaW1wc3ksc2xpbXN5LHNsaW15LHNsaW5lLHNsaW5nLHNsaW5nZSxzbGluZ2VyLHNsaW5rLHNsaW5rZXIsc2xpbmt5LHNsaXAsc2xpcGUsc2xpcG1hbixzbGlwcGVkLHNsaXBwZXIsc2xpcHB5LHNsaXB3YXksc2xpcnQsc2xpc2gsc2xpdCxzbGl0Y2gsc2xpdGUsc2xpdGhlcixzbGl0aHksc2xpdHRlZCxzbGl0dGVyLHNsaXR0eSxzbGl2ZSxzbGl2ZXIsc2xpdmVyeSxzbGl2aW5nLHNsb2FuLHNsb2Isc2xvYmJlcixzbG9iYnksc2xvY2ssc2xvY2tlbixzbG9kLHNsb2RkZXIsc2xvZGdlLHNsb2RnZXIsc2xvZSxzbG9nLHNsb2dhbixzbG9nZ2VyLHNsb2thLHNsb2tlLHNsb24sc2xvbmUsc2xvbmssc2xvbyxzbG9vbSxzbG9vbXksc2xvb3Asc2xvb3NoLHNsb3Asc2xvcGUsc2xvcGVkLHNsb3BlbHksc2xvcGVyLHNsb3Bpbmcsc2xvcHBlZCxzbG9wcHksc2xvcHMsc2xvcHksc2xvcnAsc2xvc2gsc2xvc2hlcixzbG9zaHksc2xvdCxzbG90ZSxzbG90ZWQsc2xvdGgsc2xvdHRlZCxzbG90dGVyLHNsb3VjaCxzbG91Y2h5LHNsb3VnaCxzbG91Z2h5LHNsb3VyLHNsb3VzaCxzbG92ZW4sc2xvdyxzbG93aXNoLHNsb3dseSxzbG93cmllLHNsb3dzLHNsb3lkLHNsdWIsc2x1YmJlcixzbHViYnksc2x1ZCxzbHVkZGVyLHNsdWRnZSxzbHVkZ2VkLHNsdWRnZXIsc2x1ZGd5LHNsdWUsc2x1ZXIsc2x1ZyxzbHVnZ2VkLHNsdWdnZXIsc2x1Z2d5LHNsdWljZSxzbHVpY2VyLHNsdWljeSxzbHVpZyxzbHVpdCxzbHVtLHNsdW1iZXIsc2x1bWRvbSxzbHVtZ3VtLHNsdW1tZXIsc2x1bW15LHNsdW1wLHNsdW1weSxzbHVuZyxzbHVuZ2Usc2x1bmssc2x1bmtlbixzbHVyLHNsdXJib3csc2x1cnAsc2x1cnJ5LHNsdXNoLHNsdXNoZXIsc2x1c2h5LHNsdXQsc2x1dGNoLHNsdXRjaHksc2x1dGhlcixzbHV0dGVyLHNsdXR0eSxzbHksc2x5aXNoLHNseWx5LHNseW5lc3Msc2x5cGUsc21hLHNtYWNrLHNtYWNrZWUsc21hY2tlcixzbWFpayxzbWFsbCxzbWFsbGVuLHNtYWxsZXIsc21hbGxzLHNtYWxseSxzbWFsbSxzbWFsdCxzbWFsdGVyLHNtYWx0cyxzbWFyYWdkLHNtYXJtLHNtYXJteSxzbWFydCxzbWFydGVuLHNtYXJ0bHksc21hcnR5LHNtYXNoLHNtYXNoZXIsc21hc2h1cCxzbWF0dGVyLHNtYXplLHNtZWFyLHNtZWFyZWQsc21lYXJlcixzbWVhcnksc21lY3RpYyxzbWVjdGlzLHNtZWRkdW0sc21lZSxzbWVlY2gsc21lZWssc21lZWt5LHNtZWVyLHNtZWV0aCxzbWVnbWEsc21lbGwsc21lbGxlZCxzbWVsbGVyLHNtZWxseSxzbWVsdCxzbWVsdGVyLHNtZXRoLHNtZXRoZSxzbWV1c2Usc21ldyxzbWljaCxzbWlja2VyLHNtaWNrZXQsc21pZGRpZSxzbWlkZHVtLHNtaWRnZSxzbWlkZ2VuLHNtaWxheCxzbWlsZSxzbWlsZXIsc21pbGV0LHNtaWxpbmcsc21pbHksc21pcmNoLHNtaXJjaHksc21pcmlzLHNtaXJrLHNtaXJrZXIsc21pcmtsZSxzbWlya2x5LHNtaXJreSxzbWlydGxlLHNtaXQsc21pdGNoLHNtaXRlLHNtaXRlcixzbWl0aCxzbWl0aGFtLHNtaXRoZXIsc21pdGh5LHNtaXRpbmcsc21pdHRlbixzbW9jayxzbW9ja2VyLHNtb2csc21va2Usc21va2VkLHNtb2tlcixzbW9rZXJ5LHNtb2tpbHksc21va2luZyxzbW9raXNoLHNtb2t5LHNtb2xkZXIsc21vbHQsc21vb2NoLHNtb29jaHksc21vb2RnZSxzbW9vayxzbW9vdCxzbW9vdGgsc21vcHBsZSxzbW9yZSxzbW90ZSxzbW90aGVyLHNtb3R0ZXIsc21vdWNoLHNtb3VzLHNtb3VzZSxzbW91c2VyLHNtb3V0LHNtcml0aSxzbXVkZ2Usc211ZGdlZCxzbXVkZ2VyLHNtdWRneSxzbXVnLHNtdWdnbGUsc211Z2lzbSxzbXVnbHksc211aXN0eSxzbXVyLHNtdXJyLHNtdXJyeSxzbXVzZSxzbXVzaCxzbXV0LHNtdXRjaCxzbXV0Y2h5LHNtdXR0ZWQsc211dHRlcixzbXV0dHksc215dGgsc215dHJpZSxzbmFiLHNuYWJiaWUsc25hYmJsZSxzbmFjayxzbmFja2xlLHNuYWZmLHNuYWZmbGUsc25hZnUsc25hZyxzbmFnZ2VkLHNuYWdnZXIsc25hZ2d5LHNuYWdyZWwsc25haWwsc25haWxzLHNuYWlseSxzbmFpdGgsc25ha2Usc25ha2VyLHNuYWtlcnksc25ha2lseSxzbmFraW5nLHNuYWtpc2gsc25ha3ksc25hcCxzbmFwYmFnLHNuYXBlLHNuYXBlcixzbmFwcGVkLHNuYXBwZXIsc25hcHBzLHNuYXBweSxzbmFwcyxzbmFweSxzbmFyZSxzbmFyZXIsc25hcmssc25hcmwsc25hcmxlcixzbmFybHksc25hcnksc25hc3RlLHNuYXRjaCxzbmF0Y2h5LHNuYXRoLHNuYXRoZSxzbmF2ZWwsc25hdnZsZSxzbmF3LHNuZWFkLHNuZWFrLHNuZWFrZXIsc25lYWt5LHNuZWFwLHNuZWF0aCxzbmVhdGhlLHNuZWIsc25lY2ssc25lY2tlcixzbmVja2V0LHNuZWQsc25lZSxzbmVlcixzbmVlcmVyLHNuZWVyeSxzbmVlc2gsc25lZXN0LHNuZWVzdHksc25lZXplLHNuZWV6ZXIsc25lZXp5LHNuZWxsLHNuZWxseSxzbmVycCxzbmV3LHNuaWIsc25pYmJsZSxzbmliZWwsc25pY2hlcixzbmljayxzbmlja2VyLHNuaWNrZXQsc25pY2tleSxzbmlja2xlLHNuaWRkbGUsc25pZGUsc25pZmYsc25pZmZlcixzbmlmZmxlLHNuaWZmbHksc25pZmZ5LHNuaWZ0LHNuaWZ0ZXIsc25pZnR5LHNuaWcsc25pZ2dlcixzbmlnZ2xlLHNuaXAsc25pcGUsc25pcGVyLHNuaXBpbmcsc25pcGlzaCxzbmlwcGVyLHNuaXBwZXQsc25pcHB5LHNuaXB5LHNuaXJsLHNuaXJ0LHNuaXJ0bGUsc25pdGNoLHNuaXRlLHNuaXRoZSxzbml0aHksc25pdHRsZSxzbml2ZWwsc25pdmVseSxzbml2eSxzbm9iLHNub2JiZXIsc25vYmJ5LHNub2Jkb20sc25vY2hlcixzbm9jayxzbm9ja2VyLHNub2Qsc25vZGx5LHNub2VrLHNub2csc25vZ2Esc25va2Usc25vb2Qsc25vb2RlZCxzbm9vayxzbm9va2VyLHNub29wLHNub29wZXIsc25vb3B5LHNub29zZSxzbm9vdCxzbm9vdHksc25vb3ZlLHNub296ZSxzbm9vemVyLHNub296bGUsc25vb3p5LHNub3Asc25vcmUsc25vcmVyLHNub3Jpbmcsc25vcmssc25vcmtlbCxzbm9ya2VyLHNub3J0LHNub3J0ZXIsc25vcnRsZSxzbm9ydHksc25vdCxzbm90dGVyLHNub3R0eSxzbm91Y2gsc25vdXQsc25vdXRlZCxzbm91dGVyLHNub3V0eSxzbm93LHNub3djYXAsc25vd2llLHNub3dpbHksc25vd2lzaCxzbm93ayxzbm93bCxzbm93eSxzbm96emxlLHNudWIsc251YmJlZCxzbnViYmVlLHNudWJiZXIsc251YmJ5LHNudWNrLHNudWRnZSxzbnVmZixzbnVmZmVyLHNudWZmbGUsc251ZmZseSxzbnVmZnksc251ZyxzbnVnZ2VyLHNudWdnbGUsc251Z2lmeSxzbnVnbHksc251bSxzbnVwLHNudXBwZXIsc251cixzbnVybCxzbnVybHksc251cnAsc251cnQsc251enpsZSxzbnksc255aW5nLHNvLHNvYWssc29ha2FnZSxzb2FrZWQsc29ha2VuLHNvYWtlcixzb2FraW5nLHNvYWttYW4sc29ha3ksc29hbGx5LHNvYW0sc29hcCxzb2FwYm94LHNvYXBlcixzb2FwZXJ5LHNvYXBpbHksc29hcHN1ZCxzb2FweSxzb2FyLHNvYXJlcixzb2FyaW5nLHNvYXJ5LHNvYixzb2JiZXIsc29iYmluZyxzb2JieSxzb2JlaXQsc29iZXIsc29iZXJlcixzb2Jlcmx5LHNvYmZ1bCxzb2JvbGVzLHNvYyxzb2NhZ2Usc29jYWdlcixzb2NjZXIsc29jZSxzb2NodCxzb2NpYWwsc29jaWV0eSxzb2NpaSxzb2NpdXMsc29jayxzb2NrZXIsc29ja2V0LHNvY2tleWUsc29ja3ksc29jbGUsc29jbWFuLHNvY28sc29kLHNvZGEsc29kYWljLHNvZGRlZCxzb2RkZW4sc29kZGluZyxzb2RkaXRlLHNvZGR5LHNvZGljLHNvZGlvLHNvZGl1bSxzb2RsZXNzLHNvZG9rdSxzb2RvbWljLHNvZG9teSxzb2R3b3JrLHNvZHksc29lLHNvZWtvZSxzb2V2ZXIsc29mYSxzb2ZhbmUsc29mYXIsc29mZml0LHNvZnQsc29mdGEsc29mdGVuLHNvZnRpc2gsc29mdGx5LHNvZnRuZXIsc29mdHksc29nLHNvZ2VyLHNvZ2V0LHNvZ2dpbHksc29nZ2luZyxzb2dneSxzb2gsc29obyxzb2lsLHNvaWxhZ2Usc29pbGVkLHNvaWxpbmcsc29pbHVyZSxzb2lseSxzb2lyZWUsc29qYSxzb2pvdXJuLHNvayxzb2thLHNva2Usc29rZW1hbixzb2tlbixzb2wsc29sYSxzb2xhY2Usc29sYWNlcixzb2xhbixzb2xhbmFsLHNvbGFudW0sc29sYXIsc29sYXRlLHNvbGF0aWEsc29sYXksc29sZCxzb2xkYWRvLHNvbGRhbixzb2xkZXIsc29sZGksc29sZGllcixzb2xkbyxzb2xlLHNvbGVhLHNvbGVhcyxzb2xlaWwsc29sZWx5LHNvbGVtbixzb2xlbixzb2xlbnQsc29sZXIsc29sZXMsc29sZXVzLHNvbGV5bixzb2xpLHNvbGljaXQsc29saWQsc29saWRpLHNvbGlkbHksc29saWR1bSxzb2xpZHVzLHNvbGlvLHNvbGlwZWQsc29saXN0LHNvbGxhcixzb2xvLHNvbG9kLHNvbG9kaSxzb2xvaXN0LHNvbG9uLHNvbG90aCxzb2x1YmxlLHNvbHVibHksc29sdW0sc29sdXRlLHNvbHZhdGUsc29sdmUsc29sdmVuZCxzb2x2ZW50LHNvbHZlcixzb21hLHNvbWFsLHNvbWF0YSxzb21hdGljLHNvbWJlcixzb21icmUsc29tZSxzb21lZGF5LHNvbWVob3csc29tZW9uZSxzb21lcnMsc29tZXdheSxzb21ld2h5LHNvbWl0YWwsc29taXRlLHNvbWl0aWMsc29tbWEsc29tbmlhbCxzb21uaWZ5LHNvbW51cyxzb21wYXksc29tcG5lLHNvbXBuZXIsc29uLHNvbmFibGUsc29uYW5jZSxzb25hbmN5LHNvbmFudCxzb25hcixzb25hdGEsc29uZCxzb25kZWxpLHNvbmVyaSxzb25nLHNvbmdmdWwsc29uZ2lzaCxzb25nbGUsc29uZ2xldCxzb25nbWFuLHNvbmd5LHNvbmhvb2Qsc29uaWMsc29uaW91LHNvbmssc29ubGVzcyxzb25saWtlLHNvbmx5LHNvbm5ldCxzb25ueSxzb25vcmljLHNvbnMsc29uc2hpcCxzb25zeSxzb250YWcsc29vZGxlLHNvb2RseSxzb29rLHNvb2t5LHNvb2wsc29vbG9vcyxzb29uLHNvb25lcixzb29uaXNoLHNvb25seSxzb29yYXduLHNvb3JkLHNvb3JrZWUsc29vdCxzb290ZXIsc29vdGgsc29vdGhlLHNvb3RoZXIsc29vdGlseSxzb290eSxzb3Asc29wZSxzb3BoLHNvcGhpYSxzb3BoaWMsc29waGlzbSxzb3BoeSxzb3BpdGUsc29wb3Isc29wcGVyLHNvcHBpbmcsc29wcHksc29wcmFuaSxzb3ByYW5vLHNvcmEsc29yYWdlLHNvcmFsLHNvcmIsc29yYmF0ZSxzb3JiZW50LHNvcmJpYyxzb3JiaWxlLHNvcmJpbixzb3JiaXRlLHNvcmJvc2Usc29yYnVzLHNvcmNlcixzb3JjZXJ5LHNvcmNoaW4sc29yZGEsc29yZGVzLHNvcmRpZCxzb3JkaW5lLHNvcmRpbm8sc29yZG9yLHNvcmUsc29yZWRpYSxzb3JlZSxzb3JlaG9uLHNvcmVseSxzb3JlbWEsc29yZ2hvLHNvcmdodW0sc29yZ28sc29yaSxzb3JpY2lkLHNvcml0ZSxzb3JpdGVzLHNvcm4sc29ybmFyZSxzb3JuYXJpLHNvcm5lcixzb3JuaW5nLHNvcm9iYW4sc29yb3JhbCxzb3Jvc2Usc29yb3Npcyxzb3JyYSxzb3JyZWwsc29ycmlseSxzb3Jyb2Esc29ycm93LHNvcnJvd3ksc29ycnksc29ydCxzb3J0YWwsc29ydGVkLHNvcnRlcixzb3J0aWUsc29ydGx5LHNvcnR5LHNvcnVzLHNvcnZhLHNvcnksc29zaCxzb3NoZWQsc29zbyxzb3NvaXNoLHNvc3Msc29zc2xlLHNvdCxzb3RpZSxzb3RuaWEsc290bmlrLHNvdG9sLHNvdHMsc290dGFnZSxzb3R0ZWQsc290dGVyLHNvdHRpc2gsc291LHNvdWFyaSxzb3ViaXNlLHNvdWNhcixzb3VjaGV0LHNvdWNoeSxzb3VkLHNvdWZmbGUsc291Z2gsc291Z2hlcixzb3VnaHQsc291bCxzb3VsYWNrLHNvdWxlZCxzb3VsZnVsLHNvdWxpc2gsc291bHksc291bSxzb3VuZCxzb3VuZGVyLHNvdW5kbHksc291cCxzb3VwY29uLHNvdXBlcixzb3VwbGUsc291cHksc291cixzb3VyY2Usc291cmVkLHNvdXJlbixzb3VyZXIsc291cmluZyxzb3VyaXNoLHNvdXJseSxzb3Vyb2NrLHNvdXJzb3Asc291cnRvcCxzb3VyeSxzb3VzZSxzb3VzZXIsc291c2xpayxzb3V0YW5lLHNvdXRlcixzb3V0aCxzb3V0aGVyLHNvdixzb3ZpZXQsc292aXRlLHNvdmtob3osc292cmFuLHNvdyxzb3dhYmxlLHNvd2FuLHNvd2Fucyxzb3dhcixzb3dhcnJ5LHNvd2JhY2ssc293YmFuZSxzb3dlbCxzb3dlbnMsc293ZXIsc293Zm9vdCxzb3dpbmcsc293aW5zLHNvd2wsc293bGUsc293bGlrZSxzb3dsdGgsc293bixzb3dzZSxzb3d0LHNvd3RlLHNveSxzb3lhLHNveWJlYW4sc296aW4sc296b2xpYyxzb3p6bGUsc296emx5LHNwYSxzcGFjZSxzcGFjZWQsc3BhY2VyLHNwYWNpbmcsc3BhY2ssc3BhY3ksc3BhZCxzcGFkZSxzcGFkZWQsc3BhZGVyLHNwYWRnZXIsc3BhZGluZyxzcGFkaXgsc3BhZG9uZSxzcGFlLHNwYWVkb20sc3BhZW1hbixzcGFlcixzcGFoaSxzcGFpZCxzcGFpayxzcGFpcmdlLHNwYWssc3BhbGQsc3BhbGRlcixzcGFsZSxzcGFsbCxzcGFsbGVyLHNwYWx0LHNwYW4sc3BhbmNlbCxzcGFuZGxlLHNwYW5keSxzcGFuZSxzcGFuZW15LHNwYW5nLHNwYW5nbGUsc3BhbmdseSxzcGFuaWVsLHNwYW5pbmcsc3Bhbmssc3BhbmtlcixzcGFua3ksc3Bhbm4sc3Bhbm5lbCxzcGFubmVyLHNwYW51bGUsc3BhcixzcGFyYWRhLHNwYXJjaCxzcGFyZSxzcGFyZWx5LHNwYXJlcixzcGFyZ2Usc3BhcmdlcixzcGFyaWQsc3BhcmluZyxzcGFyayxzcGFya2VkLHNwYXJrZXIsc3BhcmtsZSxzcGFya2x5LHNwYXJrcyxzcGFya3ksc3Bhcm0sc3Bhcm9pZCxzcGFycmVkLHNwYXJyZXIsc3BhcnJvdyxzcGFycnksc3BhcnNlLHNwYXJ0LHNwYXJ0aCxzcGFydGxlLHNwYXJ2ZXIsc3Bhcnksc3Bhc20sc3Bhc21lZCxzcGFzbWljLHNwYXN0aWMsc3BhdCxzcGF0ZSxzcGF0aGEsc3BhdGhhbCxzcGF0aGUsc3BhdGhlZCxzcGF0aGljLHNwYXRpYWwsc3BhdHRlZCxzcGF0dGVyLHNwYXR0bGUsc3BhdHVsYSxzcGF0dWxlLHNwYXZlLHNwYXZlcixzcGF2aWUsc3BhdmllZCxzcGF2aWV0LHNwYXZpbixzcGF3bixzcGF3bmVyLHNwYXdueSxzcGF5LHNwYXlhZCxzcGF5YXJkLHNwYXlpbmcsc3BlYWssc3BlYWtlcixzcGVhbCxzcGVhbixzcGVhcixzcGVhcmVyLHNwZWFyeSxzcGVjLHNwZWNlLHNwZWNpYWwsc3BlY2llLHNwZWNpZXMsc3BlY2lmeSxzcGVjayxzcGVja2VkLHNwZWNrbGUsc3BlY2tseSxzcGVja3Msc3BlY2t5LHNwZWNzLHNwZWN0ZXIsc3BlY3RyYSxzcGVjdHJ5LHNwZWN1bGEsc3BlY3VzLHNwZWQsc3BlZWNoLHNwZWVkLHNwZWVkZXIsc3BlZWR5LHNwZWVsLHNwZWVuLHNwZWVyLHNwZWlzcyxzcGVsZGVyLHNwZWxrLHNwZWxsLHNwZWxsZXIsc3BlbHQsc3BlbHRlcixzcGVsdHosc3BlbHVuayxzcGVuY2Usc3BlbmNlcixzcGVuZCxzcGVuZGVyLHNwZW5zZSxzcGVudCxzcGVvcyxzcGVyYXRlLHNwZXJpdHksc3BlcmtldCxzcGVybSxzcGVybWEsc3Blcm1pYyxzcGVybXksc3Blcm9uZSxzcGV0LHNwZXRjaCxzcGV3LHNwZXdlcixzcGV3aW5nLHNwZXd5LHNwZXgsc3BoYWNlbCxzcGhlY2lkLHNwaGVnZXMsc3BoZWdpZCxzcGhlbmUsc3BoZW5pYyxzcGhlcmFsLHNwaGVyZSxzcGhlcmljLHNwaGVyeSxzcGhpbngsc3BpY2Esc3BpY2FsLHNwaWNhbnQsc3BpY2F0ZSxzcGljZSxzcGljZWQsc3BpY2VyLHNwaWNlcnksc3BpY2lseSxzcGljaW5nLHNwaWNrLHNwaWNrZXQsc3BpY2tsZSxzcGljb3NlLHNwaWNvdXMsc3BpY3VsYSxzcGljdWxlLHNwaWN5LHNwaWRlcixzcGlkZXJ5LHNwaWRnZXIsc3BpZWQsc3BpZWdlbCxzcGllbCxzcGllbGVyLHNwaWVyLHNwaWZmLHNwaWZmZWQsc3BpZmZ5LHNwaWcsc3BpZ25ldCxzcGlnb3Qsc3Bpa2Usc3Bpa2VkLHNwaWtlcixzcGlraWx5LHNwaWtpbmcsc3Bpa3ksc3BpbGUsc3BpbGVyLHNwaWxpbmcsc3BpbGl0ZSxzcGlsbCxzcGlsbGVyLHNwaWxsZXQsc3BpbGx5LHNwaWxvbWEsc3BpbHQsc3BpbHRoLHNwaWx1cyxzcGluLHNwaW5hLHNwaW5hY2gsc3BpbmFlLHNwaW5hZ2Usc3BpbmFsLHNwaW5hdGUsc3BpbmRlcixzcGluZGxlLHNwaW5kbHksc3BpbmUsc3BpbmVkLHNwaW5lbCxzcGluZXQsc3BpbmdlbCxzcGluayxzcGlubmVyLHNwaW5uZXksc3Bpbm9pZCxzcGlub3NlLHNwaW5vdXMsc3BpbnVsZSxzcGlueSxzcGlvbmlkLHNwaXJhbCxzcGlyYWxlLHNwaXJhbixzcGlyYW50LHNwaXJhdGUsc3BpcmUsc3BpcmVhLHNwaXJlZCxzcGlyZW1lLHNwaXJpbmcsc3Bpcml0LHNwaXJpdHksc3BpcmtldCxzcGlybyxzcGlyb2lkLHNwaXJvdXMsc3BpcnQsc3Bpcnksc3Bpc2Usc3BpdCxzcGl0YWwsc3BpdGJveCxzcGl0ZSxzcGl0ZnVsLHNwaXRpc2gsc3BpdHRlZCxzcGl0dGVuLHNwaXR0ZXIsc3BpdHRsZSxzcGl0eixzcGl2LHNwaXZlcnksc3BsYXNoLHNwbGFzaHksc3BsYXQsc3BsYXRjaCxzcGxheSxzcGxheWVkLHNwbGF5ZXIsc3BsZWVuLHNwbGVlbnksc3BsZWV0LHNwbGVuaWMsc3BsZXQsc3BsaWNlLHNwbGljZXIsc3BsaW5lLHNwbGludCxzcGxpbnR5LHNwbGl0LHNwbG9kZ2Usc3Bsb2RneSxzcGxvcmUsc3Bsb3NoLHNwbG90Y2gsc3BsdW5nZSxzcGx1cmdlLHNwbHVyZ3ksc3BsdXJ0LHNwb2FjaCxzcG9kZSxzcG9kaXVtLHNwb2ZmbGUsc3BvZmZ5LHNwb2dlbCxzcG9pbCxzcG9pbGVkLHNwb2lsZXIsc3BvaWx0LHNwb2tlLHNwb2tlbixzcG9reSxzcG9sZSxzcG9saWEsc3BvbGl1bSxzcG9uZGVlLHNwb25keWwsc3Bvbmcsc3BvbmdlLHNwb25nZWQsc3BvbmdlcixzcG9uZ2luLHNwb25neSxzcG9uc2FsLHNwb25zb24sc3BvbnNvcixzcG9vZixzcG9vZmVyLHNwb29rLHNwb29reSxzcG9vbCxzcG9vbGVyLHNwb29tLHNwb29uLHNwb29uZXIsc3Bvb255LHNwb29yLHNwb29yZXIsc3Bvb3Qsc3BvcixzcG9yYWwsc3BvcmUsc3BvcmVkLHNwb3JpZCxzcG9yb2lkLHNwb3JvbnQsc3Bvcm91cyxzcG9ycmFuLHNwb3J0LHNwb3J0ZXIsc3BvcnRseSxzcG9ydHMsc3BvcnR5LHNwb3J1bGUsc3Bvc2gsc3Bvc2h5LHNwb3Qsc3BvdHRlZCxzcG90dGVyLHNwb3R0bGUsc3BvdHR5LHNwb3VzYWwsc3BvdXNlLHNwb3VzeSxzcG91dCxzcG91dGVyLHNwb3V0eSxzcHJhY2ssc3ByYWQsc3ByYWcsc3ByYWljaCxzcHJhaW4sc3ByYWludCxzcHJhbmcsc3ByYW5rLHNwcmF0LHNwcmF0dHksc3ByYXdsLHNwcmF3bHksc3ByYXksc3ByYXllcixzcHJheWV5LHNwcmVhZCxzcHJlYWR5LHNwcmVhdGgsc3ByZWUsc3ByZWV1dyxzcHJlbmcsc3ByZW50LHNwcmV0LHNwcmV3LHNwcmV3bCxzcHJpZWQsc3ByaWVyLHNwcmllc3Qsc3ByaWcsc3ByaWdneSxzcHJpbmcsc3ByaW5nZSxzcHJpbmd5LHNwcmluayxzcHJpbnQsc3ByaXQsc3ByaXRlLHNwcml0dHksc3Byb2F0LHNwcm9kLHNwcm9ndWUsc3Byb2lsLHNwcm9uZyxzcHJvc2Usc3Byb3V0LHNwcm93c3ksc3BydWNlLHNwcnVlLHNwcnVlcixzcHJ1ZyxzcHJ1aXQsc3BydW5nLHNwcnVubnksc3BydW50LHNwcnksc3ByeWx5LHNwdWQsc3B1ZGRlcixzcHVkZGxlLHNwdWRkeSxzcHVmZmxlLHNwdWcsc3B1a2Usc3B1bWUsc3B1bW9uZSxzcHVtb3NlLHNwdW1vdXMsc3B1bXksc3B1bixzcHVuZyxzcHVuayxzcHVua2llLHNwdW5reSxzcHVubnksc3B1cixzcHVyZ2Usc3B1cmlhZSxzcHVybCxzcHVybGV0LHNwdXJuLHNwdXJuZXIsc3B1cnJlZCxzcHVycmVyLHNwdXJyeSxzcHVydCxzcHVydGVyLHNwdXJ0bGUsc3B1cndheSxzcHV0LHNwdXRhLHNwdXR0ZXIsc3B1dHVtLHNweSxzcHlib2F0LHNweWRvbSxzcHllcixzcHlob2xlLHNweWlzbSxzcHlzaGlwLHNxdWFiLHNxdWFiYnksc3F1YWNjbyxzcXVhZCxzcXVhZGR5LHNxdWFpbCxzcXVhbGlkLHNxdWFsbCxzcXVhbGx5LHNxdWFsbSxzcXVhbG9yLHNxdWFtLHNxdWFtYSxzcXVhbWFlLHNxdWFtZSxzcXVhcmUsc3F1YXJlZCxzcXVhcmVyLHNxdWFyayxzcXVhcnksc3F1YXNoLHNxdWFzaHksc3F1YXQsc3F1YXRseSxzcXVhdHR5LHNxdWF3LHNxdWF3ayxzcXVhd2t5LHNxdWRnZSxzcXVkZ3ksc3F1ZWFrLHNxdWVha3ksc3F1ZWFsLHNxdWVhbGQsc3F1ZWFtLHNxdWVhbXksc3F1ZWVnZSxzcXVlZXplLHNxdWVlenksc3F1ZWxjaCxzcXVlbmNoLHNxdWliLHNxdWlkLHNxdWlkZ2Usc3F1aWRneSxzcXVpZmZ5LHNxdWlsbGEsc3F1aW4sc3F1aW5jaCxzcXVpbm55LHNxdWluc3ksc3F1aW50LHNxdWludHksc3F1aXJlLHNxdWlyZXQsc3F1aXJrLHNxdWlybSxzcXVpcm15LHNxdWlycixzcXVpcnQsc3F1aXJ0eSxzcXVpc2gsc3F1aXNoeSxzcXVpdCxzcXVpdGNoLHNxdW96ZSxzcXV1c2gsc3F1dXNoeSxzcmFkZGhhLHNyYW1hbmEsc3JpLHNydXRpLHNzdSxzdCxzdGFhYixzdGFiLHN0YWJiZXIsc3RhYmlsZSxzdGFibGUsc3RhYmxlcixzdGFibHksc3RhYm95LHN0YWNoZXIsc3RhY2h5cyxzdGFjayxzdGFja2VyLHN0YWN0ZSxzdGFkZGEsc3RhZGRsZSxzdGFkZSxzdGFkaWEsc3RhZGljLHN0YWRpb24sc3RhZGl1bSxzdGFmZixzdGFmZmVkLHN0YWZmZXIsc3RhZyxzdGFnZSxzdGFnZWQsc3RhZ2VyLHN0YWdlcnksc3RhZ2VzZSxzdGFnZ2VyLHN0YWdnaWUsc3RhZ2d5LHN0YWdpbHksc3RhZ2luZyxzdGFnbnVtLHN0YWd5LHN0YWlhLHN0YWlkLHN0YWlkbHksc3RhaW4sc3RhaW5lcixzdGFpbyxzdGFpcixzdGFpcmVkLHN0YWlyeSxzdGFpdGgsc3RhaXZlcixzdGFrZSxzdGFrZXIsc3RhbGUsc3RhbGVseSxzdGFsaW5nLHN0YWxrLHN0YWxrZWQsc3RhbGtlcixzdGFsa28sc3RhbGt5LHN0YWxsLHN0YWxsYXIsc3RhbGxlcixzdGFtLHN0YW1iaGEsc3RhbWVuLHN0YW1pbixzdGFtaW5hLHN0YW1tZWwsc3RhbW1lcixzdGFtbm9zLHN0YW1wLHN0YW1wZWUsc3RhbXBlcixzdGFtcGxlLHN0YW5jZSxzdGFuY2gsc3RhbmQsc3RhbmRlZSxzdGFuZGVsLHN0YW5kZXIsc3RhbmUsc3Rhbmcsc3RhbmluZSxzdGFuamVuLHN0YW5rLHN0YW5raWUsc3Rhbm5lbCxzdGFubmVyLHN0YW5uaWMsc3Rhbm5vLHN0YW5udW0sc3Rhbm55bCxzdGFuemEsc3RhbnplLHN0YXAsc3RhcGVzLHN0YXBsZSxzdGFwbGVkLHN0YXBsZXIsc3RhcixzdGFyY2gsc3RhcmNoeSxzdGFyZG9tLHN0YXJlLHN0YXJlZSxzdGFyZXIsc3RhcmV0cyxzdGFyZnVsLHN0YXJpbmcsc3Rhcmssc3RhcmtlbixzdGFya2x5LHN0YXJreSxzdGFybGV0LHN0YXJsaXQsc3Rhcm4sc3Rhcm5lbCxzdGFybmllLHN0YXJvc3Qsc3RhcnJlZCxzdGFycnksc3RhcnQsc3RhcnRlcixzdGFydGxlLHN0YXJ0bHksc3RhcnRvcixzdGFydHksc3RhcnZlLHN0YXJ2ZWQsc3RhcnZlcixzdGFydnksc3Rhcnksc3Rhc2VzLHN0YXNoLHN0YXNoaWUsc3Rhc2lzLHN0YXRhbCxzdGF0YW50LHN0YXRlLHN0YXRlZCxzdGF0ZWx5LHN0YXRlcixzdGF0aWMsc3RhdGljcyxzdGF0aW9uLHN0YXRpc20sc3RhdGlzdCxzdGF0aXZlLHN0YXRvcixzdGF0dWUsc3RhdHVlZCxzdGF0dXJlLHN0YXR1cyxzdGF0dXRlLHN0YXVrLHN0YXVtZXIsc3RhdW4sc3RhdW5jaCxzdGF1cCxzdGF1dGVyLHN0YXZlLHN0YXZlcixzdGF2ZXJzLHN0YXZpbmcsc3RhdyxzdGF3bixzdGF4aXMsc3RheSxzdGF5ZWQsc3RheWVyLHN0YXluaWwsc3RheXMsc3RjaGksc3RlYWQsc3RlYWR5LHN0ZWFrLHN0ZWFsLHN0ZWFsZWQsc3RlYWxlcixzdGVhbHRoLHN0ZWFseSxzdGVhbSxzdGVhbWVyLHN0ZWFteSxzdGVhbixzdGVhcmljLHN0ZWFyaW4sc3RlYXJ5bCxzdGVhdGluLHN0ZWNoLHN0ZWRkbGUsc3RlZWQsc3RlZWssc3RlZWwsc3RlZWxlcixzdGVlbHksc3RlZW4sc3RlZW50aCxzdGVlcCxzdGVlcGVuLHN0ZWVwZXIsc3RlZXBsZSxzdGVlcGx5LHN0ZWVweSxzdGVlcixzdGVlcmVyLHN0ZWV2ZSxzdGVldmVyLHN0ZWcsc3RlaWQsc3RlaWdoLHN0ZWluLHN0ZWthbixzdGVsYSxzdGVsYWUsc3RlbGFpLHN0ZWxhcixzdGVsZSxzdGVsbCxzdGVsbGEsc3RlbGxhcixzdGVtLHN0ZW1hLHN0ZW1sZXQsc3RlbW1hLHN0ZW1tZWQsc3RlbW1lcixzdGVtbXksc3RlbXBsZSxzdGVtc29uLHN0ZW4sc3RlbmFyLHN0ZW5jaCxzdGVuY2h5LHN0ZW5jaWwsc3RlbmQsc3Rlbmcsc3RlbmdhaCxzdGVuaW9uLHN0ZW5vLHN0ZW5vZyxzdGVudCxzdGVudGVyLHN0ZW50b24sc3RlcCxzdGVwcGUsc3RlcHBlZCxzdGVwcGVyLHN0ZXBzb24sc3RlcHQsc3RlcHdheSxzdGVyZSxzdGVyZW8sc3Rlcmksc3RlcmljLHN0ZXJpY3Msc3RlcmlkZSxzdGVyaWxlLHN0ZXJpbixzdGVyayxzdGVybGV0LHN0ZXJuLHN0ZXJuYSxzdGVybmFkLHN0ZXJuYWwsc3Rlcm5lZCxzdGVybmx5LHN0ZXJudW0sc3Rlcm8sc3Rlcm9pZCxzdGVyb2wsc3RlcnQsc3RlcnRvcixzdGVydmUsc3RldCxzdGV0Y2gsc3RldmVsLHN0ZXZlbixzdGV2aWEsc3RldyxzdGV3YXJkLHN0ZXdlZCxzdGV3cGFuLHN0ZXdwb3Qsc3Rld3ksc3RleSxzdGhlbmlhLHN0aGVuaWMsc3RpYixzdGliaWFsLHN0aWJpYyxzdGliaW5lLHN0aWJpdW0sc3RpY2gsc3RpY2hpYyxzdGljaGlkLHN0aWNrLHN0aWNrZWQsc3RpY2tlcixzdGlja2l0LHN0aWNrbGUsc3RpY2tseSxzdGlja3Msc3RpY2t1bSxzdGlja3ksc3RpZCxzdGlkZHksc3RpZmUsc3RpZmYsc3RpZmZlbixzdGlmZmx5LHN0aWZsZSxzdGlmbGVyLHN0aWdtYSxzdGlnbWFpLHN0aWdtYWwsc3RpZ21lLHN0aWxlLHN0aWxldCxzdGlsbCxzdGlsbGVyLHN0aWxseSxzdGlsdCxzdGlsdGVkLHN0aWx0ZXIsc3RpbHR5LHN0aW0sc3RpbWUsc3RpbXVsaSxzdGlteSxzdGluZSxzdGluZyxzdGluZ2Usc3RpbmdlcixzdGluZ28sc3Rpbmd5LHN0aW5rLHN0aW5rZXIsc3RpbnQsc3RpbnRlZCxzdGludGVyLHN0aW50eSxzdGlvbixzdGlvbmljLHN0aXBlLHN0aXBlZCxzdGlwZWwsc3RpcGVuZCxzdGlwZXMsc3RpcHBlbixzdGlwcGxlLHN0aXBwbHksc3RpcHVsYSxzdGlwdWxlLHN0aXIsc3Rpcmssc3RpcnAsc3RpcnBzLHN0aXJyYSxzdGlycmVyLHN0aXJydXAsc3RpdGNoLHN0aXRlLHN0aXRoLHN0aXRoeSxzdGl2ZSxzdGl2ZXIsc3Rpdnksc3RvYSxzdG9hY2gsc3RvYXQsc3RvYXRlcixzdG9iLHN0b2NhaCxzdG9jayxzdG9ja2VyLHN0b2NrcyxzdG9ja3ksc3RvZCxzdG9kZ2Usc3RvZGdlcixzdG9kZ3ksc3RvZXAsc3RvZixzdG9mZixzdG9nLHN0b2dhLHN0b2dpZSxzdG9neSxzdG9pYyxzdG9pY2FsLHN0b2tlLHN0b2tlcixzdG9sYSxzdG9sYWUsc3RvbGUsc3RvbGVkLHN0b2xlbixzdG9saWQsc3RvbGlzdCxzdG9sbGVuLHN0b2xvbixzdG9tYSxzdG9tYWNoLHN0b21hdGEsc3RvbWF0ZSxzdG9taXVtLHN0b21wLHN0b21wZXIsc3RvbmQsc3RvbmUsc3RvbmVkLHN0b25lbixzdG9uZXIsc3Rvbmcsc3RvbmllZCxzdG9uaWZ5LHN0b25pbHksc3RvbmluZyxzdG9uaXNoLHN0b25rZXIsc3Rvbnksc3Rvb2Qsc3Rvb2RlZCxzdG9vZGVuLHN0b29mLHN0b29nZSxzdG9vayxzdG9va2VyLHN0b29raWUsc3Rvb2wsc3Rvb24sc3Rvb25kLHN0b29wLHN0b29wZXIsc3Rvb3J5LHN0b290LHN0b3Asc3RvcGEsc3RvcGUsc3RvcGVyLHN0b3BnYXAsc3RvcGluZyxzdG9wcGVkLHN0b3BwZXIsc3RvcHBpdCxzdG9wcGxlLHN0b3JhZ2Usc3RvcmF4LHN0b3JlLHN0b3JlZW4sc3RvcmVyLHN0b3JnZSxzdG9yaWVkLHN0b3JpZXIsc3RvcmlmeSxzdG9yayxzdG9ya2VuLHN0b3JtLHN0b3JtZXIsc3Rvcm15LHN0b3J5LHN0b3NoLHN0b3NzLHN0b3Qsc3RvdHRlcixzdG91bixzdG91bmQsc3RvdXAsc3RvdXIsc3RvdXJ5LHN0b3VzaCxzdG91dCxzdG91dGVuLHN0b3V0aCxzdG91dGx5LHN0b3V0eSxzdG92ZSxzdG92ZW4sc3RvdmVyLHN0b3csc3Rvd2FnZSxzdG93Y2Usc3Rvd2VyLHN0b3dpbmcsc3RyYSxzdHJhY2ssc3RyYWN0LHN0cmFkLHN0cmFkZSxzdHJhZGwsc3RyYWRsZCxzdHJhZSxzdHJhZmUsc3RyYWZlcixzdHJhZyxzdHJhaWssc3RyYWluLHN0cmFpbnQsc3RyYWl0LHN0cmFrZSxzdHJha2VkLHN0cmFreSxzdHJhbSxzdHJhbXAsc3RyYW5kLHN0cmFuZyxzdHJhbmdlLHN0cmFueSxzdHJhcCxzdHJhc3Msc3RyYXRhLHN0cmF0YWwsc3RyYXRoLHN0cmF0aSxzdHJhdGljLHN0cmF0dW0sc3RyYXR1cyxzdHJhdmUsc3RyYXcsc3RyYXdlbixzdHJhd2VyLHN0cmF3eSxzdHJheSxzdHJheWVyLHN0cmUsc3RyZWFrLHN0cmVha3ksc3RyZWFtLHN0cmVhbXksc3RyZWNrLHN0cmVlLHN0cmVlayxzdHJlZWwsc3RyZWVuLHN0cmVlcCxzdHJlZXQsc3RyZWV0cyxzdHJlaXRlLHN0cmVrZSxzdHJlbW1hLHN0cmVuZyxzdHJlbnQsc3RyZW50aCxzdHJlcGVuLHN0cmVwb3Isc3RyZXNzLHN0cmV0LHN0cmV0Y2gsc3RyZXR0ZSxzdHJldHRpLHN0cmV0dG8sc3RyZXcsc3RyZXdlcixzdHJld24sc3RyZXksc3RyZXluZSxzdHJpYSxzdHJpYWUsc3RyaWFsLHN0cmlhdGUsc3RyaWNoLHN0cmljaGUsc3RyaWNrLHN0cmljdCxzdHJpZCxzdHJpZGUsc3RyaWRlcixzdHJpZG9yLHN0cmlmZSxzdHJpZyxzdHJpZ2Esc3RyaWdhZSxzdHJpZ2FsLHN0cmlnaHQsc3RyaWdpbCxzdHJpa2Usc3RyaWtlcixzdHJpbmQsc3RyaW5nLHN0cmluZ3ksc3RyaW9sYSxzdHJpcCxzdHJpcGUsc3RyaXBlZCxzdHJpcGVyLHN0cmlwdCxzdHJpcHksc3RyaXQsc3RyaXZlLHN0cml2ZWQsc3RyaXZlbixzdHJpdmVyLHN0cml4LHN0cm9hbSxzdHJvYmljLHN0cm9kZSxzdHJvaWwsc3Ryb2tlLHN0cm9rZXIsc3Ryb2t5LHN0cm9sZCxzdHJvbGwsc3Ryb2xsZCxzdHJvbSxzdHJvbWEsc3Ryb21hbCxzdHJvbWIsc3Ryb21lLHN0cm9uZSxzdHJvbmcsc3Ryb29rLHN0cm9vdCxzdHJvcCxzdHJvcGhlLHN0cm90aCxzdHJvdWQsc3Ryb3VwLHN0cm92ZSxzdHJvdyxzdHJvd2Qsc3Ryb3duLHN0cm95LHN0cm95ZXIsc3RydWIsc3RydWNrLHN0cnVkZWwsc3RydWUsc3RydW0sc3RydW1hLHN0cnVtYWUsc3RydW5nLHN0cnVudCxzdHJ1dCxzdHJ1dGgsc3RydXYsc3RyeWNoLHN0dWIsc3R1YmIsc3R1YmJlZCxzdHViYmVyLHN0dWJibGUsc3R1YmJseSxzdHViYm95LHN0dWJieSxzdHViZXIsc3R1Ym95LHN0dWNjbyxzdHVjayxzdHVkLHN0dWRkZXIsc3R1ZGRpZSxzdHVkZGxlLHN0dWRlLHN0dWRlbnQsc3R1ZGlhLHN0dWRpZWQsc3R1ZGllcixzdHVkaW8sc3R1ZGl1bSxzdHVkeSxzdHVlLHN0dWZmLHN0dWZmZWQsc3R1ZmZlcixzdHVmZnksc3R1ZyxzdHVnZ3ksc3R1aXZlcixzdHVsbCxzdHVsbGVyLHN0dWxtLHN0dW0sc3R1bWJsZSxzdHVtYmx5LHN0dW1lcixzdHVtbWVyLHN0dW1teSxzdHVtcCxzdHVtcGVyLHN0dW1weSxzdHVuLHN0dW5nLHN0dW5rLHN0dW5uZXIsc3R1bnNsZSxzdHVudCxzdHVudGVkLHN0dW50ZXIsc3R1bnR5LHN0dXBhLHN0dXBlLHN0dXBlZnksc3R1cGVuZCxzdHVwZW50LHN0dXBleCxzdHVwaWQsc3R1cG9yLHN0dXBvc2Usc3R1cHAsc3R1cHJ1bSxzdHVyZHksc3R1cmluZSxzdHVyayxzdHVydCxzdHVydGFuLHN0dXJ0aW4sc3R1c3Msc3R1dCxzdHV0dGVyLHN0eSxzdHlhbixzdHljYSxzdHlmdWwsc3R5bGFyLHN0eWxhdGUsc3R5bGUsc3R5bGVyLHN0eWxldCxzdHlsaW5lLHN0eWxpbmcsc3R5bGlzaCxzdHlsaXN0LHN0eWxpdGUsc3R5bGl6ZSxzdHlsbyxzdHlsb2lkLHN0eWxvcHMsc3R5bHVzLHN0eW1pZSxzdHlwc2lzLHN0eXB0aWMsc3R5cmF4LHN0eXJlbmUsc3R5cm9sLHN0eXJvbmUsc3R5cnlsLHN0eXRoZSxzdHl3YXJkLHN1YWJsZSxzdWFibHksc3VhZGUsc3VhaGFybyxzdWFudCxzdWFudGx5LHN1YXNpb24sc3Vhc2l2ZSxzdWFzb3J5LHN1YXZlLHN1YXZlbHksc3VhdmlmeSxzdWF2aXR5LHN1YixzdWJhY2lkLHN1YmFjdCxzdWJhZ2Usc3ViYWgsc3ViYWlkLHN1YmFuYWwsc3ViYXJjaCxzdWJhcmVhLHN1YmF0b20sc3ViYXVkLHN1YmJhbmQsc3ViYmFuayxzdWJiYXNlLHN1YmJhc3Msc3ViYmVhdSxzdWJiaWFzLHN1YmJpbmcsc3ViY2FzZSxzdWJjYXNoLHN1YmNhc3Qsc3ViY2VsbCxzdWJjaXR5LHN1YmNsYW4sc3ViY29vbCxzdWJkYXRlLHN1YmRlYW4sc3ViZGViLHN1YmRpYWwsc3ViZGllLHN1YmR1YWwsc3ViZHVjZSxzdWJkdWN0LHN1YmR1ZSxzdWJkdWVkLHN1YmR1ZXIsc3ViZWNobyxzdWJlZGl0LHN1YmVyLHN1YmVyaWMsc3ViZXJpbixzdWJmYWNlLHN1YmZldSxzdWJmaWVmLHN1YmZpeCxzdWJmb3JtLHN1YmZ1c2Msc3ViZnVzayxzdWJnYXBlLHN1YmdlbnMsc3ViZ2V0LHN1YmdpdCxzdWJnb2Qsc3ViZ3JpbixzdWJneXJlLHN1YmhhbGwsc3ViaGVhZCxzdWJoZXJkLHN1Ymhlcm8sc3ViaWNsZSxzdWJpZGFyLHN1YmlkZWEsc3ViaXRlbSxzdWJqYWNrLHN1YmplY3Qsc3ViamVlLHN1YmpvaW4sc3Via2luZyxzdWJsYXRlLHN1YmxldCxzdWJsaWQsc3VibGltZSxzdWJsb25nLHN1YmxvdCxzdWJtYWlkLHN1Ym1haW4sc3VibWFuLHN1Ym1pbmQsc3VibWlzcyxzdWJtaXQsc3VibmVjdCxzdWJuZXNzLHN1Ym5leCxzdWJub3RlLHN1Ym51ZGUsc3Vib3JhbCxzdWJvcm4sc3Vib3ZhbCxzdWJwYXJ0LHN1YnBhc3Msc3VicGlhbCxzdWJwaW1wLHN1YnBsYXQsc3VicGxvdCxzdWJwbG93LHN1YnBvb2wsc3VicG9ydCxzdWJyYWNlLHN1YnJlbnQsc3Vicm9vdCxzdWJydWxlLHN1YnNhbGUsc3Vic2FsdCxzdWJzZWEsc3Vic2VjdCxzdWJzZXB0LHN1YnNldCxzdWJzaWRlLHN1YnNpZHksc3Vic2lsbCxzdWJzaXN0LHN1YnNvaWwsc3Vic3VsdCxzdWJzdW1lLHN1YnRhY2ssc3VidGVuZCxzdWJ0ZXh0LHN1YnRpbGUsc3VidGlsbCxzdWJ0bGUsc3VidGx5LHN1YnRvbmUsc3VidHlwZSxzdWJ1bml0LHN1YnVyYixzdWJ2ZWluLHN1YnZlbmUsc3VidmVydCxzdWJ2b2xhLHN1YndheSxzdWJ3aW5rLHN1YnpvbmUsc3VjY2FkZSxzdWNjZWVkLHN1Y2NlbnQsc3VjY2VzcyxzdWNjaSxzdWNjaW4sc3VjY2lzZSxzdWNjb3Isc3VjY29yeSxzdWNjb3VzLHN1Y2N1YixzdWNjdWJhLHN1Y2N1YmUsc3VjY3VsYSxzdWNjdW1iLHN1Y2N1c3Msc3VjaCxzdWNrLHN1Y2thZ2Usc3Vja2VuLHN1Y2tlcixzdWNraW5nLHN1Y2tsZSxzdWNrbGVyLHN1Y2xhdCxzdWNyYXRlLHN1Y3JlLHN1Y3Jvc2Usc3VjdGlvbixzdWN1cmksc3VjdXJpdSxzdWQsc3VkYW1lbixzdWRhcnksc3VkYXRlLHN1ZGQsc3VkZGVuLHN1ZGRlcixzdWRkbGUsc3VkZHksc3Vkb3JhbCxzdWRvcmljLHN1ZHMsc3Vkc21hbixzdWRzeSxzdWUsc3VlZGUsc3VlcixzdWV0LHN1ZXR5LHN1ZmYsc3VmZmVjdCxzdWZmZXIsc3VmZmV0ZSxzdWZmaWNlLHN1ZmZpeCxzdWZmbHVlLHN1ZmZ1c2Usc3VnYW1vLHN1Z2FuLHN1Z2FyLHN1Z2FyZWQsc3VnYXJlcixzdWdhcnksc3VnZW50LHN1Z2dlc3Qsc3VnaCxzdWdpLHN1Z3Vhcm8sc3VodWFybyxzdWljaWRlLHN1aWQsc3VpZGlhbixzdWlmb3JtLHN1aW1hdGUsc3VpbmUsc3Vpbmcsc3VpbmdseSxzdWludCxzdWlzdCxzdWl0LHN1aXRlLHN1aXRpbmcsc3VpdG9yLHN1aXR5LHN1amksc3VsY2FsLHN1bGNhcixzdWxjYXRlLHN1bGN1cyxzdWxkLHN1bGVhLHN1bGZhLHN1bGZhdG8sc3VsZmlvbixzdWxmdXJ5LHN1bGssc3Vsa2Esc3Vsa2VyLHN1bGtpbHksc3Vsa3ksc3VsbCxzdWxsYSxzdWxsYWdlLHN1bGxlbixzdWxsb3csc3VsbHksc3VscGhhLHN1bHBobyxzdWxwaHVyLHN1bHRhbSxzdWx0YW4sc3VsdGFuYSxzdWx0YW5lLHN1bHRvbmUsc3VsdHJ5LHN1bHVuZyxzdW0sc3VtYWMsc3VtYXRyYSxzdW1idWwsc3VtbGVzcyxzdW1tYWdlLHN1bW1hbmQsc3VtbWFyLHN1bW1hcnksc3VtbWF0ZSxzdW1tZWQsc3VtbWVyLHN1bW1lcnksc3VtbWlzdCxzdW1taXQsc3VtbWl0eSxzdW1tb24sc3VtbW9ucyxzdW1tdWxhLHN1bW11dCxzdW1uZXIsc3VtcCxzdW1wYWdlLHN1bXBlcixzdW1waCxzdW1waHksc3VtcGl0LHN1bXBsZSxzdW1wbWFuLHN1bXB0ZXIsc3VuLHN1bmJlYW0sc3VuYmlyZCxzdW5ib3csc3VuYnVybixzdW5jdXAsc3VuZGFlLHN1bmRhbmcsc3VuZGFyaSxzdW5kZWssc3VuZGVyLHN1bmRldyxzdW5kaWFsLHN1bmRpayxzdW5kb2csc3VuZG93bixzdW5kcmEsc3VuZHJpLHN1bmRyeSxzdW5lLHN1bmZhbGwsc3VuZmFzdCxzdW5maXNoLHN1bmcsc3VuZ2hhLHN1bmdsbyxzdW5nbG93LHN1bmssc3Vua2VuLHN1bmtldCxzdW5sYW1wLHN1bmxhbmQsc3VubGVzcyxzdW5sZXQsc3VubGlrZSxzdW5saXQsc3VubixzdW5uaWx5LHN1bm51ZCxzdW5ueSxzdW5yYXksc3VucmlzZSxzdW5yb29tLHN1bnNldCxzdW5zbWl0LHN1bnNwb3Qsc3VudCxzdW51cCxzdW53YXJkLHN1bndheSxzdW53YXlzLHN1bndlZWQsc3Vud2lzZSxzdW55aWUsc3VwLHN1cGEsc3VwYXJpLHN1cGF3bixzdXBlLHN1cGVyLHN1cGVyYixzdXBpbmUsc3VwcGVyLHN1cHBpbmcsc3VwcGxlLHN1cHBseSxzdXBwb3J0LHN1cHBvc2Usc3VwcG9zdCxzdXByZW1lLHN1cixzdXJhLHN1cmFoLHN1cmFoaSxzdXJhbCxzdXJhbmFsLHN1cmF0LHN1cmJhc2Usc3VyYmF0ZSxzdXJiZWQsc3VyY29hdCxzdXJjcnVlLHN1cmN1bGksc3VyZCxzdXJkZW50LHN1cmRpdHksc3VyZSxzdXJlbHksc3VyZXMsc3VyZXR0ZSxzdXJldHksc3VyZixzdXJmYWNlLHN1cmZhY3ksc3VyZmVpdCxzdXJmZXIsc3VyZmxlLHN1cmZtYW4sc3VyZnVzZSxzdXJmeSxzdXJnZSxzdXJnZW50LHN1cmdlb24sc3VyZ2VyeSxzdXJnaW5nLHN1cmd5LHN1cmlnYSxzdXJsaWx5LHN1cmx5LHN1cm1hLHN1cm1hcmssc3VybWlzZSxzdXJuYW1lLHN1cm5hcCxzdXJuYXksc3VycGFzcyxzdXJwbHVzLHN1cnJhLHN1cnJleSxzdXJ0YXgsc3VydG91dCxzdXJ2ZXksc3Vydml2ZSxzdXNjZXB0LHN1c2ksc3VzbGlrLHN1c3BlY3Qsc3VzcGVuZCxzdXNwaXJlLHN1c3RhaW4sc3VzdSxzdXN1cnIsc3V0aGVyLHN1dGlsZSxzdXRsZXIsc3V0bGVyeSxzdXRvcixzdXRyYSxzdXR0ZWUsc3V0dGVuLHN1dHRpbixzdXR0bGUsc3V0dXJhbCxzdXR1cmUsc3V1bSxzdXdhcnJvLHN1d2Usc3V6LHN2ZWx0ZSxzd2Esc3dhYixzd2FiYmVyLHN3YWJibGUsc3dhY2ssc3dhY2tlbixzd2FkLHN3YWRkbGUsc3dhZGR5LHN3YWcsc3dhZ2Usc3dhZ2VyLHN3YWdnZXIsc3dhZ2dpZSxzd2FnZ3ksc3dhZ21hbixzd2Fpbixzd2FpcmQsc3dhbGUsc3dhbGVyLHN3YWxpbmcsc3dhbGxldCxzd2FsbG8sc3dhbGxvdyxzd2FtLHN3YW1pLHN3YW1wLHN3YW1wZXIsc3dhbXB5LHN3YW4sc3dhbmcsc3dhbmd5LHN3YW5rLHN3YW5rZXIsc3dhbmt5LHN3YW5uZXIsc3dhbm55LHN3YXAsc3dhcGUsc3dhcHBlcixzd2FyYWosc3dhcmJpZSxzd2FyZCxzd2FyZHksc3dhcmUsc3dhcmYsc3dhcmZlcixzd2FybSxzd2FybWVyLHN3YXJteSxzd2Fycnksc3dhcnQsc3dhcnRoLHN3YXJ0aHksc3dhcnRseSxzd2FydHksc3dhcnZlLHN3YXNoLHN3YXNoZXIsc3dhc2h5LHN3YXQsc3dhdGNoLHN3YXRoLHN3YXRoZSxzd2F0aGVyLHN3YXRoeSxzd2F0dGVyLHN3YXR0bGUsc3dhdmVyLHN3YXksc3dheWVkLHN3YXllcixzd2F5ZnVsLHN3YXlpbmcsc3dlYWwsc3dlYXIsc3dlYXJlcixzd2VhdCxzd2VhdGVkLHN3ZWF0ZXIsc3dlYXRoLHN3ZWF0eSxzd2VkZ2Usc3dlZW55LHN3ZWVwLHN3ZWVwZXIsc3dlZXB5LHN3ZWVyLHN3ZWVyZWQsc3dlZXQsc3dlZXRlbixzd2VldGllLHN3ZWV0bHksc3dlZXR5LHN3ZWdvLHN3ZWxsLHN3ZWxsZWQsc3dlbGxlcixzd2VsbHksc3dlbHAsc3dlbHQsc3dlbHRlcixzd2VsdGgsc3dlbHRyeSxzd2VsdHksc3dlcCxzd2VwdCxzd2VyZCxzd2VydmUsc3dlcnZlcixzd2ljayxzd2lkZ2Usc3dpZnQsc3dpZnRlbixzd2lmdGVyLHN3aWZ0eSxzd2lnLHN3aWdnZXIsc3dpZ2dsZSxzd2lsZSxzd2lsbCxzd2lsbGVyLHN3aW0sc3dpbW1lcixzd2ltbXksc3dpbXksc3dpbmRsZSxzd2luZSxzd2luZWx5LHN3aW5lcnksc3dpbmV5LHN3aW5nLHN3aW5nZSxzd2luZ2VyLHN3aW5nbGUsc3dpbmd5LHN3aW5pc2gsc3dpbmssc3dpbm5leSxzd2lwZSxzd2lwZXIsc3dpcGVzLHN3aXBsZSxzd2lwcGVyLHN3aXB5LHN3aXJkLHN3aXJlLHN3aXJsLHN3aXJseSxzd2lzaCxzd2lzaGVyLHN3aXNoeSxzd2lzcyxzd2l0Y2gsc3dpdGNoeSxzd2l0aCxzd2l0aGUsc3dpdGhlbixzd2l0aGVyLHN3aXZlbCxzd2l2ZXQsc3dpeixzd2l6emxlLHN3b2Isc3dvbGxlbixzd29tLHN3b25rZW4sc3dvb24sc3dvb25lZCxzd29vbnksc3dvb3Asc3dvb3Blcixzd29vc2gsc3dvcmQsc3dvcmUsc3dvcm4sc3dvc2gsc3dvdCxzd290dGVyLHN3b3VuZHMsc3dvdyxzd3VtLHN3dW5nLHN3dW5nZW4sc3d1cmUsc3lhZ3VzaCxzeWJvdGljLHN5Y2Usc3ljZWUsc3ljb2NrLHN5Y29tYSxzeWNvbmlkLHN5Y29udXMsc3ljb3NpcyxzeWUsc3llbml0ZSxzeWxpZCxzeWxsYWIsc3lsbGFiZSxzeWxsYWJpLHN5bGxvZ2Usc3lscGgsc3lscGhpYyxzeWxwaGlkLHN5bHBoeSxzeWx2YSxzeWx2YWUsc3lsdmFnZSxzeWx2YW4sc3lsdmF0ZSxzeWx2aWMsc3lsdmluZSxzeWx2aXRlLHN5bWJpb24sc3ltYmlvdCxzeW1ib2wsc3ltcG9kZSxzeW1wdG9tLHN5bmFjbWUsc3luYWNteSxzeW5hbmdlLHN5bmFwc2Usc3luYXB0ZSxzeW5heGFyLHN5bmF4aXMsc3luYyxzeW5jYXJwLHN5bmNoLHN5bmNocm8sc3luY29wZSxzeW5kaWMsc3luZG9jLHN5bmUsc3luZW1hLHN5bmVyZ3ksc3luZXNpcyxzeW5nYW15LHN5bm9kLHN5bm9kYWwsc3lub2VjeSxzeW5vbnltLHN5bm9wc3ksc3lub3ZpYSxzeW50YW4sc3ludGF4LHN5bnRob2wsc3ludG9teSxzeW50b25lLHN5bnRvbnksc3ludHlwZSxzeW51c2lhLHN5cGhlcixzeXJlLHN5cmluZ2Esc3lyaW5nZSxzeXJpbngsc3lybWEsc3lycGhpZCxzeXJ0LHN5cnRpYyxzeXJ1cCxzeXJ1cGVkLHN5cnVwZXIsc3lydXB5LHN5c3NlbCxzeXN0ZW0sc3lzdG9sZSxzeXN0eWxlLHN5enlneSx0LHRhLHRhYSx0YWFyLHRhYix0YWJhY2luLHRhYmFjdW0sdGFiYW5pZCx0YWJhcmQsdGFiYXJldCx0YWJheGlyLHRhYmJlcix0YWJieSx0YWJlZnksdGFiZWxsYSx0YWJlcm5hLHRhYmVzLHRhYmV0LHRhYmV0aWMsdGFiaWMsdGFiaWQsdGFiaWRseSx0YWJpZmljLHRhYmluZXQsdGFibGEsdGFibGUsdGFibGVhdSx0YWJsZWQsdGFibGVyLHRhYmxlcyx0YWJsZXQsdGFibGluZyx0YWJsb2lkLHRhYm9nLHRhYm9vLHRhYm9vdCx0YWJvcix0YWJvcmVyLHRhYm9yZXQsdGFib3Jpbix0YWJvdXIsdGFicmV0LHRhYnUsdGFidWxhLHRhYnVsYXIsdGFidWxlLHRhYnV0LHRhY2NhZGEsdGFjaCx0YWNoZSx0YWNoaW9sLHRhY2l0LHRhY2l0bHksdGFjayx0YWNrZXIsdGFja2V0LHRhY2tldHksdGFja2V5LHRhY2tpbmcsdGFja2xlLHRhY2tsZWQsdGFja2xlcix0YWNreSx0YWNub2RlLHRhY3NvLHRhY3QsdGFjdGZ1bCx0YWN0aWMsdGFjdGljcyx0YWN0aWxlLHRhY3Rpb24sdGFjdGl0ZSx0YWN0aXZlLHRhY3Rvcix0YWN0dWFsLHRhY3R1cyx0YWQsdGFkZSx0YWRwb2xlLHRhZSx0YWVsLHRhZW4sdGFlbmlhLHRhZW5pYWwsdGFlbmlhbix0YWVuaXRlLHRhZW5uaW4sdGFmZmV0YSx0YWZmZXR5LHRhZmZsZSx0YWZmeSx0YWZpYSx0YWZ0LHRhZndpeix0YWcsdGFnZXRvbCx0YWdnZWQsdGFnZ2VyLHRhZ2dsZSx0YWdneSx0YWdsZXQsdGFnbGlrZSx0YWdsb2NrLHRhZ3JhZyx0YWdzb3JlLHRhZ3RhaWwsdGFndWEsdGFndWFuLHRhZ3dlcmssdGFoYSx0YWhlZW4sdGFoaWwsdGFoaW4sdGFocix0YWhzaWwsdGFodWEsdGFpLHRhaWFoYSx0YWljaCx0YWlnYSx0YWlnbGUsdGFpaG9hLHRhaWwsdGFpbGFnZSx0YWlsZWQsdGFpbGVyLHRhaWxldCx0YWlsZ2UsdGFpbGluZyx0YWlsbGUsdGFpbGxpZSx0YWlsb3IsdGFpbG9yeSx0YWlscGluLHRhaWx5LHRhaWx6ZWUsdGFpbHppZSx0YWltZW4sdGFpbix0YWludCx0YWludG9yLHRhaXBhbix0YWlwbyx0YWlyZ2UsdGFpcmdlcix0YWlybix0YWlzY2gsdGFpc2UsdGFpc3NsZSx0YWl0LHRhaXZlcix0YWl2ZXJzLHRhaXZlcnQsdGFqLHRha2FibGUsdGFrYXIsdGFrZSx0YWtlZnVsLHRha2VuLHRha2VyLHRha2luLHRha2luZyx0YWtpbmdzLHRha29zaXMsdGFrdCx0YWt5LHRha3lyLHRhbCx0YWxhLHRhbGFib24sdGFsYWhpYix0YWxhamUsdGFsYWssdGFsYW8sdGFsYXIsdGFsYXJpLHRhbGFyaWEsdGFsYXJpYyx0YWxheW90LHRhbGJvdCx0YWxjLHRhbGNlcix0YWxja3ksdGFsY29pZCx0YWxjb3NlLHRhbGNvdXMsdGFsY3VtLHRhbGQsdGFsZSx0YWxlZCx0YWxlZnVsLHRhbGVudCx0YWxlcix0YWxlcyx0YWxpLHRhbGlhZ2UsdGFsaWVyYSx0YWxpb24sdGFsaXBhdCx0YWxpcGVkLHRhbGlwZXMsdGFsaXBvdCx0YWxpcyx0YWxpc2F5LHRhbGl0ZSx0YWxpdG9sLHRhbGssdGFsa2VyLHRhbGtmdWwsdGFsa2llLHRhbGtpbmcsdGFsa3ksdGFsbCx0YWxsYWdlLHRhbGxib3ksdGFsbGVyLHRhbGxlcm8sdGFsbGVzLHRhbGxldCx0YWxsaWFyLHRhbGxpZXIsdGFsbGlzLHRhbGxpc2gsdGFsbGl0LHRhbGxpdGgsdGFsbG9lbCx0YWxsb3RlLHRhbGxvdyx0YWxsb3d5LHRhbGx5LHRhbGx5aG8sdGFsbWEsdGFsb24sdGFsb25lZCx0YWxvbmljLHRhbG9uaWQsdGFsb3NlLHRhbHBpZCx0YWxwaWZ5LHRhbHBpbmUsdGFscG9pZCx0YWx0aGliLHRhbHVrLHRhbHVrYSx0YWx1cyx0YWx1dG8sdGFsd2FyLHRhbHdvb2QsdGFtLHRhbWFibGUsdGFtYWJseSx0YW1hbGUsdGFtYW5kdSx0YW1hbnUsdGFtYXJhLHRhbWFyYW8sdGFtYXJpbix0YW1hcyx0YW1hc2hhLHRhbWJhYyx0YW1iZXIsdGFtYm8sdGFtYm9vLHRhbWJvcix0YW1ib3VyLHRhbWUsdGFtZWluLHRhbWVseSx0YW1lcix0YW1pcyx0YW1pc2UsdGFtbHVuZyx0YW1taWUsdGFtbW9jayx0YW1teSx0YW1wLHRhbXBhbGEsdGFtcGFuLHRhbXBhbmcsdGFtcGVyLHRhbXBpbix0YW1waW5nLHRhbXBpb24sdGFtcG9uLHRhbXBvb24sdGFuLHRhbmEsdGFuYWNoLHRhbmFnZXIsdGFuYWlzdCx0YW5hayx0YW5hbix0YW5iYXJrLHRhbmJ1cix0YW5jZWwsdGFuZGFuLHRhbmRlbSx0YW5kbGUsdGFuZG91cix0YW5lLHRhbmcsdGFuZ2EsdGFuZ2VkLHRhbmdlbG8sdGFuZ2VudCx0YW5nZXIsdGFuZ2hhbSx0YW5naGFuLHRhbmdoaW4sdGFuZ2ksdGFuZ2llLHRhbmdrYSx0YW5nbGFkLHRhbmdsZSx0YW5nbGVyLHRhbmdseSx0YW5nbyx0YW5ncmFtLHRhbmdzLHRhbmd1ZSx0YW5ndW0sdGFuZ3VuLHRhbmd5LHRhbmgsdGFuaGEsdGFuaWEsdGFuaWNhLHRhbmllcix0YW5pc3QsdGFuamliLHRhbmpvbmcsdGFuayx0YW5rYSx0YW5rYWdlLHRhbmthaCx0YW5rYXJkLHRhbmtlZCx0YW5rZXIsdGFua2VydCx0YW5rZnVsLHRhbmtsZSx0YW5rbWFuLHRhbmxpbmcsdGFubmFnZSx0YW5uYWljLHRhbm5haW0sdGFubmFzZSx0YW5uYXRlLHRhbm5lZCx0YW5uZXIsdGFubmVyeSx0YW5uaWMsdGFubmlkZSx0YW5uaW4sdGFubmluZyx0YW5ub2lkLHRhbm55bCx0YW5vYSx0YW5xdWFtLHRhbnF1ZW4sdGFucmVjLHRhbnN5LHRhbnRhcmEsdGFudGksdGFudGl2eSx0YW50bGUsdGFudHJhLHRhbnRyaWMsdGFudHJpayx0YW50cnVtLHRhbnR1bSx0YW53b29kLHRhbnlhcmQsdGFuemViLHRhbnppYix0YW56eSx0YW8sdGFvdGFpLHRhb3lpbix0YXAsdGFwYSx0YXBhbG8sdGFwYXMsdGFwYXN2aSx0YXBlLHRhcGVtYW4sdGFwZW4sdGFwZXIsdGFwZXJlZCx0YXBlcmVyLHRhcGVybHksdGFwZXQsdGFwZXRhbCx0YXBldGUsdGFwZXRpLHRhcGV0dW0sdGFwaG9sZSx0YXBpYSx0YXBpb2NhLHRhcGlyLHRhcGlzLHRhcGlzbSx0YXBpc3QsdGFwbGFzaCx0YXBsZXQsdGFwbW9zdCx0YXBuZXQsdGFwb2EsdGFwb3VuLHRhcHBhLHRhcHBhbGwsdGFwcGF1bCx0YXBwZW4sdGFwcGVyLHRhcHBldCx0YXBwaW5nLHRhcHBvb24sdGFwcm9vbSx0YXByb290LHRhcHMsdGFwc3Rlcix0YXB1LHRhcHVsLHRhcXVhLHRhcix0YXJhLHRhcmFmLHRhcmFnZSx0YXJhaXJpLHRhcmFuZCx0YXJhcGgsdGFyYXBpbix0YXJhdGEsdGFyYXRhaCx0YXJhdSx0YXJiZXQsdGFyYm95LHRhcmJ1c2gsdGFyZGlseSx0YXJkaXZlLHRhcmRsZSx0YXJkeSx0YXJlLHRhcmVhLHRhcmVmYSx0YXJlbnRlLHRhcmZhLHRhcmdlLHRhcmdlcix0YXJnZXQsdGFyaG9vZCx0YXJpLHRhcmllLHRhcmlmZix0YXJpbix0YXJpcmljLHRhcmlzaCx0YXJraGFuLHRhcmxpa2UsdGFybWFjLHRhcm1hbix0YXJuLHRhcm5hbCx0YXJuaXNoLHRhcm8sdGFyb2MsdGFyb2Njbyx0YXJvayx0YXJvdCx0YXJwLHRhcnBhbix0YXJwb24sdGFycG90LHRhcnB1bSx0YXJyLHRhcnJhY2ssdGFycmFzLHRhcnJhc3MsdGFycmVkLHRhcnJlcix0YXJyaSx0YXJyaWUsdGFycmllcix0YXJyaWZ5LHRhcnJpbHksdGFycmlzaCx0YXJyb2NrLHRhcnJvdyx0YXJyeSx0YXJzLHRhcnNhbCx0YXJzYWxlLHRhcnNlLHRhcnNpLHRhcnNpYSx0YXJzaWVyLHRhcnNvbWUsdGFyc3VzLHRhcnQsdGFydGFnbyx0YXJ0YW4sdGFydGFuYSx0YXJ0YW5lLHRhcnRhcix0YXJ0ZW4sdGFydGlzaCx0YXJ0bGUsdGFydGxldCx0YXJ0bHksdGFydHJvLHRhcnRyeWwsdGFydmUsdGFyd2VlZCx0YXJ3b29kLHRhcnlhcmQsdGFzYWpvLHRhc2NhbCx0YXNjbyx0YXNoLHRhc2hpZSx0YXNobGlrLHRhc2hyaWYsdGFzayx0YXNrYWdlLHRhc2tlcix0YXNraXQsdGFzbGV0LHRhc3MsdGFzc2Fnbyx0YXNzYWgsdGFzc2FsLHRhc3NhcmQsdGFzc2UsdGFzc2VsLHRhc3NlbHksdGFzc2VyLHRhc3NldCx0YXNzaWUsdGFzc29vLHRhc3RlLHRhc3RlZCx0YXN0ZW4sdGFzdGVyLHRhc3RpbHksdGFzdGluZyx0YXN0eSx0YXN1LHRhdCx0YXRhdXBhLHRhdGJlYix0YXRjaHksdGF0ZSx0YXRlcix0YXRoLHRhdGllLHRhdGluZWssdGF0bGVyLHRhdG91LHRhdG91YXksdGF0c21hbix0YXR0YSx0YXR0ZXIsdGF0dGVyeSx0YXR0aGVyLHRhdHRpZWQsdGF0dGluZyx0YXR0bGUsdGF0dGxlcix0YXR0b28sdGF0dHZhLHRhdHR5LHRhdHUsdGF1LHRhdWdodCx0YXVsYSx0YXVtLHRhdW4sdGF1bnQsdGF1bnRlcix0YXVwZSx0YXVwbyx0YXVwb3UsdGF1cix0YXVyZWFuLHRhdXJpYW4sdGF1cmljLHRhdXJpbmUsdGF1cml0ZSx0YXVyeWwsdGF1dCx0YXV0YXVnLHRhdXRlZCx0YXV0ZW4sdGF1dGl0LHRhdXRseSx0YXV0b2csdGF2LHRhdmUsdGF2ZWxsLHRhdmVyLHRhdmVybix0YXZlcnMsdGF2ZXJ0LHRhdm9sYSx0YXcsdGF3YSx0YXdkcnksdGF3ZXIsdGF3ZXJ5LHRhd2llLHRhd2l0ZSx0YXdrZWUsdGF3a2luLHRhd24sdGF3bmV5LHRhd25pbHksdGF3bmxlLHRhd255LHRhd3BpLHRhd3BpZSx0YXdzLHRhd3NlLHRhd3RpZSx0YXgsdGF4YWJsZSx0YXhhYmx5LHRheGF0b3IsdGF4ZWQsdGF4ZW1lLHRheGVtaWMsdGF4ZXIsdGF4aSx0YXhpYnVzLHRheGljYWIsdGF4aW1hbix0YXhpbmUsdGF4aW5nLHRheGlzLHRheGl0ZSx0YXhpdGljLHRheGxlc3MsdGF4bWFuLHRheG9uLHRheG9yLHRheHBhaWQsdGF4d2F4LHRheHksdGF5LHRheWVyLHRheWlyLHRheXJhLHRheXNhYW0sdGF6aWEsdGNoLHRjaGFpLHRjaGFyaWssdGNoYXN0LHRjaGUsdGNoaWNrLHRjaHUsdGNrLHRlLHRlYSx0ZWFib3gsdGVhYm95LHRlYWNha2UsdGVhY2FydCx0ZWFjaCx0ZWFjaGUsdGVhY2hlcix0ZWFjaHksdGVhY3VwLHRlYWQsdGVhZGlzaCx0ZWFlcix0ZWFleSx0ZWFnbGUsdGVhaXNoLHRlYWlzbSx0ZWFrLHRlYWwsdGVhbGVyeSx0ZWFsZXNzLHRlYW0sdGVhbWFuLHRlYW1lbyx0ZWFtZXIsdGVhbWluZyx0ZWFtbWFuLHRlYW4sdGVhbmFsLHRlYXAsdGVhcG90LHRlYXBveSx0ZWFyLHRlYXJhZ2UsdGVhcmNhdCx0ZWFyZXIsdGVhcmZ1bCx0ZWFyaW5nLHRlYXJsZXQsdGVhcm9vbSx0ZWFycGl0LHRlYXJ0LHRlYXJ5LHRlYXNlLHRlYXNlbCx0ZWFzZXIsdGVhc2hvcCx0ZWFzaW5nLHRlYXNsZXIsdGVhc3ksdGVhdCx0ZWF0ZWQsdGVhdGhlLHRlYXRoZXIsdGVhdGltZSx0ZWF0bWFuLHRlYXR5LHRlYXZlLHRlYXdhcmUsdGVhemUsdGVhemVyLHRlYmJldCx0ZWMsdGVjYSx0ZWNhbGksdGVjaCx0ZWNoaWx5LHRlY2huaWMsdGVjaG91cyx0ZWNoeSx0ZWNrLHRlY29taW4sdGVjb24sdGVjdGFsLHRlY3R1bSx0ZWN1bSx0ZWN1bWEsdGVkLHRlZGRlcix0ZWRnZSx0ZWRpb3VzLHRlZGl1bSx0ZWUsdGVlZGxlLHRlZWwsdGVlbSx0ZWVtZXIsdGVlbWZ1bCx0ZWVtaW5nLHRlZW1zLHRlZW4sdGVlbmFnZSx0ZWVuZXQsdGVlbnMsdGVlbnN5LHRlZW50eSx0ZWVueSx0ZWVyLHRlZXJlcix0ZWVzdCx0ZWV0LHRlZXRhbix0ZWV0ZXIsdGVldGgsdGVldGhlLHRlZXRoeSx0ZWV0aW5nLHRlZXR5LHRlZXZlZSx0ZWZmLHRlZyx0ZWdtZW4sdGVnbWluYSx0ZWd1YSx0ZWd1bGEsdGVndWxhcix0ZWd1bWVuLHRlaHNlZWwsdGVoc2lsLHRlaWNoZXIsdGVpbCx0ZWluZCx0ZWluZGVyLHRlaW9pZCx0ZWpvbix0ZWp1LHRla2lhaCx0ZWtrZSx0ZWtrZW4sdGVrdGl0ZSx0ZWt5YSx0ZWxhbW9uLHRlbGFuZyx0ZWxhcix0ZWxhcnksdGVsZSx0ZWxlZHUsdGVsZWdhLHRlbGVvc3QsdGVsZXJhbix0ZWxlcmd5LHRlbGVzaWEsdGVsZXNpcyx0ZWxldXRvLHRlbGV2b3gsdGVsZmVyLHRlbGZvcmQsdGVsaSx0ZWxpYWwsdGVsaWMsdGVsaWNhbCx0ZWxpdW0sdGVsbCx0ZWxsYWNoLHRlbGxlZSx0ZWxsZXIsdGVsbGluZyx0ZWxsdCx0ZWxvbWUsdGVsb21pYyx0ZWxwYXRoLHRlbHBoZXIsdGVsc29uLHRlbHQsdGVsdXJneSx0ZWx5bix0ZW1hY2hhLHRlbWFuLHRlbWJlLHRlbWJsb3IsdGVtZW5vcyx0ZW1pYWssdGVtaW4sdGVtcCx0ZW1wZXIsdGVtcGVyYSx0ZW1wZXJ5LHRlbXBlc3QsdGVtcGksdGVtcGxhcix0ZW1wbGUsdGVtcGxlZCx0ZW1wbGV0LHRlbXBvLHRlbXBvcmEsdGVtcHJlLHRlbXB0LHRlbXB0ZXIsdGVtc2UsdGVtc2VyLHRlbix0ZW5hYmxlLHRlbmFibHksdGVuYWNlLHRlbmFpLHRlbmFuY3ksdGVuYW50LHRlbmNoLHRlbmQsdGVuZGFudCx0ZW5kZW50LHRlbmRlcix0ZW5kaW5nLHRlbmRvbix0ZW5kb3VyLHRlbmRyaWwsdGVuZHJvbix0ZW5lYnJhLHRlbmVudCx0ZW5lcmFsLHRlbmV0LHRlbmZvbGQsdGVuZyx0ZW5nZXJlLHRlbmd1LHRlbmlibGUsdGVuaW8sdGVubGluZSx0ZW5uZSx0ZW5uZXIsdGVubmlzLHRlbm5pc3ksdGVub24sdGVub25lcix0ZW5vcix0ZW5waW4sdGVucmVjLHRlbnNlLHRlbnNlbHksdGVuc2lmeSx0ZW5zaWxlLHRlbnNpb24sdGVuc2l0eSx0ZW5zaXZlLHRlbnNvbix0ZW5zb3IsdGVudCx0ZW50YWdlLHRlbnRlZCx0ZW50ZXIsdGVudGZ1bCx0ZW50aCx0ZW50aGx5LHRlbnRpZ28sdGVudGlvbix0ZW50bGV0LHRlbnR1cmUsdGVudHksdGVudWF0ZSx0ZW51ZXMsdGVudWlzLHRlbnVpdHksdGVudW91cyx0ZW51cmUsdGVvcGFuLHRlcGFjaGUsdGVwYWwsdGVwZWUsdGVwZWZ5LHRlcGlkLHRlcGlkbHksdGVwb3IsdGVxdWlsYSx0ZXJhLHRlcmFwLHRlcmFzLHRlcmJpYSx0ZXJiaWMsdGVyYml1bSx0ZXJjZWwsdGVyY2VyLHRlcmNldCx0ZXJjaWEsdGVyY2luZSx0ZXJjaW8sdGVyZWJpYyx0ZXJlYnJhLHRlcmVkbyx0ZXJlayx0ZXJldGUsdGVyZXUsdGVyZmV6LHRlcmdhbCx0ZXJnYW50LHRlcmdpdGUsdGVyZ3VtLHRlcm0sdGVybWEsdGVybWFnZSx0ZXJtZW4sdGVybWVyLHRlcm1pbix0ZXJtaW5lLHRlcm1pbmksdGVybWlubyx0ZXJtaXRlLHRlcm1seSx0ZXJtb24sdGVybW9yLHRlcm4sdGVybmEsdGVybmFsLHRlcm5hcix0ZXJuYXJ5LHRlcm5hdGUsdGVybmUsdGVybmVyeSx0ZXJuaW9uLHRlcm5pemUsdGVybmxldCx0ZXJwLHRlcnBhbmUsdGVycGVuZSx0ZXJwaW4sdGVycGluZSx0ZXJyYWNlLHRlcnJhZ2UsdGVycmFpbix0ZXJyYWwsdGVycmFuZSx0ZXJyYXIsdGVycmVuZSx0ZXJyZXQsdGVycmllcix0ZXJyaWZ5LHRlcnJpbmUsdGVycm9uLHRlcnJvcix0ZXJyeSx0ZXJzZSx0ZXJzZWx5LHRlcnNpb24sdGVydGlhLHRlcnRpYWwsdGVydGlhbix0ZXJ0aXVzLHRlcnRvbix0ZXJ2ZWUsdGVyemluYSx0ZXJ6byx0ZXNhY2ssdGVza2VyZSx0ZXNzYXJhLHRlc3NlbCx0ZXNzZXJhLHRlc3QsdGVzdGEsdGVzdGFjeSx0ZXN0YXIsdGVzdGF0YSx0ZXN0YXRlLHRlc3RlLHRlc3RlZCx0ZXN0ZWUsdGVzdGVyLHRlc3Rlcyx0ZXN0aWZ5LHRlc3RpbHksdGVzdGluZyx0ZXN0aXMsdGVzdG9uLHRlc3RvbmUsdGVzdG9vbix0ZXN0b3IsdGVzdHJpbCx0ZXN0dWRvLHRlc3R5LHRldGFuaWMsdGV0YW51cyx0ZXRhbnksdGV0YXJkLHRldGNoLHRldGNoeSx0ZXRlLHRldGVsLHRldGgsdGV0aGVyLHRldGhlcnksdGV0cmEsdGV0cmFjdCx0ZXRyYWQsdGV0cmFuZSx0ZXRyYXpvLHRldHJpYyx0ZXRyb2RlLHRldHJvbGUsdGV0cm9zZSx0ZXRyeWwsdGV0dGVyLHRldHRlcnksdGV0dGl4LHRldWNyaW4sdGV1Zml0LHRldWssdGV2aXNzLHRldyx0ZXdlbCx0ZXdlcix0ZXdpdCx0ZXdseSx0ZXdzb21lLHRleHQsdGV4dGlsZSx0ZXh0bGV0LHRleHRtYW4sdGV4dHVhbCx0ZXh0dXJlLHRleix0ZXprZXJlLHRoLHRoYSx0aGFjayx0aGFja2VyLHRoYWt1cix0aGFsYW1pLHRoYWxlcix0aGFsbGksdGhhbGxpYyx0aGFsbHVzLHRoYW1lbmcsdGhhbix0aGFuYSx0aGFuYWdlLHRoYW5hbix0aGFuZSx0aGFuayx0aGFua2VlLHRoYW5rZXIsdGhhbmtzLHRoYXBlcyx0aGFwc2lhLHRoYXIsdGhhcmYsdGhhcm0sdGhhdCx0aGF0Y2gsdGhhdGNoeSx0aGF0bix0aGF0cyx0aGF1Z2h0LHRoYXZlLHRoYXcsdGhhd2VyLHRoYXduLHRoYXd5LHRoZSx0aGVhaCx0aGVhc3VtLHRoZWF0LHRoZWF0ZXIsdGhlYXRyeSx0aGVhdmUsdGhlYix0aGVjYSx0aGVjYWUsdGhlY2FsLHRoZWNhdGUsdGhlY2lhLHRoZWNpdW0sdGhlY2xhLHRoZWNsYW4sdGhlY29pZCx0aGVlLHRoZWVrLHRoZWVrZXIsdGhlZWxpbix0aGVlbG9sLHRoZWVyLHRoZWV0LHRoZWV6YW4sdGhlZnQsdGhlZ24sdGhlZ25seSx0aGVpbmUsdGhlaXIsdGhlaXJuLHRoZWlycyx0aGVpc20sdGhlaXN0LHRoZWxpdW0sdGhlbSx0aGVtYSx0aGVtYXRhLHRoZW1lLHRoZW1lcix0aGVtaXMsdGhlbXNlbCx0aGVuLHRoZW5hbCx0aGVuYXIsdGhlbmNlLHRoZW9keSx0aGVvcmJvLHRoZW9yZW0sdGhlb3JpYSx0aGVvcmljLHRoZW9ydW0sdGhlb3J5LHRoZW93LHRoZXJhcHksdGhlcmUsdGhlcmVhcyx0aGVyZWF0LHRoZXJlYnksdGhlcmVpbix0aGVyZW9mLHRoZXJlb24sdGhlcmVzLHRoZXJlc2UsdGhlcmV0byx0aGVyZXVwLHRoZXJpYWMsdGhlcmlhbCx0aGVybSx0aGVybWFlLHRoZXJtYWwsdGhlcm1pYyx0aGVybWl0LHRoZXJtbyx0aGVybW9zLHRoZXJvaWQsdGhlc2UsdGhlc2VzLHRoZXNpYWwsdGhlc2lzLHRoZXRhLHRoZXRjaCx0aGV0aWMsdGhldGljcyx0aGV0aW4sdGhldGluZSx0aGV1cmd5LHRoZXcsdGhld2VkLHRoZXd5LHRoZXksdGhleWxsLHRoZXlyZSx0aGlhbWluLHRoaWFzaSx0aGlhc29pLHRoaWFzb3MsdGhpYXN1cyx0aGljayx0aGlja2VuLHRoaWNrZXQsdGhpY2tseSx0aGllZix0aGllbnlsLHRoaWV2ZSx0aGlldmVyLHRoaWcsdGhpZ2dlcix0aGlnaCx0aGlnaGVkLHRoaWdodCx0aGlsayx0aGlsbCx0aGlsbGVyLHRoaWxseSx0aGltYmVyLHRoaW1ibGUsdGhpbix0aGluZSx0aGluZyx0aGluZ2FsLHRoaW5nbHksdGhpbmd1bSx0aGluZ3ksdGhpbmssdGhpbmtlcix0aGlubHksdGhpbm5lcix0aGlvLHRoaW9sLHRoaW9saWMsdGhpb25pYyx0aGlvbnlsLHRoaXIsdGhpcmQsdGhpcmRseSx0aGlybCx0aGlyc3QsdGhpcnN0eSx0aGlydCx0aGlydHksdGhpcyx0aGlzaG93LHRoaXNuLHRoaXNzZW4sdGhpc3RsZSx0aGlzdGx5LHRoaXRoZXIsdGhpdXJhbSx0aGl2ZWwsdGhpeGxlLHRobyx0aG9iLHRob2NodCx0aG9mLHRob2Z0LHRob2tlLHRob2tpc2gsdGhvbGUsdGhvbGksdGhvbG9pLHRob2xvcyx0aG9sdXMsdGhvbix0aG9uZGVyLHRob25lLHRob25nLHRob25nZWQsdGhvbmd5LHRob28sdGhvb2lkLHRob29tLHRob3JhbCx0aG9yYXgsdGhvcmUsdGhvcmlhLHRob3JpYyx0aG9yaW5hLHRob3JpdGUsdGhvcml1bSx0aG9ybix0aG9ybmVkLHRob3JuZW4sdGhvcm55LHRob3JvLHRob3Jvbix0aG9ycCx0aG9ydCx0aG9ydGVyLHRob3NlLHRob3UsdGhvdWdoLHRob3VnaHQsdGhvdXNlLHRob3csdGhvd2VsLHRob3d0LHRocmFjayx0aHJhZXAsdGhyYWlsLHRocmFpbix0aHJhbGwsdGhyYW0sdGhyYW5nLHRocmFwLHRocmFzaCx0aHJhc3QsdGhyYXZlLHRocmF2ZXIsdGhyYXcsdGhyYXduLHRocmVhZCx0aHJlYWR5LHRocmVhcCx0aHJlYXQsdGhyZWUsdGhyZW5lLHRocmVub3MsdGhyZW9zZSx0aHJlc2gsdGhyZXcsdGhyaWNlLHRocmlmdCx0aHJpZnR5LHRocmlsbCx0aHJpbGx5LHRocmltcCx0aHJpbmcsdGhyaXAsdGhyaXBlbCx0aHJpcHMsdGhyaXZlLHRocml2ZW4sdGhyaXZlcix0aHJvLHRocm9hdCx0aHJvYXR5LHRocm9iLHRocm9jayx0aHJvZGR5LHRocm9lLHRocm9uYWwsdGhyb25lLHRocm9uZyx0aHJvdSx0aHJvdWNoLHRocm91Z2gsdGhyb3ZlLHRocm93LHRocm93ZXIsdGhyb3duLHRocnVtLHRocnVtbXksdGhydXNoLHRocnVzaHksdGhydXN0LHRocnV0Y2gsdGhydXYsdGhyeW1zYSx0aHVkLHRodWcsdGh1Z2RvbSx0aHVnZ2VlLHRodWplbmUsdGh1amluLHRodWpvbmUsdGh1anlsLHRodWxpYSx0aHVsaXIsdGh1bGl0ZSx0aHVsaXVtLHRodWxyLHRodWx1dGgsdGh1bWIsdGh1bWJlZCx0aHVtYmVyLHRodW1ibGUsdGh1bWJ5LHRodW1wLHRodW1wZXIsdGh1bmRlcix0aHVuZyx0aHVuZ2UsdGh1b2MsdGh1cmlmeSx0aHVybCx0aHVybSx0aHVybXVzLHRodXJzZSx0aHVydCx0aHVzLHRodXNseSx0aHV0dGVyLHRod2Fjayx0aHdhaXRlLHRod2FydCx0aHdpdGUsdGh5LHRoeWluZSx0aHltYXRlLHRoeW1lLHRoeW1lbGUsdGh5bWVuZSx0aHltaWMsdGh5bWluZSx0aHltb2wsdGh5bW9tYSx0aHltdXMsdGh5bXksdGh5bXlsLHRoeW5uaWQsdGh5cm9pZCx0aHlyc2UsdGh5cnN1cyx0aHlzZWwsdGh5c2VsZix0aHlzZW4sdGksdGlhbmcsdGlhbyx0aWFyLHRpYXJhLHRpYix0aWJieSx0aWJldCx0aWJleSx0aWJpYSx0aWJpYWQsdGliaWFlLHRpYmlhbCx0aWJpYWxlLHRpYnVyb24sdGljLHRpY2FsLHRpY2NhLHRpY2UsdGljZXIsdGljayx0aWNrZWQsdGlja2VuLHRpY2tlcix0aWNrZXQsdGlja2V5LHRpY2tpZSx0aWNraW5nLHRpY2tsZSx0aWNrbGVkLHRpY2tsZXIsdGlja2x5LHRpY2tuZXksdGlja3ksdGljdWwsdGlkLHRpZGFsLHRpZGFsbHksdGlkYml0LHRpZGRsZSx0aWRkbGVyLHRpZGRsZXksdGlkZHksdGlkZSx0aWRlZCx0aWRlZnVsLHRpZGVseSx0aWRld2F5LHRpZGlseSx0aWRpbmcsdGlkaW5ncyx0aWRsZXksdGlkeSx0aWR5aXNtLHRpZSx0aWViYWNrLHRpZWQsdGllbix0aWVwaW4sdGllcix0aWVyY2UsdGllcmNlZCx0aWVyZWQsdGllcmVyLHRpZXRpY2ssdGlld2lnLHRpZmYsdGlmZmFueSx0aWZmaWUsdGlmZmluLHRpZmZpc2gsdGlmZmxlLHRpZmZ5LHRpZnQsdGlmdGVyLHRpZyx0aWdlLHRpZ2VsbGEsdGlnZWxsZSx0aWdlcix0aWdlcmx5LHRpZ2VyeSx0aWdnZXIsdGlnaHQsdGlnaHRlbix0aWdodGx5LHRpZ2h0cyx0aWdsaWMsdGlnbnVtLHRpZ3Jlc3MsdGlncmluZSx0aWdyb2lkLHRpZ3RhZyx0aWtrYSx0aWtrZXIsdGlrbGluLHRpa29yLHRpa3VyLHRpbCx0aWxhaXRlLHRpbGFrYSx0aWxidXJ5LHRpbGRlLHRpbGUsdGlsZWQsdGlsZXIsdGlsZXJ5LHRpbGlrdW0sdGlsaW5nLHRpbGwsdGlsbGFnZSx0aWxsZXIsdGlsbGV5LHRpbGxpdGUsdGlsbG90LHRpbGx5LHRpbG11cyx0aWxwYWgsdGlsdCx0aWx0ZXIsdGlsdGgsdGlsdGluZyx0aWx0dXAsdGlsdHksdGlseWVyLHRpbWFibGUsdGltYXIsdGltYXJhdSx0aW1hd2EsdGltYmFsLHRpbWJhbGUsdGltYmFuZyx0aW1iZSx0aW1iZXIsdGltYmVybix0aW1iZXJ5LHRpbWJvLHRpbWJyZSx0aW1icmVsLHRpbWUsdGltZWQsdGltZWZ1bCx0aW1lbHksdGltZW91cyx0aW1lcix0aW1lcyx0aW1pZCx0aW1pZGx5LHRpbWluZyx0aW1pc2gsdGltaXN0LHRpbW9uLHRpbW9yLHRpbW90aHksdGltcGFuaSx0aW1wYW5vLHRpbix0aW5hbW91LHRpbmNhbCx0aW5jaGVsLHRpbmNsYWQsdGluY3QsdGluZCx0aW5kYWwsdGluZGFsbyx0aW5kZXIsdGluZGVyeSx0aW5lLHRpbmVhLHRpbmVhbCx0aW5lYW4sdGluZWQsdGluZWlkLHRpbmVpbmUsdGluZW1hbix0aW5lb2lkLHRpbmV0eSx0aW5mdWwsdGluZyx0aW5nZSx0aW5nZWQsdGluZ2VyLHRpbmdpLHRpbmdpZCx0aW5nbGUsdGluZ2xlcix0aW5nbHksdGluZ3V5LHRpbmhvcm4sdGluaWx5LHRpbmluZyx0aW5rLHRpbmtlcix0aW5rbGUsdGlua2xlcix0aW5rbHksdGlubGV0LHRpbmxpa2UsdGlubWFuLHRpbm5lZCx0aW5uZXIsdGlubmVyeSx0aW5uZXQsdGlubmlseSx0aW5uaW5nLHRpbm5vY2ssdGlubnksdGlub3NhLHRpbnNlbCx0aW5zbWFuLHRpbnQsdGludGEsdGludGFnZSx0aW50ZWQsdGludGVyLHRpbnRpZSx0aW50aW5nLHRpbnRpc3QsdGludHksdGludHlwZSx0aW53YWxkLHRpbndhcmUsdGlud29yayx0aW55LHRpcCx0aXBidXJuLHRpcGNhcnQsdGlwY2F0LHRpcGUsdGlwZnVsLHRpcGhlYWQsdGlwaXRpLHRpcGxlLHRpcGxlc3MsdGlwbGV0LHRpcG1hbix0aXBtb3N0LHRpcG9uaSx0aXBwZWQsdGlwcGVlLHRpcHBlcix0aXBwZXQsdGlwcGluZyx0aXBwbGUsdGlwcGxlcix0aXBwbHksdGlwcHksdGlwc2lmeSx0aXBzaWx5LHRpcHN0ZXIsdGlwc3ksdGlwdGFpbCx0aXB0aWx0LHRpcHRvZSx0aXB0b3AsdGlwdWxpZCx0aXB1cCx0aXJhZGUsdGlyYWxlZSx0aXJlLHRpcmVkLHRpcmVkbHksdGlyZWRvbSx0aXJlbWFuLHRpcmVyLHRpcmliYSx0aXJpbmcsdGlybCx0aXJtYSx0aXJyLHRpcnJldCx0aXJybGllLHRpcnZlLHRpcndpdCx0aXNhbmUsdGlzYXIsdGlzc3VhbCx0aXNzdWUsdGlzc3VlZCx0aXNzdWV5LHRpc3dpbix0aXQsdGl0YW5pYSx0aXRhbmljLHRpdGFubyx0aXRhbnlsLHRpdGFyLHRpdGJpdCx0aXRlLHRpdGVyLHRpdGZpc2gsdGl0aGFsLHRpdGhlLHRpdGhlcix0aXRoaW5nLHRpdGksdGl0aWFuLHRpdGllbix0aXRsYXJrLHRpdGxlLHRpdGxlZCx0aXRsZXIsdGl0bGlrZSx0aXRsaW5nLHRpdGxpc3QsdGl0bWFsLHRpdG1hbix0aXRva2ksdGl0cmF0ZSx0aXRyZSx0aXR0ZXIsdGl0dGVyeSx0aXR0aWUsdGl0dGxlLHRpdHRsZXIsdGl0dHVwLHRpdHR1cHksdGl0dHksdGl0dWxhcix0aXR1bGUsdGl0dWx1cyx0aXZlcix0aXZvbGksdGl2eSx0aXphLHRpemV1cix0aXp6eSx0amksdGpvc2l0ZSx0bGFjbyx0bWVtYSx0bWVzaXMsdG8sdG9hLHRvYWQsdG9hZGVhdCx0b2FkZXIsdG9hZGVyeSx0b2FkZXNzLHRvYWRpZXIsdG9hZGlzaCx0b2FkbGV0LHRvYWR5LHRvYXN0LHRvYXN0ZWUsdG9hc3Rlcix0b2FzdHksdG9hdCx0b2F0b2EsdG9iYWNjbyx0b2JlLHRvYmluZSx0b2JpcmEsdG9ieSx0b2J5bWFuLHRvY2NhdGEsdG9jaGVyLHRvY2ssdG9jbyx0b2NvbWUsdG9jc2luLHRvY3Vzc28sdG9kLHRvZGF5LHRvZGRlcix0b2RkaWNrLHRvZGRpdGUsdG9kZGxlLHRvZGRsZXIsdG9kZHksdG9kZSx0b2R5LHRvZSx0b2VjYXAsdG9lZCx0b2VsZXNzLHRvZWxpa2UsdG9lbmFpbCx0b2V0b2UsdG9mZix0b2ZmZWUsdG9mZmluZyx0b2ZmaXNoLHRvZmZ5LHRvZnQsdG9mdGVyLHRvZnRtYW4sdG9mdSx0b2csdG9nYSx0b2dhZWQsdG9nYXRhLHRvZ2F0ZSx0b2dhdGVkLHRvZ2dlbCx0b2dnZXJ5LHRvZ2dsZSx0b2dnbGVyLHRvZ2xlc3MsdG9ncyx0b2d0LHRvZ3VlLHRvaGVyLHRvaGVyb2EsdG9obyx0b2h1bmdhLHRvaSx0b2lsLHRvaWxlZCx0b2lsZXIsdG9pbGV0LHRvaWxmdWwsdG9pbGluZyx0b2lzZSx0b2l0LHRvaXRpc2gsdG9pdHksdG9rYXksdG9rZSx0b2tlbix0b2tlbmVkLHRva28sdG9rb3BhdCx0b2wsdG9sYW4sdG9sYW5lLHRvbGQsdG9sZG8sdG9sZSx0b2xpdGUsdG9sbCx0b2xsYWdlLHRvbGxlcix0b2xsZXJ5LHRvbGxpbmcsdG9sbG1hbix0b2xseSx0b2xzZXksdG9sdCx0b2x0ZXIsdG9sdSx0b2x1YXRlLHRvbHVlbmUsdG9sdWljLHRvbHVpZGUsdG9sdWlkbyx0b2x1b2wsdG9sdXlsLHRvbHlsLHRvbWFuLHRvbWF0byx0b21iLHRvbWJhYyx0b21iYWwsdG9tYmUsdG9tYmljLHRvbWJsZXQsdG9tYm9sYSx0b21ib2xvLHRvbWJveSx0b21jYXQsdG9tY29kLHRvbWUsdG9tZWZ1bCx0b21lbGV0LHRvbWVudCx0b21mb29sLHRvbWlhbCx0b21pbix0b21pc2gsdG9taXVtLHRvbWpvaG4sdG9ta2luLHRvbW15LHRvbW5vdXAsdG9tb3JuLHRvbW9zaXMsdG9tcG9uLHRvbXRhdGUsdG9tdGl0LHRvbix0b25hbCx0b25hbGx5LHRvbmFudCx0b25kaW5vLHRvbmUsdG9uZWQsdG9uZW1lLHRvbmVyLHRvbmV0aWMsdG9uZyx0b25nYSx0b25nZXIsdG9uZ21hbix0b25ncyx0b25ndWUsdG9uZ3VlZCx0b25ndWVyLHRvbmd1ZXksdG9uaWMsdG9uaWZ5LHRvbmlnaHQsdG9uaXNoLHRvbml0ZSx0b25qb24sdG9uayx0b25raW4sdG9ubGV0LHRvbm5hZ2UsdG9ubmVhdSx0b25uZXIsdG9ubmlzaCx0b25vdXMsdG9uc2lsLHRvbnNvcix0b25zdXJlLHRvbnRpbmUsdG9udXMsdG9ueSx0b28sdG9vZGxlLHRvb2ssdG9va2VuLHRvb2wsdG9vbGJveCx0b29sZXIsdG9vbGluZyx0b29sbWFuLHRvb20sdG9vbWx5LHRvb24sdG9vcCx0b29yaWUsdG9vcm9jayx0b29yb28sdG9vc2gsdG9vdCx0b290ZXIsdG9vdGgsdG9vdGhlZCx0b290aGVyLHRvb3RoeSx0b290bGUsdG9vdGxlcix0b290c3ksdG9vemxlLHRvb3pvbyx0b3AsdG9wYXJjaCx0b3Bhc3MsdG9wYXosdG9wYXp5LHRvcGNhcCx0b3BjYXN0LHRvcGNvYXQsdG9wZSx0b3BlZSx0b3BlbmcsdG9wZXBvLHRvcGVyLHRvcGZ1bGwsdG9waCx0b3BodXMsdG9waSx0b3BpYSx0b3BpYXJ5LHRvcGljLHRvcGljYWwsdG9wa25vdCx0b3BsZXNzLHRvcGxpa2UsdG9wbGluZSx0b3BtYW4sdG9wbWFzdCx0b3Btb3N0LHRvcG8sdG9wb255bSx0b3BwZWQsdG9wcGVyLHRvcHBpbmcsdG9wcGxlLHRvcHBsZXIsdG9wcGx5LHRvcHB5LHRvcHJhaWwsdG9wcm9wZSx0b3BzLHRvcHNhaWwsdG9wc2lkZSx0b3BzbCx0b3BzbWFuLHRvcHNvaWwsdG9wdGFpbCx0b3B3aXNlLHRvcXVlLHRvcix0b3JhLHRvcmFoLHRvcmFsLHRvcmFuLHRvcmMsdG9yY2VsLHRvcmNoLHRvcmNoZXIsdG9yY2hvbix0b3JlLHRvcmVkLHRvcmVybyx0b3JmZWwsdG9yZ29jaCx0b3JpYyx0b3JpaSx0b3JtYSx0b3JtZW4sdG9ybWVudCx0b3JtaW5hLHRvcm4sdG9ybmFkZSx0b3JuYWRvLHRvcm5hbCx0b3JuZXNlLHRvcm5leSx0b3Jub3RlLHRvcm51cyx0b3JvLHRvcm9pZCx0b3Jvc2UsdG9yb3VzLHRvcnBlZG8sdG9ycGVudCx0b3JwaWQsdG9ycGlmeSx0b3Jwb3IsdG9ycXVlLHRvcnF1ZWQsdG9ycXVlcyx0b3JyZWZ5LHRvcnJlbnQsdG9ycmlkLHRvcnNhZGUsdG9yc2UsdG9yc2VsLHRvcnNpbGUsdG9yc2lvbix0b3JzaXZlLHRvcnNrLHRvcnNvLHRvcnQsdG9ydGEsdG9ydGVhdSx0b3J0aWxlLHRvcnRpdmUsdG9ydHVsYSx0b3J0dXJlLHRvcnUsdG9ydWxhLHRvcnVsaW4sdG9ydWx1cyx0b3J1cyx0b3J2ZSx0b3J2aWQsdG9ydml0eSx0b3J2b3VzLHRvcnksdG9zaCx0b3NoZXIsdG9zaGVyeSx0b3NobHksdG9zaHksdG9zaWx5LHRvc3MsdG9zc2VyLHRvc3NpbHksdG9zc2luZyx0b3NzcG90LHRvc3N1cCx0b3NzeSx0b3N0LHRvc3Rvbix0b3N5LHRvdCx0b3RhbCx0b3RhbGx5LHRvdGFyYSx0b3RjaGthLHRvdGUsdG90ZW0sdG90ZW1pYyx0b3RlbXksdG90ZXIsdG90aGVyLHRvdGllbnQsdG90byx0b3RvcmEsdG90cXVvdCx0b3R0ZXIsdG90dGVyeSx0b3R0aW5nLHRvdHRsZSx0b3R0eSx0b3R1YXZhLHRvdHVtLHRvdHksdG90eW1hbix0b3UsdG91Y2FuLHRvdWNoLHRvdWNoZWQsdG91Y2hlcix0b3VjaHksdG91Zyx0b3VnaCx0b3VnaGVuLHRvdWdobHksdG91Z2h0LHRvdWxkLHRvdW1uYWgsdG91cCx0b3VwZWUsdG91cGVlZCx0b3VwZXQsdG91cix0b3VyYWNvLHRvdXJlcix0b3VyaW5nLHRvdXJpc20sdG91cmlzdCx0b3VyaXplLHRvdXJuLHRvdXJuYXksdG91cm5lZSx0b3VybmV5LHRvdXJ0ZSx0b3VzY2hlLHRvdXNlLHRvdXNlcix0b3VzbGUsdG91c2x5LHRvdXN5LHRvdXQsdG91dGVyLHRvdmFyLHRvdyx0b3dhYmxlLHRvd2FnZSx0b3dhaSx0b3dhbix0b3dhcmQsdG93YXJkcyx0b3dib2F0LHRvd2NvY2ssdG93ZCx0b3dlbCx0b3dlbHJ5LHRvd2VyLHRvd2VyZWQsdG93ZXJ5LHRvd2dodCx0b3doZWFkLHRvd2hlZSx0b3dpbmcsdG93a2F5LHRvd2xpa2UsdG93bGluZSx0b3dtYXN0LHRvd24sdG93bmVkLHRvd25lZSx0b3duZXIsdG93bmV0LHRvd25mdWwsdG93bmlmeSx0b3duaXNoLHRvd25pc3QsdG93bmxldCx0b3dubHksdG93bm1hbix0b3dueSx0b3dwYXRoLHRvd3JvcGUsdG93c2VyLHRvd3ksdG94LHRveGEsdG94YW1pbix0b3hjYXRsLHRveGVtaWEsdG94ZW1pYyx0b3hpYyx0b3hpY2FsLHRveGljdW0sdG94aWZlcix0b3hpbix0b3hpdHksdG94b2lkLHRveG9uLHRveG9uZSx0b3hvc2lzLHRveG90YWUsdG95LHRveWRvbSx0b3llcix0b3lmdWwsdG95aW5nLHRveWlzaCx0b3lsYW5kLHRveWxlc3MsdG95bGlrZSx0b3ltYW4sdG95b24sdG95c2hvcCx0b3lzb21lLHRveXRvd24sdG95d29ydCx0b3plLHRvemVlLHRvemVyLHRyYSx0cmFiYWwsdHJhYmFudCx0cmFiZWEsdHJhYmVhZSx0cmFidWNoLHRyYWNlLHRyYWNlcix0cmFjZXJ5LHRyYWNoZWEsdHJhY2hsZSx0cmFjaW5nLHRyYWNrLHRyYWNrZWQsdHJhY2tlcix0cmFjdCx0cmFjdG9yLHRyYWRhbCx0cmFkZSx0cmFkZXIsdHJhZGluZyx0cmFkaXRlLHRyYWR1Y2UsdHJhZHksdHJhZmZpYyx0cmFnLHRyYWdhbCx0cmFnZWR5LHRyYWdpLHRyYWdpYyx0cmFndXMsdHJhaCx0cmFoZWVuLHRyYWlrLHRyYWlsLHRyYWlsZXIsdHJhaWx5LHRyYWluLHRyYWluZWQsdHJhaW5lZSx0cmFpbmVyLHRyYWlueSx0cmFpcHNlLHRyYWl0LHRyYWl0b3IsdHJhamVjdCx0cmFqZXQsdHJhbGlyYSx0cmFtLHRyYW1hLHRyYW1hbCx0cmFtY2FyLHRyYW1lLHRyYW1mdWwsdHJhbW1hbix0cmFtbWVsLHRyYW1tZXIsdHJhbW1vbix0cmFtcCx0cmFtcGVyLHRyYW1wbGUsdHJhbXBvdCx0cmFtd2F5LHRyYW5jZSx0cmFuY2VkLHRyYW5lZW4sdHJhbmssdHJhbmthLHRyYW5rZXIsdHJhbmt1bSx0cmFua3ksdHJhbnNpdCx0cmFuc29tLHRyYW50LHRyYW50ZXIsdHJhcCx0cmFwZXMsdHJhcGV6ZSx0cmFwcGVkLHRyYXBwZXIsdHJhcHB5LHRyYXBzLHRyYXNoLHRyYXNoaXAsdHJhc2h5LHRyYXNzLHRyYXN5LHRyYXVtYSx0cmF2YWlsLHRyYXZhbGUsdHJhdmUsdHJhdmVsLHRyYXZpcyx0cmF2b2lzLHRyYXZveSx0cmF3bCx0cmF3bGVyLHRyYXksdHJheWZ1bCx0cmVhY2xlLHRyZWFjbHksdHJlYWQsdHJlYWRlcix0cmVhZGxlLHRyZWFzb24sdHJlYXQsdHJlYXRlZSx0cmVhdGVyLHRyZWF0b3IsdHJlYXR5LHRyZWJsZSx0cmVibHksdHJlZGRsZSx0cmVlLHRyZWVkLHRyZWVmdWwsdHJlZWlmeSx0cmVlbGV0LHRyZWVtYW4sdHJlZW4sdHJlZXRvcCx0cmVleSx0cmVmLHRyZWZsZSx0cmVmb2lsLHRyZWdlcmcsdHJlZ29obSx0cmVoYWxhLHRyZWssdHJla2tlcix0cmVsbGlzLHRyZW1ibGUsdHJlbWJseSx0cmVtaWUsdHJlbW9sbyx0cmVtb3IsdHJlbmFpbCx0cmVuY2gsdHJlbmQsdHJlbmRsZSx0cmVudGFsLHRyZXBhbix0cmVwYW5nLHRyZXBpZCx0cmVzcyx0cmVzc2VkLHRyZXNzb24sdHJlc3N5LHRyZXN0LHRyZXN0bGUsdHJldCx0cmV2ZXQsdHJld3MsdHJleSx0cmksdHJpYWJsZSx0cmlhY2UsdHJpYWNpZCx0cmlhY3QsdHJpYWQsdHJpYWRpYyx0cmlhZW5lLHRyaWFnZSx0cmlhbCx0cmlhbWlkLHRyaWFyY2gsdHJpYXJpaSx0cmlhdGljLHRyaWF4b24sdHJpYXppbix0cmlhem8sdHJpYmFkZSx0cmliYWR5LHRyaWJhbCx0cmliYXNlLHRyaWJibGUsdHJpYmUsdHJpYmxldCx0cmlicmFjLHRyaWJ1YWwsdHJpYnVuYSx0cmlidW5lLHRyaWJ1dGUsdHJpY2EsdHJpY2FlLHRyaWNhcix0cmljZSx0cmljZXBzLHRyaWNoaSx0cmljaGlhLHRyaWNoeSx0cmljayx0cmlja2VyLHRyaWNrbGUsdHJpY2tseSx0cmlja3N5LHRyaWNreSx0cmljbGFkLHRyaWNvcm4sdHJpY290LHRyaWRlbnQsdHJpZHVhbix0cmlkdXVtLHRyaWVkLHRyaWVkbHksdHJpZW5lLHRyaWVucyx0cmllcix0cmlmYSx0cmlmaWQsdHJpZmxlLHRyaWZsZXIsdHJpZmxldCx0cmlmb2lsLHRyaWZvbGQsdHJpZm9seSx0cmlmb3JtLHRyaWcsdHJpZ2FteSx0cmlnZ2VyLHRyaWdsaWQsdHJpZ2xvdCx0cmlnbHksdHJpZ29uLHRyaWdvbmUsdHJpZ3JhbSx0cmlneW4sdHJpa2F5YSx0cmlrZSx0cmlrZXIsdHJpa2V0byx0cmlraXIsdHJpbGFiZSx0cmlsYnksdHJpbGl0LHRyaWxpdGUsdHJpbGl0aCx0cmlsbCx0cmlsbGV0LHRyaWxsaSx0cmlsbG8sdHJpbG9iZSx0cmlsb2d5LHRyaW0sdHJpbWVyLHRyaW1seSx0cmltbWVyLHRyaW4sdHJpbmFsLHRyaW5hcnksdHJpbmRsZSx0cmluZSx0cmluZWx5LHRyaW5nbGUsdHJpbml0eSx0cmluayx0cmlua2V0LHRyaW5rbGUsdHJpbm9kZSx0cmlub2wsdHJpbnRsZSx0cmlvLHRyaW9ib2wsdHJpb2RlLHRyaW9kaWEsdHJpb2xlLHRyaW9sZXQsdHJpb255bSx0cmlvcix0cmlvc2UsdHJpcCx0cmlwYWwsdHJpcGFyYSx0cmlwYXJ0LHRyaXBlLHRyaXBlbCx0cmlwZXJ5LHRyaXBsZSx0cmlwbGV0LHRyaXBsZXgsdHJpcGx1bSx0cmlwbHksdHJpcG9kLHRyaXBvZHksdHJpcG9saSx0cmlwb3MsdHJpcHBlcix0cmlwcGV0LHRyaXBwbGUsdHJpcHNpcyx0cmlweSx0cmlyZW1lLHRyaXNhbHQsdHJpc2F6byx0cmlzZWN0LHRyaXNlbWUsdHJpc2huYSx0cmlzbWljLHRyaXNtdXMsdHJpc29tZSx0cmlzb215LHRyaXN0LHRyaXN1bCx0cmlzdWxhLHRyaXRhcGgsdHJpdGUsdHJpdGVseSx0cml0aXNoLHRyaXRpdW0sdHJpdG9sbyx0cml0b24sdHJpdG9uZSx0cml0b3IsdHJpdHlsLHRyaXVtcGgsdHJpdW5hbCx0cml1bmUsdHJpdXJpZCx0cml2YW50LHRyaXZldCx0cml2aWEsdHJpdmlhbCx0cml2aXVtLHRyaXZ2ZXQsdHJpem9pYyx0cml6b25lLHRyb2F0LHRyb2NhLHRyb2Nhcix0cm9jaGFsLHRyb2NoZSx0cm9jaGVlLHRyb2NoaSx0cm9jaGlkLHRyb2NodXMsdHJvY2ssdHJvY28sdHJvZCx0cm9kZGVuLHRyb2RlLHRyb2Z0LHRyb2csdHJvZ2dlcix0cm9nZ2luLHRyb2dvbix0cm9ncyx0cm9ndWUsdHJvaWthLHRyb2tlLHRyb2tlcix0cm9sbCx0cm9sbGVyLHRyb2xsZXksdHJvbGxvbCx0cm9sbG9wLHRyb2xseSx0cm9tYmEsdHJvbWJlLHRyb21tZWwsdHJvbXAsdHJvbXBlLHRyb21waWwsdHJvbXBsZSx0cm9uLHRyb25hLHRyb25hZ2UsdHJvbmMsdHJvbmUsdHJvbmVyLHRyb29saWUsdHJvb3AsdHJvb3Blcix0cm9vdCx0cm9wYWwsdHJvcGFyeSx0cm9wYXRlLHRyb3BlLHRyb3BlaWMsdHJvcGVyLHRyb3BoYWwsdHJvcGhpLHRyb3BoaWMsdHJvcGh5LHRyb3BpYyx0cm9waW5lLHRyb3Bpc20sdHJvcGlzdCx0cm9wb3lsLHRyb3B5bCx0cm90LHRyb3RoLHRyb3RsZXQsdHJvdG9sLHRyb3R0ZXIsdHJvdHRpZSx0cm90dHksdHJvdHlsLHRyb3VibGUsdHJvdWJseSx0cm91Z2gsdHJvdWdoeSx0cm91bmNlLHRyb3VwZSx0cm91cGVyLHRyb3VzZSx0cm91c2VyLHRyb3V0LHRyb3V0ZXIsdHJvdXR5LHRyb3ZlLHRyb3Zlcix0cm93LHRyb3dlbCx0cm93aW5nLHRyb3dtYW4sdHJvd3RoLHRyb3ksdHJ1YW5jeSx0cnVhbnQsdHJ1Yix0cnVidSx0cnVjZSx0cnVjaWFsLHRydWNrLHRydWNrZXIsdHJ1Y2tsZSx0cnVja3MsdHJ1ZGRvLHRydWRnZSx0cnVkZ2VuLHRydWRnZXIsdHJ1ZSx0cnVlcix0cnVmZix0cnVmZmxlLHRydWcsdHJ1aXNoLHRydWlzbSx0cnVsbCx0cnVsbGVyLHRydWxsbyx0cnVseSx0cnVtbWVsLHRydW1wLHRydW1wZXIsdHJ1bXBldCx0cnVtcGgsdHJ1bXBpZSx0cnVuLHRydW5jYWwsdHJ1bmNoLHRydW5kbGUsdHJ1bmssdHJ1bmtlZCx0cnVubmVsLHRydXNoLHRydXNpb24sdHJ1c3MsdHJ1c3NlZCx0cnVzc2VyLHRydXN0LHRydXN0ZWUsdHJ1c3Rlbix0cnVzdGVyLHRydXN0bGUsdHJ1c3R5LHRydXRoLHRydXRoeSx0cnV2YXQsdHJ5LHRyeWdvbix0cnlpbmcsdHJ5bWEsdHJ5b3V0LHRyeXAsdHJ5cGEsdHJ5cGFuLHRyeXBzaW4sdHJ5cHRpYyx0cnlzYWlsLHRyeXN0LHRyeXN0ZXIsdHJ5dCx0c2FkaWssdHNhbWJhLHRzYW50c2EsdHNhcix0c2FyZG9tLHRzYXJpbmEsdHNhdGxlZSx0c2VyZSx0c2V0c2UsdHNpYSx0c2luZSx0c3QsdHN1YmEsdHN1Ym8sdHN1bix0c3VuYW1pLHRzdW5ndHUsdHUsdHVhLHR1YW4sdHVhcm4sdHVhcnQsdHVhdGFyYSx0dWF0ZXJhLHR1YXRoLHR1Yix0dWJhLHR1YmFlLHR1YmFnZSx0dWJhbCx0dWJhcix0dWJhdGUsdHViYmEsdHViYmFsLHR1YmJlY2ssdHViYmVyLHR1YmJpZSx0dWJiaW5nLHR1YmJpc2gsdHViYm9lLHR1YmJ5LHR1YmUsdHViZWZ1bCx0dWJlbGV0LHR1YmVtYW4sdHViZXIsdHViZXJpbix0dWJmaXNoLHR1YmZ1bCx0dWJpY2VuLHR1YmlmZXIsdHViaWcsdHViaWssdHViaW5nLHR1YmxldCx0dWJsaWtlLHR1Ym1hbix0dWJ1bGFyLHR1YnVsZSx0dWJ1bGV0LHR1YnVsaSx0dWJ1bHVzLHR1Y2hpdCx0dWNodW4sdHVjayx0dWNrZXIsdHVja2V0LHR1Y2tpbmcsdHVja25lcix0dWNrdG9vLHR1Y2t5LHR1Y3VtLHR1Y3VtYSx0dWN1bWFuLHR1ZGVsLHR1ZSx0dWVpcm9uLHR1ZmEsdHVmYW4sdHVmZix0dWZmZXQsdHVmZmluZyx0dWZ0LHR1ZnRlZCx0dWZ0ZXIsdHVmdGlseSx0dWZ0aW5nLHR1ZnRsZXQsdHVmdHksdHVnLHR1Z2JvYXQsdHVnZ2VyLHR1Z2dlcnksdHVnZ2luZyx0dWdocmEsdHVnbGVzcyx0dWdsaWtlLHR1Z21hbix0dWdyaWssdHVndWksdHVpLHR1aWssdHVpbGxlLHR1aWx5aWUsdHVpc20sdHVpdGlvbix0dWl0aXZlLHR1a2UsdHVrcmEsdHVsYSx0dWxhcmUsdHVsYXNpLHR1bGNoYW4sdHVsY2hpbix0dWxlLHR1bGlhYyx0dWxpcCx0dWxpcHksdHVsaXNhbix0dWxsZSx0dWxzaSx0dWx3YXIsdHVtLHR1bWFzaGEsdHVtYmFrLHR1bWJsZSx0dW1ibGVkLHR1bWJsZXIsdHVtYmx5LHR1bWJyZWwsdHVtZSx0dW1lZnksdHVtaWQsdHVtaWRseSx0dW1tYWxzLHR1bW1lbCx0dW1tZXIsdHVtbW9jayx0dW1teSx0dW1vcix0dW1vcmVkLHR1bXAsdHVtdHVtLHR1bXVsYXIsdHVtdWxpLHR1bXVsdCx0dW11bHVzLHR1bix0dW5hLHR1bmFibGUsdHVuYWJseSx0dW5jYSx0dW5kLHR1bmRlcix0dW5kaXNoLHR1bmRyYSx0dW5kdW4sdHVuZSx0dW5lZCx0dW5lZnVsLHR1bmVyLHR1bmZ1bCx0dW5nLHR1bmdhdGUsdHVuZ28sdHVuaG9vZix0dW5pYyx0dW5pY2luLHR1bmljbGUsdHVuaW5nLHR1bmlzaCx0dW5pc3QsdHVuayx0dW5rZXQsdHVubGlrZSx0dW5tb290LHR1bm5hLHR1bm5lbCx0dW5uZXIsdHVubmVyeSx0dW5ub3IsdHVubnksdHVubyx0dW51LHR1bnksdHVwLHR1cGFyYSx0dXBlayx0dXBlbG8sdHVwaWssdHVwbWFuLHR1cHVuYSx0dXF1ZSx0dXIsdHVyYWNpbix0dXJiLHR1cmJhbix0dXJiYXJ5LHR1cmJlaCx0dXJiaWQsdHVyYmluZSx0dXJiaXQsdHVyYml0aCx0dXJibyx0dXJib3QsdHVyY28sdHVyZCx0dXJkaW5lLHR1cmRvaWQsdHVyZWVuLHR1cmYsdHVyZmFnZSx0dXJmZG9tLHR1cmZlZCx0dXJmZW4sdHVyZmluZyx0dXJmaXRlLHR1cmZtYW4sdHVyZnksdHVyZ2VudCx0dXJnaWQsdHVyZ2l0ZSx0dXJnb2lkLHR1cmdvcix0dXJneSx0dXJpbyx0dXJpb24sdHVyaml0ZSx0dXJrLHR1cmtlbix0dXJrZXksdHVya2lzLHR1cmtsZSx0dXJtLHR1cm1hLHR1cm1lbnQsdHVybWl0LHR1cm1vaWwsdHVybix0dXJuY2FwLHR1cm5kdW4sdHVybmVkLHR1cm5lbCx0dXJuZXIsdHVybmVyeSx0dXJuZXksdHVybmluZyx0dXJuaXAsdHVybmlweSx0dXJuaXgsdHVybmtleSx0dXJub2ZmLHR1cm5vdXQsdHVybnBpbix0dXJucm93LHR1cm5zLHR1cm51cCx0dXJwLHR1cnBldGgsdHVycGlkLHR1cnBzLHR1cnIsdHVycmV0LHR1cnNlLHR1cnNpbyx0dXJ0bGUsdHVydGxlcix0dXJ0bGV0LHR1cnRvc2EsdHVydXJpLHR1cnVzLHR1cndhcix0dXNjaGUsdHVzaCx0dXNoZWQsdHVzaGVyLHR1c2hlcnksdHVzayx0dXNrYXIsdHVza2VkLHR1c2tlcix0dXNraXNoLHR1c2t5LHR1c3NhaCx0dXNzYWwsdHVzc2VyLHR1c3Npcyx0dXNzaXZlLHR1c3NsZSx0dXNzb2NrLHR1c3NvcmUsdHVzc3VyLHR1dCx0dXRhbmlhLHR1dGJhbGwsdHV0ZSx0dXRlZSx0dXRlbGEsdHV0ZWxhcix0dXRlbmFnLHR1dGgsdHV0aW4sdHV0bHksdHV0bWFuLHR1dG9yLHR1dG9yZXIsdHV0b3JseSx0dXRvcnksdHV0b3llcix0dXRyZXNzLHR1dHJpY2UsdHV0cml4LHR1dHMsdHV0c2FuLHR1dHN0ZXIsdHV0dGksdHV0dHksdHV0dSx0dXR1bHVzLHR1dHdvcmssdHV3aSx0dXgsdHV4ZWRvLHR1eWVyZSx0dXphLHR1enpsZSx0d2EsdHdhZGRsZSx0d2FkZGx5LHR3YWRkeSx0d2FlLHR3YWdnZXIsdHdhaW4sdHdhaXRlLHR3YWwsdHdhbGUsdHdhbHQsdHdhbmcsdHdhbmdlcix0d2FuZ2xlLHR3YW5neSx0d2Fuayx0d2Fua2VyLHR3YW5rbGUsdHdhbmt5LHR3YW50LHR3YXJseSx0d2FzLHR3YXNvbWUsdHdhdCx0d2F0dGxlLHR3YXksdHdhenp5LHR3ZWFnLHR3ZWFrLHR3ZWFrZXIsdHdlYWt5LHR3ZWUsdHdlZWQsdHdlZWRlZCx0d2VlZGxlLHR3ZWVkeSx0d2VlZyx0d2VlbCx0d2Vlbix0d2VlbnksdHdlZXNoLHR3ZWVzaHQsdHdlZXN0LHR3ZWV0LHR3ZWV0ZXIsdHdlZXplLHR3ZWV6ZXIsdHdlaWwsdHdlbGZ0aCx0d2VsdmUsdHdlbnR5LHR3ZXJlLHR3ZXJwLHR3aWJpbCx0d2ljZSx0d2ljZXIsdHdpY2V0LHR3aWNrLHR3aWRkbGUsdHdpZGRseSx0d2lmb2lsLHR3aWZvbGQsdHdpZyx0d2lnZnVsLHR3aWdnZWQsdHdpZ2dlbix0d2lnZ2VyLHR3aWdneSx0d2lnbGV0LHR3aWxpdCx0d2lsbCx0d2lsbGVkLHR3aWxsZXIsdHdpbGx5LHR3aWx0LHR3aW4sdHdpbmRsZSx0d2luZSx0d2luZXIsdHdpbmdlLHR3aW5nbGUsdHdpbmlzbSx0d2luayx0d2lua2xlLHR3aW5rbHksdHdpbmx5LHR3aW5uZWQsdHdpbm5lcix0d2ludGVyLHR3aW55LHR3aXJlLHR3aXJrLHR3aXJsLHR3aXJsZXIsdHdpcmx5LHR3aXNjYXIsdHdpc2VsLHR3aXN0LHR3aXN0ZWQsdHdpc3Rlcix0d2lzdGxlLHR3aXN0eSx0d2l0LHR3aXRjaCx0d2l0Y2h5LHR3aXRlLHR3aXR0ZW4sdHdpdHRlcix0d2l0dHksdHdpeHQsdHdpenpsZSx0d28sdHdvZm9sZCx0d29saW5nLHR3b25lc3MsdHdvc29tZSx0eWNoaXNtLHR5Y2hpdGUsdHljb29uLHR5ZGR5bix0eWRpZSx0eWUsdHllZSx0eWcsdHlpbmcsdHlrZSx0eWtlbix0eWtoYW5hLHR5a2luZyx0eWxhcnVzLHR5bGlvbix0eWxvbWEsdHlsb3BvZCx0eWxvc2UsdHlsb3Npcyx0eWxvdGUsdHlsb3RpYyx0eWxvdHVzLHR5bHVzLHR5bXAsdHltcGFuLHR5bXBhbmEsdHltcGFuaSx0eW1wYW55LHR5bmQsdHlwYWwsdHlwZSx0eXBlcix0eXBlc2V0LHR5cGhpYSx0eXBoaWMsdHlwaGxvbix0eXBob2lkLHR5cGhvb24sdHlwaG9zZSx0eXBob3VzLHR5cGh1cyx0eXBpYyx0eXBpY2EsdHlwaWNhbCx0eXBpY29uLHR5cGljdW0sdHlwaWZ5LHR5cGlzdCx0eXBvLHR5cG9iYXIsdHlwb255bSx0eXBwLHR5cHksdHlyYW5ueSx0eXJhbnQsdHlyZSx0eXJvLHR5cm9tYSx0eXJvbmUsdHlyb25pYyx0eXJvc3lsLHR5c3RlLHR5dCx0em9sa2luLHR6b250bGUsdSx1YW5nLHVheWViLHViZXJhbnQsdWJlcm91cyx1YmVydHksdWJpLHViaWV0eSx1YmlxdWl0LHVidXNzdSx1Y2tpYSx1ZGFsLHVkYWxlcix1ZGFsbGVyLHVkYWxtYW4sdWRhc2ksdWRkZXIsdWRkZXJlZCx1ZGVsbCx1ZG8sdWcsdWdoLHVnbGlmeSx1Z2xpbHksdWdseSx1Z3NvbWUsdWhsYW4sdWhsbG8sdWh0c29uZyx1aWx5LHVpbmFsLHVpbnRqaWUsdWl0c3Bhbix1amksdWthc2UsdWtlLHVraXlveWUsdWt1bGVsZSx1bGEsdWxjZXIsdWxjZXJlZCx1bGNlcnksdWxlLHVsZW1hLHVsZXRpYyx1bGV4LHVsZXhpbmUsdWxleGl0ZSx1bGl0aXMsdWxsLHVsbGEsdWxsYWdlLHVsbGFnZWQsdWxsZXIsdWxsaW5nLHVsbHVjbyx1bG1pYyx1bG1pbix1bG1pbmljLHVsbW8sdWxtb3VzLHVsbmEsdWxuYWQsdWxuYWUsdWxuYXIsdWxuYXJlLHVsbmFyaWEsdWxvaWQsdWxvbmN1cyx1bHN0ZXIsdWx0aW1hLHVsdGltbyx1bHRpbXVtLHVsdHJhLHVsdSx1bHVhLHVsdWhpLHVsdWxhbnQsdWx1bGF0ZSx1bHVsdSx1bSx1bWJlbCx1bWJlbGVkLHVtYmVsbGEsdW1iZXIsdW1iaWxpYyx1bWJsZSx1bWJvLHVtYm9uYWwsdW1ib25lLHVtYm9uZXMsdW1ib25pYyx1bWJyYSx1bWJyYWUsdW1icmFnZSx1bWJyYWwsdW1icmVsLHVtYnJpbCx1bWJyaW5lLHVtYnJvc2UsdW1icm91cyx1bWUsdW1pYWssdW1pcmksdW1sYXV0LHVtcCx1bXBoLHVtcGlyZSx1bXBpcmVyLHVtcHRlZW4sdW1wdHksdW11LHVuLHVuYWJsZSx1bmFibHksdW5hY3QsdW5hY3RlZCx1bmFjdXRlLHVuYWRhcHQsdW5hZGQsdW5hZGRlZCx1bmFkb3B0LHVuYWRvcm4sdW5hZHVsdCx1bmFmaXJlLHVuYWZsb3csdW5hZ2VkLHVuYWdpbGUsdW5hZ2luZyx1bmFpZGVkLHVuYWltZWQsdW5haXJlZCx1bmFraW4sdW5ha2l0ZSx1bmFsLHVuYWxhcm0sdW5hbGVydCx1bmFsaWtlLHVuYWxpc3QsdW5hbGl2ZSx1bmFsbG93LHVuYWxvbmUsdW5hbG91ZCx1bmFtZW5kLHVuYW1pc3MsdW5hbW8sdW5hbXBsZSx1bmFtcGx5LHVuYW5ncnksdW5hbm5leCx1bmFwYXJ0LHVuYXB0LHVuYXB0bHksdW5hcmNoLHVuYXJrLHVuYXJtLHVuYXJtZWQsdW5hcnJheSx1bmFydGVkLHVuYXJ5LHVuYXNrZWQsdW5hdSx1bmF2aWFuLHVuYXdha2UsdW5hd2FyZSx1bmF3YXksdW5hd2VkLHVuYXdmdWwsdW5hd25lZCx1bmF4bGVkLHVuYmFnLHVuYmFpbix1bmJhaXQsdW5iYWtlZCx1bmJhbGUsdW5iYW5rLHVuYmFyLHVuYmFyYix1bmJhcmUsdW5iYXJrLHVuYmFzZSx1bmJhc2VkLHVuYmFzdGUsdW5iYXRlZCx1bmJheSx1bmJlLHVuYmVhcix1bmJlYXJkLHVuYmVhc3QsdW5iZWQsdW5iZWZpdCx1bmJlZ2V0LHVuYmVnb3QsdW5iZWd1bix1bmJlaW5nLHVuYmVsbCx1bmJlbHQsdW5iZW5jaCx1bmJlbmQsdW5iZW50LHVuYmVydGgsdW5iZXNldCx1bmJlc290LHVuYmV0LHVuYmlhcyx1bmJpZCx1bmJpbmQsdW5iaXQsdW5iaXR0LHVuYmxhZGUsdW5ibGVkLHVuYmxlbnQsdW5ibGVzcyx1bmJsZXN0LHVuYmxpbmQsdW5ibGlzcyx1bmJsb2NrLHVuYmxvb20sdW5ibG93bix1bmJsdWVkLHVuYmx1c2gsdW5ib2F0LHVuYm9keSx1bmJvZyx1bmJvZ2d5LHVuYm9rZWwsdW5ib2xkLHVuYm9sdCx1bmJvbmUsdW5ib25lZCx1bmJvbm55LHVuYm9vdCx1bmJvcmVkLHVuYm9ybix1bmJvcm5lLHVuYm9zb20sdW5ib3VuZCx1bmJvdyx1bmJvd2VkLHVuYm93ZWwsdW5ib3gsdW5ib3hlZCx1bmJveSx1bmJyYWNlLHVuYnJhaWQsdW5icmFuLHVuYnJhbmQsdW5icmF2ZSx1bmJyYXplLHVuYnJlZCx1bmJyZW50LHVuYnJpY2ssdW5icmllZix1bmJyb2FkLHVuYnJva2UsdW5icm93bix1bmJydXRlLHVuYnVkLHVuYnVpbGQsdW5idWlsdCx1bmJ1bGt5LHVuYnVuZyx1bmJ1cmx5LHVuYnVybix1bmJ1cm50LHVuYnVyc3QsdW5idXJ5LHVuYnVzaCx1bmJ1c2ssdW5idXN5LHVuYnV4b20sdW5jYSx1bmNhZ2UsdW5jYWdlZCx1bmNha2UsdW5jYWxrLHVuY2FsbCx1bmNhbG0sdW5jYW5lZCx1bmNhbm55LHVuY2FwLHVuY2FydCx1bmNhc2UsdW5jYXNlZCx1bmNhc2ssdW5jYXN0LHVuY2FzdGUsdW5jYXRlLHVuY2F2ZSx1bmNlZGVkLHVuY2hhaW4sdW5jaGFpcix1bmNoYXJtLHVuY2hhcnksdW5jaGVhdCx1bmNoZWNrLHVuY2hpZCx1bmNoaWxkLHVuY2h1cm4sdW5jaSx1bmNpYSx1bmNpYWwsdW5jaW5hbCx1bmNpbmNoLHVuY2luY3QsdW5jaW5pLHVuY2ludXMsdW5jaXRlLHVuY2l0ZWQsdW5jaXR5LHVuY2l2aWMsdW5jaXZpbCx1bmNsYWQsdW5jbGFtcCx1bmNsYXNwLHVuY2xheSx1bmNsZSx1bmNsZWFkLHVuY2xlYW4sdW5jbGVhcix1bmNsZWZ0LHVuY2xldyx1bmNsaWNrLHVuY2xpZnksdW5jbGltYix1bmNsaW5nLHVuY2xpcCx1bmNsb2FrLHVuY2xvZyx1bmNsb3NlLHVuY2xvdWQsdW5jbG91dCx1bmNsdWIsdW5jbyx1bmNvYWNoLHVuY29hdCx1bmNvY2ssdW5jb2RlZCx1bmNvaWYsdW5jb2lsLHVuY29pbix1bmNva2VkLHVuY29sdCx1bmNvbHksdW5jb21lLHVuY29tZnksdW5jb21pYyx1bmNvb3AsdW5jb3BlLHVuY29yZCx1bmNvcmUsdW5jb3JlZCx1bmNvcmssdW5jb3N0LHVuY291Y2gsdW5jb3VzLHVuY291dGgsdW5jb3Zlcix1bmNvd2VkLHVuY293bCx1bmNveSx1bmNyYW0sdW5jcmFtcCx1bmNyZWFtLHVuY3Jlc3QsdW5jcmliLHVuY3JpZWQsdW5jcmltZSx1bmNyaXNwLHVuY3Jvb2ssdW5jcm9wdCx1bmNyb3NzLHVuY3Jvd24sdW5jcnVkZSx1bmNydWVsLHVuY3Rpb24sdW5jdWJpYyx1bmN1bGFyLHVuY3VyYix1bmN1cmQsdW5jdXJlZCx1bmN1cmwsdW5jdXJzZSx1bmN1cnN0LHVuY3VzLHVuY3V0LHVuY3V0aCx1bmRhaWx5LHVuZGFtLHVuZGFtbix1bmRhcmVkLHVuZGFyayx1bmRhdGUsdW5kYXRlZCx1bmRhdWIsdW5kYXplZCx1bmRlLHVuZGVhZCx1bmRlYWYsdW5kZWFsdCx1bmRlYW4sdW5kZWFyLHVuZGVjayx1bmRlY3lsLHVuZGVlcCx1bmRlZnQsdW5kZWlmeSx1bmRlbHZlLHVuZGVuLHVuZGVyLHVuZGVyZG8sdW5kZXJlcix1bmRlcmdvLHVuZGVybHksdW5kZXJuLHVuZGV2aWwsdW5kZXdlZCx1bmRld3ksdW5kaWQsdW5kaWVzLHVuZGlnLHVuZGlnaHQsdW5kaWtlZCx1bmRpbSx1bmRpbmUsdW5kaW5lZCx1bmRpcmssdW5kbyx1bmRvY2ssdW5kb2VyLHVuZG9nLHVuZG9pbmcsdW5kb21lZCx1bmRvbix1bmRvbmUsdW5kb3BlZCx1bmRvc2UsdW5kb3NlZCx1bmRvd255LHVuZHJhYix1bmRyYWcsdW5kcmFwZSx1bmRyYXcsdW5kcmF3bix1bmRyZXNzLHVuZHJpZWQsdW5kcnVuayx1bmRyeSx1bmR1Yix1bmR1Y2FsLHVuZHVlLHVuZHVnLHVuZHVrZSx1bmR1bGFyLHVuZHVsbCx1bmR1bHksdW5kdXBlZCx1bmR1c3QsdW5kdXR5LHVuZHdlbHQsdW5keSx1bmR5ZSx1bmR5ZWQsdW5keWluZyx1bmVhZ2VyLHVuZWFybHksdW5lYXJ0aCx1bmVhc2UsdW5lYXN5LHVuZWF0ZW4sdW5lYXRoLHVuZWJiZWQsdW5lZGdlLHVuZWRnZWQsdW5lbGVjdCx1bmVtcHQsdW5lbXB0eSx1bmVuZGVkLHVuZXBpYyx1bmVxdWFsLHVuZXJlY3QsdW5ldGhpYyx1bmV2ZW4sdW5ldmlsLHVuZXhhY3QsdW5leWUsdW5leWVkLHVuZmFjZSx1bmZhY2VkLHVuZmFjdCx1bmZhZGVkLHVuZmFpbix1bmZhaW50LHVuZmFpcix1bmZhaXRoLHVuZmFrZWQsdW5mYWxzZSx1bmZhbWVkLHVuZmFuY3ksdW5mYXIsdW5mYXN0LHVuZmVhcnksdW5mZWQsdW5mZWVkLHVuZmVsZSx1bmZlbG9uLHVuZmVsdCx1bmZlbmNlLHVuZmV0ZWQsdW5mZXVlZCx1bmZldyx1bmZpYmVyLHVuZmllbmQsdW5maWVyeSx1bmZpZ2h0LHVuZmlsZSx1bmZpbGVkLHVuZmlsbCx1bmZpbG0sdW5maW5lLHVuZmluZWQsdW5maXJlZCx1bmZpcm0sdW5maXQsdW5maXRseSx1bmZpdHR5LHVuZml4LHVuZml4ZWQsdW5mbGFnLHVuZmxha3ksdW5mbGFuayx1bmZsYXQsdW5mbGVhZCx1bmZsZXNoLHVuZmxvY2ssdW5mbG9vcix1bmZsb3duLHVuZmx1aWQsdW5mbHVzaCx1bmZvZ2d5LHVuZm9sZCx1bmZvbmQsdW5mb29sLHVuZm9yayx1bmZvcm0sdW5mb3VsLHVuZm91bmQsdW5mb3h5LHVuZnJhaWwsdW5mcmFtZSx1bmZyYW5rLHVuZnJlZSx1bmZyZWVkLHVuZnJldCx1bmZyaWVkLHVuZnJpbGwsdW5mcml6eix1bmZyb2NrLHVuZnJvc3QsdW5mcm96ZSx1bmZ1bGwsdW5mdWxseSx1bmZ1bWVkLHVuZnVubnksdW5mdXIsdW5mdXJsLHVuZnVzZWQsdW5mdXNzeSx1bmdhZyx1bmdhZ2VkLHVuZ2Fpbix1bmdhaXRlLHVuZ2Fybyx1bmdhdWR5LHVuZ2Vhcix1bmdlbHQsdW5nZXQsdW5naWFudCx1bmdpZGR5LHVuZ2lsZCx1bmdpbGwsdW5naWx0LHVuZ2lyZCx1bmdpcnQsdW5naXJ0aCx1bmdpdmUsdW5naXZlbix1bmdrYSx1bmdsYWQsdW5nbGF6ZSx1bmdsZWUsdW5nbG9iZSx1bmdsb29tLHVuZ2xvcnksdW5nbG9zcyx1bmdsb3ZlLHVuZ2x1ZSx1bmdsdWVkLHVuZ25hdyx1bmduYXduLHVuZ29kLHVuZ29kbHksdW5nb2xkLHVuZ29uZSx1bmdvb2QsdW5nb3JlZCx1bmdvcmdlLHVuZ290LHVuZ291dHksdW5nb3duLHVuZ3JhY2UsdW5ncmFmdCx1bmdyYWluLHVuZ3JhbmQsdW5ncmFzcCx1bmdyYXZlLHVuZ3JlYXQsdW5ncmVlbix1bmdyaXAsdW5ncmlwZSx1bmdyb3NzLHVuZ3Jvdyx1bmdyb3duLHVuZ3J1ZmYsdW5ndWFsLHVuZ3VhcmQsdW5ndWVhbCx1bmd1ZW50LHVuZ3Vlcyx1bmd1aXMsdW5ndWxhLHVuZ3VsYWUsdW5ndWxhcix1bmd1bGVkLHVuZ3VsbCx1bmd1bHAsdW5ndW0sdW5ndXllZCx1bmd5dmUsdW5neXZlZCx1bmhhYml0LHVuaGFkLHVuaGFmdCx1bmhhaXIsdW5oYWlyeSx1bmhhbmQsdW5oYW5keSx1bmhhbmcsdW5oYXAsdW5oYXBweSx1bmhhcmQsdW5oYXJkeSx1bmhhcnNoLHVuaGFzcCx1bmhhc3RlLHVuaGFzdHksdW5oYXQsdW5oYXRlLHVuaGF0ZWQsdW5oYXVudCx1bmhhdmUsdW5oYXllZCx1bmhhemVkLHVuaGVhZCx1bmhlYWR5LHVuaGVhbCx1bmhlYXJkLHVuaGVhcnQsdW5oZWF2eSx1bmhlZGdlLHVuaGVlZCx1bmhlZWR5LHVuaGVsZCx1bmhlbGUsdW5oZWxlcix1bmhlbG0sdW5oZXJkLHVuaGVybyx1bmhld2VkLHVuaGV3bix1bmhleCx1bmhpZCx1bmhpZGUsdW5oaWdoLHVuaGluZ2UsdW5oaXJlZCx1bmhpdCx1bmhpdGNoLHVuaGl2ZSx1bmhvYXJkLHVuaG9hcnksdW5ob2VkLHVuaG9pc3QsdW5ob2xkLHVuaG9seSx1bmhvbWUsdW5ob25lZCx1bmhvb2QsdW5ob29rLHVuaG9vcCx1bmhvcGVkLHVuaG9ybnksdW5ob3JzZSx1bmhvc2UsdW5ob3NlZCx1bmhvdCx1bmhvdXNlLHVuaHVsbCx1bmh1bWFuLHVuaHVtaWQsdW5odW5nLHVuaHVydCx1bmh1c2ssdW5pYXQsdW5pYXRlLHVuaWF4YWwsdW5pYmxlLHVuaWNlLHVuaWNlZCx1bmljZWxsLHVuaWNpc20sdW5pY2lzdCx1bmljaXR5LHVuaWNvcm4sdW5pY3VtLHVuaWRlYWwsdW5pZGxlLHVuaWRseSx1bmllLHVuaWZhY2UsdW5pZmljLHVuaWZpZWQsdW5pZmllcix1bmlmbG93LHVuaWZvcm0sdW5pZnksdW5pbG9iZSx1bmltcGVkLHVuaW5rZWQsdW5pbm4sdW5pbyx1bmlvaWQsdW5pb24sdW5pb25lZCx1bmlvbmljLHVuaW9uaWQsdW5pb3ZhbCx1bmlwYXJhLHVuaXBlZCx1bmlwb2QsdW5pcXVlLHVuaXJlbWUsdW5pc29pbCx1bmlzb24sdW5pdCx1bml0YWdlLHVuaXRhbCx1bml0YXJ5LHVuaXRlLHVuaXRlZCx1bml0ZXIsdW5pdGluZyx1bml0aW9uLHVuaXRpc20sdW5pdGl2ZSx1bml0aXplLHVuaXR1ZGUsdW5pdHksdW5pdmllZCx1bmphZGVkLHVuamFtLHVuamV3ZWwsdW5qb2luLHVuam9pbnQsdW5qb2xseSx1bmpveWVkLHVuanVkZ2UsdW5qdWljeSx1bmp1c3QsdW5rYW1lZCx1bmtlZCx1bmtlbXB0LHVua2VuLHVua2VwdCx1bmtldCx1bmtleSx1bmtleWVkLHVua2lkLHVua2lsbCx1bmtpbix1bmtpbmQsdW5raW5nLHVua2luayx1bmtpcmssdW5raXNzLHVua2lzdCx1bmtuYXZlLHVua25ldyx1bmtuaXQsdW5rbm90LHVua25vdyx1bmtub3duLHVubGFjZSx1bmxhY2VkLHVubGFkZSx1bmxhZGVuLHVubGFpZCx1bmxhbWUsdW5sYW1lZCx1bmxhbmQsdW5sYXAsdW5sYXJnZSx1bmxhc2gsdW5sYXRjaCx1bmxhdGgsdW5sYXVnaCx1bmxhdmVkLHVubGF3LHVubGF3ZWQsdW5sYXdseSx1bmxheSx1bmxlYWQsdW5sZWFmLHVubGVha3ksdW5sZWFsLHVubGVhbix1bmxlYXJuLHVubGVhc2gsdW5sZWF2ZSx1bmxlZCx1bmxlZnQsdW5sZWdhbCx1bmxlbnQsdW5sZXNzLHVubGV0LHVubGV2ZWwsdW5saWQsdW5saWUsdW5saWdodCx1bmxpa2UsdW5saWtlZCx1bmxpa2VuLHVubGltYix1bmxpbWUsdW5saW1lZCx1bmxpbXAsdW5saW5lLHVubGluZWQsdW5saW5rLHVubGlzdCx1bmxpc3R5LHVubGl0LHVubGl2ZSx1bmxvYWQsdW5sb2F0aCx1bmxvYmVkLHVubG9jYWwsdW5sb2NrLHVubG9kZ2UsdW5sb2Z0eSx1bmxvZ2ljLHVubG9vayx1bmxvb3AsdW5sb29zZSx1bmxvcmQsdW5sb3N0LHVubG91c3ksdW5sb3ZlLHVubG92ZWQsdW5sb3dseSx1bmxveWFsLHVubHVjaWQsdW5sdWNrLHVubHVja3ksdW5sdW5hcix1bmx1cmVkLHVubHVzdCx1bmx1c3R5LHVubHV0ZSx1bmx1dGVkLHVubHlpbmcsdW5tYWQsdW5tYWRlLHVubWFnaWMsdW5tYWlkLHVubWFpbCx1bm1ha2UsdW5tYWtlcix1bm1hbix1bm1hbmVkLHVubWFubHksdW5tYXJjaCx1bm1hcnJ5LHVubWFzayx1bm1hc3QsdW5tYXRlLHVubWF0ZWQsdW5tYXplLHVubWVhbnQsdW5tZWVrLHVubWVldCx1bm1lcmdlLHVubWVycnksdW5tZXNoLHVubWV0LHVubWV0ZWQsdW5tZXcsdW5tZXdlZCx1bm1pbmQsdW5taW5lZCx1bm1pcmVkLHVubWlyeSx1bm1pc3QsdW5taXRlcix1bm1peCx1bm1peGVkLHVubW9kZWwsdW5tb2lzdCx1bm1vbGQsdW5tb2xkeSx1bm1vb3IsdW5tb3JhbCx1bm1vdW50LHVubW92ZWQsdW5tb3dlZCx1bm1vd24sdW5tdWRkeSx1bm11dGVkLHVubmFpbCx1bm5ha2VkLHVubmFtZSx1bm5hbWVkLHVubmVhdCx1bm5lZWR5LHVubmVncm8sdW5uZXJ2ZSx1bm5lc3QsdW5uZXRoLHVubmV0aGUsdW5uZXcsdW5uZXdseSx1bm5pY2UsdW5uaWdoLHVubm9ibGUsdW5ub2JseSx1bm5vc2UsdW5ub3NlZCx1bm5vdGVkLHVubm92ZWwsdW5vYXJlZCx1bm9iZXNlLHVub2RlLHVub2Z0ZW4sdW5vZ2xlZCx1bm9pbCx1bm9pbGVkLHVub2lseSx1bm9sZCx1bm9wZWQsdW5vcGVuLHVub3JiZWQsdW5vcmRlcix1bm9ybix1bm9ybmx5LHVub3ZlcnQsdW5vd2VkLHVub3dpbmcsdW5vd24sdW5vd25lZCx1bnBhY2VkLHVucGFjayx1bnBhZ2FuLHVucGFnZWQsdW5wYWlkLHVucGFpbnQsdW5wYWxlLHVucGFsZWQsdW5wYW5lbCx1bnBhcGFsLHVucGFwZXIsdW5wYXJjaCx1bnBhcmVkLHVucGFyayx1bnBhcnR5LHVucGFzcyx1bnBhc3RlLHVucGF2ZSx1bnBhdmVkLHVucGF3ZWQsdW5wYXduLHVucGVhY2UsdW5wZWVsLHVucGVnLHVucGVuLHVucGVuYWwsdW5wZW50LHVucGVyY2gsdW5wZXRhbCx1bnBpY2ssdW5waWVjZSx1bnBpZXR5LHVucGlsZSx1bnBpbGVkLHVucGluLHVucGlvdXMsdW5waXBlZCx1bnBsYWNlLHVucGxhaWQsdW5wbGFpbix1bnBsYWl0LHVucGxhbix1bnBsYW5rLHVucGxhbnQsdW5wbGF0LHVucGxlYXQsdW5wbGllZCx1bnBsb3csdW5wbHVnLHVucGx1bWIsdW5wbHVtZSx1bnBsdW1wLHVucG9pc2UsdW5wb2xlZCx1bnBvcGUsdW5wb3NlZCx1bnBvdCx1bnBvd2VyLHVucHJheSx1bnByaW0sdW5wcmltZSx1bnByaW50LHVucHJvcCx1bnByb3VkLHVucHVyZSx1bnB1cnNlLHVucHV0LHVucXVlZW4sdW5xdWljayx1bnF1aWV0LHVucXVpdCx1bnF1b3RlLHVucmFjZWQsdW5yYWNrLHVucmFpbnksdW5yYWtlLHVucmFrZWQsdW5yYW0sdW5yYW5rLHVucmFwZWQsdW5yYXJlLHVucmFzaCx1bnJhdGVkLHVucmF2ZWwsdW5yYXksdW5yYXllZCx1bnJhemVkLHVucmVhZCx1bnJlYWR5LHVucmVhbCx1bnJlYXZlLHVucmViZWwsdW5yZWQsdW5yZWVsLHVucmVldmUsdW5yZWdhbCx1bnJlaW4sdW5yZW50LHVucmVzdCx1bnJlc3R5LHVucmh5bWUsdW5yaWNoLHVucmljaHQsdW5yaWQsdW5yaWRlLHVucmlmZSx1bnJpZyx1bnJpZ2h0LHVucmlnaWQsdW5yaW5kLHVucmluZyx1bnJpcCx1bnJpcGUsdW5yaXBlZCx1bnJpc2VuLHVucmlza3ksdW5yaXZlZCx1bnJpdmVuLHVucml2ZXQsdW5yb2FzdCx1bnJvYmUsdW5yb2JlZCx1bnJvbGwsdW5yb29mLHVucm9vbXksdW5yb29zdCx1bnJvb3QsdW5yb3BlLHVucm9wZWQsdW5yb3NlZCx1bnJvdGVkLHVucm91Z2gsdW5yb3VuZCx1bnJvdmUsdW5yb3ZlZCx1bnJvdyx1bnJvd2VkLHVucm95YWwsdW5ydWxlLHVucnVsZWQsdW5ydWx5LHVucnVuLHVucnVuZyx1bnJ1cmFsLHVucnVzdCx1bnJ1dGgsdW5zYWNrLHVuc2FkLHVuc2FmZSx1bnNhZ2UsdW5zYWlkLHVuc2FpbnQsdW5zYWx0LHVuc2FuZSx1bnNhcHB5LHVuc2FzaCx1bnNhdGVkLHVuc2F0aW4sdW5zYXZlZCx1bnNhd2VkLHVuc2F3bix1bnNheSx1bnNjYWxlLHVuc2NhbHksdW5zY2FyYix1bnNjZW50LHVuc2NyZXcsdW5zZWFsLHVuc2VhbSx1bnNlYXQsdW5zZWUsdW5zZWVuLHVuc2VsZix1bnNlbnNlLHVuc2VudCx1bnNldCx1bnNldyx1bnNld2VkLHVuc2V3bix1bnNleCx1bnNleGVkLHVuc2hhZGUsdW5zaGFkeSx1bnNoYXBlLHVuc2hhcnAsdW5zaGF3bCx1bnNoZWFmLHVuc2hlZCx1bnNoZWV0LHVuc2hlbGwsdW5zaGlwLHVuc2hvZCx1bnNob2UsdW5zaG9lZCx1bnNob3AsdW5zaG9yZSx1bnNob3JuLHVuc2hvcnQsdW5zaG90LHVuc2hvd24sdW5zaG93eSx1bnNocmV3LHVuc2h1dCx1bnNoeSx1bnNoeWx5LHVuc2ljayx1bnNpZGVkLHVuc2llZ2UsdW5zaWdodCx1bnNpbGx5LHVuc2luLHVuc2luZXcsdW5zaW5nLHVuc2l6ZWQsdW5za2luLHVuc2xhY2ssdW5zbGFpbix1bnNsYXRlLHVuc2xhdmUsdW5zbGVlayx1bnNsZXB0LHVuc2xpbmcsdW5zbGlwLHVuc2xpdCx1bnNsb3QsdW5zbG93LHVuc2x1bmcsdW5zbHksdW5zbWFydCx1bnNtb2t5LHVuc21vdGUsdW5zbmFreSx1bnNuYXAsdW5zbmFyZSx1bnNuYXJsLHVuc25lY2ssdW5zbmliLHVuc25vdyx1bnNvYmVyLHVuc29mdCx1bnNvZ2d5LHVuc29pbCx1bnNvbGFyLHVuc29sZCx1bnNvbGUsdW5zb2xlZCx1bnNvbGlkLHVuc29tZSx1bnNvbix1bnNvbnN5LHVuc29vdHksdW5zb3JlLHVuc29ycnksdW5zb3J0LHVuc291bCx1bnNvdW5kLHVuc291cix1bnNvd2VkLHVuc293bix1bnNwYW4sdW5zcGFyLHVuc3BlYWssdW5zcGVkLHVuc3BlZWQsdW5zcGVsbCx1bnNwZWx0LHVuc3BlbnQsdW5zcGljeSx1bnNwaWVkLHVuc3Bpa2UsdW5zcGluLHVuc3BpdCx1bnNwbGl0LHVuc3BvaWwsdW5zcG90LHVuc3B1bix1bnN0YWNrLHVuc3RhZ3ksdW5zdGFpZCx1bnN0YWluLHVuc3Rhcix1bnN0YXRlLHVuc3RlY2ssdW5zdGVlbCx1bnN0ZWVwLHVuc3RlcCx1bnN0ZXJuLHVuc3RpY2ssdW5zdGlsbCx1bnN0aW5nLHVuc3RvY2ssdW5zdG9pYyx1bnN0b25lLHVuc3RvbnksdW5zdG9wLHVuc3RvcmUsdW5zdG91dCx1bnN0b3csdW5zdHJhcCx1bnN0cmlwLHVuc3R1Y2ssdW5zdHVmZix1bnN0dW5nLHVuc3R5LHVuc3VlZCx1bnN1aXQsdW5zdWxreSx1bnN1bix1bnN1bmcsdW5zdW5rLHVuc3VubnksdW5zdXJlLHVuc3dlYXIsdW5zd2VhdCx1bnN3ZWV0LHVuc3dlbGwsdW5zd2VwdCx1bnN3aW5nLHVuc3dvcm4sdW5zd3VuZyx1bnRhY2ssdW50YWludCx1bnRha2VuLHVudGFsbCx1bnRhbWUsdW50YW1lZCx1bnRhcCx1bnRhcGVkLHVudGFyLHVudGFzdGUsdW50YXN0eSx1bnRhdXQsdW50YXdlZCx1bnRheCx1bnRheGVkLHVudGVhY2gsdW50ZWFtLHVudGVlbSx1bnRlbGwsdW50ZW5zZSx1bnRlbnQsdW50ZW50eSx1bnRld2VkLHVudGhhbmssdW50aGF3LHVudGhpY2ssdW50aGluayx1bnRob3JuLHVudGhyaWQsdW50aHJvYix1bnRpZGFsLHVudGlkeSx1bnRpZSx1bnRpZWQsdW50aWdodCx1bnRpbCx1bnRpbGUsdW50aWxlZCx1bnRpbGwsdW50aWx0LHVudGltZWQsdW50aW4sdW50aW5jdCx1bnRpbmUsdW50aXB0LHVudGlyZSx1bnRpcmVkLHVudG8sdW50b2xkLHVudG9tYix1bnRvbmUsdW50b25lZCx1bnRvb3RoLHVudG9wLHVudG9ybix1bnRvdWNoLHVudG91Z2gsdW50b3duLHVudHJhY2UsdW50cmFpbix1bnRyZWFkLHVudHJlZWQsdW50cmVzcyx1bnRyaWVkLHVudHJpZyx1bnRyaWxsLHVudHJpbSx1bnRyaXBlLHVudHJpdGUsdW50cm9kLHVudHJ1Y2ssdW50cnVlLHVudHJ1bHksdW50cnVzcyx1bnRydXN0LHVudHJ1dGgsdW50dWNrLHVudHVtaWQsdW50dW5lLHVudHVuZWQsdW50dXJmLHVudHVybix1bnR3aW5lLHVudHdpcmwsdW50d2lzdCx1bnR5aW5nLHVudHosdW51Z2x5LHVudWx0cmEsdW51cHNldCx1bnVyYmFuLHVudXJnZWQsdW51cm4sdW51cm5lZCx1bnVzZSx1bnVzZWQsdW51c3VhbCx1bnZhaW4sdW52YWxpZCx1bnZhbHVlLHVudmVpbCx1bnZlbm9tLHVudmVzdCx1bnZleGVkLHVudmljYXIsdW52aXNvcix1bnZpdGFsLHVudml2aWQsdW52b2NhbCx1bnZvaWNlLHVudm90ZSx1bnZvdGVkLHVudm93ZWQsdW53YWRlZCx1bndhZ2VkLHVud2FrZWQsdW53YWxsLHVud2FuLHVud2FyZSx1bndhcm0sdW53YXJuLHVud2FycCx1bndhcnksdW53YXRlcix1bndhdmVkLHVud2F4LHVud2F4ZWQsdW53YXllZCx1bndlYWwsdW53ZWFyeSx1bndlYXZlLHVud2ViLHVud2VkLHVud2VkZ2UsdW53ZWVsLHVud2VmdCx1bndlbGQsdW53ZWxsLHVud2VwdCx1bndldCx1bndoZWVsLHVud2hpZyx1bndoaXAsdW53aGl0ZSx1bndpZWxkLHVud2lmZWQsdW53aWcsdW53aWxkLHVud2lsbCx1bndpbHksdW53aW5kLHVud2luZHksdW53aXBlZCx1bndpcmUsdW53aXJlZCx1bndpc2UsdW53aXNoLHVud2lzdCx1bndpdGNoLHVud2l0dHksdW53aXZlLHVud2l2ZWQsdW53b2Z1bCx1bndvbWFuLHVud29tYix1bndvbix1bndvb2VkLHVud29vZix1bndvb2x5LHVud29yZHksdW53b3JrLHVud29ybGQsdW53b3JteSx1bndvcm4sdW53b3J0aCx1bndvdW5kLHVud292ZW4sdW53cmFwLHVud3JpdCx1bndyaXRlLHVud3J1bmcsdW55b2tlLHVueW9rZWQsdW55b3VuZyx1bnplLHVuemVuLHVuem9uZSx1bnpvbmVkLHVwLHVwYWlzbGUsdXBhbGxleSx1cGFsb25nLHVwYXJjaCx1cGFyaXNlLHVwYXJtLHVwYXJuYSx1cGFzLHVwYXR0aWMsdXBiYW5rLHVwYmFyLHVwYmF5LHVwYmVhcix1cGJlYXQsdXBiZWxjaCx1cGJlbHQsdXBiZW5kLHVwYmlkLHVwYmluZCx1cGJsYXN0LHVwYmxhemUsdXBibG93LHVwYm9pbCx1cGJvbHQsdXBib29zdCx1cGJvcm5lLHVwYm90Y2gsdXBib3VuZCx1cGJyYWNlLHVwYnJhaWQsdXBicmF5LHVwYnJlYWssdXBicmVkLHVwYnJlZWQsdXBicmltLHVwYnJpbmcsdXBicm9vayx1cGJyb3csdXBidWlsZCx1cGJ1b3ksdXBidXJuLHVwYnVyc3QsdXBidXksdXBjYWxsLHVwY2FuYWwsdXBjYXJyeSx1cGNhc3QsdXBjYXRjaCx1cGNob2tlLHVwY2h1Y2ssdXBjaXR5LHVwY2xpbWIsdXBjbG9zZSx1cGNvYXN0LHVwY29jayx1cGNvaWwsdXBjb21lLHVwY292ZXIsdXBjcmFuZSx1cGNyYXdsLHVwY3JlZWssdXBjcmVlcCx1cGNyb3AsdXBjcm93ZCx1cGNyeSx1cGN1cmwsdXBjdXJ2ZSx1cGN1dCx1cGRhcnQsdXBkYXRlLHVwZGVjayx1cGRlbHZlLHVwZGl2ZSx1cGRvLHVwZG9tZSx1cGRyYWZ0LHVwZHJhZyx1cGRyYXcsdXBkcmluayx1cGRyeSx1cGVhdCx1cGVuZCx1cGV5Z2FuLHVwZmVlZCx1cGZpZWxkLHVwZmlsbCx1cGZsYW1lLHVwZmxhcmUsdXBmbGFzaCx1cGZsZWUsdXBmbGluZyx1cGZsb2F0LHVwZmxvb2QsdXBmbG93LHVwZmx1bmcsdXBmbHksdXBmb2xkLHVwZnJhbWUsdXBmdXJsLHVwZ2FsZSx1cGdhbmcsdXBnYXBlLHVwZ2F6ZSx1cGdldCx1cGdpcmQsdXBnaXJ0LHVwZ2l2ZSx1cGdsZWFuLHVwZ2xpZGUsdXBnbyx1cGdvcmdlLHVwZ3JhZGUsdXBncmF2ZSx1cGdyb3csdXBndWxseSx1cGd1c2gsdXBoYW5kLHVwaGFuZyx1cGhhc3AsdXBoZWFsLHVwaGVhcCx1cGhlYXZlLHVwaGVsZCx1cGhlbG0sdXBoZWx5YSx1cGhlcix1cGhpbGwsdXBob2FyZCx1cGhvaXN0LHVwaG9sZCx1cGh1bmcsdXBodXJsLHVwamVyayx1cGpldCx1cGtlZXAsdXBrbmVsbCx1cGtuaXQsdXBsYSx1cGxhaWQsdXBsYWtlLHVwbGFuZCx1cGxhbmUsdXBsYXksdXBsZWFkLHVwbGVhcCx1cGxlZyx1cGxpY2ssdXBsaWZ0LHVwbGlnaHQsdXBsaW1iLHVwbGluZSx1cGxvY2ssdXBsb25nLHVwbG9vayx1cGxvb20sdXBsb29wLHVwbHlpbmcsdXBtYXN0LHVwbWl4LHVwbW9zdCx1cG1vdW50LHVwbW92ZSx1cG5lc3MsdXBvLHVwb24sdXBwYXJkLHVwcGVudCx1cHBlcix1cHBlcmNoLHVwcGVyZXIsdXBwZXJzLHVwcGlsZSx1cHBpbmcsdXBwaXNoLHVwcGl0eSx1cHBsb3csdXBwbHVjayx1cHBvaW50LHVwcG9pc2UsdXBwb3AsdXBwb3VyLHVwcG93b2MsdXBwcmljayx1cHByb3AsdXBwdWZmLHVwcHVsbCx1cHB1c2gsdXByYWlzZSx1cHJlYWNoLHVwcmVhcix1cHJlaW4sdXByZW5kLHVwcmVzdCx1cHJpZCx1cHJpZGdlLHVwcmlnaHQsdXByaXAsdXByaXNhbCx1cHJpc2UsdXByaXNlbix1cHJpc2VyLHVwcmlzdCx1cHJpdmUsdXByaXZlcix1cHJvYWQsdXByb2FyLHVwcm9vbSx1cHJvb3QsdXByb3NlLHVwcm91c2UsdXByb3V0ZSx1cHJ1bix1cHJ1c2gsdXBzY2FsZSx1cHNjcmV3LHVwc2VhbCx1cHNlZWssdXBzZWl6ZSx1cHNlbmQsdXBzZXQsdXBzZXksdXBzaGFmdCx1cHNoZWFyLHVwc2hvb3QsdXBzaG9yZSx1cHNob3QsdXBzaG92ZSx1cHNodXQsdXBzaWRlLHVwc2lkZXMsdXBzaWxvbix1cHNpdCx1cHNsYW50LHVwc2xpcCx1cHNsb3BlLHVwc21pdGUsdXBzb2FrLHVwc29hcix1cHNvbHZlLHVwc3BlYWssdXBzcGVhcix1cHNwZWVkLHVwc3Bldyx1cHNwaW4sdXBzcGlyZSx1cHNwb3V0LHVwc3B1cnQsdXBzdGFmZix1cHN0YWdlLHVwc3RhaXIsdXBzdGFtcCx1cHN0YW5kLHVwc3RhcmUsdXBzdGFydCx1cHN0YXRlLHVwc3RheSx1cHN0ZWFsLHVwc3RlYW0sdXBzdGVtLHVwc3RlcCx1cHN0aWNrLHVwc3Rpcix1cHN1Y2ssdXBzdW4sdXBzdXAsdXBzdXJnZSx1cHN3YXJtLHVwc3dheSx1cHN3ZWVwLHVwc3dlbGwsdXBzd2luZyx1cHRhYmxlLHVwdGFrZSx1cHRha2VyLHVwdGVhcix1cHRlbmQsdXB0aHJvdyx1cHRpZGUsdXB0aWUsdXB0aWxsLHVwdGlsdCx1cHRvcm4sdXB0b3NzLHVwdG93ZXIsdXB0b3duLHVwdHJhY2UsdXB0cmFjayx1cHRyYWlsLHVwdHJhaW4sdXB0cmVlLHVwdHJlbmQsdXB0cmlsbCx1cHRydW5rLHVwdHJ1c3MsdXB0dWJlLHVwdHVjayx1cHR1cm4sdXB0d2lzdCx1cHVwb2lkLHVwdm9taXQsdXB3YWZ0LHVwd2FsbCx1cHdhcmQsdXB3YXJkcyx1cHdhcnAsdXB3YXgsdXB3YXksdXB3YXlzLHVwd2VsbCx1cHdlbnQsdXB3aGVlbCx1cHdoZWxtLHVwd2hpcix1cHdoaXJsLHVwd2luZCx1cHdpdGgsdXB3b3JrLHVwd291bmQsdXB3cmFwLHVwd3JpbmcsdXB5YXJkLHVweW9rZSx1cix1cmEsdXJhY2hhbCx1cmFjaHVzLHVyYWNpbCx1cmFlbWljLHVyYWV1cyx1cmFsLHVyYWxpLHVyYWxpbmUsdXJhbGl0ZSx1cmFsaXVtLHVyYW1pZG8sdXJhbWlsLHVyYW1pbm8sdXJhbix1cmFuYXRlLHVyYW5pYyx1cmFuaWlkLHVyYW5pbix1cmFuaW5lLHVyYW5pb24sdXJhbmlzbSx1cmFuaXN0LHVyYW5pdGUsdXJhbml1bSx1cmFub3VzLHVyYW55bCx1cmFvLHVyYXJlLHVyYXJpLHVyYXNlLHVyYXRlLHVyYXRpYyx1cmF0b21hLHVyYXppbmUsdXJhem9sZSx1cmJhbix1cmJhbmUsdXJiaWFuLHVyYmljLHVyYmlmeSx1cmNlb2xlLHVyY2VvbGksdXJjZXVzLHVyY2hpbix1cmQsdXJkZSx1cmRlZSx1cmUsdXJlYSx1cmVhbCx1cmVhc2UsdXJlZGVtYSx1cmVkaW5lLHVyZWRvLHVyZWljLHVyZWlkLHVyZWlkZSx1cmVpZG8sdXJlbWlhLHVyZW1pYyx1cmVudCx1cmVzaXMsdXJldGFsLHVyZXRlcix1cmV0aGFuLHVyZXRocmEsdXJldGljLHVyZix1cmdlLHVyZ2VuY2UsdXJnZW5jeSx1cmdlbnQsdXJnZXIsdXJnaW5nLHVyaGVlbix1cmlhbCx1cmljLHVyaW5hbCx1cmluYW50LHVyaW5hcnksdXJpbmF0ZSx1cmluZSx1cmlub3NlLHVyaW5vdXMsdXJpdGUsdXJsYXIsdXJsZWQsdXJsaW5nLHVybHVjaCx1cm1hbix1cm4sdXJuYSx1cm5hZSx1cm5hbCx1cm5mdWwsdXJuaW5nLHVybmlzbSx1cm5saWtlLHVyb2NlbGUsdXJvY3lzdCx1cm9kZWxlLHVyb2dyYW0sdXJvaHlhbCx1cm9saXRoLHVyb2xvZ3ksdXJvbWVyZSx1cm9uaWMsdXJvcG9kLHVyb3Npcyx1cm9zb21lLHVyb3N0ZWEsdXJvdG94eSx1cm94aW4sdXJzYWwsdXJzaW5lLHVyc29pZCx1cnNvbGljLHVyc29uLHVyc29uZSx1cnN1ayx1cnRpY2EsdXJ0aXRlLHVydWJ1LHVydWN1LHVydWN1cmksdXJ1aXNnLHVydW5kYXksdXJ1cyx1cnVzaGksdXJ1c2hpYyx1cnZhLHVzLHVzYWJsZSx1c2FnZSx1c2FnZXIsdXNhbmNlLHVzYXIsdXNhcmEsdXNhcm9uLHVzYXRpb24sdXNlLHVzZWQsdXNlZGx5LHVzZWRudCx1c2VlLHVzZWZ1bCx1c2Vob2xkLHVzZWxlc3MsdXNlbnQsdXNlcix1c2gsdXNoYWJ0aSx1c2hlcix1c2hlcmVyLHVzaW5ncyx1c2l0YXRlLHVzbmVhLHVzbmVvaWQsdXNuaWMsdXNuaW5pYyx1c3F1ZSx1c3NlbGYsdXNzZWxzLHVzdCx1c3Rlcix1c3Rpb24sdXN1YWwsdXN1YWxseSx1c3VhcnksdXN1Y2FwdCx1c3VyZSx1c3VyZXIsdXN1cmVzcyx1c3VycCx1c3VycGVyLHVzdXJwb3IsdXN1cnksdXN3YXJkLHVzd2FyZHMsdXQsdXRhLHV0YWhpdGUsdXRhaSx1dGFzLHV0Y2gsdXRjaHksdXRlZXMsdXRlbnNpbCx1dGVyaSx1dGVyaW5lLHV0ZXJ1cyx1dGljayx1dGlsZSx1dGlsaXR5LHV0aWxpemUsdXRpbmFtLHV0bW9zdCx1dG9waWEsdXRvcGlhbix1dG9waXNtLHV0b3Bpc3QsdXRyaWNsZSx1dHJpY3VsLHV0cnViaSx1dHJ1bSx1dHN1ayx1dHRlcix1dHRlcmVyLHV0dGVybHksdXR1LHV0dW0sdXZhLHV2YWwsdXZhbGhhLHV2YW5pdGUsdXZhdGUsdXZlYSx1dmVhbCx1dmVpdGljLHV2ZWl0aXMsdXZlb3VzLHV2aWMsdXZpZCx1dmlvbCx1dml0aWMsdXZpdG8sdXZyb3UsdXZ1bGEsdXZ1bGFlLHV2dWxhcix1dnZlcix1eG9yaWFsLHV6YW4sdXphcmEsdXphcmluLHV6YXJvbix2LHZhYWdtZXIsdmFhbGl0ZSx2YWNhbmN5LHZhY2FudCx2YWNhdGUsdmFjYXR1cix2YWNjYXJ5LHZhY2NpbmEsdmFjY2luZSx2YWNoZSx2YWNvYSx2YWNvbmEsdmFjb3VhLHZhY291Zix2YWN1YWwsdmFjdWF0ZSx2YWN1ZWZ5LHZhY3Vpc3QsdmFjdWl0eSx2YWN1b2xlLHZhY3VvbWUsdmFjdW91cyx2YWN1dW0sdmFjdXVtYSx2YWRlLHZhZGl1bSx2YWRvc2UsdmFkeSx2YWcsdmFnYWwsdmFnYXJ5LHZhZ2FzLHZhZ2UsdmFnaWxlLHZhZ2luYSx2YWdpbmFsLHZhZ2l0dXMsdmFncmFudCx2YWdyYXRlLHZhZ3JvbSx2YWd1ZSx2YWd1ZWx5LHZhZ3Vpc2gsdmFndWl0eSx2YWd1cyx2YWhpbmUsdmFpbCx2YWluLHZhaW5mdWwsdmFpbmx5LHZhaXIsdmFpcmFnaSx2YWlyZSx2YWlyeSx2YWl2b2RlLHZhanJhLHZha2Fzcyx2YWtpYSx2YWtpbCx2YWxhbmNlLHZhbGUsdmFsZW5jZSx2YWxlbmN5LHZhbGVudCx2YWxlcmFsLHZhbGVyaWMsdmFsZXJpbix2YWxlcnlsLHZhbGV0LHZhbGV0YSx2YWxldHJ5LHZhbGV1cix2YWxnb2lkLHZhbGd1cyx2YWxoYWxsLHZhbGksdmFsaWFudCx2YWxpZCx2YWxpZGx5LHZhbGluZSx2YWxpc2UsdmFsbCx2YWxsYXIsdmFsbGFyeSx2YWxsYXRlLHZhbGxleSx2YWxsaXMsdmFsbHVtLHZhbG9uaWEsdmFsb3IsdmFsc2UsdmFsc29pZCx2YWx1YXRlLHZhbHVlLHZhbHVlZCx2YWx1ZXIsdmFsdXRhLHZhbHZhLHZhbHZhbCx2YWx2YXRlLHZhbHZlLHZhbHZlZCx2YWx2dWxhLHZhbHZ1bGUsdmFseWwsdmFtZm9udCx2YW1vb3NlLHZhbXAsdmFtcGVkLHZhbXBlcix2YW1waXJlLHZhbix2YW5hZGljLHZhbmFkeWwsdmFuZSx2YW5lZCx2YW5mb3NzLHZhbmcsdmFuZ2VlLHZhbmdlbGksdmFuZ2xvLHZhbmlsbGEsdmFuaWxsZSx2YW5pc2gsdmFuaXR5LHZhbm1hbix2YW5tb3N0LHZhbm5lcix2YW5uZXQsdmFuc2lyZSx2YW50YWdlLHZhbndhcmQsdmFwaWQsdmFwaWRseSx2YXBvcix2YXBvcmVkLHZhcG9yZXIsdmFwb3J5LHZhcmEsdmFyYWhhbix2YXJhbix2YXJhbmlkLHZhcmR5LHZhcmUsdmFyZWMsdmFyZXVzZSx2YXJpLHZhcmlhbnQsdmFyaWF0ZSx2YXJpY2FsLHZhcmljZXMsdmFyaWVkLHZhcmllcix2YXJpZXR5LHZhcmlvbGEsdmFyaW9sZSx2YXJpb3VzLHZhcmlzc2UsdmFyaXgsdmFybGV0LHZhcm1lbnQsdmFybmEsdmFybmlzaCx2YXJzaGEsdmFyc2l0eSx2YXJ1cyx2YXJ2ZSx2YXJ2ZWQsdmFyeSx2YXMsdmFzYSx2YXNhbCx2YXNlLHZhc2VmdWwsdmFzZWxldCx2YXNzYWwsdmFzdCx2YXN0YXRlLHZhc3RpbHksdmFzdGl0eSx2YXN0bHksdmFzdHksdmFzdSx2YXQsdmF0ZnVsLHZhdGljLHZhdG1hbix2YXR0ZXIsdmF1LHZhdWR5LHZhdWx0LHZhdWx0ZWQsdmF1bHRlcix2YXVsdHksdmF1bnQsdmF1bnRlZCx2YXVudGVyLHZhdW50eSx2YXV4aXRlLHZhdmFzb3IsdmF3YXJkLHZlYWwsdmVhbGVyLHZlYWx5LHZlY3Rpb24sdmVjdGlzLHZlY3Rvcix2ZWN0dXJlLHZlZGFuYSx2ZWRldHRlLHZlZGlrYSx2ZWRybyx2ZWR1aXMsdmVlLHZlZW4sdmVlcCx2ZWVyLHZlZXJ5LHZlZ2V0YWwsdmVnZXRlLHZlaGljbGUsdmVpLHZlaWdsZSx2ZWlsLHZlaWxlZCx2ZWlsZXIsdmVpbGluZyx2ZWlseSx2ZWluLHZlaW5hZ2UsdmVpbmFsLHZlaW5lZCx2ZWluZXIsdmVpbmVyeSx2ZWluaW5nLHZlaW5sZXQsdmVpbm91cyx2ZWludWxlLHZlaW55LHZlam9jZXMsdmVsYSx2ZWxhbCx2ZWxhbWVuLHZlbGFyLHZlbGFyaWMsdmVsYXJ5LHZlbGF0ZSx2ZWxhdGVkLHZlbGRtYW4sdmVsZHQsdmVsaWMsdmVsaWdlcix2ZWxsLHZlbGxhbGEsdmVsbGVkYSx2ZWxsb24sdmVsbHVtLHZlbGx1bXksdmVsbyx2ZWxvdXJzLHZlbHRlLHZlbHVtLHZlbHVtZW4sdmVsdXJlLHZlbHZldCx2ZWx2ZXR5LHZlbmFkYSx2ZW5hbCx2ZW5hbGx5LHZlbmF0aWMsdmVuYXRvcix2ZW5jb2xhLHZlbmQsdmVuZGFjZSx2ZW5kZWUsdmVuZGVyLHZlbmRpbmcsdmVuZG9yLHZlbmR1ZSx2ZW5lZXIsdmVuZW5lLHZlbmVyYWwsdmVuZXJlcix2ZW5lcnksdmVuZXNpYSx2ZW5nZXIsdmVuaWFsLHZlbmllLHZlbmluLHZlbmlzb24sdmVubmVsLHZlbm5lcix2ZW5vbSx2ZW5vbWVkLHZlbm9tZXIsdmVub21seSx2ZW5vbXksdmVub3NhbCx2ZW5vc2UsdmVub3VzLHZlbnQsdmVudGFnZSx2ZW50YWlsLHZlbnRlcix2ZW50aWwsdmVudG9zZSx2ZW50cmFkLHZlbnRyYWwsdmVudHJpYyx2ZW50dXJlLHZlbnVlLHZlbnVsYSx2ZW51bGFyLHZlbnVsZSx2ZW51c3QsdmVyYSx2ZXJhbmRhLHZlcmIsdmVyYmFsLHZlcmJhdGUsdmVyYmVuYSx2ZXJiZW5lLHZlcmJpZCx2ZXJiaWZ5LHZlcmJpbGUsdmVyYm9zZSx2ZXJib3VzLHZlcmJ5LHZlcmNob2ssdmVyZCx2ZXJkYW50LHZlcmRlYSx2ZXJkZXQsdmVyZGljdCx2ZXJkaW4sdmVyZG95LHZlcmR1bix2ZXJkdXJlLHZlcmVrLHZlcmdlLHZlcmdlbnQsdmVyZ2VyLHZlcmdlcnksdmVyZ2ksdmVyZ2xhcyx2ZXJpLHZlcmlkaWMsdmVyaWZ5LHZlcmlseSx2ZXJpbmUsdmVyaXNtLHZlcmlzdCx2ZXJpdGUsdmVyaXR5LHZlcm1laWwsdmVybWlhbix2ZXJtaW4sdmVybWlueSx2ZXJtaXMsdmVybWl4LHZlcm5hbCx2ZXJuYW50LHZlcm5pZXIsdmVybmlsZSx2ZXJuaW4sdmVybmluZSx2ZXJyZSx2ZXJyZWwsdmVycnVjYSx2ZXJydWdhLHZlcnNhbCx2ZXJzYW50LHZlcnNhdGUsdmVyc2UsdmVyc2VkLHZlcnNlcix2ZXJzZXQsdmVyc2lmeSx2ZXJzaW5lLHZlcnNpb24sdmVyc28sdmVyc29yLHZlcnN0LHZlcnN0YSx2ZXJzdWFsLHZlcnN1cyx2ZXJ0LHZlcnRleCx2ZXJ0aWdvLHZlcnVsZWQsdmVydmFpbix2ZXJ2ZSx2ZXJ2ZWwsdmVydmV0LHZlcnksdmVzYW5pYSx2ZXNhbmljLHZlc2JpdGUsdmVzaWNhZSx2ZXNpY2FsLHZlc2ljbGUsdmVza2l0LHZlc3BhbCx2ZXNwZXIsdmVzcGVycyx2ZXNwZXJ5LHZlc3BpZCx2ZXNwaW5lLHZlc3BvaWQsdmVzc2VsLHZlc3QsdmVzdGFsLHZlc3RlZSx2ZXN0ZXIsdmVzdGlnZSx2ZXN0aW5nLHZlc3RsZXQsdmVzdHJhbCx2ZXN0cnksdmVzdHVyZSx2ZXQsdmV0YSx2ZXRhbmRhLHZldGNoLHZldGNoeSx2ZXRlcmFuLHZldGl2ZXIsdmV0byx2ZXRvZXIsdmV0b2lzbSx2ZXRvaXN0LHZldHVzdCx2ZXR1c3R5LHZldXZlLHZleCx2ZXhhYmxlLHZleGVkLHZleGVkbHksdmV4ZXIsdmV4ZnVsLHZleGlsLHZleHQsdmlhLHZpYWJsZSx2aWFkdWN0LHZpYWdyYW0sdmlhamFjYSx2aWFsLHZpYWxmdWwsdmlhbmQsdmlhbmRlcix2aWF0aWMsdmlhdGljYSx2aWF0b3IsdmliZXgsdmliZ3lvcix2aWJpeCx2aWJyYW50LHZpYnJhdGUsdmlicmF0byx2aWJyaW9uLHZpY2FyLHZpY2FybHksdmljZSx2aWNlcm95LHZpY2V0eSx2aWNpbGluLHZpY2luYWwsdmljaW5lLHZpY2lvdXMsdmljb2l0ZSx2aWN0aW0sdmljdG9yLHZpY3RvcnksdmljdHJpeCx2aWN0dWFsLHZpY3VuYSx2aWRkdWksdmlkZW8sdmlkZXR0ZSx2aWRvbmlhLHZpZHJ5LHZpZHVhZ2UsdmlkdWFsLHZpZHVhdGUsdmlkdWluZSx2aWR1aXR5LHZpZHVvdXMsdmlkeWEsdmllLHZpZWxsZSx2aWVyLHZpZXJ0ZWwsdmlldyx2aWV3ZXIsdmlld2x5LHZpZXd5LHZpZmRhLHZpZ2EsdmlnaWEsdmlnaWwsdmlnbmluLHZpZ29uaWEsdmlnb3IsdmloYXJhLHZpaHVlbGEsdmlqYW8sdmlraW5nLHZpbGEsdmlsYXlldCx2aWxlLHZpbGVseSx2aWxpZnksdmlsaXR5LHZpbGwsdmlsbGEsdmlsbGFnZSx2aWxsYWluLHZpbGxhcix2aWxsYXRlLHZpbGxlLHZpbGxlaW4sdmlsbG9pZCx2aWxsb3NlLHZpbGxvdXMsdmlsbHVzLHZpbSx2aW1hbmEsdmltZW4sdmltZnVsLHZpbWluYWwsdmluYSx2aW5hZ2UsdmluYWwsdmluYXNzZSx2aW5hdGEsdmluY2VudCx2aW5kZXgsdmluZSx2aW5lYSx2aW5lYWwsdmluZWQsdmluZWdhcix2aW5laXR5LHZpbmVsZXQsdmluZXIsdmluZXJ5LHZpbmljLHZpbm55LHZpbm8sdmlub3NlLHZpbm91cyx2aW50LHZpbnRhLHZpbnRhZ2UsdmludGVtLHZpbnRuZXIsdmludHJ5LHZpbnksdmlueWwsdmlueWxpYyx2aW9sLHZpb2xhLHZpb2xhbCx2aW9sYXRlLHZpb2xlbnQsdmlvbGVyLHZpb2xldCx2aW9sZXR5LHZpb2xpbix2aW9saW5hLHZpb2xpbmUsdmlvbGlzdCx2aW9sb24sdmlvbG9uZSx2aXBlcix2aXBlcmFuLHZpcGVyaWQsdmlwZXJ5LHZpcXVlZW4sdmlyYWdpbix2aXJhZ28sdmlyYWwsdmlyZSx2aXJlbGF5LHZpcmVtaWEsdmlyZW1pYyx2aXJlbnQsdmlyZW8sdmlyZ2EsdmlyZ2FsLHZpcmdhdGUsdmlyZ2luLHZpcmd1bGEsdmlyZ3VsZSx2aXJpYWwsdmlyaWQsdmlyaWZpYyx2aXJpZnksdmlyaWxlLHZpcmwsdmlyb2xlLHZpcm9sZWQsdmlyb24sdmlyb3NlLHZpcm9zaXMsdmlyb3VzLHZpcnR1LHZpcnR1YWwsdmlydHVlLHZpcnR1ZWQsdmlydWVsYSx2aXJ1cyx2aXMsdmlzYSx2aXNhZ2UsdmlzYWdlZCx2aXNhcmdhLHZpc2NlcmEsdmlzY2lkLHZpc2Npbix2aXNjb3NlLHZpc2NvdXMsdmlzY3VzLHZpc2UsdmlzZW1hbix2aXNpYmxlLHZpc2libHksdmlzaWUsdmlzaWxlLHZpc2lvbix2aXNpdCx2aXNpdGEsdmlzaXRlLHZpc2l0ZWUsdmlzaXRlcix2aXNpdG9yLHZpc2l2ZSx2aXNuZSx2aXNvbix2aXNvcix2aXN0YSx2aXN0YWVkLHZpc3RhbCx2aXN0byx2aXN1YWwsdml0YSx2aXRhbCx2aXRhbGljLHZpdGFsbHksdml0YWxzLHZpdGFtZXIsdml0YW1pbix2aXRhc3RpLHZpdGlhdGUsdml0aXVtLHZpdHJhZ2Usdml0cmFpbCx2aXRyYWluLHZpdHJhdXgsdml0cmVhbCx2aXRyZWFuLHZpdHJldW0sdml0cmljLHZpdHJpY3Msdml0cmlmeSx2aXRyaW5lLHZpdHJpb2wsdml0cml0ZSx2aXRyb3VzLHZpdHRhLHZpdHRhdGUsdml0dWxhcix2aXV2YSx2aXZhLHZpdmFyeSx2aXZheCx2aXZlLHZpdmVseSx2aXZlbmN5LHZpdmVyLHZpdmVycyx2aXZlcyx2aXZpZCx2aXZpZGx5LHZpdmlmaWMsdml2aWZ5LHZpeGVuLHZpeGVubHksdml6YXJkLHZpemllcix2bGVpLHZvYXIsdm9jYWJsZSx2b2NhYmx5LHZvY2FsLHZvY2FsaWMsdm9jYWxseSx2b2NhdGUsdm9jdWxhcix2b2N1bGUsdm9ka2Esdm9lLHZvZXQsdm9ldGVuLHZvZyx2b2dsaXRlLHZvZ3VlLHZvZ3VleSx2b2d1aXNoLHZvaWNlLHZvaWNlZCx2b2ljZXIsdm9pY2luZyx2b2lkLHZvaWRlZCx2b2lkZWUsdm9pZGVyLHZvaWRpbmcsdm9pZGx5LHZvaWxlLHZvaXZvZGUsdm9sLHZvbGFibGUsdm9sYWdlLHZvbGFudCx2b2xhcix2b2xhdGEsdm9sYXRpYyx2b2xjYW4sdm9sY2Fubyx2b2xlLHZvbGVuY3ksdm9sZW50LHZvbGVyeSx2b2xldCx2b2xsZXksdm9sb3N0LHZvbHQsdm9sdGFnZSx2b2x0YWljLHZvbHRpemUsdm9sdWJsZSx2b2x1Ymx5LHZvbHVtZSx2b2x1bWVkLHZvbHVwdCx2b2x1cHR5LHZvbHV0YSx2b2x1dGUsdm9sdXRlZCx2b2x1dGluLHZvbHZhLHZvbHZhdGUsdm9sdmVudCx2b21lcix2b21pY2Esdm9taXQsdm9taXRlcix2b21pdG8sdm9taXR1cyx2b29kb28sdm9yYWdvLHZvcmFudCx2b3JoYW5kLHZvcnBhbCx2b3J0ZXgsdm90YSx2b3RhYmxlLHZvdGFsLHZvdGFsbHksdm90YXJ5LHZvdGUsdm90ZWVuLHZvdGVyLHZvdGluZyx2b3RpdmUsdm90cmVzcyx2b3VjaCx2b3VjaGVlLHZvdWNoZXIsdm91Z2Usdm93LHZvd2VkLHZvd2VsLHZvd2VseSx2b3dlcix2b3dlc3Msdm93bGVzcyx2b3lhZ2Usdm95YWdlcix2b3lhbmNlLHZveWV1cix2cmFpYyx2cmJhaXRlLHZyaWRkaGksdnJvdGhlcix2dWcsdnVnZ3ksdnVsZ2FyLHZ1bGdhcmUsdnVsZ2F0ZSx2dWxndXMsdnVsbix2dWxub3NlLHZ1bHBpYyx2dWxwaW5lLHZ1bHR1cmUsdnVsdHVybix2dWx2YSx2dWx2YWwsdnVsdmFyLHZ1bHZhdGUsdnVtLHZ5aW5nLHZ5aW5nbHksdyx3YSx3YWFnLHdhYXBhLHdhYXIsd2FiLHdhYmJlcix3YWJibGUsd2FiYmx5LHdhYmJ5LHdhYmUsd2FiZW5vLHdhYnN0ZXIsd2FjYWdvLHdhY2Usd2FjaG5hLHdhY2ssd2Fja2Usd2Fja2VuLHdhY2tlcix3YWNreSx3YWQsd2FkZGVudCx3YWRkZXIsd2FkZGluZyx3YWRkbGVyLHdhZGRseSx3YWRkeSx3YWRlLHdhZGVyLHdhZGksd2FkaW5nLHdhZGxpa2Usd2FkbWFsLHdhZG1lYWwsd2FkbmEsd2Fkc2V0LHdhZSx3YWVnLHdhZXIsd2Flc29tZSx3YWVzdWNrLHdhZmVyLHdhZmVyZXIsd2FmZXJ5LHdhZmYsd2FmZmxlLHdhZmZseSx3YWZ0LHdhZnRhZ2Usd2FmdGVyLHdhZnR1cmUsd2FmdHksd2FnLHdhZ2F1bix3YWdlLHdhZ2VkLHdhZ2Vkb20sd2FnZXIsd2FnZXJlcix3YWdlcyx3YWdnZWwsd2FnZ2VyLHdhZ2dlcnksd2FnZ2llLHdhZ2dpc2gsd2FnZ2xlLHdhZ2dseSx3YWdneSx3YWdsaWtlLHdhZ2xpbmcsd2Fnb24sd2Fnb25lcix3YWdvbnJ5LHdhZ3NvbWUsd2FndGFpbCx3YWd3YWcsd2Fnd2l0LHdhaCx3YWhhaGUsd2FoaW5lLHdhaG9vLHdhaWF0YSx3YWlmLHdhaWssd2Fpa2x5LHdhaWwsd2FpbGVyLHdhaWxmdWwsd2FpbHksd2Fpbix3YWluYWdlLHdhaW5lcix3YWluZnVsLHdhaW5tYW4sd2FpcGlybyx3YWlyY2gsd2FpcmQsd2FpcmVwbyx3YWlyc2gsd2Fpc2Usd2Fpc3Qsd2Fpc3RlZCx3YWlzdGVyLHdhaXQsd2FpdGVyLHdhaXRpbmcsd2FpdmUsd2FpdmVyLHdhaXZlcnksd2Fpdm9kLHdhaXdvZGUsd2FqYW5nLHdha2Esd2FrYW4sd2FrZSx3YWtlZWwsd2FrZWZ1bCx3YWtlbix3YWtlbmVyLHdha2VyLHdha2VzLHdha2Ysd2FraWYsd2FraWtpLHdha2luZyx3YWtpdXAsd2Fra2VuLHdha29uLHdha29uZGEsd2FreSx3YWxhaGVlLHdhbGUsd2FsZWQsd2FsZXIsd2FsaSx3YWxpbmcsd2Fsayx3YWxrZXIsd2Fsa2luZyx3YWxraXN0LHdhbGtvdXQsd2Fsa3dheSx3YWxsLHdhbGxhYmEsd2FsbGFieSx3YWxsYWgsd2FsbGVkLHdhbGxlcix3YWxsZXQsd2FsbGV5ZSx3YWxsZnVsLHdhbGxpbmcsd2FsbGlzZSx3YWxsbWFuLHdhbGxvb24sd2FsbG9wLHdhbGxvdyx3YWxseSx3YWxudXQsd2FscnVzLHdhbHNoLHdhbHQsd2FsdGVyLHdhbHRoLHdhbHR6LHdhbHR6ZXIsd2FtYXJhLHdhbWJhaXMsd2FtYmxlLHdhbWJseSx3YW1lLHdhbWVmb3Usd2FtZWwsd2FtcCx3YW1wZWUsd2FtcGxlLHdhbXB1bSx3YW1wdXMsd2FtdXMsd2FuLHdhbmQsd2FuZGVyLHdhbmRlcnksd2FuZGxlLHdhbmRvbyx3YW5keSx3YW5lLHdhbmVkLHdhbmcsd2FuZ2Esd2FuZ2FsYSx3YW5nYW4sd2FuZ2hlZSx3YW5nbGUsd2FuZ2xlcix3YW5ob3BlLHdhbmhvcm4sd2FuaWdhbix3YW5pbmcsd2Fua2xlLHdhbmtseSx3YW5sZSx3YW5seSx3YW5uZXIsd2FubmVzcyx3YW5uaXNoLHdhbm55LHdhbnJ1ZmUsd2FudCx3YW50YWdlLHdhbnRlcix3YW50ZnVsLHdhbnRpbmcsd2FudG9uLHdhbnR3aXQsd2FudHksd2FueSx3YXAsd2FwYWN1dCx3YXBhdG9vLHdhcGl0aSx3YXBwLHdhcHBlcix3YXBwaW5nLHdhcix3YXJhYmksd2FyYXRhaCx3YXJibGUsd2FyYmxlZCx3YXJibGVyLHdhcmJsZXQsd2FyYmx5LHdhcmNoLHdhcmQsd2FyZGFnZSx3YXJkYXksd2FyZGVkLHdhcmRlbix3YXJkZXIsd2FyZGluZyx3YXJkaXRlLHdhcmRtYW4sd2FyZSx3YXJlaG91LHdhcmVtYW4sd2FyZix3YXJmYXJlLHdhcmZ1bCx3YXJpbHksd2FyaXNoLHdhcmlzb24sd2Fyayx3YXJsLHdhcmxlc3Msd2FybGlrZSx3YXJsb2NrLHdhcmx1Y2ssd2FybHksd2FybSx3YXJtYW4sd2FybWVkLHdhcm1lcix3YXJtZnVsLHdhcm1pbmcsd2FybWlzaCx3YXJtbHksd2FybXRoLHdhcm11cyx3YXJuLHdhcm5lbCx3YXJuZXIsd2FybmluZyx3YXJuaXNoLHdhcm5vdGgsd2FybnQsd2FycCx3YXJwYWdlLHdhcnBlZCx3YXJwZXIsd2FycGluZyx3YXJwbGUsd2FycmFuLHdhcnJhbmQsd2FycmFudCx3YXJyZWUsd2FycmVuLHdhcnJlcix3YXJyaW4sd2Fycmlvcix3YXJyb2ssd2Fyc2F3LHdhcnNlLHdhcnNlbCx3YXJzaGlwLHdhcnNsZSx3YXJzbGVyLHdhcnN0LHdhcnQsd2FydGVkLHdhcnRlcm4sd2FydGgsd2FydGltZSx3YXJ0bGV0LHdhcnR5LHdhcnZlLHdhcndvbGYsd2Fyd29ybix3YXJ5LHdhcyx3YXNhYmksd2FzZSx3YXNlbCx3YXNoLHdhc2hkYXksd2FzaGVkLHdhc2hlbix3YXNoZXIsd2FzaGVyeSx3YXNoaW4sd2FzaGluZyx3YXNobWFuLHdhc2hvZmYsd2FzaG91dCx3YXNocG90LHdhc2hyYWcsd2FzaHR1Yix3YXNod2F5LHdhc2h5LHdhc250LHdhc3Asd2FzcGVuLHdhc3BpbHksd2FzcGlzaCx3YXNweSx3YXNzYWlsLHdhc3NpZSx3YXN0LHdhc3RhZ2Usd2FzdGUsd2FzdGVkLHdhc3RlbCx3YXN0ZXIsd2FzdGluZyx3YXN0cmVsLHdhc3R5LHdhdCx3YXRhcCx3YXRjaCx3YXRjaGVkLHdhdGNoZXIsd2F0ZXIsd2F0ZXJlZCx3YXRlcmVyLHdhdGVyaWUsd2F0ZXJ5LHdhdGgsd2F0dCx3YXR0YWdlLHdhdHRhcGUsd2F0dGxlLHdhdHRsZWQsd2F0dG1hbix3YXVibGUsd2F1Y2gsd2F1Y2hsZSx3YXVjaHQsd2F1Zix3YXVnaCx3YXVnaHksd2F1a2VuLHdhdWtpdCx3YXVsLHdhdW1sZSx3YXVuZXIsd2F1bnMsd2F1cCx3YXVyLHdhdXZlLHdhdmFibGUsd2F2YWJseSx3YXZlLHdhdmVkLHdhdmVsZXQsd2F2ZXIsd2F2ZXJlcix3YXZlcnksd2F2ZXNvbix3YXZleSx3YXZpY2xlLHdhdmlseSx3YXZpbmcsd2F2eSx3YXcsd2F3YSx3YXdhaCx3YXgsd2F4YmlsbCx3YXhiaXJkLHdheGJ1c2gsd2F4ZW4sd2F4ZXIsd2F4aWx5LHdheGluZyx3YXhsaWtlLHdheG1hbix3YXh3ZWVkLHdheHdpbmcsd2F4d29yayx3YXh5LHdheSx3YXlha2Esd2F5YW5nLHdheWJhY2ssd2F5YmlsbCx3YXliaXJkLHdheWJvb2ssd2F5YnVuZyx3YXlmYXJlLHdheWdhbmcsd2F5Z2F0ZSx3YXlnb25lLHdheWluZyx3YXlsYWlkLHdheWxheSx3YXlsZXNzLHdheW1hbix3YXltYXJrLHdheW1hdGUsd2F5cG9zdCx3YXlzLHdheXNpZGUsd2F5d2FyZCx3YXl3b2RlLHdheXdvcm4sd2F5d29ydCx3ZSx3ZWFrLHdlYWtlbix3ZWFraXNoLHdlYWtseSx3ZWFreSx3ZWFsLHdlYWxkLHdlYWx0aCx3ZWFsdGh5LHdlYW0sd2Vhbix3ZWFuZWwsd2VhbmVyLHdlYW55ZXIsd2VhcG9uLHdlYXIsd2VhcmVyLHdlYXJpZWQsd2Vhcmllcix3ZWFyaWx5LHdlYXJpbmcsd2VhcmlzaCx3ZWFyeSx3ZWFzYW5kLHdlYXNlbCx3ZWFzZXIsd2Vhc29uLHdlYXRoZXIsd2VhdmUsd2VhdmVkLHdlYXZlcix3ZWF2aW5nLHdlYXplbix3ZWF6ZW55LHdlYix3ZWJiZWQsd2ViYmVyLHdlYmJpbmcsd2ViYnksd2ViZXIsd2ViZXllLHdlYmZvb3Qsd2VibGVzcyx3ZWJsaWtlLHdlYnN0ZXIsd2Vid29yayx3ZWJ3b3JtLHdlY2h0LHdlZCx3ZWRhbmEsd2VkYmVkLHdlZGRlZCx3ZWRkZXIsd2VkZGluZyx3ZWRlLHdlZGdlLHdlZGdlZCx3ZWRnZXIsd2VkZ2luZyx3ZWRneSx3ZWRsb2NrLHdlZHNldCx3ZWUsd2VlYmxlLHdlZWQsd2VlZGEsd2VlZGFnZSx3ZWVkZWQsd2VlZGVyLHdlZWRlcnksd2VlZGZ1bCx3ZWVkaXNoLHdlZWRvdyx3ZWVkeSx3ZWVrLHdlZWtkYXksd2Vla2VuZCx3ZWVrbHksd2Vla3dhbSx3ZWVsLHdlZW1lbix3ZWVuLHdlZW5lc3Msd2VlbmluZyx3ZWVub25nLHdlZW55LHdlZXAsd2VlcGVyLHdlZXBmdWwsd2VlcGluZyx3ZWVwcyx3ZWVweSx3ZWVzaCx3ZWVzaHksd2VldCx3ZWV2ZXIsd2VldmlsLHdlZXZpbHksd2Vld293LHdlZXplLHdlZnQsd2VmdGFnZSx3ZWZ0ZWQsd2VmdHksd2VpZ2gsd2VpZ2hlZCx3ZWlnaGVyLHdlaWdoaW4sd2VpZ2h0LHdlaWdodHksd2Vpcix3ZWlyZCx3ZWlyZGx5LHdlaXJpbmcsd2Vpc20sd2VqYWNrLHdla2Esd2VrYXUsd2VrZWVuLHdla2ksd2VsY29tZSx3ZWxkLHdlbGRlcix3ZWxkaW5nLHdlbGRvcix3ZWxmYXJlLHdlbGssd2Vsa2luLHdlbGwsd2VsbGF0LHdlbGxpbmcsd2VsbGlzaCx3ZWxsbWFuLHdlbGx5LHdlbHMsd2Vsc2gsd2Vsc2hlcix3ZWxzaXVtLHdlbHQsd2VsdGVkLHdlbHRlcix3ZWx0aW5nLHdlbSx3ZW1sZXNzLHdlbix3ZW5jaCx3ZW5jaGVyLHdlbmQsd2VuZGUsd2VuZSx3ZW5uaXNoLHdlbm55LHdlbnQsd2VuemVsLHdlcHQsd2VyLHdlcmUsd2VyZWZveCx3ZXJlbnQsd2VyZix3ZXJnaWwsd2VyaSx3ZXJ0LHdlcnZlbCx3ZXNlLHdlc2tpdCx3ZXN0LHdlc3RlLHdlc3Rlcix3ZXN0ZXJuLHdlc3Rpbmcsd2VzdHksd2V0LHdldGEsd2V0YmFjayx3ZXRiaXJkLHdldGNoZWQsd2V0Y2hldCx3ZXRoZXIsd2V0bHksd2V0bmVzcyx3ZXR0ZWQsd2V0dGVyLHdldHRpbmcsd2V0dGlzaCx3ZXZlLHdldmV0LHdleSx3aGEsd2hhYmJ5LHdoYWNrLHdoYWNrZXIsd2hhY2t5LHdoYWxlLHdoYWxlcix3aGFsZXJ5LHdoYWxpbmcsd2hhbGlzaCx3aGFsbHksd2hhbG0sd2hhbHAsd2hhbHksd2hhbSx3aGFtYmxlLHdoYW1lLHdoYW1tbGUsd2hhbXAsd2hhbXBlZSx3aGFtcGxlLHdoYW4sd2hhbmQsd2hhbmcsd2hhbmdhbSx3aGFuZ2VlLHdoYW5rLHdoYXAsd2hhcHBldCx3aGFwdWthLHdoYXB1a3Usd2hhcix3aGFyZSx3aGFyZWVyLHdoYXJmLHdoYXJsLHdoYXJwLHdoYXJyeSx3aGFydCx3aGFydmUsd2hhc2Usd2hhc2xlLHdoYXQsd2hhdGEsd2hhdGtpbix3aGF0bmEsd2hhdG5vdCx3aGF0cyx3aGF0c28sd2hhdHRlbix3aGF1LHdoYXVrLHdoYXVwLHdoYXVyLHdoYXV2ZSx3aGVhbCx3aGVhbHksd2hlYW0sd2hlYXQsd2hlYXRlbix3aGVhdHksd2hlZGRlcix3aGVlLHdoZWVkbGUsd2hlZWwsd2hlZWxlZCx3aGVlbGVyLHdoZWVseSx3aGVlbSx3aGVlbix3aGVlbmdlLHdoZWVwLHdoZWVwbGUsd2hlZXIsd2hlZXNodCx3aGVldGxlLHdoZWV6ZSx3aGVlemVyLHdoZWV6bGUsd2hlZXp5LHdoZWZ0LHdoZWluLHdoZWthdSx3aGVraSx3aGVsayx3aGVsa2VkLHdoZWxrZXIsd2hlbGt5LHdoZWxtLHdoZWxwLHdoZWx2ZSx3aGVtbWVsLHdoZW4sd2hlbmFzLHdoZW5jZSx3aGVuZWVyLHdoZW5zbyx3aGVyZSx3aGVyZWFzLHdoZXJlYXQsd2hlcmVieSx3aGVyZWVyLHdoZXJlaW4sd2hlcmVvZix3aGVyZW9uLHdoZXJlc28sd2hlcmV0byx3aGVyZXVwLHdoZXJyZXQsd2hlcnJpdCx3aGVycnksd2hldCx3aGV0aGVyLHdoZXRpbGUsd2hldHRlcix3aGV3LHdoZXdlcix3aGV3bCx3aGV3dCx3aGV5LHdoZXlleSx3aGV5aXNoLHdoaWJhLHdoaWNoLHdoaWNrLHdoaWNrZW4sd2hpY2tlcix3aGlkLHdoaWRhaCx3aGlkZGVyLHdoaWZmLHdoaWZmZXIsd2hpZmZldCx3aGlmZmxlLHdoaWZmeSx3aGlmdCx3aGlnLHdoaWxlLHdoaWxlZW4sd2hpbGVyZSx3aGlsZXMsd2hpbGllLHdoaWxrLHdoaWxsLHdoaWxseSx3aGlsb2NrLHdoaWxvbSx3aGlscyx3aGlsc3Qsd2hpbHRlcix3aGltLHdoaW1ibGUsd2hpbW15LHdoaW1wZXIsd2hpbXNleSx3aGltc2ljLHdoaW4sd2hpbmNvdyx3aGluZGxlLHdoaW5lLHdoaW5lcix3aGluZyx3aGluZ2Usd2hpbmdlcix3aGlubmVsLHdoaW5uZXIsd2hpbm55LHdoaW55LHdoaXAsd2hpcGNhdCx3aGlwbWFuLHdoaXBwYSx3aGlwcGVkLHdoaXBwZXIsd2hpcHBldCx3aGlwcHksd2hpcHNhdyx3aGlwdCx3aGlyLHdoaXJrZW4sd2hpcmwsd2hpcmxlZCx3aGlybGVyLHdoaXJsZXksd2hpcmx5LHdoaXJyZXQsd2hpcnJleSx3aGlycm9vLHdoaXJyeSx3aGlydGxlLHdoaXNoLHdoaXNrLHdoaXNrZXIsd2hpc2tleSx3aGlza3ksd2hpc3Asd2hpc3Blcix3aGlzc2xlLHdoaXN0LHdoaXN0ZXIsd2hpc3RsZSx3aGlzdGx5LHdoaXQsd2hpdGUsd2hpdGVkLHdoaXRlbHksd2hpdGVuLHdoaXRlcyx3aGl0aGVyLHdoaXRpbmcsd2hpdGlzaCx3aGl0bG93LHdoaXRzLHdoaXR0YXcsd2hpdHRlbix3aGl0dGVyLHdoaXR0bGUsd2hpdHksd2hpeix3aGl6Z2lnLHdoaXp6ZXIsd2hpenpsZSx3aG8sd2hvYSx3aG9ldmVyLHdob2xlLHdob2xseSx3aG9tLHdob21ibGUsd2hvbXNvLHdob25lLHdob28sd2hvb2Ysd2hvb3Asd2hvb3BlZSx3aG9vcGVyLHdob29wcyx3aG9vc2gsd2hvcCx3aG9wcGVyLHdob3JhZ2Usd2hvcmUsd2hvcmlzaCx3aG9ybCx3aG9ybGVkLHdob3JseSx3aG9ydCx3aG9ydGxlLHdob3NlLHdob3Nlbix3aHVkLHdodWZmLHdodWZmbGUsd2h1bGssd2h1bHRlcix3aHVtbWxlLHdodW4sd2h1cCx3aHVzaCx3aHVza2llLHdodXNzbGUsd2h1dGUsd2h1dGhlcix3aHV0dGVyLHdodXosd2h5LHdoeWV2ZXIsd2h5Zm9yLHdoeW5lc3Msd2h5byx3aSx3aWNlLHdpY2h0LHdpY2h0amUsd2ljayx3aWNrZWQsd2lja2VuLHdpY2tlcix3aWNrZXQsd2lja2luZyx3aWNraXVwLHdpY2t1cCx3aWNreSx3aWNvcHksd2lkLHdpZGJpbix3aWRkZXIsd2lkZGxlLHdpZGR5LHdpZGUsd2lkZWdhYix3aWRlbHksd2lkZW4sd2lkZW5lcix3aWRnZW9uLHdpZGlzaCx3aWRvdyx3aWRvd2VkLHdpZG93ZXIsd2lkb3dseSx3aWRvd3ksd2lkdGgsd2lkdSx3aWVsZCx3aWVsZGVyLHdpZWxkeSx3aWVuZXIsd2llbmllLHdpZmUsd2lmZWRvbSx3aWZlaXNtLHdpZmVraW4sd2lmZWxldCx3aWZlbHksd2lmaWUsd2lmaXNoLHdpZm9jayx3aWcsd2lnYW4sd2lnZG9tLHdpZ2Z1bCx3aWdnZWQsd2lnZ2VuLHdpZ2dlcix3aWdnZXJ5LHdpZ2dpbmcsd2lnZ2lzaCx3aWdnaXNtLHdpZ2dsZSx3aWdnbGVyLHdpZ2dseSx3aWdneSx3aWdodCx3aWdodGx5LHdpZ2xlc3Msd2lnbGV0LHdpZ2xpa2Usd2lndGFpbCx3aWd3YWcsd2lnd2FtLHdpaWtpdGUsd2lsZCx3aWxkY2F0LHdpbGRlZCx3aWxkZXIsd2lsZGluZyx3aWxkaXNoLHdpbGRseSx3aWxlLHdpbGVmdWwsd2lsZ2Esd2lsZ2Vycyx3aWxpbHksd2lsayx3aWxraW4sd2lsbCx3aWxsYXdhLHdpbGxlZCx3aWxsZXIsd2lsbGV0LHdpbGxleSx3aWxsZnVsLHdpbGxpZSx3aWxsaWVyLHdpbGxpZXMsd2lsbGluZyx3aWxsb2NrLHdpbGxvdyx3aWxsb3d5LHdpbGx5LHdpbGx5ZXIsd2lsc29tZSx3aWx0LHdpbHRlcix3aWx5LHdpbSx3aW1ibGUsd2ltYnJlbCx3aW1lLHdpbWljayx3aW1wbGUsd2luLHdpbmNlLHdpbmNlcix3aW5jZXksd2luY2gsd2luY2hlcix3aW5jaW5nLHdpbmQsd2luZGFnZSx3aW5kYmFnLHdpbmRkb2csd2luZGVkLHdpbmRlcix3aW5kaWdvLHdpbmRpbHksd2luZGluZyx3aW5kbGUsd2luZGxlcyx3aW5kbGluLHdpbmRvY2ssd2luZG9yZSx3aW5kb3csd2luZG93eSx3aW5kcm93LHdpbmR1cCx3aW5kd2F5LHdpbmR5LHdpbmUsd2luZWQsd2luZW1heSx3aW5lcG90LHdpbmVyLHdpbmVyeSx3aW5lc29wLHdpbmV2YXQsd2luZnVsLHdpbmcsd2luZ2N1dCx3aW5nZWQsd2luZ2VyLHdpbmdsZSx3aW5nbGV0LHdpbmdtYW4sd2luZ3ksd2luaXNoLHdpbmssd2lua2VsLHdpbmtlcix3aW5raW5nLHdpbmtsZSx3aW5rbGV0LHdpbmx5LHdpbm5hLHdpbm5hcmQsd2lubmVsLHdpbm5lcix3aW5uaW5nLHdpbm5sZSx3aW5ub3csd2lucmFjZSx3aW5yb3csd2luc29tZSx3aW50LHdpbnRlcix3aW50bGUsd2ludHJ5LHdpbnksd2luemUsd2lwZSx3aXBlcix3aXBwZW4sd2lwcyx3aXIsd2lyYWJsZSx3aXJibGUsd2lyZCx3aXJlLHdpcmViYXIsd2lyZWQsd2lyZW1hbix3aXJlcix3aXJld2F5LHdpcmlseSx3aXJpbmcsd2lybCx3aXJsaW5nLHdpcnIsd2lycmEsd2lycmFoLHdpcnksd2lzLHdpc2RvbSx3aXNlLHdpc2VseSx3aXNlbWFuLHdpc2VuLHdpc2VudCx3aXNlcix3aXNoLHdpc2hhLHdpc2hlZCx3aXNoZXIsd2lzaGZ1bCx3aXNoaW5nLHdpc2hseSx3aXNobWF5LHdpc2h0LHdpc2tldCx3aXNwLHdpc3Bpc2gsd2lzcHksd2lzcyx3aXNzZSx3aXNzZWwsd2lzdCx3aXN0ZSx3aXN0ZnVsLHdpc3RpdCx3aXN0aXRpLHdpdCx3aXRhbix3aXRjaCx3aXRjaGVkLHdpdGNoZW4sd2l0Y2hldCx3aXRjaHksd2l0ZSx3aXRlc3Msd2l0ZnVsLHdpdGgsd2l0aGFsLHdpdGhlLHdpdGhlbix3aXRoZXIsd2l0aGVycyx3aXRoZXJ5LHdpdGhpbix3aXRob3V0LHdpdGh5LHdpdGphcix3aXRsZXNzLHdpdGxldCx3aXRsaW5nLHdpdGxvb2Ysd2l0bmVzcyx3aXRuZXksd2l0c2hpcCx3aXR0YWwsd2l0dGVkLHdpdHRlcix3aXR0aWx5LHdpdHRpbmcsd2l0dG9sLHdpdHR5LHdpdHdhbGwsd2l2ZSx3aXZlcix3aXZlcm4sd2l6LHdpemFyZCx3aXplbix3aXplbmVkLHdpemllcix3aXp6ZW4sd2xva2Esd28sd29hZCx3b2FkZXIsd29hZG1hbix3b2FkeSx3b2FrLHdvYWxkLHdvYW4sd29iLHdvYmJsZSx3b2JibGVyLHdvYmJseSx3b2JzdGVyLHdvZCx3b2RkaWUsd29kZSx3b2RnZSx3b2RneSx3b2Usd29lZnVsLHdvZXNvbWUsd29ldmluZSx3b2V3b3JuLHdvZmZsZXIsd29mdCx3b2csd29naWV0LHdvaWJlLHdva2FzLHdva2Usd29rb3dpLHdvbGQsd29sZHksd29sZix3b2xmZG9tLHdvbGZlbix3b2xmZXIsd29sZmlzaCx3b2xma2luLHdvbGZyYW0sd29sbG9wLHdvbHRlcix3b2x2ZSx3b2x2ZXIsd29tYW4sd29tYW5seSx3b21iLHdvbWJhdCx3b21iZWQsd29tYmxlLHdvbWJ5LHdvbWVyYSx3b24sd29uZGVyLHdvbmUsd29uZWdhbix3b25nLHdvbmdhLHdvbmdlbix3b25nc2h5LHdvbmdza3ksd29uaW5nLHdvbmt5LHdvbm5hLHdvbm5lZCx3b25uZXIsd29ubmluZyx3b25ub3Qsd29udCx3b250ZWQsd29udGluZyx3b28sd29vYWJsZSx3b29kLHdvb2RiaW4sd29vZGN1dCx3b29kZWQsd29vZGVuLHdvb2Rlbnksd29vZGluZSx3b29kaW5nLHdvb2Rpc2gsd29vZGxldCx3b29kbHksd29vZG1hbix3b29kcm93LHdvb2RzeSx3b29kd2F4LHdvb2R5LHdvb2VyLHdvb2Ysd29vZmVkLHdvb2ZlbGwsd29vZmVyLHdvb2Z5LHdvb2hvbyx3b29pbmcsd29vbCx3b29sZCx3b29sZGVyLHdvb2xlZCx3b29sZW4sd29vbGVyLHdvb2xlcnQsd29vbGx5LHdvb2xtYW4sd29vbHNleSx3b29tLHdvb21lcix3b29uLHdvb25zLHdvb3JhbGksd29vcmFyaSx3b29zaCx3b290eix3b296bGUsd29venksd29wLHdvcHBpc2gsd29wcyx3b3JibGUsd29yZCx3b3JkYWdlLHdvcmRlZCx3b3JkZXIsd29yZGlseSx3b3JkaW5nLHdvcmRpc2gsd29yZGxlLHdvcmRtYW4sd29yZHksd29yZSx3b3JrLHdvcmtiYWcsd29ya2JveCx3b3JrZGF5LHdvcmtlZCx3b3JrZXIsd29ya2luZyx3b3JrbWFuLHdvcmtvdXQsd29ya3Bhbix3b3Jrcyx3b3JreSx3b3JsZCx3b3JsZGVkLHdvcmxkbHksd29ybGR5LHdvcm0sd29ybWVkLHdvcm1lcix3b3JtaWwsd29ybWluZyx3b3JteSx3b3JuLHdvcm5pbCx3b3JyYWwsd29ycmllZCx3b3JyaWVyLHdvcnJpdCx3b3JyeSx3b3JzZSx3b3JzZW4sd29yc2VyLHdvcnNldCx3b3JzaGlwLHdvcnN0LHdvcnN0ZWQsd29ydCx3b3J0aCx3b3J0aHksd29zYmlyZCx3b3Qsd290ZSx3b3RzLHdvdHRlc3Qsd290dGV0aCx3b3ViaXQsd291Y2gsd291Zix3b3VnaCx3b3VsZCx3b3VsZG50LHdvdWxkc3Qsd291bmQsd291bmRlZCx3b3VuZGVyLHdvdW5kcyx3b3VuZHksd291cmFsaSx3b3VyYXJpLHdvdXJuaWwsd292ZSx3b3Zlbix3b3csd293c2VyLHdvd3Nlcnksd293dCx3b3ksd3JhY2ssd3JhY2tlcix3cmFnZ2xlLHdyYWl0aCx3cmFpdGhlLHdyYWl0aHksd3JhaXRseSx3cmFtcCx3cmFuLHdyYW5nLHdyYW5nbGUsd3Jhbm55LHdyYXAsd3JhcHBlZCx3cmFwcGVyLHdyYXNzZSx3cmFzdGxlLHdyYXRoLHdyYXRoeSx3cmF3LHdyYXdsLHdyYXdsZXIsd3JheGxlLHdyZWFrLHdyZWF0LHdyZWF0aCx3cmVhdGhlLHdyZWF0aHksd3JlY2ssd3JlY2tlcix3cmVja3ksd3Jlbix3cmVuY2gsd3JlbmxldCx3cmVzdCx3cmVzdGVyLHdyZXN0bGUsd3JldGNoLHdyaWNodCx3cmljayx3cmlkZSx3cmllZCx3cmllcix3cmllc3Qsd3JpZyx3cmlnZ2xlLHdyaWdnbHksd3JpZ2h0LHdyaW5nLHdyaW5nZXIsd3JpbmtsZSx3cmlua2x5LHdyaXN0LHdyaXN0ZWQsd3Jpc3Rlcix3cml0LHdyaXRlLHdyaXRlZSx3cml0ZXIsd3JpdGgsd3JpdGhlLHdyaXRoZWQsd3JpdGhlbix3cml0aGVyLHdyaXRoeSx3cml0aW5nLHdyaXR0ZW4sd3JpdHRlcix3cml2ZSx3cm8sd3JvY2h0LHdyb2tlLHdyb2tlbix3cm9uZyx3cm9uZ2VkLHdyb25nZXIsd3JvbmdseSx3cm9zc2xlLHdyb3RlLHdyb3RoLHdyb3RobHksd3JvdGh5LHdyb3VnaHQsd3JveCx3cnVuZyx3cnksd3J5YmlsbCx3cnlseSx3cnluZWNrLHdyeW5lc3Msd3J5dGFpbCx3dWQsd3VkZGllLHd1ZGdlLHd1ZHUsd3VnZyx3dWxrLHd1bGwsd3VsbGNhdCx3dWxsaXdhLHd1bWJsZSx3dW1tYW4sd3VtbWVsLHd1bix3dW5nZWUsd3VubmEsd3VubmVyLHd1bnNvbWUsd3VwLHd1cix3dXJsZXksd3VybWFsLHd1cnJ1cyx3dXJzZXQsd3VyemVsLHd1c2gsd3VzcCx3dXNzLHd1c3Nlcix3dXN0LHd1dCx3dXRoZXIsd3V6dSx3dXp6ZXIsd3V6emxlLHd1enp5LHd5LHd5ZGUsd3llLHd5a2Usd3lsZSx3eW1vdGUsd3luLHd5bmQsd3luZSx3eW5uLHd5cGUsd3lzb24sd3lzcyx3eXZlLHd5dmVyLHgseGFudGhpYyx4YW50aGluLHhhbnRoeWwseGFycXVlLHhlYmVjLHhlbmlhLHhlbmlhbCx4ZW5pYW4seGVuaXVtLHhlbm9uLHhlbnlsLHhlcmFmaW4seGVyYXJjaCx4ZXJhc2lhLHhlcmljLHhlcmlmZix4ZXJvZ2VsLHhlcm9tYSx4ZXJvbmljLHhlcm9zaXMseGVyb3Rlcyx4ZXJvdGljLHhpLHhpcGhpYXMseGlwaGlpZCx4aXBob2lkLHhvYW5hLHhvYW5vbix4dXJlbCx4eWxhLHh5bGFuLHh5bGF0ZSx4eWxlbSx4eWxlbmUseHlsZW5vbCx4eWxlbnlsLHh5bGV0aWMseHlsaWMseHlsaWRpYyx4eWxpbmlkLHh5bGl0ZSx4eWxpdG9sLHh5bG9nZW4seHlsb2lkLHh5bG9sLHh5bG9tYSx4eWxvbix4eWxvbmljLHh5bG9zZSx4eWxveWwseHlseWwseHlseWxpYyx4eXBob2lkLHh5cmlkLHh5c3QseHlzdGVyLHh5c3RpLHh5c3Rvcyx4eXN0dW0seHlzdHVzLHkseWEseWFiYSx5YWJiZXIseWFiYmkseWFiYmxlLHlhYmJ5LHlhYnUseWFjYWwseWFjY2EseWFjaGFuLHlhY2h0LHlhY2h0ZXIseWFjaHR5LHlhZCx5YWRlLHlhZmYseWFmZmxlLHlhZ2dlcix5YWdpLHlhZ3VhLHlhZ3VhemEseWFoLHlhaGFuLHlhaG9vLHlhaXIseWFpcmQseWFqZSx5YWplaW5lLHlhayx5YWthbG8seWFrYW1payx5YWtpbix5YWtrYSx5YWttYW4seWFsYix5YWxlLHlhbGkseWFsbGEseWFsbGFlcix5YWxsb3cseWFtLHlhbWFtYWkseWFtYW5haSx5YW1lbix5YW1pbGtlLHlhbW1lcix5YW1wLHlhbXBhLHlhbXBoLHlhbXNoaWsseWFuLHlhbmRlcix5YW5nLHlhbmd0YW8seWFuayx5YW5raW5nLHlhbmt5LHlhb29ydCx5YW91cnRpLHlhcCx5YXBhLHlhcGx5LHlhcG5lc3MseWFwb2sseWFwcCx5YXBwZWQseWFwcGVyLHlhcHBpbmcseWFwcGlzaCx5YXBweSx5YXBzdGVyLHlhcix5YXJhayx5YXJheSx5YXJiLHlhcmQseWFyZGFnZSx5YXJkYW5nLHlhcmRhcm0seWFyZGVyLHlhcmRmdWwseWFyZGluZyx5YXJkbWFuLHlhcmUseWFyZXRhLHlhcmsseWFya2UseWFybCx5YXJseSx5YXJtLHlhcm4seWFybmVuLHlhcm5lcix5YXJwaGEseWFycix5YXJyYW4seWFycm93LHlhcnRoLHlhcnRoZW4seWFyd2hpcCx5YXMseWFzaGlybyx5YXNobWFrLHlhdCx5YXRlLHlhdGkseWF0dGVyLHlhdWQseWF1bGQseWF1cG9uLHlhdXRpYSx5YXZhLHlhdyx5YXdsLHlhd2xlcix5YXduLHlhd25lcix5YXduZXkseWF3bmZ1bCx5YXduaWx5LHlhd25pbmcseWF3bnVwcyx5YXdueSx5YXdwLHlhd3Blcix5YXdyb290LHlhd3MseWF3d2VlZCx5YXd5LHlheGNoZSx5YXlhLHljaWUseWRheSx5ZSx5ZWEseWVhaCx5ZWFsaW5nLHllYW4seWVhcix5ZWFyYSx5ZWFyZCx5ZWFyZGF5LHllYXJmdWwseWVhcmx5LHllYXJuLHllYXJvY2sseWVhcnRoLHllYXN0LHllYXN0eSx5ZWF0LHllYXRoZXIseWVkLHllZGUseWVlLHllZWwseWVlcyx5ZWdnLHllZ2dtYW4seWVndWl0YSx5ZWxkLHllbGRyaW4seWVsayx5ZWxsLHllbGxlcix5ZWxsaW5nLHllbGxvY2gseWVsbG93LHllbGxvd3MseWVsbG93eSx5ZWxtLHllbG1lcix5ZWxwLHllbHBlcix5ZWx0LHllbix5ZW5kZXIseWVuaSx5ZW5pdGUseWVvLHllb21hbix5ZXAseWVyLHllcmIseWVyYmEseWVyY3VtLHllcmQseWVyZSx5ZXJnYSx5ZXJrLHllcm4seWVydGgseWVzLHllc2UseWVzbyx5ZXNzbyx5ZXN0LHllc3Rlcix5ZXN0ZXJuLHllc3R5LHlldCx5ZXRhLHlldGFwYSx5ZXRoLHlldGhlcix5ZXRsaW4seWV1ayx5ZXVreSx5ZXZlbix5ZXcseWV4LHlleix5ZXp6eSx5Z2Fwbyx5aWVsZCx5aWVsZGVuLHlpZWxkZXIseWllbGR5LHlpZ2gseWlsbCx5aWx0LHlpbix5aW5jZSx5aW5zdCx5aXAseWlyZCx5aXJrLHlpcm0seWlybix5aXJyLHlpcnRoLHlpcyx5aXRlLHltLHluLHluYW1idSx5byx5b2JpLHlvY2NvLHlvY2hlbCx5b2NrLHlvY2tlbCx5b2RlbCx5b2RlbGVyLHlvZGgseW9lLHlvZ2EseW9naCx5b2dodXJ0LHlvZ2kseW9naW4seW9naXNtLHlvZ2lzdCx5b2dvaXRlLHlvaGltYmUseW9oaW1iaSx5b2kseW9pY2sseW9pY2tzLHlvamFuLHlvamFuYSx5b2sseW9rZSx5b2tlYWdlLHlva2VsLHlva2VscnkseW9rZXIseW9raW5nLHlva3kseW9sZGVuLHlvbGsseW9sa2VkLHlvbGt5LHlvbSx5b21lcix5b24seW9uZCx5b25kZXIseW9ubmVyLHlvbnNpZGUseW9udCx5b29rLHlvb3AseW9yLHlvcmUseW9yayx5b3JrZXIseW90LHlvdGUseW91LHlvdWQseW91ZGVuLHlvdWRpdGgseW91ZmYseW91bCx5b3VuZyx5b3VuZ2VyLHlvdW5nbHkseW91bmd1bix5b3Vua2VyLHlvdXAseW91cix5b3Vybix5b3Vycyx5b3Vyc2VsLHlvdXNlLHlvdXRoLHlvdXRoZW4seW91dGh5LHlvdXZlLHlvdXdhcmQseW91emUseW92ZW4seW93LHlvd2llLHlvd2wseW93bGVyLHlvd2xleSx5b3d0LHlveCx5b3kseXBlcml0ZSx5cix5dHRyaWEseXR0cmljLHl0dHJpdW0seXVhbix5dWNhLHl1Y2NhLHl1Y2sseXVja2VsLHl1Y2tlcix5dWNrbGUseXVja3kseXVmdCx5dWdhZGEseXVoLHl1a2tlbCx5dWxhbix5dWxlLHl1bW15LHl1bmdhbix5dXJ0LHl1cnRhLHl1cyx5dXNkcnVtLHl1dHUseXV6bGlrLHl1emx1ayx6LHphLHphYmV0YSx6YWJyYSx6YWJ0aSx6YWJ0aWUsemFjLHphY2F0ZSx6YWNhdG9uLHphY2h1bix6YWQsemFkcnVnYSx6YWZmYXIsemFmZmVyLHphZnJlZSx6YWcsemFnZ2VkLHphaW4semFrLHpha2tldSx6YW1hbix6YW1hbmcsemFtYXJyYSx6YW1hcnJvLHphbWJvLHphbW9yaW4semFtb3VzZSx6YW5kZXIsemFuZWxsYSx6YW50LHphbnRlLHphbnksemFueWlzaCx6YW55aXNtLHphbnplLHphcGFzLHphcGhhcmEsemFwb3RhLHphcHRpYWgsemFwdGllaCx6YXB1cGUsemFxcXVtLHphcix6YXJlYmEsemFyZix6YXJuaWNoLHphcnAsemF0LHphdGksemF0dGFyZSx6YXgsemF5YXQsemF5aW4semVhbCx6ZWFsZnVsLHplYWxvdCx6ZWFsb3VzLHplYnJhLHplYnJhaWMsemVicmFzcyx6ZWJyaW5lLHplYnJvaWQsemVicnVsYSx6ZWJydWxlLHplYnUsemVidWIsemVidXJybyx6ZWNoaW4semVkLHplZG9hcnksemVlLHplZWQsemVobmVyLHplaW4semVpc20semVpc3QsemVsLHplbGF0b3IsemVtZWlzbSx6ZW1pLHplbW1pLHplbW5pLHplbXN0dm8semVuYW5hLHplbmRpayx6ZW5pY2ssemVuaXRoLHplbnUsemVvbGl0ZSx6ZXBoeXIsemVwaHlyeSx6ZXF1aW4semVyLHplcmRhLHplcm8semVyb2l6ZSx6ZXN0LHplc3RmdWwsemVzdHksemV0YSx6ZXRldGljLHpldWdtYSx6aWFtZXQsemlhcmEsemlhcmF0LHppYmV0LHppYmV0dW0semllZ2EsemllZ2VyLHppZmZzLHppZyx6aWdhbmthLHppZ3phZyx6aWhhcix6aWt1cmF0LHppbGxhaCx6aW1hcnJhLHppbWIsemltYmksemltbWUsemltbWksemltbWlzLHppbW9jY2EsemluYyx6aW5jYXRlLHppbmNpYyx6aW5jaWRlLHppbmNpZnksemluY2luZyx6aW5jaXRlLHppbmNpemUsemluY2tlLHppbmNreSx6aW5jbyx6aW5jb3VzLHppbmN1bSx6aW5nLHppbmdlbCx6aW5rLHppbnNhbmcsemlwLHppcGhpYW4semlwcGVyLHppcHBpbmcsemlwcHksemlyYSx6aXJhaSx6aXJjaXRlLHppcmNvbix6aXRoZXIseml6eix6bG90eSx6byx6b2Esem9hY3VtLHpvYXJpYSx6b2FyaWFsLHpvYXJpdW0sem9ibyx6b2Njbyx6b2Njb2xvLHpvZGlhYyx6b2VhLHpvZWFsLHpvZWZvcm0sem9ldGljLHpvZ2FuLHpvZ28sem9pYyx6b2lkLHpvaXNpdGUsem9pc20sem9pc3Qsem9pc3RpYyx6b2tvcix6b2xsLHpvbGxlLHpvbWJpLHpvbWJpZSx6b25hbCx6b25hbGx5LHpvbmFyLHpvbmFyeSx6b25hdGUsem9uYXRlZCx6b25lLHpvbmVkLHpvbmVsZXQsem9uaWMsem9uaW5nLHpvbml0ZSx6b25pdGlkLHpvbm9pZCx6b251bGFyLHpvbnVsZSx6b251bGV0LHpvbnVyZSx6b251cmlkLHpvbyx6b29jYXJwLHpvb2N5c3Qsem9vZWNpYSx6b29nYW15LHpvb2dlbmUsem9vZ2VueSx6b29nb255LHpvb2lkLHpvb2lkYWwsem9va3Msem9vbGl0ZSx6b29saXRoLHpvb2xvZ3ksem9vbSx6b29uLHpvb25hbCx6b29uaWMsem9vbmlzdCx6b29uaXRlLHpvb25vbXksem9vbnMsem9vbnVsZSx6b29wZXJ5LHpvb3BzaWEsem9vc2lzLHpvb3RheHksem9vdGVyLHpvb3RpYyx6b290b215LHpvb3R5cGUsem9vem9vLHpvcmdpdGUsem9yaWwsem9yaWxsYSx6b3JpbGxvLHpvcnJvLHpvc3Rlcix6b3VuZHMsem93aWUsenVkZGEsenVpc2luLHp1bWF0aWMsenVueWl0ZSx6dXphLHp3aXR0ZXIsenlnYSx6eWdhbCx6eWdpb24senlnaXRlLHp5Z29tYSx6eWdvbix6eWdvc2Usenlnb3Npcyx6eWdvdGUsenlnb3RpYyx6eWdvdXMsenltYXNlLHp5bWUsenltaWMsenltaW4senltaXRlLHp5bW9nZW4senltb2lkLHp5bW9tZSx6eW1vbWluLHp5bW9zaXMsenltb3RpYyx6eW11cmd5LHp5dGhlbSx6eXRodW1cIlxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBjOi9iaXRzaGFyZXN3YWxsZXQvd3d3L2FwcC9kbC9zcmMvY29tbW9uL2RpY3Rpb25hcnlfZW4uanNcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUgJ3NlY3VyZS1yYW5kb20nXHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL2RsL3NyYy9jb21tb24vc2VjdXJlUmFuZG9tLmNvZmZlZVxuICoqLyIsIiFmdW5jdGlvbihnbG9iYWxzKXtcbid1c2Ugc3RyaWN0J1xuXG4vLyoqKiBVTUQgQkVHSU5cbmlmICh0eXBlb2YgZGVmaW5lICE9PSAndW5kZWZpbmVkJyAmJiBkZWZpbmUuYW1kKSB7IC8vcmVxdWlyZS5qcyAvIEFNRFxuICBkZWZpbmUoW10sIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZWN1cmVSYW5kb21cbiAgfSlcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHsgLy9Db21tb25KU1xuICBtb2R1bGUuZXhwb3J0cyA9IHNlY3VyZVJhbmRvbVxufSBlbHNlIHsgLy9zY3JpcHQgLyBicm93c2VyXG4gIGdsb2JhbHMuc2VjdXJlUmFuZG9tID0gc2VjdXJlUmFuZG9tXG59XG4vLyoqKiBVTUQgRU5EXG5cbi8vb3B0aW9ucy50eXBlIGlzIHRoZSBvbmx5IHZhbGlkIG9wdGlvblxuZnVuY3Rpb24gc2VjdXJlUmFuZG9tKGNvdW50LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt0eXBlOiAnQXJyYXknfVxuICAvL3dlIGNoZWNrIGZvciBwcm9jZXNzLnBpZCB0byBwcmV2ZW50IGJyb3dzZXJpZnkgZnJvbSB0cmlja2luZyB1c1xuICBpZiAodHlwZW9mIHByb2Nlc3MgIT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHByb2Nlc3MucGlkID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIG5vZGVSYW5kb20oY291bnQsIG9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgdmFyIGNyeXB0byA9IHdpbmRvdy5jcnlwdG8gfHwgd2luZG93Lm1zQ3J5cHRvXG4gICAgaWYgKCFjcnlwdG8pIHRocm93IG5ldyBFcnJvcihcIllvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHdpbmRvdy5jcnlwdG8uXCIpXG4gICAgcmV0dXJuIGJyb3dzZXJSYW5kb20oY291bnQsIG9wdGlvbnMpXG4gIH1cbn1cblxuZnVuY3Rpb24gbm9kZVJhbmRvbShjb3VudCwgb3B0aW9ucykge1xuICB2YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJylcbiAgdmFyIGJ1ZiA9IGNyeXB0by5yYW5kb21CeXRlcyhjb3VudClcblxuICBzd2l0Y2ggKG9wdGlvbnMudHlwZSkge1xuICAgIGNhc2UgJ0FycmF5JzpcbiAgICAgIHJldHVybiBbXS5zbGljZS5jYWxsKGJ1ZilcbiAgICBjYXNlICdCdWZmZXInOlxuICAgICAgcmV0dXJuIGJ1ZlxuICAgIGNhc2UgJ1VpbnQ4QXJyYXknOlxuICAgICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KGNvdW50KVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7IGFycltpXSA9IGJ1Zi5yZWFkVUludDgoaSkgfVxuICAgICAgcmV0dXJuIGFyclxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3Iob3B0aW9ucy50eXBlICsgXCIgaXMgdW5zdXBwb3J0ZWQuXCIpXG4gIH1cbn1cblxuZnVuY3Rpb24gYnJvd3NlclJhbmRvbShjb3VudCwgb3B0aW9ucykge1xuICB2YXIgbmF0aXZlQXJyID0gbmV3IFVpbnQ4QXJyYXkoY291bnQpXG4gIHZhciBjcnlwdG8gPSB3aW5kb3cuY3J5cHRvIHx8IHdpbmRvdy5tc0NyeXB0b1xuICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5hdGl2ZUFycilcblxuICBzd2l0Y2ggKG9wdGlvbnMudHlwZSkge1xuICAgIGNhc2UgJ0FycmF5JzpcbiAgICAgIHJldHVybiBbXS5zbGljZS5jYWxsKG5hdGl2ZUFycilcbiAgICBjYXNlICdCdWZmZXInOlxuICAgICAgdHJ5IHsgdmFyIGIgPSBuZXcgQnVmZmVyKDEpIH0gY2F0Y2goZSkgeyB0aHJvdyBuZXcgRXJyb3IoJ0J1ZmZlciBub3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQuIFVzZSBOb2RlLmpzIG9yIEJyb3dzZXJpZnkgZm9yIGJyb3dzZXIgc3VwcG9ydC4nKX1cbiAgICAgIHJldHVybiBuZXcgQnVmZmVyKG5hdGl2ZUFycilcbiAgICBjYXNlICdVaW50OEFycmF5JzpcbiAgICAgIHJldHVybiBuYXRpdmVBcnJcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG9wdGlvbnMudHlwZSArIFwiIGlzIHVuc3VwcG9ydGVkLlwiKVxuICB9XG59XG5cbnNlY3VyZVJhbmRvbS5yYW5kb21BcnJheSA9IGZ1bmN0aW9uKGJ5dGVDb3VudCkge1xuICByZXR1cm4gc2VjdXJlUmFuZG9tKGJ5dGVDb3VudCwge3R5cGU6ICdBcnJheSd9KVxufVxuXG5zZWN1cmVSYW5kb20ucmFuZG9tVWludDhBcnJheSA9IGZ1bmN0aW9uKGJ5dGVDb3VudCkge1xuICByZXR1cm4gc2VjdXJlUmFuZG9tKGJ5dGVDb3VudCwge3R5cGU6ICdVaW50OEFycmF5J30pXG59XG5cbnNlY3VyZVJhbmRvbS5yYW5kb21CdWZmZXIgPSBmdW5jdGlvbihieXRlQ291bnQpIHtcbiAgcmV0dXJuIHNlY3VyZVJhbmRvbShieXRlQ291bnQsIHt0eXBlOiAnQnVmZmVyJ30pXG59XG5cblxufSh0aGlzKTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvZGwvfi9zZWN1cmUtcmFuZG9tL2xpYi9zZWN1cmUtcmFuZG9tLmpzXG4gKiogbW9kdWxlIGlkID0gNzlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN2ZUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTs7Ozs7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7OztBQ1ZBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQVlBO0FBQ0E7QUFBQTtBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBTUE7QUFBQTtBQUNBOztBQW5CQTtBQUNBO0FBb0JBOzs7OztBQUtBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBRUE7QUFDQTtBQUNBOztBQUNBO0FBUkE7QUFDQTtBQVNBO0FBQ0E7QUFDQTs7QUFEQTs7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUF4QkE7QUFDQTtBQXlCQTtBQUNBO0FBQ0E7O0FBREE7O0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTs7QUFFQTs7QUFBQTtBQUFBO0FBRUE7QUFJQTtBQUNBO0FBRUE7QUFUQTs7O0FBV0E7QUFwQkE7QUFzQkE7QUFDQTtBQURBO0FBR0E7O0FBQUE7O0FBQ0E7QUFBQTs7QUFDQTtBQUNBO0FBSEE7QUFRQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUxBO0FBT0E7QUFDQTtBQUFBO0FBQUE7QUFDQTs7QUFEQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFJQTtBQUFBOztBQUNBO0FBREE7QUFNQTtBQUNBO0FBR0E7QUE3QkE7QUFnQ0E7QUFDQTs7QUFEQTs7QUFDQTtBQUNBO0FBT0E7QUFUQTs7Ozs7Ozs7Ozs7O0FDcEtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUN6Z0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FDM0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQ25GQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUNoQ0E7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7QUFDQTtBQUNBOztBQUNBO0FBUEE7QUFDQTtBQVFBO0FBQ0E7QUFDQTs7QUFDQTtBQUhBO0FBQ0E7QUFJQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpBO0FBQ0E7QUFhQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFSQTtBQUNBO0FBQ0E7QUFRQTs7OztBQUdBO0FBQ0E7QUFBQTtBQURBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7O0FBQ0E7QUFGQTtBQUNBO0FBR0E7QUFDQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQVhBO0FBQ0E7QUFDQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBSEE7QUFDQTtBQUlBO0FBQ0E7QUFEQTtBQUNBO0FBRUE7QUFDQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBQ0E7Ozs7Ozs7Ozs7O0FDbEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ2xRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FDdFdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDM2tCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQzFGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQ3BxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUM1RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQ3pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDaEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQy9FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ3REQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDM0JBOzs7Ozs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQzVFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUN6SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FDbEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FDblBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUMxSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUM5TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUM1Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDckZBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFFQTtBQUNBO0FBREE7QUFDQTtBQUVBOztBQUFBOztBQUNBO0FBREE7QUFDQTtBQUVBO0FBQ0E7QUFEQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUhBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUdBO0FBQUE7QUFDQTtBQUNBO0FBTEE7QUFDQTtBQUNBO0FBS0E7Ozs7O0FBSUE7QUFDQTs7QUFEQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBQ0E7QUFDQTtBQUlBOzs7OztBQUlBO0FBQ0E7O0FBREE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVhBO0FBWUE7QUFDQTtBQUNBOztBQWZBO0FBQ0E7QUFpQkE7QUFDQTs7QUFEQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQUNBO0FBT0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFWQTtBQUNBO0FBQ0E7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUhBO0FBQ0E7QUFJQTtBQUNBO0FBREE7QUFDQTtBQUVBO0FBQ0E7QUFEQTtBQUNBO0FBRUE7QUFDQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBRUE7Ozs7Ozs7Ozs7O0FDbEhBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQUxBO0FBZUE7QUFDQTtBQUFBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7QUFDQTtBQUNBOztBQU5BO0FBT0E7QUFDQTs7QUFUQTs7Ozs7Ozs7Ozs7QUNmQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBQ0E7QUFLQTtBQUNBO0FBQUE7QUFBQTs7QUFDQTtBQUNBO0FBRUE7QUFMQTtBQUNBO0FBT0E7QUFFQTs7QUFGQTs7QUFFQTtBQUNBOztBQUVBO0FBV0E7QUFLQTtBQUNBO0FBQ0E7O0FBR0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7O0FBRUE7QUF2Q0E7QUFDQTtBQXdDQTtBQUVBOztBQUZBOztBQUVBO0FBQ0E7O0FBRUE7QUFXQTtBQU1BO0FBQ0E7QUFFQTtBQXpCQTtBQUNBO0FBMEJBO0FBR0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUpBO0FBSEE7QUFDQTtBQVNBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUhBO0FBQ0E7QUFJQTtBQUNBO0FBQUE7QUFDQTs7QUFDQTtBQUNBOztBQUNBO0FBRUE7QUFDQTtBQVJBO0FBQ0E7QUFTQTtBQUNBO0FBQUE7QUFDQTs7QUFDQTtBQUNBOztBQUdBO0FBQ0E7QUFSQTtBQUNBO0FBU0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7O0FBR0E7QUFQQTtBQUNBO0FBUUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBTEE7QUFDQTtBQU1BO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFDQTtBQU9BO0FBQ0E7QUFEQTtBQUNBO0FBRUE7QUFHQTtBQUFBO0FBQ0E7QUFDQTtBQUxBO0FBQ0E7Ozs7O0FBTUE7Ozs7Ozs7Ozs7O0FDcktBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDcnRCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDL1NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUMzRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDcEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDMUhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUMzUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNySkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ3RNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUMvRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDbFVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ2xGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNsVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUMxUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDOUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNoSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNuSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDMTJCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQzdFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDekRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ25IQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNoREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUN2Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUM1Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNqRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDbE9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ2p3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQzFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQy9MQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNwTEE7Ozs7Ozs7Ozs7OztBQ1RBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVCQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUFhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBOzs7Ozs7QUFNQTtBQUNBOzs7Ozs7OztBQVFBO0FBQ0E7Ozs7Ozs7O0FBUUE7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBOzs7Ozs7QUFNQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7Ozs7OztBQVNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUFXQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7OztBQWFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7QUFjQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUFBO0FBRUE7QUFBQTtBQUVBO0FBQUE7QUFFQTtBQUFBO0FBRUE7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQVNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBOzs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFVQTtBQUNBOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQVVBO0FBQ0E7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBOzs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7Ozs7Ozs7OztBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBU0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQVFBO0FBQ0E7Ozs7Ozs7Ozs7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQVNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBOzs7Ozs7Ozs7QUFVQTtBQUNBOzs7Ozs7O0FBT0E7O0FBRUE7QUFDQTtBQUtBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBU0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBVUE7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUlBO0FBQ0E7QUFFQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTs7QUFJQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBOztBQUlBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQVVBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7QUFhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQVNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBOzs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFTQTtBQUNBOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FBYUE7QUFDQTs7Ozs7Ozs7Ozs7O0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7OztBQWVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FBYUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7O0FBZUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FBWUE7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQVVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUFZQTtBQUNBOzs7Ozs7Ozs7Ozs7QUFhQTtBQUNBO0FBRUE7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFFQTtBQUFBO0FBRUE7QUFBQTtBQUVBO0FBQUE7QUFFQTtBQUFBO0FBRUE7QUFBQTtBQUVBO0FBQ0E7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBOzs7Ozs7QUFNQTtBQUNBOzs7Ozs7QUFXQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUlBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBVUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FBV0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQVdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQVlBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7O0FBQ0E7QUFBQTtBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUFXQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQVFBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTs7Ozs7O0FBTUE7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBY0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFVQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWUE7QUFDQTtBQUNBOzs7Ozs7OztBQVFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQVdBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUVBO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVCQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FBV0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTs7Ozs7O0FBTUE7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkE7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQVVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBRUE7QUFFQTs7QUFHQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQVNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBU0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBOztBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQVFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7QUFHQTs7QUFHQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUlBO0FBQ0E7O0FBR0E7QUFDQTs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7O0FBT0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7QUFFQTtBQU1BO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBRUE7QUFNQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFFQTtBQUVBO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQTtBQUVBO0FBQ0E7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7QUNycElBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBSEE7QUFDQTtBQUlBO0FBQ0E7O0FBREE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFWQTtBQUNBO0FBQ0E7QUFVQTtBQUNBO0FBQUE7QUFDQTs7QUFEQTs7O0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVEE7QUFDQTtBQVVBO0FBQ0E7QUFEQTtBQUNBO0FBRUE7QUFDQTs7QUFEQTs7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUNBOzs7OztBQUlBOzs7Ozs7Ozs7Ozs7O0FDL0NBOzs7Ozs7Ozs7QUNBQTs7Ozs7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OyIsInNvdXJjZVJvb3QiOiIifQ==